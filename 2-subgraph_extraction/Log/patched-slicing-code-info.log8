The analysis of 1 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3f98848d6e04a11f28e776b665fb14e58d56e015/patch_info.txt
{'1': {'before': 'a/libavformat/au.c', 'after': 'b/libavformat/au.c'}}
{'1': [{'before': '-64,6', 'after': '+64,7', 'function': 'static int au_read_header'}, {'before': '-80,7', 'after': '+81,13', 'function': 'static int au_read_header'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3f98848d6e04a11f28e776b665fb14e58d56e015---b/libavformat/au.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3f98848d6e04a11f28e776b665fb14e58d56e015---a/libavformat/au.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 2 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/31fdd641945dc5cdcfde9ee92329e22c0279981e/patch_info.txt
{'1': {'before': 'a/libavutil/rational.c', 'after': 'b/libavutil/rational.c'}}
{'1': [{'before': '-98,6', 'after': '+98,8', 'function': 'AVRational av_d2q'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/31fdd641945dc5cdcfde9ee92329e22c0279981e---b/libavutil/rational.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/31fdd641945dc5cdcfde9ee92329e22c0279981e---a/libavutil/rational.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 3 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3509eee19c03c23a14c6f226e6cc90072f323025/patch_info.txt
{'1': {'before': 'a/libavcodec/cook.c', 'after': 'b/libavcodec/cook.c'}}
{'1': [{'before': '-1024,7', 'after': '+1023,7', 'function': 'static void dump_cook_context'}, {'before': '-1072,9', 'after': '+1071,8', 'function': 'static av_cold int cook_decode_init'}, {'before': '-1101,7', 'after': '+1099,7', 'function': 'static av_cold int cook_decode_init'}, {'before': '-1116,21', 'after': '+1114,21', 'function': 'static av_cold int cook_decode_init'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3509eee19c03c23a14c6f226e6cc90072f323025---b/libavcodec/cook.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3509eee19c03c23a14c6f226e6cc90072f323025---a/libavcodec/cook.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 4 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3c1f60860da70e074c54bbbbe720474688eaafe9/patch_info.txt
{'1': {'before': 'a/libavformat/flacdec.c', 'after': 'b/libavformat/flacdec.c'}}
{'1': [{'before': '-54,6', 'after': '+55,7', 'function': 'static int flac_read_header'}, {'before': '-96,6', 'after': '+98,31', 'function': 'static int flac_read_header'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3c1f60860da70e074c54bbbbe720474688eaafe9---b/libavformat/flacdec.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3c1f60860da70e074c54bbbbe720474688eaafe9---a/libavformat/flacdec.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 5 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3c58300269768e2dcd5cd8b55d56ecab99cb32f1/patch_info.txt
{'1': {'before': 'a/libavformat/matroskadec.c', 'after': 'b/libavformat/matroskadec.c'}}
{'1': [{'before': '-1342,7', 'after': '+1342,7', 'function': 'static int matroska_read_header'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3c58300269768e2dcd5cd8b55d56ecab99cb32f1---b/libavformat/matroskadec.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3c58300269768e2dcd5cd8b55d56ecab99cb32f1---a/libavformat/matroskadec.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 6 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/35bffd7f3d82b6c1d28afc789189a6cff6f6e067/patch_info.txt
{'1': {'before': 'a/libavcodec/allcodecs.c', 'after': 'b/libavcodec/allcodecs.c'}, '2': {'before': 'a/libavcodec/vc1.c', 'after': 'b/libavcodec/vc1.c'}}
{'1': [{'before': '-254,6', 'after': '+254,7', 'function': 'void avcodec_register_all'}], '2': []}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/35bffd7f3d82b6c1d28afc789189a6cff6f6e067---b/libavcodec/allcodecs.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/35bffd7f3d82b6c1d28afc789189a6cff6f6e067---a/libavcodec/allcodecs.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/35bffd7f3d82b6c1d28afc789189a6cff6f6e067---b/libavcodec/vc1.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/35bffd7f3d82b6c1d28afc789189a6cff6f6e067---a/libavcodec/vc1.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 7 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/378251ad082c1ea78a8832cf82e9ae767a6cadff/patch_info.txt
{'1': {'before': 'a/libavformat/mov.c', 'after': 'b/libavformat/mov.c'}}
{'1': [{'before': '-919,6', 'after': '+919,8', 'function': 'static int mov_read_stsd'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/378251ad082c1ea78a8832cf82e9ae767a6cadff---b/libavformat/mov.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/378251ad082c1ea78a8832cf82e9ae767a6cadff---a/libavformat/mov.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 8 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/35686a289fcd2f9d7502e45002f168a753b11f9c/patch_info.txt
{'1': {'before': 'a/libavcodec/mpegaudiodec_template.c', 'after': 'b/libavcodec/mpegaudiodec_template.c'}}
{'1': [{'before': '-1722,6', 'after': '+1722,7', 'function': 'static int decode_frame_adu'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/35686a289fcd2f9d7502e45002f168a753b11f9c---b/libavcodec/mpegaudiodec_template.c
The case of compiler gcc with optimization no.
Patched source code file: mpegaudiodec_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/35686a289fcd2f9d7502e45002f168a753b11f9c/gcc_after/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: mpegaudiodec_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/35686a289fcd2f9d7502e45002f168a753b11f9c/gcc_after/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: mpegaudiodec_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/35686a289fcd2f9d7502e45002f168a753b11f9c/gcc_after/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: mpegaudiodec_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/35686a289fcd2f9d7502e45002f168a753b11f9c/gcc_after/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: mpegaudiodec_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/35686a289fcd2f9d7502e45002f168a753b11f9c/gcc_after/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: mpegaudiodec_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/35686a289fcd2f9d7502e45002f168a753b11f9c/gcc_after/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: mpegaudiodec_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/35686a289fcd2f9d7502e45002f168a753b11f9c/clang_after/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: mpegaudiodec_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/35686a289fcd2f9d7502e45002f168a753b11f9c/clang_after/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: mpegaudiodec_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/35686a289fcd2f9d7502e45002f168a753b11f9c/clang_after/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: mpegaudiodec_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/35686a289fcd2f9d7502e45002f168a753b11f9c/clang_after/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: mpegaudiodec_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/35686a289fcd2f9d7502e45002f168a753b11f9c/clang_after/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: mpegaudiodec_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/35686a289fcd2f9d7502e45002f168a753b11f9c/clang_after/Os: directory not exists.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/35686a289fcd2f9d7502e45002f168a753b11f9c---a/libavcodec/mpegaudiodec_template.c
The case of compiler gcc with optimization no.
Patched source code file: mpegaudiodec_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/35686a289fcd2f9d7502e45002f168a753b11f9c/gcc_before/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: mpegaudiodec_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/35686a289fcd2f9d7502e45002f168a753b11f9c/gcc_before/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: mpegaudiodec_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/35686a289fcd2f9d7502e45002f168a753b11f9c/gcc_before/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: mpegaudiodec_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/35686a289fcd2f9d7502e45002f168a753b11f9c/gcc_before/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: mpegaudiodec_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/35686a289fcd2f9d7502e45002f168a753b11f9c/gcc_before/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: mpegaudiodec_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/35686a289fcd2f9d7502e45002f168a753b11f9c/gcc_before/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: mpegaudiodec_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/35686a289fcd2f9d7502e45002f168a753b11f9c/clang_before/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: mpegaudiodec_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/35686a289fcd2f9d7502e45002f168a753b11f9c/clang_before/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: mpegaudiodec_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/35686a289fcd2f9d7502e45002f168a753b11f9c/clang_before/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: mpegaudiodec_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/35686a289fcd2f9d7502e45002f168a753b11f9c/clang_before/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: mpegaudiodec_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/35686a289fcd2f9d7502e45002f168a753b11f9c/clang_before/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: mpegaudiodec_template.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/35686a289fcd2f9d7502e45002f168a753b11f9c/clang_before/Os: directory not exists.
The analysis of 9 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/390b25aeda1e36df54366e1f5e821ecb0147ea54/patch_info.txt
{'1': {'before': 'a/libavcodec/dv.c', 'after': 'b/libavcodec/dv.c'}}
{'1': [{'before': '-1046,6', 'after': '+1046,7', 'function': 'static int dvvideo_decode_frame'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/390b25aeda1e36df54366e1f5e821ecb0147ea54---b/libavcodec/dv.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/390b25aeda1e36df54366e1f5e821ecb0147ea54---a/libavcodec/dv.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 10 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/363c3a44ff9afbf85fc2c4ba460173e39b0d043c/patch_info.txt
{'1': {'before': 'a/libavcodec/wmalosslessdec.c', 'after': 'b/libavcodec/wmalosslessdec.c'}}
{'1': [{'before': '-655,6', 'after': '+655,8', 'function': 'static void mclms_predict'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/363c3a44ff9afbf85fc2c4ba460173e39b0d043c---b/libavcodec/wmalosslessdec.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/363c3a44ff9afbf85fc2c4ba460173e39b0d043c---a/libavcodec/wmalosslessdec.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 11 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3749076c77ee59e79f4d2649c41e7714a207e4e3/patch_info.txt
{'1': {'before': 'a/cmdutils.c', 'after': 'b/cmdutils.c'}}
{'1': [{'before': '-127,10', 'after': '+127,10', 'function': 'void parse_options'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3749076c77ee59e79f4d2649c41e7714a207e4e3---b/cmdutils.c
The case of compiler gcc with optimization no.
Patched source code file: cmdutils.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3749076c77ee59e79f4d2649c41e7714a207e4e3/gcc_after/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: cmdutils.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3749076c77ee59e79f4d2649c41e7714a207e4e3/gcc_after/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: cmdutils.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3749076c77ee59e79f4d2649c41e7714a207e4e3/gcc_after/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: cmdutils.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3749076c77ee59e79f4d2649c41e7714a207e4e3/gcc_after/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: cmdutils.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3749076c77ee59e79f4d2649c41e7714a207e4e3/gcc_after/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: cmdutils.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3749076c77ee59e79f4d2649c41e7714a207e4e3/gcc_after/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: cmdutils.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3749076c77ee59e79f4d2649c41e7714a207e4e3/clang_after/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: cmdutils.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3749076c77ee59e79f4d2649c41e7714a207e4e3/clang_after/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: cmdutils.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3749076c77ee59e79f4d2649c41e7714a207e4e3/clang_after/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: cmdutils.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3749076c77ee59e79f4d2649c41e7714a207e4e3/clang_after/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: cmdutils.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3749076c77ee59e79f4d2649c41e7714a207e4e3/clang_after/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: cmdutils.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3749076c77ee59e79f4d2649c41e7714a207e4e3/clang_after/Os: directory not exists.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3749076c77ee59e79f4d2649c41e7714a207e4e3---a/cmdutils.c
The case of compiler gcc with optimization no.
Patched source code file: cmdutils.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3749076c77ee59e79f4d2649c41e7714a207e4e3/gcc_before/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: cmdutils.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3749076c77ee59e79f4d2649c41e7714a207e4e3/gcc_before/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: cmdutils.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3749076c77ee59e79f4d2649c41e7714a207e4e3/gcc_before/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: cmdutils.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3749076c77ee59e79f4d2649c41e7714a207e4e3/gcc_before/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: cmdutils.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3749076c77ee59e79f4d2649c41e7714a207e4e3/gcc_before/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: cmdutils.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3749076c77ee59e79f4d2649c41e7714a207e4e3/gcc_before/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: cmdutils.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3749076c77ee59e79f4d2649c41e7714a207e4e3/clang_before/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: cmdutils.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3749076c77ee59e79f4d2649c41e7714a207e4e3/clang_before/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: cmdutils.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3749076c77ee59e79f4d2649c41e7714a207e4e3/clang_before/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: cmdutils.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3749076c77ee59e79f4d2649c41e7714a207e4e3/clang_before/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: cmdutils.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3749076c77ee59e79f4d2649c41e7714a207e4e3/clang_before/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: cmdutils.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3749076c77ee59e79f4d2649c41e7714a207e4e3/clang_before/Os: directory not exists.
The analysis of 12 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/34ecc3975fa4f7d27deafd7eec636dc1fa828a09/patch_info.txt
{'1': {'before': 'a/libavformat/udp.c', 'after': 'b/libavformat/udp.c'}}
{'1': [{'before': '-236,6', 'after': '+237,7', 'function': 'static int udp_ipv6_set_local'}, {'before': '-311,9', 'after': '+313,11', 'function': 'static int udp_open'}, {'before': '-351,6', 'after': '+355,10', 'function': 'static int udp_open'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/34ecc3975fa4f7d27deafd7eec636dc1fa828a09---b/libavformat/udp.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/34ecc3975fa4f7d27deafd7eec636dc1fa828a09---a/libavformat/udp.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 13 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3b38f1c60b94bd531e08aa26a91cdd53b778d4dc/patch_info.txt
{'1': {'before': 'a/libswscale/swscale.c', 'after': 'b/libswscale/swscale.c'}}
{'1': [{'before': '-2262,24', 'after': '+2262,22', 'function': 'SwsContext *sws_getContext'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3b38f1c60b94bd531e08aa26a91cdd53b778d4dc---b/libswscale/swscale.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3b38f1c60b94bd531e08aa26a91cdd53b778d4dc---a/libswscale/swscale.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 14 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3ef6c5264b2590781b4ed556443ff49709dd45fb/patch_info.txt
{'1': {'before': 'a/libavformat/a64.c', 'after': 'b/libavformat/a64.c'}}
{'1': [{'before': '-35,6', 'after': '+35,12', 'function': 'static int a64_write_header'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3ef6c5264b2590781b4ed556443ff49709dd45fb---b/libavformat/a64.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3ef6c5264b2590781b4ed556443ff49709dd45fb---a/libavformat/a64.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 15 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/patch_info.txt
{'1': {'before': 'a/libavformat/options.c', 'after': 'b/libavformat/options.c'}, '2': {'before': 'a/libavformat/utils.c', 'after': 'b/libavformat/utils.c'}}
{'1': [{'before': '-40,6', 'after': '+41,10', 'function': 'static void *format_child_next'}, {'before': '-59,9', 'after': '+64,15', 'function': 'static const AVClass *format_child_class_next'}], '2': [{'before': '-575,7', 'after': '+575,7', 'function': 'int av_open_input_file'}, {'before': '-594,7', 'after': '+594,7', 'function': 'static int init_input'}, {'before': '-619,7', 'after': '+619,7', 'function': 'int avformat_open_input'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd---b/libavformat/options.c
The case of compiler gcc with optimization no.
Patched source code file: options.c
Patched function: 1---static void *format_child_next 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_after/no/options_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_after/no/options_gcc.s---format_child_next---after
function id: 22
function flag: True
There are 34 instructions for function: format_child_next in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '41', 'end': 50}, 'before': {'start': '40', 'end': 45}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 11, 'instruction': 'movq\t-8(%rsp), %rax'}, {'instIndex': 12, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 15, 'instruction': 'movq\t-8(%rsp), %rax'}, {'instIndex': 16, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 17, 'instruction': 'movq\t0x88(%rax), %rax'}, {'instIndex': 18, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 19, 'instruction': 'jne\t.L8'}, {'instIndex': 20, 'instruction': 'movq\t-8(%rsp), %rax'}, {'instIndex': 21, 'instruction': 'movq\t0x10(%rax), %rax'}, {'instIndex': 22, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 23, 'instruction': 'je\t.L6'}, {'instIndex': 24, 'instruction': 'movq\t-8(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'movq\t0x10(%rax), %rax'}, {'instIndex': 26, 'instruction': 'movq\t0x78(%rax), %rax'}, {'instIndex': 27, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 28, 'instruction': 'je\t.L6'}, {'instIndex': 29, 'instruction': 'movq\t-8(%rsp), %rax'}, {'instIndex': 30, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 31, 'instruction': 'ret'}, {'instIndex': 32, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 33, 'instruction': 'ret'}]}]
Patched function: 1---static const AVClass *format_child_class_next 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_after/no/options_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_after/no/options_gcc.s---format_child_class_next---after
function id: 23
function flag: True
There are 78 instructions for function: format_child_class_next in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 78}, 'before': {'start': '59', 'end': 67}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 40, 'instruction': 'jmp\t.L20'}, {'instIndex': 41, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 42, 'instruction': 'movq\t0x78(%rax), %rax'}, {'instIndex': 43, 'instruction': 'cmpq\t%rax, 8(%rsp)'}, {'instIndex': 44, 'instruction': 'je\t.L29'}, {'instIndex': 45, 'instruction': 'cmpq\t$0, 8(%rsp)'}, {'instIndex': 46, 'instruction': 'je\t.L21'}, {'instIndex': 47, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 48, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 49, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 50, 'instruction': 'movq\t%rax, 0x18(%rsp)'}, {'instIndex': 51, 'instruction': 'cmpq\t$0, 0x18(%rsp)'}, {'instIndex': 52, 'instruction': 'jne\t.L22'}, {'instIndex': 53, 'instruction': 'jmp\t.L21'}, {'instIndex': 54, 'instruction': 'nop'}, {'instIndex': 55, 'instruction': 'cmpq\t$0, 8(%rsp)'}, {'instIndex': 56, 'instruction': 'je\t.L23'}, {'instIndex': 57, 'instruction': 'cmpq\t$0, 0x18(%rsp)'}, {'instIndex': 58, 'instruction': 'jne\t.L26'}, {'instIndex': 59, 'instruction': 'cmpq\t$0, 8(%rsp)'}, {'instIndex': 60, 'instruction': 'jne\t.L25'}, {'instIndex': 61, 'instruction': 'jmp\t.L26'}, {'instIndex': 62, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 63, 'instruction': 'movq\t0x78(%rax), %rax'}, {'instIndex': 64, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 65, 'instruction': 'je\t.L26'}, {'instIndex': 66, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 67, 'instruction': 'movq\t0x78(%rax), %rax'}, {'instIndex': 68, 'instruction': 'jmp\t.L18'}, {'instIndex': 69, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 70, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 71, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 72, 'instruction': 'movq\t%rax, 0x18(%rsp)'}, {'instIndex': 73, 'instruction': 'cmpq\t$0, 0x18(%rsp)'}, {'instIndex': 74, 'instruction': 'jne\t.L27'}, {'instIndex': 75, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 76, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 77, 'instruction': 'ret'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_after/no/options.o
Binary file does not exist.
{'format_child_next': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 11, 'instruction': 'movq\t-8(%rsp), %rax'}, {'instIndex': 12, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 15, 'instruction': 'movq\t-8(%rsp), %rax'}, {'instIndex': 16, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 17, 'instruction': 'movq\t0x88(%rax), %rax'}, {'instIndex': 18, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 19, 'instruction': 'jne\t.L8'}, {'instIndex': 20, 'instruction': 'movq\t-8(%rsp), %rax'}, {'instIndex': 21, 'instruction': 'movq\t0x10(%rax), %rax'}, {'instIndex': 22, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 23, 'instruction': 'je\t.L6'}, {'instIndex': 24, 'instruction': 'movq\t-8(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'movq\t0x10(%rax), %rax'}, {'instIndex': 26, 'instruction': 'movq\t0x78(%rax), %rax'}, {'instIndex': 27, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 28, 'instruction': 'je\t.L6'}, {'instIndex': 29, 'instruction': 'movq\t-8(%rsp), %rax'}, {'instIndex': 30, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 31, 'instruction': 'ret'}, {'instIndex': 32, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 33, 'instruction': 'ret'}]}], 'format_child_class_next': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 40, 'instruction': 'jmp\t.L20'}, {'instIndex': 41, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 42, 'instruction': 'movq\t0x78(%rax), %rax'}, {'instIndex': 43, 'instruction': 'cmpq\t%rax, 8(%rsp)'}, {'instIndex': 44, 'instruction': 'je\t.L29'}, {'instIndex': 45, 'instruction': 'cmpq\t$0, 8(%rsp)'}, {'instIndex': 46, 'instruction': 'je\t.L21'}, {'instIndex': 47, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 48, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 49, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 50, 'instruction': 'movq\t%rax, 0x18(%rsp)'}, {'instIndex': 51, 'instruction': 'cmpq\t$0, 0x18(%rsp)'}, {'instIndex': 52, 'instruction': 'jne\t.L22'}, {'instIndex': 53, 'instruction': 'jmp\t.L21'}, {'instIndex': 54, 'instruction': 'nop'}, {'instIndex': 55, 'instruction': 'cmpq\t$0, 8(%rsp)'}, {'instIndex': 56, 'instruction': 'je\t.L23'}, {'instIndex': 57, 'instruction': 'cmpq\t$0, 0x18(%rsp)'}, {'instIndex': 58, 'instruction': 'jne\t.L26'}, {'instIndex': 59, 'instruction': 'cmpq\t$0, 8(%rsp)'}, {'instIndex': 60, 'instruction': 'jne\t.L25'}, {'instIndex': 61, 'instruction': 'jmp\t.L26'}, {'instIndex': 62, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 63, 'instruction': 'movq\t0x78(%rax), %rax'}, {'instIndex': 64, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 65, 'instruction': 'je\t.L26'}, {'instIndex': 66, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 67, 'instruction': 'movq\t0x78(%rax), %rax'}, {'instIndex': 68, 'instruction': 'jmp\t.L18'}, {'instIndex': 69, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 70, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 71, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 72, 'instruction': 'movq\t%rax, 0x18(%rsp)'}, {'instIndex': 73, 'instruction': 'cmpq\t$0, 0x18(%rsp)'}, {'instIndex': 74, 'instruction': 'jne\t.L27'}, {'instIndex': 75, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 76, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 77, 'instruction': 'ret'}]}]}
The case of compiler gcc with optimization O0.
Patched source code file: options.c
Patched function: 1---static void *format_child_next 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_after/O0/options_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_after/O0/options_gcc.s---format_child_next---after
function id: 22
function flag: True
There are 34 instructions for function: format_child_next in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '41', 'end': 50}, 'before': {'start': '40', 'end': 45}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 11, 'instruction': 'movq\t-8(%rsp), %rax'}, {'instIndex': 12, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 15, 'instruction': 'movq\t-8(%rsp), %rax'}, {'instIndex': 16, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 17, 'instruction': 'movq\t0x88(%rax), %rax'}, {'instIndex': 18, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 19, 'instruction': 'jne\t.L8'}, {'instIndex': 20, 'instruction': 'movq\t-8(%rsp), %rax'}, {'instIndex': 21, 'instruction': 'movq\t0x10(%rax), %rax'}, {'instIndex': 22, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 23, 'instruction': 'je\t.L6'}, {'instIndex': 24, 'instruction': 'movq\t-8(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'movq\t0x10(%rax), %rax'}, {'instIndex': 26, 'instruction': 'movq\t0x78(%rax), %rax'}, {'instIndex': 27, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 28, 'instruction': 'je\t.L6'}, {'instIndex': 29, 'instruction': 'movq\t-8(%rsp), %rax'}, {'instIndex': 30, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 31, 'instruction': 'ret'}, {'instIndex': 32, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 33, 'instruction': 'ret'}]}]
Patched function: 1---static const AVClass *format_child_class_next 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_after/O0/options_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_after/O0/options_gcc.s---format_child_class_next---after
function id: 23
function flag: True
There are 78 instructions for function: format_child_class_next in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 78}, 'before': {'start': '59', 'end': 67}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 40, 'instruction': 'jmp\t.L20'}, {'instIndex': 41, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 42, 'instruction': 'movq\t0x78(%rax), %rax'}, {'instIndex': 43, 'instruction': 'cmpq\t%rax, 8(%rsp)'}, {'instIndex': 44, 'instruction': 'je\t.L29'}, {'instIndex': 45, 'instruction': 'cmpq\t$0, 8(%rsp)'}, {'instIndex': 46, 'instruction': 'je\t.L21'}, {'instIndex': 47, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 48, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 49, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 50, 'instruction': 'movq\t%rax, 0x18(%rsp)'}, {'instIndex': 51, 'instruction': 'cmpq\t$0, 0x18(%rsp)'}, {'instIndex': 52, 'instruction': 'jne\t.L22'}, {'instIndex': 53, 'instruction': 'jmp\t.L21'}, {'instIndex': 54, 'instruction': 'nop'}, {'instIndex': 55, 'instruction': 'cmpq\t$0, 8(%rsp)'}, {'instIndex': 56, 'instruction': 'je\t.L23'}, {'instIndex': 57, 'instruction': 'cmpq\t$0, 0x18(%rsp)'}, {'instIndex': 58, 'instruction': 'jne\t.L26'}, {'instIndex': 59, 'instruction': 'cmpq\t$0, 8(%rsp)'}, {'instIndex': 60, 'instruction': 'jne\t.L25'}, {'instIndex': 61, 'instruction': 'jmp\t.L26'}, {'instIndex': 62, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 63, 'instruction': 'movq\t0x78(%rax), %rax'}, {'instIndex': 64, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 65, 'instruction': 'je\t.L26'}, {'instIndex': 66, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 67, 'instruction': 'movq\t0x78(%rax), %rax'}, {'instIndex': 68, 'instruction': 'jmp\t.L18'}, {'instIndex': 69, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 70, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 71, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 72, 'instruction': 'movq\t%rax, 0x18(%rsp)'}, {'instIndex': 73, 'instruction': 'cmpq\t$0, 0x18(%rsp)'}, {'instIndex': 74, 'instruction': 'jne\t.L27'}, {'instIndex': 75, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 76, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 77, 'instruction': 'ret'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_after/O0/options.o
Binary file does not exist.
{'format_child_next': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 11, 'instruction': 'movq\t-8(%rsp), %rax'}, {'instIndex': 12, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 15, 'instruction': 'movq\t-8(%rsp), %rax'}, {'instIndex': 16, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 17, 'instruction': 'movq\t0x88(%rax), %rax'}, {'instIndex': 18, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 19, 'instruction': 'jne\t.L8'}, {'instIndex': 20, 'instruction': 'movq\t-8(%rsp), %rax'}, {'instIndex': 21, 'instruction': 'movq\t0x10(%rax), %rax'}, {'instIndex': 22, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 23, 'instruction': 'je\t.L6'}, {'instIndex': 24, 'instruction': 'movq\t-8(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'movq\t0x10(%rax), %rax'}, {'instIndex': 26, 'instruction': 'movq\t0x78(%rax), %rax'}, {'instIndex': 27, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 28, 'instruction': 'je\t.L6'}, {'instIndex': 29, 'instruction': 'movq\t-8(%rsp), %rax'}, {'instIndex': 30, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 31, 'instruction': 'ret'}, {'instIndex': 32, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 33, 'instruction': 'ret'}]}], 'format_child_class_next': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 40, 'instruction': 'jmp\t.L20'}, {'instIndex': 41, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 42, 'instruction': 'movq\t0x78(%rax), %rax'}, {'instIndex': 43, 'instruction': 'cmpq\t%rax, 8(%rsp)'}, {'instIndex': 44, 'instruction': 'je\t.L29'}, {'instIndex': 45, 'instruction': 'cmpq\t$0, 8(%rsp)'}, {'instIndex': 46, 'instruction': 'je\t.L21'}, {'instIndex': 47, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 48, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 49, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 50, 'instruction': 'movq\t%rax, 0x18(%rsp)'}, {'instIndex': 51, 'instruction': 'cmpq\t$0, 0x18(%rsp)'}, {'instIndex': 52, 'instruction': 'jne\t.L22'}, {'instIndex': 53, 'instruction': 'jmp\t.L21'}, {'instIndex': 54, 'instruction': 'nop'}, {'instIndex': 55, 'instruction': 'cmpq\t$0, 8(%rsp)'}, {'instIndex': 56, 'instruction': 'je\t.L23'}, {'instIndex': 57, 'instruction': 'cmpq\t$0, 0x18(%rsp)'}, {'instIndex': 58, 'instruction': 'jne\t.L26'}, {'instIndex': 59, 'instruction': 'cmpq\t$0, 8(%rsp)'}, {'instIndex': 60, 'instruction': 'jne\t.L25'}, {'instIndex': 61, 'instruction': 'jmp\t.L26'}, {'instIndex': 62, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 63, 'instruction': 'movq\t0x78(%rax), %rax'}, {'instIndex': 64, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 65, 'instruction': 'je\t.L26'}, {'instIndex': 66, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 67, 'instruction': 'movq\t0x78(%rax), %rax'}, {'instIndex': 68, 'instruction': 'jmp\t.L18'}, {'instIndex': 69, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 70, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 71, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 72, 'instruction': 'movq\t%rax, 0x18(%rsp)'}, {'instIndex': 73, 'instruction': 'cmpq\t$0, 0x18(%rsp)'}, {'instIndex': 74, 'instruction': 'jne\t.L27'}, {'instIndex': 75, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 76, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 77, 'instruction': 'ret'}]}]}
The case of compiler gcc with optimization O1.
Patched source code file: options.c
Patched function: 1---static void *format_child_next 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_after/O1/options_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_after/O1/options_gcc.s---format_child_next---after
function id: 2
function flag: True
There are 110 instructions for function: format_child_next in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '41', 'end': 50}, 'before': {'start': '40', 'end': 45}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 1, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 7, 'instruction': 'movq\t8(%rdi), %rdx'}, {'instIndex': 10, 'instruction': 'cmpq\t$0, 0x88(%rdx)'}, {'instIndex': 11, 'instruction': 'je\t.L7'}, {'instIndex': 12, 'instruction': 'ret'}, {'instIndex': 13, 'instruction': 'movq\t0x10(%rdi), %rdx'}, {'instIndex': 14, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 15, 'instruction': 'je\t.L9'}, {'instIndex': 16, 'instruction': 'movq\t0x78(%rdx), %rdx'}, {'instIndex': 17, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 18, 'instruction': 'cmove\t%rdx, %rax'}, {'instIndex': 19, 'instruction': 'ret'}, {'instIndex': 20, 'instruction': 'movq\t%rdx, %rax'}, {'instIndex': 21, 'instruction': 'jmp\t.L5'}]}]
Patched function: 1---static const AVClass *format_child_class_next 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_after/O1/options_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_after/O1/options_gcc.s---format_child_class_next---after
function id: 4
function flag: True
There are 87 instructions for function: format_child_class_next in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 78}, 'before': {'start': '59', 'end': 67}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 21, 'instruction': 'popq\t%rbx'}, {'instIndex': 22, 'instruction': 'popq\t%rbp'}, {'instIndex': 23, 'instruction': 'popq\t%r12'}, {'instIndex': 24, 'instruction': 'ret'}, {'instIndex': 32, 'instruction': 'testb\t%bpl, %bpl'}, {'instIndex': 33, 'instruction': 'je\t.L23'}, {'instIndex': 34, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 35, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 36, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 37, 'instruction': 'je\t.L31'}, {'instIndex': 38, 'instruction': 'cmpq\t%rbx, 0x78(%rax)'}, {'instIndex': 39, 'instruction': 'jne\t.L20'}, {'instIndex': 40, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 41, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 42, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 43, 'instruction': 'je\t.L11'}, {'instIndex': 44, 'instruction': 'movq\t0x78(%rax), %rdx'}, {'instIndex': 45, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 46, 'instruction': 'je\t.L23'}, {'instIndex': 47, 'instruction': 'movq\t%rdx, %rax'}, {'instIndex': 48, 'instruction': 'jmp\t.L11'}, {'instIndex': 49, 'instruction': 'testb\t%r12b, %r12b'}, {'instIndex': 50, 'instruction': 'je\t.L11'}, {'instIndex': 51, 'instruction': 'jmp\t.L23'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_after/O1/options.o
Binary file does not exist.
{'format_child_next': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 1, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 7, 'instruction': 'movq\t8(%rdi), %rdx'}, {'instIndex': 10, 'instruction': 'cmpq\t$0, 0x88(%rdx)'}, {'instIndex': 11, 'instruction': 'je\t.L7'}, {'instIndex': 12, 'instruction': 'ret'}, {'instIndex': 13, 'instruction': 'movq\t0x10(%rdi), %rdx'}, {'instIndex': 14, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 15, 'instruction': 'je\t.L9'}, {'instIndex': 16, 'instruction': 'movq\t0x78(%rdx), %rdx'}, {'instIndex': 17, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 18, 'instruction': 'cmove\t%rdx, %rax'}, {'instIndex': 19, 'instruction': 'ret'}, {'instIndex': 20, 'instruction': 'movq\t%rdx, %rax'}, {'instIndex': 21, 'instruction': 'jmp\t.L5'}]}], 'format_child_class_next': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 21, 'instruction': 'popq\t%rbx'}, {'instIndex': 22, 'instruction': 'popq\t%rbp'}, {'instIndex': 23, 'instruction': 'popq\t%r12'}, {'instIndex': 24, 'instruction': 'ret'}, {'instIndex': 32, 'instruction': 'testb\t%bpl, %bpl'}, {'instIndex': 33, 'instruction': 'je\t.L23'}, {'instIndex': 34, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 35, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 36, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 37, 'instruction': 'je\t.L31'}, {'instIndex': 38, 'instruction': 'cmpq\t%rbx, 0x78(%rax)'}, {'instIndex': 39, 'instruction': 'jne\t.L20'}, {'instIndex': 40, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 41, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 42, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 43, 'instruction': 'je\t.L11'}, {'instIndex': 44, 'instruction': 'movq\t0x78(%rax), %rdx'}, {'instIndex': 45, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 46, 'instruction': 'je\t.L23'}, {'instIndex': 47, 'instruction': 'movq\t%rdx, %rax'}, {'instIndex': 48, 'instruction': 'jmp\t.L11'}, {'instIndex': 49, 'instruction': 'testb\t%r12b, %r12b'}, {'instIndex': 50, 'instruction': 'je\t.L11'}, {'instIndex': 51, 'instruction': 'jmp\t.L23'}]}]}
The case of compiler gcc with optimization O2.
Patched source code file: options.c
Patched function: 1---static void *format_child_next 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_after/O2/options_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_after/O2/options_gcc.s---format_child_next---after
function id: 24
function flag: True
There are 56 instructions for function: format_child_next in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '41', 'end': 50}, 'before': {'start': '40', 'end': 45}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 1, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 7, 'instruction': 'movq\t8(%rdi), %rdx'}, {'instIndex': 10, 'instruction': 'cmpq\t$0, 0x88(%rdx)'}, {'instIndex': 11, 'instruction': 'je\t.L32'}, {'instIndex': 12, 'instruction': 'ret'}, {'instIndex': 13, 'instruction': 'movq\t0x10(%rdi), %rdx'}, {'instIndex': 14, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 15, 'instruction': 'je\t.L34'}, {'instIndex': 16, 'instruction': 'cmpq\t$0, 0x78(%rdx)'}, {'instIndex': 17, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 18, 'instruction': 'cmove\t%rdx, %rax'}, {'instIndex': 19, 'instruction': 'ret'}, {'instIndex': 20, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 21, 'instruction': 'ret'}]}]
Patched function: 1---static const AVClass *format_child_class_next 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_after/O2/options_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_after/O2/options_gcc.s---format_child_class_next---after
function id: 0
function flag: True
There are 112 instructions for function: format_child_class_next in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 78}, 'before': {'start': '59', 'end': 67}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 23, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 24, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 25, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 26, 'instruction': 'je\t.L14'}, {'instIndex': 27, 'instruction': 'cmpq\t%rbx, 0x78(%rdi)'}, {'instIndex': 28, 'instruction': 'je\t.L12'}, {'instIndex': 29, 'instruction': 'testq\t%rbx, %rbx'}, {'instIndex': 30, 'instruction': 'jne\t.L24'}, {'instIndex': 31, 'instruction': 'jmp\t.L12'}, {'instIndex': 32, 'instruction': 'movq\t0x78(%rdi), %rax'}, {'instIndex': 33, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 34, 'instruction': 'jne\t.L1'}, {'instIndex': 35, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 36, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 37, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 38, 'instruction': 'jne\t.L13'}, {'instIndex': 39, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 40, 'instruction': 'popq\t%rbx'}, {'instIndex': 41, 'instruction': 'ret'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_after/O2/options.o
Binary file does not exist.
{'format_child_next': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 1, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 7, 'instruction': 'movq\t8(%rdi), %rdx'}, {'instIndex': 10, 'instruction': 'cmpq\t$0, 0x88(%rdx)'}, {'instIndex': 11, 'instruction': 'je\t.L32'}, {'instIndex': 12, 'instruction': 'ret'}, {'instIndex': 13, 'instruction': 'movq\t0x10(%rdi), %rdx'}, {'instIndex': 14, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 15, 'instruction': 'je\t.L34'}, {'instIndex': 16, 'instruction': 'cmpq\t$0, 0x78(%rdx)'}, {'instIndex': 17, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 18, 'instruction': 'cmove\t%rdx, %rax'}, {'instIndex': 19, 'instruction': 'ret'}, {'instIndex': 20, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 21, 'instruction': 'ret'}]}], 'format_child_class_next': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 23, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 24, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 25, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 26, 'instruction': 'je\t.L14'}, {'instIndex': 27, 'instruction': 'cmpq\t%rbx, 0x78(%rdi)'}, {'instIndex': 28, 'instruction': 'je\t.L12'}, {'instIndex': 29, 'instruction': 'testq\t%rbx, %rbx'}, {'instIndex': 30, 'instruction': 'jne\t.L24'}, {'instIndex': 31, 'instruction': 'jmp\t.L12'}, {'instIndex': 32, 'instruction': 'movq\t0x78(%rdi), %rax'}, {'instIndex': 33, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 34, 'instruction': 'jne\t.L1'}, {'instIndex': 35, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 36, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 37, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 38, 'instruction': 'jne\t.L13'}, {'instIndex': 39, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 40, 'instruction': 'popq\t%rbx'}, {'instIndex': 41, 'instruction': 'ret'}]}]}
The case of compiler gcc with optimization O3.
Patched source code file: options.c
Patched function: 1---static void *format_child_next 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_after/O3/options_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_after/O3/options_gcc.s---format_child_next---after
function id: 28
function flag: True
There are 56 instructions for function: format_child_next in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '41', 'end': 50}, 'before': {'start': '40', 'end': 45}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 1, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 7, 'instruction': 'movq\t8(%rdi), %rdx'}, {'instIndex': 10, 'instruction': 'cmpq\t$0, 0x88(%rdx)'}, {'instIndex': 11, 'instruction': 'je\t.L29'}, {'instIndex': 12, 'instruction': 'ret'}, {'instIndex': 13, 'instruction': 'movq\t0x10(%rdi), %rdx'}, {'instIndex': 14, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 15, 'instruction': 'je\t.L31'}, {'instIndex': 16, 'instruction': 'cmpq\t$0, 0x78(%rdx)'}, {'instIndex': 17, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 18, 'instruction': 'cmove\t%rdx, %rax'}, {'instIndex': 19, 'instruction': 'ret'}, {'instIndex': 20, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 21, 'instruction': 'ret'}]}]
Patched function: 1---static const AVClass *format_child_class_next 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_after/O3/options_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_after/O3/options_gcc.s---format_child_class_next---after
function id: 0
function flag: True
There are 114 instructions for function: format_child_class_next in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 78}, 'before': {'start': '59', 'end': 67}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 15, 'instruction': 'cmpq\t%rbx, 0x78(%rdi)'}, {'instIndex': 16, 'instruction': 'je\t.L13'}, {'instIndex': 17, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 18, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 19, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 20, 'instruction': 'jne\t.L12'}, {'instIndex': 21, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 22, 'instruction': 'popq\t%rbx'}, {'instIndex': 23, 'instruction': 'ret'}, {'instIndex': 35, 'instruction': 'movq\t0x78(%rdi), %rax'}, {'instIndex': 36, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 37, 'instruction': 'jne\t.L1'}, {'instIndex': 38, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 39, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 40, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 41, 'instruction': 'jne\t.L14'}, {'instIndex': 42, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 43, 'instruction': 'jmp\t.L1'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_after/O3/options.o
Binary file does not exist.
{'format_child_next': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 1, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 7, 'instruction': 'movq\t8(%rdi), %rdx'}, {'instIndex': 10, 'instruction': 'cmpq\t$0, 0x88(%rdx)'}, {'instIndex': 11, 'instruction': 'je\t.L29'}, {'instIndex': 12, 'instruction': 'ret'}, {'instIndex': 13, 'instruction': 'movq\t0x10(%rdi), %rdx'}, {'instIndex': 14, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 15, 'instruction': 'je\t.L31'}, {'instIndex': 16, 'instruction': 'cmpq\t$0, 0x78(%rdx)'}, {'instIndex': 17, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 18, 'instruction': 'cmove\t%rdx, %rax'}, {'instIndex': 19, 'instruction': 'ret'}, {'instIndex': 20, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 21, 'instruction': 'ret'}]}], 'format_child_class_next': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 15, 'instruction': 'cmpq\t%rbx, 0x78(%rdi)'}, {'instIndex': 16, 'instruction': 'je\t.L13'}, {'instIndex': 17, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 18, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 19, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 20, 'instruction': 'jne\t.L12'}, {'instIndex': 21, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 22, 'instruction': 'popq\t%rbx'}, {'instIndex': 23, 'instruction': 'ret'}, {'instIndex': 35, 'instruction': 'movq\t0x78(%rdi), %rax'}, {'instIndex': 36, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 37, 'instruction': 'jne\t.L1'}, {'instIndex': 38, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 39, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 40, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 41, 'instruction': 'jne\t.L14'}, {'instIndex': 42, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 43, 'instruction': 'jmp\t.L1'}]}]}
The case of compiler gcc with optimization Os.
Patched source code file: options.c
Patched function: 1---static void *format_child_next 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_after/Os/options_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_after/Os/options_gcc.s---format_child_next---after
function id: 25
function flag: True
There are 50 instructions for function: format_child_next in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '41', 'end': 50}, 'before': {'start': '40', 'end': 45}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 1, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 7, 'instruction': 'movq\t8(%rdi), %rdx'}, {'instIndex': 10, 'instruction': 'cmpq\t$0, 0x88(%rdx)'}, {'instIndex': 11, 'instruction': 'jne\t.L30'}, {'instIndex': 12, 'instruction': 'movq\t0x10(%rdi), %rdx'}, {'instIndex': 13, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 14, 'instruction': 'je\t.L34'}, {'instIndex': 15, 'instruction': 'cmpq\t$0, 0x78(%rdx)'}, {'instIndex': 16, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 17, 'instruction': 'cmove\t%rdx, %rax'}, {'instIndex': 18, 'instruction': 'ret'}, {'instIndex': 19, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 20, 'instruction': 'ret'}]}]
Patched function: 1---static const AVClass *format_child_class_next 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_after/Os/options_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_after/Os/options_gcc.s---format_child_class_next---after
function id: 0
function flag: True
There are 124 instructions for function: format_child_class_next in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 78}, 'before': {'start': '59', 'end': 67}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 32, 'instruction': 'testq\t%r12, %r12'}, {'instIndex': 33, 'instruction': 'je\t.L9'}, {'instIndex': 34, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 35, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 36, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 37, 'instruction': 'je\t.L9'}, {'instIndex': 38, 'instruction': 'cmpq\t%r12, 0x78(%rdi)'}, {'instIndex': 39, 'instruction': 'jne\t.L10'}, {'instIndex': 40, 'instruction': 'testq\t%rdi, %rdi'}, {'instIndex': 41, 'instruction': 'setne\t%al'}, {'instIndex': 42, 'instruction': 'testb\t%bpl, %al'}, {'instIndex': 43, 'instruction': 'jne\t.L20'}, {'instIndex': 44, 'instruction': 'testb\t%bl, %bl'}, {'instIndex': 45, 'instruction': 'jne\t.L20'}, {'instIndex': 46, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 47, 'instruction': 'jmp\t.L1'}, {'instIndex': 48, 'instruction': 'movq\t0x78(%rdi), %rax'}, {'instIndex': 49, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 50, 'instruction': 'jne\t.L1'}, {'instIndex': 51, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 52, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 53, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 54, 'instruction': 'jne\t.L13'}, {'instIndex': 55, 'instruction': 'jmp\t.L14'}, {'instIndex': 56, 'instruction': 'popq\t%rbx'}, {'instIndex': 57, 'instruction': 'popq\t%rbp'}, {'instIndex': 58, 'instruction': 'popq\t%r12'}, {'instIndex': 59, 'instruction': 'ret'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_after/Os/options.o
Binary file does not exist.
{'format_child_next': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 1, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 7, 'instruction': 'movq\t8(%rdi), %rdx'}, {'instIndex': 10, 'instruction': 'cmpq\t$0, 0x88(%rdx)'}, {'instIndex': 11, 'instruction': 'jne\t.L30'}, {'instIndex': 12, 'instruction': 'movq\t0x10(%rdi), %rdx'}, {'instIndex': 13, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 14, 'instruction': 'je\t.L34'}, {'instIndex': 15, 'instruction': 'cmpq\t$0, 0x78(%rdx)'}, {'instIndex': 16, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 17, 'instruction': 'cmove\t%rdx, %rax'}, {'instIndex': 18, 'instruction': 'ret'}, {'instIndex': 19, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 20, 'instruction': 'ret'}]}], 'format_child_class_next': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 32, 'instruction': 'testq\t%r12, %r12'}, {'instIndex': 33, 'instruction': 'je\t.L9'}, {'instIndex': 34, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 35, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 36, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 37, 'instruction': 'je\t.L9'}, {'instIndex': 38, 'instruction': 'cmpq\t%r12, 0x78(%rdi)'}, {'instIndex': 39, 'instruction': 'jne\t.L10'}, {'instIndex': 40, 'instruction': 'testq\t%rdi, %rdi'}, {'instIndex': 41, 'instruction': 'setne\t%al'}, {'instIndex': 42, 'instruction': 'testb\t%bpl, %al'}, {'instIndex': 43, 'instruction': 'jne\t.L20'}, {'instIndex': 44, 'instruction': 'testb\t%bl, %bl'}, {'instIndex': 45, 'instruction': 'jne\t.L20'}, {'instIndex': 46, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 47, 'instruction': 'jmp\t.L1'}, {'instIndex': 48, 'instruction': 'movq\t0x78(%rdi), %rax'}, {'instIndex': 49, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 50, 'instruction': 'jne\t.L1'}, {'instIndex': 51, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 52, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 53, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 54, 'instruction': 'jne\t.L13'}, {'instIndex': 55, 'instruction': 'jmp\t.L14'}, {'instIndex': 56, 'instruction': 'popq\t%rbx'}, {'instIndex': 57, 'instruction': 'popq\t%rbp'}, {'instIndex': 58, 'instruction': 'popq\t%r12'}, {'instIndex': 59, 'instruction': 'ret'}]}]}
The case of compiler clang with optimization no.
Patched source code file: options.c
Patched function: 1---static void *format_child_next 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_after/no/options.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_after/no/options.s---format_child_next---after
function id: 4
function flag: True
There are 30 instructions for function: format_child_next in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '41', 'end': 50}, 'before': {'start': '40', 'end': 45}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 9, 'instruction': 'movq\t-0x20(%rsp), %rax'}, {'instIndex': 10, 'instruction': 'cmpq\t$0, 8(%rax)'}, {'instIndex': 11, 'instruction': 'je\t.LBB4_4'}, {'instIndex': 12, 'instruction': 'movq\t-0x20(%rsp), %rax'}, {'instIndex': 13, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 14, 'instruction': 'cmpq\t$0, 0x88(%rax)'}, {'instIndex': 15, 'instruction': 'jne\t.LBB4_6'}, {'instIndex': 16, 'instruction': 'movq\t-0x20(%rsp), %rax'}, {'instIndex': 17, 'instruction': 'cmpq\t$0, 0x10(%rax)'}, {'instIndex': 18, 'instruction': 'je\t.LBB4_7'}, {'instIndex': 19, 'instruction': 'movq\t-0x20(%rsp), %rax'}, {'instIndex': 20, 'instruction': 'movq\t0x10(%rax), %rax'}, {'instIndex': 21, 'instruction': 'cmpq\t$0, 0x78(%rax)'}, {'instIndex': 23, 'instruction': 'movq\t-0x20(%rsp), %rax'}, {'instIndex': 24, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 25, 'instruction': 'movq\t%rax, -8(%rsp)'}, {'instIndex': 26, 'instruction': 'jmp\t.LBB4_8'}, {'instIndex': 27, 'instruction': 'movq\t$0, -8(%rsp)'}, {'instIndex': 28, 'instruction': 'movq\t-8(%rsp), %rax'}, {'instIndex': 29, 'instruction': 'retq'}]}]
Patched function: 1---static const AVClass *format_child_class_next 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_after/no/options.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_after/no/options.s---format_child_class_next---after
function id: 5
function flag: True
There are 91 instructions for function: format_child_class_next in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 78}, 'before': {'start': '59', 'end': 67}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 45, 'instruction': 'jmp\t.LBB5_17'}, {'instIndex': 46, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 47, 'instruction': 'cmpq\t$0, 0x18(%rsp)'}, {'instIndex': 48, 'instruction': 'movb\t%al, 6(%rsp)                    # 1-byte Spill'}, {'instIndex': 49, 'instruction': 'je\t.LBB5_19'}, {'instIndex': 50, 'instruction': 'movq\t8(%rsp), %rdi'}, {'instIndex': 51, 'instruction': 'callq\tav_oformat_next@PLT'}, {'instIndex': 52, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 53, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 54, 'instruction': 'setne\t%al'}, {'instIndex': 55, 'instruction': 'movb\t%al, 6(%rsp)                    # 1-byte Spill'}, {'instIndex': 57, 'instruction': 'testb\t$1, %al'}, {'instIndex': 58, 'instruction': 'jne\t.LBB5_20'}, {'instIndex': 59, 'instruction': 'jmp\t.LBB5_23'}, {'instIndex': 60, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 61, 'instruction': 'movq\t0x78(%rax), %rax'}, {'instIndex': 62, 'instruction': 'cmpq\t0x18(%rsp), %rax'}, {'instIndex': 63, 'instruction': 'jne\t.LBB5_22'}, {'instIndex': 64, 'instruction': 'jmp\t.LBB5_23'}, {'instIndex': 65, 'instruction': 'jmp\t.LBB5_17'}, {'instIndex': 66, 'instruction': 'cmpq\t$0, 0x18(%rsp)'}, {'instIndex': 67, 'instruction': 'je\t.LBB5_25'}, {'instIndex': 68, 'instruction': 'cmpq\t$0, 8(%rsp)'}, {'instIndex': 69, 'instruction': 'jne\t.LBB5_26'}, {'instIndex': 70, 'instruction': 'cmpq\t$0, 0x18(%rsp)'}, {'instIndex': 71, 'instruction': 'jne\t.LBB5_32'}, {'instIndex': 72, 'instruction': 'jmp\t.LBB5_27'}, {'instIndex': 73, 'instruction': 'movq\t8(%rsp), %rdi'}, {'instIndex': 74, 'instruction': 'callq\tav_oformat_next@PLT'}, {'instIndex': 75, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 76, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 77, 'instruction': 'je\t.LBB5_31'}, {'instIndex': 78, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 79, 'instruction': 'cmpq\t$0, 0x78(%rax)'}, {'instIndex': 80, 'instruction': 'je\t.LBB5_30'}, {'instIndex': 81, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 82, 'instruction': 'movq\t0x78(%rax), %rax'}, {'instIndex': 83, 'instruction': 'movq\t%rax, 0x20(%rsp)'}, {'instIndex': 84, 'instruction': 'jmp\t.LBB5_33'}, {'instIndex': 85, 'instruction': 'jmp\t.LBB5_27'}, {'instIndex': 86, 'instruction': 'jmp\t.LBB5_32'}, {'instIndex': 87, 'instruction': 'movq\t$0, 0x20(%rsp)'}, {'instIndex': 88, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 89, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 90, 'instruction': 'retq'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_after/no/options.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_after/no/options.o---after
The extraction of function: format_child_next
Analyzing the binaries to generate subCFGs from patched function ...
It has 75 nodes and 104 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 30 instructions in binary file.
[4194584, 4194596, 4194615, 4194627, 4194643, 4194659, 4194668]
The extraction of function: format_child_class_next
Analyzing the binaries to generate subCFGs from patched function ...
It has 75 nodes and 104 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 91 instructions in binary file.
[4194876, 4194878, 4194892, 4194902, 4194918, 4194926, 4194928, 4194944, 4194946, 4194948, 4194956, 4194964, 4194972, 4194974, 4194984, 4194995, 4195007, 4195023, 4195025, 4195027, 4195036]
The execution time of patched subCFG information extraction via angr: 0:00:00.211945
{'format_child_next': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400143>, <DisassemblerInsn "mov" for 0x400148>, <DisassemblerInsn "cmp" for 0x40014c>, <DisassemblerInsn "je" for 0x400151>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400153>, <DisassemblerInsn "mov" for 0x400158>, <DisassemblerInsn "mov" for 0x40015c>, <DisassemblerInsn "jmp" for 0x400161>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400124>, <DisassemblerInsn "mov" for 0x400129>, <DisassemblerInsn "cmp" for 0x40012d>, <DisassemblerInsn "jne" for 0x400135>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000f0>, <DisassemblerInsn "mov" for 0x4000f5>, <DisassemblerInsn "mov" for 0x4000fa>, <DisassemblerInsn "mov" for 0x4000ff>, <DisassemblerInsn "cmp" for 0x400104>, <DisassemblerInsn "jne" for 0x40010a>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400137>, <DisassemblerInsn "cmp" for 0x40013c>, <DisassemblerInsn "je" for 0x400141>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40010c>, <DisassemblerInsn "cmp" for 0x400111>, <DisassemblerInsn "je" for 0x400116>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400118>, <DisassemblerInsn "cmp" for 0x40011d>, <DisassemblerInsn "je" for 0x400122>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40016c>, <DisassemblerInsn "ret" for 0x400171>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400163>, <DisassemblerInsn "mov" for 0x40016c>, <DisassemblerInsn "ret" for 0x400171>]'}], 'cfg_block_detailed_info': [{'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<cmp~~qword ptr [rax + 0x78], 0>', '<je~~0x400163>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp - 8], rax>', '<jmp~~0x40016c>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~qword ptr [rax + 0x88], 0>', '<jne~~0x400153>']}, {'block_Idx': 0, 'blockInsts': ['<mov~~qword ptr [rsp - 0x10], rdi>', '<mov~~qword ptr [rsp - 0x18], rsi>', '<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~qword ptr [rsp - 0x20], rax>', '<cmp~~qword ptr [rsp - 0x18], 0>', '<jne~~0x400163>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<cmp~~qword ptr [rax + 0x10], 0>', '<je~~0x400163>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<cmp~~qword ptr [rax + 0x18], 0>', '<je~~0x400163>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<cmp~~qword ptr [rax + 8], 0>', '<je~~0x400137>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 8]>', '<ret~~>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~qword ptr [rsp - 8], 0>', '<mov~~rax, qword ptr [rsp - 8]>', '<ret~~>']}], 'cfg_edge_info': [(6, 2), (1, 2), (3, 4), (5, 4), (4, 6), (5, 7), (4, 2), (6, 7), (0, 2), (7, 8), (1, 3), (3, 5)]}], 'format_child_class_next': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40026e>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400280>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40024c>, <DisassemblerInsn "call" for 0x400251>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "xor" for 0x40023e>, <DisassemblerInsn "cmp" for 0x400240>, <DisassemblerInsn "mov" for 0x400246>, <DisassemblerInsn "je" for 0x40024a>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002d3>, <DisassemblerInsn "mov" for 0x4002dc>, <DisassemblerInsn "add" for 0x4002e1>, <DisassemblerInsn "ret" for 0x4002e5>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400256>, <DisassemblerInsn "cmp" for 0x40025b>, <DisassemblerInsn "setne" for 0x40025f>, <DisassemblerInsn "mov" for 0x400262>, <DisassemblerInsn "mov" for 0x400266>, <DisassemblerInsn "test" for 0x40026a>, <DisassemblerInsn "jne" for 0x40026c>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40023c>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002dc>, <DisassemblerInsn "add" for 0x4002e1>, <DisassemblerInsn "ret" for 0x4002e5>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40028c>, <DisassemblerInsn "jne" for 0x400292>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4002d1>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40029c>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40029e>, <DisassemblerInsn "call" for 0x4002a3>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002a8>, <DisassemblerInsn "cmp" for 0x4002ad>, <DisassemblerInsn "je" for 0x4002b1>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400222>, <DisassemblerInsn "mov" for 0x400227>, <DisassemblerInsn "mov" for 0x40022e>, <DisassemblerInsn "jmp" for 0x400233>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400284>, <DisassemblerInsn "je" for 0x40028a>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400294>, <DisassemblerInsn "jne" for 0x40029a>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4002cf>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4001f4>, <DisassemblerInsn "jne" for 0x4001fa>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400266>, <DisassemblerInsn "test" for 0x40026a>, <DisassemblerInsn "jne" for 0x40026c>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002b3>, <DisassemblerInsn "cmp" for 0x4002b8>, <DisassemblerInsn "je" for 0x4002bd>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002bf>, <DisassemblerInsn "mov" for 0x4002c4>, <DisassemblerInsn "mov" for 0x4002c8>, <DisassemblerInsn "jmp" for 0x4002cd>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400270>, <DisassemblerInsn "mov" for 0x400275>, <DisassemblerInsn "cmp" for 0x400279>, <DisassemblerInsn "jne" for 0x40027e>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40023a>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400282>]'}], 'cfg_block_detailed_info': [{'block_Idx': 21, 'blockInsts': ['<jmp~~0x400284>']}, {'block_Idx': 27, 'blockInsts': ['<jmp~~0x400284>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}, {'block_Idx': 15, 'blockInsts': ['<xor~~eax, eax>', '<cmp~~qword ptr [rsp + 0x18], 0>', '<mov~~byte ptr [rsp + 6], al>', '<je~~0x400266>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~qword ptr [rsp + 0x20], 0>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~qword ptr [rsp + 8], rax>', '<cmp~~rax, 0>', '<setne~~al>', '<mov~~byte ptr [rsp + 6], al>', '<mov~~al, byte ptr [rsp + 6]>', '<test~~al, 1>', '<jne~~0x400270>']}, {'block_Idx': 13, 'blockInsts': ['<jmp~~0x40023e>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 31, 'blockInsts': ['<cmp~~qword ptr [rsp + 8], 0>', '<jne~~0x40029c>']}, {'block_Idx': 36, 'blockInsts': ['<jmp~~0x4002d3>']}, {'block_Idx': 32, 'blockInsts': ['<jmp~~0x40029e>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~qword ptr [rsp + 8], rax>', '<cmp~~rax, 0>', '<je~~0x4002d1>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x88]>', '<mov~~qword ptr [rsp + 0x20], rax>', '<jmp~~0x4002dc>']}, {'block_Idx': 26, 'blockInsts': ['<cmp~~qword ptr [rsp + 0x18], 0>', '<je~~0x400294>']}, {'block_Idx': 30, 'blockInsts': ['<cmp~~qword ptr [rsp + 0x18], 0>', '<jne~~0x4002d3>']}, {'block_Idx': 38, 'blockInsts': ['<jmp~~0x40029e>']}, {'block_Idx': 9, 'blockInsts': ['<cmp~~qword ptr [rsp + 0x18], 0>', '<jne~~0x40023c>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~al, byte ptr [rsp + 6]>', '<test~~al, 1>', '<jne~~0x400270>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<cmp~~qword ptr [rax + 0x78], 0>', '<je~~0x4002cf>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<mov~~rax, qword ptr [rax + 0x78]>', '<mov~~qword ptr [rsp + 0x20], rax>', '<jmp~~0x4002dc>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<mov~~rax, qword ptr [rax + 0x78]>', '<cmp~~rax, qword ptr [rsp + 0x18]>', '<jne~~0x400282>']}, {'block_Idx': 19, 'blockInsts': ['<jmp~~0x40023c>']}, {'block_Idx': 28, 'blockInsts': ['<jmp~~0x40023e>']}], 'cfg_edge_info': [(25, 29), (18, 23), (26, 30), (32, 34), (35, 36), (31, 32), (23, 22), (28, 15), (17, 21), (37, 39), (30, 33), (15, 17), (38, 34), (23, 21), (39, 29), (22, 28), (9, 13), (36, 33), (37, 38), (30, 32), (35, 37), (26, 31), (21, 26), (31, 30), (22, 27), (34, 35), (19, 13), (17, 22), (27, 26), (13, 15), (15, 18)]}]}
{'format_child_next': [4194584, 4194596, 4194615, 4194627, 4194643, 4194659, 4194668], 'format_child_class_next': [4194876, 4194878, 4194892, 4194902, 4194918, 4194926, 4194928, 4194944, 4194946, 4194948, 4194956, 4194964, 4194972, 4194974, 4194984, 4194995, 4195007, 4195023, 4195025, 4195027, 4195036]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_after/no/options.o---after
The extraction of function: format_child_next
[4194584, 4194596, 4194615, 4194627, 4194643, 4194659, 4194668]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 9 nodes and 13 edges in CFGEmulated.
It has 9 nodes and 14 edges in CDG.
It has 118 nodes and 129 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194584, 4194596, 4194615, 4194627, 4194643, 4194659, 4194668]
{4194659, 4194596, 4194627, 4194572, 4194668, 4194544, 4194643, 4194615, 4194584}
[3, 8, 2, 0, 5, 4, 6, 1, 7]
The extraction of function: format_child_class_next
[4194876, 4194878, 4194892, 4194902, 4194918, 4194926, 4194928, 4194944, 4194946, 4194948, 4194956, 4194964, 4194972, 4194974, 4194984, 4194995, 4195007, 4195023, 4195025, 4195027, 4195036]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 44 nodes and 65 edges in CFGEmulated.
It has 44 nodes and 74 edges in CDG.
It has 349 nodes and 460 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194876, 4194878, 4194892, 4194902, 4194918, 4194926, 4194928, 4194944, 4194946, 4194948, 4194956, 4194964, 4194972, 4194974, 4194984, 4194995, 4195007, 4195023, 4195025, 4195027, 4195036]
{4194944, 4194688, 4194946, 4194948, 4194824, 4194956, 4194835, 4194964, 4194715, 4194972, 4194974, 4194850, 4194984, 4194729, 4194995, 4194739, 4194872, 4194874, 4194876, 4194878, 4195007, 4194892, 4194765, 4195023, 4195025, 4195027, 4194902, 4195036, 4194788, 4194918, 4194796, 4194926, 4194928, 4194804, 4194812, 4194814}
[11, 25, 0, 14, 26, 29, 16, 1, 3, 19, 42, 36, 12, 24, 18, 30, 7, 15, 32, 10, 9, 43, 27, 8, 41, 33, 4, 28, 13, 21, 6, 35, 40, 22, 20, 34, 39, 31, 37, 2]
The execution time of patched slicing information extraction via angr: 0:00:02.582548
{'format_child_next': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400118>, <DisassemblerInsn "cmp" for 0x40011d>, <DisassemblerInsn "je" for 0x400122>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40016c>, <DisassemblerInsn "ret" for 0x400171>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400163>, <DisassemblerInsn "mov" for 0x40016c>, <DisassemblerInsn "ret" for 0x400171>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000f0>, <DisassemblerInsn "mov" for 0x4000f5>, <DisassemblerInsn "mov" for 0x4000fa>, <DisassemblerInsn "mov" for 0x4000ff>, <DisassemblerInsn "cmp" for 0x400104>, <DisassemblerInsn "jne" for 0x40010a>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400124>, <DisassemblerInsn "mov" for 0x400129>, <DisassemblerInsn "cmp" for 0x40012d>, <DisassemblerInsn "jne" for 0x400135>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400137>, <DisassemblerInsn "cmp" for 0x40013c>, <DisassemblerInsn "je" for 0x400141>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400143>, <DisassemblerInsn "mov" for 0x400148>, <DisassemblerInsn "cmp" for 0x40014c>, <DisassemblerInsn "je" for 0x400151>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40010c>, <DisassemblerInsn "cmp" for 0x400111>, <DisassemblerInsn "je" for 0x400116>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400153>, <DisassemblerInsn "mov" for 0x400158>, <DisassemblerInsn "mov" for 0x40015c>, <DisassemblerInsn "jmp" for 0x400161>]'}], 'cfg_block_detailed_info': [{'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<cmp~~qword ptr [rax + 8], 0>', '<je~~0x400137>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 8]>', '<ret~~>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~qword ptr [rsp - 8], 0>', '<mov~~rax, qword ptr [rsp - 8]>', '<ret~~>']}, {'block_Idx': 0, 'blockInsts': ['<mov~~qword ptr [rsp - 0x10], rdi>', '<mov~~qword ptr [rsp - 0x18], rsi>', '<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~qword ptr [rsp - 0x20], rax>', '<cmp~~qword ptr [rsp - 0x18], 0>', '<jne~~0x400163>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~qword ptr [rax + 0x88], 0>', '<jne~~0x400153>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<cmp~~qword ptr [rax + 0x10], 0>', '<je~~0x400163>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<cmp~~qword ptr [rax + 0x78], 0>', '<je~~0x400163>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<cmp~~qword ptr [rax + 0x18], 0>', '<je~~0x400163>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp - 8], rax>', '<jmp~~0x40016c>']}], 'cfg_edge_info': [(0, 1), (6, 2), (1, 2), (3, 4), (5, 4), (4, 6), (4, 2), (5, 7), (6, 7), (0, 2), (7, 8), (1, 3), (3, 5)], 'cdg_edge_info': [(0, 1), (3, 8), (1, 2), (6, 2), (3, 4), (3, 7), (5, 4), (4, 6), (6, 8), (4, 2), (6, 7), (0, 2), (1, 3), (3, 5)], 'ddg_edge_info': [(0, 1), (0, 7), (0, 4), (0, 3), (0, 6), (0, 2), (1, 7), (0, 5), (0, 8), (2, 8)]}], 'format_child_class_next': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4001ec>, <DisassemblerInsn "jne" for 0x4001f2>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400213>, <DisassemblerInsn "cmp" for 0x400218>, <DisassemblerInsn "je" for 0x400220>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400180>, <DisassemblerInsn "mov" for 0x400184>, <DisassemblerInsn "mov" for 0x400189>, <DisassemblerInsn "mov" for 0x400192>, <DisassemblerInsn "xor" for 0x40019b>, <DisassemblerInsn "cmp" for 0x40019d>, <DisassemblerInsn "mov" for 0x4001a3>, <DisassemblerInsn "je" for 0x4001a7>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40023c>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400284>, <DisassemblerInsn "je" for 0x40028a>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400256>, <DisassemblerInsn "cmp" for 0x40025b>, <DisassemblerInsn "setne" for 0x40025f>, <DisassemblerInsn "mov" for 0x400262>, <DisassemblerInsn "mov" for 0x400266>, <DisassemblerInsn "test" for 0x40026a>, <DisassemblerInsn "jne" for 0x40026c>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "xor" for 0x40023e>, <DisassemblerInsn "cmp" for 0x400240>, <DisassemblerInsn "mov" for 0x400246>, <DisassemblerInsn "je" for 0x40024a>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001c3>, <DisassemblerInsn "test" for 0x4001c7>, <DisassemblerInsn "jne" for 0x4001c9>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001cb>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40024c>, <DisassemblerInsn "call" for 0x400251>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4002cf>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002d3>, <DisassemblerInsn "mov" for 0x4002dc>, <DisassemblerInsn "add" for 0x4002e1>, <DisassemblerInsn "ret" for 0x4002e5>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "xor" for 0x40019b>, <DisassemblerInsn "cmp" for 0x40019d>, <DisassemblerInsn "mov" for 0x4001a3>, <DisassemblerInsn "je" for 0x4001a7>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40023a>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400266>, <DisassemblerInsn "test" for 0x40026a>, <DisassemblerInsn "jne" for 0x40026c>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400238>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001e0>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001fe>, <DisassemblerInsn "call" for 0x400203>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400294>, <DisassemblerInsn "jne" for 0x40029a>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4001f4>, <DisassemblerInsn "jne" for 0x4001fa>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001b3>, <DisassemblerInsn "cmp" for 0x4001b8>, <DisassemblerInsn "setne" for 0x4001bc>, <DisassemblerInsn "mov" for 0x4001bf>, <DisassemblerInsn "mov" for 0x4001c3>, <DisassemblerInsn "test" for 0x4001c7>, <DisassemblerInsn "jne" for 0x4001c9>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002bf>, <DisassemblerInsn "mov" for 0x4002c4>, <DisassemblerInsn "mov" for 0x4002c8>, <DisassemblerInsn "jmp" for 0x4002cd>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400280>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001e2>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002b3>, <DisassemblerInsn "cmp" for 0x4002b8>, <DisassemblerInsn "je" for 0x4002bd>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40028c>, <DisassemblerInsn "jne" for 0x400292>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001cd>, <DisassemblerInsn "mov" for 0x4001d2>, <DisassemblerInsn "cmp" for 0x4001d9>, <DisassemblerInsn "jne" for 0x4001de>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400282>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001fc>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40026e>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4001e4>, <DisassemblerInsn "je" for 0x4001ea>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40029c>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4002d1>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400270>, <DisassemblerInsn "mov" for 0x400275>, <DisassemblerInsn "cmp" for 0x400279>, <DisassemblerInsn "jne" for 0x40027e>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400208>, <DisassemblerInsn "cmp" for 0x40020d>, <DisassemblerInsn "je" for 0x400211>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002dc>, <DisassemblerInsn "add" for 0x4002e1>, <DisassemblerInsn "ret" for 0x4002e5>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002a8>, <DisassemblerInsn "cmp" for 0x4002ad>, <DisassemblerInsn "je" for 0x4002b1>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400222>, <DisassemblerInsn "mov" for 0x400227>, <DisassemblerInsn "mov" for 0x40022e>, <DisassemblerInsn "jmp" for 0x400233>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40029e>, <DisassemblerInsn "call" for 0x4002a3>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a9>, <DisassemblerInsn "call" for 0x4001ae>]'}], 'cfg_block_detailed_info': [{'block_Idx': 11, 'blockInsts': ['<cmp~~qword ptr [rsp + 0x10], 0>', '<jne~~0x4001fc>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~qword ptr [rax + 0x88], 0>', '<je~~0x400238>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x28>', '<mov~~qword ptr [rsp + 0x18], rdi>', '<mov~~qword ptr [rsp + 0x10], 0>', '<mov~~qword ptr [rsp + 8], 0>', '<xor~~eax, eax>', '<cmp~~qword ptr [rsp + 0x18], 0>', '<mov~~byte ptr [rsp + 7], al>', '<je~~0x4001c3>']}, {'block_Idx': 14, 'blockInsts': ['<jmp~~0x40023e>']}, {'block_Idx': 26, 'blockInsts': ['<cmp~~qword ptr [rsp + 0x18], 0>', '<je~~0x400294>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~qword ptr [rsp + 8], rax>', '<cmp~~rax, 0>', '<setne~~al>', '<mov~~byte ptr [rsp + 6], al>', '<mov~~al, byte ptr [rsp + 6]>', '<test~~al, 1>', '<jne~~0x400270>']}, {'block_Idx': 16, 'blockInsts': ['<xor~~eax, eax>', '<cmp~~qword ptr [rsp + 0x18], 0>', '<mov~~byte ptr [rsp + 6], al>', '<je~~0x400266>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~al, byte ptr [rsp + 7]>', '<test~~al, 1>', '<jne~~0x4001cd>']}, {'block_Idx': 3, 'blockInsts': ['<jmp~~0x4001e4>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}, {'block_Idx': 42, 'blockInsts': ['<jmp~~0x40029e>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~qword ptr [rsp + 0x20], 0>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 12, 'blockInsts': ['<xor~~eax, eax>', '<cmp~~qword ptr [rsp + 0x18], 0>', '<mov~~byte ptr [rsp + 7], al>', '<je~~0x4001c3>']}, {'block_Idx': 24, 'blockInsts': ['<jmp~~0x40023c>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~al, byte ptr [rsp + 6]>', '<test~~al, 1>', '<jne~~0x400270>']}, {'block_Idx': 30, 'blockInsts': ['<jmp~~0x4001fe>']}, {'block_Idx': 7, 'blockInsts': ['<jmp~~0x4001e4>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x10]>', '<call~~0x500018>']}, {'block_Idx': 32, 'blockInsts': ['<cmp~~qword ptr [rsp + 0x18], 0>', '<jne~~0x4002d3>']}, {'block_Idx': 10, 'blockInsts': ['<cmp~~qword ptr [rsp + 0x18], 0>', '<jne~~0x40023c>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~qword ptr [rsp + 0x10], rax>', '<cmp~~rax, 0>', '<setne~~al>', '<mov~~byte ptr [rsp + 7], al>', '<mov~~al, byte ptr [rsp + 7]>', '<test~~al, 1>', '<jne~~0x4001cd>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<mov~~rax, qword ptr [rax + 0x78]>', '<mov~~qword ptr [rsp + 0x20], rax>', '<jmp~~0x4002dc>']}, {'block_Idx': 27, 'blockInsts': ['<jmp~~0x400284>']}, {'block_Idx': 8, 'blockInsts': ['<jmp~~0x40019b>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<cmp~~qword ptr [rax + 0x78], 0>', '<je~~0x4002cf>']}, {'block_Idx': 33, 'blockInsts': ['<cmp~~qword ptr [rsp + 8], 0>', '<jne~~0x40029c>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x88]>', '<cmp~~rax, qword ptr [rsp + 0x18]>', '<jne~~0x4001e2>']}, {'block_Idx': 28, 'blockInsts': ['<jmp~~0x40023e>']}, {'block_Idx': 13, 'blockInsts': ['<jmp~~0x4001fe>']}, {'block_Idx': 21, 'blockInsts': ['<jmp~~0x400284>']}, {'block_Idx': 6, 'blockInsts': ['<cmp~~qword ptr [rsp + 0x18], 0>', '<je~~0x4001f4>']}, {'block_Idx': 35, 'blockInsts': ['<jmp~~0x40029e>']}, {'block_Idx': 40, 'blockInsts': ['<jmp~~0x4002d3>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<mov~~rax, qword ptr [rax + 0x78]>', '<cmp~~rax, qword ptr [rsp + 0x18]>', '<jne~~0x400282>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~qword ptr [rsp + 0x10], rax>', '<cmp~~rax, 0>', '<je~~0x40023a>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~qword ptr [rsp + 8], rax>', '<cmp~~rax, 0>', '<je~~0x4002d1>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x88]>', '<mov~~qword ptr [rsp + 0x20], rax>', '<jmp~~0x4002dc>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x10]>', '<call~~0x500018>']}], 'cfg_edge_info': [(12, 1), (41, 43), (26, 33), (14, 16), (0, 2), (8, 12), (30, 15), (24, 14), (37, 39), (6, 11), (16, 19), (33, 35), (41, 42), (33, 32), (15, 20), (25, 31), (26, 32), (32, 36), (18, 22), (29, 22), (20, 25), (4, 8), (3, 6), (39, 41), (22, 28), (9, 4), (0, 1), (31, 34), (11, 10), (10, 14), (11, 13), (19, 29), (7, 6), (12, 2), (32, 35), (42, 37), (16, 18), (6, 10), (35, 37), (25, 30), (29, 21), (4, 7), (18, 21), (21, 26), (20, 24), (22, 27), (9, 3), (40, 36), (28, 16), (39, 40), (1, 4), (10, 13), (2, 9), (27, 26), (13, 15), (43, 34)], 'cdg_edge_info': [(32, 37), (41, 43), (20, 14), (33, 39), (16, 29), (26, 33), (29, 26), (4, 12), (20, 26), (20, 32), (29, 32), (0, 2), (39, 36), (10, 15), (11, 20), (6, 11), (41, 39), (16, 19), (33, 35), (41, 42), (32, 39), (33, 32), (25, 31), (12, 9), (20, 16), (25, 34), (18, 22), (29, 22), (32, 36), (20, 25), (22, 16), (39, 41), (22, 28), (9, 4), (11, 10), (10, 14), (11, 13), (25, 15), (10, 20), (10, 26), (10, 32), (16, 21), (12, 2), (32, 35), (16, 18), (33, 37), (18, 21), (25, 30), (20, 24), (22, 27), (39, 40), (0, 9), (10, 13), (10, 16), (11, 15), (41, 37), (25, 20), (41, 34)], 'ddg_edge_info': [(16, 29), (2, 11), (15, 32), (2, 32), (20, 31), (2, 4), (0, 16), (15, 16), (19, 32), (15, 25), (0, 37), (20, 15), (39, 37), (12, 20), (0, 9), (22, 39), (4, 25), (25, 20), (2, 36), (0, 2), (41, 39), (19, 36), (0, 32), (2, 29), (0, 41), (29, 22), (39, 41), (4, 20), (19, 29), (0, 25), (2, 22), (0, 43), (29, 33), (4, 31), (2, 6), (19, 22), (2, 15), (0, 36), (2, 33), (15, 36), (9, 2), (0, 11), (37, 39), (19, 33), (0, 29), (2, 26), (15, 20), (43, 36), (29, 19), (15, 29), (20, 25), (29, 37), (0, 4), (2, 10), (19, 26), (0, 22), (2, 19), (37, 41), (0, 31), (2, 37), (15, 22), (15, 31), (16, 39), (39, 43), (0, 6), (0, 15), (2, 12), (37, 43), (19, 37), (0, 33), (15, 33), (9, 11), (9, 20), (37, 36), (9, 29), (0, 26), (12, 9), (15, 26), (9, 4), (0, 10), (0, 19), (2, 16), (15, 19), (15, 37), (29, 39), (31, 36), (19, 16), (9, 15), (0, 12), (2, 9)]}]}
{'format_child_next': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 9, 'instruction': 'movq\t-0x20(%rsp), %rax'}, {'instIndex': 10, 'instruction': 'cmpq\t$0, 8(%rax)'}, {'instIndex': 11, 'instruction': 'je\t.LBB4_4'}, {'instIndex': 12, 'instruction': 'movq\t-0x20(%rsp), %rax'}, {'instIndex': 13, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 14, 'instruction': 'cmpq\t$0, 0x88(%rax)'}, {'instIndex': 15, 'instruction': 'jne\t.LBB4_6'}, {'instIndex': 16, 'instruction': 'movq\t-0x20(%rsp), %rax'}, {'instIndex': 17, 'instruction': 'cmpq\t$0, 0x10(%rax)'}, {'instIndex': 18, 'instruction': 'je\t.LBB4_7'}, {'instIndex': 19, 'instruction': 'movq\t-0x20(%rsp), %rax'}, {'instIndex': 20, 'instruction': 'movq\t0x10(%rax), %rax'}, {'instIndex': 21, 'instruction': 'cmpq\t$0, 0x78(%rax)'}, {'instIndex': 23, 'instruction': 'movq\t-0x20(%rsp), %rax'}, {'instIndex': 24, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 25, 'instruction': 'movq\t%rax, -8(%rsp)'}, {'instIndex': 26, 'instruction': 'jmp\t.LBB4_8'}, {'instIndex': 27, 'instruction': 'movq\t$0, -8(%rsp)'}, {'instIndex': 28, 'instruction': 'movq\t-8(%rsp), %rax'}, {'instIndex': 29, 'instruction': 'retq'}]}], 'format_child_class_next': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 45, 'instruction': 'jmp\t.LBB5_17'}, {'instIndex': 46, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 47, 'instruction': 'cmpq\t$0, 0x18(%rsp)'}, {'instIndex': 48, 'instruction': 'movb\t%al, 6(%rsp)                    # 1-byte Spill'}, {'instIndex': 49, 'instruction': 'je\t.LBB5_19'}, {'instIndex': 50, 'instruction': 'movq\t8(%rsp), %rdi'}, {'instIndex': 51, 'instruction': 'callq\tav_oformat_next@PLT'}, {'instIndex': 52, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 53, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 54, 'instruction': 'setne\t%al'}, {'instIndex': 55, 'instruction': 'movb\t%al, 6(%rsp)                    # 1-byte Spill'}, {'instIndex': 57, 'instruction': 'testb\t$1, %al'}, {'instIndex': 58, 'instruction': 'jne\t.LBB5_20'}, {'instIndex': 59, 'instruction': 'jmp\t.LBB5_23'}, {'instIndex': 60, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 61, 'instruction': 'movq\t0x78(%rax), %rax'}, {'instIndex': 62, 'instruction': 'cmpq\t0x18(%rsp), %rax'}, {'instIndex': 63, 'instruction': 'jne\t.LBB5_22'}, {'instIndex': 64, 'instruction': 'jmp\t.LBB5_23'}, {'instIndex': 65, 'instruction': 'jmp\t.LBB5_17'}, {'instIndex': 66, 'instruction': 'cmpq\t$0, 0x18(%rsp)'}, {'instIndex': 67, 'instruction': 'je\t.LBB5_25'}, {'instIndex': 68, 'instruction': 'cmpq\t$0, 8(%rsp)'}, {'instIndex': 69, 'instruction': 'jne\t.LBB5_26'}, {'instIndex': 70, 'instruction': 'cmpq\t$0, 0x18(%rsp)'}, {'instIndex': 71, 'instruction': 'jne\t.LBB5_32'}, {'instIndex': 72, 'instruction': 'jmp\t.LBB5_27'}, {'instIndex': 73, 'instruction': 'movq\t8(%rsp), %rdi'}, {'instIndex': 74, 'instruction': 'callq\tav_oformat_next@PLT'}, {'instIndex': 75, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 76, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 77, 'instruction': 'je\t.LBB5_31'}, {'instIndex': 78, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 79, 'instruction': 'cmpq\t$0, 0x78(%rax)'}, {'instIndex': 80, 'instruction': 'je\t.LBB5_30'}, {'instIndex': 81, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 82, 'instruction': 'movq\t0x78(%rax), %rax'}, {'instIndex': 83, 'instruction': 'movq\t%rax, 0x20(%rsp)'}, {'instIndex': 84, 'instruction': 'jmp\t.LBB5_33'}, {'instIndex': 85, 'instruction': 'jmp\t.LBB5_27'}, {'instIndex': 86, 'instruction': 'jmp\t.LBB5_32'}, {'instIndex': 87, 'instruction': 'movq\t$0, 0x20(%rsp)'}, {'instIndex': 88, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 89, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 90, 'instruction': 'retq'}]}]}
The case of compiler clang with optimization O0.
Patched source code file: options.c
Patched function: 1---static void *format_child_next 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_after/O0/options.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_after/O0/options.s---format_child_next---after
function id: 4
function flag: True
There are 30 instructions for function: format_child_next in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '41', 'end': 50}, 'before': {'start': '40', 'end': 45}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 9, 'instruction': 'movq\t-0x20(%rsp), %rax'}, {'instIndex': 10, 'instruction': 'cmpq\t$0, 8(%rax)'}, {'instIndex': 11, 'instruction': 'je\t.LBB4_4'}, {'instIndex': 12, 'instruction': 'movq\t-0x20(%rsp), %rax'}, {'instIndex': 13, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 14, 'instruction': 'cmpq\t$0, 0x88(%rax)'}, {'instIndex': 15, 'instruction': 'jne\t.LBB4_6'}, {'instIndex': 16, 'instruction': 'movq\t-0x20(%rsp), %rax'}, {'instIndex': 17, 'instruction': 'cmpq\t$0, 0x10(%rax)'}, {'instIndex': 18, 'instruction': 'je\t.LBB4_7'}, {'instIndex': 19, 'instruction': 'movq\t-0x20(%rsp), %rax'}, {'instIndex': 20, 'instruction': 'movq\t0x10(%rax), %rax'}, {'instIndex': 21, 'instruction': 'cmpq\t$0, 0x78(%rax)'}, {'instIndex': 23, 'instruction': 'movq\t-0x20(%rsp), %rax'}, {'instIndex': 24, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 25, 'instruction': 'movq\t%rax, -8(%rsp)'}, {'instIndex': 26, 'instruction': 'jmp\t.LBB4_8'}, {'instIndex': 27, 'instruction': 'movq\t$0, -8(%rsp)'}, {'instIndex': 28, 'instruction': 'movq\t-8(%rsp), %rax'}, {'instIndex': 29, 'instruction': 'retq'}]}]
Patched function: 1---static const AVClass *format_child_class_next 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_after/O0/options.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_after/O0/options.s---format_child_class_next---after
function id: 5
function flag: True
There are 91 instructions for function: format_child_class_next in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 78}, 'before': {'start': '59', 'end': 67}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 45, 'instruction': 'jmp\t.LBB5_17'}, {'instIndex': 46, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 47, 'instruction': 'cmpq\t$0, 0x18(%rsp)'}, {'instIndex': 48, 'instruction': 'movb\t%al, 6(%rsp)                    # 1-byte Spill'}, {'instIndex': 49, 'instruction': 'je\t.LBB5_19'}, {'instIndex': 50, 'instruction': 'movq\t8(%rsp), %rdi'}, {'instIndex': 51, 'instruction': 'callq\tav_oformat_next@PLT'}, {'instIndex': 52, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 53, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 54, 'instruction': 'setne\t%al'}, {'instIndex': 55, 'instruction': 'movb\t%al, 6(%rsp)                    # 1-byte Spill'}, {'instIndex': 57, 'instruction': 'testb\t$1, %al'}, {'instIndex': 58, 'instruction': 'jne\t.LBB5_20'}, {'instIndex': 59, 'instruction': 'jmp\t.LBB5_23'}, {'instIndex': 60, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 61, 'instruction': 'movq\t0x78(%rax), %rax'}, {'instIndex': 62, 'instruction': 'cmpq\t0x18(%rsp), %rax'}, {'instIndex': 63, 'instruction': 'jne\t.LBB5_22'}, {'instIndex': 64, 'instruction': 'jmp\t.LBB5_23'}, {'instIndex': 65, 'instruction': 'jmp\t.LBB5_17'}, {'instIndex': 66, 'instruction': 'cmpq\t$0, 0x18(%rsp)'}, {'instIndex': 67, 'instruction': 'je\t.LBB5_25'}, {'instIndex': 68, 'instruction': 'cmpq\t$0, 8(%rsp)'}, {'instIndex': 69, 'instruction': 'jne\t.LBB5_26'}, {'instIndex': 70, 'instruction': 'cmpq\t$0, 0x18(%rsp)'}, {'instIndex': 71, 'instruction': 'jne\t.LBB5_32'}, {'instIndex': 72, 'instruction': 'jmp\t.LBB5_27'}, {'instIndex': 73, 'instruction': 'movq\t8(%rsp), %rdi'}, {'instIndex': 74, 'instruction': 'callq\tav_oformat_next@PLT'}, {'instIndex': 75, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 76, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 77, 'instruction': 'je\t.LBB5_31'}, {'instIndex': 78, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 79, 'instruction': 'cmpq\t$0, 0x78(%rax)'}, {'instIndex': 80, 'instruction': 'je\t.LBB5_30'}, {'instIndex': 81, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 82, 'instruction': 'movq\t0x78(%rax), %rax'}, {'instIndex': 83, 'instruction': 'movq\t%rax, 0x20(%rsp)'}, {'instIndex': 84, 'instruction': 'jmp\t.LBB5_33'}, {'instIndex': 85, 'instruction': 'jmp\t.LBB5_27'}, {'instIndex': 86, 'instruction': 'jmp\t.LBB5_32'}, {'instIndex': 87, 'instruction': 'movq\t$0, 0x20(%rsp)'}, {'instIndex': 88, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 89, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 90, 'instruction': 'retq'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_after/O0/options.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_after/O0/options.o---after
The extraction of function: format_child_next
Analyzing the binaries to generate subCFGs from patched function ...
It has 75 nodes and 104 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 30 instructions in binary file.
[4194584, 4194596, 4194615, 4194627, 4194643, 4194659, 4194668]
The extraction of function: format_child_class_next
Analyzing the binaries to generate subCFGs from patched function ...
It has 75 nodes and 104 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 91 instructions in binary file.
[4194876, 4194878, 4194892, 4194902, 4194918, 4194926, 4194928, 4194944, 4194946, 4194948, 4194956, 4194964, 4194972, 4194974, 4194984, 4194995, 4195007, 4195023, 4195025, 4195027, 4195036]
The execution time of patched subCFG information extraction via angr: 0:00:00.254536
{'format_child_next': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400143>, <DisassemblerInsn "mov" for 0x400148>, <DisassemblerInsn "cmp" for 0x40014c>, <DisassemblerInsn "je" for 0x400151>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400153>, <DisassemblerInsn "mov" for 0x400158>, <DisassemblerInsn "mov" for 0x40015c>, <DisassemblerInsn "jmp" for 0x400161>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400124>, <DisassemblerInsn "mov" for 0x400129>, <DisassemblerInsn "cmp" for 0x40012d>, <DisassemblerInsn "jne" for 0x400135>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000f0>, <DisassemblerInsn "mov" for 0x4000f5>, <DisassemblerInsn "mov" for 0x4000fa>, <DisassemblerInsn "mov" for 0x4000ff>, <DisassemblerInsn "cmp" for 0x400104>, <DisassemblerInsn "jne" for 0x40010a>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400137>, <DisassemblerInsn "cmp" for 0x40013c>, <DisassemblerInsn "je" for 0x400141>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40010c>, <DisassemblerInsn "cmp" for 0x400111>, <DisassemblerInsn "je" for 0x400116>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400118>, <DisassemblerInsn "cmp" for 0x40011d>, <DisassemblerInsn "je" for 0x400122>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40016c>, <DisassemblerInsn "ret" for 0x400171>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400163>, <DisassemblerInsn "mov" for 0x40016c>, <DisassemblerInsn "ret" for 0x400171>]'}], 'cfg_block_detailed_info': [{'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<cmp~~qword ptr [rax + 0x78], 0>', '<je~~0x400163>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp - 8], rax>', '<jmp~~0x40016c>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~qword ptr [rax + 0x88], 0>', '<jne~~0x400153>']}, {'block_Idx': 0, 'blockInsts': ['<mov~~qword ptr [rsp - 0x10], rdi>', '<mov~~qword ptr [rsp - 0x18], rsi>', '<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~qword ptr [rsp - 0x20], rax>', '<cmp~~qword ptr [rsp - 0x18], 0>', '<jne~~0x400163>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<cmp~~qword ptr [rax + 0x10], 0>', '<je~~0x400163>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<cmp~~qword ptr [rax + 0x18], 0>', '<je~~0x400163>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<cmp~~qword ptr [rax + 8], 0>', '<je~~0x400137>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 8]>', '<ret~~>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~qword ptr [rsp - 8], 0>', '<mov~~rax, qword ptr [rsp - 8]>', '<ret~~>']}], 'cfg_edge_info': [(6, 2), (1, 2), (3, 4), (5, 4), (4, 6), (5, 7), (4, 2), (6, 7), (0, 2), (7, 8), (1, 3), (3, 5)]}], 'format_child_class_next': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40026e>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400280>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40024c>, <DisassemblerInsn "call" for 0x400251>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "xor" for 0x40023e>, <DisassemblerInsn "cmp" for 0x400240>, <DisassemblerInsn "mov" for 0x400246>, <DisassemblerInsn "je" for 0x40024a>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002d3>, <DisassemblerInsn "mov" for 0x4002dc>, <DisassemblerInsn "add" for 0x4002e1>, <DisassemblerInsn "ret" for 0x4002e5>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400256>, <DisassemblerInsn "cmp" for 0x40025b>, <DisassemblerInsn "setne" for 0x40025f>, <DisassemblerInsn "mov" for 0x400262>, <DisassemblerInsn "mov" for 0x400266>, <DisassemblerInsn "test" for 0x40026a>, <DisassemblerInsn "jne" for 0x40026c>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40023c>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002dc>, <DisassemblerInsn "add" for 0x4002e1>, <DisassemblerInsn "ret" for 0x4002e5>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40028c>, <DisassemblerInsn "jne" for 0x400292>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4002d1>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40029c>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40029e>, <DisassemblerInsn "call" for 0x4002a3>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002a8>, <DisassemblerInsn "cmp" for 0x4002ad>, <DisassemblerInsn "je" for 0x4002b1>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400222>, <DisassemblerInsn "mov" for 0x400227>, <DisassemblerInsn "mov" for 0x40022e>, <DisassemblerInsn "jmp" for 0x400233>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400284>, <DisassemblerInsn "je" for 0x40028a>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400294>, <DisassemblerInsn "jne" for 0x40029a>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4002cf>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4001f4>, <DisassemblerInsn "jne" for 0x4001fa>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400266>, <DisassemblerInsn "test" for 0x40026a>, <DisassemblerInsn "jne" for 0x40026c>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002b3>, <DisassemblerInsn "cmp" for 0x4002b8>, <DisassemblerInsn "je" for 0x4002bd>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002bf>, <DisassemblerInsn "mov" for 0x4002c4>, <DisassemblerInsn "mov" for 0x4002c8>, <DisassemblerInsn "jmp" for 0x4002cd>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400270>, <DisassemblerInsn "mov" for 0x400275>, <DisassemblerInsn "cmp" for 0x400279>, <DisassemblerInsn "jne" for 0x40027e>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40023a>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400282>]'}], 'cfg_block_detailed_info': [{'block_Idx': 21, 'blockInsts': ['<jmp~~0x400284>']}, {'block_Idx': 27, 'blockInsts': ['<jmp~~0x400284>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}, {'block_Idx': 15, 'blockInsts': ['<xor~~eax, eax>', '<cmp~~qword ptr [rsp + 0x18], 0>', '<mov~~byte ptr [rsp + 6], al>', '<je~~0x400266>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~qword ptr [rsp + 0x20], 0>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~qword ptr [rsp + 8], rax>', '<cmp~~rax, 0>', '<setne~~al>', '<mov~~byte ptr [rsp + 6], al>', '<mov~~al, byte ptr [rsp + 6]>', '<test~~al, 1>', '<jne~~0x400270>']}, {'block_Idx': 13, 'blockInsts': ['<jmp~~0x40023e>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 31, 'blockInsts': ['<cmp~~qword ptr [rsp + 8], 0>', '<jne~~0x40029c>']}, {'block_Idx': 36, 'blockInsts': ['<jmp~~0x4002d3>']}, {'block_Idx': 32, 'blockInsts': ['<jmp~~0x40029e>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~qword ptr [rsp + 8], rax>', '<cmp~~rax, 0>', '<je~~0x4002d1>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x88]>', '<mov~~qword ptr [rsp + 0x20], rax>', '<jmp~~0x4002dc>']}, {'block_Idx': 26, 'blockInsts': ['<cmp~~qword ptr [rsp + 0x18], 0>', '<je~~0x400294>']}, {'block_Idx': 30, 'blockInsts': ['<cmp~~qword ptr [rsp + 0x18], 0>', '<jne~~0x4002d3>']}, {'block_Idx': 38, 'blockInsts': ['<jmp~~0x40029e>']}, {'block_Idx': 9, 'blockInsts': ['<cmp~~qword ptr [rsp + 0x18], 0>', '<jne~~0x40023c>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~al, byte ptr [rsp + 6]>', '<test~~al, 1>', '<jne~~0x400270>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<cmp~~qword ptr [rax + 0x78], 0>', '<je~~0x4002cf>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<mov~~rax, qword ptr [rax + 0x78]>', '<mov~~qword ptr [rsp + 0x20], rax>', '<jmp~~0x4002dc>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<mov~~rax, qword ptr [rax + 0x78]>', '<cmp~~rax, qword ptr [rsp + 0x18]>', '<jne~~0x400282>']}, {'block_Idx': 19, 'blockInsts': ['<jmp~~0x40023c>']}, {'block_Idx': 28, 'blockInsts': ['<jmp~~0x40023e>']}], 'cfg_edge_info': [(25, 29), (18, 23), (26, 30), (32, 34), (35, 36), (31, 32), (23, 22), (28, 15), (17, 21), (37, 39), (30, 33), (15, 17), (38, 34), (23, 21), (39, 29), (22, 28), (9, 13), (36, 33), (37, 38), (30, 32), (35, 37), (26, 31), (21, 26), (31, 30), (22, 27), (34, 35), (19, 13), (17, 22), (27, 26), (13, 15), (15, 18)]}]}
{'format_child_next': [4194584, 4194596, 4194615, 4194627, 4194643, 4194659, 4194668], 'format_child_class_next': [4194876, 4194878, 4194892, 4194902, 4194918, 4194926, 4194928, 4194944, 4194946, 4194948, 4194956, 4194964, 4194972, 4194974, 4194984, 4194995, 4195007, 4195023, 4195025, 4195027, 4195036]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_after/O0/options.o---after
The extraction of function: format_child_next
[4194584, 4194596, 4194615, 4194627, 4194643, 4194659, 4194668]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 9 nodes and 13 edges in CFGEmulated.
It has 9 nodes and 14 edges in CDG.
It has 118 nodes and 129 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194584, 4194596, 4194615, 4194627, 4194643, 4194659, 4194668]
{4194659, 4194596, 4194627, 4194572, 4194668, 4194544, 4194643, 4194615, 4194584}
[3, 8, 2, 0, 5, 4, 6, 1, 7]
The extraction of function: format_child_class_next
[4194876, 4194878, 4194892, 4194902, 4194918, 4194926, 4194928, 4194944, 4194946, 4194948, 4194956, 4194964, 4194972, 4194974, 4194984, 4194995, 4195007, 4195023, 4195025, 4195027, 4195036]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 44 nodes and 65 edges in CFGEmulated.
It has 44 nodes and 74 edges in CDG.
It has 349 nodes and 460 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194876, 4194878, 4194892, 4194902, 4194918, 4194926, 4194928, 4194944, 4194946, 4194948, 4194956, 4194964, 4194972, 4194974, 4194984, 4194995, 4195007, 4195023, 4195025, 4195027, 4195036]
{4194944, 4194688, 4194946, 4194948, 4194824, 4194956, 4194835, 4194964, 4194715, 4194972, 4194974, 4194850, 4194984, 4194729, 4194995, 4194739, 4194872, 4194874, 4194876, 4194878, 4195007, 4194892, 4194765, 4195023, 4195025, 4195027, 4194902, 4195036, 4194788, 4194918, 4194796, 4194926, 4194928, 4194804, 4194812, 4194814}
[11, 25, 0, 14, 26, 29, 16, 1, 3, 19, 42, 36, 12, 24, 18, 30, 7, 15, 32, 10, 9, 43, 27, 8, 41, 33, 4, 28, 13, 21, 6, 35, 40, 22, 20, 34, 39, 31, 37, 2]
The execution time of patched slicing information extraction via angr: 0:00:02.571044
{'format_child_next': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400118>, <DisassemblerInsn "cmp" for 0x40011d>, <DisassemblerInsn "je" for 0x400122>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40016c>, <DisassemblerInsn "ret" for 0x400171>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400163>, <DisassemblerInsn "mov" for 0x40016c>, <DisassemblerInsn "ret" for 0x400171>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000f0>, <DisassemblerInsn "mov" for 0x4000f5>, <DisassemblerInsn "mov" for 0x4000fa>, <DisassemblerInsn "mov" for 0x4000ff>, <DisassemblerInsn "cmp" for 0x400104>, <DisassemblerInsn "jne" for 0x40010a>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400124>, <DisassemblerInsn "mov" for 0x400129>, <DisassemblerInsn "cmp" for 0x40012d>, <DisassemblerInsn "jne" for 0x400135>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400137>, <DisassemblerInsn "cmp" for 0x40013c>, <DisassemblerInsn "je" for 0x400141>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400143>, <DisassemblerInsn "mov" for 0x400148>, <DisassemblerInsn "cmp" for 0x40014c>, <DisassemblerInsn "je" for 0x400151>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40010c>, <DisassemblerInsn "cmp" for 0x400111>, <DisassemblerInsn "je" for 0x400116>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400153>, <DisassemblerInsn "mov" for 0x400158>, <DisassemblerInsn "mov" for 0x40015c>, <DisassemblerInsn "jmp" for 0x400161>]'}], 'cfg_block_detailed_info': [{'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<cmp~~qword ptr [rax + 8], 0>', '<je~~0x400137>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 8]>', '<ret~~>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~qword ptr [rsp - 8], 0>', '<mov~~rax, qword ptr [rsp - 8]>', '<ret~~>']}, {'block_Idx': 0, 'blockInsts': ['<mov~~qword ptr [rsp - 0x10], rdi>', '<mov~~qword ptr [rsp - 0x18], rsi>', '<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~qword ptr [rsp - 0x20], rax>', '<cmp~~qword ptr [rsp - 0x18], 0>', '<jne~~0x400163>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~qword ptr [rax + 0x88], 0>', '<jne~~0x400153>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<cmp~~qword ptr [rax + 0x10], 0>', '<je~~0x400163>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<cmp~~qword ptr [rax + 0x78], 0>', '<je~~0x400163>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<cmp~~qword ptr [rax + 0x18], 0>', '<je~~0x400163>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp - 8], rax>', '<jmp~~0x40016c>']}], 'cfg_edge_info': [(0, 1), (6, 2), (1, 2), (3, 4), (5, 4), (4, 6), (4, 2), (5, 7), (6, 7), (0, 2), (7, 8), (1, 3), (3, 5)], 'cdg_edge_info': [(0, 1), (3, 8), (1, 2), (6, 2), (3, 4), (3, 7), (5, 4), (4, 6), (6, 8), (4, 2), (6, 7), (0, 2), (1, 3), (3, 5)], 'ddg_edge_info': [(0, 1), (0, 7), (0, 4), (0, 3), (0, 6), (0, 2), (1, 7), (0, 5), (0, 8), (2, 8)]}], 'format_child_class_next': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4001ec>, <DisassemblerInsn "jne" for 0x4001f2>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400213>, <DisassemblerInsn "cmp" for 0x400218>, <DisassemblerInsn "je" for 0x400220>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400180>, <DisassemblerInsn "mov" for 0x400184>, <DisassemblerInsn "mov" for 0x400189>, <DisassemblerInsn "mov" for 0x400192>, <DisassemblerInsn "xor" for 0x40019b>, <DisassemblerInsn "cmp" for 0x40019d>, <DisassemblerInsn "mov" for 0x4001a3>, <DisassemblerInsn "je" for 0x4001a7>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40023c>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400284>, <DisassemblerInsn "je" for 0x40028a>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400256>, <DisassemblerInsn "cmp" for 0x40025b>, <DisassemblerInsn "setne" for 0x40025f>, <DisassemblerInsn "mov" for 0x400262>, <DisassemblerInsn "mov" for 0x400266>, <DisassemblerInsn "test" for 0x40026a>, <DisassemblerInsn "jne" for 0x40026c>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "xor" for 0x40023e>, <DisassemblerInsn "cmp" for 0x400240>, <DisassemblerInsn "mov" for 0x400246>, <DisassemblerInsn "je" for 0x40024a>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001c3>, <DisassemblerInsn "test" for 0x4001c7>, <DisassemblerInsn "jne" for 0x4001c9>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001cb>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40024c>, <DisassemblerInsn "call" for 0x400251>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4002cf>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002d3>, <DisassemblerInsn "mov" for 0x4002dc>, <DisassemblerInsn "add" for 0x4002e1>, <DisassemblerInsn "ret" for 0x4002e5>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "xor" for 0x40019b>, <DisassemblerInsn "cmp" for 0x40019d>, <DisassemblerInsn "mov" for 0x4001a3>, <DisassemblerInsn "je" for 0x4001a7>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40023a>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400266>, <DisassemblerInsn "test" for 0x40026a>, <DisassemblerInsn "jne" for 0x40026c>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400238>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001e0>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001fe>, <DisassemblerInsn "call" for 0x400203>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400294>, <DisassemblerInsn "jne" for 0x40029a>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4001f4>, <DisassemblerInsn "jne" for 0x4001fa>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001b3>, <DisassemblerInsn "cmp" for 0x4001b8>, <DisassemblerInsn "setne" for 0x4001bc>, <DisassemblerInsn "mov" for 0x4001bf>, <DisassemblerInsn "mov" for 0x4001c3>, <DisassemblerInsn "test" for 0x4001c7>, <DisassemblerInsn "jne" for 0x4001c9>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002bf>, <DisassemblerInsn "mov" for 0x4002c4>, <DisassemblerInsn "mov" for 0x4002c8>, <DisassemblerInsn "jmp" for 0x4002cd>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400280>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001e2>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002b3>, <DisassemblerInsn "cmp" for 0x4002b8>, <DisassemblerInsn "je" for 0x4002bd>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40028c>, <DisassemblerInsn "jne" for 0x400292>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001cd>, <DisassemblerInsn "mov" for 0x4001d2>, <DisassemblerInsn "cmp" for 0x4001d9>, <DisassemblerInsn "jne" for 0x4001de>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400282>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001fc>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40026e>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4001e4>, <DisassemblerInsn "je" for 0x4001ea>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40029c>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4002d1>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400270>, <DisassemblerInsn "mov" for 0x400275>, <DisassemblerInsn "cmp" for 0x400279>, <DisassemblerInsn "jne" for 0x40027e>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400208>, <DisassemblerInsn "cmp" for 0x40020d>, <DisassemblerInsn "je" for 0x400211>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002dc>, <DisassemblerInsn "add" for 0x4002e1>, <DisassemblerInsn "ret" for 0x4002e5>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002a8>, <DisassemblerInsn "cmp" for 0x4002ad>, <DisassemblerInsn "je" for 0x4002b1>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400222>, <DisassemblerInsn "mov" for 0x400227>, <DisassemblerInsn "mov" for 0x40022e>, <DisassemblerInsn "jmp" for 0x400233>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40029e>, <DisassemblerInsn "call" for 0x4002a3>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a9>, <DisassemblerInsn "call" for 0x4001ae>]'}], 'cfg_block_detailed_info': [{'block_Idx': 11, 'blockInsts': ['<cmp~~qword ptr [rsp + 0x10], 0>', '<jne~~0x4001fc>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~qword ptr [rax + 0x88], 0>', '<je~~0x400238>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x28>', '<mov~~qword ptr [rsp + 0x18], rdi>', '<mov~~qword ptr [rsp + 0x10], 0>', '<mov~~qword ptr [rsp + 8], 0>', '<xor~~eax, eax>', '<cmp~~qword ptr [rsp + 0x18], 0>', '<mov~~byte ptr [rsp + 7], al>', '<je~~0x4001c3>']}, {'block_Idx': 14, 'blockInsts': ['<jmp~~0x40023e>']}, {'block_Idx': 26, 'blockInsts': ['<cmp~~qword ptr [rsp + 0x18], 0>', '<je~~0x400294>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~qword ptr [rsp + 8], rax>', '<cmp~~rax, 0>', '<setne~~al>', '<mov~~byte ptr [rsp + 6], al>', '<mov~~al, byte ptr [rsp + 6]>', '<test~~al, 1>', '<jne~~0x400270>']}, {'block_Idx': 16, 'blockInsts': ['<xor~~eax, eax>', '<cmp~~qword ptr [rsp + 0x18], 0>', '<mov~~byte ptr [rsp + 6], al>', '<je~~0x400266>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~al, byte ptr [rsp + 7]>', '<test~~al, 1>', '<jne~~0x4001cd>']}, {'block_Idx': 3, 'blockInsts': ['<jmp~~0x4001e4>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}, {'block_Idx': 42, 'blockInsts': ['<jmp~~0x40029e>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~qword ptr [rsp + 0x20], 0>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 12, 'blockInsts': ['<xor~~eax, eax>', '<cmp~~qword ptr [rsp + 0x18], 0>', '<mov~~byte ptr [rsp + 7], al>', '<je~~0x4001c3>']}, {'block_Idx': 24, 'blockInsts': ['<jmp~~0x40023c>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~al, byte ptr [rsp + 6]>', '<test~~al, 1>', '<jne~~0x400270>']}, {'block_Idx': 30, 'blockInsts': ['<jmp~~0x4001fe>']}, {'block_Idx': 7, 'blockInsts': ['<jmp~~0x4001e4>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x10]>', '<call~~0x500018>']}, {'block_Idx': 32, 'blockInsts': ['<cmp~~qword ptr [rsp + 0x18], 0>', '<jne~~0x4002d3>']}, {'block_Idx': 10, 'blockInsts': ['<cmp~~qword ptr [rsp + 0x18], 0>', '<jne~~0x40023c>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~qword ptr [rsp + 0x10], rax>', '<cmp~~rax, 0>', '<setne~~al>', '<mov~~byte ptr [rsp + 7], al>', '<mov~~al, byte ptr [rsp + 7]>', '<test~~al, 1>', '<jne~~0x4001cd>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<mov~~rax, qword ptr [rax + 0x78]>', '<mov~~qword ptr [rsp + 0x20], rax>', '<jmp~~0x4002dc>']}, {'block_Idx': 27, 'blockInsts': ['<jmp~~0x400284>']}, {'block_Idx': 8, 'blockInsts': ['<jmp~~0x40019b>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<cmp~~qword ptr [rax + 0x78], 0>', '<je~~0x4002cf>']}, {'block_Idx': 33, 'blockInsts': ['<cmp~~qword ptr [rsp + 8], 0>', '<jne~~0x40029c>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x88]>', '<cmp~~rax, qword ptr [rsp + 0x18]>', '<jne~~0x4001e2>']}, {'block_Idx': 28, 'blockInsts': ['<jmp~~0x40023e>']}, {'block_Idx': 13, 'blockInsts': ['<jmp~~0x4001fe>']}, {'block_Idx': 21, 'blockInsts': ['<jmp~~0x400284>']}, {'block_Idx': 6, 'blockInsts': ['<cmp~~qword ptr [rsp + 0x18], 0>', '<je~~0x4001f4>']}, {'block_Idx': 35, 'blockInsts': ['<jmp~~0x40029e>']}, {'block_Idx': 40, 'blockInsts': ['<jmp~~0x4002d3>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<mov~~rax, qword ptr [rax + 0x78]>', '<cmp~~rax, qword ptr [rsp + 0x18]>', '<jne~~0x400282>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~qword ptr [rsp + 0x10], rax>', '<cmp~~rax, 0>', '<je~~0x40023a>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~qword ptr [rsp + 8], rax>', '<cmp~~rax, 0>', '<je~~0x4002d1>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x88]>', '<mov~~qword ptr [rsp + 0x20], rax>', '<jmp~~0x4002dc>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x10]>', '<call~~0x500018>']}], 'cfg_edge_info': [(12, 1), (41, 43), (26, 33), (14, 16), (0, 2), (8, 12), (30, 15), (24, 14), (37, 39), (6, 11), (16, 19), (33, 35), (41, 42), (33, 32), (15, 20), (25, 31), (26, 32), (32, 36), (18, 22), (29, 22), (20, 25), (4, 8), (3, 6), (39, 41), (22, 28), (9, 4), (0, 1), (31, 34), (11, 10), (10, 14), (11, 13), (19, 29), (7, 6), (12, 2), (32, 35), (42, 37), (16, 18), (6, 10), (35, 37), (25, 30), (29, 21), (4, 7), (18, 21), (21, 26), (20, 24), (22, 27), (9, 3), (40, 36), (28, 16), (39, 40), (1, 4), (10, 13), (2, 9), (27, 26), (13, 15), (43, 34)], 'cdg_edge_info': [(32, 37), (41, 43), (20, 14), (33, 39), (16, 29), (26, 33), (29, 26), (4, 12), (20, 26), (20, 32), (29, 32), (0, 2), (39, 36), (10, 15), (11, 20), (6, 11), (41, 39), (16, 19), (33, 35), (41, 42), (32, 39), (33, 32), (25, 31), (12, 9), (20, 16), (25, 34), (18, 22), (29, 22), (32, 36), (20, 25), (22, 16), (39, 41), (22, 28), (9, 4), (11, 10), (10, 14), (11, 13), (25, 15), (10, 20), (10, 26), (10, 32), (16, 21), (12, 2), (32, 35), (16, 18), (33, 37), (18, 21), (25, 30), (20, 24), (22, 27), (39, 40), (0, 9), (10, 13), (10, 16), (11, 15), (41, 37), (25, 20), (41, 34)], 'ddg_edge_info': [(16, 29), (2, 11), (15, 32), (2, 32), (20, 31), (2, 4), (0, 16), (15, 16), (19, 32), (15, 25), (0, 37), (20, 15), (39, 37), (12, 20), (0, 9), (22, 39), (4, 25), (25, 20), (2, 36), (0, 2), (41, 39), (19, 36), (0, 32), (2, 29), (0, 41), (29, 22), (39, 41), (4, 20), (19, 29), (0, 25), (2, 22), (0, 43), (29, 33), (4, 31), (2, 6), (19, 22), (2, 15), (0, 36), (2, 33), (15, 36), (9, 2), (0, 11), (37, 39), (19, 33), (0, 29), (2, 26), (15, 20), (43, 36), (29, 19), (15, 29), (20, 25), (29, 37), (0, 4), (2, 10), (19, 26), (0, 22), (2, 19), (37, 41), (0, 31), (2, 37), (15, 22), (15, 31), (16, 39), (39, 43), (0, 6), (0, 15), (2, 12), (37, 43), (19, 37), (0, 33), (15, 33), (9, 11), (9, 20), (37, 36), (9, 29), (0, 26), (12, 9), (15, 26), (9, 4), (0, 10), (0, 19), (2, 16), (15, 19), (15, 37), (29, 39), (31, 36), (19, 16), (9, 15), (0, 12), (2, 9)]}]}
{'format_child_next': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 9, 'instruction': 'movq\t-0x20(%rsp), %rax'}, {'instIndex': 10, 'instruction': 'cmpq\t$0, 8(%rax)'}, {'instIndex': 11, 'instruction': 'je\t.LBB4_4'}, {'instIndex': 12, 'instruction': 'movq\t-0x20(%rsp), %rax'}, {'instIndex': 13, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 14, 'instruction': 'cmpq\t$0, 0x88(%rax)'}, {'instIndex': 15, 'instruction': 'jne\t.LBB4_6'}, {'instIndex': 16, 'instruction': 'movq\t-0x20(%rsp), %rax'}, {'instIndex': 17, 'instruction': 'cmpq\t$0, 0x10(%rax)'}, {'instIndex': 18, 'instruction': 'je\t.LBB4_7'}, {'instIndex': 19, 'instruction': 'movq\t-0x20(%rsp), %rax'}, {'instIndex': 20, 'instruction': 'movq\t0x10(%rax), %rax'}, {'instIndex': 21, 'instruction': 'cmpq\t$0, 0x78(%rax)'}, {'instIndex': 23, 'instruction': 'movq\t-0x20(%rsp), %rax'}, {'instIndex': 24, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 25, 'instruction': 'movq\t%rax, -8(%rsp)'}, {'instIndex': 26, 'instruction': 'jmp\t.LBB4_8'}, {'instIndex': 27, 'instruction': 'movq\t$0, -8(%rsp)'}, {'instIndex': 28, 'instruction': 'movq\t-8(%rsp), %rax'}, {'instIndex': 29, 'instruction': 'retq'}]}], 'format_child_class_next': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 45, 'instruction': 'jmp\t.LBB5_17'}, {'instIndex': 46, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 47, 'instruction': 'cmpq\t$0, 0x18(%rsp)'}, {'instIndex': 48, 'instruction': 'movb\t%al, 6(%rsp)                    # 1-byte Spill'}, {'instIndex': 49, 'instruction': 'je\t.LBB5_19'}, {'instIndex': 50, 'instruction': 'movq\t8(%rsp), %rdi'}, {'instIndex': 51, 'instruction': 'callq\tav_oformat_next@PLT'}, {'instIndex': 52, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 53, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 54, 'instruction': 'setne\t%al'}, {'instIndex': 55, 'instruction': 'movb\t%al, 6(%rsp)                    # 1-byte Spill'}, {'instIndex': 57, 'instruction': 'testb\t$1, %al'}, {'instIndex': 58, 'instruction': 'jne\t.LBB5_20'}, {'instIndex': 59, 'instruction': 'jmp\t.LBB5_23'}, {'instIndex': 60, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 61, 'instruction': 'movq\t0x78(%rax), %rax'}, {'instIndex': 62, 'instruction': 'cmpq\t0x18(%rsp), %rax'}, {'instIndex': 63, 'instruction': 'jne\t.LBB5_22'}, {'instIndex': 64, 'instruction': 'jmp\t.LBB5_23'}, {'instIndex': 65, 'instruction': 'jmp\t.LBB5_17'}, {'instIndex': 66, 'instruction': 'cmpq\t$0, 0x18(%rsp)'}, {'instIndex': 67, 'instruction': 'je\t.LBB5_25'}, {'instIndex': 68, 'instruction': 'cmpq\t$0, 8(%rsp)'}, {'instIndex': 69, 'instruction': 'jne\t.LBB5_26'}, {'instIndex': 70, 'instruction': 'cmpq\t$0, 0x18(%rsp)'}, {'instIndex': 71, 'instruction': 'jne\t.LBB5_32'}, {'instIndex': 72, 'instruction': 'jmp\t.LBB5_27'}, {'instIndex': 73, 'instruction': 'movq\t8(%rsp), %rdi'}, {'instIndex': 74, 'instruction': 'callq\tav_oformat_next@PLT'}, {'instIndex': 75, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 76, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 77, 'instruction': 'je\t.LBB5_31'}, {'instIndex': 78, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 79, 'instruction': 'cmpq\t$0, 0x78(%rax)'}, {'instIndex': 80, 'instruction': 'je\t.LBB5_30'}, {'instIndex': 81, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 82, 'instruction': 'movq\t0x78(%rax), %rax'}, {'instIndex': 83, 'instruction': 'movq\t%rax, 0x20(%rsp)'}, {'instIndex': 84, 'instruction': 'jmp\t.LBB5_33'}, {'instIndex': 85, 'instruction': 'jmp\t.LBB5_27'}, {'instIndex': 86, 'instruction': 'jmp\t.LBB5_32'}, {'instIndex': 87, 'instruction': 'movq\t$0, 0x20(%rsp)'}, {'instIndex': 88, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 89, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 90, 'instruction': 'retq'}]}]}
The case of compiler clang with optimization O1.
Patched source code file: options.c
Patched function: 1---static void *format_child_next 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_after/O1/options.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_after/O1/options.s---format_child_next---after
function id: 3
function flag: True
There are 37 instructions for function: format_child_next in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '41', 'end': 50}, 'before': {'start': '40', 'end': 45}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 13, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 14, 'instruction': 'movq\t%rax, -0x20(%rsp)                 # 8-byte Spill'}, {'instIndex': 15, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 16, 'instruction': 'je\t.LBB3_4'}, {'instIndex': 18, 'instruction': 'cmpq\t$0, 0x88(%rax)'}, {'instIndex': 19, 'instruction': 'jne\t.LBB3_6'}, {'instIndex': 21, 'instruction': 'movq\t0x10(%rax), %rcx'}, {'instIndex': 22, 'instruction': 'movq\t%rcx, -0x28(%rsp)                 # 8-byte Spill'}, {'instIndex': 23, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 24, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 25, 'instruction': 'movq\t%rax, -8(%rsp)                  # 8-byte Spill'}, {'instIndex': 26, 'instruction': 'je\t.LBB3_7'}, {'instIndex': 28, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 29, 'instruction': 'cmpq\t$0, 0x78(%rcx)'}, {'instIndex': 30, 'instruction': 'movq\t%rax, -8(%rsp)                  # 8-byte Spill'}, {'instIndex': 34, 'instruction': 'jmp\t.LBB3_7'}, {'instIndex': 36, 'instruction': 'retq'}]}]
Patched function: 1---static const AVClass *format_child_class_next 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_after/O1/options.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_after/O1/options.s---format_child_class_next---after
function id: 4
function flag: True
There are 103 instructions for function: format_child_class_next in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 78}, 'before': {'start': '59', 'end': 67}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 52, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 53, 'instruction': 'testb\t$1, %cl'}, {'instIndex': 54, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 55, 'instruction': 'movq\t%rcx, 0x20(%rsp)                  # 8-byte Spill'}, {'instIndex': 56, 'instruction': 'movq\t%rax, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 57, 'instruction': 'jne\t.LBB4_7'}, {'instIndex': 58, 'instruction': 'jmp\t.LBB4_9'}, {'instIndex': 60, 'instruction': 'callq\tav_oformat_next@PLT'}, {'instIndex': 61, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 62, 'instruction': 'movq\t%rcx, 0x18(%rsp)                  # 8-byte Spill'}, {'instIndex': 63, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 64, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 65, 'instruction': 'movq\t%rax, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 66, 'instruction': 'je\t.LBB4_9'}, {'instIndex': 69, 'instruction': 'cmpq\t%rcx, 0x78(%rax)'}, {'instIndex': 70, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 71, 'instruction': 'movq\t%rcx, 0x20(%rsp)                  # 8-byte Spill'}, {'instIndex': 72, 'instruction': 'movq\t%rax, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 73, 'instruction': 'jne\t.LBB4_7'}, {'instIndex': 79, 'instruction': 'orb\t%sil, %al'}, {'instIndex': 80, 'instruction': 'andb\t%al, %dl'}, {'instIndex': 81, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 82, 'instruction': 'testb\t$1, %dl'}, {'instIndex': 83, 'instruction': 'movq\t%rcx, 0x10(%rsp)                  # 8-byte Spill'}, {'instIndex': 85, 'instruction': 'jne\t.LBB4_12'}, {'instIndex': 87, 'instruction': 'callq\tav_oformat_next@PLT'}, {'instIndex': 88, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 89, 'instruction': 'movq\t%rcx, 8(%rsp)                   # 8-byte Spill'}, {'instIndex': 90, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 91, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 92, 'instruction': 'movq\t%rax, 0x30(%rsp)                  # 8-byte Spill'}, {'instIndex': 93, 'instruction': 'je\t.LBB4_12'}, {'instIndex': 95, 'instruction': 'movq\t0x78(%rcx), %rax'}, {'instIndex': 96, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 97, 'instruction': 'movq\t%rcx, 0x10(%rsp)                  # 8-byte Spill'}, {'instIndex': 98, 'instruction': 'movq\t%rax, 0x30(%rsp)                  # 8-byte Spill'}, {'instIndex': 99, 'instruction': 'je\t.LBB4_10'}, {'instIndex': 101, 'instruction': 'addq\t$0x78, %rsp'}, {'instIndex': 102, 'instruction': 'retq'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_after/O1/options.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_after/O1/options.o---after
The extraction of function: format_child_next
Analyzing the binaries to generate subCFGs from patched function ...
It has 48 nodes and 71 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 37 instructions in binary file.
[4194525, 4194545, 4194560, 4194587, 4194606, 4194618]
The extraction of function: format_child_class_next
Analyzing the binaries to generate subCFGs from patched function ...
It has 48 nodes and 71 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 103 instructions in binary file.
[4194823, 4194847, 4194849, 4194859, 4194880, 4194909, 4194951, 4194961, 4194982, 4195007]
The execution time of patched subCFG information extraction via angr: 0:00:00.205913
{'format_child_next': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400100>, <DisassemblerInsn "mov" for 0x400105>, <DisassemblerInsn "mov" for 0x400109>, <DisassemblerInsn "xor" for 0x40010e>, <DisassemblerInsn "cmp" for 0x400110>, <DisassemblerInsn "mov" for 0x400114>, <DisassemblerInsn "je" for 0x400119>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40011b>, <DisassemblerInsn "xor" for 0x400120>, <DisassemblerInsn "cmp" for 0x400122>, <DisassemblerInsn "mov" for 0x400127>, <DisassemblerInsn "je" for 0x40012c>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40013a>, <DisassemblerInsn "ret" for 0x40013f>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000f1>, <DisassemblerInsn "cmp" for 0x4000f6>, <DisassemblerInsn "jne" for 0x4000fe>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000b0>, <DisassemblerInsn "xor" for 0x4000b5>, <DisassemblerInsn "cmp" for 0x4000b7>, <DisassemblerInsn "mov" for 0x4000bb>, <DisassemblerInsn "jne" for 0x4000c0>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c2>, <DisassemblerInsn "mov" for 0x4000c7>, <DisassemblerInsn "mov" for 0x4000cb>, <DisassemblerInsn "xor" for 0x4000d0>, <DisassemblerInsn "cmp" for 0x4000d2>, <DisassemblerInsn "mov" for 0x4000d6>, <DisassemblerInsn "je" for 0x4000db>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000dd>, <DisassemblerInsn "mov" for 0x4000e2>, <DisassemblerInsn "mov" for 0x4000e6>, <DisassemblerInsn "cmp" for 0x4000eb>, <DisassemblerInsn "je" for 0x4000ef>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40012e>, <DisassemblerInsn "mov" for 0x400133>, <DisassemblerInsn "jmp" for 0x400138>]'}], 'cfg_block_detailed_info': [{'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rcx, qword ptr [rax + 0x10]>', '<mov~~qword ptr [rsp - 0x28], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp - 8], rax>', '<je~~0x40013a>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rcx, qword ptr [rsp - 0x28]>', '<xor~~eax, eax>', '<cmp~~qword ptr [rcx + 0x78], 0>', '<mov~~qword ptr [rsp - 8], rax>', '<je~~0x40013a>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 8]>', '<ret~~>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<cmp~~qword ptr [rax + 0x88], 0>', '<jne~~0x40012e>']}, {'block_Idx': 0, 'blockInsts': ['<mov~~qword ptr [rsp - 0x10], rdi>', '<xor~~eax, eax>', '<cmp~~rsi, 0>', '<mov~~qword ptr [rsp - 8], rax>', '<jne~~0x40013a>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rcx, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp - 0x18], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp - 8], rax>', '<je~~0x40013a>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~qword ptr [rsp - 0x20], rax>', '<cmp~~rax, 0>', '<je~~0x400100>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x18]>', '<mov~~qword ptr [rsp - 8], rax>', '<jmp~~0x40013a>']}], 'cfg_edge_info': [(6, 2), (1, 2), (3, 4), (5, 4), (4, 6), (5, 7), (4, 2), (6, 7), (0, 2), (7, 2), (1, 3), (3, 5)]}], 'format_child_class_next': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400291>, <DisassemblerInsn "mov" for 0x400294>, <DisassemblerInsn "xor" for 0x400299>, <DisassemblerInsn "cmp" for 0x40029b>, <DisassemblerInsn "mov" for 0x40029f>, <DisassemblerInsn "je" for 0x4002a4>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400202>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002bf>, <DisassemblerInsn "add" for 0x4002c4>, <DisassemblerInsn "ret" for 0x4002c8>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a9>, <DisassemblerInsn "mov" for 0x4001ad>, <DisassemblerInsn "test" for 0x4001b2>, <DisassemblerInsn "sete" for 0x4001b5>, <DisassemblerInsn "mov" for 0x4001b9>, <DisassemblerInsn "xor" for 0x4001bb>, <DisassemblerInsn "mov" for 0x4001be>, <DisassemblerInsn "or" for 0x4001c2>, <DisassemblerInsn "and" for 0x4001c5>, <DisassemblerInsn "test" for 0x4001c7>, <DisassemblerInsn "mov" for 0x4001ca>, <DisassemblerInsn "jne" for 0x4001cf>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400240>, <DisassemblerInsn "mov" for 0x400245>, <DisassemblerInsn "cmp" for 0x40024a>, <DisassemblerInsn "mov" for 0x40024e>, <DisassemblerInsn "mov" for 0x400251>, <DisassemblerInsn "mov" for 0x400256>, <DisassemblerInsn "jne" for 0x40025b>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400221>, <DisassemblerInsn "call" for 0x400226>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40022b>, <DisassemblerInsn "mov" for 0x40022e>, <DisassemblerInsn "xor" for 0x400233>, <DisassemblerInsn "cmp" for 0x400235>, <DisassemblerInsn "mov" for 0x400239>, <DisassemblerInsn "je" for 0x40023e>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001db>, <DisassemblerInsn "cmp" for 0x4001e0>, <DisassemblerInsn "je" for 0x4001e4>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400287>, <DisassemblerInsn "call" for 0x40028c>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40025d>, <DisassemblerInsn "mov" for 0x400261>, <DisassemblerInsn "mov" for 0x400265>, <DisassemblerInsn "test" for 0x40026a>, <DisassemblerInsn "sete" for 0x40026d>, <DisassemblerInsn "or" for 0x400271>, <DisassemblerInsn "and" for 0x400274>, <DisassemblerInsn "xor" for 0x400276>, <DisassemblerInsn "test" for 0x400278>, <DisassemblerInsn "mov" for 0x40027b>, <DisassemblerInsn "mov" for 0x400280>, <DisassemblerInsn "jne" for 0x400285>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400207>, <DisassemblerInsn "xor" for 0x40020b>, <DisassemblerInsn "test" for 0x40020d>, <DisassemblerInsn "mov" for 0x400210>, <DisassemblerInsn "mov" for 0x400213>, <DisassemblerInsn "mov" for 0x400218>, <DisassemblerInsn "jne" for 0x40021d>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40021f>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002a6>, <DisassemblerInsn "mov" for 0x4002ab>, <DisassemblerInsn "cmp" for 0x4002af>, <DisassemblerInsn "mov" for 0x4002b3>, <DisassemblerInsn "mov" for 0x4002b8>, <DisassemblerInsn "je" for 0x4002bd>]'}], 'cfg_block_detailed_info': [{'block_Idx': 18, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 8], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp + 0x30], rax>', '<je~~0x4002bf>']}, {'block_Idx': 14, 'blockInsts': ['<jmp~~0x4002bf>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x30]>', '<add~~rsp, 0x78>', '<ret~~>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x67]>', '<mov~~rax, qword ptr [rsp + 0x70]>', '<test~~rax, rax>', '<sete~~sil>', '<mov~~dl, cl>', '<xor~~dl, 1>', '<mov~~byte ptr [rsp + 0x47], dl>', '<or~~dl, sil>', '<and~~cl, dl>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x48], rax>', '<jne~~0x400207>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rcx, qword ptr [rsp + 0x58]>', '<cmp~~qword ptr [rax + 0x78], rcx>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x20], rcx>', '<mov~~qword ptr [rsp + 0x28], rax>', '<jne~~0x400221>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x20]>', '<call~~0x500020>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x18], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp + 0x28], rax>', '<je~~0x40025d>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~qword ptr [rsp + 0x38], rax>', '<cmp~~rax, 0>', '<je~~0x400207>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x10]>', '<call~~0x500020>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~dl, byte ptr [rsp + 0x67]>', '<mov~~al, byte ptr [rsp + 0x47]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<test~~rcx, rcx>', '<sete~~sil>', '<or~~al, sil>', '<and~~dl, al>', '<xor~~eax, eax>', '<test~~dl, 1>', '<mov~~qword ptr [rsp + 0x10], rcx>', '<mov~~qword ptr [rsp + 0x30], rax>', '<jne~~0x4002bf>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x67]>', '<xor~~eax, eax>', '<test~~cl, 1>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x20], rcx>', '<mov~~qword ptr [rsp + 0x28], rax>', '<jne~~0x400221>']}, {'block_Idx': 9, 'blockInsts': ['<jmp~~0x40025d>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~rax, qword ptr [rcx + 0x78]>', '<cmp~~rax, 0>', '<mov~~qword ptr [rsp + 0x10], rcx>', '<mov~~qword ptr [rsp + 0x30], rax>', '<je~~0x400287>']}], 'cfg_edge_info': [(13, 17), (17, 10), (12, 16), (12, 15), (9, 12), (18, 16), (19, 16), (10, 13), (18, 19), (15, 18), (14, 16), (17, 12), (6, 10), (8, 6), (3, 6), (13, 12), (19, 15), (6, 9)]}]}
{'format_child_next': [4194525, 4194545, 4194560, 4194587, 4194606, 4194618], 'format_child_class_next': [4194823, 4194847, 4194849, 4194859, 4194880, 4194909, 4194951, 4194961, 4194982, 4195007]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_after/O1/options.o---after
The extraction of function: format_child_next
[4194525, 4194545, 4194560, 4194587, 4194606, 4194618]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 8 nodes and 13 edges in CFGEmulated.
It has 8 nodes and 9 edges in CDG.
It has 106 nodes and 119 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194525, 4194545, 4194560, 4194587, 4194606, 4194618]
{4194560, 4194498, 4194606, 4194480, 4194545, 4194618, 4194587, 4194525}
[5, 2, 7, 6, 4, 3, 1, 0]
The extraction of function: format_child_class_next
[4194823, 4194847, 4194849, 4194859, 4194880, 4194909, 4194951, 4194961, 4194982, 4195007]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 24 nodes and 39 edges in CFGEmulated.
It has 23 nodes and 35 edges in CDG.
It has 297 nodes and 375 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194823, 4194847, 4194849, 4194859, 4194880, 4194909, 4194951, 4194961, 4194982, 4195007]
{4194818, 4194823, 4194951, 4194697, 4194961, 4194847, 4194849, 4194982, 4194729, 4194859, 4195007, 4194880, 4194624, 4194769, 4194779, 4194909, 4194790, 4194666, 4194676}
[6, 21, 19, 17, 12, 22, 5, 9, 10, 3, 15, 0, 11, 16, 13, 18, 23, 7, 2, 1]
The execution time of patched slicing information extraction via angr: 0:00:01.992390
{'format_child_next': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000f1>, <DisassemblerInsn "cmp" for 0x4000f6>, <DisassemblerInsn "jne" for 0x4000fe>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40013a>, <DisassemblerInsn "ret" for 0x40013f>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40012e>, <DisassemblerInsn "mov" for 0x400133>, <DisassemblerInsn "jmp" for 0x400138>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40011b>, <DisassemblerInsn "xor" for 0x400120>, <DisassemblerInsn "cmp" for 0x400122>, <DisassemblerInsn "mov" for 0x400127>, <DisassemblerInsn "je" for 0x40012c>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400100>, <DisassemblerInsn "mov" for 0x400105>, <DisassemblerInsn "mov" for 0x400109>, <DisassemblerInsn "xor" for 0x40010e>, <DisassemblerInsn "cmp" for 0x400110>, <DisassemblerInsn "mov" for 0x400114>, <DisassemblerInsn "je" for 0x400119>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000dd>, <DisassemblerInsn "mov" for 0x4000e2>, <DisassemblerInsn "mov" for 0x4000e6>, <DisassemblerInsn "cmp" for 0x4000eb>, <DisassemblerInsn "je" for 0x4000ef>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c2>, <DisassemblerInsn "mov" for 0x4000c7>, <DisassemblerInsn "mov" for 0x4000cb>, <DisassemblerInsn "xor" for 0x4000d0>, <DisassemblerInsn "cmp" for 0x4000d2>, <DisassemblerInsn "mov" for 0x4000d6>, <DisassemblerInsn "je" for 0x4000db>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000b0>, <DisassemblerInsn "xor" for 0x4000b5>, <DisassemblerInsn "cmp" for 0x4000b7>, <DisassemblerInsn "mov" for 0x4000bb>, <DisassemblerInsn "jne" for 0x4000c0>]'}], 'cfg_block_detailed_info': [{'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<cmp~~qword ptr [rax + 0x88], 0>', '<jne~~0x40012e>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 8]>', '<ret~~>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x18]>', '<mov~~qword ptr [rsp - 8], rax>', '<jmp~~0x40013a>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rcx, qword ptr [rsp - 0x28]>', '<xor~~eax, eax>', '<cmp~~qword ptr [rcx + 0x78], 0>', '<mov~~qword ptr [rsp - 8], rax>', '<je~~0x40013a>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rcx, qword ptr [rax + 0x10]>', '<mov~~qword ptr [rsp - 0x28], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp - 8], rax>', '<je~~0x40013a>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~qword ptr [rsp - 0x20], rax>', '<cmp~~rax, 0>', '<je~~0x400100>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rcx, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp - 0x18], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp - 8], rax>', '<je~~0x40013a>']}, {'block_Idx': 0, 'blockInsts': ['<mov~~qword ptr [rsp - 0x10], rdi>', '<xor~~eax, eax>', '<cmp~~rsi, 0>', '<mov~~qword ptr [rsp - 8], rax>', '<jne~~0x40013a>']}], 'cfg_edge_info': [(0, 1), (6, 2), (1, 2), (3, 4), (5, 4), (4, 6), (4, 2), (5, 7), (6, 7), (0, 2), (7, 2), (1, 3), (3, 5)], 'cdg_edge_info': [(0, 1), (5, 4), (4, 6), (5, 7), (1, 4), (6, 7), (3, 2), (1, 3), (3, 5)], 'ddg_edge_info': [(0, 1), (0, 7), (6, 2), (1, 2), (0, 4), (0, 3), (4, 6), (4, 2), (0, 6), (1, 7), (0, 2), (7, 2), (0, 5), (3, 5)]}], 'format_child_class_next': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400207>, <DisassemblerInsn "xor" for 0x40020b>, <DisassemblerInsn "test" for 0x40020d>, <DisassemblerInsn "mov" for 0x400210>, <DisassemblerInsn "mov" for 0x400213>, <DisassemblerInsn "mov" for 0x400218>, <DisassemblerInsn "jne" for 0x40021d>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400240>, <DisassemblerInsn "mov" for 0x400245>, <DisassemblerInsn "cmp" for 0x40024a>, <DisassemblerInsn "mov" for 0x40024e>, <DisassemblerInsn "mov" for 0x400251>, <DisassemblerInsn "mov" for 0x400256>, <DisassemblerInsn "jne" for 0x40025b>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400202>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002bf>, <DisassemblerInsn "add" for 0x4002c4>, <DisassemblerInsn "ret" for 0x4002c8>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001db>, <DisassemblerInsn "cmp" for 0x4001e0>, <DisassemblerInsn "je" for 0x4001e4>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400291>, <DisassemblerInsn "mov" for 0x400294>, <DisassemblerInsn "xor" for 0x400299>, <DisassemblerInsn "cmp" for 0x40029b>, <DisassemblerInsn "mov" for 0x40029f>, <DisassemblerInsn "je" for 0x4002a4>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001d1>, <DisassemblerInsn "call" for 0x4001d6>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40021f>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400221>, <DisassemblerInsn "call" for 0x400226>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a9>, <DisassemblerInsn "mov" for 0x4001ad>, <DisassemblerInsn "test" for 0x4001b2>, <DisassemblerInsn "sete" for 0x4001b5>, <DisassemblerInsn "mov" for 0x4001b9>, <DisassemblerInsn "xor" for 0x4001bb>, <DisassemblerInsn "mov" for 0x4001be>, <DisassemblerInsn "or" for 0x4001c2>, <DisassemblerInsn "and" for 0x4001c5>, <DisassemblerInsn "test" for 0x4001c7>, <DisassemblerInsn "mov" for 0x4001ca>, <DisassemblerInsn "jne" for 0x4001cf>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001e6>, <DisassemblerInsn "mov" for 0x4001eb>, <DisassemblerInsn "cmp" for 0x4001f2>, <DisassemblerInsn "mov" for 0x4001f6>, <DisassemblerInsn "mov" for 0x4001fb>, <DisassemblerInsn "je" for 0x400200>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400140>, <DisassemblerInsn "mov" for 0x400144>, <DisassemblerInsn "cmp" for 0x400149>, <DisassemblerInsn "setne" for 0x40014d>, <DisassemblerInsn "mov" for 0x400150>, <DisassemblerInsn "xor" for 0x400154>, <DisassemblerInsn "test" for 0x400156>, <DisassemblerInsn "mov" for 0x400159>, <DisassemblerInsn "mov" for 0x40015c>, <DisassemblerInsn "mov" for 0x400161>, <DisassemblerInsn "jne" for 0x400166>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400189>, <DisassemblerInsn "mov" for 0x40018e>, <DisassemblerInsn "cmp" for 0x400193>, <DisassemblerInsn "mov" for 0x40019a>, <DisassemblerInsn "mov" for 0x40019d>, <DisassemblerInsn "mov" for 0x4001a2>, <DisassemblerInsn "jne" for 0x4001a7>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400287>, <DisassemblerInsn "call" for 0x40028c>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40025d>, <DisassemblerInsn "mov" for 0x400261>, <DisassemblerInsn "mov" for 0x400265>, <DisassemblerInsn "test" for 0x40026a>, <DisassemblerInsn "sete" for 0x40026d>, <DisassemblerInsn "or" for 0x400271>, <DisassemblerInsn "and" for 0x400274>, <DisassemblerInsn "xor" for 0x400276>, <DisassemblerInsn "test" for 0x400278>, <DisassemblerInsn "mov" for 0x40027b>, <DisassemblerInsn "mov" for 0x400280>, <DisassemblerInsn "jne" for 0x400285>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40022b>, <DisassemblerInsn "mov" for 0x40022e>, <DisassemblerInsn "xor" for 0x400233>, <DisassemblerInsn "cmp" for 0x400235>, <DisassemblerInsn "mov" for 0x400239>, <DisassemblerInsn "je" for 0x40023e>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002a6>, <DisassemblerInsn "mov" for 0x4002ab>, <DisassemblerInsn "cmp" for 0x4002af>, <DisassemblerInsn "mov" for 0x4002b3>, <DisassemblerInsn "mov" for 0x4002b8>, <DisassemblerInsn "je" for 0x4002bd>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400174>, <DisassemblerInsn "mov" for 0x400177>, <DisassemblerInsn "xor" for 0x40017c>, <DisassemblerInsn "cmp" for 0x40017e>, <DisassemblerInsn "mov" for 0x400182>, <DisassemblerInsn "je" for 0x400187>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40016a>, <DisassemblerInsn "call" for 0x40016f>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400168>]'}], 'cfg_block_detailed_info': [{'block_Idx': 6, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x67]>', '<xor~~eax, eax>', '<test~~cl, 1>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x20], rcx>', '<mov~~qword ptr [rsp + 0x28], rax>', '<jne~~0x400221>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rcx, qword ptr [rsp + 0x58]>', '<cmp~~qword ptr [rax + 0x78], rcx>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x20], rcx>', '<mov~~qword ptr [rsp + 0x28], rax>', '<jne~~0x400221>']}, {'block_Idx': 19, 'blockInsts': ['<jmp~~0x4002bf>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x30]>', '<add~~rsp, 0x78>', '<ret~~>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~qword ptr [rsp + 0x38], rax>', '<cmp~~rax, 0>', '<je~~0x400207>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 8], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp + 0x30], rax>', '<je~~0x4002bf>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<call~~0x500018>']}, {'block_Idx': 9, 'blockInsts': ['<jmp~~0x40025d>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x20]>', '<call~~0x500020>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x67]>', '<mov~~rax, qword ptr [rsp + 0x70]>', '<test~~rax, rax>', '<sete~~sil>', '<mov~~dl, cl>', '<xor~~dl, 1>', '<mov~~byte ptr [rsp + 0x47], dl>', '<or~~dl, sil>', '<and~~cl, dl>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x48], rax>', '<jne~~0x400207>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~rax, qword ptr [rcx + 0x88]>', '<cmp~~rax, 0>', '<mov~~qword ptr [rsp + 0x48], rcx>', '<mov~~qword ptr [rsp + 0x30], rax>', '<je~~0x4001d1>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x78>', '<mov~~qword ptr [rsp + 0x58], rdi>', '<cmp~~rdi, 0>', '<setne~~cl>', '<mov~~byte ptr [rsp + 0x67], cl>', '<xor~~eax, eax>', '<test~~cl, 1>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x68], rcx>', '<mov~~qword ptr [rsp + 0x70], rax>', '<jne~~0x40016a>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x50]>', '<mov~~rcx, qword ptr [rsp + 0x58]>', '<cmp~~qword ptr [rax + 0x88], rcx>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x68], rcx>', '<mov~~qword ptr [rsp + 0x70], rax>', '<jne~~0x40016a>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x10]>', '<call~~0x500020>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~dl, byte ptr [rsp + 0x67]>', '<mov~~al, byte ptr [rsp + 0x47]>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<test~~rcx, rcx>', '<sete~~sil>', '<or~~al, sil>', '<and~~dl, al>', '<xor~~eax, eax>', '<test~~dl, 1>', '<mov~~qword ptr [rsp + 0x10], rcx>', '<mov~~qword ptr [rsp + 0x30], rax>', '<jne~~0x4002bf>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x18], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp + 0x28], rax>', '<je~~0x40025d>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~rax, qword ptr [rcx + 0x78]>', '<cmp~~rax, 0>', '<mov~~qword ptr [rsp + 0x10], rcx>', '<mov~~qword ptr [rsp + 0x30], rax>', '<je~~0x400287>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x50], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp + 0x70], rax>', '<je~~0x4001a9>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x68]>', '<call~~0x500018>']}, {'block_Idx': 1, 'blockInsts': ['<jmp~~0x4001a9>']}], 'cfg_edge_info': [(21, 10), (21, 13), (23, 16), (22, 17), (22, 23), (11, 2), (0, 2), (1, 3), (10, 18), (15, 5), (13, 17), (16, 22), (18, 13), (12, 6), (3, 6), (12, 15), (5, 12), (0, 1), (9, 13), (19, 17), (2, 7), (13, 16), (7, 3), (6, 10), (15, 19), (18, 21), (3, 5), (23, 17), (11, 3), (7, 11), (6, 9)], 'cdg_edge_info': [(6, 18), (21, 10), (23, 16), (12, 13), (22, 23), (3, 13), (23, 22), (11, 2), (0, 2), (15, 5), (12, 6), (21, 18), (12, 15), (3, 6), (3, 12), (0, 7), (11, 7), (13, 16), (13, 22), (6, 10), (15, 19), (18, 21), (3, 5), (7, 11), (15, 12), (6, 9)], 'ddg_edge_info': [(6, 18), (21, 10), (21, 13), (23, 16), (22, 17), (5, 13), (22, 23), (3, 13), (0, 2), (5, 10), (23, 22), (11, 2), (0, 5), (5, 16), (2, 5), (2, 11), (10, 18), (0, 11), (0, 17), (15, 5), (10, 21), (2, 17), (13, 17), (15, 17), (18, 13), (16, 22), (5, 6), (21, 18), (12, 15), (3, 12), (5, 12), (0, 7), (11, 7), (5, 15), (0, 10), (0, 16), (2, 7), (0, 13), (2, 10), (2, 16), (13, 16), (10, 17), (2, 13), (7, 3), (6, 13), (13, 22), (6, 10), (18, 21), (3, 5), (21, 23), (23, 17), (0, 3), (11, 3), (5, 17), (10, 13), (0, 6), (2, 3), (7, 11), (10, 16), (11, 15), (2, 6), (0, 21), (15, 12), (16, 17), (16, 23)]}]}
{'format_child_next': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 13, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 14, 'instruction': 'movq\t%rax, -0x20(%rsp)                 # 8-byte Spill'}, {'instIndex': 15, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 16, 'instruction': 'je\t.LBB3_4'}, {'instIndex': 18, 'instruction': 'cmpq\t$0, 0x88(%rax)'}, {'instIndex': 19, 'instruction': 'jne\t.LBB3_6'}, {'instIndex': 21, 'instruction': 'movq\t0x10(%rax), %rcx'}, {'instIndex': 22, 'instruction': 'movq\t%rcx, -0x28(%rsp)                 # 8-byte Spill'}, {'instIndex': 23, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 24, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 25, 'instruction': 'movq\t%rax, -8(%rsp)                  # 8-byte Spill'}, {'instIndex': 26, 'instruction': 'je\t.LBB3_7'}, {'instIndex': 28, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 29, 'instruction': 'cmpq\t$0, 0x78(%rcx)'}, {'instIndex': 30, 'instruction': 'movq\t%rax, -8(%rsp)                  # 8-byte Spill'}, {'instIndex': 34, 'instruction': 'jmp\t.LBB3_7'}, {'instIndex': 36, 'instruction': 'retq'}]}], 'format_child_class_next': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 52, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 53, 'instruction': 'testb\t$1, %cl'}, {'instIndex': 54, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 55, 'instruction': 'movq\t%rcx, 0x20(%rsp)                  # 8-byte Spill'}, {'instIndex': 56, 'instruction': 'movq\t%rax, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 57, 'instruction': 'jne\t.LBB4_7'}, {'instIndex': 58, 'instruction': 'jmp\t.LBB4_9'}, {'instIndex': 60, 'instruction': 'callq\tav_oformat_next@PLT'}, {'instIndex': 61, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 62, 'instruction': 'movq\t%rcx, 0x18(%rsp)                  # 8-byte Spill'}, {'instIndex': 63, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 64, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 65, 'instruction': 'movq\t%rax, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 66, 'instruction': 'je\t.LBB4_9'}, {'instIndex': 69, 'instruction': 'cmpq\t%rcx, 0x78(%rax)'}, {'instIndex': 70, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 71, 'instruction': 'movq\t%rcx, 0x20(%rsp)                  # 8-byte Spill'}, {'instIndex': 72, 'instruction': 'movq\t%rax, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 73, 'instruction': 'jne\t.LBB4_7'}, {'instIndex': 79, 'instruction': 'orb\t%sil, %al'}, {'instIndex': 80, 'instruction': 'andb\t%al, %dl'}, {'instIndex': 81, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 82, 'instruction': 'testb\t$1, %dl'}, {'instIndex': 83, 'instruction': 'movq\t%rcx, 0x10(%rsp)                  # 8-byte Spill'}, {'instIndex': 85, 'instruction': 'jne\t.LBB4_12'}, {'instIndex': 87, 'instruction': 'callq\tav_oformat_next@PLT'}, {'instIndex': 88, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 89, 'instruction': 'movq\t%rcx, 8(%rsp)                   # 8-byte Spill'}, {'instIndex': 90, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 91, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 92, 'instruction': 'movq\t%rax, 0x30(%rsp)                  # 8-byte Spill'}, {'instIndex': 93, 'instruction': 'je\t.LBB4_12'}, {'instIndex': 95, 'instruction': 'movq\t0x78(%rcx), %rax'}, {'instIndex': 96, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 97, 'instruction': 'movq\t%rcx, 0x10(%rsp)                  # 8-byte Spill'}, {'instIndex': 98, 'instruction': 'movq\t%rax, 0x30(%rsp)                  # 8-byte Spill'}, {'instIndex': 99, 'instruction': 'je\t.LBB4_10'}, {'instIndex': 101, 'instruction': 'addq\t$0x78, %rsp'}, {'instIndex': 102, 'instruction': 'retq'}]}]}
The case of compiler clang with optimization O2.
Patched source code file: options.c
Patched function: 1---static void *format_child_next 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_after/O2/options.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_after/O2/options.s---format_child_next---after
function id: 3
function flag: True
There are 37 instructions for function: format_child_next in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '41', 'end': 50}, 'before': {'start': '40', 'end': 45}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 13, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 14, 'instruction': 'movq\t%rax, -0x20(%rsp)                 # 8-byte Spill'}, {'instIndex': 15, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 16, 'instruction': 'je\t.LBB3_4'}, {'instIndex': 18, 'instruction': 'cmpq\t$0, 0x88(%rax)'}, {'instIndex': 19, 'instruction': 'jne\t.LBB3_6'}, {'instIndex': 21, 'instruction': 'movq\t0x10(%rax), %rcx'}, {'instIndex': 22, 'instruction': 'movq\t%rcx, -0x28(%rsp)                 # 8-byte Spill'}, {'instIndex': 23, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 24, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 25, 'instruction': 'movq\t%rax, -8(%rsp)                  # 8-byte Spill'}, {'instIndex': 26, 'instruction': 'je\t.LBB3_7'}, {'instIndex': 28, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 29, 'instruction': 'cmpq\t$0, 0x78(%rcx)'}, {'instIndex': 30, 'instruction': 'movq\t%rax, -8(%rsp)                  # 8-byte Spill'}, {'instIndex': 34, 'instruction': 'jmp\t.LBB3_7'}, {'instIndex': 36, 'instruction': 'retq'}]}]
Patched function: 1---static const AVClass *format_child_class_next 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_after/O2/options.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_after/O2/options.s---format_child_class_next---after
function id: 4
function flag: True
There are 110 instructions for function: format_child_class_next in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 78}, 'before': {'start': '59', 'end': 67}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 62, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 63, 'instruction': 'testb\t$1, %cl'}, {'instIndex': 64, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 65, 'instruction': 'movq\t%rcx, 0x20(%rsp)                  # 8-byte Spill'}, {'instIndex': 66, 'instruction': 'movq\t%rax, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 67, 'instruction': 'jne\t.LBB4_9'}, {'instIndex': 68, 'instruction': 'jmp\t.LBB4_12'}, {'instIndex': 70, 'instruction': 'callq\tav_oformat_next@PLT'}, {'instIndex': 72, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 73, 'instruction': 'je\t.LBB4_11'}, {'instIndex': 76, 'instruction': 'cmpq\t%rcx, 0x78(%rax)'}, {'instIndex': 77, 'instruction': 'movq\t%rax, 0x20(%rsp)                  # 8-byte Spill'}, {'instIndex': 78, 'instruction': 'jne\t.LBB4_9'}, {'instIndex': 84, 'instruction': 'orb\t%sil, %al'}, {'instIndex': 85, 'instruction': 'andb\t%al, %dl'}, {'instIndex': 86, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 87, 'instruction': 'testb\t$1, %dl'}, {'instIndex': 88, 'instruction': 'movq\t%rcx, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 89, 'instruction': 'movq\t%rax, 0x30(%rsp)                  # 8-byte Spill'}, {'instIndex': 90, 'instruction': 'jne\t.LBB4_15'}, {'instIndex': 94, 'instruction': 'callq\tav_oformat_next@PLT'}, {'instIndex': 95, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 96, 'instruction': 'movq\t%rcx, (%rsp)                    # 8-byte Spill'}, {'instIndex': 97, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 98, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 99, 'instruction': 'movq\t%rax, 0x30(%rsp)                  # 8-byte Spill'}, {'instIndex': 100, 'instruction': 'je\t.LBB4_15'}, {'instIndex': 102, 'instruction': 'movq\t0x78(%rcx), %rax'}, {'instIndex': 103, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 104, 'instruction': 'movq\t%rcx, 8(%rsp)                   # 8-byte Spill'}, {'instIndex': 105, 'instruction': 'movq\t%rax, 0x30(%rsp)                  # 8-byte Spill'}, {'instIndex': 106, 'instruction': 'je\t.LBB4_13'}, {'instIndex': 108, 'instruction': 'addq\t$0x88, %rsp'}, {'instIndex': 109, 'instruction': 'retq'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_after/O2/options.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_after/O2/options.o---after
The extraction of function: format_child_next
Analyzing the binaries to generate subCFGs from patched function ...
It has 50 nodes and 75 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 37 instructions in binary file.
[4194541, 4194561, 4194576, 4194603, 4194622, 4194634]
The extraction of function: format_child_class_next
Analyzing the binaries to generate subCFGs from patched function ...
It has 50 nodes and 75 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 110 instructions in binary file.
[4194881, 4194913, 4194915, 4194925, 4194936, 4194957, 4194999, 4195009, 4195019, 4195039, 4195063]
The execution time of patched subCFG information extraction via angr: 0:00:00.215876
{'format_child_next': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40014a>, <DisassemblerInsn "ret" for 0x40014f>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000ed>, <DisassemblerInsn "mov" for 0x4000f2>, <DisassemblerInsn "mov" for 0x4000f6>, <DisassemblerInsn "cmp" for 0x4000fb>, <DisassemblerInsn "je" for 0x4000ff>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40012b>, <DisassemblerInsn "xor" for 0x400130>, <DisassemblerInsn "cmp" for 0x400132>, <DisassemblerInsn "mov" for 0x400137>, <DisassemblerInsn "je" for 0x40013c>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c0>, <DisassemblerInsn "xor" for 0x4000c5>, <DisassemblerInsn "cmp" for 0x4000c7>, <DisassemblerInsn "mov" for 0x4000cb>, <DisassemblerInsn "jne" for 0x4000d0>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400101>, <DisassemblerInsn "cmp" for 0x400106>, <DisassemblerInsn "jne" for 0x40010e>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000d2>, <DisassemblerInsn "mov" for 0x4000d7>, <DisassemblerInsn "mov" for 0x4000db>, <DisassemblerInsn "xor" for 0x4000e0>, <DisassemblerInsn "cmp" for 0x4000e2>, <DisassemblerInsn "mov" for 0x4000e6>, <DisassemblerInsn "je" for 0x4000eb>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40013e>, <DisassemblerInsn "mov" for 0x400143>, <DisassemblerInsn "jmp" for 0x400148>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400110>, <DisassemblerInsn "mov" for 0x400115>, <DisassemblerInsn "mov" for 0x400119>, <DisassemblerInsn "xor" for 0x40011e>, <DisassemblerInsn "cmp" for 0x400120>, <DisassemblerInsn "mov" for 0x400124>, <DisassemblerInsn "je" for 0x400129>]'}], 'cfg_block_detailed_info': [{'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 8]>', '<ret~~>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~qword ptr [rsp - 0x20], rax>', '<cmp~~rax, 0>', '<je~~0x400110>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rcx, qword ptr [rsp - 0x28]>', '<xor~~eax, eax>', '<cmp~~qword ptr [rcx + 0x78], 0>', '<mov~~qword ptr [rsp - 8], rax>', '<je~~0x40014a>']}, {'block_Idx': 0, 'blockInsts': ['<mov~~qword ptr [rsp - 0x10], rdi>', '<xor~~eax, eax>', '<cmp~~rsi, 0>', '<mov~~qword ptr [rsp - 8], rax>', '<jne~~0x40014a>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<cmp~~qword ptr [rax + 0x88], 0>', '<jne~~0x40013e>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rcx, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp - 0x18], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp - 8], rax>', '<je~~0x40014a>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x18]>', '<mov~~qword ptr [rsp - 8], rax>', '<jmp~~0x40014a>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rcx, qword ptr [rax + 0x10]>', '<mov~~qword ptr [rsp - 0x28], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp - 8], rax>', '<je~~0x40014a>']}], 'cfg_edge_info': [(6, 2), (1, 2), (3, 4), (5, 4), (4, 6), (5, 7), (4, 2), (6, 7), (0, 2), (7, 2), (1, 3), (3, 5)]}], 'format_child_class_next': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400278>, <DisassemblerInsn "mov" for 0x40027d>, <DisassemblerInsn "cmp" for 0x400282>, <DisassemblerInsn "mov" for 0x400286>, <DisassemblerInsn "jne" for 0x40028b>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400263>, <DisassemblerInsn "call" for 0x400268>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002cb>, <DisassemblerInsn "mov" for 0x4002ce>, <DisassemblerInsn "xor" for 0x4002d2>, <DisassemblerInsn "cmp" for 0x4002d4>, <DisassemblerInsn "mov" for 0x4002d8>, <DisassemblerInsn "je" for 0x4002dd>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002f7>, <DisassemblerInsn "add" for 0x4002fc>, <DisassemblerInsn "ret" for 0x400303>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002df>, <DisassemblerInsn "mov" for 0x4002e3>, <DisassemblerInsn "cmp" for 0x4002e7>, <DisassemblerInsn "mov" for 0x4002eb>, <DisassemblerInsn "mov" for 0x4002f0>, <DisassemblerInsn "je" for 0x4002f5>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001bd>, <DisassemblerInsn "mov" for 0x4001c2>, <DisassemblerInsn "test" for 0x4001c6>, <DisassemblerInsn "sete" for 0x4001c9>, <DisassemblerInsn "mov" for 0x4001cd>, <DisassemblerInsn "xor" for 0x4001cf>, <DisassemblerInsn "mov" for 0x4001d1>, <DisassemblerInsn "or" for 0x4001d4>, <DisassemblerInsn "and" for 0x4001d7>, <DisassemblerInsn "test" for 0x4001da>, <DisassemblerInsn "mov" for 0x4001dd>, <DisassemblerInsn "mov" for 0x4001df>, <DisassemblerInsn "mov" for 0x4001e3>, <DisassemblerInsn "mov" for 0x4001e8>, <DisassemblerInsn "jne" for 0x4001ec>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400261>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002b7>, <DisassemblerInsn "mov" for 0x4002bc>, <DisassemblerInsn "mov" for 0x4002c1>, <DisassemblerInsn "call" for 0x4002c6>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40020a>, <DisassemblerInsn "mov" for 0x40020d>, <DisassemblerInsn "mov" for 0x400211>, <DisassemblerInsn "cmp" for 0x400216>, <DisassemblerInsn "mov" for 0x40021a>, <DisassemblerInsn "je" for 0x40021e>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400241>, <DisassemblerInsn "mov" for 0x400245>, <DisassemblerInsn "mov" for 0x400249>, <DisassemblerInsn "xor" for 0x40024d>, <DisassemblerInsn "test" for 0x40024f>, <DisassemblerInsn "mov" for 0x400252>, <DisassemblerInsn "mov" for 0x400255>, <DisassemblerInsn "mov" for 0x40025a>, <DisassemblerInsn "jne" for 0x40025f>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40023c>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40026d>, <DisassemblerInsn "cmp" for 0x400272>, <DisassemblerInsn "je" for 0x400276>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002c1>, <DisassemblerInsn "call" for 0x4002c6>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40028d>, <DisassemblerInsn "mov" for 0x400292>, <DisassemblerInsn "mov" for 0x400296>, <DisassemblerInsn "test" for 0x40029a>, <DisassemblerInsn "sete" for 0x40029d>, <DisassemblerInsn "or" for 0x4002a1>, <DisassemblerInsn "and" for 0x4002a4>, <DisassemblerInsn "xor" for 0x4002a6>, <DisassemblerInsn "test" for 0x4002a8>, <DisassemblerInsn "mov" for 0x4002ab>, <DisassemblerInsn "mov" for 0x4002b0>, <DisassemblerInsn "jne" for 0x4002b5>]'}], 'cfg_block_detailed_info': [{'block_Idx': 19, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x70]>', '<cmp~~qword ptr [rax + 0x78], rcx>', '<mov~~qword ptr [rsp + 0x20], rax>', '<jne~~0x400263>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x20]>', '<call~~0x500020>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~qword ptr [rsp], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp + 0x30], rax>', '<je~~0x4002f7>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x30]>', '<add~~rsp, 0x88>', '<ret~~>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rcx, qword ptr [rsp]>', '<mov~~rax, qword ptr [rcx + 0x78]>', '<cmp~~rax, 0>', '<mov~~qword ptr [rsp + 8], rcx>', '<mov~~qword ptr [rsp + 0x30], rax>', '<je~~0x4002c1>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x58]>', '<mov~~dl, byte ptr [rsp + 0x7f]>', '<test~~rcx, rcx>', '<sete~~dil>', '<mov~~al, dl>', '<xor~~al, 1>', '<mov~~sil, al>', '<or~~sil, dil>', '<and~~dl, sil>', '<test~~dl, 1>', '<mov~~dl, al>', '<mov~~byte ptr [rsp + 0x67], dl>', '<mov~~qword ptr [rsp + 0x68], rcx>', '<mov~~byte ptr [rsp + 0x57], al>', '<jne~~0x400241>']}, {'block_Idx': 10, 'blockInsts': ['<jmp~~0x4002b7>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~al, byte ptr [rsp + 0x47]>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<cmp~~rcx, 0>', '<mov~~byte ptr [rsp + 0x57], al>', '<je~~0x400241>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x7f]>', '<mov~~al, byte ptr [rsp + 0x57]>', '<mov~~byte ptr [rsp + 0x1f], al>', '<xor~~eax, eax>', '<test~~cl, 1>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x20], rcx>', '<mov~~qword ptr [rsp + 0x28], rax>', '<jne~~0x400263>']}, {'block_Idx': 13, 'blockInsts': ['<jmp~~0x4002f7>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~qword ptr [rsp + 0x10], rax>', '<cmp~~rax, 0>', '<je~~0x40028d>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x10]>', '<mov~~dl, byte ptr [rsp + 0x7f]>', '<mov~~al, byte ptr [rsp + 0x1f]>', '<test~~rcx, rcx>', '<sete~~sil>', '<or~~al, sil>', '<and~~dl, al>', '<xor~~eax, eax>', '<test~~dl, 1>', '<mov~~qword ptr [rsp + 0x28], rcx>', '<mov~~qword ptr [rsp + 0x30], rax>', '<jne~~0x4002f7>']}], 'cfg_edge_info': [(19, 18), (6, 8), (18, 16), (20, 16), (19, 11), (8, 11), (17, 20), (10, 14), (13, 16), (15, 19), (21, 17), (20, 21), (5, 8), (14, 17), (17, 16), (8, 10), (11, 15), (15, 18), (18, 14)]}]}
{'format_child_next': [4194541, 4194561, 4194576, 4194603, 4194622, 4194634], 'format_child_class_next': [4194881, 4194913, 4194915, 4194925, 4194936, 4194957, 4194999, 4195009, 4195019, 4195039, 4195063]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_after/O2/options.o---after
The extraction of function: format_child_next
[4194541, 4194561, 4194576, 4194603, 4194622, 4194634]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 8 nodes and 13 edges in CFGEmulated.
It has 8 nodes and 9 edges in CDG.
It has 106 nodes and 119 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194541, 4194561, 4194576, 4194603, 4194622, 4194634]
{4194496, 4194561, 4194634, 4194603, 4194541, 4194576, 4194514, 4194622}
[6, 7, 2, 4, 1, 3, 5, 0]
The extraction of function: format_child_class_next
[4194881, 4194913, 4194915, 4194925, 4194936, 4194957, 4194999, 4195009, 4195019, 4195039, 4195063]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 28 nodes and 45 edges in CFGEmulated.
It has 27 nodes and 41 edges in CDG.
It has 336 nodes and 429 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194881, 4194913, 4194915, 4194925, 4194936, 4194957, 4194999, 4195009, 4195019, 4195039, 4195063]
{4194816, 4194826, 4194698, 4194957, 4194711, 4194848, 4194999, 4194876, 4194749, 4194881, 4195009, 4195019, 4194640, 4195039, 4194913, 4194915, 4194925, 4194798, 4194678, 4195063, 4194936}
[21, 13, 15, 1, 24, 11, 26, 0, 9, 2, 19, 7, 22, 3, 16, 6, 8, 12, 25, 10, 23, 14]
The execution time of patched slicing information extraction via angr: 0:00:02.252286
{'format_child_next': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40012b>, <DisassemblerInsn "xor" for 0x400130>, <DisassemblerInsn "cmp" for 0x400132>, <DisassemblerInsn "mov" for 0x400137>, <DisassemblerInsn "je" for 0x40013c>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40013e>, <DisassemblerInsn "mov" for 0x400143>, <DisassemblerInsn "jmp" for 0x400148>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40014a>, <DisassemblerInsn "ret" for 0x40014f>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400110>, <DisassemblerInsn "mov" for 0x400115>, <DisassemblerInsn "mov" for 0x400119>, <DisassemblerInsn "xor" for 0x40011e>, <DisassemblerInsn "cmp" for 0x400120>, <DisassemblerInsn "mov" for 0x400124>, <DisassemblerInsn "je" for 0x400129>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000d2>, <DisassemblerInsn "mov" for 0x4000d7>, <DisassemblerInsn "mov" for 0x4000db>, <DisassemblerInsn "xor" for 0x4000e0>, <DisassemblerInsn "cmp" for 0x4000e2>, <DisassemblerInsn "mov" for 0x4000e6>, <DisassemblerInsn "je" for 0x4000eb>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000ed>, <DisassemblerInsn "mov" for 0x4000f2>, <DisassemblerInsn "mov" for 0x4000f6>, <DisassemblerInsn "cmp" for 0x4000fb>, <DisassemblerInsn "je" for 0x4000ff>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400101>, <DisassemblerInsn "cmp" for 0x400106>, <DisassemblerInsn "jne" for 0x40010e>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c0>, <DisassemblerInsn "xor" for 0x4000c5>, <DisassemblerInsn "cmp" for 0x4000c7>, <DisassemblerInsn "mov" for 0x4000cb>, <DisassemblerInsn "jne" for 0x4000d0>]'}], 'cfg_block_detailed_info': [{'block_Idx': 6, 'blockInsts': ['<mov~~rcx, qword ptr [rsp - 0x28]>', '<xor~~eax, eax>', '<cmp~~qword ptr [rcx + 0x78], 0>', '<mov~~qword ptr [rsp - 8], rax>', '<je~~0x40014a>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x18]>', '<mov~~qword ptr [rsp - 8], rax>', '<jmp~~0x40014a>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 8]>', '<ret~~>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rcx, qword ptr [rax + 0x10]>', '<mov~~qword ptr [rsp - 0x28], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp - 8], rax>', '<je~~0x40014a>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rcx, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp - 0x18], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp - 8], rax>', '<je~~0x40014a>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~qword ptr [rsp - 0x20], rax>', '<cmp~~rax, 0>', '<je~~0x400110>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<cmp~~qword ptr [rax + 0x88], 0>', '<jne~~0x40013e>']}, {'block_Idx': 0, 'blockInsts': ['<mov~~qword ptr [rsp - 0x10], rdi>', '<xor~~eax, eax>', '<cmp~~rsi, 0>', '<mov~~qword ptr [rsp - 8], rax>', '<jne~~0x40014a>']}], 'cfg_edge_info': [(0, 1), (6, 2), (1, 2), (3, 4), (5, 4), (4, 6), (5, 7), (4, 2), (6, 7), (0, 2), (7, 2), (1, 3), (3, 5)], 'cdg_edge_info': [(0, 1), (5, 4), (4, 6), (5, 7), (1, 4), (6, 7), (3, 2), (1, 3), (3, 5)], 'ddg_edge_info': [(0, 1), (0, 7), (6, 2), (1, 2), (0, 4), (0, 3), (4, 6), (4, 2), (0, 6), (0, 2), (1, 7), (0, 5), (7, 2), (3, 5)]}], 'format_child_class_next': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40026d>, <DisassemblerInsn "cmp" for 0x400272>, <DisassemblerInsn "je" for 0x400276>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400263>, <DisassemblerInsn "call" for 0x400268>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40023c>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400176>, <DisassemblerInsn "xor" for 0x40017a>, <DisassemblerInsn "xor" for 0x40017d>, <DisassemblerInsn "mov" for 0x40017f>, <DisassemblerInsn "mov" for 0x400183>, <DisassemblerInsn "jmp" for 0x400188>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400278>, <DisassemblerInsn "mov" for 0x40027d>, <DisassemblerInsn "cmp" for 0x400282>, <DisassemblerInsn "mov" for 0x400286>, <DisassemblerInsn "jne" for 0x40028b>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400220>, <DisassemblerInsn "mov" for 0x400225>, <DisassemblerInsn "cmp" for 0x40022c>, <DisassemblerInsn "mov" for 0x400230>, <DisassemblerInsn "mov" for 0x400235>, <DisassemblerInsn "je" for 0x40023a>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002c1>, <DisassemblerInsn "call" for 0x4002c6>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400150>, <DisassemblerInsn "mov" for 0x400157>, <DisassemblerInsn "cmp" for 0x40015c>, <DisassemblerInsn "setne" for 0x400160>, <DisassemblerInsn "mov" for 0x400163>, <DisassemblerInsn "xor" for 0x400167>, <DisassemblerInsn "test" for 0x400169>, <DisassemblerInsn "mov" for 0x40016c>, <DisassemblerInsn "jne" for 0x400174>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a2>, <DisassemblerInsn "mov" for 0x4001a7>, <DisassemblerInsn "cmp" for 0x4001ac>, <DisassemblerInsn "mov" for 0x4001b3>, <DisassemblerInsn "jne" for 0x4001bb>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40018a>, <DisassemblerInsn "call" for 0x400192>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002f7>, <DisassemblerInsn "add" for 0x4002fc>, <DisassemblerInsn "ret" for 0x400303>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40020a>, <DisassemblerInsn "mov" for 0x40020d>, <DisassemblerInsn "mov" for 0x400211>, <DisassemblerInsn "cmp" for 0x400216>, <DisassemblerInsn "mov" for 0x40021a>, <DisassemblerInsn "je" for 0x40021e>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002cb>, <DisassemblerInsn "mov" for 0x4002ce>, <DisassemblerInsn "xor" for 0x4002d2>, <DisassemblerInsn "cmp" for 0x4002d4>, <DisassemblerInsn "mov" for 0x4002d8>, <DisassemblerInsn "je" for 0x4002dd>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001ee>, <DisassemblerInsn "mov" for 0x4001f2>, <DisassemblerInsn "mov" for 0x4001f7>, <DisassemblerInsn "mov" for 0x4001fb>, <DisassemblerInsn "mov" for 0x400200>, <DisassemblerInsn "call" for 0x400205>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002b7>, <DisassemblerInsn "mov" for 0x4002bc>, <DisassemblerInsn "mov" for 0x4002c1>, <DisassemblerInsn "call" for 0x4002c6>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400197>, <DisassemblerInsn "cmp" for 0x40019c>, <DisassemblerInsn "je" for 0x4001a0>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001bd>, <DisassemblerInsn "mov" for 0x4001c2>, <DisassemblerInsn "test" for 0x4001c6>, <DisassemblerInsn "sete" for 0x4001c9>, <DisassemblerInsn "mov" for 0x4001cd>, <DisassemblerInsn "xor" for 0x4001cf>, <DisassemblerInsn "mov" for 0x4001d1>, <DisassemblerInsn "or" for 0x4001d4>, <DisassemblerInsn "and" for 0x4001d7>, <DisassemblerInsn "test" for 0x4001da>, <DisassemblerInsn "mov" for 0x4001dd>, <DisassemblerInsn "mov" for 0x4001df>, <DisassemblerInsn "mov" for 0x4001e3>, <DisassemblerInsn "mov" for 0x4001e8>, <DisassemblerInsn "jne" for 0x4001ec>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400261>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002df>, <DisassemblerInsn "mov" for 0x4002e3>, <DisassemblerInsn "cmp" for 0x4002e7>, <DisassemblerInsn "mov" for 0x4002eb>, <DisassemblerInsn "mov" for 0x4002f0>, <DisassemblerInsn "je" for 0x4002f5>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400241>, <DisassemblerInsn "mov" for 0x400245>, <DisassemblerInsn "mov" for 0x400249>, <DisassemblerInsn "xor" for 0x40024d>, <DisassemblerInsn "test" for 0x40024f>, <DisassemblerInsn "mov" for 0x400252>, <DisassemblerInsn "mov" for 0x400255>, <DisassemblerInsn "mov" for 0x40025a>, <DisassemblerInsn "jne" for 0x40025f>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40028d>, <DisassemblerInsn "mov" for 0x400292>, <DisassemblerInsn "mov" for 0x400296>, <DisassemblerInsn "test" for 0x40029a>, <DisassemblerInsn "sete" for 0x40029d>, <DisassemblerInsn "or" for 0x4002a1>, <DisassemblerInsn "and" for 0x4002a4>, <DisassemblerInsn "xor" for 0x4002a6>, <DisassemblerInsn "test" for 0x4002a8>, <DisassemblerInsn "mov" for 0x4002ab>, <DisassemblerInsn "mov" for 0x4002b0>, <DisassemblerInsn "jne" for 0x4002b5>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400200>, <DisassemblerInsn "call" for 0x400205>]'}], 'cfg_block_detailed_info': [{'block_Idx': 21, 'blockInsts': ['<mov~~qword ptr [rsp + 0x10], rax>', '<cmp~~rax, 0>', '<je~~0x40028d>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x20]>', '<call~~0x500020>']}, {'block_Idx': 15, 'blockInsts': ['<jmp~~0x4002f7>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x7f]>', '<xor~~cl, 0xff>', '<xor~~eax, eax>', '<mov~~byte ptr [rsp + 0x67], cl>', '<mov~~qword ptr [rsp + 0x68], rax>', '<jmp~~0x4001ee>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x70]>', '<cmp~~qword ptr [rax + 0x78], rcx>', '<mov~~qword ptr [rsp + 0x20], rax>', '<jne~~0x400263>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~rax, qword ptr [rcx + 0x88]>', '<cmp~~rax, 0>', '<mov~~qword ptr [rsp + 0x48], rcx>', '<mov~~qword ptr [rsp + 0x30], rax>', '<je~~0x400200>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x88>', '<mov~~qword ptr [rsp + 0x70], rdi>', '<cmp~~rdi, 0>', '<setne~~cl>', '<mov~~byte ptr [rsp + 0x7f], cl>', '<xor~~eax, eax>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x80], rax>', '<jne~~0x40018a>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~rcx, qword ptr [rsp + 0x70]>', '<cmp~~qword ptr [rax + 0x88], rcx>', '<mov~~qword ptr [rsp + 0x80], rax>', '<jne~~0x40018a>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x80]>', '<call~~0x500018>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x30]>', '<add~~rsp, 0x88>', '<ret~~>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~al, byte ptr [rsp + 0x47]>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<cmp~~rcx, 0>', '<mov~~byte ptr [rsp + 0x57], al>', '<je~~0x400241>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~qword ptr [rsp], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp + 0x30], rax>', '<je~~0x4002f7>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x67]>', '<mov~~rax, qword ptr [rsp + 0x68]>', '<mov~~byte ptr [rsp + 0x47], cl>', '<mov~~qword ptr [rsp + 0x48], rax>', '<mov~~rdi, qword ptr [rsp + 0x48]>', '<call~~0x500018>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~qword ptr [rsp + 0x58], rax>', '<cmp~~rax, 0>', '<je~~0x4001bd>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x58]>', '<mov~~dl, byte ptr [rsp + 0x7f]>', '<test~~rcx, rcx>', '<sete~~dil>', '<mov~~al, dl>', '<xor~~al, 1>', '<mov~~sil, al>', '<or~~sil, dil>', '<and~~dl, sil>', '<test~~dl, 1>', '<mov~~dl, al>', '<mov~~byte ptr [rsp + 0x67], dl>', '<mov~~qword ptr [rsp + 0x68], rcx>', '<mov~~byte ptr [rsp + 0x57], al>', '<jne~~0x400241>']}, {'block_Idx': 12, 'blockInsts': ['<jmp~~0x4002b7>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rcx, qword ptr [rsp]>', '<mov~~rax, qword ptr [rcx + 0x78]>', '<cmp~~rax, 0>', '<mov~~qword ptr [rsp + 8], rcx>', '<mov~~qword ptr [rsp + 0x30], rax>', '<je~~0x4002c1>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x7f]>', '<mov~~al, byte ptr [rsp + 0x57]>', '<mov~~byte ptr [rsp + 0x1f], al>', '<xor~~eax, eax>', '<test~~cl, 1>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x20], rcx>', '<mov~~qword ptr [rsp + 0x28], rax>', '<jne~~0x400263>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x10]>', '<mov~~dl, byte ptr [rsp + 0x7f]>', '<mov~~al, byte ptr [rsp + 0x1f]>', '<test~~rcx, rcx>', '<sete~~sil>', '<or~~al, sil>', '<and~~dl, al>', '<xor~~eax, eax>', '<test~~dl, 1>', '<mov~~qword ptr [rsp + 0x28], rcx>', '<mov~~qword ptr [rsp + 0x30], rax>', '<jne~~0x4002f7>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<call~~0x500018>']}], 'cfg_edge_info': [(14, 7), (3, 7), (23, 16), (12, 16), (9, 2), (23, 19), (0, 2), (8, 3), (9, 8), (11, 14), (10, 12), (1, 3), (25, 19), (24, 23), (7, 10), (6, 8), (16, 22), (21, 24), (22, 19), (22, 25), (13, 21), (0, 1), (24, 13), (15, 19), (26, 22), (21, 23), (8, 10), (10, 13), (2, 6), (11, 15), (7, 11), (6, 9), (25, 26)], 'cdg_edge_info': [(23, 16), (23, 22), (8, 3), (0, 2), (0, 8), (11, 14), (10, 12), (24, 21), (10, 21), (25, 22), (7, 10), (21, 24), (22, 25), (0, 1), (11, 7), (0, 7), (10, 23), (24, 13), (8, 7), (0, 3), (8, 10), (10, 13), (0, 6), (10, 16), (11, 15), (10, 22), (7, 11), (25, 26)], 'ddg_edge_info': [(16, 26), (23, 16), (14, 7), (3, 7), (23, 19), (14, 10), (14, 16), (23, 22), (8, 3), (14, 13), (0, 2), (14, 19), (0, 8), (11, 14), (1, 3), (2, 8), (24, 21), (0, 23), (10, 21), (25, 19), (13, 23), (25, 22), (7, 10), (6, 8), (16, 22), (21, 24), (22, 19), (22, 25), (13, 21), (0, 1), (11, 7), (0, 10), (11, 19), (2, 16), (13, 16), (10, 23), (2, 13), (24, 13), (13, 19), (2, 10), (26, 19), (26, 25), (26, 22), (21, 23), (14, 11), (3, 14), (8, 7), (0, 3), (8, 10), (10, 13), (0, 6), (2, 3), (10, 16), (2, 6), (0, 24), (10, 22), (7, 11), (25, 26), (13, 24)]}]}
{'format_child_next': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 13, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 14, 'instruction': 'movq\t%rax, -0x20(%rsp)                 # 8-byte Spill'}, {'instIndex': 15, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 16, 'instruction': 'je\t.LBB3_4'}, {'instIndex': 18, 'instruction': 'cmpq\t$0, 0x88(%rax)'}, {'instIndex': 19, 'instruction': 'jne\t.LBB3_6'}, {'instIndex': 21, 'instruction': 'movq\t0x10(%rax), %rcx'}, {'instIndex': 22, 'instruction': 'movq\t%rcx, -0x28(%rsp)                 # 8-byte Spill'}, {'instIndex': 23, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 24, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 25, 'instruction': 'movq\t%rax, -8(%rsp)                  # 8-byte Spill'}, {'instIndex': 26, 'instruction': 'je\t.LBB3_7'}, {'instIndex': 28, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 29, 'instruction': 'cmpq\t$0, 0x78(%rcx)'}, {'instIndex': 30, 'instruction': 'movq\t%rax, -8(%rsp)                  # 8-byte Spill'}, {'instIndex': 34, 'instruction': 'jmp\t.LBB3_7'}, {'instIndex': 36, 'instruction': 'retq'}]}], 'format_child_class_next': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 62, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 63, 'instruction': 'testb\t$1, %cl'}, {'instIndex': 64, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 65, 'instruction': 'movq\t%rcx, 0x20(%rsp)                  # 8-byte Spill'}, {'instIndex': 66, 'instruction': 'movq\t%rax, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 67, 'instruction': 'jne\t.LBB4_9'}, {'instIndex': 68, 'instruction': 'jmp\t.LBB4_12'}, {'instIndex': 70, 'instruction': 'callq\tav_oformat_next@PLT'}, {'instIndex': 72, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 73, 'instruction': 'je\t.LBB4_11'}, {'instIndex': 76, 'instruction': 'cmpq\t%rcx, 0x78(%rax)'}, {'instIndex': 77, 'instruction': 'movq\t%rax, 0x20(%rsp)                  # 8-byte Spill'}, {'instIndex': 78, 'instruction': 'jne\t.LBB4_9'}, {'instIndex': 84, 'instruction': 'orb\t%sil, %al'}, {'instIndex': 85, 'instruction': 'andb\t%al, %dl'}, {'instIndex': 86, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 87, 'instruction': 'testb\t$1, %dl'}, {'instIndex': 88, 'instruction': 'movq\t%rcx, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 89, 'instruction': 'movq\t%rax, 0x30(%rsp)                  # 8-byte Spill'}, {'instIndex': 90, 'instruction': 'jne\t.LBB4_15'}, {'instIndex': 94, 'instruction': 'callq\tav_oformat_next@PLT'}, {'instIndex': 95, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 96, 'instruction': 'movq\t%rcx, (%rsp)                    # 8-byte Spill'}, {'instIndex': 97, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 98, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 99, 'instruction': 'movq\t%rax, 0x30(%rsp)                  # 8-byte Spill'}, {'instIndex': 100, 'instruction': 'je\t.LBB4_15'}, {'instIndex': 102, 'instruction': 'movq\t0x78(%rcx), %rax'}, {'instIndex': 103, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 104, 'instruction': 'movq\t%rcx, 8(%rsp)                   # 8-byte Spill'}, {'instIndex': 105, 'instruction': 'movq\t%rax, 0x30(%rsp)                  # 8-byte Spill'}, {'instIndex': 106, 'instruction': 'je\t.LBB4_13'}, {'instIndex': 108, 'instruction': 'addq\t$0x88, %rsp'}, {'instIndex': 109, 'instruction': 'retq'}]}]}
The case of compiler clang with optimization O3.
Patched source code file: options.c
Patched function: 1---static void *format_child_next 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_after/O3/options.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_after/O3/options.s---format_child_next---after
function id: 3
function flag: True
There are 37 instructions for function: format_child_next in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '41', 'end': 50}, 'before': {'start': '40', 'end': 45}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 13, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 14, 'instruction': 'movq\t%rax, -0x20(%rsp)                 # 8-byte Spill'}, {'instIndex': 15, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 16, 'instruction': 'je\t.LBB3_4'}, {'instIndex': 18, 'instruction': 'cmpq\t$0, 0x88(%rax)'}, {'instIndex': 19, 'instruction': 'jne\t.LBB3_6'}, {'instIndex': 21, 'instruction': 'movq\t0x10(%rax), %rcx'}, {'instIndex': 22, 'instruction': 'movq\t%rcx, -0x28(%rsp)                 # 8-byte Spill'}, {'instIndex': 23, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 24, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 25, 'instruction': 'movq\t%rax, -8(%rsp)                  # 8-byte Spill'}, {'instIndex': 26, 'instruction': 'je\t.LBB3_7'}, {'instIndex': 28, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 29, 'instruction': 'cmpq\t$0, 0x78(%rcx)'}, {'instIndex': 30, 'instruction': 'movq\t%rax, -8(%rsp)                  # 8-byte Spill'}, {'instIndex': 34, 'instruction': 'jmp\t.LBB3_7'}, {'instIndex': 36, 'instruction': 'retq'}]}]
Patched function: 1---static const AVClass *format_child_class_next 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_after/O3/options.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_after/O3/options.s---format_child_class_next---after
function id: 4
function flag: True
There are 110 instructions for function: format_child_class_next in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 78}, 'before': {'start': '59', 'end': 67}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 62, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 63, 'instruction': 'testb\t$1, %cl'}, {'instIndex': 64, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 65, 'instruction': 'movq\t%rcx, 0x20(%rsp)                  # 8-byte Spill'}, {'instIndex': 66, 'instruction': 'movq\t%rax, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 67, 'instruction': 'jne\t.LBB4_9'}, {'instIndex': 68, 'instruction': 'jmp\t.LBB4_12'}, {'instIndex': 70, 'instruction': 'callq\tav_oformat_next@PLT'}, {'instIndex': 72, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 73, 'instruction': 'je\t.LBB4_11'}, {'instIndex': 76, 'instruction': 'cmpq\t%rcx, 0x78(%rax)'}, {'instIndex': 77, 'instruction': 'movq\t%rax, 0x20(%rsp)                  # 8-byte Spill'}, {'instIndex': 78, 'instruction': 'jne\t.LBB4_9'}, {'instIndex': 84, 'instruction': 'orb\t%sil, %al'}, {'instIndex': 85, 'instruction': 'andb\t%al, %dl'}, {'instIndex': 86, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 87, 'instruction': 'testb\t$1, %dl'}, {'instIndex': 88, 'instruction': 'movq\t%rcx, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 89, 'instruction': 'movq\t%rax, 0x30(%rsp)                  # 8-byte Spill'}, {'instIndex': 90, 'instruction': 'jne\t.LBB4_15'}, {'instIndex': 94, 'instruction': 'callq\tav_oformat_next@PLT'}, {'instIndex': 95, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 96, 'instruction': 'movq\t%rcx, (%rsp)                    # 8-byte Spill'}, {'instIndex': 97, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 98, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 99, 'instruction': 'movq\t%rax, 0x30(%rsp)                  # 8-byte Spill'}, {'instIndex': 100, 'instruction': 'je\t.LBB4_15'}, {'instIndex': 102, 'instruction': 'movq\t0x78(%rcx), %rax'}, {'instIndex': 103, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 104, 'instruction': 'movq\t%rcx, 8(%rsp)                   # 8-byte Spill'}, {'instIndex': 105, 'instruction': 'movq\t%rax, 0x30(%rsp)                  # 8-byte Spill'}, {'instIndex': 106, 'instruction': 'je\t.LBB4_13'}, {'instIndex': 108, 'instruction': 'addq\t$0x88, %rsp'}, {'instIndex': 109, 'instruction': 'retq'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_after/O3/options.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_after/O3/options.o---after
The extraction of function: format_child_next
Analyzing the binaries to generate subCFGs from patched function ...
It has 50 nodes and 75 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 37 instructions in binary file.
[4194541, 4194561, 4194576, 4194603, 4194622, 4194634]
The extraction of function: format_child_class_next
Analyzing the binaries to generate subCFGs from patched function ...
It has 50 nodes and 75 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 110 instructions in binary file.
[4194881, 4194913, 4194915, 4194925, 4194936, 4194957, 4194999, 4195009, 4195019, 4195039, 4195063]
The execution time of patched subCFG information extraction via angr: 0:00:00.218908
{'format_child_next': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40014a>, <DisassemblerInsn "ret" for 0x40014f>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000ed>, <DisassemblerInsn "mov" for 0x4000f2>, <DisassemblerInsn "mov" for 0x4000f6>, <DisassemblerInsn "cmp" for 0x4000fb>, <DisassemblerInsn "je" for 0x4000ff>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40012b>, <DisassemblerInsn "xor" for 0x400130>, <DisassemblerInsn "cmp" for 0x400132>, <DisassemblerInsn "mov" for 0x400137>, <DisassemblerInsn "je" for 0x40013c>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c0>, <DisassemblerInsn "xor" for 0x4000c5>, <DisassemblerInsn "cmp" for 0x4000c7>, <DisassemblerInsn "mov" for 0x4000cb>, <DisassemblerInsn "jne" for 0x4000d0>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400101>, <DisassemblerInsn "cmp" for 0x400106>, <DisassemblerInsn "jne" for 0x40010e>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000d2>, <DisassemblerInsn "mov" for 0x4000d7>, <DisassemblerInsn "mov" for 0x4000db>, <DisassemblerInsn "xor" for 0x4000e0>, <DisassemblerInsn "cmp" for 0x4000e2>, <DisassemblerInsn "mov" for 0x4000e6>, <DisassemblerInsn "je" for 0x4000eb>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40013e>, <DisassemblerInsn "mov" for 0x400143>, <DisassemblerInsn "jmp" for 0x400148>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400110>, <DisassemblerInsn "mov" for 0x400115>, <DisassemblerInsn "mov" for 0x400119>, <DisassemblerInsn "xor" for 0x40011e>, <DisassemblerInsn "cmp" for 0x400120>, <DisassemblerInsn "mov" for 0x400124>, <DisassemblerInsn "je" for 0x400129>]'}], 'cfg_block_detailed_info': [{'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 8]>', '<ret~~>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~qword ptr [rsp - 0x20], rax>', '<cmp~~rax, 0>', '<je~~0x400110>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rcx, qword ptr [rsp - 0x28]>', '<xor~~eax, eax>', '<cmp~~qword ptr [rcx + 0x78], 0>', '<mov~~qword ptr [rsp - 8], rax>', '<je~~0x40014a>']}, {'block_Idx': 0, 'blockInsts': ['<mov~~qword ptr [rsp - 0x10], rdi>', '<xor~~eax, eax>', '<cmp~~rsi, 0>', '<mov~~qword ptr [rsp - 8], rax>', '<jne~~0x40014a>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<cmp~~qword ptr [rax + 0x88], 0>', '<jne~~0x40013e>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rcx, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp - 0x18], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp - 8], rax>', '<je~~0x40014a>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x18]>', '<mov~~qword ptr [rsp - 8], rax>', '<jmp~~0x40014a>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rcx, qword ptr [rax + 0x10]>', '<mov~~qword ptr [rsp - 0x28], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp - 8], rax>', '<je~~0x40014a>']}], 'cfg_edge_info': [(6, 2), (1, 2), (3, 4), (5, 4), (4, 6), (5, 7), (4, 2), (6, 7), (0, 2), (7, 2), (1, 3), (3, 5)]}], 'format_child_class_next': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400278>, <DisassemblerInsn "mov" for 0x40027d>, <DisassemblerInsn "cmp" for 0x400282>, <DisassemblerInsn "mov" for 0x400286>, <DisassemblerInsn "jne" for 0x40028b>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400263>, <DisassemblerInsn "call" for 0x400268>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002cb>, <DisassemblerInsn "mov" for 0x4002ce>, <DisassemblerInsn "xor" for 0x4002d2>, <DisassemblerInsn "cmp" for 0x4002d4>, <DisassemblerInsn "mov" for 0x4002d8>, <DisassemblerInsn "je" for 0x4002dd>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002f7>, <DisassemblerInsn "add" for 0x4002fc>, <DisassemblerInsn "ret" for 0x400303>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002df>, <DisassemblerInsn "mov" for 0x4002e3>, <DisassemblerInsn "cmp" for 0x4002e7>, <DisassemblerInsn "mov" for 0x4002eb>, <DisassemblerInsn "mov" for 0x4002f0>, <DisassemblerInsn "je" for 0x4002f5>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001bd>, <DisassemblerInsn "mov" for 0x4001c2>, <DisassemblerInsn "test" for 0x4001c6>, <DisassemblerInsn "sete" for 0x4001c9>, <DisassemblerInsn "mov" for 0x4001cd>, <DisassemblerInsn "xor" for 0x4001cf>, <DisassemblerInsn "mov" for 0x4001d1>, <DisassemblerInsn "or" for 0x4001d4>, <DisassemblerInsn "and" for 0x4001d7>, <DisassemblerInsn "test" for 0x4001da>, <DisassemblerInsn "mov" for 0x4001dd>, <DisassemblerInsn "mov" for 0x4001df>, <DisassemblerInsn "mov" for 0x4001e3>, <DisassemblerInsn "mov" for 0x4001e8>, <DisassemblerInsn "jne" for 0x4001ec>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400261>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002b7>, <DisassemblerInsn "mov" for 0x4002bc>, <DisassemblerInsn "mov" for 0x4002c1>, <DisassemblerInsn "call" for 0x4002c6>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40020a>, <DisassemblerInsn "mov" for 0x40020d>, <DisassemblerInsn "mov" for 0x400211>, <DisassemblerInsn "cmp" for 0x400216>, <DisassemblerInsn "mov" for 0x40021a>, <DisassemblerInsn "je" for 0x40021e>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400241>, <DisassemblerInsn "mov" for 0x400245>, <DisassemblerInsn "mov" for 0x400249>, <DisassemblerInsn "xor" for 0x40024d>, <DisassemblerInsn "test" for 0x40024f>, <DisassemblerInsn "mov" for 0x400252>, <DisassemblerInsn "mov" for 0x400255>, <DisassemblerInsn "mov" for 0x40025a>, <DisassemblerInsn "jne" for 0x40025f>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40023c>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40026d>, <DisassemblerInsn "cmp" for 0x400272>, <DisassemblerInsn "je" for 0x400276>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002c1>, <DisassemblerInsn "call" for 0x4002c6>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40028d>, <DisassemblerInsn "mov" for 0x400292>, <DisassemblerInsn "mov" for 0x400296>, <DisassemblerInsn "test" for 0x40029a>, <DisassemblerInsn "sete" for 0x40029d>, <DisassemblerInsn "or" for 0x4002a1>, <DisassemblerInsn "and" for 0x4002a4>, <DisassemblerInsn "xor" for 0x4002a6>, <DisassemblerInsn "test" for 0x4002a8>, <DisassemblerInsn "mov" for 0x4002ab>, <DisassemblerInsn "mov" for 0x4002b0>, <DisassemblerInsn "jne" for 0x4002b5>]'}], 'cfg_block_detailed_info': [{'block_Idx': 19, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x70]>', '<cmp~~qword ptr [rax + 0x78], rcx>', '<mov~~qword ptr [rsp + 0x20], rax>', '<jne~~0x400263>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x20]>', '<call~~0x500020>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~qword ptr [rsp], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp + 0x30], rax>', '<je~~0x4002f7>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x30]>', '<add~~rsp, 0x88>', '<ret~~>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rcx, qword ptr [rsp]>', '<mov~~rax, qword ptr [rcx + 0x78]>', '<cmp~~rax, 0>', '<mov~~qword ptr [rsp + 8], rcx>', '<mov~~qword ptr [rsp + 0x30], rax>', '<je~~0x4002c1>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x58]>', '<mov~~dl, byte ptr [rsp + 0x7f]>', '<test~~rcx, rcx>', '<sete~~dil>', '<mov~~al, dl>', '<xor~~al, 1>', '<mov~~sil, al>', '<or~~sil, dil>', '<and~~dl, sil>', '<test~~dl, 1>', '<mov~~dl, al>', '<mov~~byte ptr [rsp + 0x67], dl>', '<mov~~qword ptr [rsp + 0x68], rcx>', '<mov~~byte ptr [rsp + 0x57], al>', '<jne~~0x400241>']}, {'block_Idx': 10, 'blockInsts': ['<jmp~~0x4002b7>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~al, byte ptr [rsp + 0x47]>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<cmp~~rcx, 0>', '<mov~~byte ptr [rsp + 0x57], al>', '<je~~0x400241>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x7f]>', '<mov~~al, byte ptr [rsp + 0x57]>', '<mov~~byte ptr [rsp + 0x1f], al>', '<xor~~eax, eax>', '<test~~cl, 1>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x20], rcx>', '<mov~~qword ptr [rsp + 0x28], rax>', '<jne~~0x400263>']}, {'block_Idx': 13, 'blockInsts': ['<jmp~~0x4002f7>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~qword ptr [rsp + 0x10], rax>', '<cmp~~rax, 0>', '<je~~0x40028d>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x10]>', '<mov~~dl, byte ptr [rsp + 0x7f]>', '<mov~~al, byte ptr [rsp + 0x1f]>', '<test~~rcx, rcx>', '<sete~~sil>', '<or~~al, sil>', '<and~~dl, al>', '<xor~~eax, eax>', '<test~~dl, 1>', '<mov~~qword ptr [rsp + 0x28], rcx>', '<mov~~qword ptr [rsp + 0x30], rax>', '<jne~~0x4002f7>']}], 'cfg_edge_info': [(19, 18), (6, 8), (18, 16), (20, 16), (19, 11), (8, 11), (17, 20), (10, 14), (13, 16), (15, 19), (21, 17), (20, 21), (5, 8), (14, 17), (17, 16), (8, 10), (11, 15), (15, 18), (18, 14)]}]}
{'format_child_next': [4194541, 4194561, 4194576, 4194603, 4194622, 4194634], 'format_child_class_next': [4194881, 4194913, 4194915, 4194925, 4194936, 4194957, 4194999, 4195009, 4195019, 4195039, 4195063]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_after/O3/options.o---after
The extraction of function: format_child_next
[4194541, 4194561, 4194576, 4194603, 4194622, 4194634]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 8 nodes and 13 edges in CFGEmulated.
It has 8 nodes and 9 edges in CDG.
It has 106 nodes and 119 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194541, 4194561, 4194576, 4194603, 4194622, 4194634]
{4194496, 4194561, 4194634, 4194603, 4194541, 4194576, 4194514, 4194622}
[6, 7, 2, 4, 1, 3, 5, 0]
The extraction of function: format_child_class_next
[4194881, 4194913, 4194915, 4194925, 4194936, 4194957, 4194999, 4195009, 4195019, 4195039, 4195063]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 28 nodes and 45 edges in CFGEmulated.
It has 27 nodes and 41 edges in CDG.
It has 336 nodes and 429 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194881, 4194913, 4194915, 4194925, 4194936, 4194957, 4194999, 4195009, 4195019, 4195039, 4195063]
{4194816, 4194826, 4194698, 4194957, 4194711, 4194848, 4194999, 4194876, 4194749, 4194881, 4195009, 4195019, 4194640, 4195039, 4194913, 4194915, 4194925, 4194798, 4194678, 4195063, 4194936}
[21, 13, 15, 1, 24, 11, 26, 0, 9, 2, 19, 7, 22, 3, 16, 6, 8, 12, 25, 10, 23, 14]
The execution time of patched slicing information extraction via angr: 0:00:02.239668
{'format_child_next': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40012b>, <DisassemblerInsn "xor" for 0x400130>, <DisassemblerInsn "cmp" for 0x400132>, <DisassemblerInsn "mov" for 0x400137>, <DisassemblerInsn "je" for 0x40013c>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40013e>, <DisassemblerInsn "mov" for 0x400143>, <DisassemblerInsn "jmp" for 0x400148>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40014a>, <DisassemblerInsn "ret" for 0x40014f>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400110>, <DisassemblerInsn "mov" for 0x400115>, <DisassemblerInsn "mov" for 0x400119>, <DisassemblerInsn "xor" for 0x40011e>, <DisassemblerInsn "cmp" for 0x400120>, <DisassemblerInsn "mov" for 0x400124>, <DisassemblerInsn "je" for 0x400129>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000d2>, <DisassemblerInsn "mov" for 0x4000d7>, <DisassemblerInsn "mov" for 0x4000db>, <DisassemblerInsn "xor" for 0x4000e0>, <DisassemblerInsn "cmp" for 0x4000e2>, <DisassemblerInsn "mov" for 0x4000e6>, <DisassemblerInsn "je" for 0x4000eb>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000ed>, <DisassemblerInsn "mov" for 0x4000f2>, <DisassemblerInsn "mov" for 0x4000f6>, <DisassemblerInsn "cmp" for 0x4000fb>, <DisassemblerInsn "je" for 0x4000ff>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400101>, <DisassemblerInsn "cmp" for 0x400106>, <DisassemblerInsn "jne" for 0x40010e>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c0>, <DisassemblerInsn "xor" for 0x4000c5>, <DisassemblerInsn "cmp" for 0x4000c7>, <DisassemblerInsn "mov" for 0x4000cb>, <DisassemblerInsn "jne" for 0x4000d0>]'}], 'cfg_block_detailed_info': [{'block_Idx': 6, 'blockInsts': ['<mov~~rcx, qword ptr [rsp - 0x28]>', '<xor~~eax, eax>', '<cmp~~qword ptr [rcx + 0x78], 0>', '<mov~~qword ptr [rsp - 8], rax>', '<je~~0x40014a>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x18]>', '<mov~~qword ptr [rsp - 8], rax>', '<jmp~~0x40014a>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 8]>', '<ret~~>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rcx, qword ptr [rax + 0x10]>', '<mov~~qword ptr [rsp - 0x28], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp - 8], rax>', '<je~~0x40014a>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rcx, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp - 0x18], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp - 8], rax>', '<je~~0x40014a>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~qword ptr [rsp - 0x20], rax>', '<cmp~~rax, 0>', '<je~~0x400110>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<cmp~~qword ptr [rax + 0x88], 0>', '<jne~~0x40013e>']}, {'block_Idx': 0, 'blockInsts': ['<mov~~qword ptr [rsp - 0x10], rdi>', '<xor~~eax, eax>', '<cmp~~rsi, 0>', '<mov~~qword ptr [rsp - 8], rax>', '<jne~~0x40014a>']}], 'cfg_edge_info': [(0, 1), (6, 2), (1, 2), (3, 4), (5, 4), (4, 6), (5, 7), (4, 2), (6, 7), (0, 2), (7, 2), (1, 3), (3, 5)], 'cdg_edge_info': [(0, 1), (5, 4), (4, 6), (5, 7), (1, 4), (6, 7), (3, 2), (1, 3), (3, 5)], 'ddg_edge_info': [(0, 1), (0, 7), (6, 2), (1, 2), (0, 4), (0, 3), (4, 6), (4, 2), (0, 6), (0, 2), (1, 7), (0, 5), (7, 2), (3, 5)]}], 'format_child_class_next': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40026d>, <DisassemblerInsn "cmp" for 0x400272>, <DisassemblerInsn "je" for 0x400276>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400263>, <DisassemblerInsn "call" for 0x400268>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40023c>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400176>, <DisassemblerInsn "xor" for 0x40017a>, <DisassemblerInsn "xor" for 0x40017d>, <DisassemblerInsn "mov" for 0x40017f>, <DisassemblerInsn "mov" for 0x400183>, <DisassemblerInsn "jmp" for 0x400188>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400278>, <DisassemblerInsn "mov" for 0x40027d>, <DisassemblerInsn "cmp" for 0x400282>, <DisassemblerInsn "mov" for 0x400286>, <DisassemblerInsn "jne" for 0x40028b>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400220>, <DisassemblerInsn "mov" for 0x400225>, <DisassemblerInsn "cmp" for 0x40022c>, <DisassemblerInsn "mov" for 0x400230>, <DisassemblerInsn "mov" for 0x400235>, <DisassemblerInsn "je" for 0x40023a>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002c1>, <DisassemblerInsn "call" for 0x4002c6>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400150>, <DisassemblerInsn "mov" for 0x400157>, <DisassemblerInsn "cmp" for 0x40015c>, <DisassemblerInsn "setne" for 0x400160>, <DisassemblerInsn "mov" for 0x400163>, <DisassemblerInsn "xor" for 0x400167>, <DisassemblerInsn "test" for 0x400169>, <DisassemblerInsn "mov" for 0x40016c>, <DisassemblerInsn "jne" for 0x400174>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a2>, <DisassemblerInsn "mov" for 0x4001a7>, <DisassemblerInsn "cmp" for 0x4001ac>, <DisassemblerInsn "mov" for 0x4001b3>, <DisassemblerInsn "jne" for 0x4001bb>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40018a>, <DisassemblerInsn "call" for 0x400192>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002f7>, <DisassemblerInsn "add" for 0x4002fc>, <DisassemblerInsn "ret" for 0x400303>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40020a>, <DisassemblerInsn "mov" for 0x40020d>, <DisassemblerInsn "mov" for 0x400211>, <DisassemblerInsn "cmp" for 0x400216>, <DisassemblerInsn "mov" for 0x40021a>, <DisassemblerInsn "je" for 0x40021e>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002cb>, <DisassemblerInsn "mov" for 0x4002ce>, <DisassemblerInsn "xor" for 0x4002d2>, <DisassemblerInsn "cmp" for 0x4002d4>, <DisassemblerInsn "mov" for 0x4002d8>, <DisassemblerInsn "je" for 0x4002dd>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001ee>, <DisassemblerInsn "mov" for 0x4001f2>, <DisassemblerInsn "mov" for 0x4001f7>, <DisassemblerInsn "mov" for 0x4001fb>, <DisassemblerInsn "mov" for 0x400200>, <DisassemblerInsn "call" for 0x400205>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002b7>, <DisassemblerInsn "mov" for 0x4002bc>, <DisassemblerInsn "mov" for 0x4002c1>, <DisassemblerInsn "call" for 0x4002c6>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400197>, <DisassemblerInsn "cmp" for 0x40019c>, <DisassemblerInsn "je" for 0x4001a0>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001bd>, <DisassemblerInsn "mov" for 0x4001c2>, <DisassemblerInsn "test" for 0x4001c6>, <DisassemblerInsn "sete" for 0x4001c9>, <DisassemblerInsn "mov" for 0x4001cd>, <DisassemblerInsn "xor" for 0x4001cf>, <DisassemblerInsn "mov" for 0x4001d1>, <DisassemblerInsn "or" for 0x4001d4>, <DisassemblerInsn "and" for 0x4001d7>, <DisassemblerInsn "test" for 0x4001da>, <DisassemblerInsn "mov" for 0x4001dd>, <DisassemblerInsn "mov" for 0x4001df>, <DisassemblerInsn "mov" for 0x4001e3>, <DisassemblerInsn "mov" for 0x4001e8>, <DisassemblerInsn "jne" for 0x4001ec>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400261>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002df>, <DisassemblerInsn "mov" for 0x4002e3>, <DisassemblerInsn "cmp" for 0x4002e7>, <DisassemblerInsn "mov" for 0x4002eb>, <DisassemblerInsn "mov" for 0x4002f0>, <DisassemblerInsn "je" for 0x4002f5>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400241>, <DisassemblerInsn "mov" for 0x400245>, <DisassemblerInsn "mov" for 0x400249>, <DisassemblerInsn "xor" for 0x40024d>, <DisassemblerInsn "test" for 0x40024f>, <DisassemblerInsn "mov" for 0x400252>, <DisassemblerInsn "mov" for 0x400255>, <DisassemblerInsn "mov" for 0x40025a>, <DisassemblerInsn "jne" for 0x40025f>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40028d>, <DisassemblerInsn "mov" for 0x400292>, <DisassemblerInsn "mov" for 0x400296>, <DisassemblerInsn "test" for 0x40029a>, <DisassemblerInsn "sete" for 0x40029d>, <DisassemblerInsn "or" for 0x4002a1>, <DisassemblerInsn "and" for 0x4002a4>, <DisassemblerInsn "xor" for 0x4002a6>, <DisassemblerInsn "test" for 0x4002a8>, <DisassemblerInsn "mov" for 0x4002ab>, <DisassemblerInsn "mov" for 0x4002b0>, <DisassemblerInsn "jne" for 0x4002b5>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400200>, <DisassemblerInsn "call" for 0x400205>]'}], 'cfg_block_detailed_info': [{'block_Idx': 21, 'blockInsts': ['<mov~~qword ptr [rsp + 0x10], rax>', '<cmp~~rax, 0>', '<je~~0x40028d>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x20]>', '<call~~0x500020>']}, {'block_Idx': 15, 'blockInsts': ['<jmp~~0x4002f7>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x7f]>', '<xor~~cl, 0xff>', '<xor~~eax, eax>', '<mov~~byte ptr [rsp + 0x67], cl>', '<mov~~qword ptr [rsp + 0x68], rax>', '<jmp~~0x4001ee>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x70]>', '<cmp~~qword ptr [rax + 0x78], rcx>', '<mov~~qword ptr [rsp + 0x20], rax>', '<jne~~0x400263>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~rax, qword ptr [rcx + 0x88]>', '<cmp~~rax, 0>', '<mov~~qword ptr [rsp + 0x48], rcx>', '<mov~~qword ptr [rsp + 0x30], rax>', '<je~~0x400200>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x88>', '<mov~~qword ptr [rsp + 0x70], rdi>', '<cmp~~rdi, 0>', '<setne~~cl>', '<mov~~byte ptr [rsp + 0x7f], cl>', '<xor~~eax, eax>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x80], rax>', '<jne~~0x40018a>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~rcx, qword ptr [rsp + 0x70]>', '<cmp~~qword ptr [rax + 0x88], rcx>', '<mov~~qword ptr [rsp + 0x80], rax>', '<jne~~0x40018a>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x80]>', '<call~~0x500018>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x30]>', '<add~~rsp, 0x88>', '<ret~~>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~al, byte ptr [rsp + 0x47]>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<cmp~~rcx, 0>', '<mov~~byte ptr [rsp + 0x57], al>', '<je~~0x400241>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~qword ptr [rsp], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp + 0x30], rax>', '<je~~0x4002f7>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x67]>', '<mov~~rax, qword ptr [rsp + 0x68]>', '<mov~~byte ptr [rsp + 0x47], cl>', '<mov~~qword ptr [rsp + 0x48], rax>', '<mov~~rdi, qword ptr [rsp + 0x48]>', '<call~~0x500018>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~qword ptr [rsp + 0x58], rax>', '<cmp~~rax, 0>', '<je~~0x4001bd>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x58]>', '<mov~~dl, byte ptr [rsp + 0x7f]>', '<test~~rcx, rcx>', '<sete~~dil>', '<mov~~al, dl>', '<xor~~al, 1>', '<mov~~sil, al>', '<or~~sil, dil>', '<and~~dl, sil>', '<test~~dl, 1>', '<mov~~dl, al>', '<mov~~byte ptr [rsp + 0x67], dl>', '<mov~~qword ptr [rsp + 0x68], rcx>', '<mov~~byte ptr [rsp + 0x57], al>', '<jne~~0x400241>']}, {'block_Idx': 12, 'blockInsts': ['<jmp~~0x4002b7>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rcx, qword ptr [rsp]>', '<mov~~rax, qword ptr [rcx + 0x78]>', '<cmp~~rax, 0>', '<mov~~qword ptr [rsp + 8], rcx>', '<mov~~qword ptr [rsp + 0x30], rax>', '<je~~0x4002c1>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x7f]>', '<mov~~al, byte ptr [rsp + 0x57]>', '<mov~~byte ptr [rsp + 0x1f], al>', '<xor~~eax, eax>', '<test~~cl, 1>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x20], rcx>', '<mov~~qword ptr [rsp + 0x28], rax>', '<jne~~0x400263>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x10]>', '<mov~~dl, byte ptr [rsp + 0x7f]>', '<mov~~al, byte ptr [rsp + 0x1f]>', '<test~~rcx, rcx>', '<sete~~sil>', '<or~~al, sil>', '<and~~dl, al>', '<xor~~eax, eax>', '<test~~dl, 1>', '<mov~~qword ptr [rsp + 0x28], rcx>', '<mov~~qword ptr [rsp + 0x30], rax>', '<jne~~0x4002f7>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<call~~0x500018>']}], 'cfg_edge_info': [(14, 7), (3, 7), (23, 16), (12, 16), (9, 2), (23, 19), (0, 2), (8, 3), (9, 8), (11, 14), (10, 12), (1, 3), (25, 19), (24, 23), (7, 10), (6, 8), (16, 22), (21, 24), (22, 19), (22, 25), (13, 21), (0, 1), (24, 13), (15, 19), (26, 22), (21, 23), (8, 10), (10, 13), (2, 6), (11, 15), (7, 11), (6, 9), (25, 26)], 'cdg_edge_info': [(23, 16), (23, 22), (8, 3), (0, 2), (0, 8), (11, 14), (10, 12), (24, 21), (10, 21), (25, 22), (7, 10), (21, 24), (22, 25), (0, 1), (11, 7), (0, 7), (10, 23), (24, 13), (8, 7), (0, 3), (8, 10), (10, 13), (0, 6), (10, 16), (11, 15), (10, 22), (7, 11), (25, 26)], 'ddg_edge_info': [(16, 26), (23, 16), (14, 7), (3, 7), (23, 19), (14, 10), (14, 16), (23, 22), (8, 3), (14, 13), (0, 2), (14, 19), (0, 8), (11, 14), (1, 3), (2, 8), (24, 21), (0, 23), (10, 21), (25, 19), (13, 23), (25, 22), (7, 10), (6, 8), (16, 22), (21, 24), (22, 19), (22, 25), (13, 21), (0, 1), (11, 7), (0, 10), (11, 19), (2, 16), (13, 16), (10, 23), (2, 13), (24, 13), (13, 19), (2, 10), (26, 19), (26, 25), (26, 22), (21, 23), (14, 11), (3, 14), (8, 7), (0, 3), (8, 10), (10, 13), (0, 6), (2, 3), (10, 16), (2, 6), (0, 24), (10, 22), (7, 11), (25, 26), (13, 24)]}]}
{'format_child_next': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 13, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 14, 'instruction': 'movq\t%rax, -0x20(%rsp)                 # 8-byte Spill'}, {'instIndex': 15, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 16, 'instruction': 'je\t.LBB3_4'}, {'instIndex': 18, 'instruction': 'cmpq\t$0, 0x88(%rax)'}, {'instIndex': 19, 'instruction': 'jne\t.LBB3_6'}, {'instIndex': 21, 'instruction': 'movq\t0x10(%rax), %rcx'}, {'instIndex': 22, 'instruction': 'movq\t%rcx, -0x28(%rsp)                 # 8-byte Spill'}, {'instIndex': 23, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 24, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 25, 'instruction': 'movq\t%rax, -8(%rsp)                  # 8-byte Spill'}, {'instIndex': 26, 'instruction': 'je\t.LBB3_7'}, {'instIndex': 28, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 29, 'instruction': 'cmpq\t$0, 0x78(%rcx)'}, {'instIndex': 30, 'instruction': 'movq\t%rax, -8(%rsp)                  # 8-byte Spill'}, {'instIndex': 34, 'instruction': 'jmp\t.LBB3_7'}, {'instIndex': 36, 'instruction': 'retq'}]}], 'format_child_class_next': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 62, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 63, 'instruction': 'testb\t$1, %cl'}, {'instIndex': 64, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 65, 'instruction': 'movq\t%rcx, 0x20(%rsp)                  # 8-byte Spill'}, {'instIndex': 66, 'instruction': 'movq\t%rax, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 67, 'instruction': 'jne\t.LBB4_9'}, {'instIndex': 68, 'instruction': 'jmp\t.LBB4_12'}, {'instIndex': 70, 'instruction': 'callq\tav_oformat_next@PLT'}, {'instIndex': 72, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 73, 'instruction': 'je\t.LBB4_11'}, {'instIndex': 76, 'instruction': 'cmpq\t%rcx, 0x78(%rax)'}, {'instIndex': 77, 'instruction': 'movq\t%rax, 0x20(%rsp)                  # 8-byte Spill'}, {'instIndex': 78, 'instruction': 'jne\t.LBB4_9'}, {'instIndex': 84, 'instruction': 'orb\t%sil, %al'}, {'instIndex': 85, 'instruction': 'andb\t%al, %dl'}, {'instIndex': 86, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 87, 'instruction': 'testb\t$1, %dl'}, {'instIndex': 88, 'instruction': 'movq\t%rcx, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 89, 'instruction': 'movq\t%rax, 0x30(%rsp)                  # 8-byte Spill'}, {'instIndex': 90, 'instruction': 'jne\t.LBB4_15'}, {'instIndex': 94, 'instruction': 'callq\tav_oformat_next@PLT'}, {'instIndex': 95, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 96, 'instruction': 'movq\t%rcx, (%rsp)                    # 8-byte Spill'}, {'instIndex': 97, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 98, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 99, 'instruction': 'movq\t%rax, 0x30(%rsp)                  # 8-byte Spill'}, {'instIndex': 100, 'instruction': 'je\t.LBB4_15'}, {'instIndex': 102, 'instruction': 'movq\t0x78(%rcx), %rax'}, {'instIndex': 103, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 104, 'instruction': 'movq\t%rcx, 8(%rsp)                   # 8-byte Spill'}, {'instIndex': 105, 'instruction': 'movq\t%rax, 0x30(%rsp)                  # 8-byte Spill'}, {'instIndex': 106, 'instruction': 'je\t.LBB4_13'}, {'instIndex': 108, 'instruction': 'addq\t$0x88, %rsp'}, {'instIndex': 109, 'instruction': 'retq'}]}]}
The case of compiler clang with optimization Os.
Patched source code file: options.c
Patched function: 1---static void *format_child_next 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_after/Os/options.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_after/Os/options.s---format_child_next---after
function id: 3
function flag: True
There are 37 instructions for function: format_child_next in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '41', 'end': 50}, 'before': {'start': '40', 'end': 45}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 13, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 14, 'instruction': 'movq\t%rax, -0x20(%rsp)                 # 8-byte Spill'}, {'instIndex': 15, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 16, 'instruction': 'je\t.LBB3_4'}, {'instIndex': 18, 'instruction': 'cmpq\t$0, 0x88(%rax)'}, {'instIndex': 19, 'instruction': 'jne\t.LBB3_6'}, {'instIndex': 21, 'instruction': 'movq\t0x10(%rax), %rcx'}, {'instIndex': 22, 'instruction': 'movq\t%rcx, -0x28(%rsp)                 # 8-byte Spill'}, {'instIndex': 23, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 24, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 25, 'instruction': 'movq\t%rax, -8(%rsp)                  # 8-byte Spill'}, {'instIndex': 26, 'instruction': 'je\t.LBB3_7'}, {'instIndex': 28, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 29, 'instruction': 'cmpq\t$0, 0x78(%rcx)'}, {'instIndex': 30, 'instruction': 'movq\t%rax, -8(%rsp)                  # 8-byte Spill'}, {'instIndex': 34, 'instruction': 'jmp\t.LBB3_7'}, {'instIndex': 36, 'instruction': 'retq'}]}]
Patched function: 1---static const AVClass *format_child_class_next 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_after/Os/options.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_after/Os/options.s---format_child_class_next---after
function id: 4
function flag: True
There are 110 instructions for function: format_child_class_next in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 78}, 'before': {'start': '59', 'end': 67}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 62, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 63, 'instruction': 'testb\t$1, %cl'}, {'instIndex': 64, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 65, 'instruction': 'movq\t%rcx, 0x20(%rsp)                  # 8-byte Spill'}, {'instIndex': 66, 'instruction': 'movq\t%rax, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 67, 'instruction': 'jne\t.LBB4_9'}, {'instIndex': 68, 'instruction': 'jmp\t.LBB4_12'}, {'instIndex': 70, 'instruction': 'callq\tav_oformat_next@PLT'}, {'instIndex': 72, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 73, 'instruction': 'je\t.LBB4_11'}, {'instIndex': 76, 'instruction': 'cmpq\t%rcx, 0x78(%rax)'}, {'instIndex': 77, 'instruction': 'movq\t%rax, 0x20(%rsp)                  # 8-byte Spill'}, {'instIndex': 78, 'instruction': 'jne\t.LBB4_9'}, {'instIndex': 84, 'instruction': 'orb\t%sil, %al'}, {'instIndex': 85, 'instruction': 'andb\t%al, %dl'}, {'instIndex': 86, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 87, 'instruction': 'testb\t$1, %dl'}, {'instIndex': 88, 'instruction': 'movq\t%rcx, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 89, 'instruction': 'movq\t%rax, 0x30(%rsp)                  # 8-byte Spill'}, {'instIndex': 90, 'instruction': 'jne\t.LBB4_15'}, {'instIndex': 94, 'instruction': 'callq\tav_oformat_next@PLT'}, {'instIndex': 95, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 96, 'instruction': 'movq\t%rcx, (%rsp)                    # 8-byte Spill'}, {'instIndex': 97, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 98, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 99, 'instruction': 'movq\t%rax, 0x30(%rsp)                  # 8-byte Spill'}, {'instIndex': 100, 'instruction': 'je\t.LBB4_15'}, {'instIndex': 102, 'instruction': 'movq\t0x78(%rcx), %rax'}, {'instIndex': 103, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 104, 'instruction': 'movq\t%rcx, 8(%rsp)                   # 8-byte Spill'}, {'instIndex': 105, 'instruction': 'movq\t%rax, 0x30(%rsp)                  # 8-byte Spill'}, {'instIndex': 106, 'instruction': 'je\t.LBB4_13'}, {'instIndex': 108, 'instruction': 'addq\t$0x88, %rsp'}, {'instIndex': 109, 'instruction': 'retq'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_after/Os/options.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_after/Os/options.o---after
The extraction of function: format_child_next
Analyzing the binaries to generate subCFGs from patched function ...
It has 47 nodes and 72 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 37 instructions in binary file.
[4194516, 4194536, 4194551, 4194578, 4194597, 4194609]
The extraction of function: format_child_class_next
Analyzing the binaries to generate subCFGs from patched function ...
It has 47 nodes and 72 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 110 instructions in binary file.
[4194856, 4194888, 4194890, 4194900, 4194911, 4194932, 4194974, 4194984, 4194994, 4195014, 4195038]
The execution time of patched subCFG information extraction via angr: 0:00:00.215782
{'format_child_next': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000d4>, <DisassemblerInsn "mov" for 0x4000d9>, <DisassemblerInsn "mov" for 0x4000dd>, <DisassemblerInsn "cmp" for 0x4000e2>, <DisassemblerInsn "je" for 0x4000e6>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400125>, <DisassemblerInsn "mov" for 0x40012a>, <DisassemblerInsn "jmp" for 0x40012f>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400131>, <DisassemblerInsn "ret" for 0x400136>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000a7>, <DisassemblerInsn "xor" for 0x4000ac>, <DisassemblerInsn "cmp" for 0x4000ae>, <DisassemblerInsn "mov" for 0x4000b2>, <DisassemblerInsn "jne" for 0x4000b7>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400112>, <DisassemblerInsn "xor" for 0x400117>, <DisassemblerInsn "cmp" for 0x400119>, <DisassemblerInsn "mov" for 0x40011e>, <DisassemblerInsn "je" for 0x400123>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000e8>, <DisassemblerInsn "cmp" for 0x4000ed>, <DisassemblerInsn "jne" for 0x4000f5>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000f7>, <DisassemblerInsn "mov" for 0x4000fc>, <DisassemblerInsn "mov" for 0x400100>, <DisassemblerInsn "xor" for 0x400105>, <DisassemblerInsn "cmp" for 0x400107>, <DisassemblerInsn "mov" for 0x40010b>, <DisassemblerInsn "je" for 0x400110>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000b9>, <DisassemblerInsn "mov" for 0x4000be>, <DisassemblerInsn "mov" for 0x4000c2>, <DisassemblerInsn "xor" for 0x4000c7>, <DisassemblerInsn "cmp" for 0x4000c9>, <DisassemblerInsn "mov" for 0x4000cd>, <DisassemblerInsn "je" for 0x4000d2>]'}], 'cfg_block_detailed_info': [{'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~qword ptr [rsp - 0x20], rax>', '<cmp~~rax, 0>', '<je~~0x4000f7>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x18]>', '<mov~~qword ptr [rsp - 8], rax>', '<jmp~~0x400131>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 8]>', '<ret~~>']}, {'block_Idx': 0, 'blockInsts': ['<mov~~qword ptr [rsp - 0x10], rdi>', '<xor~~eax, eax>', '<cmp~~rsi, 0>', '<mov~~qword ptr [rsp - 8], rax>', '<jne~~0x400131>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rcx, qword ptr [rsp - 0x28]>', '<xor~~eax, eax>', '<cmp~~qword ptr [rcx + 0x78], 0>', '<mov~~qword ptr [rsp - 8], rax>', '<je~~0x400131>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<cmp~~qword ptr [rax + 0x88], 0>', '<jne~~0x400125>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rcx, qword ptr [rax + 0x10]>', '<mov~~qword ptr [rsp - 0x28], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp - 8], rax>', '<je~~0x400131>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rcx, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp - 0x18], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp - 8], rax>', '<je~~0x400131>']}], 'cfg_edge_info': [(6, 2), (1, 2), (3, 4), (5, 4), (4, 6), (5, 7), (4, 2), (6, 7), (0, 2), (7, 2), (1, 3), (3, 5)]}], 'format_child_class_next': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400274>, <DisassemblerInsn "mov" for 0x400279>, <DisassemblerInsn "mov" for 0x40027d>, <DisassemblerInsn "test" for 0x400281>, <DisassemblerInsn "sete" for 0x400284>, <DisassemblerInsn "or" for 0x400288>, <DisassemblerInsn "and" for 0x40028b>, <DisassemblerInsn "xor" for 0x40028d>, <DisassemblerInsn "test" for 0x40028f>, <DisassemblerInsn "mov" for 0x400292>, <DisassemblerInsn "mov" for 0x400297>, <DisassemblerInsn "jne" for 0x40029c>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a4>, <DisassemblerInsn "mov" for 0x4001a9>, <DisassemblerInsn "test" for 0x4001ad>, <DisassemblerInsn "sete" for 0x4001b0>, <DisassemblerInsn "mov" for 0x4001b4>, <DisassemblerInsn "xor" for 0x4001b6>, <DisassemblerInsn "mov" for 0x4001b8>, <DisassemblerInsn "or" for 0x4001bb>, <DisassemblerInsn "and" for 0x4001be>, <DisassemblerInsn "test" for 0x4001c1>, <DisassemblerInsn "mov" for 0x4001c4>, <DisassemblerInsn "mov" for 0x4001c6>, <DisassemblerInsn "mov" for 0x4001ca>, <DisassemblerInsn "mov" for 0x4001cf>, <DisassemblerInsn "jne" for 0x4001d3>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002b2>, <DisassemblerInsn "mov" for 0x4002b5>, <DisassemblerInsn "xor" for 0x4002b9>, <DisassemblerInsn "cmp" for 0x4002bb>, <DisassemblerInsn "mov" for 0x4002bf>, <DisassemblerInsn "je" for 0x4002c4>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002a8>, <DisassemblerInsn "call" for 0x4002ad>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40029e>, <DisassemblerInsn "mov" for 0x4002a3>, <DisassemblerInsn "mov" for 0x4002a8>, <DisassemblerInsn "call" for 0x4002ad>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400248>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400254>, <DisassemblerInsn "cmp" for 0x400259>, <DisassemblerInsn "je" for 0x40025d>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002de>, <DisassemblerInsn "add" for 0x4002e3>, <DisassemblerInsn "ret" for 0x4002ea>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002c6>, <DisassemblerInsn "mov" for 0x4002ca>, <DisassemblerInsn "cmp" for 0x4002ce>, <DisassemblerInsn "mov" for 0x4002d2>, <DisassemblerInsn "mov" for 0x4002d7>, <DisassemblerInsn "je" for 0x4002dc>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40024a>, <DisassemblerInsn "call" for 0x40024f>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001f1>, <DisassemblerInsn "mov" for 0x4001f4>, <DisassemblerInsn "mov" for 0x4001f8>, <DisassemblerInsn "cmp" for 0x4001fd>, <DisassemblerInsn "mov" for 0x400201>, <DisassemblerInsn "je" for 0x400205>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400228>, <DisassemblerInsn "mov" for 0x40022c>, <DisassemblerInsn "mov" for 0x400230>, <DisassemblerInsn "xor" for 0x400234>, <DisassemblerInsn "test" for 0x400236>, <DisassemblerInsn "mov" for 0x400239>, <DisassemblerInsn "mov" for 0x40023c>, <DisassemblerInsn "mov" for 0x400241>, <DisassemblerInsn "jne" for 0x400246>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400223>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40025f>, <DisassemblerInsn "mov" for 0x400264>, <DisassemblerInsn "cmp" for 0x400269>, <DisassemblerInsn "mov" for 0x40026d>, <DisassemblerInsn "jne" for 0x400272>]'}], 'cfg_block_detailed_info': [{'block_Idx': 18, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x10]>', '<mov~~dl, byte ptr [rsp + 0x7f]>', '<mov~~al, byte ptr [rsp + 0x1f]>', '<test~~rcx, rcx>', '<sete~~sil>', '<or~~al, sil>', '<and~~dl, al>', '<xor~~eax, eax>', '<test~~dl, 1>', '<mov~~qword ptr [rsp + 0x28], rcx>', '<mov~~qword ptr [rsp + 0x30], rax>', '<jne~~0x4002de>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x58]>', '<mov~~dl, byte ptr [rsp + 0x7f]>', '<test~~rcx, rcx>', '<sete~~dil>', '<mov~~al, dl>', '<xor~~al, 1>', '<mov~~sil, al>', '<or~~sil, dil>', '<and~~dl, sil>', '<test~~dl, 1>', '<mov~~dl, al>', '<mov~~byte ptr [rsp + 0x67], dl>', '<mov~~qword ptr [rsp + 0x68], rcx>', '<mov~~byte ptr [rsp + 0x57], al>', '<jne~~0x400228>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~qword ptr [rsp], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp + 0x30], rax>', '<je~~0x4002de>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}, {'block_Idx': 10, 'blockInsts': ['<jmp~~0x40029e>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~qword ptr [rsp + 0x10], rax>', '<cmp~~rax, 0>', '<je~~0x400274>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x30]>', '<add~~rsp, 0x88>', '<ret~~>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rcx, qword ptr [rsp]>', '<mov~~rax, qword ptr [rcx + 0x78]>', '<cmp~~rax, 0>', '<mov~~qword ptr [rsp + 8], rcx>', '<mov~~qword ptr [rsp + 0x30], rax>', '<je~~0x4002a8>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x20]>', '<call~~0x500020>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~al, byte ptr [rsp + 0x47]>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<cmp~~rcx, 0>', '<mov~~byte ptr [rsp + 0x57], al>', '<je~~0x400228>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x7f]>', '<mov~~al, byte ptr [rsp + 0x57]>', '<mov~~byte ptr [rsp + 0x1f], al>', '<xor~~eax, eax>', '<test~~cl, 1>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x20], rcx>', '<mov~~qword ptr [rsp + 0x28], rax>', '<jne~~0x40024a>']}, {'block_Idx': 13, 'blockInsts': ['<jmp~~0x4002de>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x70]>', '<cmp~~qword ptr [rax + 0x78], rcx>', '<mov~~qword ptr [rsp + 0x20], rax>', '<jne~~0x40024a>']}], 'cfg_edge_info': [(19, 18), (6, 8), (18, 16), (20, 16), (19, 11), (8, 11), (17, 20), (10, 14), (13, 16), (15, 19), (21, 17), (20, 21), (5, 8), (14, 17), (17, 16), (8, 10), (11, 15), (15, 18), (18, 14)]}]}
{'format_child_next': [4194516, 4194536, 4194551, 4194578, 4194597, 4194609], 'format_child_class_next': [4194856, 4194888, 4194890, 4194900, 4194911, 4194932, 4194974, 4194984, 4194994, 4195014, 4195038]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_after/Os/options.o---after
The extraction of function: format_child_next
[4194516, 4194536, 4194551, 4194578, 4194597, 4194609]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 8 nodes and 13 edges in CFGEmulated.
It has 8 nodes and 9 edges in CDG.
It has 106 nodes and 119 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194516, 4194536, 4194551, 4194578, 4194597, 4194609]
{4194597, 4194471, 4194536, 4194609, 4194578, 4194516, 4194551, 4194489}
[5, 0, 1, 7, 2, 4, 6, 3]
The extraction of function: format_child_class_next
[4194856, 4194888, 4194890, 4194900, 4194911, 4194932, 4194974, 4194984, 4194994, 4195014, 4195038]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 28 nodes and 45 edges in CFGEmulated.
It has 27 nodes and 41 edges in CDG.
It has 336 nodes and 429 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194856, 4194888, 4194890, 4194900, 4194911, 4194932, 4194974, 4194984, 4194994, 4195014, 4195038]
{4194823, 4194974, 4194851, 4194724, 4194856, 4194984, 4194994, 4194615, 4195014, 4194888, 4194890, 4194900, 4194773, 4194653, 4195038, 4194911, 4194791, 4194801, 4194673, 4194932, 4194686}
[9, 13, 26, 22, 1, 16, 21, 25, 10, 19, 15, 7, 6, 24, 12, 11, 3, 2, 23, 8, 0, 14]
The execution time of patched slicing information extraction via angr: 0:00:02.299904
{'format_child_next': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000e8>, <DisassemblerInsn "cmp" for 0x4000ed>, <DisassemblerInsn "jne" for 0x4000f5>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000a7>, <DisassemblerInsn "xor" for 0x4000ac>, <DisassemblerInsn "cmp" for 0x4000ae>, <DisassemblerInsn "mov" for 0x4000b2>, <DisassemblerInsn "jne" for 0x4000b7>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000b9>, <DisassemblerInsn "mov" for 0x4000be>, <DisassemblerInsn "mov" for 0x4000c2>, <DisassemblerInsn "xor" for 0x4000c7>, <DisassemblerInsn "cmp" for 0x4000c9>, <DisassemblerInsn "mov" for 0x4000cd>, <DisassemblerInsn "je" for 0x4000d2>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400125>, <DisassemblerInsn "mov" for 0x40012a>, <DisassemblerInsn "jmp" for 0x40012f>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400131>, <DisassemblerInsn "ret" for 0x400136>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000f7>, <DisassemblerInsn "mov" for 0x4000fc>, <DisassemblerInsn "mov" for 0x400100>, <DisassemblerInsn "xor" for 0x400105>, <DisassemblerInsn "cmp" for 0x400107>, <DisassemblerInsn "mov" for 0x40010b>, <DisassemblerInsn "je" for 0x400110>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400112>, <DisassemblerInsn "xor" for 0x400117>, <DisassemblerInsn "cmp" for 0x400119>, <DisassemblerInsn "mov" for 0x40011e>, <DisassemblerInsn "je" for 0x400123>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000d4>, <DisassemblerInsn "mov" for 0x4000d9>, <DisassemblerInsn "mov" for 0x4000dd>, <DisassemblerInsn "cmp" for 0x4000e2>, <DisassemblerInsn "je" for 0x4000e6>]'}], 'cfg_block_detailed_info': [{'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<cmp~~qword ptr [rax + 0x88], 0>', '<jne~~0x400125>']}, {'block_Idx': 0, 'blockInsts': ['<mov~~qword ptr [rsp - 0x10], rdi>', '<xor~~eax, eax>', '<cmp~~rsi, 0>', '<mov~~qword ptr [rsp - 8], rax>', '<jne~~0x400131>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rcx, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp - 0x18], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp - 8], rax>', '<je~~0x400131>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x18]>', '<mov~~qword ptr [rsp - 8], rax>', '<jmp~~0x400131>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 8]>', '<ret~~>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rcx, qword ptr [rax + 0x10]>', '<mov~~qword ptr [rsp - 0x28], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp - 8], rax>', '<je~~0x400131>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rcx, qword ptr [rsp - 0x28]>', '<xor~~eax, eax>', '<cmp~~qword ptr [rcx + 0x78], 0>', '<mov~~qword ptr [rsp - 8], rax>', '<je~~0x400131>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~qword ptr [rsp - 0x20], rax>', '<cmp~~rax, 0>', '<je~~0x4000f7>']}], 'cfg_edge_info': [(0, 1), (6, 2), (1, 2), (3, 4), (5, 4), (4, 6), (5, 7), (4, 2), (6, 7), (0, 2), (7, 2), (1, 3), (3, 5)], 'cdg_edge_info': [(0, 1), (5, 4), (4, 6), (1, 4), (5, 7), (6, 7), (3, 2), (1, 3), (3, 5)], 'ddg_edge_info': [(0, 1), (0, 7), (6, 2), (1, 2), (0, 4), (0, 3), (4, 6), (4, 2), (0, 6), (1, 7), (0, 2), (7, 2), (0, 5), (3, 5)]}], 'format_child_class_next': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400189>, <DisassemblerInsn "mov" for 0x40018e>, <DisassemblerInsn "cmp" for 0x400193>, <DisassemblerInsn "mov" for 0x40019a>, <DisassemblerInsn "jne" for 0x4001a2>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40024a>, <DisassemblerInsn "call" for 0x40024f>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002a8>, <DisassemblerInsn "call" for 0x4002ad>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002b2>, <DisassemblerInsn "mov" for 0x4002b5>, <DisassemblerInsn "xor" for 0x4002b9>, <DisassemblerInsn "cmp" for 0x4002bb>, <DisassemblerInsn "mov" for 0x4002bf>, <DisassemblerInsn "je" for 0x4002c4>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40015d>, <DisassemblerInsn "xor" for 0x400161>, <DisassemblerInsn "xor" for 0x400164>, <DisassemblerInsn "mov" for 0x400166>, <DisassemblerInsn "mov" for 0x40016a>, <DisassemblerInsn "jmp" for 0x40016f>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40029e>, <DisassemblerInsn "mov" for 0x4002a3>, <DisassemblerInsn "mov" for 0x4002a8>, <DisassemblerInsn "call" for 0x4002ad>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400254>, <DisassemblerInsn "cmp" for 0x400259>, <DisassemblerInsn "je" for 0x40025d>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002c6>, <DisassemblerInsn "mov" for 0x4002ca>, <DisassemblerInsn "cmp" for 0x4002ce>, <DisassemblerInsn "mov" for 0x4002d2>, <DisassemblerInsn "mov" for 0x4002d7>, <DisassemblerInsn "je" for 0x4002dc>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400228>, <DisassemblerInsn "mov" for 0x40022c>, <DisassemblerInsn "mov" for 0x400230>, <DisassemblerInsn "xor" for 0x400234>, <DisassemblerInsn "test" for 0x400236>, <DisassemblerInsn "mov" for 0x400239>, <DisassemblerInsn "mov" for 0x40023c>, <DisassemblerInsn "mov" for 0x400241>, <DisassemblerInsn "jne" for 0x400246>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002de>, <DisassemblerInsn "add" for 0x4002e3>, <DisassemblerInsn "ret" for 0x4002ea>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400223>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001f1>, <DisassemblerInsn "mov" for 0x4001f4>, <DisassemblerInsn "mov" for 0x4001f8>, <DisassemblerInsn "cmp" for 0x4001fd>, <DisassemblerInsn "mov" for 0x400201>, <DisassemblerInsn "je" for 0x400205>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40017e>, <DisassemblerInsn "cmp" for 0x400183>, <DisassemblerInsn "je" for 0x400187>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40025f>, <DisassemblerInsn "mov" for 0x400264>, <DisassemblerInsn "cmp" for 0x400269>, <DisassemblerInsn "mov" for 0x40026d>, <DisassemblerInsn "jne" for 0x400272>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400248>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400207>, <DisassemblerInsn "mov" for 0x40020c>, <DisassemblerInsn "cmp" for 0x400213>, <DisassemblerInsn "mov" for 0x400217>, <DisassemblerInsn "mov" for 0x40021c>, <DisassemblerInsn "je" for 0x400221>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001d5>, <DisassemblerInsn "mov" for 0x4001d9>, <DisassemblerInsn "mov" for 0x4001de>, <DisassemblerInsn "mov" for 0x4001e2>, <DisassemblerInsn "mov" for 0x4001e7>, <DisassemblerInsn "call" for 0x4001ec>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400171>, <DisassemblerInsn "call" for 0x400179>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400274>, <DisassemblerInsn "mov" for 0x400279>, <DisassemblerInsn "mov" for 0x40027d>, <DisassemblerInsn "test" for 0x400281>, <DisassemblerInsn "sete" for 0x400284>, <DisassemblerInsn "or" for 0x400288>, <DisassemblerInsn "and" for 0x40028b>, <DisassemblerInsn "xor" for 0x40028d>, <DisassemblerInsn "test" for 0x40028f>, <DisassemblerInsn "mov" for 0x400292>, <DisassemblerInsn "mov" for 0x400297>, <DisassemblerInsn "jne" for 0x40029c>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a4>, <DisassemblerInsn "mov" for 0x4001a9>, <DisassemblerInsn "test" for 0x4001ad>, <DisassemblerInsn "sete" for 0x4001b0>, <DisassemblerInsn "mov" for 0x4001b4>, <DisassemblerInsn "xor" for 0x4001b6>, <DisassemblerInsn "mov" for 0x4001b8>, <DisassemblerInsn "or" for 0x4001bb>, <DisassemblerInsn "and" for 0x4001be>, <DisassemblerInsn "test" for 0x4001c1>, <DisassemblerInsn "mov" for 0x4001c4>, <DisassemblerInsn "mov" for 0x4001c6>, <DisassemblerInsn "mov" for 0x4001ca>, <DisassemblerInsn "mov" for 0x4001cf>, <DisassemblerInsn "jne" for 0x4001d3>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400137>, <DisassemblerInsn "mov" for 0x40013e>, <DisassemblerInsn "cmp" for 0x400143>, <DisassemblerInsn "setne" for 0x400147>, <DisassemblerInsn "mov" for 0x40014a>, <DisassemblerInsn "xor" for 0x40014e>, <DisassemblerInsn "test" for 0x400150>, <DisassemblerInsn "mov" for 0x400153>, <DisassemblerInsn "jne" for 0x40015b>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001e7>, <DisassemblerInsn "call" for 0x4001ec>]'}], 'cfg_block_detailed_info': [{'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~rcx, qword ptr [rsp + 0x70]>', '<cmp~~qword ptr [rax + 0x88], rcx>', '<mov~~qword ptr [rsp + 0x80], rax>', '<jne~~0x400171>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x20]>', '<call~~0x500020>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~qword ptr [rsp], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp + 0x30], rax>', '<je~~0x4002de>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x7f]>', '<xor~~cl, 0xff>', '<xor~~eax, eax>', '<mov~~byte ptr [rsp + 0x67], cl>', '<mov~~qword ptr [rsp + 0x68], rax>', '<jmp~~0x4001d5>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~qword ptr [rsp + 0x10], rax>', '<cmp~~rax, 0>', '<je~~0x400274>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rcx, qword ptr [rsp]>', '<mov~~rax, qword ptr [rcx + 0x78]>', '<cmp~~rax, 0>', '<mov~~qword ptr [rsp + 8], rcx>', '<mov~~qword ptr [rsp + 0x30], rax>', '<je~~0x4002a8>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x7f]>', '<mov~~al, byte ptr [rsp + 0x57]>', '<mov~~byte ptr [rsp + 0x1f], al>', '<xor~~eax, eax>', '<test~~cl, 1>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x20], rcx>', '<mov~~qword ptr [rsp + 0x28], rax>', '<jne~~0x40024a>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x30]>', '<add~~rsp, 0x88>', '<ret~~>']}, {'block_Idx': 15, 'blockInsts': ['<jmp~~0x4002de>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~al, byte ptr [rsp + 0x47]>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<cmp~~rcx, 0>', '<mov~~byte ptr [rsp + 0x57], al>', '<je~~0x400228>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~qword ptr [rsp + 0x58], rax>', '<cmp~~rax, 0>', '<je~~0x4001a4>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x70]>', '<cmp~~qword ptr [rax + 0x78], rcx>', '<mov~~qword ptr [rsp + 0x20], rax>', '<jne~~0x40024a>']}, {'block_Idx': 12, 'blockInsts': ['<jmp~~0x40029e>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~rax, qword ptr [rcx + 0x88]>', '<cmp~~rax, 0>', '<mov~~qword ptr [rsp + 0x48], rcx>', '<mov~~qword ptr [rsp + 0x30], rax>', '<je~~0x4001e7>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x67]>', '<mov~~rax, qword ptr [rsp + 0x68]>', '<mov~~byte ptr [rsp + 0x47], cl>', '<mov~~qword ptr [rsp + 0x48], rax>', '<mov~~rdi, qword ptr [rsp + 0x48]>', '<call~~0x500018>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x80]>', '<call~~0x500018>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x10]>', '<mov~~dl, byte ptr [rsp + 0x7f]>', '<mov~~al, byte ptr [rsp + 0x1f]>', '<test~~rcx, rcx>', '<sete~~sil>', '<or~~al, sil>', '<and~~dl, al>', '<xor~~eax, eax>', '<test~~dl, 1>', '<mov~~qword ptr [rsp + 0x28], rcx>', '<mov~~qword ptr [rsp + 0x30], rax>', '<jne~~0x4002de>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x58]>', '<mov~~dl, byte ptr [rsp + 0x7f]>', '<test~~rcx, rcx>', '<sete~~dil>', '<mov~~al, dl>', '<xor~~al, 1>', '<mov~~sil, al>', '<or~~sil, dil>', '<and~~dl, sil>', '<test~~dl, 1>', '<mov~~dl, al>', '<mov~~byte ptr [rsp + 0x67], dl>', '<mov~~qword ptr [rsp + 0x68], rcx>', '<mov~~byte ptr [rsp + 0x57], al>', '<jne~~0x400228>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x88>', '<mov~~qword ptr [rsp + 0x70], rdi>', '<cmp~~rdi, 0>', '<setne~~cl>', '<mov~~byte ptr [rsp + 0x7f], cl>', '<xor~~eax, eax>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x80], rax>', '<jne~~0x400171>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<call~~0x500018>']}], 'cfg_edge_info': [(12, 16), (23, 16), (3, 7), (14, 7), (23, 19), (9, 2), (8, 3), (0, 2), (9, 8), (11, 14), (10, 12), (1, 3), (25, 19), (24, 23), (7, 10), (6, 8), (16, 22), (21, 24), (22, 19), (22, 25), (13, 21), (0, 1), (24, 13), (15, 19), (26, 22), (21, 23), (8, 10), (10, 13), (11, 15), (2, 6), (7, 11), (6, 9), (25, 26)], 'cdg_edge_info': [(23, 16), (23, 22), (8, 3), (0, 2), (0, 8), (11, 14), (10, 12), (10, 21), (25, 22), (7, 10), (21, 24), (22, 25), (0, 1), (0, 7), (11, 7), (10, 23), (24, 13), (8, 7), (0, 3), (8, 10), (10, 13), (0, 6), (7, 11), (10, 16), (11, 15), (10, 22), (24, 21), (25, 26)], 'ddg_edge_info': [(16, 26), (23, 16), (14, 7), (3, 7), (23, 19), (14, 10), (14, 16), (23, 22), (8, 3), (14, 13), (0, 2), (14, 19), (0, 8), (11, 14), (1, 3), (2, 8), (0, 23), (10, 21), (25, 19), (13, 23), (25, 22), (7, 10), (6, 8), (16, 22), (21, 24), (22, 19), (22, 25), (13, 21), (0, 1), (11, 7), (0, 10), (11, 19), (2, 16), (13, 16), (10, 23), (2, 13), (24, 13), (13, 19), (2, 10), (26, 19), (26, 25), (26, 22), (21, 23), (14, 11), (3, 14), (8, 7), (0, 3), (8, 10), (10, 13), (0, 6), (2, 3), (7, 11), (10, 16), (2, 6), (0, 24), (10, 22), (24, 21), (25, 26), (13, 24)]}]}
{'format_child_next': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 13, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 14, 'instruction': 'movq\t%rax, -0x20(%rsp)                 # 8-byte Spill'}, {'instIndex': 15, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 16, 'instruction': 'je\t.LBB3_4'}, {'instIndex': 18, 'instruction': 'cmpq\t$0, 0x88(%rax)'}, {'instIndex': 19, 'instruction': 'jne\t.LBB3_6'}, {'instIndex': 21, 'instruction': 'movq\t0x10(%rax), %rcx'}, {'instIndex': 22, 'instruction': 'movq\t%rcx, -0x28(%rsp)                 # 8-byte Spill'}, {'instIndex': 23, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 24, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 25, 'instruction': 'movq\t%rax, -8(%rsp)                  # 8-byte Spill'}, {'instIndex': 26, 'instruction': 'je\t.LBB3_7'}, {'instIndex': 28, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 29, 'instruction': 'cmpq\t$0, 0x78(%rcx)'}, {'instIndex': 30, 'instruction': 'movq\t%rax, -8(%rsp)                  # 8-byte Spill'}, {'instIndex': 34, 'instruction': 'jmp\t.LBB3_7'}, {'instIndex': 36, 'instruction': 'retq'}]}], 'format_child_class_next': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 62, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 63, 'instruction': 'testb\t$1, %cl'}, {'instIndex': 64, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 65, 'instruction': 'movq\t%rcx, 0x20(%rsp)                  # 8-byte Spill'}, {'instIndex': 66, 'instruction': 'movq\t%rax, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 67, 'instruction': 'jne\t.LBB4_9'}, {'instIndex': 68, 'instruction': 'jmp\t.LBB4_12'}, {'instIndex': 70, 'instruction': 'callq\tav_oformat_next@PLT'}, {'instIndex': 72, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 73, 'instruction': 'je\t.LBB4_11'}, {'instIndex': 76, 'instruction': 'cmpq\t%rcx, 0x78(%rax)'}, {'instIndex': 77, 'instruction': 'movq\t%rax, 0x20(%rsp)                  # 8-byte Spill'}, {'instIndex': 78, 'instruction': 'jne\t.LBB4_9'}, {'instIndex': 84, 'instruction': 'orb\t%sil, %al'}, {'instIndex': 85, 'instruction': 'andb\t%al, %dl'}, {'instIndex': 86, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 87, 'instruction': 'testb\t$1, %dl'}, {'instIndex': 88, 'instruction': 'movq\t%rcx, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 89, 'instruction': 'movq\t%rax, 0x30(%rsp)                  # 8-byte Spill'}, {'instIndex': 90, 'instruction': 'jne\t.LBB4_15'}, {'instIndex': 94, 'instruction': 'callq\tav_oformat_next@PLT'}, {'instIndex': 95, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 96, 'instruction': 'movq\t%rcx, (%rsp)                    # 8-byte Spill'}, {'instIndex': 97, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 98, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 99, 'instruction': 'movq\t%rax, 0x30(%rsp)                  # 8-byte Spill'}, {'instIndex': 100, 'instruction': 'je\t.LBB4_15'}, {'instIndex': 102, 'instruction': 'movq\t0x78(%rcx), %rax'}, {'instIndex': 103, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 104, 'instruction': 'movq\t%rcx, 8(%rsp)                   # 8-byte Spill'}, {'instIndex': 105, 'instruction': 'movq\t%rax, 0x30(%rsp)                  # 8-byte Spill'}, {'instIndex': 106, 'instruction': 'je\t.LBB4_13'}, {'instIndex': 108, 'instruction': 'addq\t$0x88, %rsp'}, {'instIndex': 109, 'instruction': 'retq'}]}]}
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd---a/libavformat/options.c
The case of compiler gcc with optimization no.
Patched source code file: options.c
Patched function: 1---static void *format_child_next 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_before/no/options_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_before/no/options_gcc.s---format_child_next---before
function id: 21
function flag: True
There are 34 instructions for function: format_child_next in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '41', 'end': 50}, 'before': {'start': '40', 'end': 45}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 11, 'instruction': 'movq\t-8(%rsp), %rax'}, {'instIndex': 12, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 15, 'instruction': 'movq\t-8(%rsp), %rax'}, {'instIndex': 16, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 17, 'instruction': 'movq\t0x88(%rax), %rax'}, {'instIndex': 18, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 19, 'instruction': 'jne\t.L8'}, {'instIndex': 20, 'instruction': 'movq\t-8(%rsp), %rax'}, {'instIndex': 21, 'instruction': 'movq\t0x10(%rax), %rax'}, {'instIndex': 22, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 23, 'instruction': 'je\t.L6'}, {'instIndex': 24, 'instruction': 'movq\t-8(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'movq\t0x10(%rax), %rax'}, {'instIndex': 26, 'instruction': 'movq\t0x78(%rax), %rax'}, {'instIndex': 27, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 28, 'instruction': 'je\t.L6'}, {'instIndex': 29, 'instruction': 'movq\t-8(%rsp), %rax'}, {'instIndex': 30, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 31, 'instruction': 'ret'}, {'instIndex': 32, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 33, 'instruction': 'ret'}]}]
Patched function: 1---static const AVClass *format_child_class_next 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_before/no/options_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_before/no/options_gcc.s---format_child_class_next---before
function id: 22
function flag: True
There are 72 instructions for function: format_child_class_next in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 78}, 'before': {'start': '59', 'end': 67}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 40, 'instruction': 'jmp\t.L20'}, {'instIndex': 41, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 42, 'instruction': 'movq\t0x78(%rax), %rax'}, {'instIndex': 43, 'instruction': 'cmpq\t%rax, 8(%rsp)'}, {'instIndex': 44, 'instruction': 'je\t.L26'}, {'instIndex': 45, 'instruction': 'cmpq\t$0, 8(%rsp)'}, {'instIndex': 46, 'instruction': 'je\t.L23'}, {'instIndex': 47, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 48, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 49, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 50, 'instruction': 'movq\t%rax, 0x18(%rsp)'}, {'instIndex': 51, 'instruction': 'cmpq\t$0, 0x18(%rsp)'}, {'instIndex': 52, 'instruction': 'jne\t.L22'}, {'instIndex': 53, 'instruction': 'jmp\t.L23'}, {'instIndex': 54, 'instruction': 'nop'}, {'instIndex': 55, 'instruction': 'jmp\t.L23'}, {'instIndex': 56, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 57, 'instruction': 'movq\t0x78(%rax), %rax'}, {'instIndex': 58, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 59, 'instruction': 'je\t.L23'}, {'instIndex': 60, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 61, 'instruction': 'movq\t0x78(%rax), %rax'}, {'instIndex': 62, 'instruction': 'jmp\t.L18'}, {'instIndex': 63, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 64, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 65, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 66, 'instruction': 'movq\t%rax, 0x18(%rsp)'}, {'instIndex': 67, 'instruction': 'cmpq\t$0, 0x18(%rsp)'}, {'instIndex': 68, 'instruction': 'jne\t.L24'}, {'instIndex': 69, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 70, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 71, 'instruction': 'ret'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_before/no/options.o
Binary file does not exist.
{'format_child_next': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 11, 'instruction': 'movq\t-8(%rsp), %rax'}, {'instIndex': 12, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 15, 'instruction': 'movq\t-8(%rsp), %rax'}, {'instIndex': 16, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 17, 'instruction': 'movq\t0x88(%rax), %rax'}, {'instIndex': 18, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 19, 'instruction': 'jne\t.L8'}, {'instIndex': 20, 'instruction': 'movq\t-8(%rsp), %rax'}, {'instIndex': 21, 'instruction': 'movq\t0x10(%rax), %rax'}, {'instIndex': 22, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 23, 'instruction': 'je\t.L6'}, {'instIndex': 24, 'instruction': 'movq\t-8(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'movq\t0x10(%rax), %rax'}, {'instIndex': 26, 'instruction': 'movq\t0x78(%rax), %rax'}, {'instIndex': 27, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 28, 'instruction': 'je\t.L6'}, {'instIndex': 29, 'instruction': 'movq\t-8(%rsp), %rax'}, {'instIndex': 30, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 31, 'instruction': 'ret'}, {'instIndex': 32, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 33, 'instruction': 'ret'}]}], 'format_child_class_next': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 40, 'instruction': 'jmp\t.L20'}, {'instIndex': 41, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 42, 'instruction': 'movq\t0x78(%rax), %rax'}, {'instIndex': 43, 'instruction': 'cmpq\t%rax, 8(%rsp)'}, {'instIndex': 44, 'instruction': 'je\t.L26'}, {'instIndex': 45, 'instruction': 'cmpq\t$0, 8(%rsp)'}, {'instIndex': 46, 'instruction': 'je\t.L23'}, {'instIndex': 47, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 48, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 49, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 50, 'instruction': 'movq\t%rax, 0x18(%rsp)'}, {'instIndex': 51, 'instruction': 'cmpq\t$0, 0x18(%rsp)'}, {'instIndex': 52, 'instruction': 'jne\t.L22'}, {'instIndex': 53, 'instruction': 'jmp\t.L23'}, {'instIndex': 54, 'instruction': 'nop'}, {'instIndex': 55, 'instruction': 'jmp\t.L23'}, {'instIndex': 56, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 57, 'instruction': 'movq\t0x78(%rax), %rax'}, {'instIndex': 58, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 59, 'instruction': 'je\t.L23'}, {'instIndex': 60, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 61, 'instruction': 'movq\t0x78(%rax), %rax'}, {'instIndex': 62, 'instruction': 'jmp\t.L18'}, {'instIndex': 63, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 64, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 65, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 66, 'instruction': 'movq\t%rax, 0x18(%rsp)'}, {'instIndex': 67, 'instruction': 'cmpq\t$0, 0x18(%rsp)'}, {'instIndex': 68, 'instruction': 'jne\t.L24'}, {'instIndex': 69, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 70, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 71, 'instruction': 'ret'}]}]}
The case of compiler gcc with optimization O0.
Patched source code file: options.c
Patched function: 1---static void *format_child_next 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_before/O0/options_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_before/O0/options_gcc.s---format_child_next---before
function id: 21
function flag: True
There are 34 instructions for function: format_child_next in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '41', 'end': 50}, 'before': {'start': '40', 'end': 45}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 11, 'instruction': 'movq\t-8(%rsp), %rax'}, {'instIndex': 12, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 15, 'instruction': 'movq\t-8(%rsp), %rax'}, {'instIndex': 16, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 17, 'instruction': 'movq\t0x88(%rax), %rax'}, {'instIndex': 18, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 19, 'instruction': 'jne\t.L8'}, {'instIndex': 20, 'instruction': 'movq\t-8(%rsp), %rax'}, {'instIndex': 21, 'instruction': 'movq\t0x10(%rax), %rax'}, {'instIndex': 22, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 23, 'instruction': 'je\t.L6'}, {'instIndex': 24, 'instruction': 'movq\t-8(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'movq\t0x10(%rax), %rax'}, {'instIndex': 26, 'instruction': 'movq\t0x78(%rax), %rax'}, {'instIndex': 27, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 28, 'instruction': 'je\t.L6'}, {'instIndex': 29, 'instruction': 'movq\t-8(%rsp), %rax'}, {'instIndex': 30, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 31, 'instruction': 'ret'}, {'instIndex': 32, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 33, 'instruction': 'ret'}]}]
Patched function: 1---static const AVClass *format_child_class_next 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_before/O0/options_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_before/O0/options_gcc.s---format_child_class_next---before
function id: 22
function flag: True
There are 72 instructions for function: format_child_class_next in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 78}, 'before': {'start': '59', 'end': 67}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 40, 'instruction': 'jmp\t.L20'}, {'instIndex': 41, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 42, 'instruction': 'movq\t0x78(%rax), %rax'}, {'instIndex': 43, 'instruction': 'cmpq\t%rax, 8(%rsp)'}, {'instIndex': 44, 'instruction': 'je\t.L26'}, {'instIndex': 45, 'instruction': 'cmpq\t$0, 8(%rsp)'}, {'instIndex': 46, 'instruction': 'je\t.L23'}, {'instIndex': 47, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 48, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 49, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 50, 'instruction': 'movq\t%rax, 0x18(%rsp)'}, {'instIndex': 51, 'instruction': 'cmpq\t$0, 0x18(%rsp)'}, {'instIndex': 52, 'instruction': 'jne\t.L22'}, {'instIndex': 53, 'instruction': 'jmp\t.L23'}, {'instIndex': 54, 'instruction': 'nop'}, {'instIndex': 55, 'instruction': 'jmp\t.L23'}, {'instIndex': 56, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 57, 'instruction': 'movq\t0x78(%rax), %rax'}, {'instIndex': 58, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 59, 'instruction': 'je\t.L23'}, {'instIndex': 60, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 61, 'instruction': 'movq\t0x78(%rax), %rax'}, {'instIndex': 62, 'instruction': 'jmp\t.L18'}, {'instIndex': 63, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 64, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 65, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 66, 'instruction': 'movq\t%rax, 0x18(%rsp)'}, {'instIndex': 67, 'instruction': 'cmpq\t$0, 0x18(%rsp)'}, {'instIndex': 68, 'instruction': 'jne\t.L24'}, {'instIndex': 69, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 70, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 71, 'instruction': 'ret'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_before/O0/options.o
Binary file does not exist.
{'format_child_next': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 11, 'instruction': 'movq\t-8(%rsp), %rax'}, {'instIndex': 12, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 15, 'instruction': 'movq\t-8(%rsp), %rax'}, {'instIndex': 16, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 17, 'instruction': 'movq\t0x88(%rax), %rax'}, {'instIndex': 18, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 19, 'instruction': 'jne\t.L8'}, {'instIndex': 20, 'instruction': 'movq\t-8(%rsp), %rax'}, {'instIndex': 21, 'instruction': 'movq\t0x10(%rax), %rax'}, {'instIndex': 22, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 23, 'instruction': 'je\t.L6'}, {'instIndex': 24, 'instruction': 'movq\t-8(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'movq\t0x10(%rax), %rax'}, {'instIndex': 26, 'instruction': 'movq\t0x78(%rax), %rax'}, {'instIndex': 27, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 28, 'instruction': 'je\t.L6'}, {'instIndex': 29, 'instruction': 'movq\t-8(%rsp), %rax'}, {'instIndex': 30, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 31, 'instruction': 'ret'}, {'instIndex': 32, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 33, 'instruction': 'ret'}]}], 'format_child_class_next': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 40, 'instruction': 'jmp\t.L20'}, {'instIndex': 41, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 42, 'instruction': 'movq\t0x78(%rax), %rax'}, {'instIndex': 43, 'instruction': 'cmpq\t%rax, 8(%rsp)'}, {'instIndex': 44, 'instruction': 'je\t.L26'}, {'instIndex': 45, 'instruction': 'cmpq\t$0, 8(%rsp)'}, {'instIndex': 46, 'instruction': 'je\t.L23'}, {'instIndex': 47, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 48, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 49, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 50, 'instruction': 'movq\t%rax, 0x18(%rsp)'}, {'instIndex': 51, 'instruction': 'cmpq\t$0, 0x18(%rsp)'}, {'instIndex': 52, 'instruction': 'jne\t.L22'}, {'instIndex': 53, 'instruction': 'jmp\t.L23'}, {'instIndex': 54, 'instruction': 'nop'}, {'instIndex': 55, 'instruction': 'jmp\t.L23'}, {'instIndex': 56, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 57, 'instruction': 'movq\t0x78(%rax), %rax'}, {'instIndex': 58, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 59, 'instruction': 'je\t.L23'}, {'instIndex': 60, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 61, 'instruction': 'movq\t0x78(%rax), %rax'}, {'instIndex': 62, 'instruction': 'jmp\t.L18'}, {'instIndex': 63, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 64, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 65, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 66, 'instruction': 'movq\t%rax, 0x18(%rsp)'}, {'instIndex': 67, 'instruction': 'cmpq\t$0, 0x18(%rsp)'}, {'instIndex': 68, 'instruction': 'jne\t.L24'}, {'instIndex': 69, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 70, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 71, 'instruction': 'ret'}]}]}
The case of compiler gcc with optimization O1.
Patched source code file: options.c
Patched function: 1---static void *format_child_next 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_before/O1/options_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_before/O1/options_gcc.s---format_child_next---before
function id: 2
function flag: True
There are 105 instructions for function: format_child_next in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '41', 'end': 50}, 'before': {'start': '40', 'end': 45}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 1, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 7, 'instruction': 'movq\t8(%rdi), %rdx'}, {'instIndex': 10, 'instruction': 'cmpq\t$0, 0x88(%rdx)'}, {'instIndex': 11, 'instruction': 'je\t.L7'}, {'instIndex': 12, 'instruction': 'ret'}, {'instIndex': 13, 'instruction': 'movq\t0x10(%rdi), %rdx'}, {'instIndex': 14, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 15, 'instruction': 'je\t.L9'}, {'instIndex': 16, 'instruction': 'movq\t0x78(%rdx), %rdx'}, {'instIndex': 17, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 18, 'instruction': 'cmove\t%rdx, %rax'}, {'instIndex': 19, 'instruction': 'ret'}, {'instIndex': 20, 'instruction': 'movq\t%rdx, %rax'}, {'instIndex': 21, 'instruction': 'jmp\t.L5'}]}]
Patched function: 1---static const AVClass *format_child_class_next 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_before/O1/options_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_before/O1/options_gcc.s---format_child_class_next---before
function id: 4
function flag: True
There are 82 instructions for function: format_child_class_next in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 78}, 'before': {'start': '59', 'end': 67}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 27, 'instruction': 'testb\t%bpl, %bpl'}, {'instIndex': 28, 'instruction': 'je\t.L22'}, {'instIndex': 29, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 30, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 31, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 32, 'instruction': 'je\t.L22'}, {'instIndex': 33, 'instruction': 'cmpq\t%rbx, 0x78(%rax)'}, {'instIndex': 34, 'instruction': 'jne\t.L20'}, {'instIndex': 35, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 36, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 37, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 38, 'instruction': 'je\t.L11'}, {'instIndex': 39, 'instruction': 'movq\t0x78(%rax), %rdx'}, {'instIndex': 40, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 41, 'instruction': 'je\t.L22'}, {'instIndex': 42, 'instruction': 'movq\t%rdx, %rax'}, {'instIndex': 43, 'instruction': 'addq\t$8, %rsp'}, {'instIndex': 44, 'instruction': 'popq\t%rbx'}, {'instIndex': 45, 'instruction': 'popq\t%rbp'}, {'instIndex': 46, 'instruction': 'ret'}, {'instIndex': 54, 'instruction': 'je\t.L30'}, {'instIndex': 55, 'instruction': 'movq\t$0, 0x528(%rax)'}, {'instIndex': 56, 'instruction': 'leaq\t8(%rax), %rdi'}, {'instIndex': 57, 'instruction': 'andq\t$-8, %rdi'}, {'instIndex': 58, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 59, 'instruction': 'subq\t%rdi, %rcx'}, {'instIndex': 60, 'instruction': 'addl\t$0x530, %ecx'}, {'instIndex': 61, 'instruction': 'shrl\t$3, %ecx'}, {'instIndex': 62, 'instruction': 'movl\t%ecx, %ecx'}, {'instIndex': 63, 'instruction': 'movl\t$0, %eax'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_before/O1/options.o
Binary file does not exist.
{'format_child_next': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 1, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 7, 'instruction': 'movq\t8(%rdi), %rdx'}, {'instIndex': 10, 'instruction': 'cmpq\t$0, 0x88(%rdx)'}, {'instIndex': 11, 'instruction': 'je\t.L7'}, {'instIndex': 12, 'instruction': 'ret'}, {'instIndex': 13, 'instruction': 'movq\t0x10(%rdi), %rdx'}, {'instIndex': 14, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 15, 'instruction': 'je\t.L9'}, {'instIndex': 16, 'instruction': 'movq\t0x78(%rdx), %rdx'}, {'instIndex': 17, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 18, 'instruction': 'cmove\t%rdx, %rax'}, {'instIndex': 19, 'instruction': 'ret'}, {'instIndex': 20, 'instruction': 'movq\t%rdx, %rax'}, {'instIndex': 21, 'instruction': 'jmp\t.L5'}]}], 'format_child_class_next': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 27, 'instruction': 'testb\t%bpl, %bpl'}, {'instIndex': 28, 'instruction': 'je\t.L22'}, {'instIndex': 29, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 30, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 31, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 32, 'instruction': 'je\t.L22'}, {'instIndex': 33, 'instruction': 'cmpq\t%rbx, 0x78(%rax)'}, {'instIndex': 34, 'instruction': 'jne\t.L20'}, {'instIndex': 35, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 36, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 37, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 38, 'instruction': 'je\t.L11'}, {'instIndex': 39, 'instruction': 'movq\t0x78(%rax), %rdx'}, {'instIndex': 40, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 41, 'instruction': 'je\t.L22'}, {'instIndex': 42, 'instruction': 'movq\t%rdx, %rax'}, {'instIndex': 43, 'instruction': 'addq\t$8, %rsp'}, {'instIndex': 44, 'instruction': 'popq\t%rbx'}, {'instIndex': 45, 'instruction': 'popq\t%rbp'}, {'instIndex': 46, 'instruction': 'ret'}, {'instIndex': 54, 'instruction': 'je\t.L30'}, {'instIndex': 55, 'instruction': 'movq\t$0, 0x528(%rax)'}, {'instIndex': 56, 'instruction': 'leaq\t8(%rax), %rdi'}, {'instIndex': 57, 'instruction': 'andq\t$-8, %rdi'}, {'instIndex': 58, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 59, 'instruction': 'subq\t%rdi, %rcx'}, {'instIndex': 60, 'instruction': 'addl\t$0x530, %ecx'}, {'instIndex': 61, 'instruction': 'shrl\t$3, %ecx'}, {'instIndex': 62, 'instruction': 'movl\t%ecx, %ecx'}, {'instIndex': 63, 'instruction': 'movl\t$0, %eax'}]}]}
The case of compiler gcc with optimization O2.
Patched source code file: options.c
Patched function: 1---static void *format_child_next 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_before/O2/options_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_before/O2/options_gcc.s---format_child_next---before
function id: 28
function flag: True
There are 56 instructions for function: format_child_next in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '41', 'end': 50}, 'before': {'start': '40', 'end': 45}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 1, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 7, 'instruction': 'movq\t8(%rdi), %rdx'}, {'instIndex': 10, 'instruction': 'cmpq\t$0, 0x88(%rdx)'}, {'instIndex': 11, 'instruction': 'je\t.L33'}, {'instIndex': 12, 'instruction': 'ret'}, {'instIndex': 13, 'instruction': 'movq\t0x10(%rdi), %rdx'}, {'instIndex': 14, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 15, 'instruction': 'je\t.L35'}, {'instIndex': 16, 'instruction': 'cmpq\t$0, 0x78(%rdx)'}, {'instIndex': 17, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 18, 'instruction': 'cmove\t%rdx, %rax'}, {'instIndex': 19, 'instruction': 'ret'}, {'instIndex': 20, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 21, 'instruction': 'ret'}]}]
Patched function: 1---static const AVClass *format_child_class_next 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_before/O2/options_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_before/O2/options_gcc.s---format_child_class_next---before
function id: 0
function flag: True
There are 122 instructions for function: format_child_class_next in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 78}, 'before': {'start': '59', 'end': 67}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 23, 'instruction': 'movq\t%r8, %rdi'}, {'instIndex': 24, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 25, 'instruction': 'movq\t%rax, %r8'}, {'instIndex': 26, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 27, 'instruction': 'je\t.L12'}, {'instIndex': 28, 'instruction': 'cmpq\t%rbx, 0x78(%r8)'}, {'instIndex': 29, 'instruction': 'je\t.L12'}, {'instIndex': 30, 'instruction': 'testq\t%rbx, %rbx'}, {'instIndex': 31, 'instruction': 'jne\t.L25'}, {'instIndex': 32, 'instruction': 'movq\t%r8, %rdi'}, {'instIndex': 33, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 34, 'instruction': 'movq\t%rax, %r8'}, {'instIndex': 35, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 36, 'instruction': 'je\t.L1'}, {'instIndex': 37, 'instruction': 'movq\t0x78(%r8), %rax'}, {'instIndex': 38, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 39, 'instruction': 'jne\t.L14'}, {'instIndex': 40, 'instruction': 'movq\t%r8, %rdi'}, {'instIndex': 41, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 42, 'instruction': 'movq\t%rax, %r8'}, {'instIndex': 43, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 44, 'instruction': 'jne\t.L13'}, {'instIndex': 45, 'instruction': 'movq\t%r8, %rax'}, {'instIndex': 46, 'instruction': 'popq\t%rbx'}, {'instIndex': 47, 'instruction': 'ret'}, {'instIndex': 48, 'instruction': 'movq\t%rax, %r8'}, {'instIndex': 49, 'instruction': 'popq\t%rbx'}, {'instIndex': 50, 'instruction': 'movq\t%r8, %rax'}, {'instIndex': 51, 'instruction': 'ret'}, {'instIndex': 93, 'instruction': 'movq\t%rax, %r12'}, {'instIndex': 94, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 95, 'instruction': 'je\t.L43'}, {'instIndex': 96, 'instruction': 'leaq\t8(%rax), %rdi'}, {'instIndex': 97, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 98, 'instruction': 'movq\t$0, 0x528(%rax)'}, {'instIndex': 99, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 100, 'instruction': 'andq\t$-8, %rdi'}, {'instIndex': 101, 'instruction': 'subq\t%rdi, %rcx'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_before/O2/options.o
Binary file does not exist.
{'format_child_next': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 1, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 7, 'instruction': 'movq\t8(%rdi), %rdx'}, {'instIndex': 10, 'instruction': 'cmpq\t$0, 0x88(%rdx)'}, {'instIndex': 11, 'instruction': 'je\t.L33'}, {'instIndex': 12, 'instruction': 'ret'}, {'instIndex': 13, 'instruction': 'movq\t0x10(%rdi), %rdx'}, {'instIndex': 14, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 15, 'instruction': 'je\t.L35'}, {'instIndex': 16, 'instruction': 'cmpq\t$0, 0x78(%rdx)'}, {'instIndex': 17, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 18, 'instruction': 'cmove\t%rdx, %rax'}, {'instIndex': 19, 'instruction': 'ret'}, {'instIndex': 20, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 21, 'instruction': 'ret'}]}], 'format_child_class_next': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 23, 'instruction': 'movq\t%r8, %rdi'}, {'instIndex': 24, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 25, 'instruction': 'movq\t%rax, %r8'}, {'instIndex': 26, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 27, 'instruction': 'je\t.L12'}, {'instIndex': 28, 'instruction': 'cmpq\t%rbx, 0x78(%r8)'}, {'instIndex': 29, 'instruction': 'je\t.L12'}, {'instIndex': 30, 'instruction': 'testq\t%rbx, %rbx'}, {'instIndex': 31, 'instruction': 'jne\t.L25'}, {'instIndex': 32, 'instruction': 'movq\t%r8, %rdi'}, {'instIndex': 33, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 34, 'instruction': 'movq\t%rax, %r8'}, {'instIndex': 35, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 36, 'instruction': 'je\t.L1'}, {'instIndex': 37, 'instruction': 'movq\t0x78(%r8), %rax'}, {'instIndex': 38, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 39, 'instruction': 'jne\t.L14'}, {'instIndex': 40, 'instruction': 'movq\t%r8, %rdi'}, {'instIndex': 41, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 42, 'instruction': 'movq\t%rax, %r8'}, {'instIndex': 43, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 44, 'instruction': 'jne\t.L13'}, {'instIndex': 45, 'instruction': 'movq\t%r8, %rax'}, {'instIndex': 46, 'instruction': 'popq\t%rbx'}, {'instIndex': 47, 'instruction': 'ret'}, {'instIndex': 48, 'instruction': 'movq\t%rax, %r8'}, {'instIndex': 49, 'instruction': 'popq\t%rbx'}, {'instIndex': 50, 'instruction': 'movq\t%r8, %rax'}, {'instIndex': 51, 'instruction': 'ret'}, {'instIndex': 93, 'instruction': 'movq\t%rax, %r12'}, {'instIndex': 94, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 95, 'instruction': 'je\t.L43'}, {'instIndex': 96, 'instruction': 'leaq\t8(%rax), %rdi'}, {'instIndex': 97, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 98, 'instruction': 'movq\t$0, 0x528(%rax)'}, {'instIndex': 99, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 100, 'instruction': 'andq\t$-8, %rdi'}, {'instIndex': 101, 'instruction': 'subq\t%rdi, %rcx'}]}]}
The case of compiler gcc with optimization O3.
Patched source code file: options.c
Patched function: 1---static void *format_child_next 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_before/O3/options_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_before/O3/options_gcc.s---format_child_next---before
function id: 3
function flag: True
There are 110 instructions for function: format_child_next in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '41', 'end': 50}, 'before': {'start': '40', 'end': 45}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 1, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 7, 'instruction': 'movq\t8(%rdi), %rdx'}, {'instIndex': 10, 'instruction': 'cmpq\t$0, 0x88(%rdx)'}, {'instIndex': 11, 'instruction': 'je\t.L9'}, {'instIndex': 12, 'instruction': 'ret'}, {'instIndex': 13, 'instruction': 'movq\t0x10(%rdi), %rdx'}, {'instIndex': 14, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 15, 'instruction': 'je\t.L11'}, {'instIndex': 16, 'instruction': 'cmpq\t$0, 0x78(%rdx)'}, {'instIndex': 17, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 18, 'instruction': 'cmove\t%rdx, %rax'}, {'instIndex': 19, 'instruction': 'ret'}, {'instIndex': 20, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 21, 'instruction': 'ret'}]}]
Patched function: 1---static const AVClass *format_child_class_next 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_before/O3/options_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_before/O3/options_gcc.s---format_child_class_next---before
function id: 8
function flag: True
There are 87 instructions for function: format_child_class_next in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 78}, 'before': {'start': '59', 'end': 67}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 15, 'instruction': 'cmpq\t0x78(%r8), %rbx'}, {'instIndex': 16, 'instruction': 'je\t.L31'}, {'instIndex': 17, 'instruction': 'movq\t%r8, %rdi'}, {'instIndex': 18, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 19, 'instruction': 'movq\t%rax, %r8'}, {'instIndex': 20, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 21, 'instruction': 'jne\t.L30'}, {'instIndex': 22, 'instruction': 'movq\t%r8, %rdi'}, {'instIndex': 23, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 24, 'instruction': 'movq\t%rax, %r8'}, {'instIndex': 25, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 26, 'instruction': 'je\t.L19'}, {'instIndex': 27, 'instruction': 'movq\t0x78(%r8), %rax'}, {'instIndex': 28, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 29, 'instruction': 'jne\t.L39'}, {'instIndex': 30, 'instruction': 'movq\t%r8, %rdi'}, {'instIndex': 31, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 32, 'instruction': 'movq\t%rax, %r8'}, {'instIndex': 33, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 34, 'instruction': 'jne\t.L32'}, {'instIndex': 35, 'instruction': 'movq\t%r8, %rax'}, {'instIndex': 36, 'instruction': 'popq\t%rbx'}, {'instIndex': 37, 'instruction': 'ret'}, {'instIndex': 50, 'instruction': 'popq\t%rbx'}, {'instIndex': 51, 'instruction': 'movq\t%r8, %rax'}, {'instIndex': 52, 'instruction': 'ret'}, {'instIndex': 60, 'instruction': 'je\t.L40'}, {'instIndex': 61, 'instruction': 'leaq\t8(%rax), %rdi'}, {'instIndex': 62, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 63, 'instruction': 'movq\t$0, 0x528(%rax)'}, {'instIndex': 64, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 65, 'instruction': 'andq\t$-8, %rdi'}, {'instIndex': 66, 'instruction': 'subq\t%rdi, %rcx'}, {'instIndex': 67, 'instruction': 'addl\t$0x530, %ecx'}, {'instIndex': 68, 'instruction': 'shrl\t$3, %ecx'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_before/O3/options.o
Binary file does not exist.
{'format_child_next': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 1, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 7, 'instruction': 'movq\t8(%rdi), %rdx'}, {'instIndex': 10, 'instruction': 'cmpq\t$0, 0x88(%rdx)'}, {'instIndex': 11, 'instruction': 'je\t.L9'}, {'instIndex': 12, 'instruction': 'ret'}, {'instIndex': 13, 'instruction': 'movq\t0x10(%rdi), %rdx'}, {'instIndex': 14, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 15, 'instruction': 'je\t.L11'}, {'instIndex': 16, 'instruction': 'cmpq\t$0, 0x78(%rdx)'}, {'instIndex': 17, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 18, 'instruction': 'cmove\t%rdx, %rax'}, {'instIndex': 19, 'instruction': 'ret'}, {'instIndex': 20, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 21, 'instruction': 'ret'}]}], 'format_child_class_next': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 15, 'instruction': 'cmpq\t0x78(%r8), %rbx'}, {'instIndex': 16, 'instruction': 'je\t.L31'}, {'instIndex': 17, 'instruction': 'movq\t%r8, %rdi'}, {'instIndex': 18, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 19, 'instruction': 'movq\t%rax, %r8'}, {'instIndex': 20, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 21, 'instruction': 'jne\t.L30'}, {'instIndex': 22, 'instruction': 'movq\t%r8, %rdi'}, {'instIndex': 23, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 24, 'instruction': 'movq\t%rax, %r8'}, {'instIndex': 25, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 26, 'instruction': 'je\t.L19'}, {'instIndex': 27, 'instruction': 'movq\t0x78(%r8), %rax'}, {'instIndex': 28, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 29, 'instruction': 'jne\t.L39'}, {'instIndex': 30, 'instruction': 'movq\t%r8, %rdi'}, {'instIndex': 31, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 32, 'instruction': 'movq\t%rax, %r8'}, {'instIndex': 33, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 34, 'instruction': 'jne\t.L32'}, {'instIndex': 35, 'instruction': 'movq\t%r8, %rax'}, {'instIndex': 36, 'instruction': 'popq\t%rbx'}, {'instIndex': 37, 'instruction': 'ret'}, {'instIndex': 50, 'instruction': 'popq\t%rbx'}, {'instIndex': 51, 'instruction': 'movq\t%r8, %rax'}, {'instIndex': 52, 'instruction': 'ret'}, {'instIndex': 60, 'instruction': 'je\t.L40'}, {'instIndex': 61, 'instruction': 'leaq\t8(%rax), %rdi'}, {'instIndex': 62, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 63, 'instruction': 'movq\t$0, 0x528(%rax)'}, {'instIndex': 64, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 65, 'instruction': 'andq\t$-8, %rdi'}, {'instIndex': 66, 'instruction': 'subq\t%rdi, %rcx'}, {'instIndex': 67, 'instruction': 'addl\t$0x530, %ecx'}, {'instIndex': 68, 'instruction': 'shrl\t$3, %ecx'}]}]}
The case of compiler gcc with optimization Os.
Patched source code file: options.c
Patched function: 1---static void *format_child_next 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_before/Os/options_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_before/Os/options_gcc.s---format_child_next---before
function id: 22
function flag: True
There are 50 instructions for function: format_child_next in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '41', 'end': 50}, 'before': {'start': '40', 'end': 45}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 1, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 7, 'instruction': 'movq\t8(%rdi), %rdx'}, {'instIndex': 10, 'instruction': 'cmpq\t$0, 0x88(%rdx)'}, {'instIndex': 11, 'instruction': 'jne\t.L28'}, {'instIndex': 12, 'instruction': 'movq\t0x10(%rdi), %rdx'}, {'instIndex': 13, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 14, 'instruction': 'je\t.L32'}, {'instIndex': 15, 'instruction': 'cmpq\t$0, 0x78(%rdx)'}, {'instIndex': 16, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 17, 'instruction': 'cmove\t%rdx, %rax'}, {'instIndex': 18, 'instruction': 'ret'}, {'instIndex': 19, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 20, 'instruction': 'ret'}]}]
Patched function: 1---static const AVClass *format_child_class_next 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_before/Os/options_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_before/Os/options_gcc.s---format_child_class_next---before
function id: 0
function flag: True
There are 112 instructions for function: format_child_class_next in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 78}, 'before': {'start': '59', 'end': 67}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 29, 'instruction': 'testq\t%rbx, %rbx'}, {'instIndex': 30, 'instruction': 'je\t.L12'}, {'instIndex': 31, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 32, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 33, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 34, 'instruction': 'je\t.L12'}, {'instIndex': 35, 'instruction': 'cmpq\t%rbx, 0x78(%rdi)'}, {'instIndex': 36, 'instruction': 'jne\t.L10'}, {'instIndex': 37, 'instruction': 'jmp\t.L12'}, {'instIndex': 38, 'instruction': 'movq\t0x78(%rdi), %rax'}, {'instIndex': 39, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 40, 'instruction': 'jne\t.L1'}, {'instIndex': 41, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 42, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 43, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 44, 'instruction': 'jne\t.L13'}, {'instIndex': 45, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 46, 'instruction': 'popq\t%rbx'}, {'instIndex': 47, 'instruction': 'ret'}, {'instIndex': 88, 'instruction': 'movq\t%rax, %r12'}, {'instIndex': 89, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 90, 'instruction': 'je\t.L40'}, {'instIndex': 91, 'instruction': 'xorl\t%eax, %eax'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/gcc_before/Os/options.o
Binary file does not exist.
{'format_child_next': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 1, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 7, 'instruction': 'movq\t8(%rdi), %rdx'}, {'instIndex': 10, 'instruction': 'cmpq\t$0, 0x88(%rdx)'}, {'instIndex': 11, 'instruction': 'jne\t.L28'}, {'instIndex': 12, 'instruction': 'movq\t0x10(%rdi), %rdx'}, {'instIndex': 13, 'instruction': 'testq\t%rdx, %rdx'}, {'instIndex': 14, 'instruction': 'je\t.L32'}, {'instIndex': 15, 'instruction': 'cmpq\t$0, 0x78(%rdx)'}, {'instIndex': 16, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 17, 'instruction': 'cmove\t%rdx, %rax'}, {'instIndex': 18, 'instruction': 'ret'}, {'instIndex': 19, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 20, 'instruction': 'ret'}]}], 'format_child_class_next': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 29, 'instruction': 'testq\t%rbx, %rbx'}, {'instIndex': 30, 'instruction': 'je\t.L12'}, {'instIndex': 31, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 32, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 33, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 34, 'instruction': 'je\t.L12'}, {'instIndex': 35, 'instruction': 'cmpq\t%rbx, 0x78(%rdi)'}, {'instIndex': 36, 'instruction': 'jne\t.L10'}, {'instIndex': 37, 'instruction': 'jmp\t.L12'}, {'instIndex': 38, 'instruction': 'movq\t0x78(%rdi), %rax'}, {'instIndex': 39, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 40, 'instruction': 'jne\t.L1'}, {'instIndex': 41, 'instruction': 'call\tav_oformat_next@PLT'}, {'instIndex': 42, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 43, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 44, 'instruction': 'jne\t.L13'}, {'instIndex': 45, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 46, 'instruction': 'popq\t%rbx'}, {'instIndex': 47, 'instruction': 'ret'}, {'instIndex': 88, 'instruction': 'movq\t%rax, %r12'}, {'instIndex': 89, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 90, 'instruction': 'je\t.L40'}, {'instIndex': 91, 'instruction': 'xorl\t%eax, %eax'}]}]}
The case of compiler clang with optimization no.
Patched source code file: options.c
Patched function: 1---static void *format_child_next 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_before/no/options.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_before/no/options.s---format_child_next---before
function id: 4
function flag: True
There are 30 instructions for function: format_child_next in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '41', 'end': 50}, 'before': {'start': '40', 'end': 45}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 9, 'instruction': 'movq\t-0x20(%rsp), %rax'}, {'instIndex': 10, 'instruction': 'cmpq\t$0, 8(%rax)'}, {'instIndex': 11, 'instruction': 'je\t.LBB4_4'}, {'instIndex': 12, 'instruction': 'movq\t-0x20(%rsp), %rax'}, {'instIndex': 13, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 14, 'instruction': 'cmpq\t$0, 0x88(%rax)'}, {'instIndex': 15, 'instruction': 'jne\t.LBB4_6'}, {'instIndex': 16, 'instruction': 'movq\t-0x20(%rsp), %rax'}, {'instIndex': 17, 'instruction': 'cmpq\t$0, 0x10(%rax)'}, {'instIndex': 18, 'instruction': 'je\t.LBB4_7'}, {'instIndex': 19, 'instruction': 'movq\t-0x20(%rsp), %rax'}, {'instIndex': 20, 'instruction': 'movq\t0x10(%rax), %rax'}, {'instIndex': 21, 'instruction': 'cmpq\t$0, 0x78(%rax)'}, {'instIndex': 23, 'instruction': 'movq\t-0x20(%rsp), %rax'}, {'instIndex': 24, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 25, 'instruction': 'movq\t%rax, -8(%rsp)'}, {'instIndex': 26, 'instruction': 'jmp\t.LBB4_8'}, {'instIndex': 27, 'instruction': 'movq\t$0, -8(%rsp)'}, {'instIndex': 28, 'instruction': 'movq\t-8(%rsp), %rax'}, {'instIndex': 29, 'instruction': 'retq'}]}]
Patched function: 1---static const AVClass *format_child_class_next 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_before/no/options.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_before/no/options.s---format_child_class_next---before
function id: 5
function flag: True
There are 84 instructions for function: format_child_class_next in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 78}, 'before': {'start': '59', 'end': 67}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 45, 'instruction': 'jmp\t.LBB5_17'}, {'instIndex': 46, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 47, 'instruction': 'cmpq\t$0, 0x18(%rsp)'}, {'instIndex': 48, 'instruction': 'movb\t%al, 6(%rsp)                    # 1-byte Spill'}, {'instIndex': 49, 'instruction': 'je\t.LBB5_19'}, {'instIndex': 50, 'instruction': 'movq\t8(%rsp), %rdi'}, {'instIndex': 51, 'instruction': 'callq\tav_oformat_next@PLT'}, {'instIndex': 52, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 53, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 54, 'instruction': 'setne\t%al'}, {'instIndex': 55, 'instruction': 'movb\t%al, 6(%rsp)                    # 1-byte Spill'}, {'instIndex': 57, 'instruction': 'testb\t$1, %al'}, {'instIndex': 58, 'instruction': 'jne\t.LBB5_20'}, {'instIndex': 59, 'instruction': 'jmp\t.LBB5_23'}, {'instIndex': 60, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 61, 'instruction': 'movq\t0x78(%rax), %rax'}, {'instIndex': 62, 'instruction': 'cmpq\t0x18(%rsp), %rax'}, {'instIndex': 63, 'instruction': 'jne\t.LBB5_22'}, {'instIndex': 64, 'instruction': 'jmp\t.LBB5_23'}, {'instIndex': 65, 'instruction': 'jmp\t.LBB5_17'}, {'instIndex': 66, 'instruction': 'jmp\t.LBB5_24'}, {'instIndex': 67, 'instruction': 'movq\t8(%rsp), %rdi'}, {'instIndex': 68, 'instruction': 'callq\tav_oformat_next@PLT'}, {'instIndex': 69, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 70, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 71, 'instruction': 'je\t.LBB5_28'}, {'instIndex': 72, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 73, 'instruction': 'cmpq\t$0, 0x78(%rax)'}, {'instIndex': 74, 'instruction': 'je\t.LBB5_27'}, {'instIndex': 75, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 76, 'instruction': 'movq\t0x78(%rax), %rax'}, {'instIndex': 77, 'instruction': 'movq\t%rax, 0x20(%rsp)'}, {'instIndex': 78, 'instruction': 'jmp\t.LBB5_29'}, {'instIndex': 79, 'instruction': 'jmp\t.LBB5_24'}, {'instIndex': 80, 'instruction': 'movq\t$0, 0x20(%rsp)'}, {'instIndex': 81, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 82, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 83, 'instruction': 'retq'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_before/no/options.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_before/no/options.o---before
The extraction of function: format_child_next
Analyzing the binaries to generate subCFGs from patched function ...
It has 71 nodes and 97 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 30 instructions in binary file.
[4194584, 4194596, 4194615, 4194627, 4194643, 4194659, 4194668]
The extraction of function: format_child_class_next
Analyzing the binaries to generate subCFGs from patched function ...
It has 71 nodes and 97 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 84 instructions in binary file.
[4194876, 4194878, 4194892, 4194902, 4194918, 4194926, 4194928, 4194944, 4194946, 4194948, 4194950, 4194960, 4194971, 4194983, 4194999, 4195001, 4195010]
The execution time of patched subCFG information extraction via angr: 0:00:00.223892
{'format_child_next': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400143>, <DisassemblerInsn "mov" for 0x400148>, <DisassemblerInsn "cmp" for 0x40014c>, <DisassemblerInsn "je" for 0x400151>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400153>, <DisassemblerInsn "mov" for 0x400158>, <DisassemblerInsn "mov" for 0x40015c>, <DisassemblerInsn "jmp" for 0x400161>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400124>, <DisassemblerInsn "mov" for 0x400129>, <DisassemblerInsn "cmp" for 0x40012d>, <DisassemblerInsn "jne" for 0x400135>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000f0>, <DisassemblerInsn "mov" for 0x4000f5>, <DisassemblerInsn "mov" for 0x4000fa>, <DisassemblerInsn "mov" for 0x4000ff>, <DisassemblerInsn "cmp" for 0x400104>, <DisassemblerInsn "jne" for 0x40010a>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400137>, <DisassemblerInsn "cmp" for 0x40013c>, <DisassemblerInsn "je" for 0x400141>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40010c>, <DisassemblerInsn "cmp" for 0x400111>, <DisassemblerInsn "je" for 0x400116>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400118>, <DisassemblerInsn "cmp" for 0x40011d>, <DisassemblerInsn "je" for 0x400122>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40016c>, <DisassemblerInsn "ret" for 0x400171>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400163>, <DisassemblerInsn "mov" for 0x40016c>, <DisassemblerInsn "ret" for 0x400171>]'}], 'cfg_block_detailed_info': [{'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<cmp~~qword ptr [rax + 0x78], 0>', '<je~~0x400163>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp - 8], rax>', '<jmp~~0x40016c>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~qword ptr [rax + 0x88], 0>', '<jne~~0x400153>']}, {'block_Idx': 0, 'blockInsts': ['<mov~~qword ptr [rsp - 0x10], rdi>', '<mov~~qword ptr [rsp - 0x18], rsi>', '<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~qword ptr [rsp - 0x20], rax>', '<cmp~~qword ptr [rsp - 0x18], 0>', '<jne~~0x400163>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<cmp~~qword ptr [rax + 0x10], 0>', '<je~~0x400163>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<cmp~~qword ptr [rax + 0x18], 0>', '<je~~0x400163>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<cmp~~qword ptr [rax + 8], 0>', '<je~~0x400137>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 8]>', '<ret~~>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~qword ptr [rsp - 8], 0>', '<mov~~rax, qword ptr [rsp - 8]>', '<ret~~>']}], 'cfg_edge_info': [(6, 2), (1, 2), (3, 4), (5, 4), (4, 6), (5, 7), (4, 2), (6, 7), (0, 2), (7, 8), (1, 3), (3, 5)]}], 'format_child_class_next': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40026e>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002b9>, <DisassemblerInsn "mov" for 0x4002c2>, <DisassemblerInsn "add" for 0x4002c7>, <DisassemblerInsn "ret" for 0x4002cb>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400280>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40024c>, <DisassemblerInsn "call" for 0x400251>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "xor" for 0x40023e>, <DisassemblerInsn "cmp" for 0x400240>, <DisassemblerInsn "mov" for 0x400246>, <DisassemblerInsn "je" for 0x40024a>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400256>, <DisassemblerInsn "cmp" for 0x40025b>, <DisassemblerInsn "setne" for 0x40025f>, <DisassemblerInsn "mov" for 0x400262>, <DisassemblerInsn "mov" for 0x400266>, <DisassemblerInsn "test" for 0x40026a>, <DisassemblerInsn "jne" for 0x40026c>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40023c>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002c2>, <DisassemblerInsn "add" for 0x4002c7>, <DisassemblerInsn "ret" for 0x4002cb>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400284>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002a7>, <DisassemblerInsn "mov" for 0x4002ac>, <DisassemblerInsn "mov" for 0x4002b0>, <DisassemblerInsn "jmp" for 0x4002b5>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400222>, <DisassemblerInsn "mov" for 0x400227>, <DisassemblerInsn "mov" for 0x40022e>, <DisassemblerInsn "jmp" for 0x400233>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400290>, <DisassemblerInsn "cmp" for 0x400295>, <DisassemblerInsn "je" for 0x400299>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4002b7>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4001f4>, <DisassemblerInsn "jne" for 0x4001fa>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400286>, <DisassemblerInsn "call" for 0x40028b>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400266>, <DisassemblerInsn "test" for 0x40026a>, <DisassemblerInsn "jne" for 0x40026c>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40029b>, <DisassemblerInsn "cmp" for 0x4002a0>, <DisassemblerInsn "je" for 0x4002a5>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400270>, <DisassemblerInsn "mov" for 0x400275>, <DisassemblerInsn "cmp" for 0x400279>, <DisassemblerInsn "jne" for 0x40027e>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40023a>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400282>]'}], 'cfg_block_detailed_info': [{'block_Idx': 21, 'blockInsts': ['<jmp~~0x400284>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~qword ptr [rsp + 0x20], 0>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 27, 'blockInsts': ['<jmp~~0x400284>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}, {'block_Idx': 15, 'blockInsts': ['<xor~~eax, eax>', '<cmp~~qword ptr [rsp + 0x18], 0>', '<mov~~byte ptr [rsp + 6], al>', '<je~~0x400266>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~qword ptr [rsp + 8], rax>', '<cmp~~rax, 0>', '<setne~~al>', '<mov~~byte ptr [rsp + 6], al>', '<mov~~al, byte ptr [rsp + 6]>', '<test~~al, 1>', '<jne~~0x400270>']}, {'block_Idx': 13, 'blockInsts': ['<jmp~~0x40023e>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 26, 'blockInsts': ['<jmp~~0x400286>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<mov~~rax, qword ptr [rax + 0x78]>', '<mov~~qword ptr [rsp + 0x20], rax>', '<jmp~~0x4002c2>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x88]>', '<mov~~qword ptr [rsp + 0x20], rax>', '<jmp~~0x4002c2>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~qword ptr [rsp + 8], rax>', '<cmp~~rax, 0>', '<je~~0x4002b9>']}, {'block_Idx': 34, 'blockInsts': ['<jmp~~0x400286>']}, {'block_Idx': 9, 'blockInsts': ['<cmp~~qword ptr [rsp + 0x18], 0>', '<jne~~0x40023c>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~al, byte ptr [rsp + 6]>', '<test~~al, 1>', '<jne~~0x400270>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<cmp~~qword ptr [rax + 0x78], 0>', '<je~~0x4002b7>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<mov~~rax, qword ptr [rax + 0x78]>', '<cmp~~rax, qword ptr [rsp + 0x18]>', '<jne~~0x400282>']}, {'block_Idx': 19, 'blockInsts': ['<jmp~~0x40023c>']}, {'block_Idx': 28, 'blockInsts': ['<jmp~~0x40023e>']}], 'cfg_edge_info': [(25, 29), (18, 23), (26, 30), (31, 32), (23, 22), (28, 15), (17, 21), (15, 17), (33, 35), (35, 29), (23, 21), (34, 30), (22, 28), (9, 13), (13, 15), (33, 34), (21, 26), (22, 27), (31, 33), (19, 13), (17, 22), (27, 26), (30, 31), (15, 18)]}]}
{'format_child_next': [4194584, 4194596, 4194615, 4194627, 4194643, 4194659, 4194668], 'format_child_class_next': [4194876, 4194878, 4194892, 4194902, 4194918, 4194926, 4194928, 4194944, 4194946, 4194948, 4194950, 4194960, 4194971, 4194983, 4194999, 4195001, 4195010]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_before/no/options.o---before
The extraction of function: format_child_next
[4194584, 4194596, 4194615, 4194627, 4194643, 4194659, 4194668]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 9 nodes and 13 edges in CFGEmulated.
It has 9 nodes and 14 edges in CDG.
It has 118 nodes and 129 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194584, 4194596, 4194615, 4194627, 4194643, 4194659, 4194668]
{4194659, 4194596, 4194627, 4194572, 4194668, 4194544, 4194643, 4194615, 4194584}
[3, 8, 2, 0, 5, 4, 6, 1, 7]
The extraction of function: format_child_class_next
[4194876, 4194878, 4194892, 4194902, 4194918, 4194926, 4194928, 4194944, 4194946, 4194948, 4194950, 4194960, 4194971, 4194983, 4194999, 4195001, 4195010]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 40 nodes and 58 edges in CFGEmulated.
It has 40 nodes and 68 edges in CDG.
It has 319 nodes and 413 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194876, 4194878, 4194892, 4194902, 4194918, 4194926, 4194928, 4194944, 4194946, 4194948, 4194950, 4194960, 4194971, 4194983, 4194999, 4195001, 4195010]
{4194944, 4194688, 4194946, 4194948, 4194950, 4194824, 4194960, 4194835, 4194971, 4194715, 4194850, 4194983, 4194729, 4194739, 4194999, 4194872, 4195001, 4194874, 4194876, 4194878, 4195010, 4194892, 4194765, 4194902, 4194788, 4194918, 4194796, 4194926, 4194928, 4194804, 4194812, 4194814}
[37, 39, 11, 25, 0, 14, 26, 29, 16, 1, 19, 32, 12, 24, 18, 30, 7, 15, 10, 9, 27, 8, 4, 28, 38, 13, 21, 35, 6, 22, 36, 20, 31, 3, 33, 2]
The execution time of patched slicing information extraction via angr: 0:00:02.439641
{'format_child_next': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400118>, <DisassemblerInsn "cmp" for 0x40011d>, <DisassemblerInsn "je" for 0x400122>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40016c>, <DisassemblerInsn "ret" for 0x400171>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400163>, <DisassemblerInsn "mov" for 0x40016c>, <DisassemblerInsn "ret" for 0x400171>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000f0>, <DisassemblerInsn "mov" for 0x4000f5>, <DisassemblerInsn "mov" for 0x4000fa>, <DisassemblerInsn "mov" for 0x4000ff>, <DisassemblerInsn "cmp" for 0x400104>, <DisassemblerInsn "jne" for 0x40010a>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400124>, <DisassemblerInsn "mov" for 0x400129>, <DisassemblerInsn "cmp" for 0x40012d>, <DisassemblerInsn "jne" for 0x400135>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400137>, <DisassemblerInsn "cmp" for 0x40013c>, <DisassemblerInsn "je" for 0x400141>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400143>, <DisassemblerInsn "mov" for 0x400148>, <DisassemblerInsn "cmp" for 0x40014c>, <DisassemblerInsn "je" for 0x400151>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40010c>, <DisassemblerInsn "cmp" for 0x400111>, <DisassemblerInsn "je" for 0x400116>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400153>, <DisassemblerInsn "mov" for 0x400158>, <DisassemblerInsn "mov" for 0x40015c>, <DisassemblerInsn "jmp" for 0x400161>]'}], 'cfg_block_detailed_info': [{'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<cmp~~qword ptr [rax + 8], 0>', '<je~~0x400137>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 8]>', '<ret~~>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~qword ptr [rsp - 8], 0>', '<mov~~rax, qword ptr [rsp - 8]>', '<ret~~>']}, {'block_Idx': 0, 'blockInsts': ['<mov~~qword ptr [rsp - 0x10], rdi>', '<mov~~qword ptr [rsp - 0x18], rsi>', '<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~qword ptr [rsp - 0x20], rax>', '<cmp~~qword ptr [rsp - 0x18], 0>', '<jne~~0x400163>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~qword ptr [rax + 0x88], 0>', '<jne~~0x400153>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<cmp~~qword ptr [rax + 0x10], 0>', '<je~~0x400163>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<cmp~~qword ptr [rax + 0x78], 0>', '<je~~0x400163>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<cmp~~qword ptr [rax + 0x18], 0>', '<je~~0x400163>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp - 8], rax>', '<jmp~~0x40016c>']}], 'cfg_edge_info': [(0, 1), (6, 2), (1, 2), (3, 4), (5, 4), (4, 6), (4, 2), (5, 7), (6, 7), (0, 2), (7, 8), (1, 3), (3, 5)], 'cdg_edge_info': [(0, 1), (3, 8), (1, 2), (6, 2), (3, 4), (3, 7), (5, 4), (4, 6), (6, 8), (4, 2), (6, 7), (0, 2), (1, 3), (3, 5)], 'ddg_edge_info': [(0, 1), (0, 7), (0, 4), (0, 3), (0, 6), (0, 2), (1, 7), (0, 5), (0, 8), (2, 8)]}], 'format_child_class_next': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40029b>, <DisassemblerInsn "cmp" for 0x4002a0>, <DisassemblerInsn "je" for 0x4002a5>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002a7>, <DisassemblerInsn "mov" for 0x4002ac>, <DisassemblerInsn "mov" for 0x4002b0>, <DisassemblerInsn "jmp" for 0x4002b5>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4001ec>, <DisassemblerInsn "jne" for 0x4001f2>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400213>, <DisassemblerInsn "cmp" for 0x400218>, <DisassemblerInsn "je" for 0x400220>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400180>, <DisassemblerInsn "mov" for 0x400184>, <DisassemblerInsn "mov" for 0x400189>, <DisassemblerInsn "mov" for 0x400192>, <DisassemblerInsn "xor" for 0x40019b>, <DisassemblerInsn "cmp" for 0x40019d>, <DisassemblerInsn "mov" for 0x4001a3>, <DisassemblerInsn "je" for 0x4001a7>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40023c>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400284>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400256>, <DisassemblerInsn "cmp" for 0x40025b>, <DisassemblerInsn "setne" for 0x40025f>, <DisassemblerInsn "mov" for 0x400262>, <DisassemblerInsn "mov" for 0x400266>, <DisassemblerInsn "test" for 0x40026a>, <DisassemblerInsn "jne" for 0x40026c>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "xor" for 0x40023e>, <DisassemblerInsn "cmp" for 0x400240>, <DisassemblerInsn "mov" for 0x400246>, <DisassemblerInsn "je" for 0x40024a>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001c3>, <DisassemblerInsn "test" for 0x4001c7>, <DisassemblerInsn "jne" for 0x4001c9>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40024c>, <DisassemblerInsn "call" for 0x400251>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400286>, <DisassemblerInsn "call" for 0x40028b>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "xor" for 0x40019b>, <DisassemblerInsn "cmp" for 0x40019d>, <DisassemblerInsn "mov" for 0x4001a3>, <DisassemblerInsn "je" for 0x4001a7>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40023a>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400266>, <DisassemblerInsn "test" for 0x40026a>, <DisassemblerInsn "jne" for 0x40026c>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400238>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001e0>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001fe>, <DisassemblerInsn "call" for 0x400203>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4001f4>, <DisassemblerInsn "jne" for 0x4001fa>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001b3>, <DisassemblerInsn "cmp" for 0x4001b8>, <DisassemblerInsn "setne" for 0x4001bc>, <DisassemblerInsn "mov" for 0x4001bf>, <DisassemblerInsn "mov" for 0x4001c3>, <DisassemblerInsn "test" for 0x4001c7>, <DisassemblerInsn "jne" for 0x4001c9>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400280>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001e2>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001cd>, <DisassemblerInsn "mov" for 0x4001d2>, <DisassemblerInsn "cmp" for 0x4001d9>, <DisassemblerInsn "jne" for 0x4001de>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400282>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4002b7>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001fc>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40026e>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400290>, <DisassemblerInsn "cmp" for 0x400295>, <DisassemblerInsn "je" for 0x400299>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4001e4>, <DisassemblerInsn "je" for 0x4001ea>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400270>, <DisassemblerInsn "mov" for 0x400275>, <DisassemblerInsn "cmp" for 0x400279>, <DisassemblerInsn "jne" for 0x40027e>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002b9>, <DisassemblerInsn "mov" for 0x4002c2>, <DisassemblerInsn "add" for 0x4002c7>, <DisassemblerInsn "ret" for 0x4002cb>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400208>, <DisassemblerInsn "cmp" for 0x40020d>, <DisassemblerInsn "je" for 0x400211>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400222>, <DisassemblerInsn "mov" for 0x400227>, <DisassemblerInsn "mov" for 0x40022e>, <DisassemblerInsn "jmp" for 0x400233>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001cb>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002c2>, <DisassemblerInsn "add" for 0x4002c7>, <DisassemblerInsn "ret" for 0x4002cb>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a9>, <DisassemblerInsn "call" for 0x4001ae>]'}], 'cfg_block_detailed_info': [{'block_Idx': 37, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<cmp~~qword ptr [rax + 0x78], 0>', '<je~~0x4002b7>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<mov~~rax, qword ptr [rax + 0x78]>', '<mov~~qword ptr [rsp + 0x20], rax>', '<jmp~~0x4002c2>']}, {'block_Idx': 11, 'blockInsts': ['<cmp~~qword ptr [rsp + 0x10], 0>', '<jne~~0x4001fc>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~qword ptr [rax + 0x88], 0>', '<je~~0x400238>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x28>', '<mov~~qword ptr [rsp + 0x18], rdi>', '<mov~~qword ptr [rsp + 0x10], 0>', '<mov~~qword ptr [rsp + 8], 0>', '<xor~~eax, eax>', '<cmp~~qword ptr [rsp + 0x18], 0>', '<mov~~byte ptr [rsp + 7], al>', '<je~~0x4001c3>']}, {'block_Idx': 14, 'blockInsts': ['<jmp~~0x40023e>']}, {'block_Idx': 26, 'blockInsts': ['<jmp~~0x400286>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~qword ptr [rsp + 8], rax>', '<cmp~~rax, 0>', '<setne~~al>', '<mov~~byte ptr [rsp + 6], al>', '<mov~~al, byte ptr [rsp + 6]>', '<test~~al, 1>', '<jne~~0x400270>']}, {'block_Idx': 16, 'blockInsts': ['<xor~~eax, eax>', '<cmp~~qword ptr [rsp + 0x18], 0>', '<mov~~byte ptr [rsp + 6], al>', '<je~~0x400266>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~al, byte ptr [rsp + 7]>', '<test~~al, 1>', '<jne~~0x4001cd>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}, {'block_Idx': 12, 'blockInsts': ['<xor~~eax, eax>', '<cmp~~qword ptr [rsp + 0x18], 0>', '<mov~~byte ptr [rsp + 7], al>', '<je~~0x4001c3>']}, {'block_Idx': 24, 'blockInsts': ['<jmp~~0x40023c>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~al, byte ptr [rsp + 6]>', '<test~~al, 1>', '<jne~~0x400270>']}, {'block_Idx': 30, 'blockInsts': ['<jmp~~0x4001fe>']}, {'block_Idx': 7, 'blockInsts': ['<jmp~~0x4001e4>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x10]>', '<call~~0x500018>']}, {'block_Idx': 10, 'blockInsts': ['<cmp~~qword ptr [rsp + 0x18], 0>', '<jne~~0x40023c>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~qword ptr [rsp + 0x10], rax>', '<cmp~~rax, 0>', '<setne~~al>', '<mov~~byte ptr [rsp + 7], al>', '<mov~~al, byte ptr [rsp + 7]>', '<test~~al, 1>', '<jne~~0x4001cd>']}, {'block_Idx': 27, 'blockInsts': ['<jmp~~0x400284>']}, {'block_Idx': 8, 'blockInsts': ['<jmp~~0x40019b>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x88]>', '<cmp~~rax, qword ptr [rsp + 0x18]>', '<jne~~0x4001e2>']}, {'block_Idx': 28, 'blockInsts': ['<jmp~~0x40023e>']}, {'block_Idx': 38, 'blockInsts': ['<jmp~~0x400286>']}, {'block_Idx': 13, 'blockInsts': ['<jmp~~0x4001fe>']}, {'block_Idx': 21, 'blockInsts': ['<jmp~~0x400284>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~qword ptr [rsp + 8], rax>', '<cmp~~rax, 0>', '<je~~0x4002b9>']}, {'block_Idx': 6, 'blockInsts': ['<cmp~~qword ptr [rsp + 0x18], 0>', '<je~~0x4001f4>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<mov~~rax, qword ptr [rax + 0x78]>', '<cmp~~rax, qword ptr [rsp + 0x18]>', '<jne~~0x400282>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~qword ptr [rsp + 0x20], 0>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~qword ptr [rsp + 0x10], rax>', '<cmp~~rax, 0>', '<je~~0x40023a>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x88]>', '<mov~~qword ptr [rsp + 0x20], rax>', '<jmp~~0x4002c2>']}, {'block_Idx': 3, 'blockInsts': ['<jmp~~0x4001e4>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x10]>', '<call~~0x500018>']}], 'cfg_edge_info': [(12, 1), (35, 36), (38, 32), (14, 16), (39, 33), (0, 2), (8, 12), (30, 15), (24, 14), (37, 39), (6, 11), (16, 19), (25, 31), (15, 20), (26, 32), (18, 22), (29, 22), (20, 25), (4, 8), (3, 6), (22, 28), (9, 4), (0, 1), (11, 10), (10, 14), (11, 13), (37, 38), (19, 29), (7, 6), (12, 2), (32, 35), (16, 18), (6, 10), (18, 21), (35, 37), (25, 30), (29, 21), (4, 7), (21, 26), (20, 24), (22, 27), (9, 3), (28, 16), (31, 33), (1, 4), (10, 13), (2, 9), (27, 26), (13, 15)], 'cdg_edge_info': [(20, 14), (16, 29), (35, 36), (29, 26), (4, 12), (20, 26), (20, 32), (29, 35), (29, 32), (0, 2), (20, 35), (37, 33), (10, 15), (11, 20), (37, 39), (6, 11), (16, 19), (25, 31), (12, 9), (20, 16), (18, 22), (29, 22), (20, 25), (22, 16), (22, 28), (9, 4), (11, 10), (37, 35), (10, 14), (11, 13), (37, 38), (37, 32), (25, 15), (10, 20), (10, 26), (10, 32), (16, 21), (10, 35), (12, 2), (16, 18), (25, 33), (18, 21), (35, 37), (25, 30), (20, 24), (22, 27), (0, 9), (10, 13), (10, 16), (11, 15), (25, 20)], 'ddg_edge_info': [(32, 37), (0, 39), (16, 29), (16, 35), (35, 39), (9, 2), (29, 35), (15, 36), (29, 32), (0, 2), (39, 36), (22, 35), (9, 11), (2, 11), (0, 11), (9, 20), (9, 29), (0, 29), (35, 32), (0, 32), (2, 29), (15, 20), (12, 9), (15, 32), (2, 32), (29, 19), (29, 22), (15, 29), (20, 25), (32, 39), (32, 36), (20, 31), (4, 20), (9, 4), (2, 4), (0, 4), (0, 10), (0, 16), (37, 35), (0, 19), (2, 16), (31, 36), (2, 10), (0, 22), (2, 19), (19, 29), (15, 16), (0, 25), (0, 31), (19, 32), (15, 19), (32, 35), (15, 25), (2, 22), (15, 22), (35, 37), (0, 37), (20, 15), (15, 31), (12, 20), (0, 9), (19, 16), (4, 25), (4, 31), (9, 15), (2, 9), (0, 12), (0, 6), (0, 15), (19, 22), (2, 12), (2, 6), (2, 15), (25, 20)]}]}
{'format_child_next': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 9, 'instruction': 'movq\t-0x20(%rsp), %rax'}, {'instIndex': 10, 'instruction': 'cmpq\t$0, 8(%rax)'}, {'instIndex': 11, 'instruction': 'je\t.LBB4_4'}, {'instIndex': 12, 'instruction': 'movq\t-0x20(%rsp), %rax'}, {'instIndex': 13, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 14, 'instruction': 'cmpq\t$0, 0x88(%rax)'}, {'instIndex': 15, 'instruction': 'jne\t.LBB4_6'}, {'instIndex': 16, 'instruction': 'movq\t-0x20(%rsp), %rax'}, {'instIndex': 17, 'instruction': 'cmpq\t$0, 0x10(%rax)'}, {'instIndex': 18, 'instruction': 'je\t.LBB4_7'}, {'instIndex': 19, 'instruction': 'movq\t-0x20(%rsp), %rax'}, {'instIndex': 20, 'instruction': 'movq\t0x10(%rax), %rax'}, {'instIndex': 21, 'instruction': 'cmpq\t$0, 0x78(%rax)'}, {'instIndex': 23, 'instruction': 'movq\t-0x20(%rsp), %rax'}, {'instIndex': 24, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 25, 'instruction': 'movq\t%rax, -8(%rsp)'}, {'instIndex': 26, 'instruction': 'jmp\t.LBB4_8'}, {'instIndex': 27, 'instruction': 'movq\t$0, -8(%rsp)'}, {'instIndex': 28, 'instruction': 'movq\t-8(%rsp), %rax'}, {'instIndex': 29, 'instruction': 'retq'}]}], 'format_child_class_next': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 45, 'instruction': 'jmp\t.LBB5_17'}, {'instIndex': 46, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 47, 'instruction': 'cmpq\t$0, 0x18(%rsp)'}, {'instIndex': 48, 'instruction': 'movb\t%al, 6(%rsp)                    # 1-byte Spill'}, {'instIndex': 49, 'instruction': 'je\t.LBB5_19'}, {'instIndex': 50, 'instruction': 'movq\t8(%rsp), %rdi'}, {'instIndex': 51, 'instruction': 'callq\tav_oformat_next@PLT'}, {'instIndex': 52, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 53, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 54, 'instruction': 'setne\t%al'}, {'instIndex': 55, 'instruction': 'movb\t%al, 6(%rsp)                    # 1-byte Spill'}, {'instIndex': 57, 'instruction': 'testb\t$1, %al'}, {'instIndex': 58, 'instruction': 'jne\t.LBB5_20'}, {'instIndex': 59, 'instruction': 'jmp\t.LBB5_23'}, {'instIndex': 60, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 61, 'instruction': 'movq\t0x78(%rax), %rax'}, {'instIndex': 62, 'instruction': 'cmpq\t0x18(%rsp), %rax'}, {'instIndex': 63, 'instruction': 'jne\t.LBB5_22'}, {'instIndex': 64, 'instruction': 'jmp\t.LBB5_23'}, {'instIndex': 65, 'instruction': 'jmp\t.LBB5_17'}, {'instIndex': 66, 'instruction': 'jmp\t.LBB5_24'}, {'instIndex': 67, 'instruction': 'movq\t8(%rsp), %rdi'}, {'instIndex': 68, 'instruction': 'callq\tav_oformat_next@PLT'}, {'instIndex': 69, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 70, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 71, 'instruction': 'je\t.LBB5_28'}, {'instIndex': 72, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 73, 'instruction': 'cmpq\t$0, 0x78(%rax)'}, {'instIndex': 74, 'instruction': 'je\t.LBB5_27'}, {'instIndex': 75, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 76, 'instruction': 'movq\t0x78(%rax), %rax'}, {'instIndex': 77, 'instruction': 'movq\t%rax, 0x20(%rsp)'}, {'instIndex': 78, 'instruction': 'jmp\t.LBB5_29'}, {'instIndex': 79, 'instruction': 'jmp\t.LBB5_24'}, {'instIndex': 80, 'instruction': 'movq\t$0, 0x20(%rsp)'}, {'instIndex': 81, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 82, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 83, 'instruction': 'retq'}]}]}
The case of compiler clang with optimization O0.
Patched source code file: options.c
Patched function: 1---static void *format_child_next 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_before/O0/options.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_before/O0/options.s---format_child_next---before
function id: 4
function flag: True
There are 30 instructions for function: format_child_next in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '41', 'end': 50}, 'before': {'start': '40', 'end': 45}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 9, 'instruction': 'movq\t-0x20(%rsp), %rax'}, {'instIndex': 10, 'instruction': 'cmpq\t$0, 8(%rax)'}, {'instIndex': 11, 'instruction': 'je\t.LBB4_4'}, {'instIndex': 12, 'instruction': 'movq\t-0x20(%rsp), %rax'}, {'instIndex': 13, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 14, 'instruction': 'cmpq\t$0, 0x88(%rax)'}, {'instIndex': 15, 'instruction': 'jne\t.LBB4_6'}, {'instIndex': 16, 'instruction': 'movq\t-0x20(%rsp), %rax'}, {'instIndex': 17, 'instruction': 'cmpq\t$0, 0x10(%rax)'}, {'instIndex': 18, 'instruction': 'je\t.LBB4_7'}, {'instIndex': 19, 'instruction': 'movq\t-0x20(%rsp), %rax'}, {'instIndex': 20, 'instruction': 'movq\t0x10(%rax), %rax'}, {'instIndex': 21, 'instruction': 'cmpq\t$0, 0x78(%rax)'}, {'instIndex': 23, 'instruction': 'movq\t-0x20(%rsp), %rax'}, {'instIndex': 24, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 25, 'instruction': 'movq\t%rax, -8(%rsp)'}, {'instIndex': 26, 'instruction': 'jmp\t.LBB4_8'}, {'instIndex': 27, 'instruction': 'movq\t$0, -8(%rsp)'}, {'instIndex': 28, 'instruction': 'movq\t-8(%rsp), %rax'}, {'instIndex': 29, 'instruction': 'retq'}]}]
Patched function: 1---static const AVClass *format_child_class_next 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_before/O0/options.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_before/O0/options.s---format_child_class_next---before
function id: 5
function flag: True
There are 84 instructions for function: format_child_class_next in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 78}, 'before': {'start': '59', 'end': 67}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 45, 'instruction': 'jmp\t.LBB5_17'}, {'instIndex': 46, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 47, 'instruction': 'cmpq\t$0, 0x18(%rsp)'}, {'instIndex': 48, 'instruction': 'movb\t%al, 6(%rsp)                    # 1-byte Spill'}, {'instIndex': 49, 'instruction': 'je\t.LBB5_19'}, {'instIndex': 50, 'instruction': 'movq\t8(%rsp), %rdi'}, {'instIndex': 51, 'instruction': 'callq\tav_oformat_next@PLT'}, {'instIndex': 52, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 53, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 54, 'instruction': 'setne\t%al'}, {'instIndex': 55, 'instruction': 'movb\t%al, 6(%rsp)                    # 1-byte Spill'}, {'instIndex': 57, 'instruction': 'testb\t$1, %al'}, {'instIndex': 58, 'instruction': 'jne\t.LBB5_20'}, {'instIndex': 59, 'instruction': 'jmp\t.LBB5_23'}, {'instIndex': 60, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 61, 'instruction': 'movq\t0x78(%rax), %rax'}, {'instIndex': 62, 'instruction': 'cmpq\t0x18(%rsp), %rax'}, {'instIndex': 63, 'instruction': 'jne\t.LBB5_22'}, {'instIndex': 64, 'instruction': 'jmp\t.LBB5_23'}, {'instIndex': 65, 'instruction': 'jmp\t.LBB5_17'}, {'instIndex': 66, 'instruction': 'jmp\t.LBB5_24'}, {'instIndex': 67, 'instruction': 'movq\t8(%rsp), %rdi'}, {'instIndex': 68, 'instruction': 'callq\tav_oformat_next@PLT'}, {'instIndex': 69, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 70, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 71, 'instruction': 'je\t.LBB5_28'}, {'instIndex': 72, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 73, 'instruction': 'cmpq\t$0, 0x78(%rax)'}, {'instIndex': 74, 'instruction': 'je\t.LBB5_27'}, {'instIndex': 75, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 76, 'instruction': 'movq\t0x78(%rax), %rax'}, {'instIndex': 77, 'instruction': 'movq\t%rax, 0x20(%rsp)'}, {'instIndex': 78, 'instruction': 'jmp\t.LBB5_29'}, {'instIndex': 79, 'instruction': 'jmp\t.LBB5_24'}, {'instIndex': 80, 'instruction': 'movq\t$0, 0x20(%rsp)'}, {'instIndex': 81, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 82, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 83, 'instruction': 'retq'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_before/O0/options.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_before/O0/options.o---before
The extraction of function: format_child_next
Analyzing the binaries to generate subCFGs from patched function ...
It has 71 nodes and 97 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 30 instructions in binary file.
[4194584, 4194596, 4194615, 4194627, 4194643, 4194659, 4194668]
The extraction of function: format_child_class_next
Analyzing the binaries to generate subCFGs from patched function ...
It has 71 nodes and 97 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 84 instructions in binary file.
[4194876, 4194878, 4194892, 4194902, 4194918, 4194926, 4194928, 4194944, 4194946, 4194948, 4194950, 4194960, 4194971, 4194983, 4194999, 4195001, 4195010]
The execution time of patched subCFG information extraction via angr: 0:00:00.268899
{'format_child_next': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400143>, <DisassemblerInsn "mov" for 0x400148>, <DisassemblerInsn "cmp" for 0x40014c>, <DisassemblerInsn "je" for 0x400151>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400153>, <DisassemblerInsn "mov" for 0x400158>, <DisassemblerInsn "mov" for 0x40015c>, <DisassemblerInsn "jmp" for 0x400161>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400124>, <DisassemblerInsn "mov" for 0x400129>, <DisassemblerInsn "cmp" for 0x40012d>, <DisassemblerInsn "jne" for 0x400135>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000f0>, <DisassemblerInsn "mov" for 0x4000f5>, <DisassemblerInsn "mov" for 0x4000fa>, <DisassemblerInsn "mov" for 0x4000ff>, <DisassemblerInsn "cmp" for 0x400104>, <DisassemblerInsn "jne" for 0x40010a>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400137>, <DisassemblerInsn "cmp" for 0x40013c>, <DisassemblerInsn "je" for 0x400141>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40010c>, <DisassemblerInsn "cmp" for 0x400111>, <DisassemblerInsn "je" for 0x400116>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400118>, <DisassemblerInsn "cmp" for 0x40011d>, <DisassemblerInsn "je" for 0x400122>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40016c>, <DisassemblerInsn "ret" for 0x400171>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400163>, <DisassemblerInsn "mov" for 0x40016c>, <DisassemblerInsn "ret" for 0x400171>]'}], 'cfg_block_detailed_info': [{'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<cmp~~qword ptr [rax + 0x78], 0>', '<je~~0x400163>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp - 8], rax>', '<jmp~~0x40016c>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~qword ptr [rax + 0x88], 0>', '<jne~~0x400153>']}, {'block_Idx': 0, 'blockInsts': ['<mov~~qword ptr [rsp - 0x10], rdi>', '<mov~~qword ptr [rsp - 0x18], rsi>', '<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~qword ptr [rsp - 0x20], rax>', '<cmp~~qword ptr [rsp - 0x18], 0>', '<jne~~0x400163>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<cmp~~qword ptr [rax + 0x10], 0>', '<je~~0x400163>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<cmp~~qword ptr [rax + 0x18], 0>', '<je~~0x400163>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<cmp~~qword ptr [rax + 8], 0>', '<je~~0x400137>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 8]>', '<ret~~>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~qword ptr [rsp - 8], 0>', '<mov~~rax, qword ptr [rsp - 8]>', '<ret~~>']}], 'cfg_edge_info': [(6, 2), (1, 2), (3, 4), (5, 4), (4, 6), (5, 7), (4, 2), (6, 7), (0, 2), (7, 8), (1, 3), (3, 5)]}], 'format_child_class_next': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40026e>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002b9>, <DisassemblerInsn "mov" for 0x4002c2>, <DisassemblerInsn "add" for 0x4002c7>, <DisassemblerInsn "ret" for 0x4002cb>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400280>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40024c>, <DisassemblerInsn "call" for 0x400251>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "xor" for 0x40023e>, <DisassemblerInsn "cmp" for 0x400240>, <DisassemblerInsn "mov" for 0x400246>, <DisassemblerInsn "je" for 0x40024a>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400256>, <DisassemblerInsn "cmp" for 0x40025b>, <DisassemblerInsn "setne" for 0x40025f>, <DisassemblerInsn "mov" for 0x400262>, <DisassemblerInsn "mov" for 0x400266>, <DisassemblerInsn "test" for 0x40026a>, <DisassemblerInsn "jne" for 0x40026c>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40023c>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002c2>, <DisassemblerInsn "add" for 0x4002c7>, <DisassemblerInsn "ret" for 0x4002cb>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400284>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002a7>, <DisassemblerInsn "mov" for 0x4002ac>, <DisassemblerInsn "mov" for 0x4002b0>, <DisassemblerInsn "jmp" for 0x4002b5>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400222>, <DisassemblerInsn "mov" for 0x400227>, <DisassemblerInsn "mov" for 0x40022e>, <DisassemblerInsn "jmp" for 0x400233>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400290>, <DisassemblerInsn "cmp" for 0x400295>, <DisassemblerInsn "je" for 0x400299>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4002b7>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4001f4>, <DisassemblerInsn "jne" for 0x4001fa>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400286>, <DisassemblerInsn "call" for 0x40028b>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400266>, <DisassemblerInsn "test" for 0x40026a>, <DisassemblerInsn "jne" for 0x40026c>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40029b>, <DisassemblerInsn "cmp" for 0x4002a0>, <DisassemblerInsn "je" for 0x4002a5>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400270>, <DisassemblerInsn "mov" for 0x400275>, <DisassemblerInsn "cmp" for 0x400279>, <DisassemblerInsn "jne" for 0x40027e>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40023a>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400282>]'}], 'cfg_block_detailed_info': [{'block_Idx': 21, 'blockInsts': ['<jmp~~0x400284>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~qword ptr [rsp + 0x20], 0>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 27, 'blockInsts': ['<jmp~~0x400284>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}, {'block_Idx': 15, 'blockInsts': ['<xor~~eax, eax>', '<cmp~~qword ptr [rsp + 0x18], 0>', '<mov~~byte ptr [rsp + 6], al>', '<je~~0x400266>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~qword ptr [rsp + 8], rax>', '<cmp~~rax, 0>', '<setne~~al>', '<mov~~byte ptr [rsp + 6], al>', '<mov~~al, byte ptr [rsp + 6]>', '<test~~al, 1>', '<jne~~0x400270>']}, {'block_Idx': 13, 'blockInsts': ['<jmp~~0x40023e>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 26, 'blockInsts': ['<jmp~~0x400286>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<mov~~rax, qword ptr [rax + 0x78]>', '<mov~~qword ptr [rsp + 0x20], rax>', '<jmp~~0x4002c2>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x88]>', '<mov~~qword ptr [rsp + 0x20], rax>', '<jmp~~0x4002c2>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~qword ptr [rsp + 8], rax>', '<cmp~~rax, 0>', '<je~~0x4002b9>']}, {'block_Idx': 34, 'blockInsts': ['<jmp~~0x400286>']}, {'block_Idx': 9, 'blockInsts': ['<cmp~~qword ptr [rsp + 0x18], 0>', '<jne~~0x40023c>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~al, byte ptr [rsp + 6]>', '<test~~al, 1>', '<jne~~0x400270>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<cmp~~qword ptr [rax + 0x78], 0>', '<je~~0x4002b7>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<mov~~rax, qword ptr [rax + 0x78]>', '<cmp~~rax, qword ptr [rsp + 0x18]>', '<jne~~0x400282>']}, {'block_Idx': 19, 'blockInsts': ['<jmp~~0x40023c>']}, {'block_Idx': 28, 'blockInsts': ['<jmp~~0x40023e>']}], 'cfg_edge_info': [(25, 29), (18, 23), (26, 30), (31, 32), (23, 22), (28, 15), (17, 21), (15, 17), (33, 35), (35, 29), (23, 21), (34, 30), (22, 28), (9, 13), (13, 15), (33, 34), (21, 26), (22, 27), (31, 33), (19, 13), (17, 22), (27, 26), (30, 31), (15, 18)]}]}
{'format_child_next': [4194584, 4194596, 4194615, 4194627, 4194643, 4194659, 4194668], 'format_child_class_next': [4194876, 4194878, 4194892, 4194902, 4194918, 4194926, 4194928, 4194944, 4194946, 4194948, 4194950, 4194960, 4194971, 4194983, 4194999, 4195001, 4195010]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_before/O0/options.o---before
The extraction of function: format_child_next
[4194584, 4194596, 4194615, 4194627, 4194643, 4194659, 4194668]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 9 nodes and 13 edges in CFGEmulated.
It has 9 nodes and 14 edges in CDG.
It has 118 nodes and 129 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194584, 4194596, 4194615, 4194627, 4194643, 4194659, 4194668]
{4194659, 4194596, 4194627, 4194572, 4194668, 4194544, 4194643, 4194615, 4194584}
[3, 8, 2, 0, 5, 4, 6, 1, 7]
The extraction of function: format_child_class_next
[4194876, 4194878, 4194892, 4194902, 4194918, 4194926, 4194928, 4194944, 4194946, 4194948, 4194950, 4194960, 4194971, 4194983, 4194999, 4195001, 4195010]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 40 nodes and 58 edges in CFGEmulated.
It has 40 nodes and 68 edges in CDG.
It has 319 nodes and 413 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194876, 4194878, 4194892, 4194902, 4194918, 4194926, 4194928, 4194944, 4194946, 4194948, 4194950, 4194960, 4194971, 4194983, 4194999, 4195001, 4195010]
{4194944, 4194688, 4194946, 4194948, 4194950, 4194824, 4194960, 4194835, 4194971, 4194715, 4194850, 4194983, 4194729, 4194739, 4194999, 4194872, 4195001, 4194874, 4194876, 4194878, 4195010, 4194892, 4194765, 4194902, 4194788, 4194918, 4194796, 4194926, 4194928, 4194804, 4194812, 4194814}
[37, 39, 11, 25, 0, 14, 26, 29, 16, 1, 19, 32, 12, 24, 18, 30, 7, 15, 10, 9, 27, 8, 4, 28, 38, 13, 21, 35, 6, 22, 36, 20, 31, 3, 33, 2]
The execution time of patched slicing information extraction via angr: 0:00:02.470991
{'format_child_next': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400118>, <DisassemblerInsn "cmp" for 0x40011d>, <DisassemblerInsn "je" for 0x400122>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40016c>, <DisassemblerInsn "ret" for 0x400171>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400163>, <DisassemblerInsn "mov" for 0x40016c>, <DisassemblerInsn "ret" for 0x400171>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000f0>, <DisassemblerInsn "mov" for 0x4000f5>, <DisassemblerInsn "mov" for 0x4000fa>, <DisassemblerInsn "mov" for 0x4000ff>, <DisassemblerInsn "cmp" for 0x400104>, <DisassemblerInsn "jne" for 0x40010a>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400124>, <DisassemblerInsn "mov" for 0x400129>, <DisassemblerInsn "cmp" for 0x40012d>, <DisassemblerInsn "jne" for 0x400135>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400137>, <DisassemblerInsn "cmp" for 0x40013c>, <DisassemblerInsn "je" for 0x400141>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400143>, <DisassemblerInsn "mov" for 0x400148>, <DisassemblerInsn "cmp" for 0x40014c>, <DisassemblerInsn "je" for 0x400151>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40010c>, <DisassemblerInsn "cmp" for 0x400111>, <DisassemblerInsn "je" for 0x400116>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400153>, <DisassemblerInsn "mov" for 0x400158>, <DisassemblerInsn "mov" for 0x40015c>, <DisassemblerInsn "jmp" for 0x400161>]'}], 'cfg_block_detailed_info': [{'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<cmp~~qword ptr [rax + 8], 0>', '<je~~0x400137>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 8]>', '<ret~~>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~qword ptr [rsp - 8], 0>', '<mov~~rax, qword ptr [rsp - 8]>', '<ret~~>']}, {'block_Idx': 0, 'blockInsts': ['<mov~~qword ptr [rsp - 0x10], rdi>', '<mov~~qword ptr [rsp - 0x18], rsi>', '<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~qword ptr [rsp - 0x20], rax>', '<cmp~~qword ptr [rsp - 0x18], 0>', '<jne~~0x400163>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~qword ptr [rax + 0x88], 0>', '<jne~~0x400153>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<cmp~~qword ptr [rax + 0x10], 0>', '<je~~0x400163>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<cmp~~qword ptr [rax + 0x78], 0>', '<je~~0x400163>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<cmp~~qword ptr [rax + 0x18], 0>', '<je~~0x400163>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp - 8], rax>', '<jmp~~0x40016c>']}], 'cfg_edge_info': [(0, 1), (6, 2), (1, 2), (3, 4), (5, 4), (4, 6), (4, 2), (5, 7), (6, 7), (0, 2), (7, 8), (1, 3), (3, 5)], 'cdg_edge_info': [(0, 1), (3, 8), (1, 2), (6, 2), (3, 4), (3, 7), (5, 4), (4, 6), (6, 8), (4, 2), (6, 7), (0, 2), (1, 3), (3, 5)], 'ddg_edge_info': [(0, 1), (0, 7), (0, 4), (0, 3), (0, 6), (0, 2), (1, 7), (0, 5), (0, 8), (2, 8)]}], 'format_child_class_next': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40029b>, <DisassemblerInsn "cmp" for 0x4002a0>, <DisassemblerInsn "je" for 0x4002a5>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002a7>, <DisassemblerInsn "mov" for 0x4002ac>, <DisassemblerInsn "mov" for 0x4002b0>, <DisassemblerInsn "jmp" for 0x4002b5>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4001ec>, <DisassemblerInsn "jne" for 0x4001f2>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400213>, <DisassemblerInsn "cmp" for 0x400218>, <DisassemblerInsn "je" for 0x400220>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400180>, <DisassemblerInsn "mov" for 0x400184>, <DisassemblerInsn "mov" for 0x400189>, <DisassemblerInsn "mov" for 0x400192>, <DisassemblerInsn "xor" for 0x40019b>, <DisassemblerInsn "cmp" for 0x40019d>, <DisassemblerInsn "mov" for 0x4001a3>, <DisassemblerInsn "je" for 0x4001a7>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40023c>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400284>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400256>, <DisassemblerInsn "cmp" for 0x40025b>, <DisassemblerInsn "setne" for 0x40025f>, <DisassemblerInsn "mov" for 0x400262>, <DisassemblerInsn "mov" for 0x400266>, <DisassemblerInsn "test" for 0x40026a>, <DisassemblerInsn "jne" for 0x40026c>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "xor" for 0x40023e>, <DisassemblerInsn "cmp" for 0x400240>, <DisassemblerInsn "mov" for 0x400246>, <DisassemblerInsn "je" for 0x40024a>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001c3>, <DisassemblerInsn "test" for 0x4001c7>, <DisassemblerInsn "jne" for 0x4001c9>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40024c>, <DisassemblerInsn "call" for 0x400251>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400286>, <DisassemblerInsn "call" for 0x40028b>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "xor" for 0x40019b>, <DisassemblerInsn "cmp" for 0x40019d>, <DisassemblerInsn "mov" for 0x4001a3>, <DisassemblerInsn "je" for 0x4001a7>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40023a>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400266>, <DisassemblerInsn "test" for 0x40026a>, <DisassemblerInsn "jne" for 0x40026c>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400238>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001e0>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001fe>, <DisassemblerInsn "call" for 0x400203>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4001f4>, <DisassemblerInsn "jne" for 0x4001fa>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001b3>, <DisassemblerInsn "cmp" for 0x4001b8>, <DisassemblerInsn "setne" for 0x4001bc>, <DisassemblerInsn "mov" for 0x4001bf>, <DisassemblerInsn "mov" for 0x4001c3>, <DisassemblerInsn "test" for 0x4001c7>, <DisassemblerInsn "jne" for 0x4001c9>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400280>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001e2>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001cd>, <DisassemblerInsn "mov" for 0x4001d2>, <DisassemblerInsn "cmp" for 0x4001d9>, <DisassemblerInsn "jne" for 0x4001de>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400282>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4002b7>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001fc>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40026e>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400290>, <DisassemblerInsn "cmp" for 0x400295>, <DisassemblerInsn "je" for 0x400299>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4001e4>, <DisassemblerInsn "je" for 0x4001ea>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400270>, <DisassemblerInsn "mov" for 0x400275>, <DisassemblerInsn "cmp" for 0x400279>, <DisassemblerInsn "jne" for 0x40027e>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002b9>, <DisassemblerInsn "mov" for 0x4002c2>, <DisassemblerInsn "add" for 0x4002c7>, <DisassemblerInsn "ret" for 0x4002cb>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400208>, <DisassemblerInsn "cmp" for 0x40020d>, <DisassemblerInsn "je" for 0x400211>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400222>, <DisassemblerInsn "mov" for 0x400227>, <DisassemblerInsn "mov" for 0x40022e>, <DisassemblerInsn "jmp" for 0x400233>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001cb>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002c2>, <DisassemblerInsn "add" for 0x4002c7>, <DisassemblerInsn "ret" for 0x4002cb>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a9>, <DisassemblerInsn "call" for 0x4001ae>]'}], 'cfg_block_detailed_info': [{'block_Idx': 37, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<cmp~~qword ptr [rax + 0x78], 0>', '<je~~0x4002b7>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<mov~~rax, qword ptr [rax + 0x78]>', '<mov~~qword ptr [rsp + 0x20], rax>', '<jmp~~0x4002c2>']}, {'block_Idx': 11, 'blockInsts': ['<cmp~~qword ptr [rsp + 0x10], 0>', '<jne~~0x4001fc>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~qword ptr [rax + 0x88], 0>', '<je~~0x400238>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x28>', '<mov~~qword ptr [rsp + 0x18], rdi>', '<mov~~qword ptr [rsp + 0x10], 0>', '<mov~~qword ptr [rsp + 8], 0>', '<xor~~eax, eax>', '<cmp~~qword ptr [rsp + 0x18], 0>', '<mov~~byte ptr [rsp + 7], al>', '<je~~0x4001c3>']}, {'block_Idx': 14, 'blockInsts': ['<jmp~~0x40023e>']}, {'block_Idx': 26, 'blockInsts': ['<jmp~~0x400286>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~qword ptr [rsp + 8], rax>', '<cmp~~rax, 0>', '<setne~~al>', '<mov~~byte ptr [rsp + 6], al>', '<mov~~al, byte ptr [rsp + 6]>', '<test~~al, 1>', '<jne~~0x400270>']}, {'block_Idx': 16, 'blockInsts': ['<xor~~eax, eax>', '<cmp~~qword ptr [rsp + 0x18], 0>', '<mov~~byte ptr [rsp + 6], al>', '<je~~0x400266>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~al, byte ptr [rsp + 7]>', '<test~~al, 1>', '<jne~~0x4001cd>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}, {'block_Idx': 12, 'blockInsts': ['<xor~~eax, eax>', '<cmp~~qword ptr [rsp + 0x18], 0>', '<mov~~byte ptr [rsp + 7], al>', '<je~~0x4001c3>']}, {'block_Idx': 24, 'blockInsts': ['<jmp~~0x40023c>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~al, byte ptr [rsp + 6]>', '<test~~al, 1>', '<jne~~0x400270>']}, {'block_Idx': 30, 'blockInsts': ['<jmp~~0x4001fe>']}, {'block_Idx': 7, 'blockInsts': ['<jmp~~0x4001e4>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x10]>', '<call~~0x500018>']}, {'block_Idx': 10, 'blockInsts': ['<cmp~~qword ptr [rsp + 0x18], 0>', '<jne~~0x40023c>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~qword ptr [rsp + 0x10], rax>', '<cmp~~rax, 0>', '<setne~~al>', '<mov~~byte ptr [rsp + 7], al>', '<mov~~al, byte ptr [rsp + 7]>', '<test~~al, 1>', '<jne~~0x4001cd>']}, {'block_Idx': 27, 'blockInsts': ['<jmp~~0x400284>']}, {'block_Idx': 8, 'blockInsts': ['<jmp~~0x40019b>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x88]>', '<cmp~~rax, qword ptr [rsp + 0x18]>', '<jne~~0x4001e2>']}, {'block_Idx': 28, 'blockInsts': ['<jmp~~0x40023e>']}, {'block_Idx': 38, 'blockInsts': ['<jmp~~0x400286>']}, {'block_Idx': 13, 'blockInsts': ['<jmp~~0x4001fe>']}, {'block_Idx': 21, 'blockInsts': ['<jmp~~0x400284>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~qword ptr [rsp + 8], rax>', '<cmp~~rax, 0>', '<je~~0x4002b9>']}, {'block_Idx': 6, 'blockInsts': ['<cmp~~qword ptr [rsp + 0x18], 0>', '<je~~0x4001f4>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<mov~~rax, qword ptr [rax + 0x78]>', '<cmp~~rax, qword ptr [rsp + 0x18]>', '<jne~~0x400282>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~qword ptr [rsp + 0x20], 0>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~qword ptr [rsp + 0x10], rax>', '<cmp~~rax, 0>', '<je~~0x40023a>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x88]>', '<mov~~qword ptr [rsp + 0x20], rax>', '<jmp~~0x4002c2>']}, {'block_Idx': 3, 'blockInsts': ['<jmp~~0x4001e4>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<add~~rsp, 0x28>', '<ret~~>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x10]>', '<call~~0x500018>']}], 'cfg_edge_info': [(12, 1), (35, 36), (38, 32), (14, 16), (39, 33), (0, 2), (8, 12), (30, 15), (24, 14), (37, 39), (6, 11), (16, 19), (25, 31), (15, 20), (26, 32), (18, 22), (29, 22), (20, 25), (4, 8), (3, 6), (22, 28), (9, 4), (0, 1), (11, 10), (10, 14), (11, 13), (37, 38), (19, 29), (7, 6), (12, 2), (32, 35), (16, 18), (6, 10), (18, 21), (35, 37), (25, 30), (29, 21), (4, 7), (21, 26), (20, 24), (22, 27), (9, 3), (28, 16), (31, 33), (1, 4), (10, 13), (2, 9), (27, 26), (13, 15)], 'cdg_edge_info': [(20, 14), (16, 29), (35, 36), (29, 26), (4, 12), (20, 26), (20, 32), (29, 35), (29, 32), (0, 2), (20, 35), (37, 33), (10, 15), (11, 20), (37, 39), (6, 11), (16, 19), (25, 31), (12, 9), (20, 16), (18, 22), (29, 22), (20, 25), (22, 16), (22, 28), (9, 4), (11, 10), (37, 35), (10, 14), (11, 13), (37, 38), (37, 32), (25, 15), (10, 20), (10, 26), (10, 32), (16, 21), (10, 35), (12, 2), (16, 18), (25, 33), (18, 21), (35, 37), (25, 30), (20, 24), (22, 27), (0, 9), (10, 13), (10, 16), (11, 15), (25, 20)], 'ddg_edge_info': [(32, 37), (0, 39), (16, 29), (16, 35), (35, 39), (9, 2), (29, 35), (15, 36), (29, 32), (0, 2), (39, 36), (22, 35), (9, 11), (2, 11), (0, 11), (9, 20), (9, 29), (0, 29), (35, 32), (0, 32), (2, 29), (15, 20), (12, 9), (15, 32), (2, 32), (29, 19), (29, 22), (15, 29), (20, 25), (32, 39), (32, 36), (20, 31), (4, 20), (9, 4), (2, 4), (0, 4), (0, 10), (0, 16), (37, 35), (0, 19), (2, 16), (31, 36), (2, 10), (0, 22), (2, 19), (19, 29), (15, 16), (0, 25), (0, 31), (19, 32), (15, 19), (32, 35), (15, 25), (2, 22), (15, 22), (35, 37), (0, 37), (20, 15), (15, 31), (12, 20), (0, 9), (19, 16), (4, 25), (4, 31), (9, 15), (2, 9), (0, 12), (0, 6), (0, 15), (19, 22), (2, 12), (2, 6), (2, 15), (25, 20)]}]}
{'format_child_next': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 9, 'instruction': 'movq\t-0x20(%rsp), %rax'}, {'instIndex': 10, 'instruction': 'cmpq\t$0, 8(%rax)'}, {'instIndex': 11, 'instruction': 'je\t.LBB4_4'}, {'instIndex': 12, 'instruction': 'movq\t-0x20(%rsp), %rax'}, {'instIndex': 13, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 14, 'instruction': 'cmpq\t$0, 0x88(%rax)'}, {'instIndex': 15, 'instruction': 'jne\t.LBB4_6'}, {'instIndex': 16, 'instruction': 'movq\t-0x20(%rsp), %rax'}, {'instIndex': 17, 'instruction': 'cmpq\t$0, 0x10(%rax)'}, {'instIndex': 18, 'instruction': 'je\t.LBB4_7'}, {'instIndex': 19, 'instruction': 'movq\t-0x20(%rsp), %rax'}, {'instIndex': 20, 'instruction': 'movq\t0x10(%rax), %rax'}, {'instIndex': 21, 'instruction': 'cmpq\t$0, 0x78(%rax)'}, {'instIndex': 23, 'instruction': 'movq\t-0x20(%rsp), %rax'}, {'instIndex': 24, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 25, 'instruction': 'movq\t%rax, -8(%rsp)'}, {'instIndex': 26, 'instruction': 'jmp\t.LBB4_8'}, {'instIndex': 27, 'instruction': 'movq\t$0, -8(%rsp)'}, {'instIndex': 28, 'instruction': 'movq\t-8(%rsp), %rax'}, {'instIndex': 29, 'instruction': 'retq'}]}], 'format_child_class_next': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 45, 'instruction': 'jmp\t.LBB5_17'}, {'instIndex': 46, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 47, 'instruction': 'cmpq\t$0, 0x18(%rsp)'}, {'instIndex': 48, 'instruction': 'movb\t%al, 6(%rsp)                    # 1-byte Spill'}, {'instIndex': 49, 'instruction': 'je\t.LBB5_19'}, {'instIndex': 50, 'instruction': 'movq\t8(%rsp), %rdi'}, {'instIndex': 51, 'instruction': 'callq\tav_oformat_next@PLT'}, {'instIndex': 52, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 53, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 54, 'instruction': 'setne\t%al'}, {'instIndex': 55, 'instruction': 'movb\t%al, 6(%rsp)                    # 1-byte Spill'}, {'instIndex': 57, 'instruction': 'testb\t$1, %al'}, {'instIndex': 58, 'instruction': 'jne\t.LBB5_20'}, {'instIndex': 59, 'instruction': 'jmp\t.LBB5_23'}, {'instIndex': 60, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 61, 'instruction': 'movq\t0x78(%rax), %rax'}, {'instIndex': 62, 'instruction': 'cmpq\t0x18(%rsp), %rax'}, {'instIndex': 63, 'instruction': 'jne\t.LBB5_22'}, {'instIndex': 64, 'instruction': 'jmp\t.LBB5_23'}, {'instIndex': 65, 'instruction': 'jmp\t.LBB5_17'}, {'instIndex': 66, 'instruction': 'jmp\t.LBB5_24'}, {'instIndex': 67, 'instruction': 'movq\t8(%rsp), %rdi'}, {'instIndex': 68, 'instruction': 'callq\tav_oformat_next@PLT'}, {'instIndex': 69, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 70, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 71, 'instruction': 'je\t.LBB5_28'}, {'instIndex': 72, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 73, 'instruction': 'cmpq\t$0, 0x78(%rax)'}, {'instIndex': 74, 'instruction': 'je\t.LBB5_27'}, {'instIndex': 75, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 76, 'instruction': 'movq\t0x78(%rax), %rax'}, {'instIndex': 77, 'instruction': 'movq\t%rax, 0x20(%rsp)'}, {'instIndex': 78, 'instruction': 'jmp\t.LBB5_29'}, {'instIndex': 79, 'instruction': 'jmp\t.LBB5_24'}, {'instIndex': 80, 'instruction': 'movq\t$0, 0x20(%rsp)'}, {'instIndex': 81, 'instruction': 'movq\t0x20(%rsp), %rax'}, {'instIndex': 82, 'instruction': 'addq\t$0x28, %rsp'}, {'instIndex': 83, 'instruction': 'retq'}]}]}
The case of compiler clang with optimization O1.
Patched source code file: options.c
Patched function: 1---static void *format_child_next 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_before/O1/options.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_before/O1/options.s---format_child_next---before
function id: 3
function flag: True
There are 37 instructions for function: format_child_next in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '41', 'end': 50}, 'before': {'start': '40', 'end': 45}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 13, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 14, 'instruction': 'movq\t%rax, -0x20(%rsp)                 # 8-byte Spill'}, {'instIndex': 15, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 16, 'instruction': 'je\t.LBB3_4'}, {'instIndex': 18, 'instruction': 'cmpq\t$0, 0x88(%rax)'}, {'instIndex': 19, 'instruction': 'jne\t.LBB3_6'}, {'instIndex': 21, 'instruction': 'movq\t0x10(%rax), %rcx'}, {'instIndex': 22, 'instruction': 'movq\t%rcx, -0x28(%rsp)                 # 8-byte Spill'}, {'instIndex': 23, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 24, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 25, 'instruction': 'movq\t%rax, -8(%rsp)                  # 8-byte Spill'}, {'instIndex': 26, 'instruction': 'je\t.LBB3_7'}, {'instIndex': 28, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 29, 'instruction': 'cmpq\t$0, 0x78(%rcx)'}, {'instIndex': 30, 'instruction': 'movq\t%rax, -8(%rsp)                  # 8-byte Spill'}, {'instIndex': 34, 'instruction': 'jmp\t.LBB3_7'}, {'instIndex': 36, 'instruction': 'retq'}]}]
Patched function: 1---static const AVClass *format_child_class_next 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_before/O1/options.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_before/O1/options.s---format_child_class_next---before
function id: 4
function flag: True
There are 92 instructions for function: format_child_class_next in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 78}, 'before': {'start': '59', 'end': 67}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 51, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 52, 'instruction': 'testb\t$1, %cl'}, {'instIndex': 53, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 54, 'instruction': 'movq\t%rcx, 0x18(%rsp)                  # 8-byte Spill'}, {'instIndex': 55, 'instruction': 'movq\t%rax, 0x20(%rsp)                  # 8-byte Spill'}, {'instIndex': 56, 'instruction': 'jne\t.LBB4_7'}, {'instIndex': 57, 'instruction': 'jmp\t.LBB4_9'}, {'instIndex': 59, 'instruction': 'callq\tav_oformat_next@PLT'}, {'instIndex': 60, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 61, 'instruction': 'movq\t%rcx, 0x10(%rsp)                  # 8-byte Spill'}, {'instIndex': 62, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 63, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 64, 'instruction': 'movq\t%rax, 0x20(%rsp)                  # 8-byte Spill'}, {'instIndex': 65, 'instruction': 'je\t.LBB4_9'}, {'instIndex': 68, 'instruction': 'cmpq\t%rcx, 0x78(%rax)'}, {'instIndex': 69, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 70, 'instruction': 'movq\t%rcx, 0x18(%rsp)                  # 8-byte Spill'}, {'instIndex': 71, 'instruction': 'movq\t%rax, 0x20(%rsp)                  # 8-byte Spill'}, {'instIndex': 72, 'instruction': 'jne\t.LBB4_7'}, {'instIndex': 76, 'instruction': 'callq\tav_oformat_next@PLT'}, {'instIndex': 77, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 78, 'instruction': 'movq\t%rcx, (%rsp)                    # 8-byte Spill'}, {'instIndex': 79, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 80, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 81, 'instruction': 'movq\t%rax, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 82, 'instruction': 'je\t.LBB4_12'}, {'instIndex': 84, 'instruction': 'movq\t0x78(%rcx), %rax'}, {'instIndex': 85, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 86, 'instruction': 'movq\t%rcx, 8(%rsp)                   # 8-byte Spill'}, {'instIndex': 87, 'instruction': 'movq\t%rax, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 88, 'instruction': 'je\t.LBB4_10'}, {'instIndex': 90, 'instruction': 'addq\t$0x68, %rsp'}, {'instIndex': 91, 'instruction': 'retq'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_before/O1/options.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_before/O1/options.o---before
The extraction of function: format_child_next
Analyzing the binaries to generate subCFGs from patched function ...
It has 48 nodes and 71 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 37 instructions in binary file.
[4194525, 4194545, 4194560, 4194587, 4194606, 4194618]
The extraction of function: format_child_class_next
Analyzing the binaries to generate subCFGs from patched function ...
It has 48 nodes and 71 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 92 instructions in binary file.
[4194819, 4194843, 4194845, 4194855, 4194876, 4194905, 4194915, 4194925, 4194945, 4194969]
The execution time of patched subCFG information extraction via angr: 0:00:00.198674
{'format_child_next': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400100>, <DisassemblerInsn "mov" for 0x400105>, <DisassemblerInsn "mov" for 0x400109>, <DisassemblerInsn "xor" for 0x40010e>, <DisassemblerInsn "cmp" for 0x400110>, <DisassemblerInsn "mov" for 0x400114>, <DisassemblerInsn "je" for 0x400119>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40011b>, <DisassemblerInsn "xor" for 0x400120>, <DisassemblerInsn "cmp" for 0x400122>, <DisassemblerInsn "mov" for 0x400127>, <DisassemblerInsn "je" for 0x40012c>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40013a>, <DisassemblerInsn "ret" for 0x40013f>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000f1>, <DisassemblerInsn "cmp" for 0x4000f6>, <DisassemblerInsn "jne" for 0x4000fe>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000b0>, <DisassemblerInsn "xor" for 0x4000b5>, <DisassemblerInsn "cmp" for 0x4000b7>, <DisassemblerInsn "mov" for 0x4000bb>, <DisassemblerInsn "jne" for 0x4000c0>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c2>, <DisassemblerInsn "mov" for 0x4000c7>, <DisassemblerInsn "mov" for 0x4000cb>, <DisassemblerInsn "xor" for 0x4000d0>, <DisassemblerInsn "cmp" for 0x4000d2>, <DisassemblerInsn "mov" for 0x4000d6>, <DisassemblerInsn "je" for 0x4000db>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000dd>, <DisassemblerInsn "mov" for 0x4000e2>, <DisassemblerInsn "mov" for 0x4000e6>, <DisassemblerInsn "cmp" for 0x4000eb>, <DisassemblerInsn "je" for 0x4000ef>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40012e>, <DisassemblerInsn "mov" for 0x400133>, <DisassemblerInsn "jmp" for 0x400138>]'}], 'cfg_block_detailed_info': [{'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rcx, qword ptr [rax + 0x10]>', '<mov~~qword ptr [rsp - 0x28], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp - 8], rax>', '<je~~0x40013a>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rcx, qword ptr [rsp - 0x28]>', '<xor~~eax, eax>', '<cmp~~qword ptr [rcx + 0x78], 0>', '<mov~~qword ptr [rsp - 8], rax>', '<je~~0x40013a>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 8]>', '<ret~~>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<cmp~~qword ptr [rax + 0x88], 0>', '<jne~~0x40012e>']}, {'block_Idx': 0, 'blockInsts': ['<mov~~qword ptr [rsp - 0x10], rdi>', '<xor~~eax, eax>', '<cmp~~rsi, 0>', '<mov~~qword ptr [rsp - 8], rax>', '<jne~~0x40013a>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rcx, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp - 0x18], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp - 8], rax>', '<je~~0x40013a>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~qword ptr [rsp - 0x20], rax>', '<cmp~~rax, 0>', '<je~~0x400100>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x18]>', '<mov~~qword ptr [rsp - 8], rax>', '<jmp~~0x40013a>']}], 'cfg_edge_info': [(6, 2), (1, 2), (3, 4), (5, 4), (4, 6), (5, 7), (4, 2), (6, 7), (0, 2), (7, 2), (1, 3), (3, 5)]}], 'format_child_class_next': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001d7>, <DisassemblerInsn "cmp" for 0x4001dc>, <DisassemblerInsn "je" for 0x4001e0>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400281>, <DisassemblerInsn "mov" for 0x400285>, <DisassemblerInsn "cmp" for 0x400289>, <DisassemblerInsn "mov" for 0x40028d>, <DisassemblerInsn "mov" for 0x400292>, <DisassemblerInsn "je" for 0x400297>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40021b>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400263>, <DisassemblerInsn "call" for 0x400268>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40021d>, <DisassemblerInsn "call" for 0x400222>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a9>, <DisassemblerInsn "mov" for 0x4001ad>, <DisassemblerInsn "test" for 0x4001b2>, <DisassemblerInsn "sete" for 0x4001b5>, <DisassemblerInsn "mov" for 0x4001b9>, <DisassemblerInsn "xor" for 0x4001bb>, <DisassemblerInsn "or" for 0x4001be>, <DisassemblerInsn "and" for 0x4001c1>, <DisassemblerInsn "test" for 0x4001c3>, <DisassemblerInsn "mov" for 0x4001c6>, <DisassemblerInsn "jne" for 0x4001cb>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40023c>, <DisassemblerInsn "mov" for 0x400241>, <DisassemblerInsn "cmp" for 0x400246>, <DisassemblerInsn "mov" for 0x40024a>, <DisassemblerInsn "mov" for 0x40024d>, <DisassemblerInsn "mov" for 0x400252>, <DisassemblerInsn "jne" for 0x400257>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400299>, <DisassemblerInsn "add" for 0x40029e>, <DisassemblerInsn "ret" for 0x4002a2>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400203>, <DisassemblerInsn "xor" for 0x400207>, <DisassemblerInsn "test" for 0x400209>, <DisassemblerInsn "mov" for 0x40020c>, <DisassemblerInsn "mov" for 0x40020f>, <DisassemblerInsn "mov" for 0x400214>, <DisassemblerInsn "jne" for 0x400219>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400259>, <DisassemblerInsn "mov" for 0x40025e>, <DisassemblerInsn "mov" for 0x400263>, <DisassemblerInsn "call" for 0x400268>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40026d>, <DisassemblerInsn "mov" for 0x400270>, <DisassemblerInsn "xor" for 0x400274>, <DisassemblerInsn "cmp" for 0x400276>, <DisassemblerInsn "mov" for 0x40027a>, <DisassemblerInsn "je" for 0x40027f>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001fe>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400227>, <DisassemblerInsn "mov" for 0x40022a>, <DisassemblerInsn "xor" for 0x40022f>, <DisassemblerInsn "cmp" for 0x400231>, <DisassemblerInsn "mov" for 0x400235>, <DisassemblerInsn "je" for 0x40023a>]'}], 'cfg_block_detailed_info': [{'block_Idx': 8, 'blockInsts': ['<mov~~qword ptr [rsp + 0x30], rax>', '<cmp~~rax, 0>', '<je~~0x400203>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rcx, qword ptr [rsp]>', '<mov~~rax, qword ptr [rcx + 0x78]>', '<cmp~~rax, 0>', '<mov~~qword ptr [rsp + 8], rcx>', '<mov~~qword ptr [rsp + 0x28], rax>', '<je~~0x400263>']}, {'block_Idx': 9, 'blockInsts': ['<jmp~~0x400259>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x18]>', '<call~~0x500020>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x57]>', '<mov~~rax, qword ptr [rsp + 0x60]>', '<test~~rax, rax>', '<sete~~sil>', '<mov~~dl, cl>', '<xor~~dl, 1>', '<or~~dl, sil>', '<and~~cl, dl>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x38], rax>', '<jne~~0x400203>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x48]>', '<cmp~~qword ptr [rax + 0x78], rcx>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x18], rcx>', '<mov~~qword ptr [rsp + 0x20], rax>', '<jne~~0x40021d>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<add~~rsp, 0x68>', '<ret~~>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x57]>', '<xor~~eax, eax>', '<test~~cl, 1>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x18], rcx>', '<mov~~qword ptr [rsp + 0x20], rax>', '<jne~~0x40021d>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~qword ptr [rsp], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp + 0x28], rax>', '<je~~0x400299>']}, {'block_Idx': 14, 'blockInsts': ['<jmp~~0x400299>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x10], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp + 0x20], rax>', '<je~~0x400259>']}], 'cfg_edge_info': [(18, 17), (16, 10), (14, 17), (12, 15), (15, 17), (9, 12), (13, 16), (10, 13), (16, 12), (18, 19), (15, 18), (6, 10), (8, 6), (3, 6), (13, 12), (19, 15), (6, 9)]}]}
{'format_child_next': [4194525, 4194545, 4194560, 4194587, 4194606, 4194618], 'format_child_class_next': [4194819, 4194843, 4194845, 4194855, 4194876, 4194905, 4194915, 4194925, 4194945, 4194969]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_before/O1/options.o---before
The extraction of function: format_child_next
[4194525, 4194545, 4194560, 4194587, 4194606, 4194618]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 8 nodes and 13 edges in CFGEmulated.
It has 8 nodes and 9 edges in CDG.
It has 106 nodes and 119 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194525, 4194545, 4194560, 4194587, 4194606, 4194618]
{4194560, 4194498, 4194606, 4194480, 4194545, 4194618, 4194587, 4194525}
[5, 2, 7, 6, 4, 3, 1, 0]
The extraction of function: format_child_class_next
[4194819, 4194843, 4194845, 4194855, 4194876, 4194905, 4194915, 4194925, 4194945, 4194969]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 25 nodes and 40 edges in CFGEmulated.
It has 24 nodes and 36 edges in CDG.
It has 270 nodes and 339 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194819, 4194843, 4194845, 4194855, 4194876, 4194905, 4194915, 4194925, 4194945, 4194969]
{4194945, 4194819, 4194697, 4194969, 4194843, 4194845, 4194855, 4194729, 4194876, 4194624, 4194765, 4194775, 4194905, 4194786, 4194915, 4194666, 4194925, 4194676, 4194814}
[17, 13, 6, 22, 18, 3, 0, 19, 11, 12, 10, 9, 23, 5, 20, 7, 21, 15, 2, 1]
The execution time of patched slicing information extraction via angr: 0:00:02.033483
{'format_child_next': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000f1>, <DisassemblerInsn "cmp" for 0x4000f6>, <DisassemblerInsn "jne" for 0x4000fe>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40013a>, <DisassemblerInsn "ret" for 0x40013f>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40012e>, <DisassemblerInsn "mov" for 0x400133>, <DisassemblerInsn "jmp" for 0x400138>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40011b>, <DisassemblerInsn "xor" for 0x400120>, <DisassemblerInsn "cmp" for 0x400122>, <DisassemblerInsn "mov" for 0x400127>, <DisassemblerInsn "je" for 0x40012c>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400100>, <DisassemblerInsn "mov" for 0x400105>, <DisassemblerInsn "mov" for 0x400109>, <DisassemblerInsn "xor" for 0x40010e>, <DisassemblerInsn "cmp" for 0x400110>, <DisassemblerInsn "mov" for 0x400114>, <DisassemblerInsn "je" for 0x400119>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000dd>, <DisassemblerInsn "mov" for 0x4000e2>, <DisassemblerInsn "mov" for 0x4000e6>, <DisassemblerInsn "cmp" for 0x4000eb>, <DisassemblerInsn "je" for 0x4000ef>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c2>, <DisassemblerInsn "mov" for 0x4000c7>, <DisassemblerInsn "mov" for 0x4000cb>, <DisassemblerInsn "xor" for 0x4000d0>, <DisassemblerInsn "cmp" for 0x4000d2>, <DisassemblerInsn "mov" for 0x4000d6>, <DisassemblerInsn "je" for 0x4000db>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000b0>, <DisassemblerInsn "xor" for 0x4000b5>, <DisassemblerInsn "cmp" for 0x4000b7>, <DisassemblerInsn "mov" for 0x4000bb>, <DisassemblerInsn "jne" for 0x4000c0>]'}], 'cfg_block_detailed_info': [{'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<cmp~~qword ptr [rax + 0x88], 0>', '<jne~~0x40012e>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 8]>', '<ret~~>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x18]>', '<mov~~qword ptr [rsp - 8], rax>', '<jmp~~0x40013a>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rcx, qword ptr [rsp - 0x28]>', '<xor~~eax, eax>', '<cmp~~qword ptr [rcx + 0x78], 0>', '<mov~~qword ptr [rsp - 8], rax>', '<je~~0x40013a>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rcx, qword ptr [rax + 0x10]>', '<mov~~qword ptr [rsp - 0x28], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp - 8], rax>', '<je~~0x40013a>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~qword ptr [rsp - 0x20], rax>', '<cmp~~rax, 0>', '<je~~0x400100>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rcx, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp - 0x18], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp - 8], rax>', '<je~~0x40013a>']}, {'block_Idx': 0, 'blockInsts': ['<mov~~qword ptr [rsp - 0x10], rdi>', '<xor~~eax, eax>', '<cmp~~rsi, 0>', '<mov~~qword ptr [rsp - 8], rax>', '<jne~~0x40013a>']}], 'cfg_edge_info': [(0, 1), (6, 2), (1, 2), (3, 4), (5, 4), (4, 6), (4, 2), (5, 7), (6, 7), (0, 2), (7, 2), (1, 3), (3, 5)], 'cdg_edge_info': [(0, 1), (5, 4), (4, 6), (5, 7), (1, 4), (6, 7), (3, 2), (1, 3), (3, 5)], 'ddg_edge_info': [(0, 1), (0, 7), (6, 2), (1, 2), (0, 4), (0, 3), (4, 6), (4, 2), (0, 6), (1, 7), (0, 2), (7, 2), (0, 5), (3, 5)]}], 'format_child_class_next': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400227>, <DisassemblerInsn "mov" for 0x40022a>, <DisassemblerInsn "xor" for 0x40022f>, <DisassemblerInsn "cmp" for 0x400231>, <DisassemblerInsn "mov" for 0x400235>, <DisassemblerInsn "je" for 0x40023a>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400259>, <DisassemblerInsn "mov" for 0x40025e>, <DisassemblerInsn "mov" for 0x400263>, <DisassemblerInsn "call" for 0x400268>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400203>, <DisassemblerInsn "xor" for 0x400207>, <DisassemblerInsn "test" for 0x400209>, <DisassemblerInsn "mov" for 0x40020c>, <DisassemblerInsn "mov" for 0x40020f>, <DisassemblerInsn "mov" for 0x400214>, <DisassemblerInsn "jne" for 0x400219>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400281>, <DisassemblerInsn "mov" for 0x400285>, <DisassemblerInsn "cmp" for 0x400289>, <DisassemblerInsn "mov" for 0x40028d>, <DisassemblerInsn "mov" for 0x400292>, <DisassemblerInsn "je" for 0x400297>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001fe>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a9>, <DisassemblerInsn "mov" for 0x4001ad>, <DisassemblerInsn "test" for 0x4001b2>, <DisassemblerInsn "sete" for 0x4001b5>, <DisassemblerInsn "mov" for 0x4001b9>, <DisassemblerInsn "xor" for 0x4001bb>, <DisassemblerInsn "or" for 0x4001be>, <DisassemblerInsn "and" for 0x4001c1>, <DisassemblerInsn "test" for 0x4001c3>, <DisassemblerInsn "mov" for 0x4001c6>, <DisassemblerInsn "jne" for 0x4001cb>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400140>, <DisassemblerInsn "mov" for 0x400144>, <DisassemblerInsn "cmp" for 0x400149>, <DisassemblerInsn "setne" for 0x40014d>, <DisassemblerInsn "mov" for 0x400150>, <DisassemblerInsn "xor" for 0x400154>, <DisassemblerInsn "test" for 0x400156>, <DisassemblerInsn "mov" for 0x400159>, <DisassemblerInsn "mov" for 0x40015c>, <DisassemblerInsn "mov" for 0x400161>, <DisassemblerInsn "jne" for 0x400166>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40026d>, <DisassemblerInsn "mov" for 0x400270>, <DisassemblerInsn "xor" for 0x400274>, <DisassemblerInsn "cmp" for 0x400276>, <DisassemblerInsn "mov" for 0x40027a>, <DisassemblerInsn "je" for 0x40027f>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400189>, <DisassemblerInsn "mov" for 0x40018e>, <DisassemblerInsn "cmp" for 0x400193>, <DisassemblerInsn "mov" for 0x40019a>, <DisassemblerInsn "mov" for 0x40019d>, <DisassemblerInsn "mov" for 0x4001a2>, <DisassemblerInsn "jne" for 0x4001a7>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001d7>, <DisassemblerInsn "cmp" for 0x4001dc>, <DisassemblerInsn "je" for 0x4001e0>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40021d>, <DisassemblerInsn "call" for 0x400222>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40021b>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400263>, <DisassemblerInsn "call" for 0x400268>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001cd>, <DisassemblerInsn "call" for 0x4001d2>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40023c>, <DisassemblerInsn "mov" for 0x400241>, <DisassemblerInsn "cmp" for 0x400246>, <DisassemblerInsn "mov" for 0x40024a>, <DisassemblerInsn "mov" for 0x40024d>, <DisassemblerInsn "mov" for 0x400252>, <DisassemblerInsn "jne" for 0x400257>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400174>, <DisassemblerInsn "mov" for 0x400177>, <DisassemblerInsn "xor" for 0x40017c>, <DisassemblerInsn "cmp" for 0x40017e>, <DisassemblerInsn "mov" for 0x400182>, <DisassemblerInsn "je" for 0x400187>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400299>, <DisassemblerInsn "add" for 0x40029e>, <DisassemblerInsn "ret" for 0x4002a2>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001e2>, <DisassemblerInsn "mov" for 0x4001e7>, <DisassemblerInsn "cmp" for 0x4001ee>, <DisassemblerInsn "mov" for 0x4001f2>, <DisassemblerInsn "mov" for 0x4001f7>, <DisassemblerInsn "je" for 0x4001fc>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40016a>, <DisassemblerInsn "call" for 0x40016f>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400168>]'}], 'cfg_block_detailed_info': [{'block_Idx': 17, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x10], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp + 0x20], rax>', '<je~~0x400259>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x57]>', '<xor~~eax, eax>', '<test~~cl, 1>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x18], rcx>', '<mov~~qword ptr [rsp + 0x20], rax>', '<jne~~0x40021d>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rcx, qword ptr [rsp]>', '<mov~~rax, qword ptr [rcx + 0x78]>', '<cmp~~rax, 0>', '<mov~~qword ptr [rsp + 8], rcx>', '<mov~~qword ptr [rsp + 0x28], rax>', '<je~~0x400263>']}, {'block_Idx': 18, 'blockInsts': ['<jmp~~0x400299>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x57]>', '<mov~~rax, qword ptr [rsp + 0x60]>', '<test~~rax, rax>', '<sete~~sil>', '<mov~~dl, cl>', '<xor~~dl, 1>', '<or~~dl, sil>', '<and~~cl, dl>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x38], rax>', '<jne~~0x400203>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x68>', '<mov~~qword ptr [rsp + 0x48], rdi>', '<cmp~~rdi, 0>', '<setne~~cl>', '<mov~~byte ptr [rsp + 0x57], cl>', '<xor~~eax, eax>', '<test~~cl, 1>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x58], rcx>', '<mov~~qword ptr [rsp + 0x60], rax>', '<jne~~0x40016a>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~qword ptr [rsp], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp + 0x28], rax>', '<je~~0x400299>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rcx, qword ptr [rsp + 0x48]>', '<cmp~~qword ptr [rax + 0x88], rcx>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x58], rcx>', '<mov~~qword ptr [rsp + 0x60], rax>', '<jne~~0x40016a>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~qword ptr [rsp + 0x30], rax>', '<cmp~~rax, 0>', '<je~~0x400203>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x18]>', '<call~~0x500020>']}, {'block_Idx': 9, 'blockInsts': ['<jmp~~0x400259>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x38]>', '<call~~0x500018>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x48]>', '<cmp~~qword ptr [rax + 0x78], rcx>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x18], rcx>', '<mov~~qword ptr [rsp + 0x20], rax>', '<jne~~0x40021d>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x40], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp + 0x60], rax>', '<je~~0x4001a9>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<add~~rsp, 0x68>', '<ret~~>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rcx + 0x88]>', '<cmp~~rax, 0>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~qword ptr [rsp + 0x28], rax>', '<je~~0x4001cd>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x58]>', '<call~~0x500018>']}, {'block_Idx': 1, 'blockInsts': ['<jmp~~0x4001a9>']}], 'cfg_edge_info': [(23, 19), (22, 23), (11, 2), (0, 2), (19, 21), (1, 3), (15, 5), (20, 13), (20, 10), (12, 6), (3, 6), (12, 15), (5, 12), (0, 1), (9, 13), (17, 20), (2, 7), (10, 17), (7, 3), (13, 19), (15, 18), (6, 10), (18, 21), (3, 5), (22, 21), (11, 3), (17, 13), (19, 22), (7, 11), (6, 9)], 'cdg_edge_info': [(20, 17), (12, 13), (12, 19), (22, 23), (3, 13), (11, 2), (0, 2), (3, 19), (15, 5), (20, 10), (6, 17), (12, 6), (12, 15), (3, 6), (22, 19), (3, 12), (6, 9), (0, 7), (11, 7), (17, 20), (6, 10), (3, 5), (15, 12), (19, 22), (7, 11), (15, 18)], 'ddg_edge_info': [(15, 21), (20, 17), (23, 19), (22, 23), (5, 13), (23, 22), (11, 2), (0, 2), (5, 10), (0, 5), (2, 5), (2, 11), (19, 21), (0, 11), (15, 5), (0, 20), (13, 23), (20, 13), (20, 10), (6, 17), (5, 6), (12, 15), (23, 21), (20, 22), (22, 19), (3, 12), (5, 12), (5, 15), (5, 21), (0, 7), (11, 7), (17, 20), (2, 7), (0, 10), (0, 13), (2, 10), (10, 17), (2, 13), (7, 3), (10, 20), (13, 19), (6, 13), (6, 10), (3, 5), (22, 21), (17, 13), (11, 3), (0, 3), (10, 13), (0, 6), (7, 11), (2, 3), (2, 6), (19, 22), (11, 15), (15, 12)]}]}
{'format_child_next': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 13, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 14, 'instruction': 'movq\t%rax, -0x20(%rsp)                 # 8-byte Spill'}, {'instIndex': 15, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 16, 'instruction': 'je\t.LBB3_4'}, {'instIndex': 18, 'instruction': 'cmpq\t$0, 0x88(%rax)'}, {'instIndex': 19, 'instruction': 'jne\t.LBB3_6'}, {'instIndex': 21, 'instruction': 'movq\t0x10(%rax), %rcx'}, {'instIndex': 22, 'instruction': 'movq\t%rcx, -0x28(%rsp)                 # 8-byte Spill'}, {'instIndex': 23, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 24, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 25, 'instruction': 'movq\t%rax, -8(%rsp)                  # 8-byte Spill'}, {'instIndex': 26, 'instruction': 'je\t.LBB3_7'}, {'instIndex': 28, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 29, 'instruction': 'cmpq\t$0, 0x78(%rcx)'}, {'instIndex': 30, 'instruction': 'movq\t%rax, -8(%rsp)                  # 8-byte Spill'}, {'instIndex': 34, 'instruction': 'jmp\t.LBB3_7'}, {'instIndex': 36, 'instruction': 'retq'}]}], 'format_child_class_next': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 51, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 52, 'instruction': 'testb\t$1, %cl'}, {'instIndex': 53, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 54, 'instruction': 'movq\t%rcx, 0x18(%rsp)                  # 8-byte Spill'}, {'instIndex': 55, 'instruction': 'movq\t%rax, 0x20(%rsp)                  # 8-byte Spill'}, {'instIndex': 56, 'instruction': 'jne\t.LBB4_7'}, {'instIndex': 57, 'instruction': 'jmp\t.LBB4_9'}, {'instIndex': 59, 'instruction': 'callq\tav_oformat_next@PLT'}, {'instIndex': 60, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 61, 'instruction': 'movq\t%rcx, 0x10(%rsp)                  # 8-byte Spill'}, {'instIndex': 62, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 63, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 64, 'instruction': 'movq\t%rax, 0x20(%rsp)                  # 8-byte Spill'}, {'instIndex': 65, 'instruction': 'je\t.LBB4_9'}, {'instIndex': 68, 'instruction': 'cmpq\t%rcx, 0x78(%rax)'}, {'instIndex': 69, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 70, 'instruction': 'movq\t%rcx, 0x18(%rsp)                  # 8-byte Spill'}, {'instIndex': 71, 'instruction': 'movq\t%rax, 0x20(%rsp)                  # 8-byte Spill'}, {'instIndex': 72, 'instruction': 'jne\t.LBB4_7'}, {'instIndex': 76, 'instruction': 'callq\tav_oformat_next@PLT'}, {'instIndex': 77, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 78, 'instruction': 'movq\t%rcx, (%rsp)                    # 8-byte Spill'}, {'instIndex': 79, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 80, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 81, 'instruction': 'movq\t%rax, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 82, 'instruction': 'je\t.LBB4_12'}, {'instIndex': 84, 'instruction': 'movq\t0x78(%rcx), %rax'}, {'instIndex': 85, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 86, 'instruction': 'movq\t%rcx, 8(%rsp)                   # 8-byte Spill'}, {'instIndex': 87, 'instruction': 'movq\t%rax, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 88, 'instruction': 'je\t.LBB4_10'}, {'instIndex': 90, 'instruction': 'addq\t$0x68, %rsp'}, {'instIndex': 91, 'instruction': 'retq'}]}]}
The case of compiler clang with optimization O2.
Patched source code file: options.c
Patched function: 1---static void *format_child_next 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_before/O2/options.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_before/O2/options.s---format_child_next---before
function id: 3
function flag: True
There are 37 instructions for function: format_child_next in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '41', 'end': 50}, 'before': {'start': '40', 'end': 45}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 13, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 14, 'instruction': 'movq\t%rax, -0x20(%rsp)                 # 8-byte Spill'}, {'instIndex': 15, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 16, 'instruction': 'je\t.LBB3_4'}, {'instIndex': 18, 'instruction': 'cmpq\t$0, 0x88(%rax)'}, {'instIndex': 19, 'instruction': 'jne\t.LBB3_6'}, {'instIndex': 21, 'instruction': 'movq\t0x10(%rax), %rcx'}, {'instIndex': 22, 'instruction': 'movq\t%rcx, -0x28(%rsp)                 # 8-byte Spill'}, {'instIndex': 23, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 24, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 25, 'instruction': 'movq\t%rax, -8(%rsp)                  # 8-byte Spill'}, {'instIndex': 26, 'instruction': 'je\t.LBB3_7'}, {'instIndex': 28, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 29, 'instruction': 'cmpq\t$0, 0x78(%rcx)'}, {'instIndex': 30, 'instruction': 'movq\t%rax, -8(%rsp)                  # 8-byte Spill'}, {'instIndex': 34, 'instruction': 'jmp\t.LBB3_7'}, {'instIndex': 36, 'instruction': 'retq'}]}]
Patched function: 1---static const AVClass *format_child_class_next 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_before/O2/options.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_before/O2/options.s---format_child_class_next---before
function id: 4
function flag: True
There are 89 instructions for function: format_child_class_next in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 78}, 'before': {'start': '59', 'end': 67}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 48, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 49, 'instruction': 'testb\t$1, %cl'}, {'instIndex': 50, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 51, 'instruction': 'movq\t%rcx, 0x18(%rsp)                  # 8-byte Spill'}, {'instIndex': 52, 'instruction': 'movq\t%rax, 0x20(%rsp)                  # 8-byte Spill'}, {'instIndex': 53, 'instruction': 'jne\t.LBB4_8'}, {'instIndex': 54, 'instruction': 'jmp\t.LBB4_10'}, {'instIndex': 56, 'instruction': 'callq\tav_oformat_next@PLT'}, {'instIndex': 57, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 58, 'instruction': 'movq\t%rcx, 0x10(%rsp)                  # 8-byte Spill'}, {'instIndex': 59, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 60, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 61, 'instruction': 'movq\t%rax, 0x20(%rsp)                  # 8-byte Spill'}, {'instIndex': 62, 'instruction': 'je\t.LBB4_10'}, {'instIndex': 65, 'instruction': 'cmpq\t%rcx, 0x78(%rax)'}, {'instIndex': 66, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 67, 'instruction': 'movq\t%rcx, 0x18(%rsp)                  # 8-byte Spill'}, {'instIndex': 68, 'instruction': 'movq\t%rax, 0x20(%rsp)                  # 8-byte Spill'}, {'instIndex': 69, 'instruction': 'jne\t.LBB4_8'}, {'instIndex': 73, 'instruction': 'callq\tav_oformat_next@PLT'}, {'instIndex': 74, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 75, 'instruction': 'movq\t%rcx, (%rsp)                    # 8-byte Spill'}, {'instIndex': 76, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 77, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 78, 'instruction': 'movq\t%rax, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 79, 'instruction': 'je\t.LBB4_13'}, {'instIndex': 81, 'instruction': 'movq\t0x78(%rcx), %rax'}, {'instIndex': 82, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 83, 'instruction': 'movq\t%rcx, 8(%rsp)                   # 8-byte Spill'}, {'instIndex': 84, 'instruction': 'movq\t%rax, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 85, 'instruction': 'je\t.LBB4_11'}, {'instIndex': 87, 'instruction': 'addq\t$0x68, %rsp'}, {'instIndex': 88, 'instruction': 'retq'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_before/O2/options.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_before/O2/options.o---before
The extraction of function: format_child_next
Analyzing the binaries to generate subCFGs from patched function ...
It has 49 nodes and 73 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 37 instructions in binary file.
[4194541, 4194561, 4194576, 4194603, 4194622, 4194634]
The extraction of function: format_child_class_next
Analyzing the binaries to generate subCFGs from patched function ...
It has 49 nodes and 73 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 89 instructions in binary file.
[4194827, 4194851, 4194853, 4194863, 4194884, 4194913, 4194923, 4194933, 4194953, 4194977]
The execution time of patched subCFG information extraction via angr: 0:00:00.214177
{'format_child_next': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40014a>, <DisassemblerInsn "ret" for 0x40014f>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000ed>, <DisassemblerInsn "mov" for 0x4000f2>, <DisassemblerInsn "mov" for 0x4000f6>, <DisassemblerInsn "cmp" for 0x4000fb>, <DisassemblerInsn "je" for 0x4000ff>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40012b>, <DisassemblerInsn "xor" for 0x400130>, <DisassemblerInsn "cmp" for 0x400132>, <DisassemblerInsn "mov" for 0x400137>, <DisassemblerInsn "je" for 0x40013c>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c0>, <DisassemblerInsn "xor" for 0x4000c5>, <DisassemblerInsn "cmp" for 0x4000c7>, <DisassemblerInsn "mov" for 0x4000cb>, <DisassemblerInsn "jne" for 0x4000d0>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400101>, <DisassemblerInsn "cmp" for 0x400106>, <DisassemblerInsn "jne" for 0x40010e>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000d2>, <DisassemblerInsn "mov" for 0x4000d7>, <DisassemblerInsn "mov" for 0x4000db>, <DisassemblerInsn "xor" for 0x4000e0>, <DisassemblerInsn "cmp" for 0x4000e2>, <DisassemblerInsn "mov" for 0x4000e6>, <DisassemblerInsn "je" for 0x4000eb>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40013e>, <DisassemblerInsn "mov" for 0x400143>, <DisassemblerInsn "jmp" for 0x400148>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400110>, <DisassemblerInsn "mov" for 0x400115>, <DisassemblerInsn "mov" for 0x400119>, <DisassemblerInsn "xor" for 0x40011e>, <DisassemblerInsn "cmp" for 0x400120>, <DisassemblerInsn "mov" for 0x400124>, <DisassemblerInsn "je" for 0x400129>]'}], 'cfg_block_detailed_info': [{'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 8]>', '<ret~~>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~qword ptr [rsp - 0x20], rax>', '<cmp~~rax, 0>', '<je~~0x400110>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rcx, qword ptr [rsp - 0x28]>', '<xor~~eax, eax>', '<cmp~~qword ptr [rcx + 0x78], 0>', '<mov~~qword ptr [rsp - 8], rax>', '<je~~0x40014a>']}, {'block_Idx': 0, 'blockInsts': ['<mov~~qword ptr [rsp - 0x10], rdi>', '<xor~~eax, eax>', '<cmp~~rsi, 0>', '<mov~~qword ptr [rsp - 8], rax>', '<jne~~0x40014a>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<cmp~~qword ptr [rax + 0x88], 0>', '<jne~~0x40013e>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rcx, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp - 0x18], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp - 8], rax>', '<je~~0x40014a>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x18]>', '<mov~~qword ptr [rsp - 8], rax>', '<jmp~~0x40014a>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rcx, qword ptr [rax + 0x10]>', '<mov~~qword ptr [rsp - 0x28], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp - 8], rax>', '<je~~0x40014a>']}], 'cfg_edge_info': [(6, 2), (1, 2), (3, 4), (5, 4), (4, 6), (5, 7), (4, 2), (6, 7), (0, 2), (7, 2), (1, 3), (3, 5)]}], 'format_child_class_next': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400261>, <DisassemblerInsn "mov" for 0x400266>, <DisassemblerInsn "mov" for 0x40026b>, <DisassemblerInsn "call" for 0x400270>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40022f>, <DisassemblerInsn "mov" for 0x400232>, <DisassemblerInsn "xor" for 0x400237>, <DisassemblerInsn "cmp" for 0x400239>, <DisassemblerInsn "mov" for 0x40023d>, <DisassemblerInsn "je" for 0x400242>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400289>, <DisassemblerInsn "mov" for 0x40028d>, <DisassemblerInsn "cmp" for 0x400291>, <DisassemblerInsn "mov" for 0x400295>, <DisassemblerInsn "mov" for 0x40029a>, <DisassemblerInsn "je" for 0x40029f>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400223>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400275>, <DisassemblerInsn "mov" for 0x400278>, <DisassemblerInsn "xor" for 0x40027c>, <DisassemblerInsn "cmp" for 0x40027e>, <DisassemblerInsn "mov" for 0x400282>, <DisassemblerInsn "je" for 0x400287>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400206>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400244>, <DisassemblerInsn "mov" for 0x400249>, <DisassemblerInsn "cmp" for 0x40024e>, <DisassemblerInsn "mov" for 0x400252>, <DisassemblerInsn "mov" for 0x400255>, <DisassemblerInsn "mov" for 0x40025a>, <DisassemblerInsn "jne" for 0x40025f>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400225>, <DisassemblerInsn "call" for 0x40022a>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002a1>, <DisassemblerInsn "add" for 0x4002a6>, <DisassemblerInsn "ret" for 0x4002aa>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a7>, <DisassemblerInsn "mov" for 0x4001ac>, <DisassemblerInsn "test" for 0x4001b0>, <DisassemblerInsn "sete" for 0x4001b3>, <DisassemblerInsn "mov" for 0x4001b7>, <DisassemblerInsn "xor" for 0x4001b9>, <DisassemblerInsn "or" for 0x4001bc>, <DisassemblerInsn "and" for 0x4001bf>, <DisassemblerInsn "test" for 0x4001c1>, <DisassemblerInsn "mov" for 0x4001c4>, <DisassemblerInsn "jne" for 0x4001c9>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40020b>, <DisassemblerInsn "xor" for 0x40020f>, <DisassemblerInsn "test" for 0x400211>, <DisassemblerInsn "mov" for 0x400214>, <DisassemblerInsn "mov" for 0x400217>, <DisassemblerInsn "mov" for 0x40021c>, <DisassemblerInsn "jne" for 0x400221>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001df>, <DisassemblerInsn "cmp" for 0x4001e4>, <DisassemblerInsn "je" for 0x4001e8>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40026b>, <DisassemblerInsn "call" for 0x400270>]'}], 'cfg_block_detailed_info': [{'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x10], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp + 0x20], rax>', '<je~~0x400261>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rcx, qword ptr [rsp]>', '<mov~~rax, qword ptr [rcx + 0x78]>', '<cmp~~rax, 0>', '<mov~~qword ptr [rsp + 8], rcx>', '<mov~~qword ptr [rsp + 0x28], rax>', '<je~~0x40026b>']}, {'block_Idx': 10, 'blockInsts': ['<jmp~~0x400261>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~qword ptr [rsp], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp + 0x28], rax>', '<je~~0x4002a1>']}, {'block_Idx': 13, 'blockInsts': ['<jmp~~0x4002a1>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x48]>', '<cmp~~qword ptr [rax + 0x78], rcx>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x18], rcx>', '<mov~~qword ptr [rsp + 0x20], rax>', '<jne~~0x400225>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x18]>', '<call~~0x500020>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<add~~rsp, 0x68>', '<ret~~>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~cl, byte ptr [rsp + 0x57]>', '<test~~rax, rax>', '<sete~~sil>', '<mov~~dl, cl>', '<xor~~dl, 1>', '<or~~dl, sil>', '<and~~cl, dl>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x60], rax>', '<jne~~0x40020b>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x57]>', '<xor~~eax, eax>', '<test~~cl, 1>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x18], rcx>', '<mov~~qword ptr [rsp + 0x20], rax>', '<jne~~0x400225>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~qword ptr [rsp + 0x30], rax>', '<cmp~~rax, 0>', '<je~~0x40020b>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}], 'cfg_edge_info': [(15, 14), (10, 14), (5, 8), (14, 17), (6, 8), (20, 17), (8, 10), (19, 20), (17, 16), (17, 19), (19, 16), (13, 16), (11, 15), (18, 11), (15, 18), (8, 11), (18, 14)]}]}
{'format_child_next': [4194541, 4194561, 4194576, 4194603, 4194622, 4194634], 'format_child_class_next': [4194827, 4194851, 4194853, 4194863, 4194884, 4194913, 4194923, 4194933, 4194953, 4194977]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_before/O2/options.o---before
The extraction of function: format_child_next
[4194541, 4194561, 4194576, 4194603, 4194622, 4194634]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 8 nodes and 13 edges in CFGEmulated.
It has 8 nodes and 9 edges in CDG.
It has 106 nodes and 119 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194541, 4194561, 4194576, 4194603, 4194622, 4194634]
{4194496, 4194561, 4194634, 4194603, 4194541, 4194576, 4194514, 4194622}
[6, 7, 2, 4, 1, 3, 5, 0]
The extraction of function: format_child_class_next
[4194827, 4194851, 4194853, 4194863, 4194884, 4194913, 4194923, 4194933, 4194953, 4194977]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 27 nodes and 43 edges in CFGEmulated.
It has 26 nodes and 40 edges in CDG.
It has 278 nodes and 348 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194827, 4194851, 4194853, 4194863, 4194884, 4194913, 4194923, 4194933, 4194953, 4194977]
{4194692, 4194822, 4194953, 4194827, 4194977, 4194851, 4194853, 4194727, 4194863, 4194884, 4194763, 4194640, 4194773, 4194783, 4194913, 4194794, 4194923, 4194933, 4194680, 4194682}
[15, 12, 19, 24, 21, 0, 8, 22, 7, 13, 11, 10, 1, 6, 2, 9, 25, 14, 16, 3, 23]
The execution time of patched slicing information extraction via angr: 0:00:02.208610
{'format_child_next': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40012b>, <DisassemblerInsn "xor" for 0x400130>, <DisassemblerInsn "cmp" for 0x400132>, <DisassemblerInsn "mov" for 0x400137>, <DisassemblerInsn "je" for 0x40013c>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40013e>, <DisassemblerInsn "mov" for 0x400143>, <DisassemblerInsn "jmp" for 0x400148>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40014a>, <DisassemblerInsn "ret" for 0x40014f>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400110>, <DisassemblerInsn "mov" for 0x400115>, <DisassemblerInsn "mov" for 0x400119>, <DisassemblerInsn "xor" for 0x40011e>, <DisassemblerInsn "cmp" for 0x400120>, <DisassemblerInsn "mov" for 0x400124>, <DisassemblerInsn "je" for 0x400129>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000d2>, <DisassemblerInsn "mov" for 0x4000d7>, <DisassemblerInsn "mov" for 0x4000db>, <DisassemblerInsn "xor" for 0x4000e0>, <DisassemblerInsn "cmp" for 0x4000e2>, <DisassemblerInsn "mov" for 0x4000e6>, <DisassemblerInsn "je" for 0x4000eb>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000ed>, <DisassemblerInsn "mov" for 0x4000f2>, <DisassemblerInsn "mov" for 0x4000f6>, <DisassemblerInsn "cmp" for 0x4000fb>, <DisassemblerInsn "je" for 0x4000ff>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400101>, <DisassemblerInsn "cmp" for 0x400106>, <DisassemblerInsn "jne" for 0x40010e>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c0>, <DisassemblerInsn "xor" for 0x4000c5>, <DisassemblerInsn "cmp" for 0x4000c7>, <DisassemblerInsn "mov" for 0x4000cb>, <DisassemblerInsn "jne" for 0x4000d0>]'}], 'cfg_block_detailed_info': [{'block_Idx': 6, 'blockInsts': ['<mov~~rcx, qword ptr [rsp - 0x28]>', '<xor~~eax, eax>', '<cmp~~qword ptr [rcx + 0x78], 0>', '<mov~~qword ptr [rsp - 8], rax>', '<je~~0x40014a>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x18]>', '<mov~~qword ptr [rsp - 8], rax>', '<jmp~~0x40014a>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 8]>', '<ret~~>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rcx, qword ptr [rax + 0x10]>', '<mov~~qword ptr [rsp - 0x28], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp - 8], rax>', '<je~~0x40014a>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rcx, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp - 0x18], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp - 8], rax>', '<je~~0x40014a>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~qword ptr [rsp - 0x20], rax>', '<cmp~~rax, 0>', '<je~~0x400110>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<cmp~~qword ptr [rax + 0x88], 0>', '<jne~~0x40013e>']}, {'block_Idx': 0, 'blockInsts': ['<mov~~qword ptr [rsp - 0x10], rdi>', '<xor~~eax, eax>', '<cmp~~rsi, 0>', '<mov~~qword ptr [rsp - 8], rax>', '<jne~~0x40014a>']}], 'cfg_edge_info': [(0, 1), (6, 2), (1, 2), (3, 4), (5, 4), (4, 6), (5, 7), (4, 2), (6, 7), (0, 2), (7, 2), (1, 3), (3, 5)], 'cdg_edge_info': [(0, 1), (5, 4), (4, 6), (5, 7), (1, 4), (6, 7), (3, 2), (1, 3), (3, 5)], 'ddg_edge_info': [(0, 1), (0, 7), (6, 2), (1, 2), (0, 4), (0, 3), (4, 6), (4, 2), (0, 6), (0, 2), (1, 7), (0, 5), (7, 2), (3, 5)]}], 'format_child_class_next': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400206>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400223>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002a1>, <DisassemblerInsn "add" for 0x4002a6>, <DisassemblerInsn "ret" for 0x4002aa>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400289>, <DisassemblerInsn "mov" for 0x40028d>, <DisassemblerInsn "cmp" for 0x400291>, <DisassemblerInsn "mov" for 0x400295>, <DisassemblerInsn "mov" for 0x40029a>, <DisassemblerInsn "je" for 0x40029f>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40022f>, <DisassemblerInsn "mov" for 0x400232>, <DisassemblerInsn "xor" for 0x400237>, <DisassemblerInsn "cmp" for 0x400239>, <DisassemblerInsn "mov" for 0x40023d>, <DisassemblerInsn "je" for 0x400242>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400150>, <DisassemblerInsn "mov" for 0x400154>, <DisassemblerInsn "cmp" for 0x400159>, <DisassemblerInsn "setne" for 0x40015d>, <DisassemblerInsn "mov" for 0x400160>, <DisassemblerInsn "xor" for 0x400164>, <DisassemblerInsn "test" for 0x400166>, <DisassemblerInsn "mov" for 0x400169>, <DisassemblerInsn "mov" for 0x40016c>, <DisassemblerInsn "mov" for 0x400171>, <DisassemblerInsn "jne" for 0x400176>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a7>, <DisassemblerInsn "mov" for 0x4001ac>, <DisassemblerInsn "test" for 0x4001b0>, <DisassemblerInsn "sete" for 0x4001b3>, <DisassemblerInsn "mov" for 0x4001b7>, <DisassemblerInsn "xor" for 0x4001b9>, <DisassemblerInsn "or" for 0x4001bc>, <DisassemblerInsn "and" for 0x4001bf>, <DisassemblerInsn "test" for 0x4001c1>, <DisassemblerInsn "mov" for 0x4001c4>, <DisassemblerInsn "jne" for 0x4001c9>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400275>, <DisassemblerInsn "mov" for 0x400278>, <DisassemblerInsn "xor" for 0x40027c>, <DisassemblerInsn "cmp" for 0x40027e>, <DisassemblerInsn "mov" for 0x400282>, <DisassemblerInsn "je" for 0x400287>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001df>, <DisassemblerInsn "cmp" for 0x4001e4>, <DisassemblerInsn "je" for 0x4001e8>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400225>, <DisassemblerInsn "call" for 0x40022a>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001ea>, <DisassemblerInsn "mov" for 0x4001ef>, <DisassemblerInsn "cmp" for 0x4001f6>, <DisassemblerInsn "mov" for 0x4001fa>, <DisassemblerInsn "mov" for 0x4001ff>, <DisassemblerInsn "je" for 0x400204>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40020b>, <DisassemblerInsn "xor" for 0x40020f>, <DisassemblerInsn "test" for 0x400211>, <DisassemblerInsn "mov" for 0x400214>, <DisassemblerInsn "mov" for 0x400217>, <DisassemblerInsn "mov" for 0x40021c>, <DisassemblerInsn "jne" for 0x400221>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400178>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400184>, <DisassemblerInsn "cmp" for 0x400189>, <DisassemblerInsn "je" for 0x40018d>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40017a>, <DisassemblerInsn "call" for 0x40017f>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40018f>, <DisassemblerInsn "mov" for 0x400194>, <DisassemblerInsn "cmp" for 0x400199>, <DisassemblerInsn "mov" for 0x4001a0>, <DisassemblerInsn "jne" for 0x4001a5>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40026b>, <DisassemblerInsn "call" for 0x400270>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001d5>, <DisassemblerInsn "call" for 0x4001da>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400261>, <DisassemblerInsn "mov" for 0x400266>, <DisassemblerInsn "mov" for 0x40026b>, <DisassemblerInsn "call" for 0x400270>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001cb>, <DisassemblerInsn "mov" for 0x4001d0>, <DisassemblerInsn "mov" for 0x4001d5>, <DisassemblerInsn "call" for 0x4001da>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400244>, <DisassemblerInsn "mov" for 0x400249>, <DisassemblerInsn "cmp" for 0x40024e>, <DisassemblerInsn "mov" for 0x400252>, <DisassemblerInsn "mov" for 0x400255>, <DisassemblerInsn "mov" for 0x40025a>, <DisassemblerInsn "jne" for 0x40025f>]'}], 'cfg_block_detailed_info': [{'block_Idx': 15, 'blockInsts': ['<jmp~~0x4002a1>']}, {'block_Idx': 12, 'blockInsts': ['<jmp~~0x400261>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<add~~rsp, 0x68>', '<ret~~>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rcx, qword ptr [rsp]>', '<mov~~rax, qword ptr [rcx + 0x78]>', '<cmp~~rax, 0>', '<mov~~qword ptr [rsp + 8], rcx>', '<mov~~qword ptr [rsp + 0x28], rax>', '<je~~0x40026b>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x10], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp + 0x20], rax>', '<je~~0x400261>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x68>', '<mov~~qword ptr [rsp + 0x48], rdi>', '<cmp~~rdi, 0>', '<setne~~cl>', '<mov~~byte ptr [rsp + 0x57], cl>', '<xor~~eax, eax>', '<test~~cl, 1>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x58], rcx>', '<mov~~qword ptr [rsp + 0x60], rax>', '<jne~~0x40017a>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~cl, byte ptr [rsp + 0x57]>', '<test~~rax, rax>', '<sete~~sil>', '<mov~~dl, cl>', '<xor~~dl, 1>', '<or~~dl, sil>', '<and~~cl, dl>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x60], rax>', '<jne~~0x40020b>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~qword ptr [rsp], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp + 0x28], rax>', '<je~~0x4002a1>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~qword ptr [rsp + 0x30], rax>', '<cmp~~rax, 0>', '<je~~0x40020b>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x18]>', '<call~~0x500020>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rcx + 0x88]>', '<cmp~~rax, 0>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~qword ptr [rsp + 0x28], rax>', '<je~~0x4001d5>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x57]>', '<xor~~eax, eax>', '<test~~cl, 1>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x18], rcx>', '<mov~~qword ptr [rsp + 0x20], rax>', '<jne~~0x400225>']}, {'block_Idx': 1, 'blockInsts': ['<jmp~~0x4001cb>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~qword ptr [rsp + 0x40], rax>', '<cmp~~rax, 0>', '<je~~0x4001a7>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x58]>', '<call~~0x500018>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rcx, qword ptr [rsp + 0x48]>', '<cmp~~qword ptr [rax + 0x88], rcx>', '<mov~~qword ptr [rsp + 0x58], rax>', '<jne~~0x40017a>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x38]>', '<call~~0x500018>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x60]>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rdi, qword ptr [rsp + 0x38]>', '<call~~0x500018>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x48]>', '<cmp~~qword ptr [rax + 0x78], rcx>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x18], rcx>', '<mov~~qword ptr [rsp + 0x20], rax>', '<jne~~0x400225>']}], 'cfg_edge_info': [(21, 16), (12, 16), (23, 16), (3, 7), (23, 13), (14, 7), (9, 2), (8, 3), (0, 2), (9, 8), (11, 14), (10, 12), (1, 3), (25, 22), (7, 10), (6, 8), (16, 22), (22, 19), (0, 1), (24, 19), (24, 25), (15, 19), (21, 23), (22, 24), (8, 10), (10, 13), (7, 11), (11, 15), (2, 6), (13, 21), (6, 9)], 'cdg_edge_info': [(23, 13), (8, 3), (0, 2), (0, 8), (11, 14), (10, 12), (10, 21), (7, 10), (7, 16), (7, 22), (23, 21), (0, 1), (0, 7), (11, 7), (24, 25), (24, 22), (21, 23), (22, 24), (8, 7), (0, 3), (8, 10), (8, 16), (10, 13), (0, 6), (11, 15), (8, 22), (7, 11)], 'ddg_edge_info': [(21, 16), (23, 16), (14, 7), (3, 7), (23, 13), (14, 10), (14, 16), (14, 13), (8, 3), (14, 19), (0, 2), (0, 8), (11, 14), (2, 8), (0, 23), (10, 21), (25, 19), (13, 23), (25, 22), (6, 8), (16, 22), (16, 25), (23, 21), (22, 19), (13, 21), (11, 7), (0, 10), (11, 19), (2, 16), (2, 10), (13, 16), (2, 13), (24, 19), (24, 25), (25, 24), (24, 22), (21, 23), (14, 11), (3, 14), (22, 24), (0, 3), (10, 13), (0, 6), (2, 3), (10, 16), (2, 6), (7, 11)]}]}
{'format_child_next': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 13, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 14, 'instruction': 'movq\t%rax, -0x20(%rsp)                 # 8-byte Spill'}, {'instIndex': 15, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 16, 'instruction': 'je\t.LBB3_4'}, {'instIndex': 18, 'instruction': 'cmpq\t$0, 0x88(%rax)'}, {'instIndex': 19, 'instruction': 'jne\t.LBB3_6'}, {'instIndex': 21, 'instruction': 'movq\t0x10(%rax), %rcx'}, {'instIndex': 22, 'instruction': 'movq\t%rcx, -0x28(%rsp)                 # 8-byte Spill'}, {'instIndex': 23, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 24, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 25, 'instruction': 'movq\t%rax, -8(%rsp)                  # 8-byte Spill'}, {'instIndex': 26, 'instruction': 'je\t.LBB3_7'}, {'instIndex': 28, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 29, 'instruction': 'cmpq\t$0, 0x78(%rcx)'}, {'instIndex': 30, 'instruction': 'movq\t%rax, -8(%rsp)                  # 8-byte Spill'}, {'instIndex': 34, 'instruction': 'jmp\t.LBB3_7'}, {'instIndex': 36, 'instruction': 'retq'}]}], 'format_child_class_next': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 48, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 49, 'instruction': 'testb\t$1, %cl'}, {'instIndex': 50, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 51, 'instruction': 'movq\t%rcx, 0x18(%rsp)                  # 8-byte Spill'}, {'instIndex': 52, 'instruction': 'movq\t%rax, 0x20(%rsp)                  # 8-byte Spill'}, {'instIndex': 53, 'instruction': 'jne\t.LBB4_8'}, {'instIndex': 54, 'instruction': 'jmp\t.LBB4_10'}, {'instIndex': 56, 'instruction': 'callq\tav_oformat_next@PLT'}, {'instIndex': 57, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 58, 'instruction': 'movq\t%rcx, 0x10(%rsp)                  # 8-byte Spill'}, {'instIndex': 59, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 60, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 61, 'instruction': 'movq\t%rax, 0x20(%rsp)                  # 8-byte Spill'}, {'instIndex': 62, 'instruction': 'je\t.LBB4_10'}, {'instIndex': 65, 'instruction': 'cmpq\t%rcx, 0x78(%rax)'}, {'instIndex': 66, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 67, 'instruction': 'movq\t%rcx, 0x18(%rsp)                  # 8-byte Spill'}, {'instIndex': 68, 'instruction': 'movq\t%rax, 0x20(%rsp)                  # 8-byte Spill'}, {'instIndex': 69, 'instruction': 'jne\t.LBB4_8'}, {'instIndex': 73, 'instruction': 'callq\tav_oformat_next@PLT'}, {'instIndex': 74, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 75, 'instruction': 'movq\t%rcx, (%rsp)                    # 8-byte Spill'}, {'instIndex': 76, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 77, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 78, 'instruction': 'movq\t%rax, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 79, 'instruction': 'je\t.LBB4_13'}, {'instIndex': 81, 'instruction': 'movq\t0x78(%rcx), %rax'}, {'instIndex': 82, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 83, 'instruction': 'movq\t%rcx, 8(%rsp)                   # 8-byte Spill'}, {'instIndex': 84, 'instruction': 'movq\t%rax, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 85, 'instruction': 'je\t.LBB4_11'}, {'instIndex': 87, 'instruction': 'addq\t$0x68, %rsp'}, {'instIndex': 88, 'instruction': 'retq'}]}]}
The case of compiler clang with optimization O3.
Patched source code file: options.c
Patched function: 1---static void *format_child_next 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_before/O3/options.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_before/O3/options.s---format_child_next---before
function id: 3
function flag: True
There are 37 instructions for function: format_child_next in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '41', 'end': 50}, 'before': {'start': '40', 'end': 45}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 13, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 14, 'instruction': 'movq\t%rax, -0x20(%rsp)                 # 8-byte Spill'}, {'instIndex': 15, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 16, 'instruction': 'je\t.LBB3_4'}, {'instIndex': 18, 'instruction': 'cmpq\t$0, 0x88(%rax)'}, {'instIndex': 19, 'instruction': 'jne\t.LBB3_6'}, {'instIndex': 21, 'instruction': 'movq\t0x10(%rax), %rcx'}, {'instIndex': 22, 'instruction': 'movq\t%rcx, -0x28(%rsp)                 # 8-byte Spill'}, {'instIndex': 23, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 24, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 25, 'instruction': 'movq\t%rax, -8(%rsp)                  # 8-byte Spill'}, {'instIndex': 26, 'instruction': 'je\t.LBB3_7'}, {'instIndex': 28, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 29, 'instruction': 'cmpq\t$0, 0x78(%rcx)'}, {'instIndex': 30, 'instruction': 'movq\t%rax, -8(%rsp)                  # 8-byte Spill'}, {'instIndex': 34, 'instruction': 'jmp\t.LBB3_7'}, {'instIndex': 36, 'instruction': 'retq'}]}]
Patched function: 1---static const AVClass *format_child_class_next 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_before/O3/options.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_before/O3/options.s---format_child_class_next---before
function id: 4
function flag: True
There are 89 instructions for function: format_child_class_next in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 78}, 'before': {'start': '59', 'end': 67}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 48, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 49, 'instruction': 'testb\t$1, %cl'}, {'instIndex': 50, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 51, 'instruction': 'movq\t%rcx, 0x18(%rsp)                  # 8-byte Spill'}, {'instIndex': 52, 'instruction': 'movq\t%rax, 0x20(%rsp)                  # 8-byte Spill'}, {'instIndex': 53, 'instruction': 'jne\t.LBB4_8'}, {'instIndex': 54, 'instruction': 'jmp\t.LBB4_10'}, {'instIndex': 56, 'instruction': 'callq\tav_oformat_next@PLT'}, {'instIndex': 57, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 58, 'instruction': 'movq\t%rcx, 0x10(%rsp)                  # 8-byte Spill'}, {'instIndex': 59, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 60, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 61, 'instruction': 'movq\t%rax, 0x20(%rsp)                  # 8-byte Spill'}, {'instIndex': 62, 'instruction': 'je\t.LBB4_10'}, {'instIndex': 65, 'instruction': 'cmpq\t%rcx, 0x78(%rax)'}, {'instIndex': 66, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 67, 'instruction': 'movq\t%rcx, 0x18(%rsp)                  # 8-byte Spill'}, {'instIndex': 68, 'instruction': 'movq\t%rax, 0x20(%rsp)                  # 8-byte Spill'}, {'instIndex': 69, 'instruction': 'jne\t.LBB4_8'}, {'instIndex': 73, 'instruction': 'callq\tav_oformat_next@PLT'}, {'instIndex': 74, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 75, 'instruction': 'movq\t%rcx, (%rsp)                    # 8-byte Spill'}, {'instIndex': 76, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 77, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 78, 'instruction': 'movq\t%rax, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 79, 'instruction': 'je\t.LBB4_13'}, {'instIndex': 81, 'instruction': 'movq\t0x78(%rcx), %rax'}, {'instIndex': 82, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 83, 'instruction': 'movq\t%rcx, 8(%rsp)                   # 8-byte Spill'}, {'instIndex': 84, 'instruction': 'movq\t%rax, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 85, 'instruction': 'je\t.LBB4_11'}, {'instIndex': 87, 'instruction': 'addq\t$0x68, %rsp'}, {'instIndex': 88, 'instruction': 'retq'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_before/O3/options.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_before/O3/options.o---before
The extraction of function: format_child_next
Analyzing the binaries to generate subCFGs from patched function ...
It has 49 nodes and 73 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 37 instructions in binary file.
[4194541, 4194561, 4194576, 4194603, 4194622, 4194634]
The extraction of function: format_child_class_next
Analyzing the binaries to generate subCFGs from patched function ...
It has 49 nodes and 73 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 89 instructions in binary file.
[4194827, 4194851, 4194853, 4194863, 4194884, 4194913, 4194923, 4194933, 4194953, 4194977]
The execution time of patched subCFG information extraction via angr: 0:00:00.198750
{'format_child_next': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40014a>, <DisassemblerInsn "ret" for 0x40014f>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000ed>, <DisassemblerInsn "mov" for 0x4000f2>, <DisassemblerInsn "mov" for 0x4000f6>, <DisassemblerInsn "cmp" for 0x4000fb>, <DisassemblerInsn "je" for 0x4000ff>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40012b>, <DisassemblerInsn "xor" for 0x400130>, <DisassemblerInsn "cmp" for 0x400132>, <DisassemblerInsn "mov" for 0x400137>, <DisassemblerInsn "je" for 0x40013c>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c0>, <DisassemblerInsn "xor" for 0x4000c5>, <DisassemblerInsn "cmp" for 0x4000c7>, <DisassemblerInsn "mov" for 0x4000cb>, <DisassemblerInsn "jne" for 0x4000d0>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400101>, <DisassemblerInsn "cmp" for 0x400106>, <DisassemblerInsn "jne" for 0x40010e>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000d2>, <DisassemblerInsn "mov" for 0x4000d7>, <DisassemblerInsn "mov" for 0x4000db>, <DisassemblerInsn "xor" for 0x4000e0>, <DisassemblerInsn "cmp" for 0x4000e2>, <DisassemblerInsn "mov" for 0x4000e6>, <DisassemblerInsn "je" for 0x4000eb>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40013e>, <DisassemblerInsn "mov" for 0x400143>, <DisassemblerInsn "jmp" for 0x400148>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400110>, <DisassemblerInsn "mov" for 0x400115>, <DisassemblerInsn "mov" for 0x400119>, <DisassemblerInsn "xor" for 0x40011e>, <DisassemblerInsn "cmp" for 0x400120>, <DisassemblerInsn "mov" for 0x400124>, <DisassemblerInsn "je" for 0x400129>]'}], 'cfg_block_detailed_info': [{'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 8]>', '<ret~~>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~qword ptr [rsp - 0x20], rax>', '<cmp~~rax, 0>', '<je~~0x400110>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rcx, qword ptr [rsp - 0x28]>', '<xor~~eax, eax>', '<cmp~~qword ptr [rcx + 0x78], 0>', '<mov~~qword ptr [rsp - 8], rax>', '<je~~0x40014a>']}, {'block_Idx': 0, 'blockInsts': ['<mov~~qword ptr [rsp - 0x10], rdi>', '<xor~~eax, eax>', '<cmp~~rsi, 0>', '<mov~~qword ptr [rsp - 8], rax>', '<jne~~0x40014a>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<cmp~~qword ptr [rax + 0x88], 0>', '<jne~~0x40013e>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rcx, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp - 0x18], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp - 8], rax>', '<je~~0x40014a>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x18]>', '<mov~~qword ptr [rsp - 8], rax>', '<jmp~~0x40014a>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rcx, qword ptr [rax + 0x10]>', '<mov~~qword ptr [rsp - 0x28], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp - 8], rax>', '<je~~0x40014a>']}], 'cfg_edge_info': [(6, 2), (1, 2), (3, 4), (5, 4), (4, 6), (5, 7), (4, 2), (6, 7), (0, 2), (7, 2), (1, 3), (3, 5)]}], 'format_child_class_next': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400261>, <DisassemblerInsn "mov" for 0x400266>, <DisassemblerInsn "mov" for 0x40026b>, <DisassemblerInsn "call" for 0x400270>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40022f>, <DisassemblerInsn "mov" for 0x400232>, <DisassemblerInsn "xor" for 0x400237>, <DisassemblerInsn "cmp" for 0x400239>, <DisassemblerInsn "mov" for 0x40023d>, <DisassemblerInsn "je" for 0x400242>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400289>, <DisassemblerInsn "mov" for 0x40028d>, <DisassemblerInsn "cmp" for 0x400291>, <DisassemblerInsn "mov" for 0x400295>, <DisassemblerInsn "mov" for 0x40029a>, <DisassemblerInsn "je" for 0x40029f>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400223>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400275>, <DisassemblerInsn "mov" for 0x400278>, <DisassemblerInsn "xor" for 0x40027c>, <DisassemblerInsn "cmp" for 0x40027e>, <DisassemblerInsn "mov" for 0x400282>, <DisassemblerInsn "je" for 0x400287>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400206>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400244>, <DisassemblerInsn "mov" for 0x400249>, <DisassemblerInsn "cmp" for 0x40024e>, <DisassemblerInsn "mov" for 0x400252>, <DisassemblerInsn "mov" for 0x400255>, <DisassemblerInsn "mov" for 0x40025a>, <DisassemblerInsn "jne" for 0x40025f>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400225>, <DisassemblerInsn "call" for 0x40022a>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002a1>, <DisassemblerInsn "add" for 0x4002a6>, <DisassemblerInsn "ret" for 0x4002aa>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a7>, <DisassemblerInsn "mov" for 0x4001ac>, <DisassemblerInsn "test" for 0x4001b0>, <DisassemblerInsn "sete" for 0x4001b3>, <DisassemblerInsn "mov" for 0x4001b7>, <DisassemblerInsn "xor" for 0x4001b9>, <DisassemblerInsn "or" for 0x4001bc>, <DisassemblerInsn "and" for 0x4001bf>, <DisassemblerInsn "test" for 0x4001c1>, <DisassemblerInsn "mov" for 0x4001c4>, <DisassemblerInsn "jne" for 0x4001c9>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40020b>, <DisassemblerInsn "xor" for 0x40020f>, <DisassemblerInsn "test" for 0x400211>, <DisassemblerInsn "mov" for 0x400214>, <DisassemblerInsn "mov" for 0x400217>, <DisassemblerInsn "mov" for 0x40021c>, <DisassemblerInsn "jne" for 0x400221>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001df>, <DisassemblerInsn "cmp" for 0x4001e4>, <DisassemblerInsn "je" for 0x4001e8>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40026b>, <DisassemblerInsn "call" for 0x400270>]'}], 'cfg_block_detailed_info': [{'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x10], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp + 0x20], rax>', '<je~~0x400261>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rcx, qword ptr [rsp]>', '<mov~~rax, qword ptr [rcx + 0x78]>', '<cmp~~rax, 0>', '<mov~~qword ptr [rsp + 8], rcx>', '<mov~~qword ptr [rsp + 0x28], rax>', '<je~~0x40026b>']}, {'block_Idx': 10, 'blockInsts': ['<jmp~~0x400261>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~qword ptr [rsp], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp + 0x28], rax>', '<je~~0x4002a1>']}, {'block_Idx': 13, 'blockInsts': ['<jmp~~0x4002a1>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x48]>', '<cmp~~qword ptr [rax + 0x78], rcx>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x18], rcx>', '<mov~~qword ptr [rsp + 0x20], rax>', '<jne~~0x400225>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x18]>', '<call~~0x500020>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<add~~rsp, 0x68>', '<ret~~>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~cl, byte ptr [rsp + 0x57]>', '<test~~rax, rax>', '<sete~~sil>', '<mov~~dl, cl>', '<xor~~dl, 1>', '<or~~dl, sil>', '<and~~cl, dl>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x60], rax>', '<jne~~0x40020b>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x57]>', '<xor~~eax, eax>', '<test~~cl, 1>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x18], rcx>', '<mov~~qword ptr [rsp + 0x20], rax>', '<jne~~0x400225>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~qword ptr [rsp + 0x30], rax>', '<cmp~~rax, 0>', '<je~~0x40020b>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}], 'cfg_edge_info': [(15, 14), (10, 14), (5, 8), (14, 17), (6, 8), (20, 17), (8, 10), (19, 20), (17, 16), (17, 19), (19, 16), (13, 16), (11, 15), (18, 11), (15, 18), (8, 11), (18, 14)]}]}
{'format_child_next': [4194541, 4194561, 4194576, 4194603, 4194622, 4194634], 'format_child_class_next': [4194827, 4194851, 4194853, 4194863, 4194884, 4194913, 4194923, 4194933, 4194953, 4194977]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_before/O3/options.o---before
The extraction of function: format_child_next
[4194541, 4194561, 4194576, 4194603, 4194622, 4194634]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 8 nodes and 13 edges in CFGEmulated.
It has 8 nodes and 9 edges in CDG.
It has 106 nodes and 119 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194541, 4194561, 4194576, 4194603, 4194622, 4194634]
{4194496, 4194561, 4194634, 4194603, 4194541, 4194576, 4194514, 4194622}
[6, 7, 2, 4, 1, 3, 5, 0]
The extraction of function: format_child_class_next
[4194827, 4194851, 4194853, 4194863, 4194884, 4194913, 4194923, 4194933, 4194953, 4194977]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 27 nodes and 43 edges in CFGEmulated.
It has 26 nodes and 40 edges in CDG.
It has 278 nodes and 348 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194827, 4194851, 4194853, 4194863, 4194884, 4194913, 4194923, 4194933, 4194953, 4194977]
{4194692, 4194822, 4194953, 4194827, 4194977, 4194851, 4194853, 4194727, 4194863, 4194884, 4194763, 4194640, 4194773, 4194783, 4194913, 4194794, 4194923, 4194933, 4194680, 4194682}
[15, 12, 19, 24, 21, 0, 8, 22, 7, 13, 11, 10, 1, 6, 2, 9, 25, 14, 16, 3, 23]
The execution time of patched slicing information extraction via angr: 0:00:02.184016
{'format_child_next': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40012b>, <DisassemblerInsn "xor" for 0x400130>, <DisassemblerInsn "cmp" for 0x400132>, <DisassemblerInsn "mov" for 0x400137>, <DisassemblerInsn "je" for 0x40013c>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40013e>, <DisassemblerInsn "mov" for 0x400143>, <DisassemblerInsn "jmp" for 0x400148>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40014a>, <DisassemblerInsn "ret" for 0x40014f>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400110>, <DisassemblerInsn "mov" for 0x400115>, <DisassemblerInsn "mov" for 0x400119>, <DisassemblerInsn "xor" for 0x40011e>, <DisassemblerInsn "cmp" for 0x400120>, <DisassemblerInsn "mov" for 0x400124>, <DisassemblerInsn "je" for 0x400129>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000d2>, <DisassemblerInsn "mov" for 0x4000d7>, <DisassemblerInsn "mov" for 0x4000db>, <DisassemblerInsn "xor" for 0x4000e0>, <DisassemblerInsn "cmp" for 0x4000e2>, <DisassemblerInsn "mov" for 0x4000e6>, <DisassemblerInsn "je" for 0x4000eb>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000ed>, <DisassemblerInsn "mov" for 0x4000f2>, <DisassemblerInsn "mov" for 0x4000f6>, <DisassemblerInsn "cmp" for 0x4000fb>, <DisassemblerInsn "je" for 0x4000ff>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400101>, <DisassemblerInsn "cmp" for 0x400106>, <DisassemblerInsn "jne" for 0x40010e>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c0>, <DisassemblerInsn "xor" for 0x4000c5>, <DisassemblerInsn "cmp" for 0x4000c7>, <DisassemblerInsn "mov" for 0x4000cb>, <DisassemblerInsn "jne" for 0x4000d0>]'}], 'cfg_block_detailed_info': [{'block_Idx': 6, 'blockInsts': ['<mov~~rcx, qword ptr [rsp - 0x28]>', '<xor~~eax, eax>', '<cmp~~qword ptr [rcx + 0x78], 0>', '<mov~~qword ptr [rsp - 8], rax>', '<je~~0x40014a>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x18]>', '<mov~~qword ptr [rsp - 8], rax>', '<jmp~~0x40014a>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 8]>', '<ret~~>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rcx, qword ptr [rax + 0x10]>', '<mov~~qword ptr [rsp - 0x28], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp - 8], rax>', '<je~~0x40014a>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rcx, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp - 0x18], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp - 8], rax>', '<je~~0x40014a>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~qword ptr [rsp - 0x20], rax>', '<cmp~~rax, 0>', '<je~~0x400110>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<cmp~~qword ptr [rax + 0x88], 0>', '<jne~~0x40013e>']}, {'block_Idx': 0, 'blockInsts': ['<mov~~qword ptr [rsp - 0x10], rdi>', '<xor~~eax, eax>', '<cmp~~rsi, 0>', '<mov~~qword ptr [rsp - 8], rax>', '<jne~~0x40014a>']}], 'cfg_edge_info': [(0, 1), (6, 2), (1, 2), (3, 4), (5, 4), (4, 6), (5, 7), (4, 2), (6, 7), (0, 2), (7, 2), (1, 3), (3, 5)], 'cdg_edge_info': [(0, 1), (5, 4), (4, 6), (5, 7), (1, 4), (6, 7), (3, 2), (1, 3), (3, 5)], 'ddg_edge_info': [(0, 1), (0, 7), (6, 2), (1, 2), (0, 4), (0, 3), (4, 6), (4, 2), (0, 6), (0, 2), (1, 7), (0, 5), (7, 2), (3, 5)]}], 'format_child_class_next': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400206>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400223>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002a1>, <DisassemblerInsn "add" for 0x4002a6>, <DisassemblerInsn "ret" for 0x4002aa>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400289>, <DisassemblerInsn "mov" for 0x40028d>, <DisassemblerInsn "cmp" for 0x400291>, <DisassemblerInsn "mov" for 0x400295>, <DisassemblerInsn "mov" for 0x40029a>, <DisassemblerInsn "je" for 0x40029f>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40022f>, <DisassemblerInsn "mov" for 0x400232>, <DisassemblerInsn "xor" for 0x400237>, <DisassemblerInsn "cmp" for 0x400239>, <DisassemblerInsn "mov" for 0x40023d>, <DisassemblerInsn "je" for 0x400242>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400150>, <DisassemblerInsn "mov" for 0x400154>, <DisassemblerInsn "cmp" for 0x400159>, <DisassemblerInsn "setne" for 0x40015d>, <DisassemblerInsn "mov" for 0x400160>, <DisassemblerInsn "xor" for 0x400164>, <DisassemblerInsn "test" for 0x400166>, <DisassemblerInsn "mov" for 0x400169>, <DisassemblerInsn "mov" for 0x40016c>, <DisassemblerInsn "mov" for 0x400171>, <DisassemblerInsn "jne" for 0x400176>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a7>, <DisassemblerInsn "mov" for 0x4001ac>, <DisassemblerInsn "test" for 0x4001b0>, <DisassemblerInsn "sete" for 0x4001b3>, <DisassemblerInsn "mov" for 0x4001b7>, <DisassemblerInsn "xor" for 0x4001b9>, <DisassemblerInsn "or" for 0x4001bc>, <DisassemblerInsn "and" for 0x4001bf>, <DisassemblerInsn "test" for 0x4001c1>, <DisassemblerInsn "mov" for 0x4001c4>, <DisassemblerInsn "jne" for 0x4001c9>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400275>, <DisassemblerInsn "mov" for 0x400278>, <DisassemblerInsn "xor" for 0x40027c>, <DisassemblerInsn "cmp" for 0x40027e>, <DisassemblerInsn "mov" for 0x400282>, <DisassemblerInsn "je" for 0x400287>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001df>, <DisassemblerInsn "cmp" for 0x4001e4>, <DisassemblerInsn "je" for 0x4001e8>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400225>, <DisassemblerInsn "call" for 0x40022a>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001ea>, <DisassemblerInsn "mov" for 0x4001ef>, <DisassemblerInsn "cmp" for 0x4001f6>, <DisassemblerInsn "mov" for 0x4001fa>, <DisassemblerInsn "mov" for 0x4001ff>, <DisassemblerInsn "je" for 0x400204>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40020b>, <DisassemblerInsn "xor" for 0x40020f>, <DisassemblerInsn "test" for 0x400211>, <DisassemblerInsn "mov" for 0x400214>, <DisassemblerInsn "mov" for 0x400217>, <DisassemblerInsn "mov" for 0x40021c>, <DisassemblerInsn "jne" for 0x400221>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400178>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400184>, <DisassemblerInsn "cmp" for 0x400189>, <DisassemblerInsn "je" for 0x40018d>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40017a>, <DisassemblerInsn "call" for 0x40017f>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40018f>, <DisassemblerInsn "mov" for 0x400194>, <DisassemblerInsn "cmp" for 0x400199>, <DisassemblerInsn "mov" for 0x4001a0>, <DisassemblerInsn "jne" for 0x4001a5>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40026b>, <DisassemblerInsn "call" for 0x400270>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001d5>, <DisassemblerInsn "call" for 0x4001da>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400261>, <DisassemblerInsn "mov" for 0x400266>, <DisassemblerInsn "mov" for 0x40026b>, <DisassemblerInsn "call" for 0x400270>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001cb>, <DisassemblerInsn "mov" for 0x4001d0>, <DisassemblerInsn "mov" for 0x4001d5>, <DisassemblerInsn "call" for 0x4001da>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400244>, <DisassemblerInsn "mov" for 0x400249>, <DisassemblerInsn "cmp" for 0x40024e>, <DisassemblerInsn "mov" for 0x400252>, <DisassemblerInsn "mov" for 0x400255>, <DisassemblerInsn "mov" for 0x40025a>, <DisassemblerInsn "jne" for 0x40025f>]'}], 'cfg_block_detailed_info': [{'block_Idx': 15, 'blockInsts': ['<jmp~~0x4002a1>']}, {'block_Idx': 12, 'blockInsts': ['<jmp~~0x400261>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<add~~rsp, 0x68>', '<ret~~>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rcx, qword ptr [rsp]>', '<mov~~rax, qword ptr [rcx + 0x78]>', '<cmp~~rax, 0>', '<mov~~qword ptr [rsp + 8], rcx>', '<mov~~qword ptr [rsp + 0x28], rax>', '<je~~0x40026b>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x10], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp + 0x20], rax>', '<je~~0x400261>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x68>', '<mov~~qword ptr [rsp + 0x48], rdi>', '<cmp~~rdi, 0>', '<setne~~cl>', '<mov~~byte ptr [rsp + 0x57], cl>', '<xor~~eax, eax>', '<test~~cl, 1>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x58], rcx>', '<mov~~qword ptr [rsp + 0x60], rax>', '<jne~~0x40017a>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~cl, byte ptr [rsp + 0x57]>', '<test~~rax, rax>', '<sete~~sil>', '<mov~~dl, cl>', '<xor~~dl, 1>', '<or~~dl, sil>', '<and~~cl, dl>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x60], rax>', '<jne~~0x40020b>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~qword ptr [rsp], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp + 0x28], rax>', '<je~~0x4002a1>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~qword ptr [rsp + 0x30], rax>', '<cmp~~rax, 0>', '<je~~0x40020b>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x18]>', '<call~~0x500020>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rcx + 0x88]>', '<cmp~~rax, 0>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~qword ptr [rsp + 0x28], rax>', '<je~~0x4001d5>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x57]>', '<xor~~eax, eax>', '<test~~cl, 1>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x18], rcx>', '<mov~~qword ptr [rsp + 0x20], rax>', '<jne~~0x400225>']}, {'block_Idx': 1, 'blockInsts': ['<jmp~~0x4001cb>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~qword ptr [rsp + 0x40], rax>', '<cmp~~rax, 0>', '<je~~0x4001a7>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x58]>', '<call~~0x500018>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rcx, qword ptr [rsp + 0x48]>', '<cmp~~qword ptr [rax + 0x88], rcx>', '<mov~~qword ptr [rsp + 0x58], rax>', '<jne~~0x40017a>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x38]>', '<call~~0x500018>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x60]>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rdi, qword ptr [rsp + 0x38]>', '<call~~0x500018>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x48]>', '<cmp~~qword ptr [rax + 0x78], rcx>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x18], rcx>', '<mov~~qword ptr [rsp + 0x20], rax>', '<jne~~0x400225>']}], 'cfg_edge_info': [(21, 16), (12, 16), (23, 16), (3, 7), (23, 13), (14, 7), (9, 2), (8, 3), (0, 2), (9, 8), (11, 14), (10, 12), (1, 3), (25, 22), (7, 10), (6, 8), (16, 22), (22, 19), (0, 1), (24, 19), (24, 25), (15, 19), (21, 23), (22, 24), (8, 10), (10, 13), (7, 11), (11, 15), (2, 6), (13, 21), (6, 9)], 'cdg_edge_info': [(23, 13), (8, 3), (0, 2), (0, 8), (11, 14), (10, 12), (10, 21), (7, 10), (7, 16), (7, 22), (23, 21), (0, 1), (0, 7), (11, 7), (24, 25), (24, 22), (21, 23), (22, 24), (8, 7), (0, 3), (8, 10), (8, 16), (10, 13), (0, 6), (11, 15), (8, 22), (7, 11)], 'ddg_edge_info': [(21, 16), (23, 16), (14, 7), (3, 7), (23, 13), (14, 10), (14, 16), (14, 13), (8, 3), (14, 19), (0, 2), (0, 8), (11, 14), (2, 8), (0, 23), (10, 21), (25, 19), (13, 23), (25, 22), (6, 8), (16, 22), (16, 25), (23, 21), (22, 19), (13, 21), (11, 7), (0, 10), (11, 19), (2, 16), (2, 10), (13, 16), (2, 13), (24, 19), (24, 25), (25, 24), (24, 22), (21, 23), (14, 11), (3, 14), (22, 24), (0, 3), (10, 13), (0, 6), (2, 3), (10, 16), (2, 6), (7, 11)]}]}
{'format_child_next': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 13, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 14, 'instruction': 'movq\t%rax, -0x20(%rsp)                 # 8-byte Spill'}, {'instIndex': 15, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 16, 'instruction': 'je\t.LBB3_4'}, {'instIndex': 18, 'instruction': 'cmpq\t$0, 0x88(%rax)'}, {'instIndex': 19, 'instruction': 'jne\t.LBB3_6'}, {'instIndex': 21, 'instruction': 'movq\t0x10(%rax), %rcx'}, {'instIndex': 22, 'instruction': 'movq\t%rcx, -0x28(%rsp)                 # 8-byte Spill'}, {'instIndex': 23, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 24, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 25, 'instruction': 'movq\t%rax, -8(%rsp)                  # 8-byte Spill'}, {'instIndex': 26, 'instruction': 'je\t.LBB3_7'}, {'instIndex': 28, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 29, 'instruction': 'cmpq\t$0, 0x78(%rcx)'}, {'instIndex': 30, 'instruction': 'movq\t%rax, -8(%rsp)                  # 8-byte Spill'}, {'instIndex': 34, 'instruction': 'jmp\t.LBB3_7'}, {'instIndex': 36, 'instruction': 'retq'}]}], 'format_child_class_next': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 48, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 49, 'instruction': 'testb\t$1, %cl'}, {'instIndex': 50, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 51, 'instruction': 'movq\t%rcx, 0x18(%rsp)                  # 8-byte Spill'}, {'instIndex': 52, 'instruction': 'movq\t%rax, 0x20(%rsp)                  # 8-byte Spill'}, {'instIndex': 53, 'instruction': 'jne\t.LBB4_8'}, {'instIndex': 54, 'instruction': 'jmp\t.LBB4_10'}, {'instIndex': 56, 'instruction': 'callq\tav_oformat_next@PLT'}, {'instIndex': 57, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 58, 'instruction': 'movq\t%rcx, 0x10(%rsp)                  # 8-byte Spill'}, {'instIndex': 59, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 60, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 61, 'instruction': 'movq\t%rax, 0x20(%rsp)                  # 8-byte Spill'}, {'instIndex': 62, 'instruction': 'je\t.LBB4_10'}, {'instIndex': 65, 'instruction': 'cmpq\t%rcx, 0x78(%rax)'}, {'instIndex': 66, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 67, 'instruction': 'movq\t%rcx, 0x18(%rsp)                  # 8-byte Spill'}, {'instIndex': 68, 'instruction': 'movq\t%rax, 0x20(%rsp)                  # 8-byte Spill'}, {'instIndex': 69, 'instruction': 'jne\t.LBB4_8'}, {'instIndex': 73, 'instruction': 'callq\tav_oformat_next@PLT'}, {'instIndex': 74, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 75, 'instruction': 'movq\t%rcx, (%rsp)                    # 8-byte Spill'}, {'instIndex': 76, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 77, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 78, 'instruction': 'movq\t%rax, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 79, 'instruction': 'je\t.LBB4_13'}, {'instIndex': 81, 'instruction': 'movq\t0x78(%rcx), %rax'}, {'instIndex': 82, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 83, 'instruction': 'movq\t%rcx, 8(%rsp)                   # 8-byte Spill'}, {'instIndex': 84, 'instruction': 'movq\t%rax, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 85, 'instruction': 'je\t.LBB4_11'}, {'instIndex': 87, 'instruction': 'addq\t$0x68, %rsp'}, {'instIndex': 88, 'instruction': 'retq'}]}]}
The case of compiler clang with optimization Os.
Patched source code file: options.c
Patched function: 1---static void *format_child_next 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_before/Os/options.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_before/Os/options.s---format_child_next---before
function id: 3
function flag: True
There are 37 instructions for function: format_child_next in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '41', 'end': 50}, 'before': {'start': '40', 'end': 45}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 13, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 14, 'instruction': 'movq\t%rax, -0x20(%rsp)                 # 8-byte Spill'}, {'instIndex': 15, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 16, 'instruction': 'je\t.LBB3_4'}, {'instIndex': 18, 'instruction': 'cmpq\t$0, 0x88(%rax)'}, {'instIndex': 19, 'instruction': 'jne\t.LBB3_6'}, {'instIndex': 21, 'instruction': 'movq\t0x10(%rax), %rcx'}, {'instIndex': 22, 'instruction': 'movq\t%rcx, -0x28(%rsp)                 # 8-byte Spill'}, {'instIndex': 23, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 24, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 25, 'instruction': 'movq\t%rax, -8(%rsp)                  # 8-byte Spill'}, {'instIndex': 26, 'instruction': 'je\t.LBB3_7'}, {'instIndex': 28, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 29, 'instruction': 'cmpq\t$0, 0x78(%rcx)'}, {'instIndex': 30, 'instruction': 'movq\t%rax, -8(%rsp)                  # 8-byte Spill'}, {'instIndex': 34, 'instruction': 'jmp\t.LBB3_7'}, {'instIndex': 36, 'instruction': 'retq'}]}]
Patched function: 1---static const AVClass *format_child_class_next 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_before/Os/options.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_before/Os/options.s---format_child_class_next---before
function id: 4
function flag: True
There are 89 instructions for function: format_child_class_next in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '64', 'end': 78}, 'before': {'start': '59', 'end': 67}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 48, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 49, 'instruction': 'testb\t$1, %cl'}, {'instIndex': 50, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 51, 'instruction': 'movq\t%rcx, 0x18(%rsp)                  # 8-byte Spill'}, {'instIndex': 52, 'instruction': 'movq\t%rax, 0x20(%rsp)                  # 8-byte Spill'}, {'instIndex': 53, 'instruction': 'jne\t.LBB4_8'}, {'instIndex': 54, 'instruction': 'jmp\t.LBB4_10'}, {'instIndex': 56, 'instruction': 'callq\tav_oformat_next@PLT'}, {'instIndex': 57, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 58, 'instruction': 'movq\t%rcx, 0x10(%rsp)                  # 8-byte Spill'}, {'instIndex': 59, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 60, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 61, 'instruction': 'movq\t%rax, 0x20(%rsp)                  # 8-byte Spill'}, {'instIndex': 62, 'instruction': 'je\t.LBB4_10'}, {'instIndex': 65, 'instruction': 'cmpq\t%rcx, 0x78(%rax)'}, {'instIndex': 66, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 67, 'instruction': 'movq\t%rcx, 0x18(%rsp)                  # 8-byte Spill'}, {'instIndex': 68, 'instruction': 'movq\t%rax, 0x20(%rsp)                  # 8-byte Spill'}, {'instIndex': 69, 'instruction': 'jne\t.LBB4_8'}, {'instIndex': 73, 'instruction': 'callq\tav_oformat_next@PLT'}, {'instIndex': 74, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 75, 'instruction': 'movq\t%rcx, (%rsp)                    # 8-byte Spill'}, {'instIndex': 76, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 77, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 78, 'instruction': 'movq\t%rax, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 79, 'instruction': 'je\t.LBB4_13'}, {'instIndex': 81, 'instruction': 'movq\t0x78(%rcx), %rax'}, {'instIndex': 82, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 83, 'instruction': 'movq\t%rcx, 8(%rsp)                   # 8-byte Spill'}, {'instIndex': 84, 'instruction': 'movq\t%rax, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 85, 'instruction': 'je\t.LBB4_11'}, {'instIndex': 87, 'instruction': 'addq\t$0x68, %rsp'}, {'instIndex': 88, 'instruction': 'retq'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_before/Os/options.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_before/Os/options.o---before
The extraction of function: format_child_next
Analyzing the binaries to generate subCFGs from patched function ...
It has 46 nodes and 70 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 37 instructions in binary file.
[4194516, 4194536, 4194551, 4194578, 4194597, 4194609]
The extraction of function: format_child_class_next
Analyzing the binaries to generate subCFGs from patched function ...
It has 46 nodes and 70 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 89 instructions in binary file.
[4194802, 4194826, 4194828, 4194838, 4194859, 4194888, 4194898, 4194908, 4194928, 4194952]
The execution time of patched subCFG information extraction via angr: 0:00:00.200896
{'format_child_next': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000d4>, <DisassemblerInsn "mov" for 0x4000d9>, <DisassemblerInsn "mov" for 0x4000dd>, <DisassemblerInsn "cmp" for 0x4000e2>, <DisassemblerInsn "je" for 0x4000e6>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400125>, <DisassemblerInsn "mov" for 0x40012a>, <DisassemblerInsn "jmp" for 0x40012f>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400131>, <DisassemblerInsn "ret" for 0x400136>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000a7>, <DisassemblerInsn "xor" for 0x4000ac>, <DisassemblerInsn "cmp" for 0x4000ae>, <DisassemblerInsn "mov" for 0x4000b2>, <DisassemblerInsn "jne" for 0x4000b7>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400112>, <DisassemblerInsn "xor" for 0x400117>, <DisassemblerInsn "cmp" for 0x400119>, <DisassemblerInsn "mov" for 0x40011e>, <DisassemblerInsn "je" for 0x400123>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000e8>, <DisassemblerInsn "cmp" for 0x4000ed>, <DisassemblerInsn "jne" for 0x4000f5>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000f7>, <DisassemblerInsn "mov" for 0x4000fc>, <DisassemblerInsn "mov" for 0x400100>, <DisassemblerInsn "xor" for 0x400105>, <DisassemblerInsn "cmp" for 0x400107>, <DisassemblerInsn "mov" for 0x40010b>, <DisassemblerInsn "je" for 0x400110>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000b9>, <DisassemblerInsn "mov" for 0x4000be>, <DisassemblerInsn "mov" for 0x4000c2>, <DisassemblerInsn "xor" for 0x4000c7>, <DisassemblerInsn "cmp" for 0x4000c9>, <DisassemblerInsn "mov" for 0x4000cd>, <DisassemblerInsn "je" for 0x4000d2>]'}], 'cfg_block_detailed_info': [{'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~qword ptr [rsp - 0x20], rax>', '<cmp~~rax, 0>', '<je~~0x4000f7>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x18]>', '<mov~~qword ptr [rsp - 8], rax>', '<jmp~~0x400131>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 8]>', '<ret~~>']}, {'block_Idx': 0, 'blockInsts': ['<mov~~qword ptr [rsp - 0x10], rdi>', '<xor~~eax, eax>', '<cmp~~rsi, 0>', '<mov~~qword ptr [rsp - 8], rax>', '<jne~~0x400131>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rcx, qword ptr [rsp - 0x28]>', '<xor~~eax, eax>', '<cmp~~qword ptr [rcx + 0x78], 0>', '<mov~~qword ptr [rsp - 8], rax>', '<je~~0x400131>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<cmp~~qword ptr [rax + 0x88], 0>', '<jne~~0x400125>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rcx, qword ptr [rax + 0x10]>', '<mov~~qword ptr [rsp - 0x28], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp - 8], rax>', '<je~~0x400131>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rcx, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp - 0x18], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp - 8], rax>', '<je~~0x400131>']}], 'cfg_edge_info': [(6, 2), (1, 2), (3, 4), (5, 4), (4, 6), (5, 7), (4, 2), (6, 7), (0, 2), (7, 2), (1, 3), (3, 5)]}], 'format_child_class_next': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40020a>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40022b>, <DisassemblerInsn "mov" for 0x400230>, <DisassemblerInsn "cmp" for 0x400235>, <DisassemblerInsn "mov" for 0x400239>, <DisassemblerInsn "mov" for 0x40023c>, <DisassemblerInsn "mov" for 0x400241>, <DisassemblerInsn "jne" for 0x400246>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400288>, <DisassemblerInsn "add" for 0x40028d>, <DisassemblerInsn "ret" for 0x400291>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001f2>, <DisassemblerInsn "xor" for 0x4001f6>, <DisassemblerInsn "test" for 0x4001f8>, <DisassemblerInsn "mov" for 0x4001fb>, <DisassemblerInsn "mov" for 0x4001fe>, <DisassemblerInsn "mov" for 0x400203>, <DisassemblerInsn "jne" for 0x400208>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40025c>, <DisassemblerInsn "mov" for 0x40025f>, <DisassemblerInsn "xor" for 0x400263>, <DisassemblerInsn "cmp" for 0x400265>, <DisassemblerInsn "mov" for 0x400269>, <DisassemblerInsn "je" for 0x40026e>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400252>, <DisassemblerInsn "call" for 0x400257>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40020c>, <DisassemblerInsn "call" for 0x400211>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001ed>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400248>, <DisassemblerInsn "mov" for 0x40024d>, <DisassemblerInsn "mov" for 0x400252>, <DisassemblerInsn "call" for 0x400257>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400216>, <DisassemblerInsn "mov" for 0x400219>, <DisassemblerInsn "xor" for 0x40021e>, <DisassemblerInsn "cmp" for 0x400220>, <DisassemblerInsn "mov" for 0x400224>, <DisassemblerInsn "je" for 0x400229>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40018e>, <DisassemblerInsn "mov" for 0x400193>, <DisassemblerInsn "test" for 0x400197>, <DisassemblerInsn "sete" for 0x40019a>, <DisassemblerInsn "mov" for 0x40019e>, <DisassemblerInsn "xor" for 0x4001a0>, <DisassemblerInsn "or" for 0x4001a3>, <DisassemblerInsn "and" for 0x4001a6>, <DisassemblerInsn "test" for 0x4001a8>, <DisassemblerInsn "mov" for 0x4001ab>, <DisassemblerInsn "jne" for 0x4001b0>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001c6>, <DisassemblerInsn "cmp" for 0x4001cb>, <DisassemblerInsn "je" for 0x4001cf>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400270>, <DisassemblerInsn "mov" for 0x400274>, <DisassemblerInsn "cmp" for 0x400278>, <DisassemblerInsn "mov" for 0x40027c>, <DisassemblerInsn "mov" for 0x400281>, <DisassemblerInsn "je" for 0x400286>]'}], 'cfg_block_detailed_info': [{'block_Idx': 10, 'blockInsts': ['<jmp~~0x400248>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x48]>', '<cmp~~qword ptr [rax + 0x78], rcx>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x18], rcx>', '<mov~~qword ptr [rsp + 0x20], rax>', '<jne~~0x40020c>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<add~~rsp, 0x68>', '<ret~~>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x57]>', '<xor~~eax, eax>', '<test~~cl, 1>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x18], rcx>', '<mov~~qword ptr [rsp + 0x20], rax>', '<jne~~0x40020c>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~qword ptr [rsp], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp + 0x28], rax>', '<je~~0x400288>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x18]>', '<call~~0x500020>']}, {'block_Idx': 13, 'blockInsts': ['<jmp~~0x400288>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x10], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp + 0x20], rax>', '<je~~0x400248>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~cl, byte ptr [rsp + 0x57]>', '<test~~rax, rax>', '<sete~~sil>', '<mov~~dl, cl>', '<xor~~dl, 1>', '<or~~dl, sil>', '<and~~cl, dl>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x60], rax>', '<jne~~0x4001f2>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~qword ptr [rsp + 0x30], rax>', '<cmp~~rax, 0>', '<je~~0x4001f2>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rcx, qword ptr [rsp]>', '<mov~~rax, qword ptr [rcx + 0x78]>', '<cmp~~rax, 0>', '<mov~~qword ptr [rsp + 8], rcx>', '<mov~~qword ptr [rsp + 0x28], rax>', '<je~~0x400252>']}], 'cfg_edge_info': [(15, 14), (10, 14), (5, 8), (14, 17), (6, 8), (20, 17), (8, 10), (19, 20), (17, 16), (17, 19), (19, 16), (13, 16), (11, 15), (18, 11), (15, 18), (8, 11), (18, 14)]}]}
{'format_child_next': [4194516, 4194536, 4194551, 4194578, 4194597, 4194609], 'format_child_class_next': [4194802, 4194826, 4194828, 4194838, 4194859, 4194888, 4194898, 4194908, 4194928, 4194952]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd/clang_before/Os/options.o---before
The extraction of function: format_child_next
[4194516, 4194536, 4194551, 4194578, 4194597, 4194609]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 8 nodes and 13 edges in CFGEmulated.
It has 8 nodes and 9 edges in CDG.
It has 106 nodes and 119 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194516, 4194536, 4194551, 4194578, 4194597, 4194609]
{4194597, 4194471, 4194536, 4194609, 4194578, 4194516, 4194551, 4194489}
[5, 0, 1, 7, 2, 4, 6, 3]
The extraction of function: format_child_class_next
[4194802, 4194826, 4194828, 4194838, 4194859, 4194888, 4194898, 4194908, 4194928, 4194952]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 27 nodes and 43 edges in CFGEmulated.
It has 26 nodes and 40 edges in CDG.
It has 278 nodes and 348 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194802, 4194826, 4194828, 4194838, 4194859, 4194888, 4194898, 4194908, 4194928, 4194952]
{4194952, 4194826, 4194828, 4194702, 4194838, 4194859, 4194738, 4194615, 4194748, 4194758, 4194888, 4194769, 4194898, 4194908, 4194655, 4194657, 4194667, 4194797, 4194928, 4194802}
[3, 7, 23, 25, 12, 10, 21, 11, 13, 9, 8, 14, 1, 6, 19, 2, 24, 15, 22, 16, 0]
The execution time of patched slicing information extraction via angr: 0:00:02.114949
{'format_child_next': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000e8>, <DisassemblerInsn "cmp" for 0x4000ed>, <DisassemblerInsn "jne" for 0x4000f5>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000a7>, <DisassemblerInsn "xor" for 0x4000ac>, <DisassemblerInsn "cmp" for 0x4000ae>, <DisassemblerInsn "mov" for 0x4000b2>, <DisassemblerInsn "jne" for 0x4000b7>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000b9>, <DisassemblerInsn "mov" for 0x4000be>, <DisassemblerInsn "mov" for 0x4000c2>, <DisassemblerInsn "xor" for 0x4000c7>, <DisassemblerInsn "cmp" for 0x4000c9>, <DisassemblerInsn "mov" for 0x4000cd>, <DisassemblerInsn "je" for 0x4000d2>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400125>, <DisassemblerInsn "mov" for 0x40012a>, <DisassemblerInsn "jmp" for 0x40012f>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400131>, <DisassemblerInsn "ret" for 0x400136>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000f7>, <DisassemblerInsn "mov" for 0x4000fc>, <DisassemblerInsn "mov" for 0x400100>, <DisassemblerInsn "xor" for 0x400105>, <DisassemblerInsn "cmp" for 0x400107>, <DisassemblerInsn "mov" for 0x40010b>, <DisassemblerInsn "je" for 0x400110>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400112>, <DisassemblerInsn "xor" for 0x400117>, <DisassemblerInsn "cmp" for 0x400119>, <DisassemblerInsn "mov" for 0x40011e>, <DisassemblerInsn "je" for 0x400123>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000d4>, <DisassemblerInsn "mov" for 0x4000d9>, <DisassemblerInsn "mov" for 0x4000dd>, <DisassemblerInsn "cmp" for 0x4000e2>, <DisassemblerInsn "je" for 0x4000e6>]'}], 'cfg_block_detailed_info': [{'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x20]>', '<cmp~~qword ptr [rax + 0x88], 0>', '<jne~~0x400125>']}, {'block_Idx': 0, 'blockInsts': ['<mov~~qword ptr [rsp - 0x10], rdi>', '<xor~~eax, eax>', '<cmp~~rsi, 0>', '<mov~~qword ptr [rsp - 8], rax>', '<jne~~0x400131>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rcx, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp - 0x18], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp - 8], rax>', '<je~~0x400131>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x18]>', '<mov~~qword ptr [rsp - 8], rax>', '<jmp~~0x400131>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 8]>', '<ret~~>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rcx, qword ptr [rax + 0x10]>', '<mov~~qword ptr [rsp - 0x28], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp - 8], rax>', '<je~~0x400131>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rcx, qword ptr [rsp - 0x28]>', '<xor~~eax, eax>', '<cmp~~qword ptr [rcx + 0x78], 0>', '<mov~~qword ptr [rsp - 8], rax>', '<je~~0x400131>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp - 0x10]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~qword ptr [rsp - 0x20], rax>', '<cmp~~rax, 0>', '<je~~0x4000f7>']}], 'cfg_edge_info': [(0, 1), (6, 2), (1, 2), (3, 4), (5, 4), (4, 6), (5, 7), (4, 2), (6, 7), (0, 2), (7, 2), (1, 3), (3, 5)], 'cdg_edge_info': [(0, 1), (5, 4), (4, 6), (1, 4), (5, 7), (6, 7), (3, 2), (1, 3), (3, 5)], 'ddg_edge_info': [(0, 1), (0, 7), (6, 2), (1, 2), (0, 4), (0, 3), (4, 6), (4, 2), (0, 6), (1, 7), (0, 2), (7, 2), (0, 5), (3, 5)]}], 'format_child_class_next': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001b2>, <DisassemblerInsn "mov" for 0x4001b7>, <DisassemblerInsn "mov" for 0x4001bc>, <DisassemblerInsn "call" for 0x4001c1>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001c6>, <DisassemblerInsn "cmp" for 0x4001cb>, <DisassemblerInsn "je" for 0x4001cf>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40022b>, <DisassemblerInsn "mov" for 0x400230>, <DisassemblerInsn "cmp" for 0x400235>, <DisassemblerInsn "mov" for 0x400239>, <DisassemblerInsn "mov" for 0x40023c>, <DisassemblerInsn "mov" for 0x400241>, <DisassemblerInsn "jne" for 0x400246>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400252>, <DisassemblerInsn "call" for 0x400257>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40020a>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001f2>, <DisassemblerInsn "xor" for 0x4001f6>, <DisassemblerInsn "test" for 0x4001f8>, <DisassemblerInsn "mov" for 0x4001fb>, <DisassemblerInsn "mov" for 0x4001fe>, <DisassemblerInsn "mov" for 0x400203>, <DisassemblerInsn "jne" for 0x400208>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400216>, <DisassemblerInsn "mov" for 0x400219>, <DisassemblerInsn "xor" for 0x40021e>, <DisassemblerInsn "cmp" for 0x400220>, <DisassemblerInsn "mov" for 0x400224>, <DisassemblerInsn "je" for 0x400229>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001d1>, <DisassemblerInsn "mov" for 0x4001d6>, <DisassemblerInsn "cmp" for 0x4001dd>, <DisassemblerInsn "mov" for 0x4001e1>, <DisassemblerInsn "mov" for 0x4001e6>, <DisassemblerInsn "je" for 0x4001eb>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40020c>, <DisassemblerInsn "call" for 0x400211>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400176>, <DisassemblerInsn "mov" for 0x40017b>, <DisassemblerInsn "cmp" for 0x400180>, <DisassemblerInsn "mov" for 0x400187>, <DisassemblerInsn "jne" for 0x40018c>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40018e>, <DisassemblerInsn "mov" for 0x400193>, <DisassemblerInsn "test" for 0x400197>, <DisassemblerInsn "sete" for 0x40019a>, <DisassemblerInsn "mov" for 0x40019e>, <DisassemblerInsn "xor" for 0x4001a0>, <DisassemblerInsn "or" for 0x4001a3>, <DisassemblerInsn "and" for 0x4001a6>, <DisassemblerInsn "test" for 0x4001a8>, <DisassemblerInsn "mov" for 0x4001ab>, <DisassemblerInsn "jne" for 0x4001b0>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001bc>, <DisassemblerInsn "call" for 0x4001c1>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40015f>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40016b>, <DisassemblerInsn "cmp" for 0x400170>, <DisassemblerInsn "je" for 0x400174>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400288>, <DisassemblerInsn "add" for 0x40028d>, <DisassemblerInsn "ret" for 0x400291>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400161>, <DisassemblerInsn "call" for 0x400166>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400270>, <DisassemblerInsn "mov" for 0x400274>, <DisassemblerInsn "cmp" for 0x400278>, <DisassemblerInsn "mov" for 0x40027c>, <DisassemblerInsn "mov" for 0x400281>, <DisassemblerInsn "je" for 0x400286>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001ed>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40025c>, <DisassemblerInsn "mov" for 0x40025f>, <DisassemblerInsn "xor" for 0x400263>, <DisassemblerInsn "cmp" for 0x400265>, <DisassemblerInsn "mov" for 0x400269>, <DisassemblerInsn "je" for 0x40026e>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400248>, <DisassemblerInsn "mov" for 0x40024d>, <DisassemblerInsn "mov" for 0x400252>, <DisassemblerInsn "call" for 0x400257>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400137>, <DisassemblerInsn "mov" for 0x40013b>, <DisassemblerInsn "cmp" for 0x400140>, <DisassemblerInsn "setne" for 0x400144>, <DisassemblerInsn "mov" for 0x400147>, <DisassemblerInsn "xor" for 0x40014b>, <DisassemblerInsn "test" for 0x40014d>, <DisassemblerInsn "mov" for 0x400150>, <DisassemblerInsn "mov" for 0x400153>, <DisassemblerInsn "mov" for 0x400158>, <DisassemblerInsn "jne" for 0x40015d>]'}], 'cfg_block_detailed_info': [{'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x60]>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rdi, qword ptr [rsp + 0x38]>', '<call~~0x500018>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~qword ptr [rsp + 0x30], rax>', '<cmp~~rax, 0>', '<je~~0x4001f2>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x48]>', '<cmp~~qword ptr [rax + 0x78], rcx>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x18], rcx>', '<mov~~qword ptr [rsp + 0x20], rax>', '<jne~~0x40020c>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}, {'block_Idx': 12, 'blockInsts': ['<jmp~~0x400248>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x57]>', '<xor~~eax, eax>', '<test~~cl, 1>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x18], rcx>', '<mov~~qword ptr [rsp + 0x20], rax>', '<jne~~0x40020c>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x10], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp + 0x20], rax>', '<je~~0x400248>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rcx + 0x88]>', '<cmp~~rax, 0>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~qword ptr [rsp + 0x28], rax>', '<je~~0x4001bc>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x18]>', '<call~~0x500020>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rcx, qword ptr [rsp + 0x48]>', '<cmp~~qword ptr [rax + 0x88], rcx>', '<mov~~qword ptr [rsp + 0x58], rax>', '<jne~~0x400161>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~cl, byte ptr [rsp + 0x57]>', '<test~~rax, rax>', '<sete~~sil>', '<mov~~dl, cl>', '<xor~~dl, 1>', '<or~~dl, sil>', '<and~~cl, dl>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x60], rax>', '<jne~~0x4001f2>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x38]>', '<call~~0x500018>']}, {'block_Idx': 1, 'blockInsts': ['<jmp~~0x4001b2>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~qword ptr [rsp + 0x40], rax>', '<cmp~~rax, 0>', '<je~~0x40018e>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<add~~rsp, 0x68>', '<ret~~>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x58]>', '<call~~0x500018>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rcx, qword ptr [rsp]>', '<mov~~rax, qword ptr [rcx + 0x78]>', '<cmp~~rax, 0>', '<mov~~qword ptr [rsp + 8], rcx>', '<mov~~qword ptr [rsp + 0x28], rax>', '<je~~0x400252>']}, {'block_Idx': 15, 'blockInsts': ['<jmp~~0x400288>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~qword ptr [rsp], rcx>', '<xor~~eax, eax>', '<cmp~~rcx, 0>', '<mov~~qword ptr [rsp + 0x28], rax>', '<je~~0x400288>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~rdi, qword ptr [rsp + 8]>', '<call~~0x500020>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x68>', '<mov~~qword ptr [rsp + 0x48], rdi>', '<cmp~~rdi, 0>', '<setne~~cl>', '<mov~~byte ptr [rsp + 0x57], cl>', '<xor~~eax, eax>', '<test~~cl, 1>', '<mov~~rcx, rax>', '<mov~~qword ptr [rsp + 0x58], rcx>', '<mov~~qword ptr [rsp + 0x60], rax>', '<jne~~0x400161>']}], 'cfg_edge_info': [(21, 16), (12, 16), (23, 16), (3, 7), (23, 13), (14, 7), (9, 2), (8, 3), (0, 2), (9, 8), (11, 14), (1, 3), (10, 12), (25, 22), (7, 10), (6, 8), (16, 22), (22, 19), (0, 1), (24, 19), (24, 25), (15, 19), (21, 23), (22, 24), (8, 10), (10, 13), (7, 11), (11, 15), (2, 6), (13, 21), (6, 9)], 'cdg_edge_info': [(23, 13), (8, 3), (0, 2), (0, 8), (11, 14), (10, 12), (10, 21), (7, 10), (7, 16), (7, 22), (23, 21), (0, 1), (0, 7), (11, 7), (24, 25), (24, 22), (21, 23), (22, 24), (8, 7), (0, 3), (8, 10), (8, 16), (10, 13), (0, 6), (11, 15), (8, 22), (7, 11)], 'ddg_edge_info': [(21, 16), (14, 7), (3, 7), (23, 16), (23, 13), (14, 10), (14, 16), (14, 13), (14, 19), (8, 3), (0, 2), (0, 8), (11, 14), (2, 8), (0, 23), (10, 21), (25, 19), (13, 23), (25, 22), (6, 8), (16, 22), (16, 25), (23, 21), (22, 19), (11, 7), (0, 10), (2, 10), (2, 16), (13, 16), (11, 19), (2, 13), (24, 19), (24, 25), (25, 24), (24, 22), (21, 23), (14, 11), (3, 14), (22, 24), (0, 3), (10, 13), (0, 6), (2, 3), (7, 11), (10, 16), (2, 6), (13, 21)]}]}
{'format_child_next': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 13, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 14, 'instruction': 'movq\t%rax, -0x20(%rsp)                 # 8-byte Spill'}, {'instIndex': 15, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 16, 'instruction': 'je\t.LBB3_4'}, {'instIndex': 18, 'instruction': 'cmpq\t$0, 0x88(%rax)'}, {'instIndex': 19, 'instruction': 'jne\t.LBB3_6'}, {'instIndex': 21, 'instruction': 'movq\t0x10(%rax), %rcx'}, {'instIndex': 22, 'instruction': 'movq\t%rcx, -0x28(%rsp)                 # 8-byte Spill'}, {'instIndex': 23, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 24, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 25, 'instruction': 'movq\t%rax, -8(%rsp)                  # 8-byte Spill'}, {'instIndex': 26, 'instruction': 'je\t.LBB3_7'}, {'instIndex': 28, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 29, 'instruction': 'cmpq\t$0, 0x78(%rcx)'}, {'instIndex': 30, 'instruction': 'movq\t%rax, -8(%rsp)                  # 8-byte Spill'}, {'instIndex': 34, 'instruction': 'jmp\t.LBB3_7'}, {'instIndex': 36, 'instruction': 'retq'}]}], 'format_child_class_next': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 48, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 49, 'instruction': 'testb\t$1, %cl'}, {'instIndex': 50, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 51, 'instruction': 'movq\t%rcx, 0x18(%rsp)                  # 8-byte Spill'}, {'instIndex': 52, 'instruction': 'movq\t%rax, 0x20(%rsp)                  # 8-byte Spill'}, {'instIndex': 53, 'instruction': 'jne\t.LBB4_8'}, {'instIndex': 54, 'instruction': 'jmp\t.LBB4_10'}, {'instIndex': 56, 'instruction': 'callq\tav_oformat_next@PLT'}, {'instIndex': 57, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 58, 'instruction': 'movq\t%rcx, 0x10(%rsp)                  # 8-byte Spill'}, {'instIndex': 59, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 60, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 61, 'instruction': 'movq\t%rax, 0x20(%rsp)                  # 8-byte Spill'}, {'instIndex': 62, 'instruction': 'je\t.LBB4_10'}, {'instIndex': 65, 'instruction': 'cmpq\t%rcx, 0x78(%rax)'}, {'instIndex': 66, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 67, 'instruction': 'movq\t%rcx, 0x18(%rsp)                  # 8-byte Spill'}, {'instIndex': 68, 'instruction': 'movq\t%rax, 0x20(%rsp)                  # 8-byte Spill'}, {'instIndex': 69, 'instruction': 'jne\t.LBB4_8'}, {'instIndex': 73, 'instruction': 'callq\tav_oformat_next@PLT'}, {'instIndex': 74, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 75, 'instruction': 'movq\t%rcx, (%rsp)                    # 8-byte Spill'}, {'instIndex': 76, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 77, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 78, 'instruction': 'movq\t%rax, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 79, 'instruction': 'je\t.LBB4_13'}, {'instIndex': 81, 'instruction': 'movq\t0x78(%rcx), %rax'}, {'instIndex': 82, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 83, 'instruction': 'movq\t%rcx, 8(%rsp)                   # 8-byte Spill'}, {'instIndex': 84, 'instruction': 'movq\t%rax, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 85, 'instruction': 'je\t.LBB4_11'}, {'instIndex': 87, 'instruction': 'addq\t$0x68, %rsp'}, {'instIndex': 88, 'instruction': 'retq'}]}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd---b/libavformat/utils.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/32caa7b13cecca59213c73fa94dd683c2b003bfd---a/libavformat/utils.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 16 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3e5bc7ff6a23014daf2eb0b9a22986753ae2ec4f/patch_info.txt
{'1': {'before': 'a/libavfilter/vf_setpts.c', 'after': 'b/libavfilter/vf_setpts.c'}}
{'1': [{'before': '-116,10', 'after': '+116,10', 'function': 'static void start_frame'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3e5bc7ff6a23014daf2eb0b9a22986753ae2ec4f---b/libavfilter/vf_setpts.c
The case of compiler gcc with optimization no.
Patched source code file: vf_setpts.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3e5bc7ff6a23014daf2eb0b9a22986753ae2ec4f/gcc_after/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: vf_setpts.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3e5bc7ff6a23014daf2eb0b9a22986753ae2ec4f/gcc_after/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: vf_setpts.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3e5bc7ff6a23014daf2eb0b9a22986753ae2ec4f/gcc_after/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: vf_setpts.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3e5bc7ff6a23014daf2eb0b9a22986753ae2ec4f/gcc_after/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: vf_setpts.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3e5bc7ff6a23014daf2eb0b9a22986753ae2ec4f/gcc_after/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: vf_setpts.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3e5bc7ff6a23014daf2eb0b9a22986753ae2ec4f/gcc_after/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: vf_setpts.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3e5bc7ff6a23014daf2eb0b9a22986753ae2ec4f/clang_after/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: vf_setpts.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3e5bc7ff6a23014daf2eb0b9a22986753ae2ec4f/clang_after/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: vf_setpts.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3e5bc7ff6a23014daf2eb0b9a22986753ae2ec4f/clang_after/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: vf_setpts.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3e5bc7ff6a23014daf2eb0b9a22986753ae2ec4f/clang_after/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: vf_setpts.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3e5bc7ff6a23014daf2eb0b9a22986753ae2ec4f/clang_after/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: vf_setpts.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3e5bc7ff6a23014daf2eb0b9a22986753ae2ec4f/clang_after/Os: directory not exists.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3e5bc7ff6a23014daf2eb0b9a22986753ae2ec4f---a/libavfilter/vf_setpts.c
The case of compiler gcc with optimization no.
Patched source code file: vf_setpts.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3e5bc7ff6a23014daf2eb0b9a22986753ae2ec4f/gcc_before/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: vf_setpts.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3e5bc7ff6a23014daf2eb0b9a22986753ae2ec4f/gcc_before/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: vf_setpts.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3e5bc7ff6a23014daf2eb0b9a22986753ae2ec4f/gcc_before/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: vf_setpts.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3e5bc7ff6a23014daf2eb0b9a22986753ae2ec4f/gcc_before/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: vf_setpts.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3e5bc7ff6a23014daf2eb0b9a22986753ae2ec4f/gcc_before/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: vf_setpts.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3e5bc7ff6a23014daf2eb0b9a22986753ae2ec4f/gcc_before/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: vf_setpts.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3e5bc7ff6a23014daf2eb0b9a22986753ae2ec4f/clang_before/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: vf_setpts.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3e5bc7ff6a23014daf2eb0b9a22986753ae2ec4f/clang_before/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: vf_setpts.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3e5bc7ff6a23014daf2eb0b9a22986753ae2ec4f/clang_before/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: vf_setpts.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3e5bc7ff6a23014daf2eb0b9a22986753ae2ec4f/clang_before/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: vf_setpts.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3e5bc7ff6a23014daf2eb0b9a22986753ae2ec4f/clang_before/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: vf_setpts.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3e5bc7ff6a23014daf2eb0b9a22986753ae2ec4f/clang_before/Os: directory not exists.
The analysis of 17 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/patch_info.txt
{'1': {'before': 'a/libavcodec/aasc.c', 'after': 'b/libavcodec/aasc.c'}, '2': {'before': 'a/libavcodec/bmp.c', 'after': 'b/libavcodec/bmp.c'}, '3': {'before': 'a/libavcodec/msrle.c', 'after': 'b/libavcodec/msrle.c'}, '4': {'before': 'a/libavcodec/msrledec.c', 'after': 'b/libavcodec/msrledec.c'}, '5': {'before': 'a/libavcodec/tscc.c', 'after': 'b/libavcodec/tscc.c'}}
{'1': [{'before': '-85,7', 'after': '+85,7', 'function': 'static int aasc_decode_frame'}], '2': [{'before': '-264,7', 'after': '+264,7', 'function': 'static int bmp_decode_frame'}], '3': [{'before': '-126,7', 'after': '+126,7', 'function': 'static int msrle_decode_frame'}], '4': [{'before': '-128,7', 'after': '+128,7', 'function': 'static int msrle_decode_pal4'}, {'before': '-243,7', 'after': '+243,7', 'function': 'static int msrle_decode_8_16_24_32'}], '5': [{'before': '-95,7', 'after': '+95,7', 'function': 'static int decode_frame'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7---b/libavcodec/aasc.c
The case of compiler gcc with optimization no.
Patched source code file: aasc.c
Patched function: 1---static int aasc_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/gcc_after/no/aasc_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/gcc_after/no/aasc_gcc.s---aasc_decode_frame---after
function id: 118
function flag: True
There are 149 instructions for function: aasc_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '85', 'end': 91}, 'before': {'start': '85', 'end': 91}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 91, 'instruction': 'jmp\t.L14'}, {'instIndex': 92, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 93, 'instruction': 'addq\t$8, %rax'}, {'instIndex': 94, 'instruction': 'movq\t%rax, 0x50(%rsp)'}, {'instIndex': 95, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 96, 'instruction': 'movq\t%rax, 0x58(%rsp)'}, {'instIndex': 97, 'instruction': 'movl\t0x2c(%rsp), %eax'}, {'instIndex': 98, 'instruction': 'movl\t%eax, 0x3c(%rsp)'}, {'instIndex': 112, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 113, 'instruction': 'leaq\t8(%rax), %rdx'}, {'instIndex': 114, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 115, 'instruction': 'movq\t0x20(%rax), %rsi'}, {'instIndex': 116, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 117, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 118, 'instruction': 'movl\t$8, %edx'}, {'instIndex': 119, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 120, 'instruction': 'call\tff_msrle_decode@PLT'}, {'instIndex': 121, 'instruction': 'jmp\t.L14'}, {'instIndex': 122, 'instruction': 'movl\t0x34(%rsp), %edx'}, {'instIndex': 123, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 124, 'instruction': 'movl\t%edx, %ecx'}, {'instIndex': 125, 'instruction': 'leaq\t.LC1(%rip), %rdx'}, {'instIndex': 126, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 127, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 128, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 129, 'instruction': 'call\tav_log@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/gcc_after/no/aasc.o
Binary file does not exist.
{'aasc_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 91, 'instruction': 'jmp\t.L14'}, {'instIndex': 92, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 93, 'instruction': 'addq\t$8, %rax'}, {'instIndex': 94, 'instruction': 'movq\t%rax, 0x50(%rsp)'}, {'instIndex': 95, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 96, 'instruction': 'movq\t%rax, 0x58(%rsp)'}, {'instIndex': 97, 'instruction': 'movl\t0x2c(%rsp), %eax'}, {'instIndex': 98, 'instruction': 'movl\t%eax, 0x3c(%rsp)'}, {'instIndex': 112, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 113, 'instruction': 'leaq\t8(%rax), %rdx'}, {'instIndex': 114, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 115, 'instruction': 'movq\t0x20(%rax), %rsi'}, {'instIndex': 116, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 117, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 118, 'instruction': 'movl\t$8, %edx'}, {'instIndex': 119, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 120, 'instruction': 'call\tff_msrle_decode@PLT'}, {'instIndex': 121, 'instruction': 'jmp\t.L14'}, {'instIndex': 122, 'instruction': 'movl\t0x34(%rsp), %edx'}, {'instIndex': 123, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 124, 'instruction': 'movl\t%edx, %ecx'}, {'instIndex': 125, 'instruction': 'leaq\t.LC1(%rip), %rdx'}, {'instIndex': 126, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 127, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 128, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 129, 'instruction': 'call\tav_log@PLT'}]}]}
The case of compiler gcc with optimization O0.
Patched source code file: aasc.c
Patched function: 1---static int aasc_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/gcc_after/O0/aasc_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/gcc_after/O0/aasc_gcc.s---aasc_decode_frame---after
function id: 118
function flag: True
There are 149 instructions for function: aasc_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '85', 'end': 91}, 'before': {'start': '85', 'end': 91}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 91, 'instruction': 'jmp\t.L14'}, {'instIndex': 92, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 93, 'instruction': 'addq\t$8, %rax'}, {'instIndex': 94, 'instruction': 'movq\t%rax, 0x50(%rsp)'}, {'instIndex': 95, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 96, 'instruction': 'movq\t%rax, 0x58(%rsp)'}, {'instIndex': 97, 'instruction': 'movl\t0x2c(%rsp), %eax'}, {'instIndex': 98, 'instruction': 'movl\t%eax, 0x3c(%rsp)'}, {'instIndex': 112, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 113, 'instruction': 'leaq\t8(%rax), %rdx'}, {'instIndex': 114, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 115, 'instruction': 'movq\t0x20(%rax), %rsi'}, {'instIndex': 116, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 117, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 118, 'instruction': 'movl\t$8, %edx'}, {'instIndex': 119, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 120, 'instruction': 'call\tff_msrle_decode@PLT'}, {'instIndex': 121, 'instruction': 'jmp\t.L14'}, {'instIndex': 122, 'instruction': 'movl\t0x34(%rsp), %edx'}, {'instIndex': 123, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 124, 'instruction': 'movl\t%edx, %ecx'}, {'instIndex': 125, 'instruction': 'leaq\t.LC1(%rip), %rdx'}, {'instIndex': 126, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 127, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 128, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 129, 'instruction': 'call\tav_log@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/gcc_after/O0/aasc.o
Binary file does not exist.
{'aasc_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 91, 'instruction': 'jmp\t.L14'}, {'instIndex': 92, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 93, 'instruction': 'addq\t$8, %rax'}, {'instIndex': 94, 'instruction': 'movq\t%rax, 0x50(%rsp)'}, {'instIndex': 95, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 96, 'instruction': 'movq\t%rax, 0x58(%rsp)'}, {'instIndex': 97, 'instruction': 'movl\t0x2c(%rsp), %eax'}, {'instIndex': 98, 'instruction': 'movl\t%eax, 0x3c(%rsp)'}, {'instIndex': 112, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 113, 'instruction': 'leaq\t8(%rax), %rdx'}, {'instIndex': 114, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 115, 'instruction': 'movq\t0x20(%rax), %rsi'}, {'instIndex': 116, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 117, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 118, 'instruction': 'movl\t$8, %edx'}, {'instIndex': 119, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 120, 'instruction': 'call\tff_msrle_decode@PLT'}, {'instIndex': 121, 'instruction': 'jmp\t.L14'}, {'instIndex': 122, 'instruction': 'movl\t0x34(%rsp), %edx'}, {'instIndex': 123, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 124, 'instruction': 'movl\t%edx, %ecx'}, {'instIndex': 125, 'instruction': 'leaq\t.LC1(%rip), %rdx'}, {'instIndex': 126, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 127, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 128, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 129, 'instruction': 'call\tav_log@PLT'}]}]}
The case of compiler gcc with optimization O1.
Patched source code file: aasc.c
Patched function: 1---static int aasc_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/gcc_after/O1/aasc_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/gcc_after/O1/aasc_gcc.s---aasc_decode_frame---after
function id: 5
function flag: True
There are 118 instructions for function: aasc_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '85', 'end': 91}, 'before': {'start': '85', 'end': 91}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 29, 'instruction': 'leaq\t.LC1(%rip), %rdx'}, {'instIndex': 30, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 31, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 32, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 33, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 73, 'instruction': 'leaq\t8(%r13), %rcx'}, {'instIndex': 74, 'instruction': 'movq\t0x20(%r13), %rsi'}, {'instIndex': 75, 'instruction': 'movl\t$8, %edx'}, {'instIndex': 76, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 77, 'instruction': 'call\tff_msrle_decode@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/gcc_after/O1/aasc.o
Binary file does not exist.
{'aasc_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 29, 'instruction': 'leaq\t.LC1(%rip), %rdx'}, {'instIndex': 30, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 31, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 32, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 33, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 73, 'instruction': 'leaq\t8(%r13), %rcx'}, {'instIndex': 74, 'instruction': 'movq\t0x20(%r13), %rsi'}, {'instIndex': 75, 'instruction': 'movl\t$8, %edx'}, {'instIndex': 76, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 77, 'instruction': 'call\tff_msrle_decode@PLT'}]}]}
The case of compiler gcc with optimization O2.
Patched source code file: aasc.c
Patched function: 1---static int aasc_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/gcc_after/O2/aasc_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/gcc_after/O2/aasc_gcc.s---aasc_decode_frame---after
function id: 5
function flag: True
There are 115 instructions for function: aasc_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '85', 'end': 91}, 'before': {'start': '85', 'end': 91}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 31, 'instruction': 'movq\t0x20(%r13), %rsi'}, {'instIndex': 32, 'instruction': 'leaq\t8(%r13), %rcx'}, {'instIndex': 35, 'instruction': 'movl\t$8, %edx'}, {'instIndex': 36, 'instruction': 'movq\t%r15, %rdi'}, {'instIndex': 38, 'instruction': 'call\tff_msrle_decode@PLT'}, {'instIndex': 57, 'instruction': 'leaq\t.LC1(%rip), %rdx'}, {'instIndex': 58, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 59, 'instruction': 'movq\t%r15, %rdi'}, {'instIndex': 60, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 61, 'instruction': 'call\tav_log@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/gcc_after/O2/aasc.o
Binary file does not exist.
{'aasc_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 31, 'instruction': 'movq\t0x20(%r13), %rsi'}, {'instIndex': 32, 'instruction': 'leaq\t8(%r13), %rcx'}, {'instIndex': 35, 'instruction': 'movl\t$8, %edx'}, {'instIndex': 36, 'instruction': 'movq\t%r15, %rdi'}, {'instIndex': 38, 'instruction': 'call\tff_msrle_decode@PLT'}, {'instIndex': 57, 'instruction': 'leaq\t.LC1(%rip), %rdx'}, {'instIndex': 58, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 59, 'instruction': 'movq\t%r15, %rdi'}, {'instIndex': 60, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 61, 'instruction': 'call\tav_log@PLT'}]}]}
The case of compiler gcc with optimization O3.
Patched source code file: aasc.c
Patched function: 1---static int aasc_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/gcc_after/O3/aasc_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/gcc_after/O3/aasc_gcc.s---aasc_decode_frame---after
function id: 5
function flag: True
There are 115 instructions for function: aasc_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '85', 'end': 91}, 'before': {'start': '85', 'end': 91}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 31, 'instruction': 'movq\t0x20(%r13), %rsi'}, {'instIndex': 32, 'instruction': 'leaq\t8(%r13), %rcx'}, {'instIndex': 35, 'instruction': 'movl\t$8, %edx'}, {'instIndex': 36, 'instruction': 'movq\t%r15, %rdi'}, {'instIndex': 38, 'instruction': 'call\tff_msrle_decode@PLT'}, {'instIndex': 57, 'instruction': 'leaq\t.LC1(%rip), %rdx'}, {'instIndex': 58, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 59, 'instruction': 'movq\t%r15, %rdi'}, {'instIndex': 60, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 61, 'instruction': 'call\tav_log@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/gcc_after/O3/aasc.o
Binary file does not exist.
{'aasc_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 31, 'instruction': 'movq\t0x20(%r13), %rsi'}, {'instIndex': 32, 'instruction': 'leaq\t8(%r13), %rcx'}, {'instIndex': 35, 'instruction': 'movl\t$8, %edx'}, {'instIndex': 36, 'instruction': 'movq\t%r15, %rdi'}, {'instIndex': 38, 'instruction': 'call\tff_msrle_decode@PLT'}, {'instIndex': 57, 'instruction': 'leaq\t.LC1(%rip), %rdx'}, {'instIndex': 58, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 59, 'instruction': 'movq\t%r15, %rdi'}, {'instIndex': 60, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 61, 'instruction': 'call\tav_log@PLT'}]}]}
The case of compiler gcc with optimization Os.
Patched source code file: aasc.c
Patched function: 1---static int aasc_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/gcc_after/Os/aasc_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/gcc_after/Os/aasc_gcc.s---aasc_decode_frame---after
function id: 5
function flag: True
There are 119 instructions for function: aasc_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '85', 'end': 91}, 'before': {'start': '85', 'end': 91}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 41, 'instruction': 'movq\t0x20(%r15), %rsi'}, {'instIndex': 42, 'instruction': 'leaq\t8(%r15), %rcx'}, {'instIndex': 45, 'instruction': 'movq\t%r14, %rdi'}, {'instIndex': 46, 'instruction': 'movl\t$8, %edx'}, {'instIndex': 48, 'instruction': 'call\tff_msrle_decode@PLT'}, {'instIndex': 49, 'instruction': 'jmp\t.L13'}, {'instIndex': 76, 'instruction': 'movl\t%r8d, %ecx'}, {'instIndex': 77, 'instruction': 'leaq\t.LC1(%rip), %rdx'}, {'instIndex': 78, 'instruction': 'movq\t%r14, %rdi'}, {'instIndex': 79, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 80, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 81, 'instruction': 'call\tav_log@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/gcc_after/Os/aasc.o
Binary file does not exist.
{'aasc_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 41, 'instruction': 'movq\t0x20(%r15), %rsi'}, {'instIndex': 42, 'instruction': 'leaq\t8(%r15), %rcx'}, {'instIndex': 45, 'instruction': 'movq\t%r14, %rdi'}, {'instIndex': 46, 'instruction': 'movl\t$8, %edx'}, {'instIndex': 48, 'instruction': 'call\tff_msrle_decode@PLT'}, {'instIndex': 49, 'instruction': 'jmp\t.L13'}, {'instIndex': 76, 'instruction': 'movl\t%r8d, %ecx'}, {'instIndex': 77, 'instruction': 'leaq\t.LC1(%rip), %rdx'}, {'instIndex': 78, 'instruction': 'movq\t%r14, %rdi'}, {'instIndex': 79, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 80, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 81, 'instruction': 'call\tav_log@PLT'}]}]}
The case of compiler clang with optimization no.
Patched source code file: aasc.c
Patched function: 1---static int aasc_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_after/no/aasc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_after/no/aasc.s---aasc_decode_frame---after
function id: 1
function flag: True
There are 146 instructions for function: aasc_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '85', 'end': 91}, 'before': {'start': '85', 'end': 91}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 93, 'instruction': 'jmp\t.LBB1_14'}, {'instIndex': 94, 'instruction': 'movq\t0x18(%rsp), %rdx'}, {'instIndex': 95, 'instruction': 'addq\t$8, %rdx'}, {'instIndex': 96, 'instruction': 'movq\t0x28(%rsp), %rcx'}, {'instIndex': 97, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 98, 'instruction': 'movq\t%rdx, 0x60(%rsp)'}, {'instIndex': 99, 'instruction': 'movq\t%rcx, 0x58(%rsp)'}, {'instIndex': 100, 'instruction': 'movl\t%eax, 0x54(%rsp)'}, {'instIndex': 112, 'instruction': 'movq\t0x48(%rsp), %rdi'}, {'instIndex': 113, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 114, 'instruction': 'movq\t0x20(%rax), %rsi'}, {'instIndex': 115, 'instruction': 'movq\t0x18(%rsp), %rcx'}, {'instIndex': 116, 'instruction': 'addq\t$8, %rcx'}, {'instIndex': 117, 'instruction': 'movl\t$8, %edx'}, {'instIndex': 118, 'instruction': 'callq\tff_msrle_decode@PLT'}, {'instIndex': 119, 'instruction': 'jmp\t.LBB1_14'}, {'instIndex': 120, 'instruction': 'movq\t0x48(%rsp), %rdi'}, {'instIndex': 121, 'instruction': 'movl\t0x14(%rsp), %ecx'}, {'instIndex': 122, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 123, 'instruction': 'leaq\t.L.str.3(%rip), %rdx'}, {'instIndex': 124, 'instruction': 'movb\t$0, %al'}, {'instIndex': 125, 'instruction': 'callq\tav_log@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_after/no/aasc.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_after/no/aasc.o---after
The extraction of function: aasc_decode_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 42 nodes and 55 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 146 instructions in binary file.
[4194809, 4194814, 4194928, 4194930]
The execution time of patched subCFG information extraction via angr: 0:00:00.141919
{'aasc_decode_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400184>, <DisassemblerInsn "mov" for 0x400189>, <DisassemblerInsn "sub" for 0x40018f>, <DisassemblerInsn "mov" for 0x400192>, <DisassemblerInsn "cmp" for 0x400196>, <DisassemblerInsn "jl" for 0x40019b>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400196>, <DisassemblerInsn "jl" for 0x40019b>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400270>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40028e>, <DisassemblerInsn "jmp" for 0x400296>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001f9>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400298>, <DisassemblerInsn "mov" for 0x40029d>, <DisassemblerInsn "mov" for 0x4002a3>, <DisassemblerInsn "mov" for 0x4002a8>, <DisassemblerInsn "mov" for 0x4002ad>, <DisassemblerInsn "call" for 0x4002b1>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001fe>, <DisassemblerInsn "add" for 0x400203>, <DisassemblerInsn "mov" for 0x400207>, <DisassemblerInsn "mov" for 0x40020c>, <DisassemblerInsn "mov" for 0x400210>, <DisassemblerInsn "mov" for 0x400215>, <DisassemblerInsn "mov" for 0x40021a>, <DisassemblerInsn "mov" for 0x40021e>, <DisassemblerInsn "mov" for 0x400223>, <DisassemblerInsn "mov" for 0x400228>, <DisassemblerInsn "mov" for 0x40022b>, <DisassemblerInsn "mov" for 0x400230>, <DisassemblerInsn "mov" for 0x400235>, <DisassemblerInsn "mov" for 0x400239>, <DisassemblerInsn "movsxd" for 0x40023e>, <DisassemblerInsn "add" for 0x400243>, <DisassemblerInsn "mov" for 0x400246>, <DisassemblerInsn "mov" for 0x40024b>, <DisassemblerInsn "mov" for 0x40024f>, <DisassemblerInsn "mov" for 0x400254>, <DisassemblerInsn "mov" for 0x400259>, <DisassemblerInsn "mov" for 0x40025d>, <DisassemblerInsn "add" for 0x400262>, <DisassemblerInsn "mov" for 0x400266>, <DisassemblerInsn "call" for 0x40026b>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400137>, <DisassemblerInsn "sub" for 0x40013b>, <DisassemblerInsn "je" for 0x40013e>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400272>, <DisassemblerInsn "mov" for 0x400277>, <DisassemblerInsn "mov" for 0x40027b>, <DisassemblerInsn "lea" for 0x400280>, <DisassemblerInsn "mov" for 0x400287>, <DisassemblerInsn "call" for 0x400289>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400144>]'}], 'cfg_block_detailed_info': [{'block_Idx': 11, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~eax, dword ptr [rax + 0x98]>', '<sub~~eax, 1>', '<mov~~dword ptr [rsp + 0x10], eax>', '<cmp~~dword ptr [rsp + 0x10], 0>', '<jl~~0x4001f9>']}, {'block_Idx': 22, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x10], 0>', '<jl~~0x4001f9>']}, {'block_Idx': 19, 'blockInsts': ['<jmp~~0x400298>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~dword ptr [rsp + 0x50], 0xc1444e49>', '<jmp~~0x4002d5>']}, {'block_Idx': 13, 'blockInsts': ['<jmp~~0x400298>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax], 1>', '<mov~~rdi, qword ptr [rsp + 0x40]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rsi, qword ptr [rax + 0x20]>', '<call~~0x500028>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x18]>', '<add~~rdx, 8>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<mov~~qword ptr [rsp + 0x60], rdx>', '<mov~~qword ptr [rsp + 0x58], rcx>', '<mov~~dword ptr [rsp + 0x54], eax>', '<mov~~rcx, qword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rsp + 0x60]>', '<mov~~qword ptr [rax], rcx>', '<mov~~rcx, qword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rsp + 0x60]>', '<mov~~qword ptr [rax + 0x10], rcx>', '<mov~~rcx, qword ptr [rsp + 0x58]>', '<movsxd~~rax, dword ptr [rsp + 0x54]>', '<add~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x60]>', '<mov~~qword ptr [rax + 8], rcx>', '<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rsi, qword ptr [rax + 0x20]>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<add~~rcx, 8>', '<mov~~edx, 8>', '<call~~0x500020>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<sub~~eax, 1>', '<je~~0x4001fe>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~ecx, dword ptr [rsp + 0x14]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0xae]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 16, 'blockInsts': ['<jmp~~0x400272>']}], 'cfg_edge_info': [(16, 20), (13, 17), (19, 17), (11, 13), (20, 23), (22, 13), (15, 19), (12, 15)]}]}
{'aasc_decode_frame': [4194809, 4194814, 4194928, 4194930]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_after/no/aasc.o---after
The extraction of function: aasc_decode_frame
[4194809, 4194814, 4194928, 4194930]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 32 nodes and 44 edges in CFGEmulated.
It has 32 nodes and 42 edges in CDG.
It has 495 nodes and 596 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194809, 4194814, 4194928, 4194930]
{4194692, 4194565, 4194958, 4194710, 4194968, 4194717, 4194613, 4194998, 4194615, 4195007, 4194628, 4194500, 4194633, 4195017, 4195029, 4194519, 4194776, 4194528, 4194928, 4194416, 4194930, 4194679, 4194552, 4194809, 4194814}
[13, 24, 0, 7, 29, 12, 17, 25, 5, 9, 15, 1, 31, 30, 6, 19, 14, 16, 28, 27, 18, 22, 10, 11, 3, 2]
The execution time of patched slicing information extraction via angr: 0:00:03.238001
{'aasc_decode_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400184>, <DisassemblerInsn "mov" for 0x400189>, <DisassemblerInsn "sub" for 0x40018f>, <DisassemblerInsn "mov" for 0x400192>, <DisassemblerInsn "cmp" for 0x400196>, <DisassemblerInsn "jl" for 0x40019b>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001d8>, <DisassemblerInsn "mov" for 0x4001dc>, <DisassemblerInsn "movsxd" for 0x4001e1>, <DisassemblerInsn "add" for 0x4001e4>, <DisassemblerInsn "mov" for 0x4001e7>, <DisassemblerInsn "mov" for 0x4001ec>, <DisassemblerInsn "add" for 0x4001f0>, <DisassemblerInsn "mov" for 0x4001f3>, <DisassemblerInsn "jmp" for 0x4001f7>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400070>, <DisassemblerInsn "mov" for 0x400074>, <DisassemblerInsn "mov" for 0x400079>, <DisassemblerInsn "mov" for 0x40007e>, <DisassemblerInsn "mov" for 0x400083>, <DisassemblerInsn "mov" for 0x400088>, <DisassemblerInsn "mov" for 0x40008d>, <DisassemblerInsn "mov" for 0x400091>, <DisassemblerInsn "mov" for 0x400096>, <DisassemblerInsn "mov" for 0x40009b>, <DisassemblerInsn "mov" for 0x40009e>, <DisassemblerInsn "mov" for 0x4000a2>, <DisassemblerInsn "mov" for 0x4000a7>, <DisassemblerInsn "mov" for 0x4000ab>, <DisassemblerInsn "cmp" for 0x4000b0>, <DisassemblerInsn "jge" for 0x4000b5>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400105>, <DisassemblerInsn "mov" for 0x40010a>, <DisassemblerInsn "mov" for 0x40010c>, <DisassemblerInsn "mov" for 0x400110>, <DisassemblerInsn "add" for 0x400115>, <DisassemblerInsn "mov" for 0x400119>, <DisassemblerInsn "mov" for 0x40011e>, <DisassemblerInsn "add" for 0x400122>, <DisassemblerInsn "mov" for 0x400125>, <DisassemblerInsn "mov" for 0x400129>, <DisassemblerInsn "mov" for 0x40012d>, <DisassemblerInsn "test" for 0x400131>, <DisassemblerInsn "je" for 0x400133>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40028e>, <DisassemblerInsn "jmp" for 0x400296>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400177>, <DisassemblerInsn "jmp" for 0x40017f>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001fe>, <DisassemblerInsn "add" for 0x400203>, <DisassemblerInsn "mov" for 0x400207>, <DisassemblerInsn "mov" for 0x40020c>, <DisassemblerInsn "mov" for 0x400210>, <DisassemblerInsn "mov" for 0x400215>, <DisassemblerInsn "mov" for 0x40021a>, <DisassemblerInsn "mov" for 0x40021e>, <DisassemblerInsn "mov" for 0x400223>, <DisassemblerInsn "mov" for 0x400228>, <DisassemblerInsn "mov" for 0x40022b>, <DisassemblerInsn "mov" for 0x400230>, <DisassemblerInsn "mov" for 0x400235>, <DisassemblerInsn "mov" for 0x400239>, <DisassemblerInsn "movsxd" for 0x40023e>, <DisassemblerInsn "add" for 0x400243>, <DisassemblerInsn "mov" for 0x400246>, <DisassemblerInsn "mov" for 0x40024b>, <DisassemblerInsn "mov" for 0x40024f>, <DisassemblerInsn "mov" for 0x400254>, <DisassemblerInsn "mov" for 0x400259>, <DisassemblerInsn "mov" for 0x40025d>, <DisassemblerInsn "add" for 0x400262>, <DisassemblerInsn "mov" for 0x400266>, <DisassemblerInsn "call" for 0x40026b>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400270>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000d7>, <DisassemblerInsn "cmp" for 0x4000db>, <DisassemblerInsn "jge" for 0x4000de>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400149>, <DisassemblerInsn "imul" for 0x40014e>, <DisassemblerInsn "add" for 0x400155>, <DisassemblerInsn "and" for 0x400158>, <DisassemblerInsn "mov" for 0x40015b>, <DisassemblerInsn "mov" for 0x40015f>, <DisassemblerInsn "mov" for 0x400163>, <DisassemblerInsn "mov" for 0x400167>, <DisassemblerInsn "imul" for 0x40016c>, <DisassemblerInsn "cmp" for 0x400173>, <DisassemblerInsn "jge" for 0x400175>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001f9>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000b7>, <DisassemblerInsn "jmp" for 0x4000bf>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002c9>, <DisassemblerInsn "mov" for 0x4002ce>, <DisassemblerInsn "mov" for 0x4002d1>, <DisassemblerInsn "mov" for 0x4002d5>, <DisassemblerInsn "add" for 0x4002d9>, <DisassemblerInsn "ret" for 0x4002dd>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002bf>, <DisassemblerInsn "mov" for 0x4002c3>, <DisassemblerInsn "jmp" for 0x4002c7>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000e0>, <DisassemblerInsn "mov" for 0x4000e5>, <DisassemblerInsn "lea" for 0x4000ea>, <DisassemblerInsn "mov" for 0x4000f1>, <DisassemblerInsn "call" for 0x4000f3>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400298>, <DisassemblerInsn "mov" for 0x40029d>, <DisassemblerInsn "mov" for 0x4002a3>, <DisassemblerInsn "mov" for 0x4002a8>, <DisassemblerInsn "mov" for 0x4002ad>, <DisassemblerInsn "call" for 0x4002b1>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400137>, <DisassemblerInsn "sub" for 0x40013b>, <DisassemblerInsn "je" for 0x40013e>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40019d>, <DisassemblerInsn "mov" for 0x4001a2>, <DisassemblerInsn "mov" for 0x4001a6>, <DisassemblerInsn "mov" for 0x4001a9>, <DisassemblerInsn "mov" for 0x4001ad>, <DisassemblerInsn "mov" for 0x4001b2>, <DisassemblerInsn "imul" for 0x4001b6>, <DisassemblerInsn "cdqe" for 0x4001ba>, <DisassemblerInsn "add" for 0x4001bc>, <DisassemblerInsn "mov" for 0x4001bf>, <DisassemblerInsn "mov" for 0x4001c4>, <DisassemblerInsn "imul" for 0x4001c9>, <DisassemblerInsn "movsxd" for 0x4001d0>, <DisassemblerInsn "call" for 0x4001d3>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400196>, <DisassemblerInsn "jl" for 0x40019b>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002b6>, <DisassemblerInsn "cmp" for 0x4002ba>, <DisassemblerInsn "jge" for 0x4002bd>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400144>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400272>, <DisassemblerInsn "mov" for 0x400277>, <DisassemblerInsn "mov" for 0x40027b>, <DisassemblerInsn "lea" for 0x400280>, <DisassemblerInsn "mov" for 0x400287>, <DisassemblerInsn "call" for 0x400289>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400135>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000f8>, <DisassemblerInsn "mov" for 0x4000fc>, <DisassemblerInsn "jmp" for 0x400100>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002d5>, <DisassemblerInsn "add" for 0x4002d9>, <DisassemblerInsn "ret" for 0x4002dd>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c4>, <DisassemblerInsn "mov" for 0x4000c9>, <DisassemblerInsn "mov" for 0x4000ce>, <DisassemblerInsn "call" for 0x4000d2>]'}], 'cfg_block_detailed_info': [{'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~eax, dword ptr [rax + 0x98]>', '<sub~~eax, 1>', '<mov~~dword ptr [rsp + 0x10], eax>', '<cmp~~dword ptr [rsp + 0x10], 0>', '<jl~~0x4001f9>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xc]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<movsxd~~rcx, ecx>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x28], rax>', '<mov~~eax, dword ptr [rsp + 0x10]>', '<add~~eax, -1>', '<mov~~dword ptr [rsp + 0x10], eax>', '<jmp~~0x400196>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x68>', '<mov~~qword ptr [rsp + 0x48], rdi>', '<mov~~qword ptr [rsp + 0x40], rsi>', '<mov~~qword ptr [rsp + 0x38], rdx>', '<mov~~qword ptr [rsp + 0x30], rcx>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 0x28], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rax + 0x20]>', '<mov~~dword ptr [rsp + 0x24], eax>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rax + 0x48]>', '<mov~~qword ptr [rsp + 0x18], rax>', '<cmp~~dword ptr [rsp + 0x24], 4>', '<jge~~0x4000c4>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x14], eax>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x28], rax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~eax, -4>', '<mov~~dword ptr [rsp + 0x24], eax>', '<mov~~eax, dword ptr [rsp + 0x14]>', '<mov~~dword ptr [rsp + 4], eax>', '<test~~eax, eax>', '<je~~0x400149>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~dword ptr [rsp + 0x50], 0xc1444e49>', '<jmp~~0x4002d5>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~dword ptr [rsp + 0x50], 0xc1444e49>', '<jmp~~0x4002d5>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x18]>', '<add~~rdx, 8>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<mov~~qword ptr [rsp + 0x60], rdx>', '<mov~~qword ptr [rsp + 0x58], rcx>', '<mov~~dword ptr [rsp + 0x54], eax>', '<mov~~rcx, qword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rsp + 0x60]>', '<mov~~qword ptr [rax], rcx>', '<mov~~rcx, qword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rsp + 0x60]>', '<mov~~qword ptr [rax + 0x10], rcx>', '<mov~~rcx, qword ptr [rsp + 0x58]>', '<movsxd~~rax, dword ptr [rsp + 0x54]>', '<add~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x60]>', '<mov~~qword ptr [rax + 8], rcx>', '<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rsi, qword ptr [rax + 0x20]>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<add~~rcx, 8>', '<mov~~edx, 8>', '<call~~0x500020>']}, {'block_Idx': 25, 'blockInsts': ['<jmp~~0x400298>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~dword ptr [rsp + 8], eax>', '<cmp~~eax, 0>', '<jge~~0x400105>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<imul~~eax, dword ptr [rax + 0x94], 3>', '<add~~eax, 3>', '<and~~eax, 0xfffffffc>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<mov~~ecx, dword ptr [rsp + 0xc]>', '<mov~~rdx, qword ptr [rsp + 0x48]>', '<imul~~ecx, dword ptr [rdx + 0x98]>', '<cmp~~eax, ecx>', '<jge~~0x400184>']}, {'block_Idx': 15, 'blockInsts': ['<jmp~~0x400298>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~dword ptr [rsp + 0x50], 0xc1444e49>', '<jmp~~0x4002d5>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rax + 0x20]>', '<mov~~dword ptr [rsp + 0x50], eax>', '<mov~~eax, dword ptr [rsp + 0x50]>', '<add~~rsp, 0x68>', '<ret~~>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<mov~~dword ptr [rsp + 0x50], eax>', '<jmp~~0x4002d5>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x22d]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax], 1>', '<mov~~rdi, qword ptr [rsp + 0x40]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rsi, qword ptr [rax + 0x20]>', '<call~~0x500028>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<sub~~eax, 1>', '<je~~0x4001fe>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<mov~~rcx, qword ptr [rcx + 0x20]>', '<imul~~eax, dword ptr [rcx + 0x40]>', '<cdqe~~>', '<add~~rdi, rax>', '<mov~~rsi, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<imul~~eax, dword ptr [rax + 0x94], 3>', '<movsxd~~rdx, eax>', '<call~~0x500018>']}, {'block_Idx': 28, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x10], 0>', '<jl~~0x4001f9>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~dword ptr [rsp + 8], eax>', '<cmp~~eax, 0>', '<jge~~0x4002c9>']}, {'block_Idx': 18, 'blockInsts': ['<jmp~~0x400272>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~ecx, dword ptr [rsp + 0x14]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0xae]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 10, 'blockInsts': ['<jmp~~0x400137>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<mov~~dword ptr [rsp + 0x50], eax>', '<jmp~~0x4002d5>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50]>', '<add~~rsp, 0x68>', '<ret~~>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rsi, qword ptr [rax + 0x20]>', '<call~~0x500008>']}], 'cfg_edge_info': [(5, 7), (30, 3), (0, 2), (28, 15), (22, 29), (2, 5), (1, 3), (27, 31), (19, 27), (25, 19), (6, 11), (7, 10), (12, 3), (18, 22), (5, 6), (14, 18), (0, 1), (9, 13), (10, 14), (27, 30), (13, 16), (7, 9), (29, 3), (24, 28), (15, 19), (16, 24), (14, 17), (28, 16), (9, 12), (11, 3), (17, 25), (13, 15)], 'cdg_edge_info': [(5, 7), (0, 2), (14, 19), (14, 25), (14, 22), (0, 5), (28, 24), (27, 31), (7, 10), (14, 3), (5, 6), (5, 3), (14, 18), (27, 3), (9, 13), (9, 19), (14, 27), (27, 30), (13, 16), (7, 9), (13, 28), (7, 14), (5, 11), (9, 3), (14, 17), (28, 16), (0, 3), (9, 12), (9, 15), (14, 29), (28, 28), (9, 27), (13, 24)], 'ddg_edge_info': [(7, 17), (0, 2), (12, 31), (22, 29), (2, 5), (0, 17), (2, 14), (19, 30), (2, 17), (19, 27), (6, 11), (16, 19), (7, 16), (13, 24), (16, 28), (7, 22), (29, 31), (0, 7), (22, 31), (9, 16), (9, 13), (0, 16), (2, 7), (27, 30), (0, 13), (0, 19), (2, 16), (24, 16), (13, 16), (2, 13), (30, 31), (7, 9), (0, 22), (2, 19), (11, 31), (2, 22), (13, 28), (24, 28), (0, 31), (16, 24), (2, 31), (6, 31), (5, 11), (17, 19), (0, 9), (0, 6), (2, 9), (9, 24), (2, 12), (2, 6), (0, 24), (19, 31), (7, 14)]}]}
{'aasc_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 93, 'instruction': 'jmp\t.LBB1_14'}, {'instIndex': 94, 'instruction': 'movq\t0x18(%rsp), %rdx'}, {'instIndex': 95, 'instruction': 'addq\t$8, %rdx'}, {'instIndex': 96, 'instruction': 'movq\t0x28(%rsp), %rcx'}, {'instIndex': 97, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 98, 'instruction': 'movq\t%rdx, 0x60(%rsp)'}, {'instIndex': 99, 'instruction': 'movq\t%rcx, 0x58(%rsp)'}, {'instIndex': 100, 'instruction': 'movl\t%eax, 0x54(%rsp)'}, {'instIndex': 112, 'instruction': 'movq\t0x48(%rsp), %rdi'}, {'instIndex': 113, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 114, 'instruction': 'movq\t0x20(%rax), %rsi'}, {'instIndex': 115, 'instruction': 'movq\t0x18(%rsp), %rcx'}, {'instIndex': 116, 'instruction': 'addq\t$8, %rcx'}, {'instIndex': 117, 'instruction': 'movl\t$8, %edx'}, {'instIndex': 118, 'instruction': 'callq\tff_msrle_decode@PLT'}, {'instIndex': 119, 'instruction': 'jmp\t.LBB1_14'}, {'instIndex': 120, 'instruction': 'movq\t0x48(%rsp), %rdi'}, {'instIndex': 121, 'instruction': 'movl\t0x14(%rsp), %ecx'}, {'instIndex': 122, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 123, 'instruction': 'leaq\t.L.str.3(%rip), %rdx'}, {'instIndex': 124, 'instruction': 'movb\t$0, %al'}, {'instIndex': 125, 'instruction': 'callq\tav_log@PLT'}]}]}
The case of compiler clang with optimization O0.
Patched source code file: aasc.c
Patched function: 1---static int aasc_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_after/O0/aasc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_after/O0/aasc.s---aasc_decode_frame---after
function id: 1
function flag: True
There are 146 instructions for function: aasc_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '85', 'end': 91}, 'before': {'start': '85', 'end': 91}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 93, 'instruction': 'jmp\t.LBB1_14'}, {'instIndex': 94, 'instruction': 'movq\t0x18(%rsp), %rdx'}, {'instIndex': 95, 'instruction': 'addq\t$8, %rdx'}, {'instIndex': 96, 'instruction': 'movq\t0x28(%rsp), %rcx'}, {'instIndex': 97, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 98, 'instruction': 'movq\t%rdx, 0x60(%rsp)'}, {'instIndex': 99, 'instruction': 'movq\t%rcx, 0x58(%rsp)'}, {'instIndex': 100, 'instruction': 'movl\t%eax, 0x54(%rsp)'}, {'instIndex': 112, 'instruction': 'movq\t0x48(%rsp), %rdi'}, {'instIndex': 113, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 114, 'instruction': 'movq\t0x20(%rax), %rsi'}, {'instIndex': 115, 'instruction': 'movq\t0x18(%rsp), %rcx'}, {'instIndex': 116, 'instruction': 'addq\t$8, %rcx'}, {'instIndex': 117, 'instruction': 'movl\t$8, %edx'}, {'instIndex': 118, 'instruction': 'callq\tff_msrle_decode@PLT'}, {'instIndex': 119, 'instruction': 'jmp\t.LBB1_14'}, {'instIndex': 120, 'instruction': 'movq\t0x48(%rsp), %rdi'}, {'instIndex': 121, 'instruction': 'movl\t0x14(%rsp), %ecx'}, {'instIndex': 122, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 123, 'instruction': 'leaq\t.L.str.3(%rip), %rdx'}, {'instIndex': 124, 'instruction': 'movb\t$0, %al'}, {'instIndex': 125, 'instruction': 'callq\tav_log@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_after/O0/aasc.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_after/O0/aasc.o---after
The extraction of function: aasc_decode_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 42 nodes and 55 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 146 instructions in binary file.
[4194809, 4194814, 4194928, 4194930]
The execution time of patched subCFG information extraction via angr: 0:00:00.146630
{'aasc_decode_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400184>, <DisassemblerInsn "mov" for 0x400189>, <DisassemblerInsn "sub" for 0x40018f>, <DisassemblerInsn "mov" for 0x400192>, <DisassemblerInsn "cmp" for 0x400196>, <DisassemblerInsn "jl" for 0x40019b>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400196>, <DisassemblerInsn "jl" for 0x40019b>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400270>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40028e>, <DisassemblerInsn "jmp" for 0x400296>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001f9>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400298>, <DisassemblerInsn "mov" for 0x40029d>, <DisassemblerInsn "mov" for 0x4002a3>, <DisassemblerInsn "mov" for 0x4002a8>, <DisassemblerInsn "mov" for 0x4002ad>, <DisassemblerInsn "call" for 0x4002b1>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001fe>, <DisassemblerInsn "add" for 0x400203>, <DisassemblerInsn "mov" for 0x400207>, <DisassemblerInsn "mov" for 0x40020c>, <DisassemblerInsn "mov" for 0x400210>, <DisassemblerInsn "mov" for 0x400215>, <DisassemblerInsn "mov" for 0x40021a>, <DisassemblerInsn "mov" for 0x40021e>, <DisassemblerInsn "mov" for 0x400223>, <DisassemblerInsn "mov" for 0x400228>, <DisassemblerInsn "mov" for 0x40022b>, <DisassemblerInsn "mov" for 0x400230>, <DisassemblerInsn "mov" for 0x400235>, <DisassemblerInsn "mov" for 0x400239>, <DisassemblerInsn "movsxd" for 0x40023e>, <DisassemblerInsn "add" for 0x400243>, <DisassemblerInsn "mov" for 0x400246>, <DisassemblerInsn "mov" for 0x40024b>, <DisassemblerInsn "mov" for 0x40024f>, <DisassemblerInsn "mov" for 0x400254>, <DisassemblerInsn "mov" for 0x400259>, <DisassemblerInsn "mov" for 0x40025d>, <DisassemblerInsn "add" for 0x400262>, <DisassemblerInsn "mov" for 0x400266>, <DisassemblerInsn "call" for 0x40026b>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400137>, <DisassemblerInsn "sub" for 0x40013b>, <DisassemblerInsn "je" for 0x40013e>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400272>, <DisassemblerInsn "mov" for 0x400277>, <DisassemblerInsn "mov" for 0x40027b>, <DisassemblerInsn "lea" for 0x400280>, <DisassemblerInsn "mov" for 0x400287>, <DisassemblerInsn "call" for 0x400289>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400144>]'}], 'cfg_block_detailed_info': [{'block_Idx': 11, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~eax, dword ptr [rax + 0x98]>', '<sub~~eax, 1>', '<mov~~dword ptr [rsp + 0x10], eax>', '<cmp~~dword ptr [rsp + 0x10], 0>', '<jl~~0x4001f9>']}, {'block_Idx': 22, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x10], 0>', '<jl~~0x4001f9>']}, {'block_Idx': 19, 'blockInsts': ['<jmp~~0x400298>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~dword ptr [rsp + 0x50], 0xc1444e49>', '<jmp~~0x4002d5>']}, {'block_Idx': 13, 'blockInsts': ['<jmp~~0x400298>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax], 1>', '<mov~~rdi, qword ptr [rsp + 0x40]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rsi, qword ptr [rax + 0x20]>', '<call~~0x500028>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x18]>', '<add~~rdx, 8>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<mov~~qword ptr [rsp + 0x60], rdx>', '<mov~~qword ptr [rsp + 0x58], rcx>', '<mov~~dword ptr [rsp + 0x54], eax>', '<mov~~rcx, qword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rsp + 0x60]>', '<mov~~qword ptr [rax], rcx>', '<mov~~rcx, qword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rsp + 0x60]>', '<mov~~qword ptr [rax + 0x10], rcx>', '<mov~~rcx, qword ptr [rsp + 0x58]>', '<movsxd~~rax, dword ptr [rsp + 0x54]>', '<add~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x60]>', '<mov~~qword ptr [rax + 8], rcx>', '<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rsi, qword ptr [rax + 0x20]>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<add~~rcx, 8>', '<mov~~edx, 8>', '<call~~0x500020>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<sub~~eax, 1>', '<je~~0x4001fe>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~ecx, dword ptr [rsp + 0x14]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0xae]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 16, 'blockInsts': ['<jmp~~0x400272>']}], 'cfg_edge_info': [(16, 20), (13, 17), (19, 17), (11, 13), (20, 23), (22, 13), (15, 19), (12, 15)]}]}
{'aasc_decode_frame': [4194809, 4194814, 4194928, 4194930]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_after/O0/aasc.o---after
The extraction of function: aasc_decode_frame
[4194809, 4194814, 4194928, 4194930]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 32 nodes and 44 edges in CFGEmulated.
It has 32 nodes and 42 edges in CDG.
It has 495 nodes and 596 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194809, 4194814, 4194928, 4194930]
{4194692, 4194565, 4194958, 4194710, 4194968, 4194717, 4194613, 4194998, 4194615, 4195007, 4194628, 4194500, 4194633, 4195017, 4195029, 4194519, 4194776, 4194528, 4194928, 4194416, 4194930, 4194679, 4194552, 4194809, 4194814}
[13, 24, 0, 7, 29, 12, 17, 25, 5, 9, 15, 1, 31, 30, 6, 19, 14, 16, 28, 27, 18, 22, 10, 11, 3, 2]
The execution time of patched slicing information extraction via angr: 0:00:03.232268
{'aasc_decode_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400184>, <DisassemblerInsn "mov" for 0x400189>, <DisassemblerInsn "sub" for 0x40018f>, <DisassemblerInsn "mov" for 0x400192>, <DisassemblerInsn "cmp" for 0x400196>, <DisassemblerInsn "jl" for 0x40019b>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001d8>, <DisassemblerInsn "mov" for 0x4001dc>, <DisassemblerInsn "movsxd" for 0x4001e1>, <DisassemblerInsn "add" for 0x4001e4>, <DisassemblerInsn "mov" for 0x4001e7>, <DisassemblerInsn "mov" for 0x4001ec>, <DisassemblerInsn "add" for 0x4001f0>, <DisassemblerInsn "mov" for 0x4001f3>, <DisassemblerInsn "jmp" for 0x4001f7>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400070>, <DisassemblerInsn "mov" for 0x400074>, <DisassemblerInsn "mov" for 0x400079>, <DisassemblerInsn "mov" for 0x40007e>, <DisassemblerInsn "mov" for 0x400083>, <DisassemblerInsn "mov" for 0x400088>, <DisassemblerInsn "mov" for 0x40008d>, <DisassemblerInsn "mov" for 0x400091>, <DisassemblerInsn "mov" for 0x400096>, <DisassemblerInsn "mov" for 0x40009b>, <DisassemblerInsn "mov" for 0x40009e>, <DisassemblerInsn "mov" for 0x4000a2>, <DisassemblerInsn "mov" for 0x4000a7>, <DisassemblerInsn "mov" for 0x4000ab>, <DisassemblerInsn "cmp" for 0x4000b0>, <DisassemblerInsn "jge" for 0x4000b5>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400105>, <DisassemblerInsn "mov" for 0x40010a>, <DisassemblerInsn "mov" for 0x40010c>, <DisassemblerInsn "mov" for 0x400110>, <DisassemblerInsn "add" for 0x400115>, <DisassemblerInsn "mov" for 0x400119>, <DisassemblerInsn "mov" for 0x40011e>, <DisassemblerInsn "add" for 0x400122>, <DisassemblerInsn "mov" for 0x400125>, <DisassemblerInsn "mov" for 0x400129>, <DisassemblerInsn "mov" for 0x40012d>, <DisassemblerInsn "test" for 0x400131>, <DisassemblerInsn "je" for 0x400133>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40028e>, <DisassemblerInsn "jmp" for 0x400296>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400177>, <DisassemblerInsn "jmp" for 0x40017f>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001fe>, <DisassemblerInsn "add" for 0x400203>, <DisassemblerInsn "mov" for 0x400207>, <DisassemblerInsn "mov" for 0x40020c>, <DisassemblerInsn "mov" for 0x400210>, <DisassemblerInsn "mov" for 0x400215>, <DisassemblerInsn "mov" for 0x40021a>, <DisassemblerInsn "mov" for 0x40021e>, <DisassemblerInsn "mov" for 0x400223>, <DisassemblerInsn "mov" for 0x400228>, <DisassemblerInsn "mov" for 0x40022b>, <DisassemblerInsn "mov" for 0x400230>, <DisassemblerInsn "mov" for 0x400235>, <DisassemblerInsn "mov" for 0x400239>, <DisassemblerInsn "movsxd" for 0x40023e>, <DisassemblerInsn "add" for 0x400243>, <DisassemblerInsn "mov" for 0x400246>, <DisassemblerInsn "mov" for 0x40024b>, <DisassemblerInsn "mov" for 0x40024f>, <DisassemblerInsn "mov" for 0x400254>, <DisassemblerInsn "mov" for 0x400259>, <DisassemblerInsn "mov" for 0x40025d>, <DisassemblerInsn "add" for 0x400262>, <DisassemblerInsn "mov" for 0x400266>, <DisassemblerInsn "call" for 0x40026b>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400270>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000d7>, <DisassemblerInsn "cmp" for 0x4000db>, <DisassemblerInsn "jge" for 0x4000de>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400149>, <DisassemblerInsn "imul" for 0x40014e>, <DisassemblerInsn "add" for 0x400155>, <DisassemblerInsn "and" for 0x400158>, <DisassemblerInsn "mov" for 0x40015b>, <DisassemblerInsn "mov" for 0x40015f>, <DisassemblerInsn "mov" for 0x400163>, <DisassemblerInsn "mov" for 0x400167>, <DisassemblerInsn "imul" for 0x40016c>, <DisassemblerInsn "cmp" for 0x400173>, <DisassemblerInsn "jge" for 0x400175>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001f9>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000b7>, <DisassemblerInsn "jmp" for 0x4000bf>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002c9>, <DisassemblerInsn "mov" for 0x4002ce>, <DisassemblerInsn "mov" for 0x4002d1>, <DisassemblerInsn "mov" for 0x4002d5>, <DisassemblerInsn "add" for 0x4002d9>, <DisassemblerInsn "ret" for 0x4002dd>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002bf>, <DisassemblerInsn "mov" for 0x4002c3>, <DisassemblerInsn "jmp" for 0x4002c7>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000e0>, <DisassemblerInsn "mov" for 0x4000e5>, <DisassemblerInsn "lea" for 0x4000ea>, <DisassemblerInsn "mov" for 0x4000f1>, <DisassemblerInsn "call" for 0x4000f3>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400298>, <DisassemblerInsn "mov" for 0x40029d>, <DisassemblerInsn "mov" for 0x4002a3>, <DisassemblerInsn "mov" for 0x4002a8>, <DisassemblerInsn "mov" for 0x4002ad>, <DisassemblerInsn "call" for 0x4002b1>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400137>, <DisassemblerInsn "sub" for 0x40013b>, <DisassemblerInsn "je" for 0x40013e>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40019d>, <DisassemblerInsn "mov" for 0x4001a2>, <DisassemblerInsn "mov" for 0x4001a6>, <DisassemblerInsn "mov" for 0x4001a9>, <DisassemblerInsn "mov" for 0x4001ad>, <DisassemblerInsn "mov" for 0x4001b2>, <DisassemblerInsn "imul" for 0x4001b6>, <DisassemblerInsn "cdqe" for 0x4001ba>, <DisassemblerInsn "add" for 0x4001bc>, <DisassemblerInsn "mov" for 0x4001bf>, <DisassemblerInsn "mov" for 0x4001c4>, <DisassemblerInsn "imul" for 0x4001c9>, <DisassemblerInsn "movsxd" for 0x4001d0>, <DisassemblerInsn "call" for 0x4001d3>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400196>, <DisassemblerInsn "jl" for 0x40019b>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002b6>, <DisassemblerInsn "cmp" for 0x4002ba>, <DisassemblerInsn "jge" for 0x4002bd>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400144>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400272>, <DisassemblerInsn "mov" for 0x400277>, <DisassemblerInsn "mov" for 0x40027b>, <DisassemblerInsn "lea" for 0x400280>, <DisassemblerInsn "mov" for 0x400287>, <DisassemblerInsn "call" for 0x400289>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400135>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000f8>, <DisassemblerInsn "mov" for 0x4000fc>, <DisassemblerInsn "jmp" for 0x400100>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002d5>, <DisassemblerInsn "add" for 0x4002d9>, <DisassemblerInsn "ret" for 0x4002dd>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c4>, <DisassemblerInsn "mov" for 0x4000c9>, <DisassemblerInsn "mov" for 0x4000ce>, <DisassemblerInsn "call" for 0x4000d2>]'}], 'cfg_block_detailed_info': [{'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~eax, dword ptr [rax + 0x98]>', '<sub~~eax, 1>', '<mov~~dword ptr [rsp + 0x10], eax>', '<cmp~~dword ptr [rsp + 0x10], 0>', '<jl~~0x4001f9>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xc]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<movsxd~~rcx, ecx>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x28], rax>', '<mov~~eax, dword ptr [rsp + 0x10]>', '<add~~eax, -1>', '<mov~~dword ptr [rsp + 0x10], eax>', '<jmp~~0x400196>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x68>', '<mov~~qword ptr [rsp + 0x48], rdi>', '<mov~~qword ptr [rsp + 0x40], rsi>', '<mov~~qword ptr [rsp + 0x38], rdx>', '<mov~~qword ptr [rsp + 0x30], rcx>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 0x28], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rax + 0x20]>', '<mov~~dword ptr [rsp + 0x24], eax>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rax + 0x48]>', '<mov~~qword ptr [rsp + 0x18], rax>', '<cmp~~dword ptr [rsp + 0x24], 4>', '<jge~~0x4000c4>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x14], eax>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x28], rax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~eax, -4>', '<mov~~dword ptr [rsp + 0x24], eax>', '<mov~~eax, dword ptr [rsp + 0x14]>', '<mov~~dword ptr [rsp + 4], eax>', '<test~~eax, eax>', '<je~~0x400149>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~dword ptr [rsp + 0x50], 0xc1444e49>', '<jmp~~0x4002d5>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~dword ptr [rsp + 0x50], 0xc1444e49>', '<jmp~~0x4002d5>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x18]>', '<add~~rdx, 8>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<mov~~qword ptr [rsp + 0x60], rdx>', '<mov~~qword ptr [rsp + 0x58], rcx>', '<mov~~dword ptr [rsp + 0x54], eax>', '<mov~~rcx, qword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rsp + 0x60]>', '<mov~~qword ptr [rax], rcx>', '<mov~~rcx, qword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rsp + 0x60]>', '<mov~~qword ptr [rax + 0x10], rcx>', '<mov~~rcx, qword ptr [rsp + 0x58]>', '<movsxd~~rax, dword ptr [rsp + 0x54]>', '<add~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x60]>', '<mov~~qword ptr [rax + 8], rcx>', '<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rsi, qword ptr [rax + 0x20]>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<add~~rcx, 8>', '<mov~~edx, 8>', '<call~~0x500020>']}, {'block_Idx': 25, 'blockInsts': ['<jmp~~0x400298>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~dword ptr [rsp + 8], eax>', '<cmp~~eax, 0>', '<jge~~0x400105>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<imul~~eax, dword ptr [rax + 0x94], 3>', '<add~~eax, 3>', '<and~~eax, 0xfffffffc>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<mov~~ecx, dword ptr [rsp + 0xc]>', '<mov~~rdx, qword ptr [rsp + 0x48]>', '<imul~~ecx, dword ptr [rdx + 0x98]>', '<cmp~~eax, ecx>', '<jge~~0x400184>']}, {'block_Idx': 15, 'blockInsts': ['<jmp~~0x400298>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~dword ptr [rsp + 0x50], 0xc1444e49>', '<jmp~~0x4002d5>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rax + 0x20]>', '<mov~~dword ptr [rsp + 0x50], eax>', '<mov~~eax, dword ptr [rsp + 0x50]>', '<add~~rsp, 0x68>', '<ret~~>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<mov~~dword ptr [rsp + 0x50], eax>', '<jmp~~0x4002d5>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x22d]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax], 1>', '<mov~~rdi, qword ptr [rsp + 0x40]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rsi, qword ptr [rax + 0x20]>', '<call~~0x500028>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<sub~~eax, 1>', '<je~~0x4001fe>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<mov~~rcx, qword ptr [rcx + 0x20]>', '<imul~~eax, dword ptr [rcx + 0x40]>', '<cdqe~~>', '<add~~rdi, rax>', '<mov~~rsi, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<imul~~eax, dword ptr [rax + 0x94], 3>', '<movsxd~~rdx, eax>', '<call~~0x500018>']}, {'block_Idx': 28, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x10], 0>', '<jl~~0x4001f9>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~dword ptr [rsp + 8], eax>', '<cmp~~eax, 0>', '<jge~~0x4002c9>']}, {'block_Idx': 18, 'blockInsts': ['<jmp~~0x400272>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~ecx, dword ptr [rsp + 0x14]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0xae]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 10, 'blockInsts': ['<jmp~~0x400137>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<mov~~dword ptr [rsp + 0x50], eax>', '<jmp~~0x4002d5>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50]>', '<add~~rsp, 0x68>', '<ret~~>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rsi, qword ptr [rax + 0x20]>', '<call~~0x500008>']}], 'cfg_edge_info': [(5, 7), (30, 3), (0, 2), (28, 15), (22, 29), (2, 5), (1, 3), (27, 31), (19, 27), (25, 19), (6, 11), (7, 10), (12, 3), (18, 22), (5, 6), (14, 18), (0, 1), (9, 13), (10, 14), (27, 30), (13, 16), (7, 9), (29, 3), (24, 28), (15, 19), (16, 24), (14, 17), (28, 16), (9, 12), (11, 3), (17, 25), (13, 15)], 'cdg_edge_info': [(5, 7), (0, 2), (14, 19), (14, 25), (14, 22), (0, 5), (28, 24), (27, 31), (7, 10), (14, 3), (5, 6), (5, 3), (14, 18), (27, 3), (9, 13), (9, 19), (14, 27), (27, 30), (13, 16), (7, 9), (13, 28), (7, 14), (5, 11), (9, 3), (14, 17), (28, 16), (0, 3), (9, 12), (9, 15), (14, 29), (28, 28), (9, 27), (13, 24)], 'ddg_edge_info': [(7, 17), (0, 2), (12, 31), (22, 29), (2, 5), (0, 17), (2, 14), (19, 30), (2, 17), (19, 27), (6, 11), (16, 19), (7, 16), (13, 24), (16, 28), (7, 22), (29, 31), (0, 7), (22, 31), (9, 16), (9, 13), (0, 16), (2, 7), (27, 30), (0, 13), (0, 19), (2, 16), (24, 16), (13, 16), (2, 13), (30, 31), (7, 9), (0, 22), (2, 19), (11, 31), (2, 22), (13, 28), (24, 28), (0, 31), (16, 24), (2, 31), (6, 31), (5, 11), (17, 19), (0, 9), (0, 6), (2, 9), (9, 24), (2, 12), (2, 6), (0, 24), (19, 31), (7, 14)]}]}
{'aasc_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 93, 'instruction': 'jmp\t.LBB1_14'}, {'instIndex': 94, 'instruction': 'movq\t0x18(%rsp), %rdx'}, {'instIndex': 95, 'instruction': 'addq\t$8, %rdx'}, {'instIndex': 96, 'instruction': 'movq\t0x28(%rsp), %rcx'}, {'instIndex': 97, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 98, 'instruction': 'movq\t%rdx, 0x60(%rsp)'}, {'instIndex': 99, 'instruction': 'movq\t%rcx, 0x58(%rsp)'}, {'instIndex': 100, 'instruction': 'movl\t%eax, 0x54(%rsp)'}, {'instIndex': 112, 'instruction': 'movq\t0x48(%rsp), %rdi'}, {'instIndex': 113, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 114, 'instruction': 'movq\t0x20(%rax), %rsi'}, {'instIndex': 115, 'instruction': 'movq\t0x18(%rsp), %rcx'}, {'instIndex': 116, 'instruction': 'addq\t$8, %rcx'}, {'instIndex': 117, 'instruction': 'movl\t$8, %edx'}, {'instIndex': 118, 'instruction': 'callq\tff_msrle_decode@PLT'}, {'instIndex': 119, 'instruction': 'jmp\t.LBB1_14'}, {'instIndex': 120, 'instruction': 'movq\t0x48(%rsp), %rdi'}, {'instIndex': 121, 'instruction': 'movl\t0x14(%rsp), %ecx'}, {'instIndex': 122, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 123, 'instruction': 'leaq\t.L.str.3(%rip), %rdx'}, {'instIndex': 124, 'instruction': 'movb\t$0, %al'}, {'instIndex': 125, 'instruction': 'callq\tav_log@PLT'}]}]}
The case of compiler clang with optimization O1.
Patched source code file: aasc.c
Patched function: 1---static int aasc_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_after/O1/aasc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_after/O1/aasc.s---aasc_decode_frame---after
function id: 1
function flag: True
There are 145 instructions for function: aasc_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '85', 'end': 91}, 'before': {'start': '85', 'end': 91}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 110, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 111, 'instruction': 'addq\t$8, %rcx'}, {'instIndex': 117, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 118, 'instruction': 'movl\t$8, %edx'}, {'instIndex': 119, 'instruction': 'callq\tff_msrle_decode@PLT'}, {'instIndex': 120, 'instruction': 'jmp\t.LBB1_10'}, {'instIndex': 123, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 124, 'instruction': 'leaq\t.L.str.3(%rip), %rdx'}, {'instIndex': 125, 'instruction': 'movb\t$0, %al'}, {'instIndex': 126, 'instruction': 'callq\tav_log@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_after/O1/aasc.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_after/O1/aasc.o---after
The extraction of function: aasc_decode_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 36 nodes and 50 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 145 instructions in binary file.
[4194840, 4194906, 4194908]
The execution time of patched subCFG information extraction via angr: 0:00:00.146634
{'aasc_decode_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400278>, <DisassemblerInsn "mov" for 0x40027d>, <DisassemblerInsn "jmp" for 0x400284>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40025a>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400218>, <DisassemblerInsn "mov" for 0x40021d>, <DisassemblerInsn "mov" for 0x400222>, <DisassemblerInsn "mov" for 0x40022a>, <DisassemblerInsn "mov" for 0x40022f>, <DisassemblerInsn "mov" for 0x400234>, <DisassemblerInsn "add" for 0x400237>, <DisassemblerInsn "mov" for 0x40023b>, <DisassemblerInsn "mov" for 0x40023f>, <DisassemblerInsn "mov" for 0x400243>, <DisassemblerInsn "add" for 0x400246>, <DisassemblerInsn "mov" for 0x400249>, <DisassemblerInsn "mov" for 0x40024d>, <DisassemblerInsn "mov" for 0x400250>, <DisassemblerInsn "call" for 0x400255>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400286>, <DisassemblerInsn "mov" for 0x40028b>, <DisassemblerInsn "mov" for 0x400293>, <DisassemblerInsn "mov" for 0x40029b>, <DisassemblerInsn "mov" for 0x4002a1>, <DisassemblerInsn "call" for 0x4002a4>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40025c>, <DisassemblerInsn "mov" for 0x400260>, <DisassemblerInsn "mov" for 0x400265>, <DisassemblerInsn "lea" for 0x40026a>, <DisassemblerInsn "mov" for 0x400271>, <DisassemblerInsn "call" for 0x400273>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400120>, <DisassemblerInsn "sub" for 0x400124>, <DisassemblerInsn "je" for 0x400127>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40012d>]'}], 'cfg_block_detailed_info': [{'block_Idx': 22, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0xb4], eax>', '<jmp~~0x4002c6>']}, {'block_Idx': 17, 'blockInsts': ['<jmp~~0x400286>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rsp + 0x68]>', '<mov~~rdx, qword ptr [rsp + 0xa8]>', '<mov~~rsi, qword ptr [rsp + 0x58]>', '<mov~~r8d, dword ptr [rsp + 0x64]>', '<mov~~rcx, rdx>', '<add~~rcx, 8>', '<mov~~qword ptr [rdx + 8], rsi>', '<mov~~qword ptr [rdx + 0x18], rsi>', '<mov~~r8d, r8d>', '<add~~rsi, r8>', '<mov~~qword ptr [rdx + 0x10], rsi>', '<mov~~rsi, qword ptr [rax]>', '<mov~~edx, 8>', '<call~~0x500020>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x68]>', '<mov~~rdi, qword ptr [rsp + 0x80]>', '<mov~~rcx, qword ptr [rsp + 0x88]>', '<mov~~dword ptr [rcx], 1>', '<mov~~rsi, qword ptr [rax]>', '<call~~0x500028>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x54]>', '<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0xaa]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<sub~~eax, 1>', '<je~~0x400218>']}, {'block_Idx': 14, 'blockInsts': ['<jmp~~0x40025c>']}], 'cfg_edge_info': [(13, 17), (14, 18), (10, 13), (18, 22), (17, 11)]}]}
{'aasc_decode_frame': [4194840, 4194906, 4194908]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_after/O1/aasc.o---after
The extraction of function: aasc_decode_frame
[4194840, 4194906, 4194908]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 30 nodes and 43 edges in CFGEmulated.
It has 30 nodes and 37 edges in CDG.
It has 528 nodes and 631 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194840, 4194906, 4194908]
{4194950, 4194697, 4194840, 4194590, 4194592, 4194466, 4194727, 4194985, 4194605, 4194610, 4194997, 4194368, 4194500, 4195014, 4194509, 4194906, 4194908, 4194533, 4194798, 4194549, 4194936, 4194684}
[26, 20, 0, 15, 16, 11, 12, 5, 2, 28, 13, 4, 1, 27, 23, 10, 21, 9, 8, 25, 6, 14, 22]
The execution time of patched slicing information extraction via angr: 0:00:04.127450
{'aasc_decode_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400216>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40025c>, <DisassemblerInsn "mov" for 0x400260>, <DisassemblerInsn "mov" for 0x400265>, <DisassemblerInsn "lea" for 0x40026a>, <DisassemblerInsn "mov" for 0x400271>, <DisassemblerInsn "call" for 0x400273>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400040>, <DisassemblerInsn "mov" for 0x400047>, <DisassemblerInsn "mov" for 0x40004c>, <DisassemblerInsn "mov" for 0x400054>, <DisassemblerInsn "mov" for 0x40005c>, <DisassemblerInsn "mov" for 0x400060>, <DisassemblerInsn "mov" for 0x400068>, <DisassemblerInsn "add" for 0x40006b>, <DisassemblerInsn "mov" for 0x40006f>, <DisassemblerInsn "mov" for 0x400077>, <DisassemblerInsn "mov" for 0x40007a>, <DisassemblerInsn "mov" for 0x400081>, <DisassemblerInsn "mov" for 0x400085>, <DisassemblerInsn "mov" for 0x40008d>, <DisassemblerInsn "cmp" for 0x400092>, <DisassemblerInsn "mov" for 0x400095>, <DisassemblerInsn "jl" for 0x40009c>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400218>, <DisassemblerInsn "mov" for 0x40021d>, <DisassemblerInsn "mov" for 0x400222>, <DisassemblerInsn "mov" for 0x40022a>, <DisassemblerInsn "mov" for 0x40022f>, <DisassemblerInsn "mov" for 0x400234>, <DisassemblerInsn "add" for 0x400237>, <DisassemblerInsn "mov" for 0x40023b>, <DisassemblerInsn "mov" for 0x40023f>, <DisassemblerInsn "mov" for 0x400243>, <DisassemblerInsn "add" for 0x400246>, <DisassemblerInsn "mov" for 0x400249>, <DisassemblerInsn "mov" for 0x40024d>, <DisassemblerInsn "mov" for 0x400250>, <DisassemblerInsn "call" for 0x400255>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40012d>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40017c>, <DisassemblerInsn "cmp" for 0x400180>, <DisassemblerInsn "jle" for 0x400183>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400120>, <DisassemblerInsn "sub" for 0x400124>, <DisassemblerInsn "je" for 0x400127>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000cd>, <DisassemblerInsn "mov" for 0x4000d2>, <DisassemblerInsn "lea" for 0x4000d7>, <DisassemblerInsn "mov" for 0x4000de>, <DisassemblerInsn "call" for 0x4000e0>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000a2>, <DisassemblerInsn "mov" for 0x4000a7>, <DisassemblerInsn "mov" for 0x4000af>, <DisassemblerInsn "add" for 0x4000b2>, <DisassemblerInsn "mov" for 0x4000b6>, <DisassemblerInsn "mov" for 0x4000bb>, <DisassemblerInsn "call" for 0x4000bf>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400278>, <DisassemblerInsn "mov" for 0x40027d>, <DisassemblerInsn "jmp" for 0x400284>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400286>, <DisassemblerInsn "mov" for 0x40028b>, <DisassemblerInsn "mov" for 0x400293>, <DisassemblerInsn "mov" for 0x40029b>, <DisassemblerInsn "mov" for 0x4002a1>, <DisassemblerInsn "call" for 0x4002a4>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c4>, <DisassemblerInsn "cmp" for 0x4000c8>, <DisassemblerInsn "jge" for 0x4000cb>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002c6>, <DisassemblerInsn "add" for 0x4002cd>, <DisassemblerInsn "ret" for 0x4002d4>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a7>, <DisassemblerInsn "mov" for 0x4001ac>, <DisassemblerInsn "mov" for 0x4001b0>, <DisassemblerInsn "mov" for 0x4001b5>, <DisassemblerInsn "mov" for 0x4001ba>, <DisassemblerInsn "mov" for 0x4001bf>, <DisassemblerInsn "add" for 0x4001c3>, <DisassemblerInsn "mov" for 0x4001c6>, <DisassemblerInsn "mov" for 0x4001ca>, <DisassemblerInsn "mov" for 0x4001cd>, <DisassemblerInsn "imul" for 0x4001d0>, <DisassemblerInsn "mov" for 0x4001d4>, <DisassemblerInsn "movsxd" for 0x4001d8>, <DisassemblerInsn "add" for 0x4001db>, <DisassemblerInsn "mov" for 0x4001de>, <DisassemblerInsn "imul" for 0x4001e3>, <DisassemblerInsn "movsxd" for 0x4001e6>, <DisassemblerInsn "call" for 0x4001e9>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40025a>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000e5>, <DisassemblerInsn "mov" for 0x4000e9>, <DisassemblerInsn "jmp" for 0x4000f0>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4002a9>, <DisassemblerInsn "mov" for 0x4002ac>, <DisassemblerInsn "jl" for 0x4002b3>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40011e>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400132>, <DisassemblerInsn "mov" for 0x400136>, <DisassemblerInsn "mov" for 0x40013b>, <DisassemblerInsn "add" for 0x40013e>, <DisassemblerInsn "mov" for 0x400145>, <DisassemblerInsn "imul" for 0x40014a>, <DisassemblerInsn "add" for 0x400151>, <DisassemblerInsn "and" for 0x400154>, <DisassemblerInsn "mov" for 0x400157>, <DisassemblerInsn "mov" for 0x40015b>, <DisassemblerInsn "mov" for 0x400161>, <DisassemblerInsn "imul" for 0x400165>, <DisassemblerInsn "mov" for 0x400168>, <DisassemblerInsn "cmp" for 0x40016d>, <DisassemblerInsn "mov" for 0x40016f>, <DisassemblerInsn "jl" for 0x400176>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002b5>, <DisassemblerInsn "mov" for 0x4002bd>, <DisassemblerInsn "mov" for 0x4002bf>, <DisassemblerInsn "mov" for 0x4002c6>, <DisassemblerInsn "add" for 0x4002cd>, <DisassemblerInsn "ret" for 0x4002d4>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000f5>, <DisassemblerInsn "mov" for 0x4000fc>, <DisassemblerInsn "mov" for 0x400104>, <DisassemblerInsn "mov" for 0x400106>, <DisassemblerInsn "add" for 0x40010a>, <DisassemblerInsn "mov" for 0x40010e>, <DisassemblerInsn "add" for 0x400113>, <DisassemblerInsn "mov" for 0x400116>, <DisassemblerInsn "test" for 0x40011a>, <DisassemblerInsn "je" for 0x40011c>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400189>, <DisassemblerInsn "mov" for 0x40018e>, <DisassemblerInsn "mov" for 0x400192>, <DisassemblerInsn "movsxd" for 0x400196>, <DisassemblerInsn "mov" for 0x400199>, <DisassemblerInsn "mov" for 0x40019e>, <DisassemblerInsn "mov" for 0x4001a2>, <DisassemblerInsn "mov" for 0x4001a7>, <DisassemblerInsn "mov" for 0x4001ac>, <DisassemblerInsn "mov" for 0x4001b0>, <DisassemblerInsn "mov" for 0x4001b5>, <DisassemblerInsn "mov" for 0x4001ba>, <DisassemblerInsn "mov" for 0x4001bf>, <DisassemblerInsn "add" for 0x4001c3>, <DisassemblerInsn "mov" for 0x4001c6>, <DisassemblerInsn "mov" for 0x4001ca>, <DisassemblerInsn "mov" for 0x4001cd>, <DisassemblerInsn "imul" for 0x4001d0>, <DisassemblerInsn "mov" for 0x4001d4>, <DisassemblerInsn "movsxd" for 0x4001d8>, <DisassemblerInsn "add" for 0x4001db>, <DisassemblerInsn "mov" for 0x4001de>, <DisassemblerInsn "imul" for 0x4001e3>, <DisassemblerInsn "movsxd" for 0x4001e6>, <DisassemblerInsn "call" for 0x4001e9>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001ee>, <DisassemblerInsn "mov" for 0x4001f3>, <DisassemblerInsn "mov" for 0x4001f8>, <DisassemblerInsn "mov" for 0x4001fc>, <DisassemblerInsn "add" for 0x400200>, <DisassemblerInsn "mov" for 0x400203>, <DisassemblerInsn "cmp" for 0x400208>, <DisassemblerInsn "mov" for 0x40020b>, <DisassemblerInsn "mov" for 0x40020f>, <DisassemblerInsn "jg" for 0x400214>]'}], 'cfg_block_detailed_info': [{'block_Idx': 26, 'blockInsts': ['<jmp~~0x400286>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x54]>', '<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0xaa]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0xb8>', '<mov~~qword ptr [rsp + 0x78], rdi>', '<mov~~qword ptr [rsp + 0x80], rsi>', '<mov~~qword ptr [rsp + 0x88], rdx>', '<mov~~rax, qword ptr [rcx + 0x18]>', '<mov~~qword ptr [rsp + 0x90], rax>', '<mov~~rax, rcx>', '<add~~rax, 0x20>', '<mov~~qword ptr [rsp + 0x98], rax>', '<mov~~ecx, dword ptr [rcx + 0x20]>', '<mov~~dword ptr [rsp + 0xa4], ecx>', '<mov~~rax, qword ptr [rdi + 0x48]>', '<mov~~qword ptr [rsp + 0xa8], rax>', '<mov~~eax, 0xc1444e49>', '<cmp~~ecx, 4>', '<mov~~dword ptr [rsp + 0xb4], eax>', '<jl~~0x4002c6>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rsp + 0x68]>', '<mov~~rdx, qword ptr [rsp + 0xa8]>', '<mov~~rsi, qword ptr [rsp + 0x58]>', '<mov~~r8d, dword ptr [rsp + 0x64]>', '<mov~~rcx, rdx>', '<add~~rcx, 8>', '<mov~~qword ptr [rdx + 8], rsi>', '<mov~~qword ptr [rdx + 0x18], rsi>', '<mov~~r8d, r8d>', '<add~~rsi, r8>', '<mov~~qword ptr [rdx + 0x10], rsi>', '<mov~~rsi, qword ptr [rax]>', '<mov~~edx, 8>', '<call~~0x500020>']}, {'block_Idx': 16, 'blockInsts': ['<jmp~~0x40025c>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50]>', '<cmp~~eax, 0>', '<jle~~0x400286>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<sub~~eax, 1>', '<je~~0x400218>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x226]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~rcx, rax>', '<add~~rcx, 0x20>', '<mov~~qword ptr [rsp + 0x68], rcx>', '<mov~~rsi, qword ptr [rax + 0x20]>', '<call~~0x500008>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0xb4], eax>', '<jmp~~0x4002c6>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x68]>', '<mov~~rdi, qword ptr [rsp + 0x80]>', '<mov~~rcx, qword ptr [rsp + 0x88]>', '<mov~~dword ptr [rcx], 1>', '<mov~~rsi, qword ptr [rax]>', '<call~~0x500028>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~dword ptr [rsp + 0x74], eax>', '<cmp~~eax, 0>', '<jge~~0x4000f5>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xb4]>', '<add~~rsp, 0xb8>', '<ret~~>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rsp + 0x34]>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rdx, qword ptr [rsp + 0x68]>', '<mov~~qword ptr [rsp + 0x10], rsi>', '<mov~~dword ptr [rsp + 0x18], ecx>', '<add~~ecx, -1>', '<mov~~dword ptr [rsp + 0x1c], ecx>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdi, qword ptr [rdx]>', '<imul~~ecx, dword ptr [rdx + 0x40]>', '<mov~~dword ptr [rsp + 4], ecx>', '<movsxd~~rcx, ecx>', '<add~~rdi, rcx>', '<mov~~qword ptr [rsp + 8], rdi>', '<imul~~eax, dword ptr [rax], 3>', '<movsxd~~rdx, eax>', '<call~~0x500018>']}, {'block_Idx': 23, 'blockInsts': ['<jmp~~0x400286>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x74]>', '<mov~~dword ptr [rsp + 0xb4], eax>', '<jmp~~0x4002c6>']}, {'block_Idx': 21, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0xb4], eax>', '<jl~~0x4002c6>']}, {'block_Idx': 9, 'blockInsts': ['<jmp~~0x400120>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x64]>', '<mov~~rax, qword ptr [rsp + 0x78]>', '<mov~~rdx, rax>', '<add~~rdx, 0x94>', '<mov~~qword ptr [rsp + 0x40], rdx>', '<imul~~edx, dword ptr [rax + 0x94], 3>', '<add~~edx, 3>', '<and~~edx, 0xfffffffc>', '<mov~~dword ptr [rsp + 0x4c], edx>', '<mov~~eax, dword ptr [rax + 0x98]>', '<mov~~dword ptr [rsp + 0x50], eax>', '<imul~~edx, eax>', '<mov~~eax, 0xc1444e49>', '<cmp~~ecx, edx>', '<mov~~dword ptr [rsp + 0xb4], eax>', '<jl~~0x4002c6>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0xb4], eax>', '<mov~~eax, dword ptr [rsp + 0xb4]>', '<add~~rsp, 0xb8>', '<ret~~>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xa4]>', '<mov~~rdx, qword ptr [rsp + 0x90]>', '<mov~~eax, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0x54], eax>', '<add~~rdx, 4>', '<mov~~qword ptr [rsp + 0x58], rdx>', '<add~~ecx, -4>', '<mov~~dword ptr [rsp + 0x64], ecx>', '<test~~eax, eax>', '<je~~0x400132>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~ecx, dword ptr [rsp + 0x50]>', '<mov~~edx, dword ptr [rsp + 0x4c]>', '<movsxd~~rdx, edx>', '<mov~~qword ptr [rsp + 0x28], rdx>', '<mov~~dword ptr [rsp + 0x34], ecx>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rsi, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rsp + 0x34]>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rdx, qword ptr [rsp + 0x68]>', '<mov~~qword ptr [rsp + 0x10], rsi>', '<mov~~dword ptr [rsp + 0x18], ecx>', '<add~~ecx, -1>', '<mov~~dword ptr [rsp + 0x1c], ecx>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdi, qword ptr [rdx]>', '<imul~~ecx, dword ptr [rdx + 0x40]>', '<mov~~dword ptr [rsp + 4], ecx>', '<movsxd~~rcx, ecx>', '<add~~rdi, rcx>', '<mov~~qword ptr [rsp + 8], rdi>', '<imul~~eax, dword ptr [rax], 3>', '<movsxd~~rdx, eax>', '<call~~0x500018>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rsi, qword ptr [rsp + 0x28]>', '<mov~~edx, dword ptr [rsp + 0x18]>', '<mov~~ecx, dword ptr [rsp + 0x1c]>', '<add~~rax, rsi>', '<mov~~qword ptr [rsp + 0x20], rax>', '<cmp~~edx, 1>', '<mov~~dword ptr [rsp + 0x34], ecx>', '<mov~~qword ptr [rsp + 0x38], rax>', '<jg~~0x4001a7>']}], 'cfg_edge_info': [(16, 20), (12, 16), (4, 6), (23, 13), (21, 25), (0, 2), (5, 10), (22, 26), (14, 22), (11, 14), (27, 22), (6, 8), (15, 23), (4, 5), (12, 15), (20, 28), (8, 11), (0, 1), (2, 4), (11, 13), (26, 13), (28, 1), (22, 27), (8, 1), (9, 12), (10, 1), (13, 21), (6, 9), (21, 1)], 'cdg_edge_info': [(6, 12), (12, 1), (12, 16), (4, 6), (12, 13), (21, 25), (0, 2), (12, 28), (11, 14), (8, 21), (6, 8), (4, 5), (12, 15), (12, 21), (22, 22), (8, 11), (0, 1), (0, 4), (11, 22), (4, 1), (4, 10), (12, 23), (22, 27), (12, 20), (8, 1), (8, 13), (6, 9), (21, 1)], 'ddg_edge_info': [(6, 12), (2, 27), (6, 15), (6, 27), (27, 13), (8, 25), (5, 10), (0, 2), (21, 25), (0, 5), (14, 22), (5, 25), (0, 8), (2, 5), (2, 11), (27, 22), (2, 8), (2, 14), (0, 20), (8, 27), (2, 20), (6, 8), (6, 14), (6, 20), (20, 25), (20, 28), (8, 11), (2, 4), (8, 14), (14, 27), (0, 13), (15, 13), (2, 13), (0, 25), (2, 25), (13, 25), (4, 10), (22, 27), (0, 6), (28, 25), (2, 12), (2, 6), (10, 25), (0, 15), (2, 15), (13, 21)]}]}
{'aasc_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 110, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 111, 'instruction': 'addq\t$8, %rcx'}, {'instIndex': 117, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 118, 'instruction': 'movl\t$8, %edx'}, {'instIndex': 119, 'instruction': 'callq\tff_msrle_decode@PLT'}, {'instIndex': 120, 'instruction': 'jmp\t.LBB1_10'}, {'instIndex': 123, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 124, 'instruction': 'leaq\t.L.str.3(%rip), %rdx'}, {'instIndex': 125, 'instruction': 'movb\t$0, %al'}, {'instIndex': 126, 'instruction': 'callq\tav_log@PLT'}]}]}
The case of compiler clang with optimization O2.
Patched source code file: aasc.c
Patched function: 1---static int aasc_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_after/O2/aasc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_after/O2/aasc.s---aasc_decode_frame---after
function id: 1
function flag: True
There are 217 instructions for function: aasc_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '85', 'end': 91}, 'before': {'start': '85', 'end': 91}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 182, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 183, 'instruction': 'addq\t$8, %rcx'}, {'instIndex': 189, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 190, 'instruction': 'movl\t$8, %edx'}, {'instIndex': 191, 'instruction': 'callq\tff_msrle_decode@PLT'}, {'instIndex': 192, 'instruction': 'jmp\t.LBB1_13'}, {'instIndex': 195, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 196, 'instruction': 'leaq\t.L.str.3(%rip), %rdx'}, {'instIndex': 197, 'instruction': 'movb\t$0, %al'}, {'instIndex': 198, 'instruction': 'callq\tav_log@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_after/O2/aasc.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_after/O2/aasc.o---after
The extraction of function: aasc_decode_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 42 nodes and 65 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 217 instructions in binary file.
[4195218, 4195296, 4195298]
The execution time of patched subCFG information extraction via angr: 0:00:00.157348
{'aasc_decode_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003e2>, <DisassemblerInsn "mov" for 0x4003e9>, <DisassemblerInsn "mov" for 0x4003f1>, <DisassemblerInsn "lea" for 0x4003f6>, <DisassemblerInsn "mov" for 0x4003fd>, <DisassemblerInsn "call" for 0x4003ff>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400412>, <DisassemblerInsn "mov" for 0x40041a>, <DisassemblerInsn "mov" for 0x400422>, <DisassemblerInsn "mov" for 0x40042a>, <DisassemblerInsn "mov" for 0x400430>, <DisassemblerInsn "call" for 0x400433>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400404>, <DisassemblerInsn "mov" for 0x400409>, <DisassemblerInsn "jmp" for 0x400410>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4003e0>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400392>, <DisassemblerInsn "mov" for 0x40039a>, <DisassemblerInsn "mov" for 0x4003a2>, <DisassemblerInsn "mov" for 0x4003aa>, <DisassemblerInsn "mov" for 0x4003b2>, <DisassemblerInsn "mov" for 0x4003ba>, <DisassemblerInsn "add" for 0x4003bd>, <DisassemblerInsn "mov" for 0x4003c1>, <DisassemblerInsn "mov" for 0x4003c5>, <DisassemblerInsn "mov" for 0x4003c9>, <DisassemblerInsn "add" for 0x4003cc>, <DisassemblerInsn "mov" for 0x4003cf>, <DisassemblerInsn "mov" for 0x4003d3>, <DisassemblerInsn "mov" for 0x4003d6>, <DisassemblerInsn "call" for 0x4003db>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40013b>, <DisassemblerInsn "sub" for 0x400142>, <DisassemblerInsn "je" for 0x400145>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40014b>]'}], 'cfg_block_detailed_info': [{'block_Idx': 18, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x94]>', '<mov~~rdi, qword ptr [rsp + 0xb8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0xae]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~rdi, qword ptr [rsp + 0xc0]>', '<mov~~rcx, qword ptr [rsp + 0xc8]>', '<mov~~dword ptr [rcx], 1>', '<mov~~rsi, qword ptr [rax]>', '<call~~0x500028>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<jmp~~0x400455>']}, {'block_Idx': 17, 'blockInsts': ['<jmp~~0x400412>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xb8]>', '<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~rdx, qword ptr [rsp + 0xe8]>', '<mov~~rsi, qword ptr [rsp + 0x98]>', '<mov~~r8d, dword ptr [rsp + 0xa4]>', '<mov~~rcx, rdx>', '<add~~rcx, 8>', '<mov~~qword ptr [rdx + 8], rsi>', '<mov~~qword ptr [rdx + 0x18], rsi>', '<mov~~r8d, r8d>', '<add~~rsi, r8>', '<mov~~qword ptr [rdx + 0x10], rsi>', '<mov~~rsi, qword ptr [rax]>', '<mov~~edx, 8>', '<call~~0x500020>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x94]>', '<sub~~eax, 1>', '<je~~0x400392>']}, {'block_Idx': 14, 'blockInsts': ['<jmp~~0x4003e2>']}], 'cfg_edge_info': [(13, 17), (14, 18), (10, 13), (17, 11), (18, 21)]}]}
{'aasc_decode_frame': [4195218, 4195296, 4195298]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_after/O2/aasc.o---after
The extraction of function: aasc_decode_frame
[4195218, 4195296, 4195298]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 38 nodes and 57 edges in CFGEmulated.
It has 38 nodes and 55 edges in CDG.
It has 754 nodes and 899 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4195218, 4195296, 4195298]
{4195332, 4194567, 4194960, 4194833, 4195218, 4195346, 4195099, 4194849, 4194469, 4194738, 4195384, 4194617, 4194619, 4194368, 4194880, 4194754, 4195396, 4195012, 4194635, 4194509, 4194640, 4195413, 4194521, 4195296, 4195298, 4195182, 4194548}
[33, 12, 27, 2, 13, 15, 36, 16, 28, 0, 30, 20, 23, 26, 21, 25, 29, 1, 4, 5, 37, 8, 14, 22, 9, 34, 6, 11, 10]
The execution time of patched slicing information extraction via angr: 0:00:07.845710
{'aasc_decode_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400290>, <DisassemblerInsn "mov" for 0x400294>, <DisassemblerInsn "mov" for 0x400299>, <DisassemblerInsn "mov" for 0x40029d>, <DisassemblerInsn "mov" for 0x4002a2>, <DisassemblerInsn "mov" for 0x4002a9>, <DisassemblerInsn "mov" for 0x4002ad>, <DisassemblerInsn "cmp" for 0x4002b2>, <DisassemblerInsn "mov" for 0x4002b5>, <DisassemblerInsn "mov" for 0x4002b9>, <DisassemblerInsn "je" for 0x4002be>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40013b>, <DisassemblerInsn "sub" for 0x400142>, <DisassemblerInsn "je" for 0x400145>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400404>, <DisassemblerInsn "mov" for 0x400409>, <DisassemblerInsn "jmp" for 0x400410>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000a5>, <DisassemblerInsn "mov" for 0x4000ad>, <DisassemblerInsn "mov" for 0x4000b5>, <DisassemblerInsn "add" for 0x4000b8>, <DisassemblerInsn "mov" for 0x4000bc>, <DisassemblerInsn "mov" for 0x4000c4>, <DisassemblerInsn "call" for 0x4000c8>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400412>, <DisassemblerInsn "mov" for 0x40041a>, <DisassemblerInsn "mov" for 0x400422>, <DisassemblerInsn "mov" for 0x40042a>, <DisassemblerInsn "mov" for 0x400430>, <DisassemblerInsn "call" for 0x400433>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400392>, <DisassemblerInsn "mov" for 0x40039a>, <DisassemblerInsn "mov" for 0x4003a2>, <DisassemblerInsn "mov" for 0x4003aa>, <DisassemblerInsn "mov" for 0x4003b2>, <DisassemblerInsn "mov" for 0x4003ba>, <DisassemblerInsn "add" for 0x4003bd>, <DisassemblerInsn "mov" for 0x4003c1>, <DisassemblerInsn "mov" for 0x4003c5>, <DisassemblerInsn "mov" for 0x4003c9>, <DisassemblerInsn "add" for 0x4003cc>, <DisassemblerInsn "mov" for 0x4003cf>, <DisassemblerInsn "mov" for 0x4003d3>, <DisassemblerInsn "mov" for 0x4003d6>, <DisassemblerInsn "call" for 0x4003db>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40036e>, <DisassemblerInsn "mov" for 0x400372>, <DisassemblerInsn "mov" for 0x400376>, <DisassemblerInsn "cmp" for 0x40037b>, <DisassemblerInsn "mov" for 0x40037e>, <DisassemblerInsn "mov" for 0x400382>, <DisassemblerInsn "jg" for 0x400387>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40014b>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002a2>, <DisassemblerInsn "mov" for 0x4002a9>, <DisassemblerInsn "mov" for 0x4002ad>, <DisassemblerInsn "cmp" for 0x4002b2>, <DisassemblerInsn "mov" for 0x4002b5>, <DisassemblerInsn "mov" for 0x4002b9>, <DisassemblerInsn "je" for 0x4002be>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400040>, <DisassemblerInsn "mov" for 0x400047>, <DisassemblerInsn "mov" for 0x40004f>, <DisassemblerInsn "mov" for 0x400057>, <DisassemblerInsn "mov" for 0x40005f>, <DisassemblerInsn "mov" for 0x400063>, <DisassemblerInsn "mov" for 0x40006b>, <DisassemblerInsn "add" for 0x40006e>, <DisassemblerInsn "mov" for 0x400072>, <DisassemblerInsn "mov" for 0x40007a>, <DisassemblerInsn "mov" for 0x40007d>, <DisassemblerInsn "mov" for 0x400084>, <DisassemblerInsn "mov" for 0x400088>, <DisassemblerInsn "mov" for 0x400090>, <DisassemblerInsn "cmp" for 0x400095>, <DisassemblerInsn "mov" for 0x400098>, <DisassemblerInsn "jl" for 0x40009f>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002c4>, <DisassemblerInsn "mov" for 0x4002c9>, <DisassemblerInsn "mov" for 0x4002cd>, <DisassemblerInsn "mov" for 0x4002d5>, <DisassemblerInsn "mov" for 0x4002dd>, <DisassemblerInsn "mov" for 0x4002e2>, <DisassemblerInsn "add" for 0x4002e6>, <DisassemblerInsn "mov" for 0x4002e9>, <DisassemblerInsn "mov" for 0x4002ee>, <DisassemblerInsn "add" for 0x4002f0>, <DisassemblerInsn "mov" for 0x4002f3>, <DisassemblerInsn "mov" for 0x4002f7>, <DisassemblerInsn "mov" for 0x4002fa>, <DisassemblerInsn "imul" for 0x4002fd>, <DisassemblerInsn "mov" for 0x400301>, <DisassemblerInsn "movsxd" for 0x400305>, <DisassemblerInsn "add" for 0x400308>, <DisassemblerInsn "mov" for 0x40030b>, <DisassemblerInsn "imul" for 0x400310>, <DisassemblerInsn "movsxd" for 0x400313>, <DisassemblerInsn "call" for 0x400316>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003e2>, <DisassemblerInsn "mov" for 0x4003e9>, <DisassemblerInsn "mov" for 0x4003f1>, <DisassemblerInsn "lea" for 0x4003f6>, <DisassemblerInsn "mov" for 0x4003fd>, <DisassemblerInsn "call" for 0x4003ff>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4003e0>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400221>, <DisassemblerInsn "mov" for 0x400229>, <DisassemblerInsn "mov" for 0x40022d>, <DisassemblerInsn "and" for 0x40022f>, <DisassemblerInsn "cmp" for 0x400232>, <DisassemblerInsn "mov" for 0x400235>, <DisassemblerInsn "mov" for 0x400239>, <DisassemblerInsn "je" for 0x40023e>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400438>, <DisassemblerInsn "mov" for 0x40043b>, <DisassemblerInsn "jl" for 0x400442>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400444>, <DisassemblerInsn "mov" for 0x40044c>, <DisassemblerInsn "mov" for 0x40044e>, <DisassemblerInsn "mov" for 0x400455>, <DisassemblerInsn "add" for 0x40045c>, <DisassemblerInsn "ret" for 0x400463>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400240>, <DisassemblerInsn "mov" for 0x400248>, <DisassemblerInsn "mov" for 0x40024f>, <DisassemblerInsn "mov" for 0x400257>, <DisassemblerInsn "mov" for 0x40025c>, <DisassemblerInsn "add" for 0x400264>, <DisassemblerInsn "mov" for 0x400267>, <DisassemblerInsn "mov" for 0x40026c>, <DisassemblerInsn "add" for 0x40026e>, <DisassemblerInsn "mov" for 0x400271>, <DisassemblerInsn "mov" for 0x400275>, <DisassemblerInsn "mov" for 0x400278>, <DisassemblerInsn "imul" for 0x40027b>, <DisassemblerInsn "movsxd" for 0x40027f>, <DisassemblerInsn "add" for 0x400282>, <DisassemblerInsn "imul" for 0x400285>, <DisassemblerInsn "movsxd" for 0x400288>, <DisassemblerInsn "call" for 0x40028b>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400455>, <DisassemblerInsn "add" for 0x40045c>, <DisassemblerInsn "ret" for 0x400463>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000cd>, <DisassemblerInsn "cmp" for 0x4000d4>, <DisassemblerInsn "jge" for 0x4000d7>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000d9>, <DisassemblerInsn "mov" for 0x4000e1>, <DisassemblerInsn "lea" for 0x4000e6>, <DisassemblerInsn "mov" for 0x4000ed>, <DisassemblerInsn "call" for 0x4000ef>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40038d>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400150>, <DisassemblerInsn "mov" for 0x400157>, <DisassemblerInsn "mov" for 0x40015f>, <DisassemblerInsn "add" for 0x400162>, <DisassemblerInsn "mov" for 0x400169>, <DisassemblerInsn "mov" for 0x400171>, <DisassemblerInsn "mov" for 0x400177>, <DisassemblerInsn "imul" for 0x40017e>, <DisassemblerInsn "add" for 0x400181>, <DisassemblerInsn "and" for 0x400184>, <DisassemblerInsn "mov" for 0x400187>, <DisassemblerInsn "mov" for 0x40018e>, <DisassemblerInsn "mov" for 0x400194>, <DisassemblerInsn "imul" for 0x40019b>, <DisassemblerInsn "mov" for 0x40019e>, <DisassemblerInsn "cmp" for 0x4001a3>, <DisassemblerInsn "mov" for 0x4001a5>, <DisassemblerInsn "jl" for 0x4001ac>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001c2>, <DisassemblerInsn "mov" for 0x4001c9>, <DisassemblerInsn "mov" for 0x4001d1>, <DisassemblerInsn "mov" for 0x4001d8>, <DisassemblerInsn "mov" for 0x4001e0>, <DisassemblerInsn "movsxd" for 0x4001e7>, <DisassemblerInsn "mov" for 0x4001ea>, <DisassemblerInsn "add" for 0x4001ef>, <DisassemblerInsn "mov" for 0x4001f2>, <DisassemblerInsn "mov" for 0x4001f6>, <DisassemblerInsn "mov" for 0x4001f9>, <DisassemblerInsn "imul" for 0x4001fc>, <DisassemblerInsn "movsxd" for 0x400200>, <DisassemblerInsn "add" for 0x400203>, <DisassemblerInsn "imul" for 0x400206>, <DisassemblerInsn "movsxd" for 0x400209>, <DisassemblerInsn "call" for 0x40020c>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400211>, <DisassemblerInsn "cmp" for 0x400218>, <DisassemblerInsn "je" for 0x40021b>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400139>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40031b>, <DisassemblerInsn "mov" for 0x400320>, <DisassemblerInsn "mov" for 0x400325>, <DisassemblerInsn "mov" for 0x40032d>, <DisassemblerInsn "mov" for 0x400335>, <DisassemblerInsn "add" for 0x400339>, <DisassemblerInsn "mov" for 0x40033c>, <DisassemblerInsn "mov" for 0x400341>, <DisassemblerInsn "add" for 0x400343>, <DisassemblerInsn "mov" for 0x400346>, <DisassemblerInsn "mov" for 0x40034a>, <DisassemblerInsn "mov" for 0x40034d>, <DisassemblerInsn "imul" for 0x400350>, <DisassemblerInsn "mov" for 0x400354>, <DisassemblerInsn "movsxd" for 0x400358>, <DisassemblerInsn "add" for 0x40035b>, <DisassemblerInsn "mov" for 0x40035e>, <DisassemblerInsn "imul" for 0x400363>, <DisassemblerInsn "movsxd" for 0x400366>, <DisassemblerInsn "call" for 0x400369>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400107>, <DisassemblerInsn "mov" for 0x40010e>, <DisassemblerInsn "mov" for 0x400116>, <DisassemblerInsn "mov" for 0x400118>, <DisassemblerInsn "add" for 0x40011f>, <DisassemblerInsn "mov" for 0x400123>, <DisassemblerInsn "add" for 0x40012b>, <DisassemblerInsn "mov" for 0x40012e>, <DisassemblerInsn "test" for 0x400135>, <DisassemblerInsn "je" for 0x400137>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001b2>, <DisassemblerInsn "cmp" for 0x4001b9>, <DisassemblerInsn "jle" for 0x4001bc>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000f4>, <DisassemblerInsn "mov" for 0x4000fb>, <DisassemblerInsn "jmp" for 0x400102>]'}], 'cfg_block_detailed_info': [{'block_Idx': 33, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x54]>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~dword ptr [rsp + 0x64], ecx>', '<mov~~qword ptr [rsp + 0x68], rax>', '<mov~~edx, dword ptr [rsp + 0x90]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<mov~~rax, qword ptr [rsp + 0x68]>', '<cmp~~edx, 2>', '<mov~~dword ptr [rsp + 0x44], ecx>', '<mov~~qword ptr [rsp + 0x48], rax>', '<je~~0x400412>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x94]>', '<sub~~eax, 1>', '<je~~0x400392>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<jmp~~0x400455>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xb8]>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~rcx, rax>', '<add~~rcx, 0x20>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<mov~~rsi, qword ptr [rax + 0x20]>', '<call~~0x500008>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~rdi, qword ptr [rsp + 0xc0]>', '<mov~~rcx, qword ptr [rsp + 0xc8]>', '<mov~~dword ptr [rcx], 1>', '<mov~~rsi, qword ptr [rax]>', '<call~~0x500028>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xb8]>', '<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~rdx, qword ptr [rsp + 0xe8]>', '<mov~~rsi, qword ptr [rsp + 0x98]>', '<mov~~r8d, dword ptr [rsp + 0xa4]>', '<mov~~rcx, rdx>', '<add~~rcx, 8>', '<mov~~qword ptr [rdx + 8], rsi>', '<mov~~qword ptr [rdx + 0x18], rsi>', '<mov~~r8d, r8d>', '<add~~rsi, r8>', '<mov~~qword ptr [rdx + 0x10], rsi>', '<mov~~rsi, qword ptr [rax]>', '<mov~~edx, 8>', '<call~~0x500020>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x30]>', '<mov~~ecx, dword ptr [rsp + 0x34]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~edx, 2>', '<mov~~dword ptr [rsp + 0x44], ecx>', '<mov~~qword ptr [rsp + 0x48], rax>', '<jg~~0x4002c4>']}, {'block_Idx': 16, 'blockInsts': ['<jmp~~0x4003e2>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x90]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<mov~~rax, qword ptr [rsp + 0x68]>', '<cmp~~edx, 2>', '<mov~~dword ptr [rsp + 0x44], ecx>', '<mov~~qword ptr [rsp + 0x48], rax>', '<je~~0x400412>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0xf8>', '<mov~~qword ptr [rsp + 0xb8], rdi>', '<mov~~qword ptr [rsp + 0xc0], rsi>', '<mov~~qword ptr [rsp + 0xc8], rdx>', '<mov~~rax, qword ptr [rcx + 0x18]>', '<mov~~qword ptr [rsp + 0xd0], rax>', '<mov~~rax, rcx>', '<add~~rax, 0x20>', '<mov~~qword ptr [rsp + 0xd8], rax>', '<mov~~ecx, dword ptr [rcx + 0x20]>', '<mov~~dword ptr [rsp + 0xe4], ecx>', '<mov~~rax, qword ptr [rdi + 0x48]>', '<mov~~qword ptr [rsp + 0xe8], rax>', '<mov~~eax, 0xc1444e49>', '<cmp~~ecx, 4>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<jl~~0x400455>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x48]>', '<mov~~ecx, dword ptr [rsp + 0x44]>', '<mov~~rdx, qword ptr [rsp + 0xa8]>', '<mov~~rax, qword ptr [rsp + 0x80]>', '<mov~~rdi, qword ptr [rsp + 0x70]>', '<mov~~dword ptr [rsp + 0x30], ecx>', '<add~~rsi, rdi>', '<mov~~qword ptr [rsp + 0x18], rsi>', '<mov~~eax, dword ptr [rax]>', '<add~~ecx, -1>', '<mov~~dword ptr [rsp + 8], ecx>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdi, qword ptr [rdx]>', '<imul~~ecx, dword ptr [rdx + 0x40]>', '<mov~~dword ptr [rsp + 0xc], ecx>', '<movsxd~~rcx, ecx>', '<add~~rdi, rcx>', '<mov~~qword ptr [rsp + 0x10], rdi>', '<imul~~eax, eax, 3>', '<movsxd~~rdx, eax>', '<call~~0x500018>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x94]>', '<mov~~rdi, qword ptr [rsp + 0xb8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0xae]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 23, 'blockInsts': ['<jmp~~0x400412>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~ecx, dword ptr [rsp + 0x7c]>', '<mov~~edx, ecx>', '<and~~edx, 1>', '<cmp~~edx, 0>', '<mov~~dword ptr [rsp + 0x64], ecx>', '<mov~~qword ptr [rsp + 0x68], rax>', '<je~~0x4002a2>']}, {'block_Idx': 21, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<jl~~0x400455>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<mov~~eax, dword ptr [rsp + 0xf4]>', '<add~~rsp, 0xf8>', '<ret~~>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xa8]>', '<mov~~ecx, dword ptr [rsp + 0x90]>', '<mov~~rax, qword ptr [rsp + 0x80]>', '<mov~~rdi, qword ptr [rsp + 0x70]>', '<mov~~rsi, qword ptr [rsp + 0x98]>', '<add~~rsi, rdi>', '<mov~~qword ptr [rsp + 0x58], rsi>', '<mov~~eax, dword ptr [rax]>', '<add~~ecx, -2>', '<mov~~dword ptr [rsp + 0x54], ecx>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdi, qword ptr [rdx]>', '<imul~~ecx, dword ptr [rdx + 0x40]>', '<movsxd~~rcx, ecx>', '<add~~rdi, rcx>', '<imul~~eax, eax, 3>', '<movsxd~~rdx, eax>', '<call~~0x500018>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xf4]>', '<add~~rsp, 0xf8>', '<ret~~>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~dword ptr [rsp + 0xb4], eax>', '<cmp~~eax, 0>', '<jge~~0x400107>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xb8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3a7]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 37, 'blockInsts': ['<jmp~~0x400412>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xa4]>', '<mov~~rax, qword ptr [rsp + 0xb8]>', '<mov~~rdx, rax>', '<add~~rdx, 0x94>', '<mov~~qword ptr [rsp + 0x80], rdx>', '<mov~~edx, dword ptr [rax + 0x94]>', '<mov~~dword ptr [rsp + 0x88], edx>', '<imul~~edx, edx, 3>', '<add~~edx, 3>', '<and~~edx, 0xfffffffc>', '<mov~~dword ptr [rsp + 0x8c], edx>', '<mov~~eax, dword ptr [rax + 0x98]>', '<mov~~dword ptr [rsp + 0x90], eax>', '<imul~~edx, eax>', '<mov~~eax, 0xc1444e49>', '<cmp~~ecx, edx>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<jl~~0x400455>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x90]>', '<mov~~rsi, qword ptr [rsp + 0x98]>', '<mov~~eax, dword ptr [rsp + 0x88]>', '<mov~~rdx, qword ptr [rsp + 0xa8]>', '<mov~~edi, dword ptr [rsp + 0x8c]>', '<movsxd~~rdi, edi>', '<mov~~qword ptr [rsp + 0x70], rdi>', '<add~~ecx, -1>', '<mov~~dword ptr [rsp + 0x7c], ecx>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdi, qword ptr [rdx]>', '<imul~~ecx, dword ptr [rdx + 0x40]>', '<movsxd~~rcx, ecx>', '<add~~rdi, rcx>', '<imul~~eax, eax, 3>', '<movsxd~~rdx, eax>', '<call~~0x500018>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x90]>', '<cmp~~eax, 1>', '<je~~0x400412>']}, {'block_Idx': 9, 'blockInsts': ['<jmp~~0x40013b>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x18]>', '<mov~~rdi, qword ptr [rsp + 0x70]>', '<mov~~rax, qword ptr [rsp + 0x80]>', '<mov~~rdx, qword ptr [rsp + 0xa8]>', '<mov~~ecx, dword ptr [rsp + 0x30]>', '<add~~rsi, rdi>', '<mov~~qword ptr [rsp + 0x38], rsi>', '<mov~~eax, dword ptr [rax]>', '<add~~ecx, -2>', '<mov~~dword ptr [rsp + 0x34], ecx>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdi, qword ptr [rdx]>', '<imul~~ecx, dword ptr [rdx + 0x40]>', '<mov~~dword ptr [rsp + 0x24], ecx>', '<movsxd~~rcx, ecx>', '<add~~rdi, rcx>', '<mov~~qword ptr [rsp + 0x28], rdi>', '<imul~~eax, eax, 3>', '<movsxd~~rdx, eax>', '<call~~0x500018>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xe4]>', '<mov~~rdx, qword ptr [rsp + 0xd0]>', '<mov~~eax, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0x94], eax>', '<add~~rdx, 4>', '<mov~~qword ptr [rsp + 0x98], rdx>', '<add~~ecx, -4>', '<mov~~dword ptr [rsp + 0xa4], ecx>', '<test~~eax, eax>', '<je~~0x400150>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x90]>', '<cmp~~eax, 0>', '<jle~~0x400412>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xb4]>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<jmp~~0x400455>']}], 'cfg_edge_info': [(16, 20), (27, 1), (12, 16), (4, 6), (23, 13), (33, 30), (21, 25), (0, 2), (22, 26), (5, 10), (14, 22), (11, 14), (28, 30), (36, 37), (6, 8), (15, 23), (22, 13), (4, 5), (26, 29), (12, 15), (8, 11), (0, 1), (2, 4), (36, 30), (34, 36), (11, 13), (33, 13), (26, 28), (21, 1), (29, 33), (37, 13), (20, 27), (8, 1), (28, 13), (9, 12), (10, 1), (13, 21), (6, 9), (30, 34)], 'cdg_edge_info': [(6, 12), (12, 1), (33, 36), (12, 16), (26, 33), (4, 6), (12, 13), (21, 25), (0, 2), (22, 26), (11, 14), (8, 21), (36, 34), (6, 8), (4, 5), (26, 29), (12, 15), (12, 21), (8, 11), (0, 1), (12, 27), (36, 30), (0, 4), (36, 36), (11, 22), (33, 34), (4, 1), (4, 10), (12, 23), (12, 20), (8, 1), (8, 13), (33, 30), (6, 9), (21, 1)], 'ddg_edge_info': [(6, 12), (6, 15), (26, 33), (6, 30), (34, 13), (33, 30), (21, 25), (14, 13), (5, 10), (0, 2), (0, 5), (14, 22), (5, 25), (27, 25), (0, 8), (2, 5), (2, 11), (2, 8), (14, 34), (8, 30), (2, 14), (0, 20), (10, 25), (8, 33), (2, 20), (30, 36), (6, 8), (6, 14), (6, 20), (2, 29), (29, 13), (6, 26), (20, 25), (6, 29), (29, 34), (8, 11), (34, 30), (2, 4), (36, 30), (8, 14), (14, 30), (14, 33), (34, 36), (2, 15), (0, 13), (15, 13), (2, 13), (8, 29), (0, 25), (2, 25), (13, 25), (2, 34), (29, 30), (4, 10), (29, 33), (20, 27), (6, 34), (30, 34), (14, 26), (0, 6), (14, 29), (0, 15), (2, 6), (8, 22), (2, 12), (8, 25), (13, 21), (8, 34), (2, 30)]}]}
{'aasc_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 182, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 183, 'instruction': 'addq\t$8, %rcx'}, {'instIndex': 189, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 190, 'instruction': 'movl\t$8, %edx'}, {'instIndex': 191, 'instruction': 'callq\tff_msrle_decode@PLT'}, {'instIndex': 192, 'instruction': 'jmp\t.LBB1_13'}, {'instIndex': 195, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 196, 'instruction': 'leaq\t.L.str.3(%rip), %rdx'}, {'instIndex': 197, 'instruction': 'movb\t$0, %al'}, {'instIndex': 198, 'instruction': 'callq\tav_log@PLT'}]}]}
The case of compiler clang with optimization O3.
Patched source code file: aasc.c
Patched function: 1---static int aasc_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_after/O3/aasc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_after/O3/aasc.s---aasc_decode_frame---after
function id: 1
function flag: True
There are 217 instructions for function: aasc_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '85', 'end': 91}, 'before': {'start': '85', 'end': 91}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 182, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 183, 'instruction': 'addq\t$8, %rcx'}, {'instIndex': 189, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 190, 'instruction': 'movl\t$8, %edx'}, {'instIndex': 191, 'instruction': 'callq\tff_msrle_decode@PLT'}, {'instIndex': 192, 'instruction': 'jmp\t.LBB1_13'}, {'instIndex': 195, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 196, 'instruction': 'leaq\t.L.str.3(%rip), %rdx'}, {'instIndex': 197, 'instruction': 'movb\t$0, %al'}, {'instIndex': 198, 'instruction': 'callq\tav_log@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_after/O3/aasc.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_after/O3/aasc.o---after
The extraction of function: aasc_decode_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 42 nodes and 65 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 217 instructions in binary file.
[4195218, 4195296, 4195298]
The execution time of patched subCFG information extraction via angr: 0:00:00.169998
{'aasc_decode_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003e2>, <DisassemblerInsn "mov" for 0x4003e9>, <DisassemblerInsn "mov" for 0x4003f1>, <DisassemblerInsn "lea" for 0x4003f6>, <DisassemblerInsn "mov" for 0x4003fd>, <DisassemblerInsn "call" for 0x4003ff>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400412>, <DisassemblerInsn "mov" for 0x40041a>, <DisassemblerInsn "mov" for 0x400422>, <DisassemblerInsn "mov" for 0x40042a>, <DisassemblerInsn "mov" for 0x400430>, <DisassemblerInsn "call" for 0x400433>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400404>, <DisassemblerInsn "mov" for 0x400409>, <DisassemblerInsn "jmp" for 0x400410>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4003e0>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400392>, <DisassemblerInsn "mov" for 0x40039a>, <DisassemblerInsn "mov" for 0x4003a2>, <DisassemblerInsn "mov" for 0x4003aa>, <DisassemblerInsn "mov" for 0x4003b2>, <DisassemblerInsn "mov" for 0x4003ba>, <DisassemblerInsn "add" for 0x4003bd>, <DisassemblerInsn "mov" for 0x4003c1>, <DisassemblerInsn "mov" for 0x4003c5>, <DisassemblerInsn "mov" for 0x4003c9>, <DisassemblerInsn "add" for 0x4003cc>, <DisassemblerInsn "mov" for 0x4003cf>, <DisassemblerInsn "mov" for 0x4003d3>, <DisassemblerInsn "mov" for 0x4003d6>, <DisassemblerInsn "call" for 0x4003db>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40013b>, <DisassemblerInsn "sub" for 0x400142>, <DisassemblerInsn "je" for 0x400145>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40014b>]'}], 'cfg_block_detailed_info': [{'block_Idx': 18, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x94]>', '<mov~~rdi, qword ptr [rsp + 0xb8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0xae]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~rdi, qword ptr [rsp + 0xc0]>', '<mov~~rcx, qword ptr [rsp + 0xc8]>', '<mov~~dword ptr [rcx], 1>', '<mov~~rsi, qword ptr [rax]>', '<call~~0x500028>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<jmp~~0x400455>']}, {'block_Idx': 17, 'blockInsts': ['<jmp~~0x400412>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xb8]>', '<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~rdx, qword ptr [rsp + 0xe8]>', '<mov~~rsi, qword ptr [rsp + 0x98]>', '<mov~~r8d, dword ptr [rsp + 0xa4]>', '<mov~~rcx, rdx>', '<add~~rcx, 8>', '<mov~~qword ptr [rdx + 8], rsi>', '<mov~~qword ptr [rdx + 0x18], rsi>', '<mov~~r8d, r8d>', '<add~~rsi, r8>', '<mov~~qword ptr [rdx + 0x10], rsi>', '<mov~~rsi, qword ptr [rax]>', '<mov~~edx, 8>', '<call~~0x500020>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x94]>', '<sub~~eax, 1>', '<je~~0x400392>']}, {'block_Idx': 14, 'blockInsts': ['<jmp~~0x4003e2>']}], 'cfg_edge_info': [(13, 17), (14, 18), (10, 13), (17, 11), (18, 21)]}]}
{'aasc_decode_frame': [4195218, 4195296, 4195298]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_after/O3/aasc.o---after
The extraction of function: aasc_decode_frame
[4195218, 4195296, 4195298]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 38 nodes and 57 edges in CFGEmulated.
It has 38 nodes and 55 edges in CDG.
It has 754 nodes and 899 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4195218, 4195296, 4195298]
{4195332, 4194567, 4194960, 4194833, 4195218, 4195346, 4195099, 4194849, 4194469, 4194738, 4195384, 4194617, 4194619, 4194368, 4194880, 4194754, 4195396, 4195012, 4194635, 4194509, 4194640, 4195413, 4194521, 4195296, 4195298, 4195182, 4194548}
[33, 12, 27, 2, 13, 15, 36, 16, 28, 0, 30, 20, 23, 26, 21, 25, 29, 1, 4, 5, 37, 8, 14, 22, 9, 34, 6, 11, 10]
The execution time of patched slicing information extraction via angr: 0:00:07.749967
{'aasc_decode_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400290>, <DisassemblerInsn "mov" for 0x400294>, <DisassemblerInsn "mov" for 0x400299>, <DisassemblerInsn "mov" for 0x40029d>, <DisassemblerInsn "mov" for 0x4002a2>, <DisassemblerInsn "mov" for 0x4002a9>, <DisassemblerInsn "mov" for 0x4002ad>, <DisassemblerInsn "cmp" for 0x4002b2>, <DisassemblerInsn "mov" for 0x4002b5>, <DisassemblerInsn "mov" for 0x4002b9>, <DisassemblerInsn "je" for 0x4002be>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40013b>, <DisassemblerInsn "sub" for 0x400142>, <DisassemblerInsn "je" for 0x400145>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400404>, <DisassemblerInsn "mov" for 0x400409>, <DisassemblerInsn "jmp" for 0x400410>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000a5>, <DisassemblerInsn "mov" for 0x4000ad>, <DisassemblerInsn "mov" for 0x4000b5>, <DisassemblerInsn "add" for 0x4000b8>, <DisassemblerInsn "mov" for 0x4000bc>, <DisassemblerInsn "mov" for 0x4000c4>, <DisassemblerInsn "call" for 0x4000c8>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400412>, <DisassemblerInsn "mov" for 0x40041a>, <DisassemblerInsn "mov" for 0x400422>, <DisassemblerInsn "mov" for 0x40042a>, <DisassemblerInsn "mov" for 0x400430>, <DisassemblerInsn "call" for 0x400433>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400392>, <DisassemblerInsn "mov" for 0x40039a>, <DisassemblerInsn "mov" for 0x4003a2>, <DisassemblerInsn "mov" for 0x4003aa>, <DisassemblerInsn "mov" for 0x4003b2>, <DisassemblerInsn "mov" for 0x4003ba>, <DisassemblerInsn "add" for 0x4003bd>, <DisassemblerInsn "mov" for 0x4003c1>, <DisassemblerInsn "mov" for 0x4003c5>, <DisassemblerInsn "mov" for 0x4003c9>, <DisassemblerInsn "add" for 0x4003cc>, <DisassemblerInsn "mov" for 0x4003cf>, <DisassemblerInsn "mov" for 0x4003d3>, <DisassemblerInsn "mov" for 0x4003d6>, <DisassemblerInsn "call" for 0x4003db>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40036e>, <DisassemblerInsn "mov" for 0x400372>, <DisassemblerInsn "mov" for 0x400376>, <DisassemblerInsn "cmp" for 0x40037b>, <DisassemblerInsn "mov" for 0x40037e>, <DisassemblerInsn "mov" for 0x400382>, <DisassemblerInsn "jg" for 0x400387>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40014b>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002a2>, <DisassemblerInsn "mov" for 0x4002a9>, <DisassemblerInsn "mov" for 0x4002ad>, <DisassemblerInsn "cmp" for 0x4002b2>, <DisassemblerInsn "mov" for 0x4002b5>, <DisassemblerInsn "mov" for 0x4002b9>, <DisassemblerInsn "je" for 0x4002be>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400040>, <DisassemblerInsn "mov" for 0x400047>, <DisassemblerInsn "mov" for 0x40004f>, <DisassemblerInsn "mov" for 0x400057>, <DisassemblerInsn "mov" for 0x40005f>, <DisassemblerInsn "mov" for 0x400063>, <DisassemblerInsn "mov" for 0x40006b>, <DisassemblerInsn "add" for 0x40006e>, <DisassemblerInsn "mov" for 0x400072>, <DisassemblerInsn "mov" for 0x40007a>, <DisassemblerInsn "mov" for 0x40007d>, <DisassemblerInsn "mov" for 0x400084>, <DisassemblerInsn "mov" for 0x400088>, <DisassemblerInsn "mov" for 0x400090>, <DisassemblerInsn "cmp" for 0x400095>, <DisassemblerInsn "mov" for 0x400098>, <DisassemblerInsn "jl" for 0x40009f>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002c4>, <DisassemblerInsn "mov" for 0x4002c9>, <DisassemblerInsn "mov" for 0x4002cd>, <DisassemblerInsn "mov" for 0x4002d5>, <DisassemblerInsn "mov" for 0x4002dd>, <DisassemblerInsn "mov" for 0x4002e2>, <DisassemblerInsn "add" for 0x4002e6>, <DisassemblerInsn "mov" for 0x4002e9>, <DisassemblerInsn "mov" for 0x4002ee>, <DisassemblerInsn "add" for 0x4002f0>, <DisassemblerInsn "mov" for 0x4002f3>, <DisassemblerInsn "mov" for 0x4002f7>, <DisassemblerInsn "mov" for 0x4002fa>, <DisassemblerInsn "imul" for 0x4002fd>, <DisassemblerInsn "mov" for 0x400301>, <DisassemblerInsn "movsxd" for 0x400305>, <DisassemblerInsn "add" for 0x400308>, <DisassemblerInsn "mov" for 0x40030b>, <DisassemblerInsn "imul" for 0x400310>, <DisassemblerInsn "movsxd" for 0x400313>, <DisassemblerInsn "call" for 0x400316>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003e2>, <DisassemblerInsn "mov" for 0x4003e9>, <DisassemblerInsn "mov" for 0x4003f1>, <DisassemblerInsn "lea" for 0x4003f6>, <DisassemblerInsn "mov" for 0x4003fd>, <DisassemblerInsn "call" for 0x4003ff>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4003e0>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400221>, <DisassemblerInsn "mov" for 0x400229>, <DisassemblerInsn "mov" for 0x40022d>, <DisassemblerInsn "and" for 0x40022f>, <DisassemblerInsn "cmp" for 0x400232>, <DisassemblerInsn "mov" for 0x400235>, <DisassemblerInsn "mov" for 0x400239>, <DisassemblerInsn "je" for 0x40023e>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400438>, <DisassemblerInsn "mov" for 0x40043b>, <DisassemblerInsn "jl" for 0x400442>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400444>, <DisassemblerInsn "mov" for 0x40044c>, <DisassemblerInsn "mov" for 0x40044e>, <DisassemblerInsn "mov" for 0x400455>, <DisassemblerInsn "add" for 0x40045c>, <DisassemblerInsn "ret" for 0x400463>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400240>, <DisassemblerInsn "mov" for 0x400248>, <DisassemblerInsn "mov" for 0x40024f>, <DisassemblerInsn "mov" for 0x400257>, <DisassemblerInsn "mov" for 0x40025c>, <DisassemblerInsn "add" for 0x400264>, <DisassemblerInsn "mov" for 0x400267>, <DisassemblerInsn "mov" for 0x40026c>, <DisassemblerInsn "add" for 0x40026e>, <DisassemblerInsn "mov" for 0x400271>, <DisassemblerInsn "mov" for 0x400275>, <DisassemblerInsn "mov" for 0x400278>, <DisassemblerInsn "imul" for 0x40027b>, <DisassemblerInsn "movsxd" for 0x40027f>, <DisassemblerInsn "add" for 0x400282>, <DisassemblerInsn "imul" for 0x400285>, <DisassemblerInsn "movsxd" for 0x400288>, <DisassemblerInsn "call" for 0x40028b>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400455>, <DisassemblerInsn "add" for 0x40045c>, <DisassemblerInsn "ret" for 0x400463>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000cd>, <DisassemblerInsn "cmp" for 0x4000d4>, <DisassemblerInsn "jge" for 0x4000d7>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000d9>, <DisassemblerInsn "mov" for 0x4000e1>, <DisassemblerInsn "lea" for 0x4000e6>, <DisassemblerInsn "mov" for 0x4000ed>, <DisassemblerInsn "call" for 0x4000ef>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40038d>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400150>, <DisassemblerInsn "mov" for 0x400157>, <DisassemblerInsn "mov" for 0x40015f>, <DisassemblerInsn "add" for 0x400162>, <DisassemblerInsn "mov" for 0x400169>, <DisassemblerInsn "mov" for 0x400171>, <DisassemblerInsn "mov" for 0x400177>, <DisassemblerInsn "imul" for 0x40017e>, <DisassemblerInsn "add" for 0x400181>, <DisassemblerInsn "and" for 0x400184>, <DisassemblerInsn "mov" for 0x400187>, <DisassemblerInsn "mov" for 0x40018e>, <DisassemblerInsn "mov" for 0x400194>, <DisassemblerInsn "imul" for 0x40019b>, <DisassemblerInsn "mov" for 0x40019e>, <DisassemblerInsn "cmp" for 0x4001a3>, <DisassemblerInsn "mov" for 0x4001a5>, <DisassemblerInsn "jl" for 0x4001ac>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001c2>, <DisassemblerInsn "mov" for 0x4001c9>, <DisassemblerInsn "mov" for 0x4001d1>, <DisassemblerInsn "mov" for 0x4001d8>, <DisassemblerInsn "mov" for 0x4001e0>, <DisassemblerInsn "movsxd" for 0x4001e7>, <DisassemblerInsn "mov" for 0x4001ea>, <DisassemblerInsn "add" for 0x4001ef>, <DisassemblerInsn "mov" for 0x4001f2>, <DisassemblerInsn "mov" for 0x4001f6>, <DisassemblerInsn "mov" for 0x4001f9>, <DisassemblerInsn "imul" for 0x4001fc>, <DisassemblerInsn "movsxd" for 0x400200>, <DisassemblerInsn "add" for 0x400203>, <DisassemblerInsn "imul" for 0x400206>, <DisassemblerInsn "movsxd" for 0x400209>, <DisassemblerInsn "call" for 0x40020c>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400211>, <DisassemblerInsn "cmp" for 0x400218>, <DisassemblerInsn "je" for 0x40021b>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400139>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40031b>, <DisassemblerInsn "mov" for 0x400320>, <DisassemblerInsn "mov" for 0x400325>, <DisassemblerInsn "mov" for 0x40032d>, <DisassemblerInsn "mov" for 0x400335>, <DisassemblerInsn "add" for 0x400339>, <DisassemblerInsn "mov" for 0x40033c>, <DisassemblerInsn "mov" for 0x400341>, <DisassemblerInsn "add" for 0x400343>, <DisassemblerInsn "mov" for 0x400346>, <DisassemblerInsn "mov" for 0x40034a>, <DisassemblerInsn "mov" for 0x40034d>, <DisassemblerInsn "imul" for 0x400350>, <DisassemblerInsn "mov" for 0x400354>, <DisassemblerInsn "movsxd" for 0x400358>, <DisassemblerInsn "add" for 0x40035b>, <DisassemblerInsn "mov" for 0x40035e>, <DisassemblerInsn "imul" for 0x400363>, <DisassemblerInsn "movsxd" for 0x400366>, <DisassemblerInsn "call" for 0x400369>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400107>, <DisassemblerInsn "mov" for 0x40010e>, <DisassemblerInsn "mov" for 0x400116>, <DisassemblerInsn "mov" for 0x400118>, <DisassemblerInsn "add" for 0x40011f>, <DisassemblerInsn "mov" for 0x400123>, <DisassemblerInsn "add" for 0x40012b>, <DisassemblerInsn "mov" for 0x40012e>, <DisassemblerInsn "test" for 0x400135>, <DisassemblerInsn "je" for 0x400137>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001b2>, <DisassemblerInsn "cmp" for 0x4001b9>, <DisassemblerInsn "jle" for 0x4001bc>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000f4>, <DisassemblerInsn "mov" for 0x4000fb>, <DisassemblerInsn "jmp" for 0x400102>]'}], 'cfg_block_detailed_info': [{'block_Idx': 33, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x54]>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~dword ptr [rsp + 0x64], ecx>', '<mov~~qword ptr [rsp + 0x68], rax>', '<mov~~edx, dword ptr [rsp + 0x90]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<mov~~rax, qword ptr [rsp + 0x68]>', '<cmp~~edx, 2>', '<mov~~dword ptr [rsp + 0x44], ecx>', '<mov~~qword ptr [rsp + 0x48], rax>', '<je~~0x400412>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x94]>', '<sub~~eax, 1>', '<je~~0x400392>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<jmp~~0x400455>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xb8]>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~rcx, rax>', '<add~~rcx, 0x20>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<mov~~rsi, qword ptr [rax + 0x20]>', '<call~~0x500008>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~rdi, qword ptr [rsp + 0xc0]>', '<mov~~rcx, qword ptr [rsp + 0xc8]>', '<mov~~dword ptr [rcx], 1>', '<mov~~rsi, qword ptr [rax]>', '<call~~0x500028>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xb8]>', '<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~rdx, qword ptr [rsp + 0xe8]>', '<mov~~rsi, qword ptr [rsp + 0x98]>', '<mov~~r8d, dword ptr [rsp + 0xa4]>', '<mov~~rcx, rdx>', '<add~~rcx, 8>', '<mov~~qword ptr [rdx + 8], rsi>', '<mov~~qword ptr [rdx + 0x18], rsi>', '<mov~~r8d, r8d>', '<add~~rsi, r8>', '<mov~~qword ptr [rdx + 0x10], rsi>', '<mov~~rsi, qword ptr [rax]>', '<mov~~edx, 8>', '<call~~0x500020>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x30]>', '<mov~~ecx, dword ptr [rsp + 0x34]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~edx, 2>', '<mov~~dword ptr [rsp + 0x44], ecx>', '<mov~~qword ptr [rsp + 0x48], rax>', '<jg~~0x4002c4>']}, {'block_Idx': 16, 'blockInsts': ['<jmp~~0x4003e2>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x90]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<mov~~rax, qword ptr [rsp + 0x68]>', '<cmp~~edx, 2>', '<mov~~dword ptr [rsp + 0x44], ecx>', '<mov~~qword ptr [rsp + 0x48], rax>', '<je~~0x400412>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0xf8>', '<mov~~qword ptr [rsp + 0xb8], rdi>', '<mov~~qword ptr [rsp + 0xc0], rsi>', '<mov~~qword ptr [rsp + 0xc8], rdx>', '<mov~~rax, qword ptr [rcx + 0x18]>', '<mov~~qword ptr [rsp + 0xd0], rax>', '<mov~~rax, rcx>', '<add~~rax, 0x20>', '<mov~~qword ptr [rsp + 0xd8], rax>', '<mov~~ecx, dword ptr [rcx + 0x20]>', '<mov~~dword ptr [rsp + 0xe4], ecx>', '<mov~~rax, qword ptr [rdi + 0x48]>', '<mov~~qword ptr [rsp + 0xe8], rax>', '<mov~~eax, 0xc1444e49>', '<cmp~~ecx, 4>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<jl~~0x400455>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x48]>', '<mov~~ecx, dword ptr [rsp + 0x44]>', '<mov~~rdx, qword ptr [rsp + 0xa8]>', '<mov~~rax, qword ptr [rsp + 0x80]>', '<mov~~rdi, qword ptr [rsp + 0x70]>', '<mov~~dword ptr [rsp + 0x30], ecx>', '<add~~rsi, rdi>', '<mov~~qword ptr [rsp + 0x18], rsi>', '<mov~~eax, dword ptr [rax]>', '<add~~ecx, -1>', '<mov~~dword ptr [rsp + 8], ecx>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdi, qword ptr [rdx]>', '<imul~~ecx, dword ptr [rdx + 0x40]>', '<mov~~dword ptr [rsp + 0xc], ecx>', '<movsxd~~rcx, ecx>', '<add~~rdi, rcx>', '<mov~~qword ptr [rsp + 0x10], rdi>', '<imul~~eax, eax, 3>', '<movsxd~~rdx, eax>', '<call~~0x500018>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x94]>', '<mov~~rdi, qword ptr [rsp + 0xb8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0xae]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 23, 'blockInsts': ['<jmp~~0x400412>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~ecx, dword ptr [rsp + 0x7c]>', '<mov~~edx, ecx>', '<and~~edx, 1>', '<cmp~~edx, 0>', '<mov~~dword ptr [rsp + 0x64], ecx>', '<mov~~qword ptr [rsp + 0x68], rax>', '<je~~0x4002a2>']}, {'block_Idx': 21, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<jl~~0x400455>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<mov~~eax, dword ptr [rsp + 0xf4]>', '<add~~rsp, 0xf8>', '<ret~~>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xa8]>', '<mov~~ecx, dword ptr [rsp + 0x90]>', '<mov~~rax, qword ptr [rsp + 0x80]>', '<mov~~rdi, qword ptr [rsp + 0x70]>', '<mov~~rsi, qword ptr [rsp + 0x98]>', '<add~~rsi, rdi>', '<mov~~qword ptr [rsp + 0x58], rsi>', '<mov~~eax, dword ptr [rax]>', '<add~~ecx, -2>', '<mov~~dword ptr [rsp + 0x54], ecx>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdi, qword ptr [rdx]>', '<imul~~ecx, dword ptr [rdx + 0x40]>', '<movsxd~~rcx, ecx>', '<add~~rdi, rcx>', '<imul~~eax, eax, 3>', '<movsxd~~rdx, eax>', '<call~~0x500018>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xf4]>', '<add~~rsp, 0xf8>', '<ret~~>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~dword ptr [rsp + 0xb4], eax>', '<cmp~~eax, 0>', '<jge~~0x400107>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xb8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3a7]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 37, 'blockInsts': ['<jmp~~0x400412>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xa4]>', '<mov~~rax, qword ptr [rsp + 0xb8]>', '<mov~~rdx, rax>', '<add~~rdx, 0x94>', '<mov~~qword ptr [rsp + 0x80], rdx>', '<mov~~edx, dword ptr [rax + 0x94]>', '<mov~~dword ptr [rsp + 0x88], edx>', '<imul~~edx, edx, 3>', '<add~~edx, 3>', '<and~~edx, 0xfffffffc>', '<mov~~dword ptr [rsp + 0x8c], edx>', '<mov~~eax, dword ptr [rax + 0x98]>', '<mov~~dword ptr [rsp + 0x90], eax>', '<imul~~edx, eax>', '<mov~~eax, 0xc1444e49>', '<cmp~~ecx, edx>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<jl~~0x400455>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x90]>', '<mov~~rsi, qword ptr [rsp + 0x98]>', '<mov~~eax, dword ptr [rsp + 0x88]>', '<mov~~rdx, qword ptr [rsp + 0xa8]>', '<mov~~edi, dword ptr [rsp + 0x8c]>', '<movsxd~~rdi, edi>', '<mov~~qword ptr [rsp + 0x70], rdi>', '<add~~ecx, -1>', '<mov~~dword ptr [rsp + 0x7c], ecx>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdi, qword ptr [rdx]>', '<imul~~ecx, dword ptr [rdx + 0x40]>', '<movsxd~~rcx, ecx>', '<add~~rdi, rcx>', '<imul~~eax, eax, 3>', '<movsxd~~rdx, eax>', '<call~~0x500018>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x90]>', '<cmp~~eax, 1>', '<je~~0x400412>']}, {'block_Idx': 9, 'blockInsts': ['<jmp~~0x40013b>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x18]>', '<mov~~rdi, qword ptr [rsp + 0x70]>', '<mov~~rax, qword ptr [rsp + 0x80]>', '<mov~~rdx, qword ptr [rsp + 0xa8]>', '<mov~~ecx, dword ptr [rsp + 0x30]>', '<add~~rsi, rdi>', '<mov~~qword ptr [rsp + 0x38], rsi>', '<mov~~eax, dword ptr [rax]>', '<add~~ecx, -2>', '<mov~~dword ptr [rsp + 0x34], ecx>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdi, qword ptr [rdx]>', '<imul~~ecx, dword ptr [rdx + 0x40]>', '<mov~~dword ptr [rsp + 0x24], ecx>', '<movsxd~~rcx, ecx>', '<add~~rdi, rcx>', '<mov~~qword ptr [rsp + 0x28], rdi>', '<imul~~eax, eax, 3>', '<movsxd~~rdx, eax>', '<call~~0x500018>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xe4]>', '<mov~~rdx, qword ptr [rsp + 0xd0]>', '<mov~~eax, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0x94], eax>', '<add~~rdx, 4>', '<mov~~qword ptr [rsp + 0x98], rdx>', '<add~~ecx, -4>', '<mov~~dword ptr [rsp + 0xa4], ecx>', '<test~~eax, eax>', '<je~~0x400150>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x90]>', '<cmp~~eax, 0>', '<jle~~0x400412>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xb4]>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<jmp~~0x400455>']}], 'cfg_edge_info': [(16, 20), (27, 1), (12, 16), (4, 6), (23, 13), (33, 30), (21, 25), (0, 2), (22, 26), (5, 10), (14, 22), (11, 14), (28, 30), (36, 37), (6, 8), (15, 23), (22, 13), (4, 5), (26, 29), (12, 15), (8, 11), (0, 1), (2, 4), (36, 30), (34, 36), (11, 13), (33, 13), (26, 28), (21, 1), (29, 33), (37, 13), (20, 27), (8, 1), (28, 13), (9, 12), (10, 1), (13, 21), (6, 9), (30, 34)], 'cdg_edge_info': [(6, 12), (12, 1), (33, 36), (12, 16), (26, 33), (4, 6), (12, 13), (21, 25), (0, 2), (22, 26), (11, 14), (8, 21), (36, 34), (6, 8), (4, 5), (26, 29), (12, 15), (12, 21), (8, 11), (0, 1), (12, 27), (36, 30), (0, 4), (36, 36), (11, 22), (33, 34), (4, 1), (4, 10), (12, 23), (12, 20), (8, 1), (8, 13), (33, 30), (6, 9), (21, 1)], 'ddg_edge_info': [(6, 12), (6, 15), (26, 33), (6, 30), (34, 13), (33, 30), (21, 25), (14, 13), (5, 10), (0, 2), (0, 5), (14, 22), (5, 25), (27, 25), (0, 8), (2, 5), (2, 11), (2, 8), (14, 34), (8, 30), (2, 14), (0, 20), (10, 25), (8, 33), (2, 20), (30, 36), (6, 8), (6, 14), (6, 20), (2, 29), (29, 13), (6, 26), (20, 25), (6, 29), (29, 34), (8, 11), (34, 30), (2, 4), (36, 30), (8, 14), (14, 30), (14, 33), (34, 36), (2, 15), (0, 13), (15, 13), (2, 13), (8, 29), (0, 25), (2, 25), (13, 25), (2, 34), (29, 30), (4, 10), (29, 33), (20, 27), (6, 34), (30, 34), (14, 26), (0, 6), (14, 29), (0, 15), (2, 6), (8, 22), (2, 12), (8, 25), (13, 21), (8, 34), (2, 30)]}]}
{'aasc_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 182, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 183, 'instruction': 'addq\t$8, %rcx'}, {'instIndex': 189, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 190, 'instruction': 'movl\t$8, %edx'}, {'instIndex': 191, 'instruction': 'callq\tff_msrle_decode@PLT'}, {'instIndex': 192, 'instruction': 'jmp\t.LBB1_13'}, {'instIndex': 195, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 196, 'instruction': 'leaq\t.L.str.3(%rip), %rdx'}, {'instIndex': 197, 'instruction': 'movb\t$0, %al'}, {'instIndex': 198, 'instruction': 'callq\tav_log@PLT'}]}]}
The case of compiler clang with optimization Os.
Patched source code file: aasc.c
Patched function: 1---static int aasc_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_after/Os/aasc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_after/Os/aasc.s---aasc_decode_frame---after
function id: 1
function flag: True
There are 164 instructions for function: aasc_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '85', 'end': 91}, 'before': {'start': '85', 'end': 91}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 129, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 130, 'instruction': 'addq\t$8, %rcx'}, {'instIndex': 136, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 137, 'instruction': 'movl\t$8, %edx'}, {'instIndex': 138, 'instruction': 'callq\tff_msrle_decode@PLT'}, {'instIndex': 139, 'instruction': 'jmp\t.LBB1_10'}, {'instIndex': 142, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 143, 'instruction': 'leaq\t.L.str.3(%rip), %rdx'}, {'instIndex': 144, 'instruction': 'movb\t$0, %al'}, {'instIndex': 145, 'instruction': 'callq\tav_log@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_after/Os/aasc.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_after/Os/aasc.o---after
The extraction of function: aasc_decode_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 35 nodes and 51 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 164 instructions in binary file.
[4194898, 4194964, 4194966]
The execution time of patched subCFG information extraction via angr: 0:00:00.166785
{'aasc_decode_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400296>, <DisassemblerInsn "mov" for 0x40029a>, <DisassemblerInsn "mov" for 0x40029f>, <DisassemblerInsn "lea" for 0x4002a4>, <DisassemblerInsn "mov" for 0x4002ab>, <DisassemblerInsn "call" for 0x4002ad>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002c0>, <DisassemblerInsn "mov" for 0x4002c5>, <DisassemblerInsn "mov" for 0x4002cd>, <DisassemblerInsn "mov" for 0x4002d5>, <DisassemblerInsn "mov" for 0x4002db>, <DisassemblerInsn "call" for 0x4002de>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400294>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400116>, <DisassemblerInsn "sub" for 0x40011a>, <DisassemblerInsn "je" for 0x40011d>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400123>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400252>, <DisassemblerInsn "mov" for 0x400257>, <DisassemblerInsn "mov" for 0x40025c>, <DisassemblerInsn "mov" for 0x400264>, <DisassemblerInsn "mov" for 0x400269>, <DisassemblerInsn "mov" for 0x40026e>, <DisassemblerInsn "add" for 0x400271>, <DisassemblerInsn "mov" for 0x400275>, <DisassemblerInsn "mov" for 0x400279>, <DisassemblerInsn "mov" for 0x40027d>, <DisassemblerInsn "add" for 0x400280>, <DisassemblerInsn "mov" for 0x400283>, <DisassemblerInsn "mov" for 0x400287>, <DisassemblerInsn "mov" for 0x40028a>, <DisassemblerInsn "call" for 0x40028f>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002b2>, <DisassemblerInsn "mov" for 0x4002b7>, <DisassemblerInsn "jmp" for 0x4002be>]'}], 'cfg_block_detailed_info': [{'block_Idx': 18, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x54]>', '<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x9f]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x68]>', '<mov~~rdi, qword ptr [rsp + 0x80]>', '<mov~~rcx, qword ptr [rsp + 0x88]>', '<mov~~dword ptr [rcx], 1>', '<mov~~rsi, qword ptr [rax]>', '<call~~0x500028>']}, {'block_Idx': 17, 'blockInsts': ['<jmp~~0x4002c0>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<sub~~eax, 1>', '<je~~0x400252>']}, {'block_Idx': 14, 'blockInsts': ['<jmp~~0x400296>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rsp + 0x68]>', '<mov~~rdx, qword ptr [rsp + 0xa8]>', '<mov~~rsi, qword ptr [rsp + 0x58]>', '<mov~~r8d, dword ptr [rsp + 0x64]>', '<mov~~rcx, rdx>', '<add~~rcx, 8>', '<mov~~qword ptr [rdx + 8], rsi>', '<mov~~qword ptr [rdx + 0x18], rsi>', '<mov~~r8d, r8d>', '<add~~rsi, r8>', '<mov~~qword ptr [rdx + 0x10], rsi>', '<mov~~rsi, qword ptr [rax]>', '<mov~~edx, 8>', '<call~~0x500020>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0xb4], eax>', '<jmp~~0x400300>']}], 'cfg_edge_info': [(13, 17), (14, 18), (10, 13), (17, 11), (18, 21)]}]}
{'aasc_decode_frame': [4194898, 4194964, 4194966]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_after/Os/aasc.o---after
The extraction of function: aasc_decode_frame
[4194898, 4194964, 4194966]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 31 nodes and 45 edges in CFGEmulated.
It has 31 nodes and 40 edges in CDG.
It has 549 nodes and 647 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194898, 4194964, 4194966]
{4195072, 4194693, 4194964, 4194580, 4194966, 4194582, 4194456, 4194595, 4194600, 4194994, 4194869, 4194358, 4194490, 4195008, 4194499, 4194757, 4194898, 4194523, 4195043, 4194788, 4194539, 4195055, 4194680}
[21, 0, 26, 30, 1, 29, 9, 8, 15, 16, 12, 2, 14, 10, 22, 25, 6, 27, 4, 13, 5, 20, 23, 11]
The execution time of patched slicing information extraction via angr: 0:00:04.831374
{'aasc_decode_frame': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4002e3>, <DisassemblerInsn "mov" for 0x4002e6>, <DisassemblerInsn "jl" for 0x4002ed>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400036>, <DisassemblerInsn "mov" for 0x40003d>, <DisassemblerInsn "mov" for 0x400042>, <DisassemblerInsn "mov" for 0x40004a>, <DisassemblerInsn "mov" for 0x400052>, <DisassemblerInsn "mov" for 0x400056>, <DisassemblerInsn "mov" for 0x40005e>, <DisassemblerInsn "add" for 0x400061>, <DisassemblerInsn "mov" for 0x400065>, <DisassemblerInsn "mov" for 0x40006d>, <DisassemblerInsn "mov" for 0x400070>, <DisassemblerInsn "mov" for 0x400077>, <DisassemblerInsn "mov" for 0x40007b>, <DisassemblerInsn "mov" for 0x400083>, <DisassemblerInsn "cmp" for 0x400088>, <DisassemblerInsn "mov" for 0x40008b>, <DisassemblerInsn "jl" for 0x400092>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001e4>, <DisassemblerInsn "mov" for 0x4001e9>, <DisassemblerInsn "mov" for 0x4001ed>, <DisassemblerInsn "mov" for 0x4001f2>, <DisassemblerInsn "mov" for 0x4001f7>, <DisassemblerInsn "mov" for 0x4001fc>, <DisassemblerInsn "add" for 0x400200>, <DisassemblerInsn "mov" for 0x400203>, <DisassemblerInsn "mov" for 0x400208>, <DisassemblerInsn "add" for 0x40020a>, <DisassemblerInsn "mov" for 0x40020d>, <DisassemblerInsn "mov" for 0x400211>, <DisassemblerInsn "mov" for 0x400214>, <DisassemblerInsn "imul" for 0x400217>, <DisassemblerInsn "mov" for 0x40021b>, <DisassemblerInsn "movsxd" for 0x40021f>, <DisassemblerInsn "add" for 0x400222>, <DisassemblerInsn "mov" for 0x400225>, <DisassemblerInsn "imul" for 0x40022a>, <DisassemblerInsn "movsxd" for 0x40022d>, <DisassemblerInsn "call" for 0x400230>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400250>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400300>, <DisassemblerInsn "add" for 0x400307>, <DisassemblerInsn "ret" for 0x40030e>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400235>, <DisassemblerInsn "mov" for 0x400239>, <DisassemblerInsn "mov" for 0x40023d>, <DisassemblerInsn "cmp" for 0x400242>, <DisassemblerInsn "mov" for 0x400245>, <DisassemblerInsn "mov" for 0x400249>, <DisassemblerInsn "jg" for 0x40024e>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400114>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400128>, <DisassemblerInsn "mov" for 0x40012c>, <DisassemblerInsn "mov" for 0x400131>, <DisassemblerInsn "add" for 0x400134>, <DisassemblerInsn "mov" for 0x40013b>, <DisassemblerInsn "mov" for 0x400140>, <DisassemblerInsn "mov" for 0x400146>, <DisassemblerInsn "imul" for 0x40014a>, <DisassemblerInsn "add" for 0x40014d>, <DisassemblerInsn "and" for 0x400150>, <DisassemblerInsn "mov" for 0x400153>, <DisassemblerInsn "mov" for 0x400157>, <DisassemblerInsn "mov" for 0x40015d>, <DisassemblerInsn "imul" for 0x400161>, <DisassemblerInsn "mov" for 0x400164>, <DisassemblerInsn "cmp" for 0x400169>, <DisassemblerInsn "mov" for 0x40016b>, <DisassemblerInsn "jl" for 0x400172>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400252>, <DisassemblerInsn "mov" for 0x400257>, <DisassemblerInsn "mov" for 0x40025c>, <DisassemblerInsn "mov" for 0x400264>, <DisassemblerInsn "mov" for 0x400269>, <DisassemblerInsn "mov" for 0x40026e>, <DisassemblerInsn "add" for 0x400271>, <DisassemblerInsn "mov" for 0x400275>, <DisassemblerInsn "mov" for 0x400279>, <DisassemblerInsn "mov" for 0x40027d>, <DisassemblerInsn "add" for 0x400280>, <DisassemblerInsn "mov" for 0x400283>, <DisassemblerInsn "mov" for 0x400287>, <DisassemblerInsn "mov" for 0x40028a>, <DisassemblerInsn "call" for 0x40028f>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400123>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400116>, <DisassemblerInsn "sub" for 0x40011a>, <DisassemblerInsn "je" for 0x40011d>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400098>, <DisassemblerInsn "mov" for 0x40009d>, <DisassemblerInsn "mov" for 0x4000a5>, <DisassemblerInsn "add" for 0x4000a8>, <DisassemblerInsn "mov" for 0x4000ac>, <DisassemblerInsn "mov" for 0x4000b1>, <DisassemblerInsn "call" for 0x4000b5>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400185>, <DisassemblerInsn "mov" for 0x40018a>, <DisassemblerInsn "mov" for 0x40018e>, <DisassemblerInsn "mov" for 0x400192>, <DisassemblerInsn "mov" for 0x400197>, <DisassemblerInsn "movsxd" for 0x40019b>, <DisassemblerInsn "mov" for 0x40019e>, <DisassemblerInsn "add" for 0x4001a3>, <DisassemblerInsn "mov" for 0x4001a6>, <DisassemblerInsn "mov" for 0x4001aa>, <DisassemblerInsn "mov" for 0x4001ad>, <DisassemblerInsn "imul" for 0x4001b0>, <DisassemblerInsn "movsxd" for 0x4001b4>, <DisassemblerInsn "add" for 0x4001b7>, <DisassemblerInsn "imul" for 0x4001ba>, <DisassemblerInsn "movsxd" for 0x4001bd>, <DisassemblerInsn "call" for 0x4001c0>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000db>, <DisassemblerInsn "mov" for 0x4000df>, <DisassemblerInsn "jmp" for 0x4000e6>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001c5>, <DisassemblerInsn "mov" for 0x4001c9>, <DisassemblerInsn "mov" for 0x4001cd>, <DisassemblerInsn "cmp" for 0x4001d2>, <DisassemblerInsn "mov" for 0x4001d5>, <DisassemblerInsn "mov" for 0x4001d9>, <DisassemblerInsn "je" for 0x4001de>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002ef>, <DisassemblerInsn "mov" for 0x4002f7>, <DisassemblerInsn "mov" for 0x4002f9>, <DisassemblerInsn "mov" for 0x400300>, <DisassemblerInsn "add" for 0x400307>, <DisassemblerInsn "ret" for 0x40030e>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000eb>, <DisassemblerInsn "mov" for 0x4000f2>, <DisassemblerInsn "mov" for 0x4000fa>, <DisassemblerInsn "mov" for 0x4000fc>, <DisassemblerInsn "add" for 0x400100>, <DisassemblerInsn "mov" for 0x400104>, <DisassemblerInsn "add" for 0x400109>, <DisassemblerInsn "mov" for 0x40010c>, <DisassemblerInsn "test" for 0x400110>, <DisassemblerInsn "je" for 0x400112>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002b2>, <DisassemblerInsn "mov" for 0x4002b7>, <DisassemblerInsn "jmp" for 0x4002be>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000ba>, <DisassemblerInsn "cmp" for 0x4000be>, <DisassemblerInsn "jge" for 0x4000c1>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002c0>, <DisassemblerInsn "mov" for 0x4002c5>, <DisassemblerInsn "mov" for 0x4002cd>, <DisassemblerInsn "mov" for 0x4002d5>, <DisassemblerInsn "mov" for 0x4002db>, <DisassemblerInsn "call" for 0x4002de>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c3>, <DisassemblerInsn "mov" for 0x4000c8>, <DisassemblerInsn "lea" for 0x4000cd>, <DisassemblerInsn "mov" for 0x4000d4>, <DisassemblerInsn "call" for 0x4000d6>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400296>, <DisassemblerInsn "mov" for 0x40029a>, <DisassemblerInsn "mov" for 0x40029f>, <DisassemblerInsn "lea" for 0x4002a4>, <DisassemblerInsn "mov" for 0x4002ab>, <DisassemblerInsn "call" for 0x4002ad>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400294>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400178>, <DisassemblerInsn "cmp" for 0x40017c>, <DisassemblerInsn "jle" for 0x40017f>]'}], 'cfg_block_detailed_info': [{'block_Idx': 21, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0xb4], eax>', '<jl~~0x400300>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0xb8>', '<mov~~qword ptr [rsp + 0x78], rdi>', '<mov~~qword ptr [rsp + 0x80], rsi>', '<mov~~qword ptr [rsp + 0x88], rdx>', '<mov~~rax, qword ptr [rcx + 0x18]>', '<mov~~qword ptr [rsp + 0x90], rax>', '<mov~~rax, rcx>', '<add~~rax, 0x20>', '<mov~~qword ptr [rsp + 0x98], rax>', '<mov~~ecx, dword ptr [rcx + 0x20]>', '<mov~~dword ptr [rsp + 0xa4], ecx>', '<mov~~rax, qword ptr [rdi + 0x48]>', '<mov~~qword ptr [rsp + 0xa8], rax>', '<mov~~eax, 0xc1444e49>', '<cmp~~ecx, 4>', '<mov~~dword ptr [rsp + 0xb4], eax>', '<jl~~0x400300>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rsp + 0x34]>', '<mov~~rdx, qword ptr [rsp + 0x68]>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rsp + 0x18], ecx>', '<add~~rsi, rdi>', '<mov~~qword ptr [rsp + 0x20], rsi>', '<mov~~eax, dword ptr [rax]>', '<add~~ecx, -1>', '<mov~~dword ptr [rsp + 0x1c], ecx>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdi, qword ptr [rdx]>', '<imul~~ecx, dword ptr [rdx + 0x40]>', '<mov~~dword ptr [rsp + 0xc], ecx>', '<movsxd~~rcx, ecx>', '<add~~rdi, rcx>', '<mov~~qword ptr [rsp + 0x10], rdi>', '<imul~~eax, eax, 3>', '<movsxd~~rdx, eax>', '<call~~0x500018>']}, {'block_Idx': 30, 'blockInsts': ['<jmp~~0x4002c0>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xb4]>', '<add~~rsp, 0xb8>', '<ret~~>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x18]>', '<mov~~ecx, dword ptr [rsp + 0x1c]>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<cmp~~edx, 1>', '<mov~~dword ptr [rsp + 0x34], ecx>', '<mov~~qword ptr [rsp + 0x38], rax>', '<jg~~0x4001e4>']}, {'block_Idx': 9, 'blockInsts': ['<jmp~~0x400116>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x64]>', '<mov~~rax, qword ptr [rsp + 0x78]>', '<mov~~rdx, rax>', '<add~~rdx, 0x94>', '<mov~~qword ptr [rsp + 0x40], rdx>', '<mov~~edx, dword ptr [rax + 0x94]>', '<mov~~dword ptr [rsp + 0x48], edx>', '<imul~~edx, edx, 3>', '<add~~edx, 3>', '<and~~edx, 0xfffffffc>', '<mov~~dword ptr [rsp + 0x4c], edx>', '<mov~~eax, dword ptr [rax + 0x98]>', '<mov~~dword ptr [rsp + 0x50], eax>', '<imul~~edx, eax>', '<mov~~eax, 0xc1444e49>', '<cmp~~ecx, edx>', '<mov~~dword ptr [rsp + 0xb4], eax>', '<jl~~0x400300>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rsp + 0x68]>', '<mov~~rdx, qword ptr [rsp + 0xa8]>', '<mov~~rsi, qword ptr [rsp + 0x58]>', '<mov~~r8d, dword ptr [rsp + 0x64]>', '<mov~~rcx, rdx>', '<add~~rcx, 8>', '<mov~~qword ptr [rdx + 8], rsi>', '<mov~~qword ptr [rdx + 0x18], rsi>', '<mov~~r8d, r8d>', '<add~~rsi, r8>', '<mov~~qword ptr [rdx + 0x10], rsi>', '<mov~~rsi, qword ptr [rax]>', '<mov~~edx, 8>', '<call~~0x500020>']}, {'block_Idx': 16, 'blockInsts': ['<jmp~~0x400296>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<sub~~eax, 1>', '<je~~0x400252>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~rcx, rax>', '<add~~rcx, 0x20>', '<mov~~qword ptr [rsp + 0x68], rcx>', '<mov~~rsi, qword ptr [rax + 0x20]>', '<call~~0x500008>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x58]>', '<mov~~ecx, dword ptr [rsp + 0x50]>', '<mov~~eax, dword ptr [rsp + 0x48]>', '<mov~~rdx, qword ptr [rsp + 0x68]>', '<mov~~edi, dword ptr [rsp + 0x4c]>', '<movsxd~~rdi, edi>', '<mov~~qword ptr [rsp + 0x28], rdi>', '<add~~ecx, -1>', '<mov~~dword ptr [rsp + 0x30], ecx>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdi, qword ptr [rdx]>', '<imul~~ecx, dword ptr [rdx + 0x40]>', '<movsxd~~rcx, ecx>', '<add~~rdi, rcx>', '<imul~~eax, eax, 3>', '<movsxd~~rdx, eax>', '<call~~0x500018>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x74]>', '<mov~~dword ptr [rsp + 0xb4], eax>', '<jmp~~0x400300>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x50]>', '<mov~~ecx, dword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<cmp~~edx, 1>', '<mov~~dword ptr [rsp + 0x34], ecx>', '<mov~~qword ptr [rsp + 0x38], rax>', '<je~~0x4002c0>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0xb4], eax>', '<mov~~eax, dword ptr [rsp + 0xb4]>', '<add~~rsp, 0xb8>', '<ret~~>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xa4]>', '<mov~~rdx, qword ptr [rsp + 0x90]>', '<mov~~eax, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0x54], eax>', '<add~~rdx, 4>', '<mov~~qword ptr [rsp + 0x58], rdx>', '<add~~ecx, -4>', '<mov~~dword ptr [rsp + 0x64], ecx>', '<test~~eax, eax>', '<je~~0x400128>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0xb4], eax>', '<jmp~~0x400300>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~dword ptr [rsp + 0x74], eax>', '<cmp~~eax, 0>', '<jge~~0x4000eb>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x68]>', '<mov~~rdi, qword ptr [rsp + 0x80]>', '<mov~~rcx, qword ptr [rsp + 0x88]>', '<mov~~dword ptr [rcx], 1>', '<mov~~rsi, qword ptr [rax]>', '<call~~0x500028>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x25f]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x54]>', '<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x9f]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 23, 'blockInsts': ['<jmp~~0x4002c0>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50]>', '<cmp~~eax, 0>', '<jle~~0x4002c0>']}], 'cfg_edge_info': [(16, 20), (27, 1), (12, 16), (29, 26), (4, 6), (23, 13), (21, 25), (0, 2), (5, 10), (22, 26), (14, 22), (11, 14), (6, 8), (15, 23), (22, 13), (4, 5), (26, 29), (12, 15), (8, 11), (0, 1), (2, 4), (11, 13), (29, 30), (8, 1), (20, 27), (30, 13), (9, 12), (10, 1), (13, 21), (6, 9), (21, 1)], 'cdg_edge_info': [(6, 12), (12, 1), (29, 26), (12, 16), (4, 6), (12, 13), (29, 29), (21, 25), (0, 2), (22, 26), (22, 29), (11, 14), (8, 21), (6, 8), (4, 5), (12, 15), (12, 21), (8, 11), (12, 27), (0, 1), (0, 4), (11, 22), (4, 1), (4, 10), (12, 23), (12, 20), (8, 1), (8, 13), (6, 9), (21, 1)], 'ddg_edge_info': [(6, 12), (6, 15), (29, 26), (21, 25), (14, 13), (0, 2), (22, 26), (5, 10), (8, 25), (14, 22), (0, 5), (5, 25), (27, 25), (0, 8), (2, 5), (2, 11), (2, 8), (2, 14), (10, 25), (0, 20), (2, 20), (2, 26), (6, 8), (6, 14), (6, 20), (26, 29), (6, 26), (20, 25), (8, 11), (2, 4), (8, 14), (0, 13), (8, 26), (15, 13), (2, 13), (26, 13), (0, 25), (2, 25), (13, 25), (6, 22), (4, 10), (20, 27), (14, 26), (0, 6), (0, 15), (2, 12), (2, 6), (8, 22), (2, 15), (13, 21)]}]}
{'aasc_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 129, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 130, 'instruction': 'addq\t$8, %rcx'}, {'instIndex': 136, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 137, 'instruction': 'movl\t$8, %edx'}, {'instIndex': 138, 'instruction': 'callq\tff_msrle_decode@PLT'}, {'instIndex': 139, 'instruction': 'jmp\t.LBB1_10'}, {'instIndex': 142, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 143, 'instruction': 'leaq\t.L.str.3(%rip), %rdx'}, {'instIndex': 144, 'instruction': 'movb\t$0, %al'}, {'instIndex': 145, 'instruction': 'callq\tav_log@PLT'}]}]}
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7---a/libavcodec/aasc.c
The case of compiler gcc with optimization no.
Patched source code file: aasc.c
Patched function: 1---static int aasc_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/gcc_before/no/aasc_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/gcc_before/no/aasc_gcc.s---aasc_decode_frame---before
function id: 118
function flag: True
There are 149 instructions for function: aasc_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '85', 'end': 91}, 'before': {'start': '85', 'end': 91}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 91, 'instruction': 'jmp\t.L14'}, {'instIndex': 92, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 93, 'instruction': 'addq\t$8, %rax'}, {'instIndex': 94, 'instruction': 'movq\t%rax, 0x50(%rsp)'}, {'instIndex': 95, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 96, 'instruction': 'movq\t%rax, 0x58(%rsp)'}, {'instIndex': 97, 'instruction': 'movl\t0x2c(%rsp), %eax'}, {'instIndex': 98, 'instruction': 'movl\t%eax, 0x3c(%rsp)'}, {'instIndex': 112, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 113, 'instruction': 'leaq\t8(%rax), %rdx'}, {'instIndex': 114, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 115, 'instruction': 'movq\t0x20(%rax), %rsi'}, {'instIndex': 116, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 117, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 118, 'instruction': 'movl\t$8, %edx'}, {'instIndex': 119, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 120, 'instruction': 'call\tff_msrle_decode@PLT'}, {'instIndex': 121, 'instruction': 'jmp\t.L14'}, {'instIndex': 122, 'instruction': 'movl\t0x34(%rsp), %edx'}, {'instIndex': 123, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 124, 'instruction': 'movl\t%edx, %ecx'}, {'instIndex': 125, 'instruction': 'leaq\t.LC1(%rip), %rdx'}, {'instIndex': 126, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 127, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 128, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 129, 'instruction': 'call\tav_log@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/gcc_before/no/aasc.o
Binary file does not exist.
{'aasc_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 91, 'instruction': 'jmp\t.L14'}, {'instIndex': 92, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 93, 'instruction': 'addq\t$8, %rax'}, {'instIndex': 94, 'instruction': 'movq\t%rax, 0x50(%rsp)'}, {'instIndex': 95, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 96, 'instruction': 'movq\t%rax, 0x58(%rsp)'}, {'instIndex': 97, 'instruction': 'movl\t0x2c(%rsp), %eax'}, {'instIndex': 98, 'instruction': 'movl\t%eax, 0x3c(%rsp)'}, {'instIndex': 112, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 113, 'instruction': 'leaq\t8(%rax), %rdx'}, {'instIndex': 114, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 115, 'instruction': 'movq\t0x20(%rax), %rsi'}, {'instIndex': 116, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 117, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 118, 'instruction': 'movl\t$8, %edx'}, {'instIndex': 119, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 120, 'instruction': 'call\tff_msrle_decode@PLT'}, {'instIndex': 121, 'instruction': 'jmp\t.L14'}, {'instIndex': 122, 'instruction': 'movl\t0x34(%rsp), %edx'}, {'instIndex': 123, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 124, 'instruction': 'movl\t%edx, %ecx'}, {'instIndex': 125, 'instruction': 'leaq\t.LC1(%rip), %rdx'}, {'instIndex': 126, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 127, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 128, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 129, 'instruction': 'call\tav_log@PLT'}]}]}
The case of compiler gcc with optimization O0.
Patched source code file: aasc.c
Patched function: 1---static int aasc_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/gcc_before/O0/aasc_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/gcc_before/O0/aasc_gcc.s---aasc_decode_frame---before
function id: 118
function flag: True
There are 149 instructions for function: aasc_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '85', 'end': 91}, 'before': {'start': '85', 'end': 91}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 91, 'instruction': 'jmp\t.L14'}, {'instIndex': 92, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 93, 'instruction': 'addq\t$8, %rax'}, {'instIndex': 94, 'instruction': 'movq\t%rax, 0x50(%rsp)'}, {'instIndex': 95, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 96, 'instruction': 'movq\t%rax, 0x58(%rsp)'}, {'instIndex': 97, 'instruction': 'movl\t0x2c(%rsp), %eax'}, {'instIndex': 98, 'instruction': 'movl\t%eax, 0x3c(%rsp)'}, {'instIndex': 112, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 113, 'instruction': 'leaq\t8(%rax), %rdx'}, {'instIndex': 114, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 115, 'instruction': 'movq\t0x20(%rax), %rsi'}, {'instIndex': 116, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 117, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 118, 'instruction': 'movl\t$8, %edx'}, {'instIndex': 119, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 120, 'instruction': 'call\tff_msrle_decode@PLT'}, {'instIndex': 121, 'instruction': 'jmp\t.L14'}, {'instIndex': 122, 'instruction': 'movl\t0x34(%rsp), %edx'}, {'instIndex': 123, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 124, 'instruction': 'movl\t%edx, %ecx'}, {'instIndex': 125, 'instruction': 'leaq\t.LC1(%rip), %rdx'}, {'instIndex': 126, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 127, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 128, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 129, 'instruction': 'call\tav_log@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/gcc_before/O0/aasc.o
Binary file does not exist.
{'aasc_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 91, 'instruction': 'jmp\t.L14'}, {'instIndex': 92, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 93, 'instruction': 'addq\t$8, %rax'}, {'instIndex': 94, 'instruction': 'movq\t%rax, 0x50(%rsp)'}, {'instIndex': 95, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 96, 'instruction': 'movq\t%rax, 0x58(%rsp)'}, {'instIndex': 97, 'instruction': 'movl\t0x2c(%rsp), %eax'}, {'instIndex': 98, 'instruction': 'movl\t%eax, 0x3c(%rsp)'}, {'instIndex': 112, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 113, 'instruction': 'leaq\t8(%rax), %rdx'}, {'instIndex': 114, 'instruction': 'movq\t0x48(%rsp), %rax'}, {'instIndex': 115, 'instruction': 'movq\t0x20(%rax), %rsi'}, {'instIndex': 116, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 117, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 118, 'instruction': 'movl\t$8, %edx'}, {'instIndex': 119, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 120, 'instruction': 'call\tff_msrle_decode@PLT'}, {'instIndex': 121, 'instruction': 'jmp\t.L14'}, {'instIndex': 122, 'instruction': 'movl\t0x34(%rsp), %edx'}, {'instIndex': 123, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 124, 'instruction': 'movl\t%edx, %ecx'}, {'instIndex': 125, 'instruction': 'leaq\t.LC1(%rip), %rdx'}, {'instIndex': 126, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 127, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 128, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 129, 'instruction': 'call\tav_log@PLT'}]}]}
The case of compiler gcc with optimization O1.
Patched source code file: aasc.c
Patched function: 1---static int aasc_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/gcc_before/O1/aasc_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/gcc_before/O1/aasc_gcc.s---aasc_decode_frame---before
function id: 5
function flag: True
There are 118 instructions for function: aasc_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '85', 'end': 91}, 'before': {'start': '85', 'end': 91}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 29, 'instruction': 'leaq\t.LC1(%rip), %rdx'}, {'instIndex': 30, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 31, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 32, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 33, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 73, 'instruction': 'leaq\t8(%r13), %rcx'}, {'instIndex': 74, 'instruction': 'movq\t0x20(%r13), %rsi'}, {'instIndex': 75, 'instruction': 'movl\t$8, %edx'}, {'instIndex': 76, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 77, 'instruction': 'call\tff_msrle_decode@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/gcc_before/O1/aasc.o
Binary file does not exist.
{'aasc_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 29, 'instruction': 'leaq\t.LC1(%rip), %rdx'}, {'instIndex': 30, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 31, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 32, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 33, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 73, 'instruction': 'leaq\t8(%r13), %rcx'}, {'instIndex': 74, 'instruction': 'movq\t0x20(%r13), %rsi'}, {'instIndex': 75, 'instruction': 'movl\t$8, %edx'}, {'instIndex': 76, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 77, 'instruction': 'call\tff_msrle_decode@PLT'}]}]}
The case of compiler gcc with optimization O2.
Patched source code file: aasc.c
Patched function: 1---static int aasc_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/gcc_before/O2/aasc_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/gcc_before/O2/aasc_gcc.s---aasc_decode_frame---before
function id: 5
function flag: True
There are 115 instructions for function: aasc_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '85', 'end': 91}, 'before': {'start': '85', 'end': 91}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 31, 'instruction': 'movq\t0x20(%r13), %rsi'}, {'instIndex': 32, 'instruction': 'leaq\t8(%r13), %rcx'}, {'instIndex': 35, 'instruction': 'movl\t$8, %edx'}, {'instIndex': 36, 'instruction': 'movq\t%r15, %rdi'}, {'instIndex': 38, 'instruction': 'call\tff_msrle_decode@PLT'}, {'instIndex': 57, 'instruction': 'leaq\t.LC1(%rip), %rdx'}, {'instIndex': 58, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 59, 'instruction': 'movq\t%r15, %rdi'}, {'instIndex': 60, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 61, 'instruction': 'call\tav_log@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/gcc_before/O2/aasc.o
Binary file does not exist.
{'aasc_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 31, 'instruction': 'movq\t0x20(%r13), %rsi'}, {'instIndex': 32, 'instruction': 'leaq\t8(%r13), %rcx'}, {'instIndex': 35, 'instruction': 'movl\t$8, %edx'}, {'instIndex': 36, 'instruction': 'movq\t%r15, %rdi'}, {'instIndex': 38, 'instruction': 'call\tff_msrle_decode@PLT'}, {'instIndex': 57, 'instruction': 'leaq\t.LC1(%rip), %rdx'}, {'instIndex': 58, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 59, 'instruction': 'movq\t%r15, %rdi'}, {'instIndex': 60, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 61, 'instruction': 'call\tav_log@PLT'}]}]}
The case of compiler gcc with optimization O3.
Patched source code file: aasc.c
Patched function: 1---static int aasc_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/gcc_before/O3/aasc_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/gcc_before/O3/aasc_gcc.s---aasc_decode_frame---before
function id: 5
function flag: True
There are 115 instructions for function: aasc_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '85', 'end': 91}, 'before': {'start': '85', 'end': 91}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 31, 'instruction': 'movq\t0x20(%r13), %rsi'}, {'instIndex': 32, 'instruction': 'leaq\t8(%r13), %rcx'}, {'instIndex': 35, 'instruction': 'movl\t$8, %edx'}, {'instIndex': 36, 'instruction': 'movq\t%r15, %rdi'}, {'instIndex': 38, 'instruction': 'call\tff_msrle_decode@PLT'}, {'instIndex': 57, 'instruction': 'leaq\t.LC1(%rip), %rdx'}, {'instIndex': 58, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 59, 'instruction': 'movq\t%r15, %rdi'}, {'instIndex': 60, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 61, 'instruction': 'call\tav_log@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/gcc_before/O3/aasc.o
Binary file does not exist.
{'aasc_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 31, 'instruction': 'movq\t0x20(%r13), %rsi'}, {'instIndex': 32, 'instruction': 'leaq\t8(%r13), %rcx'}, {'instIndex': 35, 'instruction': 'movl\t$8, %edx'}, {'instIndex': 36, 'instruction': 'movq\t%r15, %rdi'}, {'instIndex': 38, 'instruction': 'call\tff_msrle_decode@PLT'}, {'instIndex': 57, 'instruction': 'leaq\t.LC1(%rip), %rdx'}, {'instIndex': 58, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 59, 'instruction': 'movq\t%r15, %rdi'}, {'instIndex': 60, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 61, 'instruction': 'call\tav_log@PLT'}]}]}
The case of compiler gcc with optimization Os.
Patched source code file: aasc.c
Patched function: 1---static int aasc_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/gcc_before/Os/aasc_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/gcc_before/Os/aasc_gcc.s---aasc_decode_frame---before
function id: 5
function flag: True
There are 119 instructions for function: aasc_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '85', 'end': 91}, 'before': {'start': '85', 'end': 91}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 41, 'instruction': 'movq\t0x20(%r15), %rsi'}, {'instIndex': 42, 'instruction': 'leaq\t8(%r15), %rcx'}, {'instIndex': 45, 'instruction': 'movq\t%r14, %rdi'}, {'instIndex': 46, 'instruction': 'movl\t$8, %edx'}, {'instIndex': 48, 'instruction': 'call\tff_msrle_decode@PLT'}, {'instIndex': 49, 'instruction': 'jmp\t.L13'}, {'instIndex': 76, 'instruction': 'movl\t%r8d, %ecx'}, {'instIndex': 77, 'instruction': 'leaq\t.LC1(%rip), %rdx'}, {'instIndex': 78, 'instruction': 'movq\t%r14, %rdi'}, {'instIndex': 79, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 80, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 81, 'instruction': 'call\tav_log@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/gcc_before/Os/aasc.o
Binary file does not exist.
{'aasc_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 41, 'instruction': 'movq\t0x20(%r15), %rsi'}, {'instIndex': 42, 'instruction': 'leaq\t8(%r15), %rcx'}, {'instIndex': 45, 'instruction': 'movq\t%r14, %rdi'}, {'instIndex': 46, 'instruction': 'movl\t$8, %edx'}, {'instIndex': 48, 'instruction': 'call\tff_msrle_decode@PLT'}, {'instIndex': 49, 'instruction': 'jmp\t.L13'}, {'instIndex': 76, 'instruction': 'movl\t%r8d, %ecx'}, {'instIndex': 77, 'instruction': 'leaq\t.LC1(%rip), %rdx'}, {'instIndex': 78, 'instruction': 'movq\t%r14, %rdi'}, {'instIndex': 79, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 80, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 81, 'instruction': 'call\tav_log@PLT'}]}]}
The case of compiler clang with optimization no.
Patched source code file: aasc.c
Patched function: 1---static int aasc_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_before/no/aasc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_before/no/aasc.s---aasc_decode_frame---before
function id: 1
function flag: True
There are 146 instructions for function: aasc_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '85', 'end': 91}, 'before': {'start': '85', 'end': 91}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 93, 'instruction': 'jmp\t.LBB1_14'}, {'instIndex': 94, 'instruction': 'movq\t0x18(%rsp), %rdx'}, {'instIndex': 95, 'instruction': 'addq\t$8, %rdx'}, {'instIndex': 96, 'instruction': 'movq\t0x28(%rsp), %rcx'}, {'instIndex': 97, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 98, 'instruction': 'movq\t%rdx, 0x60(%rsp)'}, {'instIndex': 99, 'instruction': 'movq\t%rcx, 0x58(%rsp)'}, {'instIndex': 100, 'instruction': 'movl\t%eax, 0x54(%rsp)'}, {'instIndex': 112, 'instruction': 'movq\t0x48(%rsp), %rdi'}, {'instIndex': 113, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 114, 'instruction': 'movq\t0x20(%rax), %rsi'}, {'instIndex': 115, 'instruction': 'movq\t0x18(%rsp), %rcx'}, {'instIndex': 116, 'instruction': 'addq\t$8, %rcx'}, {'instIndex': 117, 'instruction': 'movl\t$8, %edx'}, {'instIndex': 118, 'instruction': 'callq\tff_msrle_decode@PLT'}, {'instIndex': 119, 'instruction': 'jmp\t.LBB1_14'}, {'instIndex': 120, 'instruction': 'movq\t0x48(%rsp), %rdi'}, {'instIndex': 121, 'instruction': 'movl\t0x14(%rsp), %ecx'}, {'instIndex': 122, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 123, 'instruction': 'leaq\t.L.str.3(%rip), %rdx'}, {'instIndex': 124, 'instruction': 'movb\t$0, %al'}, {'instIndex': 125, 'instruction': 'callq\tav_log@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_before/no/aasc.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_before/no/aasc.o---before
The extraction of function: aasc_decode_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 42 nodes and 55 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 146 instructions in binary file.
[4194809, 4194814, 4194928, 4194930]
The execution time of patched subCFG information extraction via angr: 0:00:00.159495
{'aasc_decode_frame': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400184>, <DisassemblerInsn "mov" for 0x400189>, <DisassemblerInsn "sub" for 0x40018f>, <DisassemblerInsn "mov" for 0x400192>, <DisassemblerInsn "cmp" for 0x400196>, <DisassemblerInsn "jl" for 0x40019b>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400196>, <DisassemblerInsn "jl" for 0x40019b>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400270>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40028e>, <DisassemblerInsn "jmp" for 0x400296>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001f9>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400298>, <DisassemblerInsn "mov" for 0x40029d>, <DisassemblerInsn "mov" for 0x4002a3>, <DisassemblerInsn "mov" for 0x4002a8>, <DisassemblerInsn "mov" for 0x4002ad>, <DisassemblerInsn "call" for 0x4002b1>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001fe>, <DisassemblerInsn "add" for 0x400203>, <DisassemblerInsn "mov" for 0x400207>, <DisassemblerInsn "mov" for 0x40020c>, <DisassemblerInsn "mov" for 0x400210>, <DisassemblerInsn "mov" for 0x400215>, <DisassemblerInsn "mov" for 0x40021a>, <DisassemblerInsn "mov" for 0x40021e>, <DisassemblerInsn "mov" for 0x400223>, <DisassemblerInsn "mov" for 0x400228>, <DisassemblerInsn "mov" for 0x40022b>, <DisassemblerInsn "mov" for 0x400230>, <DisassemblerInsn "mov" for 0x400235>, <DisassemblerInsn "mov" for 0x400239>, <DisassemblerInsn "movsxd" for 0x40023e>, <DisassemblerInsn "add" for 0x400243>, <DisassemblerInsn "mov" for 0x400246>, <DisassemblerInsn "mov" for 0x40024b>, <DisassemblerInsn "mov" for 0x40024f>, <DisassemblerInsn "mov" for 0x400254>, <DisassemblerInsn "mov" for 0x400259>, <DisassemblerInsn "mov" for 0x40025d>, <DisassemblerInsn "add" for 0x400262>, <DisassemblerInsn "mov" for 0x400266>, <DisassemblerInsn "call" for 0x40026b>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400137>, <DisassemblerInsn "sub" for 0x40013b>, <DisassemblerInsn "je" for 0x40013e>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400272>, <DisassemblerInsn "mov" for 0x400277>, <DisassemblerInsn "mov" for 0x40027b>, <DisassemblerInsn "lea" for 0x400280>, <DisassemblerInsn "mov" for 0x400287>, <DisassemblerInsn "call" for 0x400289>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400144>]'}], 'cfg_block_detailed_info': [{'block_Idx': 11, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~eax, dword ptr [rax + 0x98]>', '<sub~~eax, 1>', '<mov~~dword ptr [rsp + 0x10], eax>', '<cmp~~dword ptr [rsp + 0x10], 0>', '<jl~~0x4001f9>']}, {'block_Idx': 22, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x10], 0>', '<jl~~0x4001f9>']}, {'block_Idx': 19, 'blockInsts': ['<jmp~~0x400298>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~dword ptr [rsp + 0x50], 0xc1444e49>', '<jmp~~0x4002d5>']}, {'block_Idx': 13, 'blockInsts': ['<jmp~~0x400298>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax], 1>', '<mov~~rdi, qword ptr [rsp + 0x40]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rsi, qword ptr [rax + 0x20]>', '<call~~0x500028>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x18]>', '<add~~rdx, 8>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<mov~~qword ptr [rsp + 0x60], rdx>', '<mov~~qword ptr [rsp + 0x58], rcx>', '<mov~~dword ptr [rsp + 0x54], eax>', '<mov~~rcx, qword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rsp + 0x60]>', '<mov~~qword ptr [rax], rcx>', '<mov~~rcx, qword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rsp + 0x60]>', '<mov~~qword ptr [rax + 0x10], rcx>', '<mov~~rcx, qword ptr [rsp + 0x58]>', '<movsxd~~rax, dword ptr [rsp + 0x54]>', '<add~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x60]>', '<mov~~qword ptr [rax + 8], rcx>', '<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rsi, qword ptr [rax + 0x20]>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<add~~rcx, 8>', '<mov~~edx, 8>', '<call~~0x500020>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<sub~~eax, 1>', '<je~~0x4001fe>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~ecx, dword ptr [rsp + 0x14]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0xae]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 16, 'blockInsts': ['<jmp~~0x400272>']}], 'cfg_edge_info': [(16, 20), (13, 17), (19, 17), (11, 13), (20, 23), (22, 13), (15, 19), (12, 15)]}]}
{'aasc_decode_frame': [4194809, 4194814, 4194928, 4194930]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_before/no/aasc.o---before
The extraction of function: aasc_decode_frame
[4194809, 4194814, 4194928, 4194930]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 32 nodes and 44 edges in CFGEmulated.
It has 32 nodes and 42 edges in CDG.
It has 495 nodes and 596 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194809, 4194814, 4194928, 4194930]
{4194692, 4194565, 4194958, 4194710, 4194968, 4194717, 4194613, 4194998, 4194615, 4195007, 4194628, 4194500, 4194633, 4195017, 4195029, 4194519, 4194776, 4194528, 4194928, 4194416, 4194930, 4194679, 4194552, 4194809, 4194814}
[13, 24, 0, 7, 29, 12, 17, 25, 5, 9, 15, 1, 31, 30, 6, 19, 14, 16, 28, 27, 18, 22, 10, 11, 3, 2]
The execution time of patched slicing information extraction via angr: 0:00:03.298253
{'aasc_decode_frame': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400184>, <DisassemblerInsn "mov" for 0x400189>, <DisassemblerInsn "sub" for 0x40018f>, <DisassemblerInsn "mov" for 0x400192>, <DisassemblerInsn "cmp" for 0x400196>, <DisassemblerInsn "jl" for 0x40019b>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001d8>, <DisassemblerInsn "mov" for 0x4001dc>, <DisassemblerInsn "movsxd" for 0x4001e1>, <DisassemblerInsn "add" for 0x4001e4>, <DisassemblerInsn "mov" for 0x4001e7>, <DisassemblerInsn "mov" for 0x4001ec>, <DisassemblerInsn "add" for 0x4001f0>, <DisassemblerInsn "mov" for 0x4001f3>, <DisassemblerInsn "jmp" for 0x4001f7>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400070>, <DisassemblerInsn "mov" for 0x400074>, <DisassemblerInsn "mov" for 0x400079>, <DisassemblerInsn "mov" for 0x40007e>, <DisassemblerInsn "mov" for 0x400083>, <DisassemblerInsn "mov" for 0x400088>, <DisassemblerInsn "mov" for 0x40008d>, <DisassemblerInsn "mov" for 0x400091>, <DisassemblerInsn "mov" for 0x400096>, <DisassemblerInsn "mov" for 0x40009b>, <DisassemblerInsn "mov" for 0x40009e>, <DisassemblerInsn "mov" for 0x4000a2>, <DisassemblerInsn "mov" for 0x4000a7>, <DisassemblerInsn "mov" for 0x4000ab>, <DisassemblerInsn "cmp" for 0x4000b0>, <DisassemblerInsn "jge" for 0x4000b5>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400105>, <DisassemblerInsn "mov" for 0x40010a>, <DisassemblerInsn "mov" for 0x40010c>, <DisassemblerInsn "mov" for 0x400110>, <DisassemblerInsn "add" for 0x400115>, <DisassemblerInsn "mov" for 0x400119>, <DisassemblerInsn "mov" for 0x40011e>, <DisassemblerInsn "add" for 0x400122>, <DisassemblerInsn "mov" for 0x400125>, <DisassemblerInsn "mov" for 0x400129>, <DisassemblerInsn "mov" for 0x40012d>, <DisassemblerInsn "test" for 0x400131>, <DisassemblerInsn "je" for 0x400133>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40028e>, <DisassemblerInsn "jmp" for 0x400296>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400177>, <DisassemblerInsn "jmp" for 0x40017f>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001fe>, <DisassemblerInsn "add" for 0x400203>, <DisassemblerInsn "mov" for 0x400207>, <DisassemblerInsn "mov" for 0x40020c>, <DisassemblerInsn "mov" for 0x400210>, <DisassemblerInsn "mov" for 0x400215>, <DisassemblerInsn "mov" for 0x40021a>, <DisassemblerInsn "mov" for 0x40021e>, <DisassemblerInsn "mov" for 0x400223>, <DisassemblerInsn "mov" for 0x400228>, <DisassemblerInsn "mov" for 0x40022b>, <DisassemblerInsn "mov" for 0x400230>, <DisassemblerInsn "mov" for 0x400235>, <DisassemblerInsn "mov" for 0x400239>, <DisassemblerInsn "movsxd" for 0x40023e>, <DisassemblerInsn "add" for 0x400243>, <DisassemblerInsn "mov" for 0x400246>, <DisassemblerInsn "mov" for 0x40024b>, <DisassemblerInsn "mov" for 0x40024f>, <DisassemblerInsn "mov" for 0x400254>, <DisassemblerInsn "mov" for 0x400259>, <DisassemblerInsn "mov" for 0x40025d>, <DisassemblerInsn "add" for 0x400262>, <DisassemblerInsn "mov" for 0x400266>, <DisassemblerInsn "call" for 0x40026b>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400270>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000d7>, <DisassemblerInsn "cmp" for 0x4000db>, <DisassemblerInsn "jge" for 0x4000de>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400149>, <DisassemblerInsn "imul" for 0x40014e>, <DisassemblerInsn "add" for 0x400155>, <DisassemblerInsn "and" for 0x400158>, <DisassemblerInsn "mov" for 0x40015b>, <DisassemblerInsn "mov" for 0x40015f>, <DisassemblerInsn "mov" for 0x400163>, <DisassemblerInsn "mov" for 0x400167>, <DisassemblerInsn "imul" for 0x40016c>, <DisassemblerInsn "cmp" for 0x400173>, <DisassemblerInsn "jge" for 0x400175>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001f9>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000b7>, <DisassemblerInsn "jmp" for 0x4000bf>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002c9>, <DisassemblerInsn "mov" for 0x4002ce>, <DisassemblerInsn "mov" for 0x4002d1>, <DisassemblerInsn "mov" for 0x4002d5>, <DisassemblerInsn "add" for 0x4002d9>, <DisassemblerInsn "ret" for 0x4002dd>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002bf>, <DisassemblerInsn "mov" for 0x4002c3>, <DisassemblerInsn "jmp" for 0x4002c7>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000e0>, <DisassemblerInsn "mov" for 0x4000e5>, <DisassemblerInsn "lea" for 0x4000ea>, <DisassemblerInsn "mov" for 0x4000f1>, <DisassemblerInsn "call" for 0x4000f3>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400298>, <DisassemblerInsn "mov" for 0x40029d>, <DisassemblerInsn "mov" for 0x4002a3>, <DisassemblerInsn "mov" for 0x4002a8>, <DisassemblerInsn "mov" for 0x4002ad>, <DisassemblerInsn "call" for 0x4002b1>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400137>, <DisassemblerInsn "sub" for 0x40013b>, <DisassemblerInsn "je" for 0x40013e>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40019d>, <DisassemblerInsn "mov" for 0x4001a2>, <DisassemblerInsn "mov" for 0x4001a6>, <DisassemblerInsn "mov" for 0x4001a9>, <DisassemblerInsn "mov" for 0x4001ad>, <DisassemblerInsn "mov" for 0x4001b2>, <DisassemblerInsn "imul" for 0x4001b6>, <DisassemblerInsn "cdqe" for 0x4001ba>, <DisassemblerInsn "add" for 0x4001bc>, <DisassemblerInsn "mov" for 0x4001bf>, <DisassemblerInsn "mov" for 0x4001c4>, <DisassemblerInsn "imul" for 0x4001c9>, <DisassemblerInsn "movsxd" for 0x4001d0>, <DisassemblerInsn "call" for 0x4001d3>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400196>, <DisassemblerInsn "jl" for 0x40019b>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002b6>, <DisassemblerInsn "cmp" for 0x4002ba>, <DisassemblerInsn "jge" for 0x4002bd>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400144>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400272>, <DisassemblerInsn "mov" for 0x400277>, <DisassemblerInsn "mov" for 0x40027b>, <DisassemblerInsn "lea" for 0x400280>, <DisassemblerInsn "mov" for 0x400287>, <DisassemblerInsn "call" for 0x400289>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400135>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000f8>, <DisassemblerInsn "mov" for 0x4000fc>, <DisassemblerInsn "jmp" for 0x400100>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002d5>, <DisassemblerInsn "add" for 0x4002d9>, <DisassemblerInsn "ret" for 0x4002dd>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c4>, <DisassemblerInsn "mov" for 0x4000c9>, <DisassemblerInsn "mov" for 0x4000ce>, <DisassemblerInsn "call" for 0x4000d2>]'}], 'cfg_block_detailed_info': [{'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~eax, dword ptr [rax + 0x98]>', '<sub~~eax, 1>', '<mov~~dword ptr [rsp + 0x10], eax>', '<cmp~~dword ptr [rsp + 0x10], 0>', '<jl~~0x4001f9>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xc]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<movsxd~~rcx, ecx>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x28], rax>', '<mov~~eax, dword ptr [rsp + 0x10]>', '<add~~eax, -1>', '<mov~~dword ptr [rsp + 0x10], eax>', '<jmp~~0x400196>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x68>', '<mov~~qword ptr [rsp + 0x48], rdi>', '<mov~~qword ptr [rsp + 0x40], rsi>', '<mov~~qword ptr [rsp + 0x38], rdx>', '<mov~~qword ptr [rsp + 0x30], rcx>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 0x28], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rax + 0x20]>', '<mov~~dword ptr [rsp + 0x24], eax>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rax + 0x48]>', '<mov~~qword ptr [rsp + 0x18], rax>', '<cmp~~dword ptr [rsp + 0x24], 4>', '<jge~~0x4000c4>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x14], eax>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x28], rax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~eax, -4>', '<mov~~dword ptr [rsp + 0x24], eax>', '<mov~~eax, dword ptr [rsp + 0x14]>', '<mov~~dword ptr [rsp + 4], eax>', '<test~~eax, eax>', '<je~~0x400149>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~dword ptr [rsp + 0x50], 0xc1444e49>', '<jmp~~0x4002d5>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~dword ptr [rsp + 0x50], 0xc1444e49>', '<jmp~~0x4002d5>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x18]>', '<add~~rdx, 8>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<mov~~qword ptr [rsp + 0x60], rdx>', '<mov~~qword ptr [rsp + 0x58], rcx>', '<mov~~dword ptr [rsp + 0x54], eax>', '<mov~~rcx, qword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rsp + 0x60]>', '<mov~~qword ptr [rax], rcx>', '<mov~~rcx, qword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rsp + 0x60]>', '<mov~~qword ptr [rax + 0x10], rcx>', '<mov~~rcx, qword ptr [rsp + 0x58]>', '<movsxd~~rax, dword ptr [rsp + 0x54]>', '<add~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x60]>', '<mov~~qword ptr [rax + 8], rcx>', '<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rsi, qword ptr [rax + 0x20]>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<add~~rcx, 8>', '<mov~~edx, 8>', '<call~~0x500020>']}, {'block_Idx': 25, 'blockInsts': ['<jmp~~0x400298>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~dword ptr [rsp + 8], eax>', '<cmp~~eax, 0>', '<jge~~0x400105>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<imul~~eax, dword ptr [rax + 0x94], 3>', '<add~~eax, 3>', '<and~~eax, 0xfffffffc>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<mov~~ecx, dword ptr [rsp + 0xc]>', '<mov~~rdx, qword ptr [rsp + 0x48]>', '<imul~~ecx, dword ptr [rdx + 0x98]>', '<cmp~~eax, ecx>', '<jge~~0x400184>']}, {'block_Idx': 15, 'blockInsts': ['<jmp~~0x400298>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~dword ptr [rsp + 0x50], 0xc1444e49>', '<jmp~~0x4002d5>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rax + 0x20]>', '<mov~~dword ptr [rsp + 0x50], eax>', '<mov~~eax, dword ptr [rsp + 0x50]>', '<add~~rsp, 0x68>', '<ret~~>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<mov~~dword ptr [rsp + 0x50], eax>', '<jmp~~0x4002d5>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x22d]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax], 1>', '<mov~~rdi, qword ptr [rsp + 0x40]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rsi, qword ptr [rax + 0x20]>', '<call~~0x500028>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<sub~~eax, 1>', '<je~~0x4001fe>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<mov~~rcx, qword ptr [rcx + 0x20]>', '<imul~~eax, dword ptr [rcx + 0x40]>', '<cdqe~~>', '<add~~rdi, rax>', '<mov~~rsi, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<imul~~eax, dword ptr [rax + 0x94], 3>', '<movsxd~~rdx, eax>', '<call~~0x500018>']}, {'block_Idx': 28, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x10], 0>', '<jl~~0x4001f9>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~dword ptr [rsp + 8], eax>', '<cmp~~eax, 0>', '<jge~~0x4002c9>']}, {'block_Idx': 18, 'blockInsts': ['<jmp~~0x400272>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~ecx, dword ptr [rsp + 0x14]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0xae]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 10, 'blockInsts': ['<jmp~~0x400137>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<mov~~dword ptr [rsp + 0x50], eax>', '<jmp~~0x4002d5>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50]>', '<add~~rsp, 0x68>', '<ret~~>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rsi, qword ptr [rax + 0x20]>', '<call~~0x500008>']}], 'cfg_edge_info': [(5, 7), (30, 3), (0, 2), (28, 15), (22, 29), (2, 5), (1, 3), (27, 31), (19, 27), (25, 19), (6, 11), (7, 10), (12, 3), (18, 22), (5, 6), (14, 18), (0, 1), (9, 13), (10, 14), (27, 30), (13, 16), (7, 9), (29, 3), (24, 28), (15, 19), (16, 24), (14, 17), (28, 16), (9, 12), (11, 3), (17, 25), (13, 15)], 'cdg_edge_info': [(5, 7), (0, 2), (14, 19), (14, 25), (14, 22), (0, 5), (28, 24), (27, 31), (7, 10), (14, 3), (5, 6), (5, 3), (14, 18), (27, 3), (9, 13), (9, 19), (14, 27), (27, 30), (13, 16), (7, 9), (13, 28), (7, 14), (5, 11), (9, 3), (14, 17), (28, 16), (0, 3), (9, 12), (9, 15), (14, 29), (28, 28), (9, 27), (13, 24)], 'ddg_edge_info': [(7, 17), (0, 2), (12, 31), (22, 29), (2, 5), (0, 17), (2, 14), (19, 30), (2, 17), (19, 27), (6, 11), (16, 19), (7, 16), (13, 24), (16, 28), (7, 22), (29, 31), (0, 7), (22, 31), (9, 16), (9, 13), (0, 16), (2, 7), (27, 30), (0, 13), (0, 19), (2, 16), (24, 16), (13, 16), (2, 13), (30, 31), (7, 9), (0, 22), (2, 19), (11, 31), (2, 22), (13, 28), (24, 28), (0, 31), (16, 24), (2, 31), (6, 31), (5, 11), (17, 19), (0, 9), (0, 6), (2, 9), (9, 24), (2, 12), (2, 6), (0, 24), (19, 31), (7, 14)]}]}
{'aasc_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 93, 'instruction': 'jmp\t.LBB1_14'}, {'instIndex': 94, 'instruction': 'movq\t0x18(%rsp), %rdx'}, {'instIndex': 95, 'instruction': 'addq\t$8, %rdx'}, {'instIndex': 96, 'instruction': 'movq\t0x28(%rsp), %rcx'}, {'instIndex': 97, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 98, 'instruction': 'movq\t%rdx, 0x60(%rsp)'}, {'instIndex': 99, 'instruction': 'movq\t%rcx, 0x58(%rsp)'}, {'instIndex': 100, 'instruction': 'movl\t%eax, 0x54(%rsp)'}, {'instIndex': 112, 'instruction': 'movq\t0x48(%rsp), %rdi'}, {'instIndex': 113, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 114, 'instruction': 'movq\t0x20(%rax), %rsi'}, {'instIndex': 115, 'instruction': 'movq\t0x18(%rsp), %rcx'}, {'instIndex': 116, 'instruction': 'addq\t$8, %rcx'}, {'instIndex': 117, 'instruction': 'movl\t$8, %edx'}, {'instIndex': 118, 'instruction': 'callq\tff_msrle_decode@PLT'}, {'instIndex': 119, 'instruction': 'jmp\t.LBB1_14'}, {'instIndex': 120, 'instruction': 'movq\t0x48(%rsp), %rdi'}, {'instIndex': 121, 'instruction': 'movl\t0x14(%rsp), %ecx'}, {'instIndex': 122, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 123, 'instruction': 'leaq\t.L.str.3(%rip), %rdx'}, {'instIndex': 124, 'instruction': 'movb\t$0, %al'}, {'instIndex': 125, 'instruction': 'callq\tav_log@PLT'}]}]}
The case of compiler clang with optimization O0.
Patched source code file: aasc.c
Patched function: 1---static int aasc_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_before/O0/aasc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_before/O0/aasc.s---aasc_decode_frame---before
function id: 1
function flag: True
There are 146 instructions for function: aasc_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '85', 'end': 91}, 'before': {'start': '85', 'end': 91}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 93, 'instruction': 'jmp\t.LBB1_14'}, {'instIndex': 94, 'instruction': 'movq\t0x18(%rsp), %rdx'}, {'instIndex': 95, 'instruction': 'addq\t$8, %rdx'}, {'instIndex': 96, 'instruction': 'movq\t0x28(%rsp), %rcx'}, {'instIndex': 97, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 98, 'instruction': 'movq\t%rdx, 0x60(%rsp)'}, {'instIndex': 99, 'instruction': 'movq\t%rcx, 0x58(%rsp)'}, {'instIndex': 100, 'instruction': 'movl\t%eax, 0x54(%rsp)'}, {'instIndex': 112, 'instruction': 'movq\t0x48(%rsp), %rdi'}, {'instIndex': 113, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 114, 'instruction': 'movq\t0x20(%rax), %rsi'}, {'instIndex': 115, 'instruction': 'movq\t0x18(%rsp), %rcx'}, {'instIndex': 116, 'instruction': 'addq\t$8, %rcx'}, {'instIndex': 117, 'instruction': 'movl\t$8, %edx'}, {'instIndex': 118, 'instruction': 'callq\tff_msrle_decode@PLT'}, {'instIndex': 119, 'instruction': 'jmp\t.LBB1_14'}, {'instIndex': 120, 'instruction': 'movq\t0x48(%rsp), %rdi'}, {'instIndex': 121, 'instruction': 'movl\t0x14(%rsp), %ecx'}, {'instIndex': 122, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 123, 'instruction': 'leaq\t.L.str.3(%rip), %rdx'}, {'instIndex': 124, 'instruction': 'movb\t$0, %al'}, {'instIndex': 125, 'instruction': 'callq\tav_log@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_before/O0/aasc.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_before/O0/aasc.o---before
The extraction of function: aasc_decode_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 42 nodes and 55 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 146 instructions in binary file.
[4194809, 4194814, 4194928, 4194930]
The execution time of patched subCFG information extraction via angr: 0:00:00.155471
{'aasc_decode_frame': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400184>, <DisassemblerInsn "mov" for 0x400189>, <DisassemblerInsn "sub" for 0x40018f>, <DisassemblerInsn "mov" for 0x400192>, <DisassemblerInsn "cmp" for 0x400196>, <DisassemblerInsn "jl" for 0x40019b>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400196>, <DisassemblerInsn "jl" for 0x40019b>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400270>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40028e>, <DisassemblerInsn "jmp" for 0x400296>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001f9>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400298>, <DisassemblerInsn "mov" for 0x40029d>, <DisassemblerInsn "mov" for 0x4002a3>, <DisassemblerInsn "mov" for 0x4002a8>, <DisassemblerInsn "mov" for 0x4002ad>, <DisassemblerInsn "call" for 0x4002b1>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001fe>, <DisassemblerInsn "add" for 0x400203>, <DisassemblerInsn "mov" for 0x400207>, <DisassemblerInsn "mov" for 0x40020c>, <DisassemblerInsn "mov" for 0x400210>, <DisassemblerInsn "mov" for 0x400215>, <DisassemblerInsn "mov" for 0x40021a>, <DisassemblerInsn "mov" for 0x40021e>, <DisassemblerInsn "mov" for 0x400223>, <DisassemblerInsn "mov" for 0x400228>, <DisassemblerInsn "mov" for 0x40022b>, <DisassemblerInsn "mov" for 0x400230>, <DisassemblerInsn "mov" for 0x400235>, <DisassemblerInsn "mov" for 0x400239>, <DisassemblerInsn "movsxd" for 0x40023e>, <DisassemblerInsn "add" for 0x400243>, <DisassemblerInsn "mov" for 0x400246>, <DisassemblerInsn "mov" for 0x40024b>, <DisassemblerInsn "mov" for 0x40024f>, <DisassemblerInsn "mov" for 0x400254>, <DisassemblerInsn "mov" for 0x400259>, <DisassemblerInsn "mov" for 0x40025d>, <DisassemblerInsn "add" for 0x400262>, <DisassemblerInsn "mov" for 0x400266>, <DisassemblerInsn "call" for 0x40026b>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400137>, <DisassemblerInsn "sub" for 0x40013b>, <DisassemblerInsn "je" for 0x40013e>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400272>, <DisassemblerInsn "mov" for 0x400277>, <DisassemblerInsn "mov" for 0x40027b>, <DisassemblerInsn "lea" for 0x400280>, <DisassemblerInsn "mov" for 0x400287>, <DisassemblerInsn "call" for 0x400289>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400144>]'}], 'cfg_block_detailed_info': [{'block_Idx': 11, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~eax, dword ptr [rax + 0x98]>', '<sub~~eax, 1>', '<mov~~dword ptr [rsp + 0x10], eax>', '<cmp~~dword ptr [rsp + 0x10], 0>', '<jl~~0x4001f9>']}, {'block_Idx': 22, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x10], 0>', '<jl~~0x4001f9>']}, {'block_Idx': 19, 'blockInsts': ['<jmp~~0x400298>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~dword ptr [rsp + 0x50], 0xc1444e49>', '<jmp~~0x4002d5>']}, {'block_Idx': 13, 'blockInsts': ['<jmp~~0x400298>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax], 1>', '<mov~~rdi, qword ptr [rsp + 0x40]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rsi, qword ptr [rax + 0x20]>', '<call~~0x500028>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x18]>', '<add~~rdx, 8>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<mov~~qword ptr [rsp + 0x60], rdx>', '<mov~~qword ptr [rsp + 0x58], rcx>', '<mov~~dword ptr [rsp + 0x54], eax>', '<mov~~rcx, qword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rsp + 0x60]>', '<mov~~qword ptr [rax], rcx>', '<mov~~rcx, qword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rsp + 0x60]>', '<mov~~qword ptr [rax + 0x10], rcx>', '<mov~~rcx, qword ptr [rsp + 0x58]>', '<movsxd~~rax, dword ptr [rsp + 0x54]>', '<add~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x60]>', '<mov~~qword ptr [rax + 8], rcx>', '<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rsi, qword ptr [rax + 0x20]>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<add~~rcx, 8>', '<mov~~edx, 8>', '<call~~0x500020>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<sub~~eax, 1>', '<je~~0x4001fe>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~ecx, dword ptr [rsp + 0x14]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0xae]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 16, 'blockInsts': ['<jmp~~0x400272>']}], 'cfg_edge_info': [(16, 20), (13, 17), (19, 17), (11, 13), (20, 23), (22, 13), (15, 19), (12, 15)]}]}
{'aasc_decode_frame': [4194809, 4194814, 4194928, 4194930]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_before/O0/aasc.o---before
The extraction of function: aasc_decode_frame
[4194809, 4194814, 4194928, 4194930]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 32 nodes and 44 edges in CFGEmulated.
It has 32 nodes and 42 edges in CDG.
It has 495 nodes and 596 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194809, 4194814, 4194928, 4194930]
{4194692, 4194565, 4194958, 4194710, 4194968, 4194717, 4194613, 4194998, 4194615, 4195007, 4194628, 4194500, 4194633, 4195017, 4195029, 4194519, 4194776, 4194528, 4194928, 4194416, 4194930, 4194679, 4194552, 4194809, 4194814}
[13, 24, 0, 7, 29, 12, 17, 25, 5, 9, 15, 1, 31, 30, 6, 19, 14, 16, 28, 27, 18, 22, 10, 11, 3, 2]
The execution time of patched slicing information extraction via angr: 0:00:03.246962
{'aasc_decode_frame': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400184>, <DisassemblerInsn "mov" for 0x400189>, <DisassemblerInsn "sub" for 0x40018f>, <DisassemblerInsn "mov" for 0x400192>, <DisassemblerInsn "cmp" for 0x400196>, <DisassemblerInsn "jl" for 0x40019b>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001d8>, <DisassemblerInsn "mov" for 0x4001dc>, <DisassemblerInsn "movsxd" for 0x4001e1>, <DisassemblerInsn "add" for 0x4001e4>, <DisassemblerInsn "mov" for 0x4001e7>, <DisassemblerInsn "mov" for 0x4001ec>, <DisassemblerInsn "add" for 0x4001f0>, <DisassemblerInsn "mov" for 0x4001f3>, <DisassemblerInsn "jmp" for 0x4001f7>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400070>, <DisassemblerInsn "mov" for 0x400074>, <DisassemblerInsn "mov" for 0x400079>, <DisassemblerInsn "mov" for 0x40007e>, <DisassemblerInsn "mov" for 0x400083>, <DisassemblerInsn "mov" for 0x400088>, <DisassemblerInsn "mov" for 0x40008d>, <DisassemblerInsn "mov" for 0x400091>, <DisassemblerInsn "mov" for 0x400096>, <DisassemblerInsn "mov" for 0x40009b>, <DisassemblerInsn "mov" for 0x40009e>, <DisassemblerInsn "mov" for 0x4000a2>, <DisassemblerInsn "mov" for 0x4000a7>, <DisassemblerInsn "mov" for 0x4000ab>, <DisassemblerInsn "cmp" for 0x4000b0>, <DisassemblerInsn "jge" for 0x4000b5>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400105>, <DisassemblerInsn "mov" for 0x40010a>, <DisassemblerInsn "mov" for 0x40010c>, <DisassemblerInsn "mov" for 0x400110>, <DisassemblerInsn "add" for 0x400115>, <DisassemblerInsn "mov" for 0x400119>, <DisassemblerInsn "mov" for 0x40011e>, <DisassemblerInsn "add" for 0x400122>, <DisassemblerInsn "mov" for 0x400125>, <DisassemblerInsn "mov" for 0x400129>, <DisassemblerInsn "mov" for 0x40012d>, <DisassemblerInsn "test" for 0x400131>, <DisassemblerInsn "je" for 0x400133>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40028e>, <DisassemblerInsn "jmp" for 0x400296>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400177>, <DisassemblerInsn "jmp" for 0x40017f>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001fe>, <DisassemblerInsn "add" for 0x400203>, <DisassemblerInsn "mov" for 0x400207>, <DisassemblerInsn "mov" for 0x40020c>, <DisassemblerInsn "mov" for 0x400210>, <DisassemblerInsn "mov" for 0x400215>, <DisassemblerInsn "mov" for 0x40021a>, <DisassemblerInsn "mov" for 0x40021e>, <DisassemblerInsn "mov" for 0x400223>, <DisassemblerInsn "mov" for 0x400228>, <DisassemblerInsn "mov" for 0x40022b>, <DisassemblerInsn "mov" for 0x400230>, <DisassemblerInsn "mov" for 0x400235>, <DisassemblerInsn "mov" for 0x400239>, <DisassemblerInsn "movsxd" for 0x40023e>, <DisassemblerInsn "add" for 0x400243>, <DisassemblerInsn "mov" for 0x400246>, <DisassemblerInsn "mov" for 0x40024b>, <DisassemblerInsn "mov" for 0x40024f>, <DisassemblerInsn "mov" for 0x400254>, <DisassemblerInsn "mov" for 0x400259>, <DisassemblerInsn "mov" for 0x40025d>, <DisassemblerInsn "add" for 0x400262>, <DisassemblerInsn "mov" for 0x400266>, <DisassemblerInsn "call" for 0x40026b>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400270>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000d7>, <DisassemblerInsn "cmp" for 0x4000db>, <DisassemblerInsn "jge" for 0x4000de>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400149>, <DisassemblerInsn "imul" for 0x40014e>, <DisassemblerInsn "add" for 0x400155>, <DisassemblerInsn "and" for 0x400158>, <DisassemblerInsn "mov" for 0x40015b>, <DisassemblerInsn "mov" for 0x40015f>, <DisassemblerInsn "mov" for 0x400163>, <DisassemblerInsn "mov" for 0x400167>, <DisassemblerInsn "imul" for 0x40016c>, <DisassemblerInsn "cmp" for 0x400173>, <DisassemblerInsn "jge" for 0x400175>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4001f9>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000b7>, <DisassemblerInsn "jmp" for 0x4000bf>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002c9>, <DisassemblerInsn "mov" for 0x4002ce>, <DisassemblerInsn "mov" for 0x4002d1>, <DisassemblerInsn "mov" for 0x4002d5>, <DisassemblerInsn "add" for 0x4002d9>, <DisassemblerInsn "ret" for 0x4002dd>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002bf>, <DisassemblerInsn "mov" for 0x4002c3>, <DisassemblerInsn "jmp" for 0x4002c7>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000e0>, <DisassemblerInsn "mov" for 0x4000e5>, <DisassemblerInsn "lea" for 0x4000ea>, <DisassemblerInsn "mov" for 0x4000f1>, <DisassemblerInsn "call" for 0x4000f3>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400298>, <DisassemblerInsn "mov" for 0x40029d>, <DisassemblerInsn "mov" for 0x4002a3>, <DisassemblerInsn "mov" for 0x4002a8>, <DisassemblerInsn "mov" for 0x4002ad>, <DisassemblerInsn "call" for 0x4002b1>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400137>, <DisassemblerInsn "sub" for 0x40013b>, <DisassemblerInsn "je" for 0x40013e>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40019d>, <DisassemblerInsn "mov" for 0x4001a2>, <DisassemblerInsn "mov" for 0x4001a6>, <DisassemblerInsn "mov" for 0x4001a9>, <DisassemblerInsn "mov" for 0x4001ad>, <DisassemblerInsn "mov" for 0x4001b2>, <DisassemblerInsn "imul" for 0x4001b6>, <DisassemblerInsn "cdqe" for 0x4001ba>, <DisassemblerInsn "add" for 0x4001bc>, <DisassemblerInsn "mov" for 0x4001bf>, <DisassemblerInsn "mov" for 0x4001c4>, <DisassemblerInsn "imul" for 0x4001c9>, <DisassemblerInsn "movsxd" for 0x4001d0>, <DisassemblerInsn "call" for 0x4001d3>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400196>, <DisassemblerInsn "jl" for 0x40019b>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002b6>, <DisassemblerInsn "cmp" for 0x4002ba>, <DisassemblerInsn "jge" for 0x4002bd>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400144>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400272>, <DisassemblerInsn "mov" for 0x400277>, <DisassemblerInsn "mov" for 0x40027b>, <DisassemblerInsn "lea" for 0x400280>, <DisassemblerInsn "mov" for 0x400287>, <DisassemblerInsn "call" for 0x400289>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400135>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000f8>, <DisassemblerInsn "mov" for 0x4000fc>, <DisassemblerInsn "jmp" for 0x400100>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002d5>, <DisassemblerInsn "add" for 0x4002d9>, <DisassemblerInsn "ret" for 0x4002dd>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c4>, <DisassemblerInsn "mov" for 0x4000c9>, <DisassemblerInsn "mov" for 0x4000ce>, <DisassemblerInsn "call" for 0x4000d2>]'}], 'cfg_block_detailed_info': [{'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~eax, dword ptr [rax + 0x98]>', '<sub~~eax, 1>', '<mov~~dword ptr [rsp + 0x10], eax>', '<cmp~~dword ptr [rsp + 0x10], 0>', '<jl~~0x4001f9>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xc]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<movsxd~~rcx, ecx>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x28], rax>', '<mov~~eax, dword ptr [rsp + 0x10]>', '<add~~eax, -1>', '<mov~~dword ptr [rsp + 0x10], eax>', '<jmp~~0x400196>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x68>', '<mov~~qword ptr [rsp + 0x48], rdi>', '<mov~~qword ptr [rsp + 0x40], rsi>', '<mov~~qword ptr [rsp + 0x38], rdx>', '<mov~~qword ptr [rsp + 0x30], rcx>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 0x28], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rax + 0x20]>', '<mov~~dword ptr [rsp + 0x24], eax>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rax + 0x48]>', '<mov~~qword ptr [rsp + 0x18], rax>', '<cmp~~dword ptr [rsp + 0x24], 4>', '<jge~~0x4000c4>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x14], eax>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x28], rax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<add~~eax, -4>', '<mov~~dword ptr [rsp + 0x24], eax>', '<mov~~eax, dword ptr [rsp + 0x14]>', '<mov~~dword ptr [rsp + 4], eax>', '<test~~eax, eax>', '<je~~0x400149>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~dword ptr [rsp + 0x50], 0xc1444e49>', '<jmp~~0x4002d5>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~dword ptr [rsp + 0x50], 0xc1444e49>', '<jmp~~0x4002d5>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x18]>', '<add~~rdx, 8>', '<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<mov~~qword ptr [rsp + 0x60], rdx>', '<mov~~qword ptr [rsp + 0x58], rcx>', '<mov~~dword ptr [rsp + 0x54], eax>', '<mov~~rcx, qword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rsp + 0x60]>', '<mov~~qword ptr [rax], rcx>', '<mov~~rcx, qword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rsp + 0x60]>', '<mov~~qword ptr [rax + 0x10], rcx>', '<mov~~rcx, qword ptr [rsp + 0x58]>', '<movsxd~~rax, dword ptr [rsp + 0x54]>', '<add~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x60]>', '<mov~~qword ptr [rax + 8], rcx>', '<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rsi, qword ptr [rax + 0x20]>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<add~~rcx, 8>', '<mov~~edx, 8>', '<call~~0x500020>']}, {'block_Idx': 25, 'blockInsts': ['<jmp~~0x400298>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~dword ptr [rsp + 8], eax>', '<cmp~~eax, 0>', '<jge~~0x400105>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<imul~~eax, dword ptr [rax + 0x94], 3>', '<add~~eax, 3>', '<and~~eax, 0xfffffffc>', '<mov~~dword ptr [rsp + 0xc], eax>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<mov~~ecx, dword ptr [rsp + 0xc]>', '<mov~~rdx, qword ptr [rsp + 0x48]>', '<imul~~ecx, dword ptr [rdx + 0x98]>', '<cmp~~eax, ecx>', '<jge~~0x400184>']}, {'block_Idx': 15, 'blockInsts': ['<jmp~~0x400298>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~dword ptr [rsp + 0x50], 0xc1444e49>', '<jmp~~0x4002d5>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rax + 0x20]>', '<mov~~dword ptr [rsp + 0x50], eax>', '<mov~~eax, dword ptr [rsp + 0x50]>', '<add~~rsp, 0x68>', '<ret~~>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<mov~~dword ptr [rsp + 0x50], eax>', '<jmp~~0x4002d5>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x22d]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax], 1>', '<mov~~rdi, qword ptr [rsp + 0x40]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rsi, qword ptr [rax + 0x20]>', '<call~~0x500028>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<sub~~eax, 1>', '<je~~0x4001fe>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<mov~~rdi, qword ptr [rax]>', '<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<mov~~rcx, qword ptr [rcx + 0x20]>', '<imul~~eax, dword ptr [rcx + 0x40]>', '<cdqe~~>', '<add~~rdi, rax>', '<mov~~rsi, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<imul~~eax, dword ptr [rax + 0x94], 3>', '<movsxd~~rdx, eax>', '<call~~0x500018>']}, {'block_Idx': 28, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x10], 0>', '<jl~~0x4001f9>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~dword ptr [rsp + 8], eax>', '<cmp~~eax, 0>', '<jge~~0x4002c9>']}, {'block_Idx': 18, 'blockInsts': ['<jmp~~0x400272>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~ecx, dword ptr [rsp + 0x14]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0xae]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 10, 'blockInsts': ['<jmp~~0x400137>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 8]>', '<mov~~dword ptr [rsp + 0x50], eax>', '<jmp~~0x4002d5>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50]>', '<add~~rsp, 0x68>', '<ret~~>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rsi, qword ptr [rax + 0x20]>', '<call~~0x500008>']}], 'cfg_edge_info': [(5, 7), (30, 3), (0, 2), (28, 15), (22, 29), (2, 5), (1, 3), (27, 31), (19, 27), (25, 19), (6, 11), (7, 10), (12, 3), (18, 22), (5, 6), (14, 18), (0, 1), (9, 13), (10, 14), (27, 30), (13, 16), (7, 9), (29, 3), (24, 28), (15, 19), (16, 24), (14, 17), (28, 16), (9, 12), (11, 3), (17, 25), (13, 15)], 'cdg_edge_info': [(5, 7), (0, 2), (14, 19), (14, 25), (14, 22), (0, 5), (28, 24), (27, 31), (7, 10), (14, 3), (5, 6), (5, 3), (14, 18), (27, 3), (9, 13), (9, 19), (14, 27), (27, 30), (13, 16), (7, 9), (13, 28), (7, 14), (5, 11), (9, 3), (14, 17), (28, 16), (0, 3), (9, 12), (9, 15), (14, 29), (28, 28), (9, 27), (13, 24)], 'ddg_edge_info': [(7, 17), (0, 2), (12, 31), (22, 29), (2, 5), (0, 17), (2, 14), (19, 30), (2, 17), (19, 27), (6, 11), (16, 19), (7, 16), (13, 24), (16, 28), (7, 22), (29, 31), (0, 7), (22, 31), (9, 16), (9, 13), (0, 16), (2, 7), (27, 30), (0, 13), (0, 19), (2, 16), (24, 16), (13, 16), (2, 13), (30, 31), (7, 9), (0, 22), (2, 19), (11, 31), (2, 22), (13, 28), (24, 28), (0, 31), (16, 24), (2, 31), (6, 31), (5, 11), (17, 19), (0, 9), (0, 6), (2, 9), (9, 24), (2, 12), (2, 6), (0, 24), (19, 31), (7, 14)]}]}
{'aasc_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 93, 'instruction': 'jmp\t.LBB1_14'}, {'instIndex': 94, 'instruction': 'movq\t0x18(%rsp), %rdx'}, {'instIndex': 95, 'instruction': 'addq\t$8, %rdx'}, {'instIndex': 96, 'instruction': 'movq\t0x28(%rsp), %rcx'}, {'instIndex': 97, 'instruction': 'movl\t0x24(%rsp), %eax'}, {'instIndex': 98, 'instruction': 'movq\t%rdx, 0x60(%rsp)'}, {'instIndex': 99, 'instruction': 'movq\t%rcx, 0x58(%rsp)'}, {'instIndex': 100, 'instruction': 'movl\t%eax, 0x54(%rsp)'}, {'instIndex': 112, 'instruction': 'movq\t0x48(%rsp), %rdi'}, {'instIndex': 113, 'instruction': 'movq\t0x18(%rsp), %rax'}, {'instIndex': 114, 'instruction': 'movq\t0x20(%rax), %rsi'}, {'instIndex': 115, 'instruction': 'movq\t0x18(%rsp), %rcx'}, {'instIndex': 116, 'instruction': 'addq\t$8, %rcx'}, {'instIndex': 117, 'instruction': 'movl\t$8, %edx'}, {'instIndex': 118, 'instruction': 'callq\tff_msrle_decode@PLT'}, {'instIndex': 119, 'instruction': 'jmp\t.LBB1_14'}, {'instIndex': 120, 'instruction': 'movq\t0x48(%rsp), %rdi'}, {'instIndex': 121, 'instruction': 'movl\t0x14(%rsp), %ecx'}, {'instIndex': 122, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 123, 'instruction': 'leaq\t.L.str.3(%rip), %rdx'}, {'instIndex': 124, 'instruction': 'movb\t$0, %al'}, {'instIndex': 125, 'instruction': 'callq\tav_log@PLT'}]}]}
The case of compiler clang with optimization O1.
Patched source code file: aasc.c
Patched function: 1---static int aasc_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_before/O1/aasc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_before/O1/aasc.s---aasc_decode_frame---before
function id: 1
function flag: True
There are 145 instructions for function: aasc_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '85', 'end': 91}, 'before': {'start': '85', 'end': 91}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 110, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 111, 'instruction': 'addq\t$8, %rcx'}, {'instIndex': 117, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 118, 'instruction': 'movl\t$8, %edx'}, {'instIndex': 119, 'instruction': 'callq\tff_msrle_decode@PLT'}, {'instIndex': 120, 'instruction': 'jmp\t.LBB1_10'}, {'instIndex': 123, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 124, 'instruction': 'leaq\t.L.str.3(%rip), %rdx'}, {'instIndex': 125, 'instruction': 'movb\t$0, %al'}, {'instIndex': 126, 'instruction': 'callq\tav_log@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_before/O1/aasc.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_before/O1/aasc.o---before
The extraction of function: aasc_decode_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 36 nodes and 50 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 145 instructions in binary file.
[4194840, 4194906, 4194908]
The execution time of patched subCFG information extraction via angr: 0:00:00.157053
{'aasc_decode_frame': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400278>, <DisassemblerInsn "mov" for 0x40027d>, <DisassemblerInsn "jmp" for 0x400284>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40025a>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400218>, <DisassemblerInsn "mov" for 0x40021d>, <DisassemblerInsn "mov" for 0x400222>, <DisassemblerInsn "mov" for 0x40022a>, <DisassemblerInsn "mov" for 0x40022f>, <DisassemblerInsn "mov" for 0x400234>, <DisassemblerInsn "add" for 0x400237>, <DisassemblerInsn "mov" for 0x40023b>, <DisassemblerInsn "mov" for 0x40023f>, <DisassemblerInsn "mov" for 0x400243>, <DisassemblerInsn "add" for 0x400246>, <DisassemblerInsn "mov" for 0x400249>, <DisassemblerInsn "mov" for 0x40024d>, <DisassemblerInsn "mov" for 0x400250>, <DisassemblerInsn "call" for 0x400255>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400286>, <DisassemblerInsn "mov" for 0x40028b>, <DisassemblerInsn "mov" for 0x400293>, <DisassemblerInsn "mov" for 0x40029b>, <DisassemblerInsn "mov" for 0x4002a1>, <DisassemblerInsn "call" for 0x4002a4>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40025c>, <DisassemblerInsn "mov" for 0x400260>, <DisassemblerInsn "mov" for 0x400265>, <DisassemblerInsn "lea" for 0x40026a>, <DisassemblerInsn "mov" for 0x400271>, <DisassemblerInsn "call" for 0x400273>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400120>, <DisassemblerInsn "sub" for 0x400124>, <DisassemblerInsn "je" for 0x400127>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40012d>]'}], 'cfg_block_detailed_info': [{'block_Idx': 22, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0xb4], eax>', '<jmp~~0x4002c6>']}, {'block_Idx': 17, 'blockInsts': ['<jmp~~0x400286>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rsp + 0x68]>', '<mov~~rdx, qword ptr [rsp + 0xa8]>', '<mov~~rsi, qword ptr [rsp + 0x58]>', '<mov~~r8d, dword ptr [rsp + 0x64]>', '<mov~~rcx, rdx>', '<add~~rcx, 8>', '<mov~~qword ptr [rdx + 8], rsi>', '<mov~~qword ptr [rdx + 0x18], rsi>', '<mov~~r8d, r8d>', '<add~~rsi, r8>', '<mov~~qword ptr [rdx + 0x10], rsi>', '<mov~~rsi, qword ptr [rax]>', '<mov~~edx, 8>', '<call~~0x500020>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x68]>', '<mov~~rdi, qword ptr [rsp + 0x80]>', '<mov~~rcx, qword ptr [rsp + 0x88]>', '<mov~~dword ptr [rcx], 1>', '<mov~~rsi, qword ptr [rax]>', '<call~~0x500028>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x54]>', '<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0xaa]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<sub~~eax, 1>', '<je~~0x400218>']}, {'block_Idx': 14, 'blockInsts': ['<jmp~~0x40025c>']}], 'cfg_edge_info': [(13, 17), (14, 18), (10, 13), (18, 22), (17, 11)]}]}
{'aasc_decode_frame': [4194840, 4194906, 4194908]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_before/O1/aasc.o---before
The extraction of function: aasc_decode_frame
[4194840, 4194906, 4194908]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 30 nodes and 43 edges in CFGEmulated.
It has 30 nodes and 37 edges in CDG.
It has 528 nodes and 631 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194840, 4194906, 4194908]
{4194950, 4194697, 4194840, 4194590, 4194592, 4194466, 4194727, 4194985, 4194605, 4194610, 4194997, 4194368, 4194500, 4195014, 4194509, 4194906, 4194908, 4194533, 4194798, 4194549, 4194936, 4194684}
[26, 20, 0, 15, 16, 11, 12, 5, 2, 28, 13, 4, 1, 27, 23, 10, 21, 9, 8, 25, 6, 14, 22]
The execution time of patched slicing information extraction via angr: 0:00:04.153733
{'aasc_decode_frame': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400216>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40025c>, <DisassemblerInsn "mov" for 0x400260>, <DisassemblerInsn "mov" for 0x400265>, <DisassemblerInsn "lea" for 0x40026a>, <DisassemblerInsn "mov" for 0x400271>, <DisassemblerInsn "call" for 0x400273>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400040>, <DisassemblerInsn "mov" for 0x400047>, <DisassemblerInsn "mov" for 0x40004c>, <DisassemblerInsn "mov" for 0x400054>, <DisassemblerInsn "mov" for 0x40005c>, <DisassemblerInsn "mov" for 0x400060>, <DisassemblerInsn "mov" for 0x400068>, <DisassemblerInsn "add" for 0x40006b>, <DisassemblerInsn "mov" for 0x40006f>, <DisassemblerInsn "mov" for 0x400077>, <DisassemblerInsn "mov" for 0x40007a>, <DisassemblerInsn "mov" for 0x400081>, <DisassemblerInsn "mov" for 0x400085>, <DisassemblerInsn "mov" for 0x40008d>, <DisassemblerInsn "cmp" for 0x400092>, <DisassemblerInsn "mov" for 0x400095>, <DisassemblerInsn "jl" for 0x40009c>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400218>, <DisassemblerInsn "mov" for 0x40021d>, <DisassemblerInsn "mov" for 0x400222>, <DisassemblerInsn "mov" for 0x40022a>, <DisassemblerInsn "mov" for 0x40022f>, <DisassemblerInsn "mov" for 0x400234>, <DisassemblerInsn "add" for 0x400237>, <DisassemblerInsn "mov" for 0x40023b>, <DisassemblerInsn "mov" for 0x40023f>, <DisassemblerInsn "mov" for 0x400243>, <DisassemblerInsn "add" for 0x400246>, <DisassemblerInsn "mov" for 0x400249>, <DisassemblerInsn "mov" for 0x40024d>, <DisassemblerInsn "mov" for 0x400250>, <DisassemblerInsn "call" for 0x400255>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40012d>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40017c>, <DisassemblerInsn "cmp" for 0x400180>, <DisassemblerInsn "jle" for 0x400183>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400120>, <DisassemblerInsn "sub" for 0x400124>, <DisassemblerInsn "je" for 0x400127>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000cd>, <DisassemblerInsn "mov" for 0x4000d2>, <DisassemblerInsn "lea" for 0x4000d7>, <DisassemblerInsn "mov" for 0x4000de>, <DisassemblerInsn "call" for 0x4000e0>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000a2>, <DisassemblerInsn "mov" for 0x4000a7>, <DisassemblerInsn "mov" for 0x4000af>, <DisassemblerInsn "add" for 0x4000b2>, <DisassemblerInsn "mov" for 0x4000b6>, <DisassemblerInsn "mov" for 0x4000bb>, <DisassemblerInsn "call" for 0x4000bf>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400278>, <DisassemblerInsn "mov" for 0x40027d>, <DisassemblerInsn "jmp" for 0x400284>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400286>, <DisassemblerInsn "mov" for 0x40028b>, <DisassemblerInsn "mov" for 0x400293>, <DisassemblerInsn "mov" for 0x40029b>, <DisassemblerInsn "mov" for 0x4002a1>, <DisassemblerInsn "call" for 0x4002a4>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c4>, <DisassemblerInsn "cmp" for 0x4000c8>, <DisassemblerInsn "jge" for 0x4000cb>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002c6>, <DisassemblerInsn "add" for 0x4002cd>, <DisassemblerInsn "ret" for 0x4002d4>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a7>, <DisassemblerInsn "mov" for 0x4001ac>, <DisassemblerInsn "mov" for 0x4001b0>, <DisassemblerInsn "mov" for 0x4001b5>, <DisassemblerInsn "mov" for 0x4001ba>, <DisassemblerInsn "mov" for 0x4001bf>, <DisassemblerInsn "add" for 0x4001c3>, <DisassemblerInsn "mov" for 0x4001c6>, <DisassemblerInsn "mov" for 0x4001ca>, <DisassemblerInsn "mov" for 0x4001cd>, <DisassemblerInsn "imul" for 0x4001d0>, <DisassemblerInsn "mov" for 0x4001d4>, <DisassemblerInsn "movsxd" for 0x4001d8>, <DisassemblerInsn "add" for 0x4001db>, <DisassemblerInsn "mov" for 0x4001de>, <DisassemblerInsn "imul" for 0x4001e3>, <DisassemblerInsn "movsxd" for 0x4001e6>, <DisassemblerInsn "call" for 0x4001e9>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40025a>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000e5>, <DisassemblerInsn "mov" for 0x4000e9>, <DisassemblerInsn "jmp" for 0x4000f0>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4002a9>, <DisassemblerInsn "mov" for 0x4002ac>, <DisassemblerInsn "jl" for 0x4002b3>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40011e>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400132>, <DisassemblerInsn "mov" for 0x400136>, <DisassemblerInsn "mov" for 0x40013b>, <DisassemblerInsn "add" for 0x40013e>, <DisassemblerInsn "mov" for 0x400145>, <DisassemblerInsn "imul" for 0x40014a>, <DisassemblerInsn "add" for 0x400151>, <DisassemblerInsn "and" for 0x400154>, <DisassemblerInsn "mov" for 0x400157>, <DisassemblerInsn "mov" for 0x40015b>, <DisassemblerInsn "mov" for 0x400161>, <DisassemblerInsn "imul" for 0x400165>, <DisassemblerInsn "mov" for 0x400168>, <DisassemblerInsn "cmp" for 0x40016d>, <DisassemblerInsn "mov" for 0x40016f>, <DisassemblerInsn "jl" for 0x400176>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002b5>, <DisassemblerInsn "mov" for 0x4002bd>, <DisassemblerInsn "mov" for 0x4002bf>, <DisassemblerInsn "mov" for 0x4002c6>, <DisassemblerInsn "add" for 0x4002cd>, <DisassemblerInsn "ret" for 0x4002d4>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000f5>, <DisassemblerInsn "mov" for 0x4000fc>, <DisassemblerInsn "mov" for 0x400104>, <DisassemblerInsn "mov" for 0x400106>, <DisassemblerInsn "add" for 0x40010a>, <DisassemblerInsn "mov" for 0x40010e>, <DisassemblerInsn "add" for 0x400113>, <DisassemblerInsn "mov" for 0x400116>, <DisassemblerInsn "test" for 0x40011a>, <DisassemblerInsn "je" for 0x40011c>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400189>, <DisassemblerInsn "mov" for 0x40018e>, <DisassemblerInsn "mov" for 0x400192>, <DisassemblerInsn "movsxd" for 0x400196>, <DisassemblerInsn "mov" for 0x400199>, <DisassemblerInsn "mov" for 0x40019e>, <DisassemblerInsn "mov" for 0x4001a2>, <DisassemblerInsn "mov" for 0x4001a7>, <DisassemblerInsn "mov" for 0x4001ac>, <DisassemblerInsn "mov" for 0x4001b0>, <DisassemblerInsn "mov" for 0x4001b5>, <DisassemblerInsn "mov" for 0x4001ba>, <DisassemblerInsn "mov" for 0x4001bf>, <DisassemblerInsn "add" for 0x4001c3>, <DisassemblerInsn "mov" for 0x4001c6>, <DisassemblerInsn "mov" for 0x4001ca>, <DisassemblerInsn "mov" for 0x4001cd>, <DisassemblerInsn "imul" for 0x4001d0>, <DisassemblerInsn "mov" for 0x4001d4>, <DisassemblerInsn "movsxd" for 0x4001d8>, <DisassemblerInsn "add" for 0x4001db>, <DisassemblerInsn "mov" for 0x4001de>, <DisassemblerInsn "imul" for 0x4001e3>, <DisassemblerInsn "movsxd" for 0x4001e6>, <DisassemblerInsn "call" for 0x4001e9>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001ee>, <DisassemblerInsn "mov" for 0x4001f3>, <DisassemblerInsn "mov" for 0x4001f8>, <DisassemblerInsn "mov" for 0x4001fc>, <DisassemblerInsn "add" for 0x400200>, <DisassemblerInsn "mov" for 0x400203>, <DisassemblerInsn "cmp" for 0x400208>, <DisassemblerInsn "mov" for 0x40020b>, <DisassemblerInsn "mov" for 0x40020f>, <DisassemblerInsn "jg" for 0x400214>]'}], 'cfg_block_detailed_info': [{'block_Idx': 26, 'blockInsts': ['<jmp~~0x400286>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x54]>', '<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0xaa]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0xb8>', '<mov~~qword ptr [rsp + 0x78], rdi>', '<mov~~qword ptr [rsp + 0x80], rsi>', '<mov~~qword ptr [rsp + 0x88], rdx>', '<mov~~rax, qword ptr [rcx + 0x18]>', '<mov~~qword ptr [rsp + 0x90], rax>', '<mov~~rax, rcx>', '<add~~rax, 0x20>', '<mov~~qword ptr [rsp + 0x98], rax>', '<mov~~ecx, dword ptr [rcx + 0x20]>', '<mov~~dword ptr [rsp + 0xa4], ecx>', '<mov~~rax, qword ptr [rdi + 0x48]>', '<mov~~qword ptr [rsp + 0xa8], rax>', '<mov~~eax, 0xc1444e49>', '<cmp~~ecx, 4>', '<mov~~dword ptr [rsp + 0xb4], eax>', '<jl~~0x4002c6>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rsp + 0x68]>', '<mov~~rdx, qword ptr [rsp + 0xa8]>', '<mov~~rsi, qword ptr [rsp + 0x58]>', '<mov~~r8d, dword ptr [rsp + 0x64]>', '<mov~~rcx, rdx>', '<add~~rcx, 8>', '<mov~~qword ptr [rdx + 8], rsi>', '<mov~~qword ptr [rdx + 0x18], rsi>', '<mov~~r8d, r8d>', '<add~~rsi, r8>', '<mov~~qword ptr [rdx + 0x10], rsi>', '<mov~~rsi, qword ptr [rax]>', '<mov~~edx, 8>', '<call~~0x500020>']}, {'block_Idx': 16, 'blockInsts': ['<jmp~~0x40025c>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50]>', '<cmp~~eax, 0>', '<jle~~0x400286>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<sub~~eax, 1>', '<je~~0x400218>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x226]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~rcx, rax>', '<add~~rcx, 0x20>', '<mov~~qword ptr [rsp + 0x68], rcx>', '<mov~~rsi, qword ptr [rax + 0x20]>', '<call~~0x500008>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0xb4], eax>', '<jmp~~0x4002c6>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x68]>', '<mov~~rdi, qword ptr [rsp + 0x80]>', '<mov~~rcx, qword ptr [rsp + 0x88]>', '<mov~~dword ptr [rcx], 1>', '<mov~~rsi, qword ptr [rax]>', '<call~~0x500028>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~dword ptr [rsp + 0x74], eax>', '<cmp~~eax, 0>', '<jge~~0x4000f5>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xb4]>', '<add~~rsp, 0xb8>', '<ret~~>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rsp + 0x34]>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rdx, qword ptr [rsp + 0x68]>', '<mov~~qword ptr [rsp + 0x10], rsi>', '<mov~~dword ptr [rsp + 0x18], ecx>', '<add~~ecx, -1>', '<mov~~dword ptr [rsp + 0x1c], ecx>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdi, qword ptr [rdx]>', '<imul~~ecx, dword ptr [rdx + 0x40]>', '<mov~~dword ptr [rsp + 4], ecx>', '<movsxd~~rcx, ecx>', '<add~~rdi, rcx>', '<mov~~qword ptr [rsp + 8], rdi>', '<imul~~eax, dword ptr [rax], 3>', '<movsxd~~rdx, eax>', '<call~~0x500018>']}, {'block_Idx': 23, 'blockInsts': ['<jmp~~0x400286>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x74]>', '<mov~~dword ptr [rsp + 0xb4], eax>', '<jmp~~0x4002c6>']}, {'block_Idx': 21, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0xb4], eax>', '<jl~~0x4002c6>']}, {'block_Idx': 9, 'blockInsts': ['<jmp~~0x400120>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x64]>', '<mov~~rax, qword ptr [rsp + 0x78]>', '<mov~~rdx, rax>', '<add~~rdx, 0x94>', '<mov~~qword ptr [rsp + 0x40], rdx>', '<imul~~edx, dword ptr [rax + 0x94], 3>', '<add~~edx, 3>', '<and~~edx, 0xfffffffc>', '<mov~~dword ptr [rsp + 0x4c], edx>', '<mov~~eax, dword ptr [rax + 0x98]>', '<mov~~dword ptr [rsp + 0x50], eax>', '<imul~~edx, eax>', '<mov~~eax, 0xc1444e49>', '<cmp~~ecx, edx>', '<mov~~dword ptr [rsp + 0xb4], eax>', '<jl~~0x4002c6>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0xb4], eax>', '<mov~~eax, dword ptr [rsp + 0xb4]>', '<add~~rsp, 0xb8>', '<ret~~>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xa4]>', '<mov~~rdx, qword ptr [rsp + 0x90]>', '<mov~~eax, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0x54], eax>', '<add~~rdx, 4>', '<mov~~qword ptr [rsp + 0x58], rdx>', '<add~~ecx, -4>', '<mov~~dword ptr [rsp + 0x64], ecx>', '<test~~eax, eax>', '<je~~0x400132>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~ecx, dword ptr [rsp + 0x50]>', '<mov~~edx, dword ptr [rsp + 0x4c]>', '<movsxd~~rdx, edx>', '<mov~~qword ptr [rsp + 0x28], rdx>', '<mov~~dword ptr [rsp + 0x34], ecx>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rsi, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rsp + 0x34]>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rdx, qword ptr [rsp + 0x68]>', '<mov~~qword ptr [rsp + 0x10], rsi>', '<mov~~dword ptr [rsp + 0x18], ecx>', '<add~~ecx, -1>', '<mov~~dword ptr [rsp + 0x1c], ecx>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdi, qword ptr [rdx]>', '<imul~~ecx, dword ptr [rdx + 0x40]>', '<mov~~dword ptr [rsp + 4], ecx>', '<movsxd~~rcx, ecx>', '<add~~rdi, rcx>', '<mov~~qword ptr [rsp + 8], rdi>', '<imul~~eax, dword ptr [rax], 3>', '<movsxd~~rdx, eax>', '<call~~0x500018>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rsi, qword ptr [rsp + 0x28]>', '<mov~~edx, dword ptr [rsp + 0x18]>', '<mov~~ecx, dword ptr [rsp + 0x1c]>', '<add~~rax, rsi>', '<mov~~qword ptr [rsp + 0x20], rax>', '<cmp~~edx, 1>', '<mov~~dword ptr [rsp + 0x34], ecx>', '<mov~~qword ptr [rsp + 0x38], rax>', '<jg~~0x4001a7>']}], 'cfg_edge_info': [(16, 20), (12, 16), (4, 6), (23, 13), (21, 25), (0, 2), (5, 10), (22, 26), (14, 22), (11, 14), (27, 22), (6, 8), (15, 23), (4, 5), (12, 15), (20, 28), (8, 11), (0, 1), (2, 4), (11, 13), (26, 13), (28, 1), (22, 27), (8, 1), (9, 12), (10, 1), (13, 21), (6, 9), (21, 1)], 'cdg_edge_info': [(6, 12), (12, 1), (12, 16), (4, 6), (12, 13), (21, 25), (0, 2), (12, 28), (11, 14), (8, 21), (6, 8), (4, 5), (12, 15), (12, 21), (22, 22), (8, 11), (0, 1), (0, 4), (11, 22), (4, 1), (4, 10), (12, 23), (22, 27), (12, 20), (8, 1), (8, 13), (6, 9), (21, 1)], 'ddg_edge_info': [(6, 12), (2, 27), (6, 15), (6, 27), (27, 13), (8, 25), (5, 10), (0, 2), (21, 25), (0, 5), (14, 22), (5, 25), (0, 8), (2, 5), (2, 11), (27, 22), (2, 8), (2, 14), (0, 20), (8, 27), (2, 20), (6, 8), (6, 14), (6, 20), (20, 25), (20, 28), (8, 11), (2, 4), (8, 14), (14, 27), (0, 13), (15, 13), (2, 13), (0, 25), (2, 25), (13, 25), (4, 10), (22, 27), (0, 6), (28, 25), (2, 12), (2, 6), (10, 25), (0, 15), (2, 15), (13, 21)]}]}
{'aasc_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 110, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 111, 'instruction': 'addq\t$8, %rcx'}, {'instIndex': 117, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 118, 'instruction': 'movl\t$8, %edx'}, {'instIndex': 119, 'instruction': 'callq\tff_msrle_decode@PLT'}, {'instIndex': 120, 'instruction': 'jmp\t.LBB1_10'}, {'instIndex': 123, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 124, 'instruction': 'leaq\t.L.str.3(%rip), %rdx'}, {'instIndex': 125, 'instruction': 'movb\t$0, %al'}, {'instIndex': 126, 'instruction': 'callq\tav_log@PLT'}]}]}
The case of compiler clang with optimization O2.
Patched source code file: aasc.c
Patched function: 1---static int aasc_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_before/O2/aasc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_before/O2/aasc.s---aasc_decode_frame---before
function id: 1
function flag: True
There are 217 instructions for function: aasc_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '85', 'end': 91}, 'before': {'start': '85', 'end': 91}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 182, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 183, 'instruction': 'addq\t$8, %rcx'}, {'instIndex': 189, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 190, 'instruction': 'movl\t$8, %edx'}, {'instIndex': 191, 'instruction': 'callq\tff_msrle_decode@PLT'}, {'instIndex': 192, 'instruction': 'jmp\t.LBB1_13'}, {'instIndex': 195, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 196, 'instruction': 'leaq\t.L.str.3(%rip), %rdx'}, {'instIndex': 197, 'instruction': 'movb\t$0, %al'}, {'instIndex': 198, 'instruction': 'callq\tav_log@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_before/O2/aasc.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_before/O2/aasc.o---before
The extraction of function: aasc_decode_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 42 nodes and 65 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 217 instructions in binary file.
[4195218, 4195296, 4195298]
The execution time of patched subCFG information extraction via angr: 0:00:00.166652
{'aasc_decode_frame': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003e2>, <DisassemblerInsn "mov" for 0x4003e9>, <DisassemblerInsn "mov" for 0x4003f1>, <DisassemblerInsn "lea" for 0x4003f6>, <DisassemblerInsn "mov" for 0x4003fd>, <DisassemblerInsn "call" for 0x4003ff>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400412>, <DisassemblerInsn "mov" for 0x40041a>, <DisassemblerInsn "mov" for 0x400422>, <DisassemblerInsn "mov" for 0x40042a>, <DisassemblerInsn "mov" for 0x400430>, <DisassemblerInsn "call" for 0x400433>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400404>, <DisassemblerInsn "mov" for 0x400409>, <DisassemblerInsn "jmp" for 0x400410>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4003e0>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400392>, <DisassemblerInsn "mov" for 0x40039a>, <DisassemblerInsn "mov" for 0x4003a2>, <DisassemblerInsn "mov" for 0x4003aa>, <DisassemblerInsn "mov" for 0x4003b2>, <DisassemblerInsn "mov" for 0x4003ba>, <DisassemblerInsn "add" for 0x4003bd>, <DisassemblerInsn "mov" for 0x4003c1>, <DisassemblerInsn "mov" for 0x4003c5>, <DisassemblerInsn "mov" for 0x4003c9>, <DisassemblerInsn "add" for 0x4003cc>, <DisassemblerInsn "mov" for 0x4003cf>, <DisassemblerInsn "mov" for 0x4003d3>, <DisassemblerInsn "mov" for 0x4003d6>, <DisassemblerInsn "call" for 0x4003db>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40013b>, <DisassemblerInsn "sub" for 0x400142>, <DisassemblerInsn "je" for 0x400145>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40014b>]'}], 'cfg_block_detailed_info': [{'block_Idx': 18, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x94]>', '<mov~~rdi, qword ptr [rsp + 0xb8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0xae]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~rdi, qword ptr [rsp + 0xc0]>', '<mov~~rcx, qword ptr [rsp + 0xc8]>', '<mov~~dword ptr [rcx], 1>', '<mov~~rsi, qword ptr [rax]>', '<call~~0x500028>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<jmp~~0x400455>']}, {'block_Idx': 17, 'blockInsts': ['<jmp~~0x400412>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xb8]>', '<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~rdx, qword ptr [rsp + 0xe8]>', '<mov~~rsi, qword ptr [rsp + 0x98]>', '<mov~~r8d, dword ptr [rsp + 0xa4]>', '<mov~~rcx, rdx>', '<add~~rcx, 8>', '<mov~~qword ptr [rdx + 8], rsi>', '<mov~~qword ptr [rdx + 0x18], rsi>', '<mov~~r8d, r8d>', '<add~~rsi, r8>', '<mov~~qword ptr [rdx + 0x10], rsi>', '<mov~~rsi, qword ptr [rax]>', '<mov~~edx, 8>', '<call~~0x500020>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x94]>', '<sub~~eax, 1>', '<je~~0x400392>']}, {'block_Idx': 14, 'blockInsts': ['<jmp~~0x4003e2>']}], 'cfg_edge_info': [(13, 17), (14, 18), (10, 13), (17, 11), (18, 21)]}]}
{'aasc_decode_frame': [4195218, 4195296, 4195298]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_before/O2/aasc.o---before
The extraction of function: aasc_decode_frame
[4195218, 4195296, 4195298]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 38 nodes and 57 edges in CFGEmulated.
It has 38 nodes and 55 edges in CDG.
It has 754 nodes and 899 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4195218, 4195296, 4195298]
{4195332, 4194567, 4194960, 4194833, 4195218, 4195346, 4195099, 4194849, 4194469, 4194738, 4195384, 4194617, 4194619, 4194368, 4194880, 4194754, 4195396, 4195012, 4194635, 4194509, 4194640, 4195413, 4194521, 4195296, 4195298, 4195182, 4194548}
[33, 12, 27, 2, 13, 15, 36, 16, 28, 0, 30, 20, 23, 26, 21, 25, 29, 1, 4, 5, 37, 8, 14, 22, 9, 34, 6, 11, 10]
The execution time of patched slicing information extraction via angr: 0:00:08.055434
{'aasc_decode_frame': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400290>, <DisassemblerInsn "mov" for 0x400294>, <DisassemblerInsn "mov" for 0x400299>, <DisassemblerInsn "mov" for 0x40029d>, <DisassemblerInsn "mov" for 0x4002a2>, <DisassemblerInsn "mov" for 0x4002a9>, <DisassemblerInsn "mov" for 0x4002ad>, <DisassemblerInsn "cmp" for 0x4002b2>, <DisassemblerInsn "mov" for 0x4002b5>, <DisassemblerInsn "mov" for 0x4002b9>, <DisassemblerInsn "je" for 0x4002be>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40013b>, <DisassemblerInsn "sub" for 0x400142>, <DisassemblerInsn "je" for 0x400145>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400404>, <DisassemblerInsn "mov" for 0x400409>, <DisassemblerInsn "jmp" for 0x400410>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000a5>, <DisassemblerInsn "mov" for 0x4000ad>, <DisassemblerInsn "mov" for 0x4000b5>, <DisassemblerInsn "add" for 0x4000b8>, <DisassemblerInsn "mov" for 0x4000bc>, <DisassemblerInsn "mov" for 0x4000c4>, <DisassemblerInsn "call" for 0x4000c8>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400412>, <DisassemblerInsn "mov" for 0x40041a>, <DisassemblerInsn "mov" for 0x400422>, <DisassemblerInsn "mov" for 0x40042a>, <DisassemblerInsn "mov" for 0x400430>, <DisassemblerInsn "call" for 0x400433>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400392>, <DisassemblerInsn "mov" for 0x40039a>, <DisassemblerInsn "mov" for 0x4003a2>, <DisassemblerInsn "mov" for 0x4003aa>, <DisassemblerInsn "mov" for 0x4003b2>, <DisassemblerInsn "mov" for 0x4003ba>, <DisassemblerInsn "add" for 0x4003bd>, <DisassemblerInsn "mov" for 0x4003c1>, <DisassemblerInsn "mov" for 0x4003c5>, <DisassemblerInsn "mov" for 0x4003c9>, <DisassemblerInsn "add" for 0x4003cc>, <DisassemblerInsn "mov" for 0x4003cf>, <DisassemblerInsn "mov" for 0x4003d3>, <DisassemblerInsn "mov" for 0x4003d6>, <DisassemblerInsn "call" for 0x4003db>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40036e>, <DisassemblerInsn "mov" for 0x400372>, <DisassemblerInsn "mov" for 0x400376>, <DisassemblerInsn "cmp" for 0x40037b>, <DisassemblerInsn "mov" for 0x40037e>, <DisassemblerInsn "mov" for 0x400382>, <DisassemblerInsn "jg" for 0x400387>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40014b>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002a2>, <DisassemblerInsn "mov" for 0x4002a9>, <DisassemblerInsn "mov" for 0x4002ad>, <DisassemblerInsn "cmp" for 0x4002b2>, <DisassemblerInsn "mov" for 0x4002b5>, <DisassemblerInsn "mov" for 0x4002b9>, <DisassemblerInsn "je" for 0x4002be>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400040>, <DisassemblerInsn "mov" for 0x400047>, <DisassemblerInsn "mov" for 0x40004f>, <DisassemblerInsn "mov" for 0x400057>, <DisassemblerInsn "mov" for 0x40005f>, <DisassemblerInsn "mov" for 0x400063>, <DisassemblerInsn "mov" for 0x40006b>, <DisassemblerInsn "add" for 0x40006e>, <DisassemblerInsn "mov" for 0x400072>, <DisassemblerInsn "mov" for 0x40007a>, <DisassemblerInsn "mov" for 0x40007d>, <DisassemblerInsn "mov" for 0x400084>, <DisassemblerInsn "mov" for 0x400088>, <DisassemblerInsn "mov" for 0x400090>, <DisassemblerInsn "cmp" for 0x400095>, <DisassemblerInsn "mov" for 0x400098>, <DisassemblerInsn "jl" for 0x40009f>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002c4>, <DisassemblerInsn "mov" for 0x4002c9>, <DisassemblerInsn "mov" for 0x4002cd>, <DisassemblerInsn "mov" for 0x4002d5>, <DisassemblerInsn "mov" for 0x4002dd>, <DisassemblerInsn "mov" for 0x4002e2>, <DisassemblerInsn "add" for 0x4002e6>, <DisassemblerInsn "mov" for 0x4002e9>, <DisassemblerInsn "mov" for 0x4002ee>, <DisassemblerInsn "add" for 0x4002f0>, <DisassemblerInsn "mov" for 0x4002f3>, <DisassemblerInsn "mov" for 0x4002f7>, <DisassemblerInsn "mov" for 0x4002fa>, <DisassemblerInsn "imul" for 0x4002fd>, <DisassemblerInsn "mov" for 0x400301>, <DisassemblerInsn "movsxd" for 0x400305>, <DisassemblerInsn "add" for 0x400308>, <DisassemblerInsn "mov" for 0x40030b>, <DisassemblerInsn "imul" for 0x400310>, <DisassemblerInsn "movsxd" for 0x400313>, <DisassemblerInsn "call" for 0x400316>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003e2>, <DisassemblerInsn "mov" for 0x4003e9>, <DisassemblerInsn "mov" for 0x4003f1>, <DisassemblerInsn "lea" for 0x4003f6>, <DisassemblerInsn "mov" for 0x4003fd>, <DisassemblerInsn "call" for 0x4003ff>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4003e0>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400221>, <DisassemblerInsn "mov" for 0x400229>, <DisassemblerInsn "mov" for 0x40022d>, <DisassemblerInsn "and" for 0x40022f>, <DisassemblerInsn "cmp" for 0x400232>, <DisassemblerInsn "mov" for 0x400235>, <DisassemblerInsn "mov" for 0x400239>, <DisassemblerInsn "je" for 0x40023e>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400438>, <DisassemblerInsn "mov" for 0x40043b>, <DisassemblerInsn "jl" for 0x400442>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400444>, <DisassemblerInsn "mov" for 0x40044c>, <DisassemblerInsn "mov" for 0x40044e>, <DisassemblerInsn "mov" for 0x400455>, <DisassemblerInsn "add" for 0x40045c>, <DisassemblerInsn "ret" for 0x400463>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400240>, <DisassemblerInsn "mov" for 0x400248>, <DisassemblerInsn "mov" for 0x40024f>, <DisassemblerInsn "mov" for 0x400257>, <DisassemblerInsn "mov" for 0x40025c>, <DisassemblerInsn "add" for 0x400264>, <DisassemblerInsn "mov" for 0x400267>, <DisassemblerInsn "mov" for 0x40026c>, <DisassemblerInsn "add" for 0x40026e>, <DisassemblerInsn "mov" for 0x400271>, <DisassemblerInsn "mov" for 0x400275>, <DisassemblerInsn "mov" for 0x400278>, <DisassemblerInsn "imul" for 0x40027b>, <DisassemblerInsn "movsxd" for 0x40027f>, <DisassemblerInsn "add" for 0x400282>, <DisassemblerInsn "imul" for 0x400285>, <DisassemblerInsn "movsxd" for 0x400288>, <DisassemblerInsn "call" for 0x40028b>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400455>, <DisassemblerInsn "add" for 0x40045c>, <DisassemblerInsn "ret" for 0x400463>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000cd>, <DisassemblerInsn "cmp" for 0x4000d4>, <DisassemblerInsn "jge" for 0x4000d7>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000d9>, <DisassemblerInsn "mov" for 0x4000e1>, <DisassemblerInsn "lea" for 0x4000e6>, <DisassemblerInsn "mov" for 0x4000ed>, <DisassemblerInsn "call" for 0x4000ef>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40038d>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400150>, <DisassemblerInsn "mov" for 0x400157>, <DisassemblerInsn "mov" for 0x40015f>, <DisassemblerInsn "add" for 0x400162>, <DisassemblerInsn "mov" for 0x400169>, <DisassemblerInsn "mov" for 0x400171>, <DisassemblerInsn "mov" for 0x400177>, <DisassemblerInsn "imul" for 0x40017e>, <DisassemblerInsn "add" for 0x400181>, <DisassemblerInsn "and" for 0x400184>, <DisassemblerInsn "mov" for 0x400187>, <DisassemblerInsn "mov" for 0x40018e>, <DisassemblerInsn "mov" for 0x400194>, <DisassemblerInsn "imul" for 0x40019b>, <DisassemblerInsn "mov" for 0x40019e>, <DisassemblerInsn "cmp" for 0x4001a3>, <DisassemblerInsn "mov" for 0x4001a5>, <DisassemblerInsn "jl" for 0x4001ac>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001c2>, <DisassemblerInsn "mov" for 0x4001c9>, <DisassemblerInsn "mov" for 0x4001d1>, <DisassemblerInsn "mov" for 0x4001d8>, <DisassemblerInsn "mov" for 0x4001e0>, <DisassemblerInsn "movsxd" for 0x4001e7>, <DisassemblerInsn "mov" for 0x4001ea>, <DisassemblerInsn "add" for 0x4001ef>, <DisassemblerInsn "mov" for 0x4001f2>, <DisassemblerInsn "mov" for 0x4001f6>, <DisassemblerInsn "mov" for 0x4001f9>, <DisassemblerInsn "imul" for 0x4001fc>, <DisassemblerInsn "movsxd" for 0x400200>, <DisassemblerInsn "add" for 0x400203>, <DisassemblerInsn "imul" for 0x400206>, <DisassemblerInsn "movsxd" for 0x400209>, <DisassemblerInsn "call" for 0x40020c>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400211>, <DisassemblerInsn "cmp" for 0x400218>, <DisassemblerInsn "je" for 0x40021b>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400139>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40031b>, <DisassemblerInsn "mov" for 0x400320>, <DisassemblerInsn "mov" for 0x400325>, <DisassemblerInsn "mov" for 0x40032d>, <DisassemblerInsn "mov" for 0x400335>, <DisassemblerInsn "add" for 0x400339>, <DisassemblerInsn "mov" for 0x40033c>, <DisassemblerInsn "mov" for 0x400341>, <DisassemblerInsn "add" for 0x400343>, <DisassemblerInsn "mov" for 0x400346>, <DisassemblerInsn "mov" for 0x40034a>, <DisassemblerInsn "mov" for 0x40034d>, <DisassemblerInsn "imul" for 0x400350>, <DisassemblerInsn "mov" for 0x400354>, <DisassemblerInsn "movsxd" for 0x400358>, <DisassemblerInsn "add" for 0x40035b>, <DisassemblerInsn "mov" for 0x40035e>, <DisassemblerInsn "imul" for 0x400363>, <DisassemblerInsn "movsxd" for 0x400366>, <DisassemblerInsn "call" for 0x400369>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400107>, <DisassemblerInsn "mov" for 0x40010e>, <DisassemblerInsn "mov" for 0x400116>, <DisassemblerInsn "mov" for 0x400118>, <DisassemblerInsn "add" for 0x40011f>, <DisassemblerInsn "mov" for 0x400123>, <DisassemblerInsn "add" for 0x40012b>, <DisassemblerInsn "mov" for 0x40012e>, <DisassemblerInsn "test" for 0x400135>, <DisassemblerInsn "je" for 0x400137>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001b2>, <DisassemblerInsn "cmp" for 0x4001b9>, <DisassemblerInsn "jle" for 0x4001bc>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000f4>, <DisassemblerInsn "mov" for 0x4000fb>, <DisassemblerInsn "jmp" for 0x400102>]'}], 'cfg_block_detailed_info': [{'block_Idx': 33, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x54]>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~dword ptr [rsp + 0x64], ecx>', '<mov~~qword ptr [rsp + 0x68], rax>', '<mov~~edx, dword ptr [rsp + 0x90]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<mov~~rax, qword ptr [rsp + 0x68]>', '<cmp~~edx, 2>', '<mov~~dword ptr [rsp + 0x44], ecx>', '<mov~~qword ptr [rsp + 0x48], rax>', '<je~~0x400412>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x94]>', '<sub~~eax, 1>', '<je~~0x400392>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<jmp~~0x400455>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xb8]>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~rcx, rax>', '<add~~rcx, 0x20>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<mov~~rsi, qword ptr [rax + 0x20]>', '<call~~0x500008>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~rdi, qword ptr [rsp + 0xc0]>', '<mov~~rcx, qword ptr [rsp + 0xc8]>', '<mov~~dword ptr [rcx], 1>', '<mov~~rsi, qword ptr [rax]>', '<call~~0x500028>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xb8]>', '<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~rdx, qword ptr [rsp + 0xe8]>', '<mov~~rsi, qword ptr [rsp + 0x98]>', '<mov~~r8d, dword ptr [rsp + 0xa4]>', '<mov~~rcx, rdx>', '<add~~rcx, 8>', '<mov~~qword ptr [rdx + 8], rsi>', '<mov~~qword ptr [rdx + 0x18], rsi>', '<mov~~r8d, r8d>', '<add~~rsi, r8>', '<mov~~qword ptr [rdx + 0x10], rsi>', '<mov~~rsi, qword ptr [rax]>', '<mov~~edx, 8>', '<call~~0x500020>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x30]>', '<mov~~ecx, dword ptr [rsp + 0x34]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~edx, 2>', '<mov~~dword ptr [rsp + 0x44], ecx>', '<mov~~qword ptr [rsp + 0x48], rax>', '<jg~~0x4002c4>']}, {'block_Idx': 16, 'blockInsts': ['<jmp~~0x4003e2>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x90]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<mov~~rax, qword ptr [rsp + 0x68]>', '<cmp~~edx, 2>', '<mov~~dword ptr [rsp + 0x44], ecx>', '<mov~~qword ptr [rsp + 0x48], rax>', '<je~~0x400412>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0xf8>', '<mov~~qword ptr [rsp + 0xb8], rdi>', '<mov~~qword ptr [rsp + 0xc0], rsi>', '<mov~~qword ptr [rsp + 0xc8], rdx>', '<mov~~rax, qword ptr [rcx + 0x18]>', '<mov~~qword ptr [rsp + 0xd0], rax>', '<mov~~rax, rcx>', '<add~~rax, 0x20>', '<mov~~qword ptr [rsp + 0xd8], rax>', '<mov~~ecx, dword ptr [rcx + 0x20]>', '<mov~~dword ptr [rsp + 0xe4], ecx>', '<mov~~rax, qword ptr [rdi + 0x48]>', '<mov~~qword ptr [rsp + 0xe8], rax>', '<mov~~eax, 0xc1444e49>', '<cmp~~ecx, 4>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<jl~~0x400455>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x48]>', '<mov~~ecx, dword ptr [rsp + 0x44]>', '<mov~~rdx, qword ptr [rsp + 0xa8]>', '<mov~~rax, qword ptr [rsp + 0x80]>', '<mov~~rdi, qword ptr [rsp + 0x70]>', '<mov~~dword ptr [rsp + 0x30], ecx>', '<add~~rsi, rdi>', '<mov~~qword ptr [rsp + 0x18], rsi>', '<mov~~eax, dword ptr [rax]>', '<add~~ecx, -1>', '<mov~~dword ptr [rsp + 8], ecx>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdi, qword ptr [rdx]>', '<imul~~ecx, dword ptr [rdx + 0x40]>', '<mov~~dword ptr [rsp + 0xc], ecx>', '<movsxd~~rcx, ecx>', '<add~~rdi, rcx>', '<mov~~qword ptr [rsp + 0x10], rdi>', '<imul~~eax, eax, 3>', '<movsxd~~rdx, eax>', '<call~~0x500018>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x94]>', '<mov~~rdi, qword ptr [rsp + 0xb8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0xae]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 23, 'blockInsts': ['<jmp~~0x400412>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~ecx, dword ptr [rsp + 0x7c]>', '<mov~~edx, ecx>', '<and~~edx, 1>', '<cmp~~edx, 0>', '<mov~~dword ptr [rsp + 0x64], ecx>', '<mov~~qword ptr [rsp + 0x68], rax>', '<je~~0x4002a2>']}, {'block_Idx': 21, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<jl~~0x400455>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<mov~~eax, dword ptr [rsp + 0xf4]>', '<add~~rsp, 0xf8>', '<ret~~>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xa8]>', '<mov~~ecx, dword ptr [rsp + 0x90]>', '<mov~~rax, qword ptr [rsp + 0x80]>', '<mov~~rdi, qword ptr [rsp + 0x70]>', '<mov~~rsi, qword ptr [rsp + 0x98]>', '<add~~rsi, rdi>', '<mov~~qword ptr [rsp + 0x58], rsi>', '<mov~~eax, dword ptr [rax]>', '<add~~ecx, -2>', '<mov~~dword ptr [rsp + 0x54], ecx>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdi, qword ptr [rdx]>', '<imul~~ecx, dword ptr [rdx + 0x40]>', '<movsxd~~rcx, ecx>', '<add~~rdi, rcx>', '<imul~~eax, eax, 3>', '<movsxd~~rdx, eax>', '<call~~0x500018>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xf4]>', '<add~~rsp, 0xf8>', '<ret~~>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~dword ptr [rsp + 0xb4], eax>', '<cmp~~eax, 0>', '<jge~~0x400107>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xb8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3a7]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 37, 'blockInsts': ['<jmp~~0x400412>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xa4]>', '<mov~~rax, qword ptr [rsp + 0xb8]>', '<mov~~rdx, rax>', '<add~~rdx, 0x94>', '<mov~~qword ptr [rsp + 0x80], rdx>', '<mov~~edx, dword ptr [rax + 0x94]>', '<mov~~dword ptr [rsp + 0x88], edx>', '<imul~~edx, edx, 3>', '<add~~edx, 3>', '<and~~edx, 0xfffffffc>', '<mov~~dword ptr [rsp + 0x8c], edx>', '<mov~~eax, dword ptr [rax + 0x98]>', '<mov~~dword ptr [rsp + 0x90], eax>', '<imul~~edx, eax>', '<mov~~eax, 0xc1444e49>', '<cmp~~ecx, edx>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<jl~~0x400455>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x90]>', '<mov~~rsi, qword ptr [rsp + 0x98]>', '<mov~~eax, dword ptr [rsp + 0x88]>', '<mov~~rdx, qword ptr [rsp + 0xa8]>', '<mov~~edi, dword ptr [rsp + 0x8c]>', '<movsxd~~rdi, edi>', '<mov~~qword ptr [rsp + 0x70], rdi>', '<add~~ecx, -1>', '<mov~~dword ptr [rsp + 0x7c], ecx>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdi, qword ptr [rdx]>', '<imul~~ecx, dword ptr [rdx + 0x40]>', '<movsxd~~rcx, ecx>', '<add~~rdi, rcx>', '<imul~~eax, eax, 3>', '<movsxd~~rdx, eax>', '<call~~0x500018>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x90]>', '<cmp~~eax, 1>', '<je~~0x400412>']}, {'block_Idx': 9, 'blockInsts': ['<jmp~~0x40013b>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x18]>', '<mov~~rdi, qword ptr [rsp + 0x70]>', '<mov~~rax, qword ptr [rsp + 0x80]>', '<mov~~rdx, qword ptr [rsp + 0xa8]>', '<mov~~ecx, dword ptr [rsp + 0x30]>', '<add~~rsi, rdi>', '<mov~~qword ptr [rsp + 0x38], rsi>', '<mov~~eax, dword ptr [rax]>', '<add~~ecx, -2>', '<mov~~dword ptr [rsp + 0x34], ecx>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdi, qword ptr [rdx]>', '<imul~~ecx, dword ptr [rdx + 0x40]>', '<mov~~dword ptr [rsp + 0x24], ecx>', '<movsxd~~rcx, ecx>', '<add~~rdi, rcx>', '<mov~~qword ptr [rsp + 0x28], rdi>', '<imul~~eax, eax, 3>', '<movsxd~~rdx, eax>', '<call~~0x500018>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xe4]>', '<mov~~rdx, qword ptr [rsp + 0xd0]>', '<mov~~eax, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0x94], eax>', '<add~~rdx, 4>', '<mov~~qword ptr [rsp + 0x98], rdx>', '<add~~ecx, -4>', '<mov~~dword ptr [rsp + 0xa4], ecx>', '<test~~eax, eax>', '<je~~0x400150>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x90]>', '<cmp~~eax, 0>', '<jle~~0x400412>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xb4]>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<jmp~~0x400455>']}], 'cfg_edge_info': [(16, 20), (27, 1), (12, 16), (4, 6), (23, 13), (33, 30), (21, 25), (0, 2), (22, 26), (5, 10), (14, 22), (11, 14), (28, 30), (36, 37), (6, 8), (15, 23), (22, 13), (4, 5), (26, 29), (12, 15), (8, 11), (0, 1), (2, 4), (36, 30), (34, 36), (11, 13), (33, 13), (26, 28), (21, 1), (29, 33), (37, 13), (20, 27), (8, 1), (28, 13), (9, 12), (10, 1), (13, 21), (6, 9), (30, 34)], 'cdg_edge_info': [(6, 12), (12, 1), (33, 36), (12, 16), (26, 33), (4, 6), (12, 13), (21, 25), (0, 2), (22, 26), (11, 14), (8, 21), (36, 34), (6, 8), (4, 5), (26, 29), (12, 15), (12, 21), (8, 11), (0, 1), (12, 27), (36, 30), (0, 4), (36, 36), (11, 22), (33, 34), (4, 1), (4, 10), (12, 23), (12, 20), (8, 1), (8, 13), (33, 30), (6, 9), (21, 1)], 'ddg_edge_info': [(6, 12), (6, 15), (26, 33), (6, 30), (34, 13), (33, 30), (21, 25), (14, 13), (5, 10), (0, 2), (0, 5), (14, 22), (5, 25), (27, 25), (0, 8), (2, 5), (2, 11), (2, 8), (14, 34), (8, 30), (2, 14), (0, 20), (10, 25), (8, 33), (2, 20), (30, 36), (6, 8), (6, 14), (6, 20), (2, 29), (29, 13), (6, 26), (20, 25), (6, 29), (29, 34), (8, 11), (34, 30), (2, 4), (36, 30), (8, 14), (14, 30), (14, 33), (34, 36), (2, 15), (0, 13), (15, 13), (2, 13), (8, 29), (0, 25), (2, 25), (13, 25), (2, 34), (29, 30), (4, 10), (29, 33), (20, 27), (6, 34), (30, 34), (14, 26), (0, 6), (14, 29), (0, 15), (2, 6), (8, 22), (2, 12), (8, 25), (13, 21), (8, 34), (2, 30)]}]}
{'aasc_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 182, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 183, 'instruction': 'addq\t$8, %rcx'}, {'instIndex': 189, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 190, 'instruction': 'movl\t$8, %edx'}, {'instIndex': 191, 'instruction': 'callq\tff_msrle_decode@PLT'}, {'instIndex': 192, 'instruction': 'jmp\t.LBB1_13'}, {'instIndex': 195, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 196, 'instruction': 'leaq\t.L.str.3(%rip), %rdx'}, {'instIndex': 197, 'instruction': 'movb\t$0, %al'}, {'instIndex': 198, 'instruction': 'callq\tav_log@PLT'}]}]}
The case of compiler clang with optimization O3.
Patched source code file: aasc.c
Patched function: 1---static int aasc_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_before/O3/aasc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_before/O3/aasc.s---aasc_decode_frame---before
function id: 1
function flag: True
There are 217 instructions for function: aasc_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '85', 'end': 91}, 'before': {'start': '85', 'end': 91}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 182, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 183, 'instruction': 'addq\t$8, %rcx'}, {'instIndex': 189, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 190, 'instruction': 'movl\t$8, %edx'}, {'instIndex': 191, 'instruction': 'callq\tff_msrle_decode@PLT'}, {'instIndex': 192, 'instruction': 'jmp\t.LBB1_13'}, {'instIndex': 195, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 196, 'instruction': 'leaq\t.L.str.3(%rip), %rdx'}, {'instIndex': 197, 'instruction': 'movb\t$0, %al'}, {'instIndex': 198, 'instruction': 'callq\tav_log@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_before/O3/aasc.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_before/O3/aasc.o---before
The extraction of function: aasc_decode_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 42 nodes and 65 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 217 instructions in binary file.
[4195218, 4195296, 4195298]
The execution time of patched subCFG information extraction via angr: 0:00:00.186462
{'aasc_decode_frame': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003e2>, <DisassemblerInsn "mov" for 0x4003e9>, <DisassemblerInsn "mov" for 0x4003f1>, <DisassemblerInsn "lea" for 0x4003f6>, <DisassemblerInsn "mov" for 0x4003fd>, <DisassemblerInsn "call" for 0x4003ff>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400412>, <DisassemblerInsn "mov" for 0x40041a>, <DisassemblerInsn "mov" for 0x400422>, <DisassemblerInsn "mov" for 0x40042a>, <DisassemblerInsn "mov" for 0x400430>, <DisassemblerInsn "call" for 0x400433>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400404>, <DisassemblerInsn "mov" for 0x400409>, <DisassemblerInsn "jmp" for 0x400410>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4003e0>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400392>, <DisassemblerInsn "mov" for 0x40039a>, <DisassemblerInsn "mov" for 0x4003a2>, <DisassemblerInsn "mov" for 0x4003aa>, <DisassemblerInsn "mov" for 0x4003b2>, <DisassemblerInsn "mov" for 0x4003ba>, <DisassemblerInsn "add" for 0x4003bd>, <DisassemblerInsn "mov" for 0x4003c1>, <DisassemblerInsn "mov" for 0x4003c5>, <DisassemblerInsn "mov" for 0x4003c9>, <DisassemblerInsn "add" for 0x4003cc>, <DisassemblerInsn "mov" for 0x4003cf>, <DisassemblerInsn "mov" for 0x4003d3>, <DisassemblerInsn "mov" for 0x4003d6>, <DisassemblerInsn "call" for 0x4003db>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40013b>, <DisassemblerInsn "sub" for 0x400142>, <DisassemblerInsn "je" for 0x400145>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40014b>]'}], 'cfg_block_detailed_info': [{'block_Idx': 18, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x94]>', '<mov~~rdi, qword ptr [rsp + 0xb8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0xae]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~rdi, qword ptr [rsp + 0xc0]>', '<mov~~rcx, qword ptr [rsp + 0xc8]>', '<mov~~dword ptr [rcx], 1>', '<mov~~rsi, qword ptr [rax]>', '<call~~0x500028>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<jmp~~0x400455>']}, {'block_Idx': 17, 'blockInsts': ['<jmp~~0x400412>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xb8]>', '<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~rdx, qword ptr [rsp + 0xe8]>', '<mov~~rsi, qword ptr [rsp + 0x98]>', '<mov~~r8d, dword ptr [rsp + 0xa4]>', '<mov~~rcx, rdx>', '<add~~rcx, 8>', '<mov~~qword ptr [rdx + 8], rsi>', '<mov~~qword ptr [rdx + 0x18], rsi>', '<mov~~r8d, r8d>', '<add~~rsi, r8>', '<mov~~qword ptr [rdx + 0x10], rsi>', '<mov~~rsi, qword ptr [rax]>', '<mov~~edx, 8>', '<call~~0x500020>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x94]>', '<sub~~eax, 1>', '<je~~0x400392>']}, {'block_Idx': 14, 'blockInsts': ['<jmp~~0x4003e2>']}], 'cfg_edge_info': [(13, 17), (14, 18), (10, 13), (17, 11), (18, 21)]}]}
{'aasc_decode_frame': [4195218, 4195296, 4195298]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_before/O3/aasc.o---before
The extraction of function: aasc_decode_frame
[4195218, 4195296, 4195298]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 38 nodes and 57 edges in CFGEmulated.
It has 38 nodes and 55 edges in CDG.
It has 754 nodes and 899 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4195218, 4195296, 4195298]
{4195332, 4194567, 4194960, 4194833, 4195218, 4195346, 4195099, 4194849, 4194469, 4194738, 4195384, 4194617, 4194619, 4194368, 4194880, 4194754, 4195396, 4195012, 4194635, 4194509, 4194640, 4195413, 4194521, 4195296, 4195298, 4195182, 4194548}
[33, 12, 27, 2, 13, 15, 36, 16, 28, 0, 30, 20, 23, 26, 21, 25, 29, 1, 4, 5, 37, 8, 14, 22, 9, 34, 6, 11, 10]
The execution time of patched slicing information extraction via angr: 0:00:07.808157
{'aasc_decode_frame': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400290>, <DisassemblerInsn "mov" for 0x400294>, <DisassemblerInsn "mov" for 0x400299>, <DisassemblerInsn "mov" for 0x40029d>, <DisassemblerInsn "mov" for 0x4002a2>, <DisassemblerInsn "mov" for 0x4002a9>, <DisassemblerInsn "mov" for 0x4002ad>, <DisassemblerInsn "cmp" for 0x4002b2>, <DisassemblerInsn "mov" for 0x4002b5>, <DisassemblerInsn "mov" for 0x4002b9>, <DisassemblerInsn "je" for 0x4002be>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40013b>, <DisassemblerInsn "sub" for 0x400142>, <DisassemblerInsn "je" for 0x400145>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400404>, <DisassemblerInsn "mov" for 0x400409>, <DisassemblerInsn "jmp" for 0x400410>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000a5>, <DisassemblerInsn "mov" for 0x4000ad>, <DisassemblerInsn "mov" for 0x4000b5>, <DisassemblerInsn "add" for 0x4000b8>, <DisassemblerInsn "mov" for 0x4000bc>, <DisassemblerInsn "mov" for 0x4000c4>, <DisassemblerInsn "call" for 0x4000c8>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400412>, <DisassemblerInsn "mov" for 0x40041a>, <DisassemblerInsn "mov" for 0x400422>, <DisassemblerInsn "mov" for 0x40042a>, <DisassemblerInsn "mov" for 0x400430>, <DisassemblerInsn "call" for 0x400433>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400392>, <DisassemblerInsn "mov" for 0x40039a>, <DisassemblerInsn "mov" for 0x4003a2>, <DisassemblerInsn "mov" for 0x4003aa>, <DisassemblerInsn "mov" for 0x4003b2>, <DisassemblerInsn "mov" for 0x4003ba>, <DisassemblerInsn "add" for 0x4003bd>, <DisassemblerInsn "mov" for 0x4003c1>, <DisassemblerInsn "mov" for 0x4003c5>, <DisassemblerInsn "mov" for 0x4003c9>, <DisassemblerInsn "add" for 0x4003cc>, <DisassemblerInsn "mov" for 0x4003cf>, <DisassemblerInsn "mov" for 0x4003d3>, <DisassemblerInsn "mov" for 0x4003d6>, <DisassemblerInsn "call" for 0x4003db>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40036e>, <DisassemblerInsn "mov" for 0x400372>, <DisassemblerInsn "mov" for 0x400376>, <DisassemblerInsn "cmp" for 0x40037b>, <DisassemblerInsn "mov" for 0x40037e>, <DisassemblerInsn "mov" for 0x400382>, <DisassemblerInsn "jg" for 0x400387>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40014b>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002a2>, <DisassemblerInsn "mov" for 0x4002a9>, <DisassemblerInsn "mov" for 0x4002ad>, <DisassemblerInsn "cmp" for 0x4002b2>, <DisassemblerInsn "mov" for 0x4002b5>, <DisassemblerInsn "mov" for 0x4002b9>, <DisassemblerInsn "je" for 0x4002be>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400040>, <DisassemblerInsn "mov" for 0x400047>, <DisassemblerInsn "mov" for 0x40004f>, <DisassemblerInsn "mov" for 0x400057>, <DisassemblerInsn "mov" for 0x40005f>, <DisassemblerInsn "mov" for 0x400063>, <DisassemblerInsn "mov" for 0x40006b>, <DisassemblerInsn "add" for 0x40006e>, <DisassemblerInsn "mov" for 0x400072>, <DisassemblerInsn "mov" for 0x40007a>, <DisassemblerInsn "mov" for 0x40007d>, <DisassemblerInsn "mov" for 0x400084>, <DisassemblerInsn "mov" for 0x400088>, <DisassemblerInsn "mov" for 0x400090>, <DisassemblerInsn "cmp" for 0x400095>, <DisassemblerInsn "mov" for 0x400098>, <DisassemblerInsn "jl" for 0x40009f>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002c4>, <DisassemblerInsn "mov" for 0x4002c9>, <DisassemblerInsn "mov" for 0x4002cd>, <DisassemblerInsn "mov" for 0x4002d5>, <DisassemblerInsn "mov" for 0x4002dd>, <DisassemblerInsn "mov" for 0x4002e2>, <DisassemblerInsn "add" for 0x4002e6>, <DisassemblerInsn "mov" for 0x4002e9>, <DisassemblerInsn "mov" for 0x4002ee>, <DisassemblerInsn "add" for 0x4002f0>, <DisassemblerInsn "mov" for 0x4002f3>, <DisassemblerInsn "mov" for 0x4002f7>, <DisassemblerInsn "mov" for 0x4002fa>, <DisassemblerInsn "imul" for 0x4002fd>, <DisassemblerInsn "mov" for 0x400301>, <DisassemblerInsn "movsxd" for 0x400305>, <DisassemblerInsn "add" for 0x400308>, <DisassemblerInsn "mov" for 0x40030b>, <DisassemblerInsn "imul" for 0x400310>, <DisassemblerInsn "movsxd" for 0x400313>, <DisassemblerInsn "call" for 0x400316>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003e2>, <DisassemblerInsn "mov" for 0x4003e9>, <DisassemblerInsn "mov" for 0x4003f1>, <DisassemblerInsn "lea" for 0x4003f6>, <DisassemblerInsn "mov" for 0x4003fd>, <DisassemblerInsn "call" for 0x4003ff>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4003e0>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400221>, <DisassemblerInsn "mov" for 0x400229>, <DisassemblerInsn "mov" for 0x40022d>, <DisassemblerInsn "and" for 0x40022f>, <DisassemblerInsn "cmp" for 0x400232>, <DisassemblerInsn "mov" for 0x400235>, <DisassemblerInsn "mov" for 0x400239>, <DisassemblerInsn "je" for 0x40023e>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400438>, <DisassemblerInsn "mov" for 0x40043b>, <DisassemblerInsn "jl" for 0x400442>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400444>, <DisassemblerInsn "mov" for 0x40044c>, <DisassemblerInsn "mov" for 0x40044e>, <DisassemblerInsn "mov" for 0x400455>, <DisassemblerInsn "add" for 0x40045c>, <DisassemblerInsn "ret" for 0x400463>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400240>, <DisassemblerInsn "mov" for 0x400248>, <DisassemblerInsn "mov" for 0x40024f>, <DisassemblerInsn "mov" for 0x400257>, <DisassemblerInsn "mov" for 0x40025c>, <DisassemblerInsn "add" for 0x400264>, <DisassemblerInsn "mov" for 0x400267>, <DisassemblerInsn "mov" for 0x40026c>, <DisassemblerInsn "add" for 0x40026e>, <DisassemblerInsn "mov" for 0x400271>, <DisassemblerInsn "mov" for 0x400275>, <DisassemblerInsn "mov" for 0x400278>, <DisassemblerInsn "imul" for 0x40027b>, <DisassemblerInsn "movsxd" for 0x40027f>, <DisassemblerInsn "add" for 0x400282>, <DisassemblerInsn "imul" for 0x400285>, <DisassemblerInsn "movsxd" for 0x400288>, <DisassemblerInsn "call" for 0x40028b>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400455>, <DisassemblerInsn "add" for 0x40045c>, <DisassemblerInsn "ret" for 0x400463>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000cd>, <DisassemblerInsn "cmp" for 0x4000d4>, <DisassemblerInsn "jge" for 0x4000d7>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000d9>, <DisassemblerInsn "mov" for 0x4000e1>, <DisassemblerInsn "lea" for 0x4000e6>, <DisassemblerInsn "mov" for 0x4000ed>, <DisassemblerInsn "call" for 0x4000ef>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40038d>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400150>, <DisassemblerInsn "mov" for 0x400157>, <DisassemblerInsn "mov" for 0x40015f>, <DisassemblerInsn "add" for 0x400162>, <DisassemblerInsn "mov" for 0x400169>, <DisassemblerInsn "mov" for 0x400171>, <DisassemblerInsn "mov" for 0x400177>, <DisassemblerInsn "imul" for 0x40017e>, <DisassemblerInsn "add" for 0x400181>, <DisassemblerInsn "and" for 0x400184>, <DisassemblerInsn "mov" for 0x400187>, <DisassemblerInsn "mov" for 0x40018e>, <DisassemblerInsn "mov" for 0x400194>, <DisassemblerInsn "imul" for 0x40019b>, <DisassemblerInsn "mov" for 0x40019e>, <DisassemblerInsn "cmp" for 0x4001a3>, <DisassemblerInsn "mov" for 0x4001a5>, <DisassemblerInsn "jl" for 0x4001ac>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001c2>, <DisassemblerInsn "mov" for 0x4001c9>, <DisassemblerInsn "mov" for 0x4001d1>, <DisassemblerInsn "mov" for 0x4001d8>, <DisassemblerInsn "mov" for 0x4001e0>, <DisassemblerInsn "movsxd" for 0x4001e7>, <DisassemblerInsn "mov" for 0x4001ea>, <DisassemblerInsn "add" for 0x4001ef>, <DisassemblerInsn "mov" for 0x4001f2>, <DisassemblerInsn "mov" for 0x4001f6>, <DisassemblerInsn "mov" for 0x4001f9>, <DisassemblerInsn "imul" for 0x4001fc>, <DisassemblerInsn "movsxd" for 0x400200>, <DisassemblerInsn "add" for 0x400203>, <DisassemblerInsn "imul" for 0x400206>, <DisassemblerInsn "movsxd" for 0x400209>, <DisassemblerInsn "call" for 0x40020c>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400211>, <DisassemblerInsn "cmp" for 0x400218>, <DisassemblerInsn "je" for 0x40021b>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400139>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40031b>, <DisassemblerInsn "mov" for 0x400320>, <DisassemblerInsn "mov" for 0x400325>, <DisassemblerInsn "mov" for 0x40032d>, <DisassemblerInsn "mov" for 0x400335>, <DisassemblerInsn "add" for 0x400339>, <DisassemblerInsn "mov" for 0x40033c>, <DisassemblerInsn "mov" for 0x400341>, <DisassemblerInsn "add" for 0x400343>, <DisassemblerInsn "mov" for 0x400346>, <DisassemblerInsn "mov" for 0x40034a>, <DisassemblerInsn "mov" for 0x40034d>, <DisassemblerInsn "imul" for 0x400350>, <DisassemblerInsn "mov" for 0x400354>, <DisassemblerInsn "movsxd" for 0x400358>, <DisassemblerInsn "add" for 0x40035b>, <DisassemblerInsn "mov" for 0x40035e>, <DisassemblerInsn "imul" for 0x400363>, <DisassemblerInsn "movsxd" for 0x400366>, <DisassemblerInsn "call" for 0x400369>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400107>, <DisassemblerInsn "mov" for 0x40010e>, <DisassemblerInsn "mov" for 0x400116>, <DisassemblerInsn "mov" for 0x400118>, <DisassemblerInsn "add" for 0x40011f>, <DisassemblerInsn "mov" for 0x400123>, <DisassemblerInsn "add" for 0x40012b>, <DisassemblerInsn "mov" for 0x40012e>, <DisassemblerInsn "test" for 0x400135>, <DisassemblerInsn "je" for 0x400137>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001b2>, <DisassemblerInsn "cmp" for 0x4001b9>, <DisassemblerInsn "jle" for 0x4001bc>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000f4>, <DisassemblerInsn "mov" for 0x4000fb>, <DisassemblerInsn "jmp" for 0x400102>]'}], 'cfg_block_detailed_info': [{'block_Idx': 33, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x54]>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~dword ptr [rsp + 0x64], ecx>', '<mov~~qword ptr [rsp + 0x68], rax>', '<mov~~edx, dword ptr [rsp + 0x90]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<mov~~rax, qword ptr [rsp + 0x68]>', '<cmp~~edx, 2>', '<mov~~dword ptr [rsp + 0x44], ecx>', '<mov~~qword ptr [rsp + 0x48], rax>', '<je~~0x400412>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x94]>', '<sub~~eax, 1>', '<je~~0x400392>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<jmp~~0x400455>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xb8]>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~rcx, rax>', '<add~~rcx, 0x20>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<mov~~rsi, qword ptr [rax + 0x20]>', '<call~~0x500008>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~rdi, qword ptr [rsp + 0xc0]>', '<mov~~rcx, qword ptr [rsp + 0xc8]>', '<mov~~dword ptr [rcx], 1>', '<mov~~rsi, qword ptr [rax]>', '<call~~0x500028>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xb8]>', '<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~rdx, qword ptr [rsp + 0xe8]>', '<mov~~rsi, qword ptr [rsp + 0x98]>', '<mov~~r8d, dword ptr [rsp + 0xa4]>', '<mov~~rcx, rdx>', '<add~~rcx, 8>', '<mov~~qword ptr [rdx + 8], rsi>', '<mov~~qword ptr [rdx + 0x18], rsi>', '<mov~~r8d, r8d>', '<add~~rsi, r8>', '<mov~~qword ptr [rdx + 0x10], rsi>', '<mov~~rsi, qword ptr [rax]>', '<mov~~edx, 8>', '<call~~0x500020>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x30]>', '<mov~~ecx, dword ptr [rsp + 0x34]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~edx, 2>', '<mov~~dword ptr [rsp + 0x44], ecx>', '<mov~~qword ptr [rsp + 0x48], rax>', '<jg~~0x4002c4>']}, {'block_Idx': 16, 'blockInsts': ['<jmp~~0x4003e2>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x90]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<mov~~rax, qword ptr [rsp + 0x68]>', '<cmp~~edx, 2>', '<mov~~dword ptr [rsp + 0x44], ecx>', '<mov~~qword ptr [rsp + 0x48], rax>', '<je~~0x400412>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0xf8>', '<mov~~qword ptr [rsp + 0xb8], rdi>', '<mov~~qword ptr [rsp + 0xc0], rsi>', '<mov~~qword ptr [rsp + 0xc8], rdx>', '<mov~~rax, qword ptr [rcx + 0x18]>', '<mov~~qword ptr [rsp + 0xd0], rax>', '<mov~~rax, rcx>', '<add~~rax, 0x20>', '<mov~~qword ptr [rsp + 0xd8], rax>', '<mov~~ecx, dword ptr [rcx + 0x20]>', '<mov~~dword ptr [rsp + 0xe4], ecx>', '<mov~~rax, qword ptr [rdi + 0x48]>', '<mov~~qword ptr [rsp + 0xe8], rax>', '<mov~~eax, 0xc1444e49>', '<cmp~~ecx, 4>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<jl~~0x400455>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x48]>', '<mov~~ecx, dword ptr [rsp + 0x44]>', '<mov~~rdx, qword ptr [rsp + 0xa8]>', '<mov~~rax, qword ptr [rsp + 0x80]>', '<mov~~rdi, qword ptr [rsp + 0x70]>', '<mov~~dword ptr [rsp + 0x30], ecx>', '<add~~rsi, rdi>', '<mov~~qword ptr [rsp + 0x18], rsi>', '<mov~~eax, dword ptr [rax]>', '<add~~ecx, -1>', '<mov~~dword ptr [rsp + 8], ecx>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdi, qword ptr [rdx]>', '<imul~~ecx, dword ptr [rdx + 0x40]>', '<mov~~dword ptr [rsp + 0xc], ecx>', '<movsxd~~rcx, ecx>', '<add~~rdi, rcx>', '<mov~~qword ptr [rsp + 0x10], rdi>', '<imul~~eax, eax, 3>', '<movsxd~~rdx, eax>', '<call~~0x500018>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x94]>', '<mov~~rdi, qword ptr [rsp + 0xb8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0xae]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 23, 'blockInsts': ['<jmp~~0x400412>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~ecx, dword ptr [rsp + 0x7c]>', '<mov~~edx, ecx>', '<and~~edx, 1>', '<cmp~~edx, 0>', '<mov~~dword ptr [rsp + 0x64], ecx>', '<mov~~qword ptr [rsp + 0x68], rax>', '<je~~0x4002a2>']}, {'block_Idx': 21, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<jl~~0x400455>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<mov~~eax, dword ptr [rsp + 0xf4]>', '<add~~rsp, 0xf8>', '<ret~~>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xa8]>', '<mov~~ecx, dword ptr [rsp + 0x90]>', '<mov~~rax, qword ptr [rsp + 0x80]>', '<mov~~rdi, qword ptr [rsp + 0x70]>', '<mov~~rsi, qword ptr [rsp + 0x98]>', '<add~~rsi, rdi>', '<mov~~qword ptr [rsp + 0x58], rsi>', '<mov~~eax, dword ptr [rax]>', '<add~~ecx, -2>', '<mov~~dword ptr [rsp + 0x54], ecx>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdi, qword ptr [rdx]>', '<imul~~ecx, dword ptr [rdx + 0x40]>', '<movsxd~~rcx, ecx>', '<add~~rdi, rcx>', '<imul~~eax, eax, 3>', '<movsxd~~rdx, eax>', '<call~~0x500018>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xf4]>', '<add~~rsp, 0xf8>', '<ret~~>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~dword ptr [rsp + 0xb4], eax>', '<cmp~~eax, 0>', '<jge~~0x400107>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xb8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x3a7]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 37, 'blockInsts': ['<jmp~~0x400412>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xa4]>', '<mov~~rax, qword ptr [rsp + 0xb8]>', '<mov~~rdx, rax>', '<add~~rdx, 0x94>', '<mov~~qword ptr [rsp + 0x80], rdx>', '<mov~~edx, dword ptr [rax + 0x94]>', '<mov~~dword ptr [rsp + 0x88], edx>', '<imul~~edx, edx, 3>', '<add~~edx, 3>', '<and~~edx, 0xfffffffc>', '<mov~~dword ptr [rsp + 0x8c], edx>', '<mov~~eax, dword ptr [rax + 0x98]>', '<mov~~dword ptr [rsp + 0x90], eax>', '<imul~~edx, eax>', '<mov~~eax, 0xc1444e49>', '<cmp~~ecx, edx>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<jl~~0x400455>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x90]>', '<mov~~rsi, qword ptr [rsp + 0x98]>', '<mov~~eax, dword ptr [rsp + 0x88]>', '<mov~~rdx, qword ptr [rsp + 0xa8]>', '<mov~~edi, dword ptr [rsp + 0x8c]>', '<movsxd~~rdi, edi>', '<mov~~qword ptr [rsp + 0x70], rdi>', '<add~~ecx, -1>', '<mov~~dword ptr [rsp + 0x7c], ecx>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdi, qword ptr [rdx]>', '<imul~~ecx, dword ptr [rdx + 0x40]>', '<movsxd~~rcx, ecx>', '<add~~rdi, rcx>', '<imul~~eax, eax, 3>', '<movsxd~~rdx, eax>', '<call~~0x500018>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x90]>', '<cmp~~eax, 1>', '<je~~0x400412>']}, {'block_Idx': 9, 'blockInsts': ['<jmp~~0x40013b>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x18]>', '<mov~~rdi, qword ptr [rsp + 0x70]>', '<mov~~rax, qword ptr [rsp + 0x80]>', '<mov~~rdx, qword ptr [rsp + 0xa8]>', '<mov~~ecx, dword ptr [rsp + 0x30]>', '<add~~rsi, rdi>', '<mov~~qword ptr [rsp + 0x38], rsi>', '<mov~~eax, dword ptr [rax]>', '<add~~ecx, -2>', '<mov~~dword ptr [rsp + 0x34], ecx>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdi, qword ptr [rdx]>', '<imul~~ecx, dword ptr [rdx + 0x40]>', '<mov~~dword ptr [rsp + 0x24], ecx>', '<movsxd~~rcx, ecx>', '<add~~rdi, rcx>', '<mov~~qword ptr [rsp + 0x28], rdi>', '<imul~~eax, eax, 3>', '<movsxd~~rdx, eax>', '<call~~0x500018>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xe4]>', '<mov~~rdx, qword ptr [rsp + 0xd0]>', '<mov~~eax, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0x94], eax>', '<add~~rdx, 4>', '<mov~~qword ptr [rsp + 0x98], rdx>', '<add~~ecx, -4>', '<mov~~dword ptr [rsp + 0xa4], ecx>', '<test~~eax, eax>', '<je~~0x400150>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x90]>', '<cmp~~eax, 0>', '<jle~~0x400412>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xb4]>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<jmp~~0x400455>']}], 'cfg_edge_info': [(16, 20), (27, 1), (12, 16), (4, 6), (23, 13), (33, 30), (21, 25), (0, 2), (22, 26), (5, 10), (14, 22), (11, 14), (28, 30), (36, 37), (6, 8), (15, 23), (22, 13), (4, 5), (26, 29), (12, 15), (8, 11), (0, 1), (2, 4), (36, 30), (34, 36), (11, 13), (33, 13), (26, 28), (21, 1), (29, 33), (37, 13), (20, 27), (8, 1), (28, 13), (9, 12), (10, 1), (13, 21), (6, 9), (30, 34)], 'cdg_edge_info': [(6, 12), (12, 1), (33, 36), (12, 16), (26, 33), (4, 6), (12, 13), (21, 25), (0, 2), (22, 26), (11, 14), (8, 21), (36, 34), (6, 8), (4, 5), (26, 29), (12, 15), (12, 21), (8, 11), (0, 1), (12, 27), (36, 30), (0, 4), (36, 36), (11, 22), (33, 34), (4, 1), (4, 10), (12, 23), (12, 20), (8, 1), (8, 13), (33, 30), (6, 9), (21, 1)], 'ddg_edge_info': [(6, 12), (6, 15), (26, 33), (6, 30), (34, 13), (33, 30), (21, 25), (14, 13), (5, 10), (0, 2), (0, 5), (14, 22), (5, 25), (27, 25), (0, 8), (2, 5), (2, 11), (2, 8), (14, 34), (8, 30), (2, 14), (0, 20), (10, 25), (8, 33), (2, 20), (30, 36), (6, 8), (6, 14), (6, 20), (2, 29), (29, 13), (6, 26), (20, 25), (6, 29), (29, 34), (8, 11), (34, 30), (2, 4), (36, 30), (8, 14), (14, 30), (14, 33), (34, 36), (2, 15), (0, 13), (15, 13), (2, 13), (8, 29), (0, 25), (2, 25), (13, 25), (2, 34), (29, 30), (4, 10), (29, 33), (20, 27), (6, 34), (30, 34), (14, 26), (0, 6), (14, 29), (0, 15), (2, 6), (8, 22), (2, 12), (8, 25), (13, 21), (8, 34), (2, 30)]}]}
{'aasc_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 182, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 183, 'instruction': 'addq\t$8, %rcx'}, {'instIndex': 189, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 190, 'instruction': 'movl\t$8, %edx'}, {'instIndex': 191, 'instruction': 'callq\tff_msrle_decode@PLT'}, {'instIndex': 192, 'instruction': 'jmp\t.LBB1_13'}, {'instIndex': 195, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 196, 'instruction': 'leaq\t.L.str.3(%rip), %rdx'}, {'instIndex': 197, 'instruction': 'movb\t$0, %al'}, {'instIndex': 198, 'instruction': 'callq\tav_log@PLT'}]}]}
The case of compiler clang with optimization Os.
Patched source code file: aasc.c
Patched function: 1---static int aasc_decode_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_before/Os/aasc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_before/Os/aasc.s---aasc_decode_frame---before
function id: 1
function flag: True
There are 164 instructions for function: aasc_decode_frame in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '85', 'end': 91}, 'before': {'start': '85', 'end': 91}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 129, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 130, 'instruction': 'addq\t$8, %rcx'}, {'instIndex': 136, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 137, 'instruction': 'movl\t$8, %edx'}, {'instIndex': 138, 'instruction': 'callq\tff_msrle_decode@PLT'}, {'instIndex': 139, 'instruction': 'jmp\t.LBB1_10'}, {'instIndex': 142, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 143, 'instruction': 'leaq\t.L.str.3(%rip), %rdx'}, {'instIndex': 144, 'instruction': 'movb\t$0, %al'}, {'instIndex': 145, 'instruction': 'callq\tav_log@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_before/Os/aasc.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_before/Os/aasc.o---before
The extraction of function: aasc_decode_frame
Analyzing the binaries to generate subCFGs from patched function ...
It has 35 nodes and 51 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 164 instructions in binary file.
[4194898, 4194964, 4194966]
The execution time of patched subCFG information extraction via angr: 0:00:00.172392
{'aasc_decode_frame': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400296>, <DisassemblerInsn "mov" for 0x40029a>, <DisassemblerInsn "mov" for 0x40029f>, <DisassemblerInsn "lea" for 0x4002a4>, <DisassemblerInsn "mov" for 0x4002ab>, <DisassemblerInsn "call" for 0x4002ad>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002c0>, <DisassemblerInsn "mov" for 0x4002c5>, <DisassemblerInsn "mov" for 0x4002cd>, <DisassemblerInsn "mov" for 0x4002d5>, <DisassemblerInsn "mov" for 0x4002db>, <DisassemblerInsn "call" for 0x4002de>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400294>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400116>, <DisassemblerInsn "sub" for 0x40011a>, <DisassemblerInsn "je" for 0x40011d>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400123>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400252>, <DisassemblerInsn "mov" for 0x400257>, <DisassemblerInsn "mov" for 0x40025c>, <DisassemblerInsn "mov" for 0x400264>, <DisassemblerInsn "mov" for 0x400269>, <DisassemblerInsn "mov" for 0x40026e>, <DisassemblerInsn "add" for 0x400271>, <DisassemblerInsn "mov" for 0x400275>, <DisassemblerInsn "mov" for 0x400279>, <DisassemblerInsn "mov" for 0x40027d>, <DisassemblerInsn "add" for 0x400280>, <DisassemblerInsn "mov" for 0x400283>, <DisassemblerInsn "mov" for 0x400287>, <DisassemblerInsn "mov" for 0x40028a>, <DisassemblerInsn "call" for 0x40028f>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002b2>, <DisassemblerInsn "mov" for 0x4002b7>, <DisassemblerInsn "jmp" for 0x4002be>]'}], 'cfg_block_detailed_info': [{'block_Idx': 18, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x54]>', '<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x9f]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x68]>', '<mov~~rdi, qword ptr [rsp + 0x80]>', '<mov~~rcx, qword ptr [rsp + 0x88]>', '<mov~~dword ptr [rcx], 1>', '<mov~~rsi, qword ptr [rax]>', '<call~~0x500028>']}, {'block_Idx': 17, 'blockInsts': ['<jmp~~0x4002c0>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<sub~~eax, 1>', '<je~~0x400252>']}, {'block_Idx': 14, 'blockInsts': ['<jmp~~0x400296>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rsp + 0x68]>', '<mov~~rdx, qword ptr [rsp + 0xa8]>', '<mov~~rsi, qword ptr [rsp + 0x58]>', '<mov~~r8d, dword ptr [rsp + 0x64]>', '<mov~~rcx, rdx>', '<add~~rcx, 8>', '<mov~~qword ptr [rdx + 8], rsi>', '<mov~~qword ptr [rdx + 0x18], rsi>', '<mov~~r8d, r8d>', '<add~~rsi, r8>', '<mov~~qword ptr [rdx + 0x10], rsi>', '<mov~~rsi, qword ptr [rax]>', '<mov~~edx, 8>', '<call~~0x500020>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0xb4], eax>', '<jmp~~0x400300>']}], 'cfg_edge_info': [(13, 17), (14, 18), (10, 13), (17, 11), (18, 21)]}]}
{'aasc_decode_frame': [4194898, 4194964, 4194966]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7/clang_before/Os/aasc.o---before
The extraction of function: aasc_decode_frame
[4194898, 4194964, 4194966]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 31 nodes and 45 edges in CFGEmulated.
It has 31 nodes and 40 edges in CDG.
It has 549 nodes and 647 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194898, 4194964, 4194966]
{4195072, 4194693, 4194964, 4194580, 4194966, 4194582, 4194456, 4194595, 4194600, 4194994, 4194869, 4194358, 4194490, 4195008, 4194499, 4194757, 4194898, 4194523, 4195043, 4194788, 4194539, 4195055, 4194680}
[21, 0, 26, 30, 1, 29, 9, 8, 15, 16, 12, 2, 14, 10, 22, 25, 6, 27, 4, 13, 5, 20, 23, 11]
The execution time of patched slicing information extraction via angr: 0:00:05.127830
{'aasc_decode_frame': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4002e3>, <DisassemblerInsn "mov" for 0x4002e6>, <DisassemblerInsn "jl" for 0x4002ed>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400036>, <DisassemblerInsn "mov" for 0x40003d>, <DisassemblerInsn "mov" for 0x400042>, <DisassemblerInsn "mov" for 0x40004a>, <DisassemblerInsn "mov" for 0x400052>, <DisassemblerInsn "mov" for 0x400056>, <DisassemblerInsn "mov" for 0x40005e>, <DisassemblerInsn "add" for 0x400061>, <DisassemblerInsn "mov" for 0x400065>, <DisassemblerInsn "mov" for 0x40006d>, <DisassemblerInsn "mov" for 0x400070>, <DisassemblerInsn "mov" for 0x400077>, <DisassemblerInsn "mov" for 0x40007b>, <DisassemblerInsn "mov" for 0x400083>, <DisassemblerInsn "cmp" for 0x400088>, <DisassemblerInsn "mov" for 0x40008b>, <DisassemblerInsn "jl" for 0x400092>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001e4>, <DisassemblerInsn "mov" for 0x4001e9>, <DisassemblerInsn "mov" for 0x4001ed>, <DisassemblerInsn "mov" for 0x4001f2>, <DisassemblerInsn "mov" for 0x4001f7>, <DisassemblerInsn "mov" for 0x4001fc>, <DisassemblerInsn "add" for 0x400200>, <DisassemblerInsn "mov" for 0x400203>, <DisassemblerInsn "mov" for 0x400208>, <DisassemblerInsn "add" for 0x40020a>, <DisassemblerInsn "mov" for 0x40020d>, <DisassemblerInsn "mov" for 0x400211>, <DisassemblerInsn "mov" for 0x400214>, <DisassemblerInsn "imul" for 0x400217>, <DisassemblerInsn "mov" for 0x40021b>, <DisassemblerInsn "movsxd" for 0x40021f>, <DisassemblerInsn "add" for 0x400222>, <DisassemblerInsn "mov" for 0x400225>, <DisassemblerInsn "imul" for 0x40022a>, <DisassemblerInsn "movsxd" for 0x40022d>, <DisassemblerInsn "call" for 0x400230>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400250>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400300>, <DisassemblerInsn "add" for 0x400307>, <DisassemblerInsn "ret" for 0x40030e>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400235>, <DisassemblerInsn "mov" for 0x400239>, <DisassemblerInsn "mov" for 0x40023d>, <DisassemblerInsn "cmp" for 0x400242>, <DisassemblerInsn "mov" for 0x400245>, <DisassemblerInsn "mov" for 0x400249>, <DisassemblerInsn "jg" for 0x40024e>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400114>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400128>, <DisassemblerInsn "mov" for 0x40012c>, <DisassemblerInsn "mov" for 0x400131>, <DisassemblerInsn "add" for 0x400134>, <DisassemblerInsn "mov" for 0x40013b>, <DisassemblerInsn "mov" for 0x400140>, <DisassemblerInsn "mov" for 0x400146>, <DisassemblerInsn "imul" for 0x40014a>, <DisassemblerInsn "add" for 0x40014d>, <DisassemblerInsn "and" for 0x400150>, <DisassemblerInsn "mov" for 0x400153>, <DisassemblerInsn "mov" for 0x400157>, <DisassemblerInsn "mov" for 0x40015d>, <DisassemblerInsn "imul" for 0x400161>, <DisassemblerInsn "mov" for 0x400164>, <DisassemblerInsn "cmp" for 0x400169>, <DisassemblerInsn "mov" for 0x40016b>, <DisassemblerInsn "jl" for 0x400172>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400252>, <DisassemblerInsn "mov" for 0x400257>, <DisassemblerInsn "mov" for 0x40025c>, <DisassemblerInsn "mov" for 0x400264>, <DisassemblerInsn "mov" for 0x400269>, <DisassemblerInsn "mov" for 0x40026e>, <DisassemblerInsn "add" for 0x400271>, <DisassemblerInsn "mov" for 0x400275>, <DisassemblerInsn "mov" for 0x400279>, <DisassemblerInsn "mov" for 0x40027d>, <DisassemblerInsn "add" for 0x400280>, <DisassemblerInsn "mov" for 0x400283>, <DisassemblerInsn "mov" for 0x400287>, <DisassemblerInsn "mov" for 0x40028a>, <DisassemblerInsn "call" for 0x40028f>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400123>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400116>, <DisassemblerInsn "sub" for 0x40011a>, <DisassemblerInsn "je" for 0x40011d>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400098>, <DisassemblerInsn "mov" for 0x40009d>, <DisassemblerInsn "mov" for 0x4000a5>, <DisassemblerInsn "add" for 0x4000a8>, <DisassemblerInsn "mov" for 0x4000ac>, <DisassemblerInsn "mov" for 0x4000b1>, <DisassemblerInsn "call" for 0x4000b5>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400185>, <DisassemblerInsn "mov" for 0x40018a>, <DisassemblerInsn "mov" for 0x40018e>, <DisassemblerInsn "mov" for 0x400192>, <DisassemblerInsn "mov" for 0x400197>, <DisassemblerInsn "movsxd" for 0x40019b>, <DisassemblerInsn "mov" for 0x40019e>, <DisassemblerInsn "add" for 0x4001a3>, <DisassemblerInsn "mov" for 0x4001a6>, <DisassemblerInsn "mov" for 0x4001aa>, <DisassemblerInsn "mov" for 0x4001ad>, <DisassemblerInsn "imul" for 0x4001b0>, <DisassemblerInsn "movsxd" for 0x4001b4>, <DisassemblerInsn "add" for 0x4001b7>, <DisassemblerInsn "imul" for 0x4001ba>, <DisassemblerInsn "movsxd" for 0x4001bd>, <DisassemblerInsn "call" for 0x4001c0>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000db>, <DisassemblerInsn "mov" for 0x4000df>, <DisassemblerInsn "jmp" for 0x4000e6>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001c5>, <DisassemblerInsn "mov" for 0x4001c9>, <DisassemblerInsn "mov" for 0x4001cd>, <DisassemblerInsn "cmp" for 0x4001d2>, <DisassemblerInsn "mov" for 0x4001d5>, <DisassemblerInsn "mov" for 0x4001d9>, <DisassemblerInsn "je" for 0x4001de>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002ef>, <DisassemblerInsn "mov" for 0x4002f7>, <DisassemblerInsn "mov" for 0x4002f9>, <DisassemblerInsn "mov" for 0x400300>, <DisassemblerInsn "add" for 0x400307>, <DisassemblerInsn "ret" for 0x40030e>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000eb>, <DisassemblerInsn "mov" for 0x4000f2>, <DisassemblerInsn "mov" for 0x4000fa>, <DisassemblerInsn "mov" for 0x4000fc>, <DisassemblerInsn "add" for 0x400100>, <DisassemblerInsn "mov" for 0x400104>, <DisassemblerInsn "add" for 0x400109>, <DisassemblerInsn "mov" for 0x40010c>, <DisassemblerInsn "test" for 0x400110>, <DisassemblerInsn "je" for 0x400112>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002b2>, <DisassemblerInsn "mov" for 0x4002b7>, <DisassemblerInsn "jmp" for 0x4002be>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000ba>, <DisassemblerInsn "cmp" for 0x4000be>, <DisassemblerInsn "jge" for 0x4000c1>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002c0>, <DisassemblerInsn "mov" for 0x4002c5>, <DisassemblerInsn "mov" for 0x4002cd>, <DisassemblerInsn "mov" for 0x4002d5>, <DisassemblerInsn "mov" for 0x4002db>, <DisassemblerInsn "call" for 0x4002de>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c3>, <DisassemblerInsn "mov" for 0x4000c8>, <DisassemblerInsn "lea" for 0x4000cd>, <DisassemblerInsn "mov" for 0x4000d4>, <DisassemblerInsn "call" for 0x4000d6>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400296>, <DisassemblerInsn "mov" for 0x40029a>, <DisassemblerInsn "mov" for 0x40029f>, <DisassemblerInsn "lea" for 0x4002a4>, <DisassemblerInsn "mov" for 0x4002ab>, <DisassemblerInsn "call" for 0x4002ad>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400294>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400178>, <DisassemblerInsn "cmp" for 0x40017c>, <DisassemblerInsn "jle" for 0x40017f>]'}], 'cfg_block_detailed_info': [{'block_Idx': 21, 'blockInsts': ['<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0xb4], eax>', '<jl~~0x400300>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0xb8>', '<mov~~qword ptr [rsp + 0x78], rdi>', '<mov~~qword ptr [rsp + 0x80], rsi>', '<mov~~qword ptr [rsp + 0x88], rdx>', '<mov~~rax, qword ptr [rcx + 0x18]>', '<mov~~qword ptr [rsp + 0x90], rax>', '<mov~~rax, rcx>', '<add~~rax, 0x20>', '<mov~~qword ptr [rsp + 0x98], rax>', '<mov~~ecx, dword ptr [rcx + 0x20]>', '<mov~~dword ptr [rsp + 0xa4], ecx>', '<mov~~rax, qword ptr [rdi + 0x48]>', '<mov~~qword ptr [rsp + 0xa8], rax>', '<mov~~eax, 0xc1444e49>', '<cmp~~ecx, 4>', '<mov~~dword ptr [rsp + 0xb4], eax>', '<jl~~0x400300>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rsp + 0x34]>', '<mov~~rdx, qword ptr [rsp + 0x68]>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rdi, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rsp + 0x18], ecx>', '<add~~rsi, rdi>', '<mov~~qword ptr [rsp + 0x20], rsi>', '<mov~~eax, dword ptr [rax]>', '<add~~ecx, -1>', '<mov~~dword ptr [rsp + 0x1c], ecx>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdi, qword ptr [rdx]>', '<imul~~ecx, dword ptr [rdx + 0x40]>', '<mov~~dword ptr [rsp + 0xc], ecx>', '<movsxd~~rcx, ecx>', '<add~~rdi, rcx>', '<mov~~qword ptr [rsp + 0x10], rdi>', '<imul~~eax, eax, 3>', '<movsxd~~rdx, eax>', '<call~~0x500018>']}, {'block_Idx': 30, 'blockInsts': ['<jmp~~0x4002c0>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xb4]>', '<add~~rsp, 0xb8>', '<ret~~>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x18]>', '<mov~~ecx, dword ptr [rsp + 0x1c]>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<cmp~~edx, 1>', '<mov~~dword ptr [rsp + 0x34], ecx>', '<mov~~qword ptr [rsp + 0x38], rax>', '<jg~~0x4001e4>']}, {'block_Idx': 9, 'blockInsts': ['<jmp~~0x400116>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x64]>', '<mov~~rax, qword ptr [rsp + 0x78]>', '<mov~~rdx, rax>', '<add~~rdx, 0x94>', '<mov~~qword ptr [rsp + 0x40], rdx>', '<mov~~edx, dword ptr [rax + 0x94]>', '<mov~~dword ptr [rsp + 0x48], edx>', '<imul~~edx, edx, 3>', '<add~~edx, 3>', '<and~~edx, 0xfffffffc>', '<mov~~dword ptr [rsp + 0x4c], edx>', '<mov~~eax, dword ptr [rax + 0x98]>', '<mov~~dword ptr [rsp + 0x50], eax>', '<imul~~edx, eax>', '<mov~~eax, 0xc1444e49>', '<cmp~~ecx, edx>', '<mov~~dword ptr [rsp + 0xb4], eax>', '<jl~~0x400300>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rsp + 0x68]>', '<mov~~rdx, qword ptr [rsp + 0xa8]>', '<mov~~rsi, qword ptr [rsp + 0x58]>', '<mov~~r8d, dword ptr [rsp + 0x64]>', '<mov~~rcx, rdx>', '<add~~rcx, 8>', '<mov~~qword ptr [rdx + 8], rsi>', '<mov~~qword ptr [rdx + 0x18], rsi>', '<mov~~r8d, r8d>', '<add~~rsi, r8>', '<mov~~qword ptr [rdx + 0x10], rsi>', '<mov~~rsi, qword ptr [rax]>', '<mov~~edx, 8>', '<call~~0x500020>']}, {'block_Idx': 16, 'blockInsts': ['<jmp~~0x400296>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<sub~~eax, 1>', '<je~~0x400252>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~rcx, rax>', '<add~~rcx, 0x20>', '<mov~~qword ptr [rsp + 0x68], rcx>', '<mov~~rsi, qword ptr [rax + 0x20]>', '<call~~0x500008>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x58]>', '<mov~~ecx, dword ptr [rsp + 0x50]>', '<mov~~eax, dword ptr [rsp + 0x48]>', '<mov~~rdx, qword ptr [rsp + 0x68]>', '<mov~~edi, dword ptr [rsp + 0x4c]>', '<movsxd~~rdi, edi>', '<mov~~qword ptr [rsp + 0x28], rdi>', '<add~~ecx, -1>', '<mov~~dword ptr [rsp + 0x30], ecx>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdi, qword ptr [rdx]>', '<imul~~ecx, dword ptr [rdx + 0x40]>', '<movsxd~~rcx, ecx>', '<add~~rdi, rcx>', '<imul~~eax, eax, 3>', '<movsxd~~rdx, eax>', '<call~~0x500018>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x74]>', '<mov~~dword ptr [rsp + 0xb4], eax>', '<jmp~~0x400300>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x50]>', '<mov~~ecx, dword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<cmp~~edx, 1>', '<mov~~dword ptr [rsp + 0x34], ecx>', '<mov~~qword ptr [rsp + 0x38], rax>', '<je~~0x4002c0>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0xb4], eax>', '<mov~~eax, dword ptr [rsp + 0xb4]>', '<add~~rsp, 0xb8>', '<ret~~>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xa4]>', '<mov~~rdx, qword ptr [rsp + 0x90]>', '<mov~~eax, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0x54], eax>', '<add~~rdx, 4>', '<mov~~qword ptr [rsp + 0x58], rdx>', '<add~~ecx, -4>', '<mov~~dword ptr [rsp + 0x64], ecx>', '<test~~eax, eax>', '<je~~0x400128>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~eax, 0xc1444e49>', '<mov~~dword ptr [rsp + 0xb4], eax>', '<jmp~~0x400300>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~dword ptr [rsp + 0x74], eax>', '<cmp~~eax, 0>', '<jge~~0x4000eb>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x68]>', '<mov~~rdi, qword ptr [rsp + 0x80]>', '<mov~~rcx, qword ptr [rsp + 0x88]>', '<mov~~dword ptr [rcx], 1>', '<mov~~rsi, qword ptr [rax]>', '<call~~0x500028>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x25f]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x54]>', '<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x9f]>', '<mov~~al, 0>', '<call~~0x500010>']}, {'block_Idx': 23, 'blockInsts': ['<jmp~~0x4002c0>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x50]>', '<cmp~~eax, 0>', '<jle~~0x4002c0>']}], 'cfg_edge_info': [(16, 20), (27, 1), (12, 16), (29, 26), (4, 6), (23, 13), (21, 25), (0, 2), (5, 10), (22, 26), (14, 22), (11, 14), (6, 8), (15, 23), (22, 13), (4, 5), (26, 29), (12, 15), (8, 11), (0, 1), (2, 4), (11, 13), (29, 30), (8, 1), (20, 27), (30, 13), (9, 12), (10, 1), (13, 21), (6, 9), (21, 1)], 'cdg_edge_info': [(6, 12), (12, 1), (29, 26), (12, 16), (4, 6), (12, 13), (29, 29), (21, 25), (0, 2), (22, 26), (22, 29), (11, 14), (8, 21), (6, 8), (4, 5), (12, 15), (12, 21), (8, 11), (12, 27), (0, 1), (0, 4), (11, 22), (4, 1), (4, 10), (12, 23), (12, 20), (8, 1), (8, 13), (6, 9), (21, 1)], 'ddg_edge_info': [(6, 12), (6, 15), (29, 26), (21, 25), (14, 13), (0, 2), (22, 26), (5, 10), (8, 25), (14, 22), (0, 5), (5, 25), (27, 25), (0, 8), (2, 5), (2, 11), (2, 8), (2, 14), (10, 25), (0, 20), (2, 20), (2, 26), (6, 8), (6, 14), (6, 20), (26, 29), (6, 26), (20, 25), (8, 11), (2, 4), (8, 14), (0, 13), (8, 26), (15, 13), (2, 13), (26, 13), (0, 25), (2, 25), (13, 25), (6, 22), (4, 10), (20, 27), (14, 26), (0, 6), (0, 15), (2, 12), (2, 6), (8, 22), (2, 15), (13, 21)]}]}
{'aasc_decode_frame': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 129, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 130, 'instruction': 'addq\t$8, %rcx'}, {'instIndex': 136, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 137, 'instruction': 'movl\t$8, %edx'}, {'instIndex': 138, 'instruction': 'callq\tff_msrle_decode@PLT'}, {'instIndex': 139, 'instruction': 'jmp\t.LBB1_10'}, {'instIndex': 142, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 143, 'instruction': 'leaq\t.L.str.3(%rip), %rdx'}, {'instIndex': 144, 'instruction': 'movb\t$0, %al'}, {'instIndex': 145, 'instruction': 'callq\tav_log@PLT'}]}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7---b/libavcodec/bmp.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7---a/libavcodec/bmp.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7---b/libavcodec/msrle.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7---a/libavcodec/msrle.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7---b/libavcodec/msrledec.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7---a/libavcodec/msrledec.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7---b/libavcodec/tscc.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3496cec43304ac040d6d05f9d500a6f93cc049e7---a/libavcodec/tscc.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 18 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3ba416408aef99b4d7d92719c0a03dc2c9647025/patch_info.txt
{'1': {'before': 'a/avconv.c', 'after': 'b/avconv.c'}}
{'1': [{'before': '-964,6', 'after': '+964,8', 'function': 'static void flush_encoders'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3ba416408aef99b4d7d92719c0a03dc2c9647025---b/avconv.c
The case of compiler gcc with optimization no.
Patched source code file: avconv.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3ba416408aef99b4d7d92719c0a03dc2c9647025/gcc_after/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: avconv.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3ba416408aef99b4d7d92719c0a03dc2c9647025/gcc_after/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: avconv.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3ba416408aef99b4d7d92719c0a03dc2c9647025/gcc_after/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: avconv.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3ba416408aef99b4d7d92719c0a03dc2c9647025/gcc_after/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: avconv.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3ba416408aef99b4d7d92719c0a03dc2c9647025/gcc_after/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: avconv.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3ba416408aef99b4d7d92719c0a03dc2c9647025/gcc_after/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: avconv.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3ba416408aef99b4d7d92719c0a03dc2c9647025/clang_after/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: avconv.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3ba416408aef99b4d7d92719c0a03dc2c9647025/clang_after/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: avconv.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3ba416408aef99b4d7d92719c0a03dc2c9647025/clang_after/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: avconv.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3ba416408aef99b4d7d92719c0a03dc2c9647025/clang_after/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: avconv.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3ba416408aef99b4d7d92719c0a03dc2c9647025/clang_after/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: avconv.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3ba416408aef99b4d7d92719c0a03dc2c9647025/clang_after/Os: directory not exists.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3ba416408aef99b4d7d92719c0a03dc2c9647025---a/avconv.c
The case of compiler gcc with optimization no.
Patched source code file: avconv.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3ba416408aef99b4d7d92719c0a03dc2c9647025/gcc_before/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: avconv.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3ba416408aef99b4d7d92719c0a03dc2c9647025/gcc_before/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: avconv.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3ba416408aef99b4d7d92719c0a03dc2c9647025/gcc_before/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: avconv.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3ba416408aef99b4d7d92719c0a03dc2c9647025/gcc_before/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: avconv.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3ba416408aef99b4d7d92719c0a03dc2c9647025/gcc_before/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: avconv.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3ba416408aef99b4d7d92719c0a03dc2c9647025/gcc_before/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: avconv.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3ba416408aef99b4d7d92719c0a03dc2c9647025/clang_before/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: avconv.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3ba416408aef99b4d7d92719c0a03dc2c9647025/clang_before/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: avconv.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3ba416408aef99b4d7d92719c0a03dc2c9647025/clang_before/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: avconv.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3ba416408aef99b4d7d92719c0a03dc2c9647025/clang_before/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: avconv.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3ba416408aef99b4d7d92719c0a03dc2c9647025/clang_before/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: avconv.c
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/3ba416408aef99b4d7d92719c0a03dc2c9647025/clang_before/Os: directory not exists.
The analysis of 19 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/patch_info.txt
{'1': {'before': 'a/libavformat/smoothstreamingenc.c', 'after': 'b/libavformat/smoothstreamingenc.c'}}
{'1': [{'before': '-210,14', 'after': '+210,15', 'function': 'static int write_manifest'}, {'before': '-278,6', 'after': '+279,7', 'function': 'static int write_manifest'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd---b/libavformat/smoothstreamingenc.c
The case of compiler gcc with optimization no.
Patched source code file: smoothstreamingenc.c
Patched function: 1---static int write_manifest 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_after/no/smoothstreamingenc_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_after/no/smoothstreamingenc_gcc.s---write_manifest---after
function id: 39
function flag: True
There are 403 instructions for function: write_manifest in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '210', 'end': 224}, 'before': {'start': '210', 'end': 223}}}, {'modifyIndex': 2, 'line': {'after': {'start': '279', 'end': 285}, 'before': {'start': '278', 'end': 283}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'endbr64'}, {'instIndex': 1, 'instruction': 'subq\t$0x888, %rsp'}, {'instIndex': 2, 'instruction': 'movq\t%rdi, 8(%rsp)'}, {'instIndex': 3, 'instruction': 'movl\t%esi, 4(%rsp)'}, {'instIndex': 4, 'instruction': 'movq\t%fs:0x28, %rax'}, {'instIndex': 5, 'instruction': 'movq\t%rax, 0x878(%rsp)'}, {'instIndex': 6, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 7, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 8, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 9, 'instruction': 'movq\t%rax, 0x48(%rsp)'}, {'instIndex': 10, 'instruction': 'movl\t$0, 0x14(%rsp)'}, {'instIndex': 11, 'instruction': 'movl\t$0, 0x18(%rsp)'}, {'instIndex': 12, 'instruction': 'movl\t$0, 0x1c(%rsp)'}, {'instIndex': 13, 'instruction': 'movl\t$0, 0x20(%rsp)'}, {'instIndex': 14, 'instruction': 'movq\t$0, 0x40(%rsp)'}, {'instIndex': 15, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 16, 'instruction': 'leaq\t0x38(%rax), %rdx'}, {'instIndex': 17, 'instruction': 'leaq\t0x70(%rsp), %rax'}, {'instIndex': 18, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 19, 'instruction': 'leaq\t.LC5(%rip), %rdx'}, {'instIndex': 20, 'instruction': 'movl\t$0x400, %esi'}, {'instIndex': 21, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 22, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 23, 'instruction': 'call\tsnprintf@PLT'}, {'instIndex': 24, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'leaq\t0x38(%rax), %rdx'}, {'instIndex': 26, 'instruction': 'leaq\t0x470(%rsp), %rax'}, {'instIndex': 27, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 28, 'instruction': 'leaq\t.LC6(%rip), %rdx'}, {'instIndex': 29, 'instruction': 'movl\t$0x400, %esi'}, {'instIndex': 30, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 31, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 32, 'instruction': 'call\tsnprintf@PLT'}, {'instIndex': 33, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 34, 'instruction': 'leaq\t0x4b0(%rax), %rdx'}, {'instIndex': 35, 'instruction': 'leaq\t0x470(%rsp), %rsi'}, {'instIndex': 36, 'instruction': 'leaq\t0x38(%rsp), %rax'}, {'instIndex': 37, 'instruction': 'movl\t$0, %r8d'}, {'instIndex': 38, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 39, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 40, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 41, 'instruction': 'call\tavio_open2@PLT'}, {'instIndex': 42, 'instruction': 'movl\t%eax, 0x34(%rsp)'}, {'instIndex': 43, 'instruction': 'cmpl\t$0, 0x34(%rsp)'}, {'instIndex': 44, 'instruction': 'jns\t.L54'}, {'instIndex': 45, 'instruction': 'leaq\t0x470(%rsp), %rdx'}, {'instIndex': 46, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 47, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 48, 'instruction': 'leaq\t.LC7(%rip), %rdx'}, {'instIndex': 49, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 50, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 51, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 52, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 53, 'instruction': 'movl\t0x34(%rsp), %eax'}, {'instIndex': 54, 'instruction': 'jmp\t.L74'}, {'instIndex': 55, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 56, 'instruction': 'leaq\t.LC8(%rip), %rdx'}, {'instIndex': 57, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 58, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 59, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 60, 'instruction': 'call\tavio_printf@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 379, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 380, 'instruction': 'leaq\t.LC0x11(%rip), %rdx'}, {'instIndex': 381, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 382, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 383, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 384, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 385, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 386, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 387, 'instruction': 'call\tavio_flush@PLT'}, {'instIndex': 388, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 389, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 390, 'instruction': 'call\tavio_close@PLT'}, {'instIndex': 391, 'instruction': 'leaq\t0x70(%rsp), %rdx'}, {'instIndex': 392, 'instruction': 'leaq\t0x470(%rsp), %rax'}, {'instIndex': 393, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 394, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 395, 'instruction': 'call\trename@PLT'}, {'instIndex': 396, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 397, 'instruction': 'movq\t0x878(%rsp), %rdx'}, {'instIndex': 398, 'instruction': 'subq\t%fs:0x28, %rdx'}, {'instIndex': 399, 'instruction': 'je\t.L75'}, {'instIndex': 400, 'instruction': 'call\t__stack_chk_fail@PLT'}, {'instIndex': 401, 'instruction': 'addq\t$0x888, %rsp'}, {'instIndex': 402, 'instruction': 'ret'}]}]
Patched function: 1---static int write_manifest 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_after/no/smoothstreamingenc_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_after/no/smoothstreamingenc_gcc.s---write_manifest---after
function id: 39
function flag: True
There are 403 instructions for function: write_manifest in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '210', 'end': 224}, 'before': {'start': '210', 'end': 223}}}, {'modifyIndex': 2, 'line': {'after': {'start': '279', 'end': 285}, 'before': {'start': '278', 'end': 283}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'endbr64'}, {'instIndex': 1, 'instruction': 'subq\t$0x888, %rsp'}, {'instIndex': 2, 'instruction': 'movq\t%rdi, 8(%rsp)'}, {'instIndex': 3, 'instruction': 'movl\t%esi, 4(%rsp)'}, {'instIndex': 4, 'instruction': 'movq\t%fs:0x28, %rax'}, {'instIndex': 5, 'instruction': 'movq\t%rax, 0x878(%rsp)'}, {'instIndex': 6, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 7, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 8, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 9, 'instruction': 'movq\t%rax, 0x48(%rsp)'}, {'instIndex': 10, 'instruction': 'movl\t$0, 0x14(%rsp)'}, {'instIndex': 11, 'instruction': 'movl\t$0, 0x18(%rsp)'}, {'instIndex': 12, 'instruction': 'movl\t$0, 0x1c(%rsp)'}, {'instIndex': 13, 'instruction': 'movl\t$0, 0x20(%rsp)'}, {'instIndex': 14, 'instruction': 'movq\t$0, 0x40(%rsp)'}, {'instIndex': 15, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 16, 'instruction': 'leaq\t0x38(%rax), %rdx'}, {'instIndex': 17, 'instruction': 'leaq\t0x70(%rsp), %rax'}, {'instIndex': 18, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 19, 'instruction': 'leaq\t.LC5(%rip), %rdx'}, {'instIndex': 20, 'instruction': 'movl\t$0x400, %esi'}, {'instIndex': 21, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 22, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 23, 'instruction': 'call\tsnprintf@PLT'}, {'instIndex': 24, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'leaq\t0x38(%rax), %rdx'}, {'instIndex': 26, 'instruction': 'leaq\t0x470(%rsp), %rax'}, {'instIndex': 27, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 28, 'instruction': 'leaq\t.LC6(%rip), %rdx'}, {'instIndex': 29, 'instruction': 'movl\t$0x400, %esi'}, {'instIndex': 30, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 31, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 32, 'instruction': 'call\tsnprintf@PLT'}, {'instIndex': 33, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 34, 'instruction': 'leaq\t0x4b0(%rax), %rdx'}, {'instIndex': 35, 'instruction': 'leaq\t0x470(%rsp), %rsi'}, {'instIndex': 36, 'instruction': 'leaq\t0x38(%rsp), %rax'}, {'instIndex': 37, 'instruction': 'movl\t$0, %r8d'}, {'instIndex': 38, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 39, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 40, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 41, 'instruction': 'call\tavio_open2@PLT'}, {'instIndex': 42, 'instruction': 'movl\t%eax, 0x34(%rsp)'}, {'instIndex': 43, 'instruction': 'cmpl\t$0, 0x34(%rsp)'}, {'instIndex': 44, 'instruction': 'jns\t.L54'}, {'instIndex': 45, 'instruction': 'leaq\t0x470(%rsp), %rdx'}, {'instIndex': 46, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 47, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 48, 'instruction': 'leaq\t.LC7(%rip), %rdx'}, {'instIndex': 49, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 50, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 51, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 52, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 53, 'instruction': 'movl\t0x34(%rsp), %eax'}, {'instIndex': 54, 'instruction': 'jmp\t.L74'}, {'instIndex': 55, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 56, 'instruction': 'leaq\t.LC8(%rip), %rdx'}, {'instIndex': 57, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 58, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 59, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 60, 'instruction': 'call\tavio_printf@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 379, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 380, 'instruction': 'leaq\t.LC0x11(%rip), %rdx'}, {'instIndex': 381, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 382, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 383, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 384, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 385, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 386, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 387, 'instruction': 'call\tavio_flush@PLT'}, {'instIndex': 388, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 389, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 390, 'instruction': 'call\tavio_close@PLT'}, {'instIndex': 391, 'instruction': 'leaq\t0x70(%rsp), %rdx'}, {'instIndex': 392, 'instruction': 'leaq\t0x470(%rsp), %rax'}, {'instIndex': 393, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 394, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 395, 'instruction': 'call\trename@PLT'}, {'instIndex': 396, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 397, 'instruction': 'movq\t0x878(%rsp), %rdx'}, {'instIndex': 398, 'instruction': 'subq\t%fs:0x28, %rdx'}, {'instIndex': 399, 'instruction': 'je\t.L75'}, {'instIndex': 400, 'instruction': 'call\t__stack_chk_fail@PLT'}, {'instIndex': 401, 'instruction': 'addq\t$0x888, %rsp'}, {'instIndex': 402, 'instruction': 'ret'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_after/no/smoothstreamingenc.o
Binary file does not exist.
{'write_manifest': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'endbr64'}, {'instIndex': 1, 'instruction': 'subq\t$0x888, %rsp'}, {'instIndex': 2, 'instruction': 'movq\t%rdi, 8(%rsp)'}, {'instIndex': 3, 'instruction': 'movl\t%esi, 4(%rsp)'}, {'instIndex': 4, 'instruction': 'movq\t%fs:0x28, %rax'}, {'instIndex': 5, 'instruction': 'movq\t%rax, 0x878(%rsp)'}, {'instIndex': 6, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 7, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 8, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 9, 'instruction': 'movq\t%rax, 0x48(%rsp)'}, {'instIndex': 10, 'instruction': 'movl\t$0, 0x14(%rsp)'}, {'instIndex': 11, 'instruction': 'movl\t$0, 0x18(%rsp)'}, {'instIndex': 12, 'instruction': 'movl\t$0, 0x1c(%rsp)'}, {'instIndex': 13, 'instruction': 'movl\t$0, 0x20(%rsp)'}, {'instIndex': 14, 'instruction': 'movq\t$0, 0x40(%rsp)'}, {'instIndex': 15, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 16, 'instruction': 'leaq\t0x38(%rax), %rdx'}, {'instIndex': 17, 'instruction': 'leaq\t0x70(%rsp), %rax'}, {'instIndex': 18, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 19, 'instruction': 'leaq\t.LC5(%rip), %rdx'}, {'instIndex': 20, 'instruction': 'movl\t$0x400, %esi'}, {'instIndex': 21, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 22, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 23, 'instruction': 'call\tsnprintf@PLT'}, {'instIndex': 24, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'leaq\t0x38(%rax), %rdx'}, {'instIndex': 26, 'instruction': 'leaq\t0x470(%rsp), %rax'}, {'instIndex': 27, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 28, 'instruction': 'leaq\t.LC6(%rip), %rdx'}, {'instIndex': 29, 'instruction': 'movl\t$0x400, %esi'}, {'instIndex': 30, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 31, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 32, 'instruction': 'call\tsnprintf@PLT'}, {'instIndex': 33, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 34, 'instruction': 'leaq\t0x4b0(%rax), %rdx'}, {'instIndex': 35, 'instruction': 'leaq\t0x470(%rsp), %rsi'}, {'instIndex': 36, 'instruction': 'leaq\t0x38(%rsp), %rax'}, {'instIndex': 37, 'instruction': 'movl\t$0, %r8d'}, {'instIndex': 38, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 39, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 40, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 41, 'instruction': 'call\tavio_open2@PLT'}, {'instIndex': 42, 'instruction': 'movl\t%eax, 0x34(%rsp)'}, {'instIndex': 43, 'instruction': 'cmpl\t$0, 0x34(%rsp)'}, {'instIndex': 44, 'instruction': 'jns\t.L54'}, {'instIndex': 45, 'instruction': 'leaq\t0x470(%rsp), %rdx'}, {'instIndex': 46, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 47, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 48, 'instruction': 'leaq\t.LC7(%rip), %rdx'}, {'instIndex': 49, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 50, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 51, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 52, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 53, 'instruction': 'movl\t0x34(%rsp), %eax'}, {'instIndex': 54, 'instruction': 'jmp\t.L74'}, {'instIndex': 55, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 56, 'instruction': 'leaq\t.LC8(%rip), %rdx'}, {'instIndex': 57, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 58, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 59, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 60, 'instruction': 'call\tavio_printf@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 379, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 380, 'instruction': 'leaq\t.LC0x11(%rip), %rdx'}, {'instIndex': 381, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 382, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 383, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 384, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 385, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 386, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 387, 'instruction': 'call\tavio_flush@PLT'}, {'instIndex': 388, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 389, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 390, 'instruction': 'call\tavio_close@PLT'}, {'instIndex': 391, 'instruction': 'leaq\t0x70(%rsp), %rdx'}, {'instIndex': 392, 'instruction': 'leaq\t0x470(%rsp), %rax'}, {'instIndex': 393, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 394, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 395, 'instruction': 'call\trename@PLT'}, {'instIndex': 396, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 397, 'instruction': 'movq\t0x878(%rsp), %rdx'}, {'instIndex': 398, 'instruction': 'subq\t%fs:0x28, %rdx'}, {'instIndex': 399, 'instruction': 'je\t.L75'}, {'instIndex': 400, 'instruction': 'call\t__stack_chk_fail@PLT'}, {'instIndex': 401, 'instruction': 'addq\t$0x888, %rsp'}, {'instIndex': 402, 'instruction': 'ret'}]}]}
The case of compiler gcc with optimization O0.
Patched source code file: smoothstreamingenc.c
Patched function: 1---static int write_manifest 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_after/O0/smoothstreamingenc_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_after/O0/smoothstreamingenc_gcc.s---write_manifest---after
function id: 39
function flag: True
There are 403 instructions for function: write_manifest in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '210', 'end': 224}, 'before': {'start': '210', 'end': 223}}}, {'modifyIndex': 2, 'line': {'after': {'start': '279', 'end': 285}, 'before': {'start': '278', 'end': 283}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'endbr64'}, {'instIndex': 1, 'instruction': 'subq\t$0x888, %rsp'}, {'instIndex': 2, 'instruction': 'movq\t%rdi, 8(%rsp)'}, {'instIndex': 3, 'instruction': 'movl\t%esi, 4(%rsp)'}, {'instIndex': 4, 'instruction': 'movq\t%fs:0x28, %rax'}, {'instIndex': 5, 'instruction': 'movq\t%rax, 0x878(%rsp)'}, {'instIndex': 6, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 7, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 8, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 9, 'instruction': 'movq\t%rax, 0x48(%rsp)'}, {'instIndex': 10, 'instruction': 'movl\t$0, 0x14(%rsp)'}, {'instIndex': 11, 'instruction': 'movl\t$0, 0x18(%rsp)'}, {'instIndex': 12, 'instruction': 'movl\t$0, 0x1c(%rsp)'}, {'instIndex': 13, 'instruction': 'movl\t$0, 0x20(%rsp)'}, {'instIndex': 14, 'instruction': 'movq\t$0, 0x40(%rsp)'}, {'instIndex': 15, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 16, 'instruction': 'leaq\t0x38(%rax), %rdx'}, {'instIndex': 17, 'instruction': 'leaq\t0x70(%rsp), %rax'}, {'instIndex': 18, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 19, 'instruction': 'leaq\t.LC5(%rip), %rdx'}, {'instIndex': 20, 'instruction': 'movl\t$0x400, %esi'}, {'instIndex': 21, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 22, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 23, 'instruction': 'call\tsnprintf@PLT'}, {'instIndex': 24, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'leaq\t0x38(%rax), %rdx'}, {'instIndex': 26, 'instruction': 'leaq\t0x470(%rsp), %rax'}, {'instIndex': 27, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 28, 'instruction': 'leaq\t.LC6(%rip), %rdx'}, {'instIndex': 29, 'instruction': 'movl\t$0x400, %esi'}, {'instIndex': 30, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 31, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 32, 'instruction': 'call\tsnprintf@PLT'}, {'instIndex': 33, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 34, 'instruction': 'leaq\t0x4b0(%rax), %rdx'}, {'instIndex': 35, 'instruction': 'leaq\t0x470(%rsp), %rsi'}, {'instIndex': 36, 'instruction': 'leaq\t0x38(%rsp), %rax'}, {'instIndex': 37, 'instruction': 'movl\t$0, %r8d'}, {'instIndex': 38, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 39, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 40, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 41, 'instruction': 'call\tavio_open2@PLT'}, {'instIndex': 42, 'instruction': 'movl\t%eax, 0x34(%rsp)'}, {'instIndex': 43, 'instruction': 'cmpl\t$0, 0x34(%rsp)'}, {'instIndex': 44, 'instruction': 'jns\t.L54'}, {'instIndex': 45, 'instruction': 'leaq\t0x470(%rsp), %rdx'}, {'instIndex': 46, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 47, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 48, 'instruction': 'leaq\t.LC7(%rip), %rdx'}, {'instIndex': 49, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 50, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 51, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 52, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 53, 'instruction': 'movl\t0x34(%rsp), %eax'}, {'instIndex': 54, 'instruction': 'jmp\t.L74'}, {'instIndex': 55, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 56, 'instruction': 'leaq\t.LC8(%rip), %rdx'}, {'instIndex': 57, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 58, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 59, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 60, 'instruction': 'call\tavio_printf@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 379, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 380, 'instruction': 'leaq\t.LC0x11(%rip), %rdx'}, {'instIndex': 381, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 382, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 383, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 384, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 385, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 386, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 387, 'instruction': 'call\tavio_flush@PLT'}, {'instIndex': 388, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 389, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 390, 'instruction': 'call\tavio_close@PLT'}, {'instIndex': 391, 'instruction': 'leaq\t0x70(%rsp), %rdx'}, {'instIndex': 392, 'instruction': 'leaq\t0x470(%rsp), %rax'}, {'instIndex': 393, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 394, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 395, 'instruction': 'call\trename@PLT'}, {'instIndex': 396, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 397, 'instruction': 'movq\t0x878(%rsp), %rdx'}, {'instIndex': 398, 'instruction': 'subq\t%fs:0x28, %rdx'}, {'instIndex': 399, 'instruction': 'je\t.L75'}, {'instIndex': 400, 'instruction': 'call\t__stack_chk_fail@PLT'}, {'instIndex': 401, 'instruction': 'addq\t$0x888, %rsp'}, {'instIndex': 402, 'instruction': 'ret'}]}]
Patched function: 1---static int write_manifest 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_after/O0/smoothstreamingenc_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_after/O0/smoothstreamingenc_gcc.s---write_manifest---after
function id: 39
function flag: True
There are 403 instructions for function: write_manifest in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '210', 'end': 224}, 'before': {'start': '210', 'end': 223}}}, {'modifyIndex': 2, 'line': {'after': {'start': '279', 'end': 285}, 'before': {'start': '278', 'end': 283}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'endbr64'}, {'instIndex': 1, 'instruction': 'subq\t$0x888, %rsp'}, {'instIndex': 2, 'instruction': 'movq\t%rdi, 8(%rsp)'}, {'instIndex': 3, 'instruction': 'movl\t%esi, 4(%rsp)'}, {'instIndex': 4, 'instruction': 'movq\t%fs:0x28, %rax'}, {'instIndex': 5, 'instruction': 'movq\t%rax, 0x878(%rsp)'}, {'instIndex': 6, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 7, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 8, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 9, 'instruction': 'movq\t%rax, 0x48(%rsp)'}, {'instIndex': 10, 'instruction': 'movl\t$0, 0x14(%rsp)'}, {'instIndex': 11, 'instruction': 'movl\t$0, 0x18(%rsp)'}, {'instIndex': 12, 'instruction': 'movl\t$0, 0x1c(%rsp)'}, {'instIndex': 13, 'instruction': 'movl\t$0, 0x20(%rsp)'}, {'instIndex': 14, 'instruction': 'movq\t$0, 0x40(%rsp)'}, {'instIndex': 15, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 16, 'instruction': 'leaq\t0x38(%rax), %rdx'}, {'instIndex': 17, 'instruction': 'leaq\t0x70(%rsp), %rax'}, {'instIndex': 18, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 19, 'instruction': 'leaq\t.LC5(%rip), %rdx'}, {'instIndex': 20, 'instruction': 'movl\t$0x400, %esi'}, {'instIndex': 21, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 22, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 23, 'instruction': 'call\tsnprintf@PLT'}, {'instIndex': 24, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'leaq\t0x38(%rax), %rdx'}, {'instIndex': 26, 'instruction': 'leaq\t0x470(%rsp), %rax'}, {'instIndex': 27, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 28, 'instruction': 'leaq\t.LC6(%rip), %rdx'}, {'instIndex': 29, 'instruction': 'movl\t$0x400, %esi'}, {'instIndex': 30, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 31, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 32, 'instruction': 'call\tsnprintf@PLT'}, {'instIndex': 33, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 34, 'instruction': 'leaq\t0x4b0(%rax), %rdx'}, {'instIndex': 35, 'instruction': 'leaq\t0x470(%rsp), %rsi'}, {'instIndex': 36, 'instruction': 'leaq\t0x38(%rsp), %rax'}, {'instIndex': 37, 'instruction': 'movl\t$0, %r8d'}, {'instIndex': 38, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 39, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 40, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 41, 'instruction': 'call\tavio_open2@PLT'}, {'instIndex': 42, 'instruction': 'movl\t%eax, 0x34(%rsp)'}, {'instIndex': 43, 'instruction': 'cmpl\t$0, 0x34(%rsp)'}, {'instIndex': 44, 'instruction': 'jns\t.L54'}, {'instIndex': 45, 'instruction': 'leaq\t0x470(%rsp), %rdx'}, {'instIndex': 46, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 47, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 48, 'instruction': 'leaq\t.LC7(%rip), %rdx'}, {'instIndex': 49, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 50, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 51, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 52, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 53, 'instruction': 'movl\t0x34(%rsp), %eax'}, {'instIndex': 54, 'instruction': 'jmp\t.L74'}, {'instIndex': 55, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 56, 'instruction': 'leaq\t.LC8(%rip), %rdx'}, {'instIndex': 57, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 58, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 59, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 60, 'instruction': 'call\tavio_printf@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 379, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 380, 'instruction': 'leaq\t.LC0x11(%rip), %rdx'}, {'instIndex': 381, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 382, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 383, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 384, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 385, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 386, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 387, 'instruction': 'call\tavio_flush@PLT'}, {'instIndex': 388, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 389, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 390, 'instruction': 'call\tavio_close@PLT'}, {'instIndex': 391, 'instruction': 'leaq\t0x70(%rsp), %rdx'}, {'instIndex': 392, 'instruction': 'leaq\t0x470(%rsp), %rax'}, {'instIndex': 393, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 394, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 395, 'instruction': 'call\trename@PLT'}, {'instIndex': 396, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 397, 'instruction': 'movq\t0x878(%rsp), %rdx'}, {'instIndex': 398, 'instruction': 'subq\t%fs:0x28, %rdx'}, {'instIndex': 399, 'instruction': 'je\t.L75'}, {'instIndex': 400, 'instruction': 'call\t__stack_chk_fail@PLT'}, {'instIndex': 401, 'instruction': 'addq\t$0x888, %rsp'}, {'instIndex': 402, 'instruction': 'ret'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_after/O0/smoothstreamingenc.o
Binary file does not exist.
{'write_manifest': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'endbr64'}, {'instIndex': 1, 'instruction': 'subq\t$0x888, %rsp'}, {'instIndex': 2, 'instruction': 'movq\t%rdi, 8(%rsp)'}, {'instIndex': 3, 'instruction': 'movl\t%esi, 4(%rsp)'}, {'instIndex': 4, 'instruction': 'movq\t%fs:0x28, %rax'}, {'instIndex': 5, 'instruction': 'movq\t%rax, 0x878(%rsp)'}, {'instIndex': 6, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 7, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 8, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 9, 'instruction': 'movq\t%rax, 0x48(%rsp)'}, {'instIndex': 10, 'instruction': 'movl\t$0, 0x14(%rsp)'}, {'instIndex': 11, 'instruction': 'movl\t$0, 0x18(%rsp)'}, {'instIndex': 12, 'instruction': 'movl\t$0, 0x1c(%rsp)'}, {'instIndex': 13, 'instruction': 'movl\t$0, 0x20(%rsp)'}, {'instIndex': 14, 'instruction': 'movq\t$0, 0x40(%rsp)'}, {'instIndex': 15, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 16, 'instruction': 'leaq\t0x38(%rax), %rdx'}, {'instIndex': 17, 'instruction': 'leaq\t0x70(%rsp), %rax'}, {'instIndex': 18, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 19, 'instruction': 'leaq\t.LC5(%rip), %rdx'}, {'instIndex': 20, 'instruction': 'movl\t$0x400, %esi'}, {'instIndex': 21, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 22, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 23, 'instruction': 'call\tsnprintf@PLT'}, {'instIndex': 24, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'leaq\t0x38(%rax), %rdx'}, {'instIndex': 26, 'instruction': 'leaq\t0x470(%rsp), %rax'}, {'instIndex': 27, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 28, 'instruction': 'leaq\t.LC6(%rip), %rdx'}, {'instIndex': 29, 'instruction': 'movl\t$0x400, %esi'}, {'instIndex': 30, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 31, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 32, 'instruction': 'call\tsnprintf@PLT'}, {'instIndex': 33, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 34, 'instruction': 'leaq\t0x4b0(%rax), %rdx'}, {'instIndex': 35, 'instruction': 'leaq\t0x470(%rsp), %rsi'}, {'instIndex': 36, 'instruction': 'leaq\t0x38(%rsp), %rax'}, {'instIndex': 37, 'instruction': 'movl\t$0, %r8d'}, {'instIndex': 38, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 39, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 40, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 41, 'instruction': 'call\tavio_open2@PLT'}, {'instIndex': 42, 'instruction': 'movl\t%eax, 0x34(%rsp)'}, {'instIndex': 43, 'instruction': 'cmpl\t$0, 0x34(%rsp)'}, {'instIndex': 44, 'instruction': 'jns\t.L54'}, {'instIndex': 45, 'instruction': 'leaq\t0x470(%rsp), %rdx'}, {'instIndex': 46, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 47, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 48, 'instruction': 'leaq\t.LC7(%rip), %rdx'}, {'instIndex': 49, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 50, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 51, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 52, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 53, 'instruction': 'movl\t0x34(%rsp), %eax'}, {'instIndex': 54, 'instruction': 'jmp\t.L74'}, {'instIndex': 55, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 56, 'instruction': 'leaq\t.LC8(%rip), %rdx'}, {'instIndex': 57, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 58, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 59, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 60, 'instruction': 'call\tavio_printf@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 379, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 380, 'instruction': 'leaq\t.LC0x11(%rip), %rdx'}, {'instIndex': 381, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 382, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 383, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 384, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 385, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 386, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 387, 'instruction': 'call\tavio_flush@PLT'}, {'instIndex': 388, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 389, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 390, 'instruction': 'call\tavio_close@PLT'}, {'instIndex': 391, 'instruction': 'leaq\t0x70(%rsp), %rdx'}, {'instIndex': 392, 'instruction': 'leaq\t0x470(%rsp), %rax'}, {'instIndex': 393, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 394, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 395, 'instruction': 'call\trename@PLT'}, {'instIndex': 396, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 397, 'instruction': 'movq\t0x878(%rsp), %rdx'}, {'instIndex': 398, 'instruction': 'subq\t%fs:0x28, %rdx'}, {'instIndex': 399, 'instruction': 'je\t.L75'}, {'instIndex': 400, 'instruction': 'call\t__stack_chk_fail@PLT'}, {'instIndex': 401, 'instruction': 'addq\t$0x888, %rsp'}, {'instIndex': 402, 'instruction': 'ret'}]}]}
The case of compiler gcc with optimization O1.
Patched source code file: smoothstreamingenc.c
Patched function: 1---static int write_manifest 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_after/O1/smoothstreamingenc_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_after/O1/smoothstreamingenc_gcc.s---write_manifest---after
function id: 18
function flag: True
There are 1318 instructions for function: write_manifest in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '210', 'end': 224}, 'before': {'start': '210', 'end': 223}}}, {'modifyIndex': 2, 'line': {'after': {'start': '279', 'end': 285}, 'before': {'start': '278', 'end': 283}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%r15'}, {'instIndex': 1, 'instruction': 'pushq\t%r14'}, {'instIndex': 2, 'instruction': 'pushq\t%r13'}, {'instIndex': 3, 'instruction': 'pushq\t%r12'}, {'instIndex': 4, 'instruction': 'pushq\t%rbp'}, {'instIndex': 5, 'instruction': 'pushq\t%rbx'}, {'instIndex': 6, 'instruction': 'subq\t$0x838, %rsp'}, {'instIndex': 7, 'instruction': 'movq\t%rdi, %rbx'}, {'instIndex': 8, 'instruction': 'movl\t%esi, 12(%rsp)'}, {'instIndex': 9, 'instruction': 'movq\t%fs:0x28, %rax'}, {'instIndex': 10, 'instruction': 'movq\t%rax, 0x828(%rsp)'}, {'instIndex': 11, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 12, 'instruction': 'movq\t0x18(%rdi), %r12'}, {'instIndex': 13, 'instruction': 'leaq\t0x38(%rdi), %rbp'}, {'instIndex': 30, 'instruction': 'leaq\t0x4b0(%rbx), %rcx'}, {'instIndex': 31, 'instruction': 'leaq\t0x18(%rsp), %rdi'}, {'instIndex': 32, 'instruction': 'movl\t$0, %r8d'}, {'instIndex': 33, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 34, 'instruction': 'movq\t%r13, %rsi'}, {'instIndex': 35, 'instruction': 'call\tavio_open2@PLT'}, {'instIndex': 36, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 37, 'instruction': 'js\t.L50'}, {'instIndex': 38, 'instruction': 'leaq\t.LC5(%rip), %rsi'}, {'instIndex': 39, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 40, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 41, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 50, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 51, 'instruction': 'movl\t$0, %r13d'}, {'instIndex': 52, 'instruction': 'movl\t$0, %ebp'}, {'instIndex': 53, 'instruction': 'movl\t$0, 8(%rsp)'}, {'instIndex': 54, 'instruction': 'movl\t$0, %r14d'}, {'instIndex': 55, 'instruction': 'jmp\t.L22'}, {'instIndex': 56, 'instruction': 'movl\t%eax, %ebp'}, {'instIndex': 57, 'instruction': 'movq\t%r13, %rcx'}, {'instIndex': 58, 'instruction': 'leaq\t.LC4(%rip), %rdx'}, {'instIndex': 59, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 60, 'instruction': 'movq\t%rbx, %rdi'}, {'instIndex': 61, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 62, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 63, 'instruction': 'jmp\t.L15'}, {'instIndex': 85, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 86, 'instruction': 'movl\t$0, %r13d'}, {'instIndex': 87, 'instruction': 'movl\t$0, %ebp'}, {'instIndex': 88, 'instruction': 'movl\t$0, 8(%rsp)'}, {'instIndex': 89, 'instruction': 'movl\t$0, %r14d'}, {'instIndex': 333, 'instruction': 'call\tavio_seek@PLT'}, {'instIndex': 334, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 335, 'instruction': 'movl\t$0, %esi'}, {'instIndex': 336, 'instruction': 'movq\t0x48(%rsp), %rdi'}, {'instIndex': 345, 'instruction': 'movl\t%eax, %r13d'}, {'instIndex': 346, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 347, 'instruction': 'movl\t$0, %esi'}, {'instIndex': 348, 'instruction': 'movq\t0x48(%rsp), %rdi'}, {'instIndex': 349, 'instruction': 'call\tavio_seek@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 233, 'instruction': 'leaq\t.LC13(%rip), %rsi'}, {'instIndex': 234, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 235, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 236, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 237, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 238, 'instruction': 'call\tavio_flush@PLT'}, {'instIndex': 239, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 240, 'instruction': 'call\tavio_close@PLT'}, {'instIndex': 241, 'instruction': 'leaq\t0x20(%rsp), %rsi'}, {'instIndex': 242, 'instruction': 'leaq\t0x420(%rsp), %rdi'}, {'instIndex': 243, 'instruction': 'call\trename@PLT'}, {'instIndex': 244, 'instruction': 'movl\t$0, %ebp'}, {'instIndex': 245, 'instruction': 'movq\t0x828(%rsp), %rax'}, {'instIndex': 246, 'instruction': 'subq\t%fs:0x28, %rax'}, {'instIndex': 247, 'instruction': 'jne\t.L53'}, {'instIndex': 248, 'instruction': 'movl\t%ebp, %eax'}, {'instIndex': 249, 'instruction': 'addq\t$0x838, %rsp'}, {'instIndex': 250, 'instruction': 'popq\t%rbx'}, {'instIndex': 251, 'instruction': 'popq\t%rbp'}, {'instIndex': 252, 'instruction': 'popq\t%r12'}, {'instIndex': 253, 'instruction': 'popq\t%r13'}, {'instIndex': 254, 'instruction': 'popq\t%r14'}, {'instIndex': 255, 'instruction': 'popq\t%r15'}, {'instIndex': 256, 'instruction': 'ret'}, {'instIndex': 276, 'instruction': 'call\t__stack_chk_fail@PLT'}]}]
Patched function: 1---static int write_manifest 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_after/O1/smoothstreamingenc_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_after/O1/smoothstreamingenc_gcc.s---write_manifest---after
function id: 18
function flag: True
There are 1318 instructions for function: write_manifest in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '210', 'end': 224}, 'before': {'start': '210', 'end': 223}}}, {'modifyIndex': 2, 'line': {'after': {'start': '279', 'end': 285}, 'before': {'start': '278', 'end': 283}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%r15'}, {'instIndex': 1, 'instruction': 'pushq\t%r14'}, {'instIndex': 2, 'instruction': 'pushq\t%r13'}, {'instIndex': 3, 'instruction': 'pushq\t%r12'}, {'instIndex': 4, 'instruction': 'pushq\t%rbp'}, {'instIndex': 5, 'instruction': 'pushq\t%rbx'}, {'instIndex': 6, 'instruction': 'subq\t$0x838, %rsp'}, {'instIndex': 7, 'instruction': 'movq\t%rdi, %rbx'}, {'instIndex': 8, 'instruction': 'movl\t%esi, 12(%rsp)'}, {'instIndex': 9, 'instruction': 'movq\t%fs:0x28, %rax'}, {'instIndex': 10, 'instruction': 'movq\t%rax, 0x828(%rsp)'}, {'instIndex': 11, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 12, 'instruction': 'movq\t0x18(%rdi), %r12'}, {'instIndex': 13, 'instruction': 'leaq\t0x38(%rdi), %rbp'}, {'instIndex': 30, 'instruction': 'leaq\t0x4b0(%rbx), %rcx'}, {'instIndex': 31, 'instruction': 'leaq\t0x18(%rsp), %rdi'}, {'instIndex': 32, 'instruction': 'movl\t$0, %r8d'}, {'instIndex': 33, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 34, 'instruction': 'movq\t%r13, %rsi'}, {'instIndex': 35, 'instruction': 'call\tavio_open2@PLT'}, {'instIndex': 36, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 37, 'instruction': 'js\t.L50'}, {'instIndex': 38, 'instruction': 'leaq\t.LC5(%rip), %rsi'}, {'instIndex': 39, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 40, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 41, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 50, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 51, 'instruction': 'movl\t$0, %r13d'}, {'instIndex': 52, 'instruction': 'movl\t$0, %ebp'}, {'instIndex': 53, 'instruction': 'movl\t$0, 8(%rsp)'}, {'instIndex': 54, 'instruction': 'movl\t$0, %r14d'}, {'instIndex': 55, 'instruction': 'jmp\t.L22'}, {'instIndex': 56, 'instruction': 'movl\t%eax, %ebp'}, {'instIndex': 57, 'instruction': 'movq\t%r13, %rcx'}, {'instIndex': 58, 'instruction': 'leaq\t.LC4(%rip), %rdx'}, {'instIndex': 59, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 60, 'instruction': 'movq\t%rbx, %rdi'}, {'instIndex': 61, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 62, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 63, 'instruction': 'jmp\t.L15'}, {'instIndex': 85, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 86, 'instruction': 'movl\t$0, %r13d'}, {'instIndex': 87, 'instruction': 'movl\t$0, %ebp'}, {'instIndex': 88, 'instruction': 'movl\t$0, 8(%rsp)'}, {'instIndex': 89, 'instruction': 'movl\t$0, %r14d'}, {'instIndex': 333, 'instruction': 'call\tavio_seek@PLT'}, {'instIndex': 334, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 335, 'instruction': 'movl\t$0, %esi'}, {'instIndex': 336, 'instruction': 'movq\t0x48(%rsp), %rdi'}, {'instIndex': 345, 'instruction': 'movl\t%eax, %r13d'}, {'instIndex': 346, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 347, 'instruction': 'movl\t$0, %esi'}, {'instIndex': 348, 'instruction': 'movq\t0x48(%rsp), %rdi'}, {'instIndex': 349, 'instruction': 'call\tavio_seek@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 233, 'instruction': 'leaq\t.LC13(%rip), %rsi'}, {'instIndex': 234, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 235, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 236, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 237, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 238, 'instruction': 'call\tavio_flush@PLT'}, {'instIndex': 239, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 240, 'instruction': 'call\tavio_close@PLT'}, {'instIndex': 241, 'instruction': 'leaq\t0x20(%rsp), %rsi'}, {'instIndex': 242, 'instruction': 'leaq\t0x420(%rsp), %rdi'}, {'instIndex': 243, 'instruction': 'call\trename@PLT'}, {'instIndex': 244, 'instruction': 'movl\t$0, %ebp'}, {'instIndex': 245, 'instruction': 'movq\t0x828(%rsp), %rax'}, {'instIndex': 246, 'instruction': 'subq\t%fs:0x28, %rax'}, {'instIndex': 247, 'instruction': 'jne\t.L53'}, {'instIndex': 248, 'instruction': 'movl\t%ebp, %eax'}, {'instIndex': 249, 'instruction': 'addq\t$0x838, %rsp'}, {'instIndex': 250, 'instruction': 'popq\t%rbx'}, {'instIndex': 251, 'instruction': 'popq\t%rbp'}, {'instIndex': 252, 'instruction': 'popq\t%r12'}, {'instIndex': 253, 'instruction': 'popq\t%r13'}, {'instIndex': 254, 'instruction': 'popq\t%r14'}, {'instIndex': 255, 'instruction': 'popq\t%r15'}, {'instIndex': 256, 'instruction': 'ret'}, {'instIndex': 276, 'instruction': 'call\t__stack_chk_fail@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_after/O1/smoothstreamingenc.o
Binary file does not exist.
{'write_manifest': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%r15'}, {'instIndex': 1, 'instruction': 'pushq\t%r14'}, {'instIndex': 2, 'instruction': 'pushq\t%r13'}, {'instIndex': 3, 'instruction': 'pushq\t%r12'}, {'instIndex': 4, 'instruction': 'pushq\t%rbp'}, {'instIndex': 5, 'instruction': 'pushq\t%rbx'}, {'instIndex': 6, 'instruction': 'subq\t$0x838, %rsp'}, {'instIndex': 7, 'instruction': 'movq\t%rdi, %rbx'}, {'instIndex': 8, 'instruction': 'movl\t%esi, 12(%rsp)'}, {'instIndex': 9, 'instruction': 'movq\t%fs:0x28, %rax'}, {'instIndex': 10, 'instruction': 'movq\t%rax, 0x828(%rsp)'}, {'instIndex': 11, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 12, 'instruction': 'movq\t0x18(%rdi), %r12'}, {'instIndex': 13, 'instruction': 'leaq\t0x38(%rdi), %rbp'}, {'instIndex': 30, 'instruction': 'leaq\t0x4b0(%rbx), %rcx'}, {'instIndex': 31, 'instruction': 'leaq\t0x18(%rsp), %rdi'}, {'instIndex': 32, 'instruction': 'movl\t$0, %r8d'}, {'instIndex': 33, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 34, 'instruction': 'movq\t%r13, %rsi'}, {'instIndex': 35, 'instruction': 'call\tavio_open2@PLT'}, {'instIndex': 36, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 37, 'instruction': 'js\t.L50'}, {'instIndex': 38, 'instruction': 'leaq\t.LC5(%rip), %rsi'}, {'instIndex': 39, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 40, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 41, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 50, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 51, 'instruction': 'movl\t$0, %r13d'}, {'instIndex': 52, 'instruction': 'movl\t$0, %ebp'}, {'instIndex': 53, 'instruction': 'movl\t$0, 8(%rsp)'}, {'instIndex': 54, 'instruction': 'movl\t$0, %r14d'}, {'instIndex': 55, 'instruction': 'jmp\t.L22'}, {'instIndex': 56, 'instruction': 'movl\t%eax, %ebp'}, {'instIndex': 57, 'instruction': 'movq\t%r13, %rcx'}, {'instIndex': 58, 'instruction': 'leaq\t.LC4(%rip), %rdx'}, {'instIndex': 59, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 60, 'instruction': 'movq\t%rbx, %rdi'}, {'instIndex': 61, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 62, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 63, 'instruction': 'jmp\t.L15'}, {'instIndex': 85, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 86, 'instruction': 'movl\t$0, %r13d'}, {'instIndex': 87, 'instruction': 'movl\t$0, %ebp'}, {'instIndex': 88, 'instruction': 'movl\t$0, 8(%rsp)'}, {'instIndex': 89, 'instruction': 'movl\t$0, %r14d'}, {'instIndex': 333, 'instruction': 'call\tavio_seek@PLT'}, {'instIndex': 334, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 335, 'instruction': 'movl\t$0, %esi'}, {'instIndex': 336, 'instruction': 'movq\t0x48(%rsp), %rdi'}, {'instIndex': 345, 'instruction': 'movl\t%eax, %r13d'}, {'instIndex': 346, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 347, 'instruction': 'movl\t$0, %esi'}, {'instIndex': 348, 'instruction': 'movq\t0x48(%rsp), %rdi'}, {'instIndex': 349, 'instruction': 'call\tavio_seek@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 233, 'instruction': 'leaq\t.LC13(%rip), %rsi'}, {'instIndex': 234, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 235, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 236, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 237, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 238, 'instruction': 'call\tavio_flush@PLT'}, {'instIndex': 239, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 240, 'instruction': 'call\tavio_close@PLT'}, {'instIndex': 241, 'instruction': 'leaq\t0x20(%rsp), %rsi'}, {'instIndex': 242, 'instruction': 'leaq\t0x420(%rsp), %rdi'}, {'instIndex': 243, 'instruction': 'call\trename@PLT'}, {'instIndex': 244, 'instruction': 'movl\t$0, %ebp'}, {'instIndex': 245, 'instruction': 'movq\t0x828(%rsp), %rax'}, {'instIndex': 246, 'instruction': 'subq\t%fs:0x28, %rax'}, {'instIndex': 247, 'instruction': 'jne\t.L53'}, {'instIndex': 248, 'instruction': 'movl\t%ebp, %eax'}, {'instIndex': 249, 'instruction': 'addq\t$0x838, %rsp'}, {'instIndex': 250, 'instruction': 'popq\t%rbx'}, {'instIndex': 251, 'instruction': 'popq\t%rbp'}, {'instIndex': 252, 'instruction': 'popq\t%r12'}, {'instIndex': 253, 'instruction': 'popq\t%r13'}, {'instIndex': 254, 'instruction': 'popq\t%r14'}, {'instIndex': 255, 'instruction': 'popq\t%r15'}, {'instIndex': 256, 'instruction': 'ret'}, {'instIndex': 276, 'instruction': 'call\t__stack_chk_fail@PLT'}]}]}
The case of compiler gcc with optimization O2.
Patched source code file: smoothstreamingenc.c
Patched function: 1---static int write_manifest 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_after/O2/smoothstreamingenc_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_after/O2/smoothstreamingenc_gcc.s---write_manifest---after
function id: 21
function flag: True
There are 1404 instructions for function: write_manifest in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '210', 'end': 224}, 'before': {'start': '210', 'end': 223}}}, {'modifyIndex': 2, 'line': {'after': {'start': '279', 'end': 285}, 'before': {'start': '278', 'end': 283}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%r15'}, {'instIndex': 4, 'instruction': 'pushq\t%r14'}, {'instIndex': 5, 'instruction': 'pushq\t%r13'}, {'instIndex': 6, 'instruction': 'pushq\t%r12'}, {'instIndex': 7, 'instruction': 'pushq\t%rbp'}, {'instIndex': 8, 'instruction': 'movq\t%rdi, %rbp'}, {'instIndex': 9, 'instruction': 'pushq\t%rbx'}, {'instIndex': 10, 'instruction': 'leaq\t0x38(%rdi), %rbx'}, {'instIndex': 12, 'instruction': 'subq\t$0x848, %rsp'}, {'instIndex': 13, 'instruction': 'movq\t0x18(%rdi), %r12'}, {'instIndex': 14, 'instruction': 'movl\t%esi, 0x10(%rsp)'}, {'instIndex': 17, 'instruction': 'movq\t%fs:0x28, %rax'}, {'instIndex': 18, 'instruction': 'movq\t%rax, 0x838(%rsp)'}, {'instIndex': 19, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 33, 'instruction': 'xorl\t%r8d, %r8d'}, {'instIndex': 34, 'instruction': 'leaq\t0x28(%rsp), %rdi'}, {'instIndex': 35, 'instruction': 'movq\t%r14, %rsi'}, {'instIndex': 36, 'instruction': 'leaq\t0x4b0(%rbp), %rcx'}, {'instIndex': 37, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 38, 'instruction': 'call\tavio_open2@PLT'}, {'instIndex': 39, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 40, 'instruction': 'js\t.L58'}, {'instIndex': 41, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 42, 'instruction': 'leaq\t.LC5(%rip), %rsi'}, {'instIndex': 43, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 44, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 51, 'instruction': 'xorl\t%r11d, %r11d'}, {'instIndex': 52, 'instruction': 'xorl\t%r15d, %r15d'}, {'instIndex': 53, 'instruction': 'xorl\t%r8d, %r8d'}, {'instIndex': 54, 'instruction': 'xorl\t%r13d, %r13d'}, {'instIndex': 55, 'instruction': 'leaq\t8(%rsi), %rax'}, {'instIndex': 56, 'instruction': 'leaq\t0x8460(%rbx), %rdx'}, {'instIndex': 57, 'instruction': 'xorl\t%ebx, %ebx'}, {'instIndex': 58, 'instruction': 'leaq\t(%rax,%rcx,8), %rdi'}, {'instIndex': 59, 'instruction': 'jmp\t.L28'}, {'instIndex': 149, 'instruction': 'movq\t%r14, %rcx'}, {'instIndex': 150, 'instruction': 'leaq\t.LC4(%rip), %rdx'}, {'instIndex': 151, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 152, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 153, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 154, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 302, 'instruction': 'xorl\t%r11d, %r11d'}, {'instIndex': 303, 'instruction': 'xorl\t%r15d, %r15d'}, {'instIndex': 304, 'instruction': 'xorl\t%r8d, %r8d'}, {'instIndex': 305, 'instruction': 'xorl\t%r13d, %r13d'}, {'instIndex': 306, 'instruction': 'xorl\t%ebx, %ebx'}, {'instIndex': 307, 'instruction': 'jmp\t.L24'}, {'instIndex': 1217, 'instruction': 'movq\t%r13, 0x10(%rsp)'}, {'instIndex': 1218, 'instruction': 'jmp\t.L204'}, {'instIndex': 1219, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 1220, 'instruction': 'movq\t%r13, %rsi'}, {'instIndex': 1228, 'instruction': 'movq\t0x68(%rsp), %rdi'}, {'instIndex': 1229, 'instruction': 'call\tavio_rb32@PLT'}, {'instIndex': 1230, 'instruction': 'movq\t0x68(%rsp), %rdi'}, {'instIndex': 1232, 'instruction': 'call\tavio_rl32@PLT'}, {'instIndex': 1233, 'instruction': 'movq\t0x68(%rsp), %rdi'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 125, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 126, 'instruction': 'leaq\t.LC13(%rip), %rsi'}, {'instIndex': 127, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 128, 'instruction': 'xorl\t%r13d, %r13d'}, {'instIndex': 129, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 130, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 131, 'instruction': 'call\tavio_flush@PLT'}, {'instIndex': 132, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 133, 'instruction': 'call\tavio_close@PLT'}, {'instIndex': 134, 'instruction': 'movq\t8(%rsp), %rsi'}, {'instIndex': 135, 'instruction': 'movq\t%r14, %rdi'}, {'instIndex': 136, 'instruction': 'call\trename@PLT'}, {'instIndex': 137, 'instruction': 'jmp\t.L21'}, {'instIndex': 155, 'instruction': 'movq\t0x838(%rsp), %rax'}, {'instIndex': 156, 'instruction': 'subq\t%fs:0x28, %rax'}, {'instIndex': 157, 'instruction': 'jne\t.L64'}, {'instIndex': 158, 'instruction': 'addq\t$0x848, %rsp'}, {'instIndex': 159, 'instruction': 'movl\t%r13d, %eax'}, {'instIndex': 160, 'instruction': 'popq\t%rbx'}, {'instIndex': 161, 'instruction': 'popq\t%rbp'}, {'instIndex': 162, 'instruction': 'popq\t%r12'}, {'instIndex': 163, 'instruction': 'popq\t%r13'}, {'instIndex': 164, 'instruction': 'popq\t%r14'}, {'instIndex': 165, 'instruction': 'popq\t%r15'}, {'instIndex': 166, 'instruction': 'ret'}, {'instIndex': 312, 'instruction': 'call\t__stack_chk_fail@PLT'}]}]
Patched function: 1---static int write_manifest 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_after/O2/smoothstreamingenc_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_after/O2/smoothstreamingenc_gcc.s---write_manifest---after
function id: 21
function flag: True
There are 1404 instructions for function: write_manifest in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '210', 'end': 224}, 'before': {'start': '210', 'end': 223}}}, {'modifyIndex': 2, 'line': {'after': {'start': '279', 'end': 285}, 'before': {'start': '278', 'end': 283}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%r15'}, {'instIndex': 4, 'instruction': 'pushq\t%r14'}, {'instIndex': 5, 'instruction': 'pushq\t%r13'}, {'instIndex': 6, 'instruction': 'pushq\t%r12'}, {'instIndex': 7, 'instruction': 'pushq\t%rbp'}, {'instIndex': 8, 'instruction': 'movq\t%rdi, %rbp'}, {'instIndex': 9, 'instruction': 'pushq\t%rbx'}, {'instIndex': 10, 'instruction': 'leaq\t0x38(%rdi), %rbx'}, {'instIndex': 12, 'instruction': 'subq\t$0x848, %rsp'}, {'instIndex': 13, 'instruction': 'movq\t0x18(%rdi), %r12'}, {'instIndex': 14, 'instruction': 'movl\t%esi, 0x10(%rsp)'}, {'instIndex': 17, 'instruction': 'movq\t%fs:0x28, %rax'}, {'instIndex': 18, 'instruction': 'movq\t%rax, 0x838(%rsp)'}, {'instIndex': 19, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 33, 'instruction': 'xorl\t%r8d, %r8d'}, {'instIndex': 34, 'instruction': 'leaq\t0x28(%rsp), %rdi'}, {'instIndex': 35, 'instruction': 'movq\t%r14, %rsi'}, {'instIndex': 36, 'instruction': 'leaq\t0x4b0(%rbp), %rcx'}, {'instIndex': 37, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 38, 'instruction': 'call\tavio_open2@PLT'}, {'instIndex': 39, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 40, 'instruction': 'js\t.L58'}, {'instIndex': 41, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 42, 'instruction': 'leaq\t.LC5(%rip), %rsi'}, {'instIndex': 43, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 44, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 51, 'instruction': 'xorl\t%r11d, %r11d'}, {'instIndex': 52, 'instruction': 'xorl\t%r15d, %r15d'}, {'instIndex': 53, 'instruction': 'xorl\t%r8d, %r8d'}, {'instIndex': 54, 'instruction': 'xorl\t%r13d, %r13d'}, {'instIndex': 55, 'instruction': 'leaq\t8(%rsi), %rax'}, {'instIndex': 56, 'instruction': 'leaq\t0x8460(%rbx), %rdx'}, {'instIndex': 57, 'instruction': 'xorl\t%ebx, %ebx'}, {'instIndex': 58, 'instruction': 'leaq\t(%rax,%rcx,8), %rdi'}, {'instIndex': 59, 'instruction': 'jmp\t.L28'}, {'instIndex': 149, 'instruction': 'movq\t%r14, %rcx'}, {'instIndex': 150, 'instruction': 'leaq\t.LC4(%rip), %rdx'}, {'instIndex': 151, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 152, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 153, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 154, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 302, 'instruction': 'xorl\t%r11d, %r11d'}, {'instIndex': 303, 'instruction': 'xorl\t%r15d, %r15d'}, {'instIndex': 304, 'instruction': 'xorl\t%r8d, %r8d'}, {'instIndex': 305, 'instruction': 'xorl\t%r13d, %r13d'}, {'instIndex': 306, 'instruction': 'xorl\t%ebx, %ebx'}, {'instIndex': 307, 'instruction': 'jmp\t.L24'}, {'instIndex': 1217, 'instruction': 'movq\t%r13, 0x10(%rsp)'}, {'instIndex': 1218, 'instruction': 'jmp\t.L204'}, {'instIndex': 1219, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 1220, 'instruction': 'movq\t%r13, %rsi'}, {'instIndex': 1228, 'instruction': 'movq\t0x68(%rsp), %rdi'}, {'instIndex': 1229, 'instruction': 'call\tavio_rb32@PLT'}, {'instIndex': 1230, 'instruction': 'movq\t0x68(%rsp), %rdi'}, {'instIndex': 1232, 'instruction': 'call\tavio_rl32@PLT'}, {'instIndex': 1233, 'instruction': 'movq\t0x68(%rsp), %rdi'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 125, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 126, 'instruction': 'leaq\t.LC13(%rip), %rsi'}, {'instIndex': 127, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 128, 'instruction': 'xorl\t%r13d, %r13d'}, {'instIndex': 129, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 130, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 131, 'instruction': 'call\tavio_flush@PLT'}, {'instIndex': 132, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 133, 'instruction': 'call\tavio_close@PLT'}, {'instIndex': 134, 'instruction': 'movq\t8(%rsp), %rsi'}, {'instIndex': 135, 'instruction': 'movq\t%r14, %rdi'}, {'instIndex': 136, 'instruction': 'call\trename@PLT'}, {'instIndex': 137, 'instruction': 'jmp\t.L21'}, {'instIndex': 155, 'instruction': 'movq\t0x838(%rsp), %rax'}, {'instIndex': 156, 'instruction': 'subq\t%fs:0x28, %rax'}, {'instIndex': 157, 'instruction': 'jne\t.L64'}, {'instIndex': 158, 'instruction': 'addq\t$0x848, %rsp'}, {'instIndex': 159, 'instruction': 'movl\t%r13d, %eax'}, {'instIndex': 160, 'instruction': 'popq\t%rbx'}, {'instIndex': 161, 'instruction': 'popq\t%rbp'}, {'instIndex': 162, 'instruction': 'popq\t%r12'}, {'instIndex': 163, 'instruction': 'popq\t%r13'}, {'instIndex': 164, 'instruction': 'popq\t%r14'}, {'instIndex': 165, 'instruction': 'popq\t%r15'}, {'instIndex': 166, 'instruction': 'ret'}, {'instIndex': 312, 'instruction': 'call\t__stack_chk_fail@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_after/O2/smoothstreamingenc.o
Binary file does not exist.
{'write_manifest': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%r15'}, {'instIndex': 4, 'instruction': 'pushq\t%r14'}, {'instIndex': 5, 'instruction': 'pushq\t%r13'}, {'instIndex': 6, 'instruction': 'pushq\t%r12'}, {'instIndex': 7, 'instruction': 'pushq\t%rbp'}, {'instIndex': 8, 'instruction': 'movq\t%rdi, %rbp'}, {'instIndex': 9, 'instruction': 'pushq\t%rbx'}, {'instIndex': 10, 'instruction': 'leaq\t0x38(%rdi), %rbx'}, {'instIndex': 12, 'instruction': 'subq\t$0x848, %rsp'}, {'instIndex': 13, 'instruction': 'movq\t0x18(%rdi), %r12'}, {'instIndex': 14, 'instruction': 'movl\t%esi, 0x10(%rsp)'}, {'instIndex': 17, 'instruction': 'movq\t%fs:0x28, %rax'}, {'instIndex': 18, 'instruction': 'movq\t%rax, 0x838(%rsp)'}, {'instIndex': 19, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 33, 'instruction': 'xorl\t%r8d, %r8d'}, {'instIndex': 34, 'instruction': 'leaq\t0x28(%rsp), %rdi'}, {'instIndex': 35, 'instruction': 'movq\t%r14, %rsi'}, {'instIndex': 36, 'instruction': 'leaq\t0x4b0(%rbp), %rcx'}, {'instIndex': 37, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 38, 'instruction': 'call\tavio_open2@PLT'}, {'instIndex': 39, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 40, 'instruction': 'js\t.L58'}, {'instIndex': 41, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 42, 'instruction': 'leaq\t.LC5(%rip), %rsi'}, {'instIndex': 43, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 44, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 51, 'instruction': 'xorl\t%r11d, %r11d'}, {'instIndex': 52, 'instruction': 'xorl\t%r15d, %r15d'}, {'instIndex': 53, 'instruction': 'xorl\t%r8d, %r8d'}, {'instIndex': 54, 'instruction': 'xorl\t%r13d, %r13d'}, {'instIndex': 55, 'instruction': 'leaq\t8(%rsi), %rax'}, {'instIndex': 56, 'instruction': 'leaq\t0x8460(%rbx), %rdx'}, {'instIndex': 57, 'instruction': 'xorl\t%ebx, %ebx'}, {'instIndex': 58, 'instruction': 'leaq\t(%rax,%rcx,8), %rdi'}, {'instIndex': 59, 'instruction': 'jmp\t.L28'}, {'instIndex': 149, 'instruction': 'movq\t%r14, %rcx'}, {'instIndex': 150, 'instruction': 'leaq\t.LC4(%rip), %rdx'}, {'instIndex': 151, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 152, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 153, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 154, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 302, 'instruction': 'xorl\t%r11d, %r11d'}, {'instIndex': 303, 'instruction': 'xorl\t%r15d, %r15d'}, {'instIndex': 304, 'instruction': 'xorl\t%r8d, %r8d'}, {'instIndex': 305, 'instruction': 'xorl\t%r13d, %r13d'}, {'instIndex': 306, 'instruction': 'xorl\t%ebx, %ebx'}, {'instIndex': 307, 'instruction': 'jmp\t.L24'}, {'instIndex': 1217, 'instruction': 'movq\t%r13, 0x10(%rsp)'}, {'instIndex': 1218, 'instruction': 'jmp\t.L204'}, {'instIndex': 1219, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 1220, 'instruction': 'movq\t%r13, %rsi'}, {'instIndex': 1228, 'instruction': 'movq\t0x68(%rsp), %rdi'}, {'instIndex': 1229, 'instruction': 'call\tavio_rb32@PLT'}, {'instIndex': 1230, 'instruction': 'movq\t0x68(%rsp), %rdi'}, {'instIndex': 1232, 'instruction': 'call\tavio_rl32@PLT'}, {'instIndex': 1233, 'instruction': 'movq\t0x68(%rsp), %rdi'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 125, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 126, 'instruction': 'leaq\t.LC13(%rip), %rsi'}, {'instIndex': 127, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 128, 'instruction': 'xorl\t%r13d, %r13d'}, {'instIndex': 129, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 130, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 131, 'instruction': 'call\tavio_flush@PLT'}, {'instIndex': 132, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 133, 'instruction': 'call\tavio_close@PLT'}, {'instIndex': 134, 'instruction': 'movq\t8(%rsp), %rsi'}, {'instIndex': 135, 'instruction': 'movq\t%r14, %rdi'}, {'instIndex': 136, 'instruction': 'call\trename@PLT'}, {'instIndex': 137, 'instruction': 'jmp\t.L21'}, {'instIndex': 155, 'instruction': 'movq\t0x838(%rsp), %rax'}, {'instIndex': 156, 'instruction': 'subq\t%fs:0x28, %rax'}, {'instIndex': 157, 'instruction': 'jne\t.L64'}, {'instIndex': 158, 'instruction': 'addq\t$0x848, %rsp'}, {'instIndex': 159, 'instruction': 'movl\t%r13d, %eax'}, {'instIndex': 160, 'instruction': 'popq\t%rbx'}, {'instIndex': 161, 'instruction': 'popq\t%rbp'}, {'instIndex': 162, 'instruction': 'popq\t%r12'}, {'instIndex': 163, 'instruction': 'popq\t%r13'}, {'instIndex': 164, 'instruction': 'popq\t%r14'}, {'instIndex': 165, 'instruction': 'popq\t%r15'}, {'instIndex': 166, 'instruction': 'ret'}, {'instIndex': 312, 'instruction': 'call\t__stack_chk_fail@PLT'}]}]}
The case of compiler gcc with optimization O3.
Patched source code file: smoothstreamingenc.c
Patched function: 1---static int write_manifest 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_after/O3/smoothstreamingenc_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_after/O3/smoothstreamingenc_gcc.s---write_manifest---after
function id: 28
function flag: True
There are 1434 instructions for function: write_manifest in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '210', 'end': 224}, 'before': {'start': '210', 'end': 223}}}, {'modifyIndex': 2, 'line': {'after': {'start': '279', 'end': 285}, 'before': {'start': '278', 'end': 283}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%r15'}, {'instIndex': 4, 'instruction': 'pushq\t%r14'}, {'instIndex': 5, 'instruction': 'pushq\t%r13'}, {'instIndex': 6, 'instruction': 'pushq\t%r12'}, {'instIndex': 7, 'instruction': 'pushq\t%rbp'}, {'instIndex': 8, 'instruction': 'movq\t%rdi, %rbp'}, {'instIndex': 9, 'instruction': 'pushq\t%rbx'}, {'instIndex': 10, 'instruction': 'leaq\t0x38(%rdi), %rbx'}, {'instIndex': 12, 'instruction': 'subq\t$0x848, %rsp'}, {'instIndex': 13, 'instruction': 'movq\t0x18(%rdi), %r12'}, {'instIndex': 14, 'instruction': 'movl\t%esi, 4(%rsp)'}, {'instIndex': 17, 'instruction': 'movq\t%fs:0x28, %rax'}, {'instIndex': 18, 'instruction': 'movq\t%rax, 0x838(%rsp)'}, {'instIndex': 19, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 33, 'instruction': 'xorl\t%r8d, %r8d'}, {'instIndex': 34, 'instruction': 'leaq\t0x28(%rsp), %rdi'}, {'instIndex': 35, 'instruction': 'movq\t%r15, %rsi'}, {'instIndex': 36, 'instruction': 'leaq\t0x4b0(%rbp), %rcx'}, {'instIndex': 37, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 38, 'instruction': 'call\tavio_open2@PLT'}, {'instIndex': 39, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 40, 'instruction': 'js\t.L64'}, {'instIndex': 41, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 42, 'instruction': 'leaq\t.LC5(%rip), %rsi'}, {'instIndex': 43, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 44, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 51, 'instruction': 'xorl\t%r10d, %r10d'}, {'instIndex': 52, 'instruction': 'xorl\t%r13d, %r13d'}, {'instIndex': 53, 'instruction': 'xorl\t%r8d, %r8d'}, {'instIndex': 54, 'instruction': 'xorl\t%r14d, %r14d'}, {'instIndex': 55, 'instruction': 'leaq\t8(%rdi), %rax'}, {'instIndex': 56, 'instruction': 'leaq\t0x8460(%rbx), %rdx'}, {'instIndex': 57, 'instruction': 'xorl\t%ebx, %ebx'}, {'instIndex': 58, 'instruction': 'leaq\t(%rax,%rcx,8), %r9'}, {'instIndex': 59, 'instruction': 'jmp\t.L29'}, {'instIndex': 149, 'instruction': 'movq\t%r15, %rcx'}, {'instIndex': 150, 'instruction': 'leaq\t.LC4(%rip), %rdx'}, {'instIndex': 151, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 152, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 153, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 154, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 326, 'instruction': 'xorl\t%r10d, %r10d'}, {'instIndex': 327, 'instruction': 'xorl\t%r13d, %r13d'}, {'instIndex': 328, 'instruction': 'xorl\t%r8d, %r8d'}, {'instIndex': 329, 'instruction': 'xorl\t%r14d, %r14d'}, {'instIndex': 330, 'instruction': 'xorl\t%ebx, %ebx'}, {'instIndex': 331, 'instruction': 'jmp\t.L25'}, {'instIndex': 1245, 'instruction': 'movq\t%r13, 0x10(%rsp)'}, {'instIndex': 1246, 'instruction': 'jmp\t.L214'}, {'instIndex': 1247, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 1248, 'instruction': 'movq\t%r13, %rsi'}, {'instIndex': 1256, 'instruction': 'movq\t0x68(%rsp), %rdi'}, {'instIndex': 1257, 'instruction': 'call\tavio_rb32@PLT'}, {'instIndex': 1258, 'instruction': 'movq\t0x68(%rsp), %rdi'}, {'instIndex': 1260, 'instruction': 'call\tavio_rl32@PLT'}, {'instIndex': 1261, 'instruction': 'movq\t0x68(%rsp), %rdi'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 125, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 126, 'instruction': 'leaq\t.LC13(%rip), %rsi'}, {'instIndex': 127, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 128, 'instruction': 'xorl\t%r13d, %r13d'}, {'instIndex': 129, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 130, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 131, 'instruction': 'call\tavio_flush@PLT'}, {'instIndex': 132, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 133, 'instruction': 'call\tavio_close@PLT'}, {'instIndex': 134, 'instruction': 'movq\t8(%rsp), %rsi'}, {'instIndex': 135, 'instruction': 'movq\t%r15, %rdi'}, {'instIndex': 136, 'instruction': 'call\trename@PLT'}, {'instIndex': 137, 'instruction': 'jmp\t.L22'}, {'instIndex': 155, 'instruction': 'movq\t0x838(%rsp), %rax'}, {'instIndex': 156, 'instruction': 'subq\t%fs:0x28, %rax'}, {'instIndex': 157, 'instruction': 'jne\t.L70'}, {'instIndex': 158, 'instruction': 'addq\t$0x848, %rsp'}, {'instIndex': 159, 'instruction': 'movl\t%r13d, %eax'}, {'instIndex': 160, 'instruction': 'popq\t%rbx'}, {'instIndex': 161, 'instruction': 'popq\t%rbp'}, {'instIndex': 162, 'instruction': 'popq\t%r12'}, {'instIndex': 163, 'instruction': 'popq\t%r13'}, {'instIndex': 164, 'instruction': 'popq\t%r14'}, {'instIndex': 165, 'instruction': 'popq\t%r15'}, {'instIndex': 166, 'instruction': 'ret'}, {'instIndex': 336, 'instruction': 'call\t__stack_chk_fail@PLT'}]}]
Patched function: 1---static int write_manifest 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_after/O3/smoothstreamingenc_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_after/O3/smoothstreamingenc_gcc.s---write_manifest---after
function id: 28
function flag: True
There are 1434 instructions for function: write_manifest in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '210', 'end': 224}, 'before': {'start': '210', 'end': 223}}}, {'modifyIndex': 2, 'line': {'after': {'start': '279', 'end': 285}, 'before': {'start': '278', 'end': 283}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%r15'}, {'instIndex': 4, 'instruction': 'pushq\t%r14'}, {'instIndex': 5, 'instruction': 'pushq\t%r13'}, {'instIndex': 6, 'instruction': 'pushq\t%r12'}, {'instIndex': 7, 'instruction': 'pushq\t%rbp'}, {'instIndex': 8, 'instruction': 'movq\t%rdi, %rbp'}, {'instIndex': 9, 'instruction': 'pushq\t%rbx'}, {'instIndex': 10, 'instruction': 'leaq\t0x38(%rdi), %rbx'}, {'instIndex': 12, 'instruction': 'subq\t$0x848, %rsp'}, {'instIndex': 13, 'instruction': 'movq\t0x18(%rdi), %r12'}, {'instIndex': 14, 'instruction': 'movl\t%esi, 4(%rsp)'}, {'instIndex': 17, 'instruction': 'movq\t%fs:0x28, %rax'}, {'instIndex': 18, 'instruction': 'movq\t%rax, 0x838(%rsp)'}, {'instIndex': 19, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 33, 'instruction': 'xorl\t%r8d, %r8d'}, {'instIndex': 34, 'instruction': 'leaq\t0x28(%rsp), %rdi'}, {'instIndex': 35, 'instruction': 'movq\t%r15, %rsi'}, {'instIndex': 36, 'instruction': 'leaq\t0x4b0(%rbp), %rcx'}, {'instIndex': 37, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 38, 'instruction': 'call\tavio_open2@PLT'}, {'instIndex': 39, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 40, 'instruction': 'js\t.L64'}, {'instIndex': 41, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 42, 'instruction': 'leaq\t.LC5(%rip), %rsi'}, {'instIndex': 43, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 44, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 51, 'instruction': 'xorl\t%r10d, %r10d'}, {'instIndex': 52, 'instruction': 'xorl\t%r13d, %r13d'}, {'instIndex': 53, 'instruction': 'xorl\t%r8d, %r8d'}, {'instIndex': 54, 'instruction': 'xorl\t%r14d, %r14d'}, {'instIndex': 55, 'instruction': 'leaq\t8(%rdi), %rax'}, {'instIndex': 56, 'instruction': 'leaq\t0x8460(%rbx), %rdx'}, {'instIndex': 57, 'instruction': 'xorl\t%ebx, %ebx'}, {'instIndex': 58, 'instruction': 'leaq\t(%rax,%rcx,8), %r9'}, {'instIndex': 59, 'instruction': 'jmp\t.L29'}, {'instIndex': 149, 'instruction': 'movq\t%r15, %rcx'}, {'instIndex': 150, 'instruction': 'leaq\t.LC4(%rip), %rdx'}, {'instIndex': 151, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 152, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 153, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 154, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 326, 'instruction': 'xorl\t%r10d, %r10d'}, {'instIndex': 327, 'instruction': 'xorl\t%r13d, %r13d'}, {'instIndex': 328, 'instruction': 'xorl\t%r8d, %r8d'}, {'instIndex': 329, 'instruction': 'xorl\t%r14d, %r14d'}, {'instIndex': 330, 'instruction': 'xorl\t%ebx, %ebx'}, {'instIndex': 331, 'instruction': 'jmp\t.L25'}, {'instIndex': 1245, 'instruction': 'movq\t%r13, 0x10(%rsp)'}, {'instIndex': 1246, 'instruction': 'jmp\t.L214'}, {'instIndex': 1247, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 1248, 'instruction': 'movq\t%r13, %rsi'}, {'instIndex': 1256, 'instruction': 'movq\t0x68(%rsp), %rdi'}, {'instIndex': 1257, 'instruction': 'call\tavio_rb32@PLT'}, {'instIndex': 1258, 'instruction': 'movq\t0x68(%rsp), %rdi'}, {'instIndex': 1260, 'instruction': 'call\tavio_rl32@PLT'}, {'instIndex': 1261, 'instruction': 'movq\t0x68(%rsp), %rdi'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 125, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 126, 'instruction': 'leaq\t.LC13(%rip), %rsi'}, {'instIndex': 127, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 128, 'instruction': 'xorl\t%r13d, %r13d'}, {'instIndex': 129, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 130, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 131, 'instruction': 'call\tavio_flush@PLT'}, {'instIndex': 132, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 133, 'instruction': 'call\tavio_close@PLT'}, {'instIndex': 134, 'instruction': 'movq\t8(%rsp), %rsi'}, {'instIndex': 135, 'instruction': 'movq\t%r15, %rdi'}, {'instIndex': 136, 'instruction': 'call\trename@PLT'}, {'instIndex': 137, 'instruction': 'jmp\t.L22'}, {'instIndex': 155, 'instruction': 'movq\t0x838(%rsp), %rax'}, {'instIndex': 156, 'instruction': 'subq\t%fs:0x28, %rax'}, {'instIndex': 157, 'instruction': 'jne\t.L70'}, {'instIndex': 158, 'instruction': 'addq\t$0x848, %rsp'}, {'instIndex': 159, 'instruction': 'movl\t%r13d, %eax'}, {'instIndex': 160, 'instruction': 'popq\t%rbx'}, {'instIndex': 161, 'instruction': 'popq\t%rbp'}, {'instIndex': 162, 'instruction': 'popq\t%r12'}, {'instIndex': 163, 'instruction': 'popq\t%r13'}, {'instIndex': 164, 'instruction': 'popq\t%r14'}, {'instIndex': 165, 'instruction': 'popq\t%r15'}, {'instIndex': 166, 'instruction': 'ret'}, {'instIndex': 336, 'instruction': 'call\t__stack_chk_fail@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_after/O3/smoothstreamingenc.o
Binary file does not exist.
{'write_manifest': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%r15'}, {'instIndex': 4, 'instruction': 'pushq\t%r14'}, {'instIndex': 5, 'instruction': 'pushq\t%r13'}, {'instIndex': 6, 'instruction': 'pushq\t%r12'}, {'instIndex': 7, 'instruction': 'pushq\t%rbp'}, {'instIndex': 8, 'instruction': 'movq\t%rdi, %rbp'}, {'instIndex': 9, 'instruction': 'pushq\t%rbx'}, {'instIndex': 10, 'instruction': 'leaq\t0x38(%rdi), %rbx'}, {'instIndex': 12, 'instruction': 'subq\t$0x848, %rsp'}, {'instIndex': 13, 'instruction': 'movq\t0x18(%rdi), %r12'}, {'instIndex': 14, 'instruction': 'movl\t%esi, 4(%rsp)'}, {'instIndex': 17, 'instruction': 'movq\t%fs:0x28, %rax'}, {'instIndex': 18, 'instruction': 'movq\t%rax, 0x838(%rsp)'}, {'instIndex': 19, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 33, 'instruction': 'xorl\t%r8d, %r8d'}, {'instIndex': 34, 'instruction': 'leaq\t0x28(%rsp), %rdi'}, {'instIndex': 35, 'instruction': 'movq\t%r15, %rsi'}, {'instIndex': 36, 'instruction': 'leaq\t0x4b0(%rbp), %rcx'}, {'instIndex': 37, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 38, 'instruction': 'call\tavio_open2@PLT'}, {'instIndex': 39, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 40, 'instruction': 'js\t.L64'}, {'instIndex': 41, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 42, 'instruction': 'leaq\t.LC5(%rip), %rsi'}, {'instIndex': 43, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 44, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 51, 'instruction': 'xorl\t%r10d, %r10d'}, {'instIndex': 52, 'instruction': 'xorl\t%r13d, %r13d'}, {'instIndex': 53, 'instruction': 'xorl\t%r8d, %r8d'}, {'instIndex': 54, 'instruction': 'xorl\t%r14d, %r14d'}, {'instIndex': 55, 'instruction': 'leaq\t8(%rdi), %rax'}, {'instIndex': 56, 'instruction': 'leaq\t0x8460(%rbx), %rdx'}, {'instIndex': 57, 'instruction': 'xorl\t%ebx, %ebx'}, {'instIndex': 58, 'instruction': 'leaq\t(%rax,%rcx,8), %r9'}, {'instIndex': 59, 'instruction': 'jmp\t.L29'}, {'instIndex': 149, 'instruction': 'movq\t%r15, %rcx'}, {'instIndex': 150, 'instruction': 'leaq\t.LC4(%rip), %rdx'}, {'instIndex': 151, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 152, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 153, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 154, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 326, 'instruction': 'xorl\t%r10d, %r10d'}, {'instIndex': 327, 'instruction': 'xorl\t%r13d, %r13d'}, {'instIndex': 328, 'instruction': 'xorl\t%r8d, %r8d'}, {'instIndex': 329, 'instruction': 'xorl\t%r14d, %r14d'}, {'instIndex': 330, 'instruction': 'xorl\t%ebx, %ebx'}, {'instIndex': 331, 'instruction': 'jmp\t.L25'}, {'instIndex': 1245, 'instruction': 'movq\t%r13, 0x10(%rsp)'}, {'instIndex': 1246, 'instruction': 'jmp\t.L214'}, {'instIndex': 1247, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 1248, 'instruction': 'movq\t%r13, %rsi'}, {'instIndex': 1256, 'instruction': 'movq\t0x68(%rsp), %rdi'}, {'instIndex': 1257, 'instruction': 'call\tavio_rb32@PLT'}, {'instIndex': 1258, 'instruction': 'movq\t0x68(%rsp), %rdi'}, {'instIndex': 1260, 'instruction': 'call\tavio_rl32@PLT'}, {'instIndex': 1261, 'instruction': 'movq\t0x68(%rsp), %rdi'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 125, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 126, 'instruction': 'leaq\t.LC13(%rip), %rsi'}, {'instIndex': 127, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 128, 'instruction': 'xorl\t%r13d, %r13d'}, {'instIndex': 129, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 130, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 131, 'instruction': 'call\tavio_flush@PLT'}, {'instIndex': 132, 'instruction': 'movq\t0x28(%rsp), %rdi'}, {'instIndex': 133, 'instruction': 'call\tavio_close@PLT'}, {'instIndex': 134, 'instruction': 'movq\t8(%rsp), %rsi'}, {'instIndex': 135, 'instruction': 'movq\t%r15, %rdi'}, {'instIndex': 136, 'instruction': 'call\trename@PLT'}, {'instIndex': 137, 'instruction': 'jmp\t.L22'}, {'instIndex': 155, 'instruction': 'movq\t0x838(%rsp), %rax'}, {'instIndex': 156, 'instruction': 'subq\t%fs:0x28, %rax'}, {'instIndex': 157, 'instruction': 'jne\t.L70'}, {'instIndex': 158, 'instruction': 'addq\t$0x848, %rsp'}, {'instIndex': 159, 'instruction': 'movl\t%r13d, %eax'}, {'instIndex': 160, 'instruction': 'popq\t%rbx'}, {'instIndex': 161, 'instruction': 'popq\t%rbp'}, {'instIndex': 162, 'instruction': 'popq\t%r12'}, {'instIndex': 163, 'instruction': 'popq\t%r13'}, {'instIndex': 164, 'instruction': 'popq\t%r14'}, {'instIndex': 165, 'instruction': 'popq\t%r15'}, {'instIndex': 166, 'instruction': 'ret'}, {'instIndex': 336, 'instruction': 'call\t__stack_chk_fail@PLT'}]}]}
The case of compiler gcc with optimization Os.
Patched source code file: smoothstreamingenc.c
Patched function: 1---static int write_manifest 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_after/Os/smoothstreamingenc_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_after/Os/smoothstreamingenc_gcc.s---write_manifest---after
function id: 20
function flag: True
There are 1239 instructions for function: write_manifest in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '210', 'end': 224}, 'before': {'start': '210', 'end': 223}}}, {'modifyIndex': 2, 'line': {'after': {'start': '279', 'end': 285}, 'before': {'start': '278', 'end': 283}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%r15'}, {'instIndex': 1, 'instruction': 'leaq\t0x38(%rdi), %r9'}, {'instIndex': 4, 'instruction': 'pushq\t%r14'}, {'instIndex': 6, 'instruction': 'pushq\t%r13'}, {'instIndex': 7, 'instruction': 'movl\t%esi, %r13d'}, {'instIndex': 9, 'instruction': 'pushq\t%r12'}, {'instIndex': 10, 'instruction': 'pushq\t%rbp'}, {'instIndex': 11, 'instruction': 'movq\t%rdi, %rbp'}, {'instIndex': 12, 'instruction': 'pushq\t%rbx'}, {'instIndex': 13, 'instruction': 'subq\t$0x838, %rsp'}, {'instIndex': 14, 'instruction': 'movq\t0x18(%rdi), %rbx'}, {'instIndex': 15, 'instruction': 'movq\t%fs:0x28, %rax'}, {'instIndex': 16, 'instruction': 'movq\t%rax, 0x828(%rsp)'}, {'instIndex': 17, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 33, 'instruction': 'xorl\t%r8d, %r8d'}, {'instIndex': 34, 'instruction': 'leaq\t0x20(%rsp), %rdi'}, {'instIndex': 35, 'instruction': 'movq\t%r14, %rsi'}, {'instIndex': 36, 'instruction': 'leaq\t0x4b0(%rbp), %rcx'}, {'instIndex': 37, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 38, 'instruction': 'call\tavio_open2@PLT'}, {'instIndex': 39, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 40, 'instruction': 'jns\t.L22'}, {'instIndex': 41, 'instruction': 'movl\t%eax, %r12d'}, {'instIndex': 42, 'instruction': 'movq\t%r14, %rcx'}, {'instIndex': 43, 'instruction': 'leaq\t.LC4(%rip), %rdx'}, {'instIndex': 44, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 45, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 46, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 47, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 48, 'instruction': 'jmp\t.L21'}, {'instIndex': 49, 'instruction': 'movq\t0x20(%rsp), %rdi'}, {'instIndex': 50, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 51, 'instruction': 'xorl\t%r15d, %r15d'}, {'instIndex': 52, 'instruction': 'xorl\t%r12d, %r12d'}, {'instIndex': 53, 'instruction': 'leaq\t.LC5(%rip), %rsi'}, {'instIndex': 54, 'instruction': 'xorl\t%r14d, %r14d'}, {'instIndex': 55, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 58, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 59, 'instruction': 'movl\t$0, 8(%rsp)'}, {'instIndex': 83, 'instruction': 'movl\t%esi, %r14d'}, {'instIndex': 84, 'instruction': 'jmp\t.L24'}, {'instIndex': 852, 'instruction': 'call\tavio_rb32@PLT'}, {'instIndex': 853, 'instruction': 'movq\t0x60(%rsp), %rdi'}, {'instIndex': 854, 'instruction': 'call\tavio_rl32@PLT'}, {'instIndex': 855, 'instruction': 'cmpl\t$0x66617274, %eax'}, {'instIndex': 863, 'instruction': 'movq\t0x60(%rsp), %rdi'}, {'instIndex': 864, 'instruction': 'call\tavio_rb32@PLT'}, {'instIndex': 865, 'instruction': 'movq\t0x60(%rsp), %rdi'}, {'instIndex': 867, 'instruction': 'call\tavio_rl32@PLT'}, {'instIndex': 868, 'instruction': 'movq\t0x60(%rsp), %rdi'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 221, 'instruction': 'movq\t0x20(%rsp), %rdi'}, {'instIndex': 222, 'instruction': 'leaq\t.LC14(%rip), %rsi'}, {'instIndex': 223, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 224, 'instruction': 'xorl\t%r12d, %r12d'}, {'instIndex': 225, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 226, 'instruction': 'movq\t0x20(%rsp), %rdi'}, {'instIndex': 227, 'instruction': 'call\tavio_flush@PLT'}, {'instIndex': 228, 'instruction': 'movq\t0x20(%rsp), %rdi'}, {'instIndex': 229, 'instruction': 'call\tavio_close@PLT'}, {'instIndex': 230, 'instruction': 'movq\t0x10(%rsp), %rsi'}, {'instIndex': 231, 'instruction': 'leaq\t0x428(%rsp), %rdi'}, {'instIndex': 232, 'instruction': 'call\trename@PLT'}, {'instIndex': 233, 'instruction': 'movq\t0x828(%rsp), %rax'}, {'instIndex': 234, 'instruction': 'subq\t%fs:0x28, %rax'}, {'instIndex': 235, 'instruction': 'je\t.L40'}, {'instIndex': 236, 'instruction': 'call\t__stack_chk_fail@PLT'}, {'instIndex': 237, 'instruction': 'addq\t$0x838, %rsp'}, {'instIndex': 238, 'instruction': 'movl\t%r12d, %eax'}, {'instIndex': 239, 'instruction': 'popq\t%rbx'}, {'instIndex': 240, 'instruction': 'popq\t%rbp'}, {'instIndex': 241, 'instruction': 'popq\t%r12'}, {'instIndex': 242, 'instruction': 'popq\t%r13'}, {'instIndex': 243, 'instruction': 'popq\t%r14'}, {'instIndex': 244, 'instruction': 'popq\t%r15'}, {'instIndex': 245, 'instruction': 'ret'}]}]
Patched function: 1---static int write_manifest 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_after/Os/smoothstreamingenc_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_after/Os/smoothstreamingenc_gcc.s---write_manifest---after
function id: 20
function flag: True
There are 1239 instructions for function: write_manifest in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '210', 'end': 224}, 'before': {'start': '210', 'end': 223}}}, {'modifyIndex': 2, 'line': {'after': {'start': '279', 'end': 285}, 'before': {'start': '278', 'end': 283}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%r15'}, {'instIndex': 1, 'instruction': 'leaq\t0x38(%rdi), %r9'}, {'instIndex': 4, 'instruction': 'pushq\t%r14'}, {'instIndex': 6, 'instruction': 'pushq\t%r13'}, {'instIndex': 7, 'instruction': 'movl\t%esi, %r13d'}, {'instIndex': 9, 'instruction': 'pushq\t%r12'}, {'instIndex': 10, 'instruction': 'pushq\t%rbp'}, {'instIndex': 11, 'instruction': 'movq\t%rdi, %rbp'}, {'instIndex': 12, 'instruction': 'pushq\t%rbx'}, {'instIndex': 13, 'instruction': 'subq\t$0x838, %rsp'}, {'instIndex': 14, 'instruction': 'movq\t0x18(%rdi), %rbx'}, {'instIndex': 15, 'instruction': 'movq\t%fs:0x28, %rax'}, {'instIndex': 16, 'instruction': 'movq\t%rax, 0x828(%rsp)'}, {'instIndex': 17, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 33, 'instruction': 'xorl\t%r8d, %r8d'}, {'instIndex': 34, 'instruction': 'leaq\t0x20(%rsp), %rdi'}, {'instIndex': 35, 'instruction': 'movq\t%r14, %rsi'}, {'instIndex': 36, 'instruction': 'leaq\t0x4b0(%rbp), %rcx'}, {'instIndex': 37, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 38, 'instruction': 'call\tavio_open2@PLT'}, {'instIndex': 39, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 40, 'instruction': 'jns\t.L22'}, {'instIndex': 41, 'instruction': 'movl\t%eax, %r12d'}, {'instIndex': 42, 'instruction': 'movq\t%r14, %rcx'}, {'instIndex': 43, 'instruction': 'leaq\t.LC4(%rip), %rdx'}, {'instIndex': 44, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 45, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 46, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 47, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 48, 'instruction': 'jmp\t.L21'}, {'instIndex': 49, 'instruction': 'movq\t0x20(%rsp), %rdi'}, {'instIndex': 50, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 51, 'instruction': 'xorl\t%r15d, %r15d'}, {'instIndex': 52, 'instruction': 'xorl\t%r12d, %r12d'}, {'instIndex': 53, 'instruction': 'leaq\t.LC5(%rip), %rsi'}, {'instIndex': 54, 'instruction': 'xorl\t%r14d, %r14d'}, {'instIndex': 55, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 58, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 59, 'instruction': 'movl\t$0, 8(%rsp)'}, {'instIndex': 83, 'instruction': 'movl\t%esi, %r14d'}, {'instIndex': 84, 'instruction': 'jmp\t.L24'}, {'instIndex': 852, 'instruction': 'call\tavio_rb32@PLT'}, {'instIndex': 853, 'instruction': 'movq\t0x60(%rsp), %rdi'}, {'instIndex': 854, 'instruction': 'call\tavio_rl32@PLT'}, {'instIndex': 855, 'instruction': 'cmpl\t$0x66617274, %eax'}, {'instIndex': 863, 'instruction': 'movq\t0x60(%rsp), %rdi'}, {'instIndex': 864, 'instruction': 'call\tavio_rb32@PLT'}, {'instIndex': 865, 'instruction': 'movq\t0x60(%rsp), %rdi'}, {'instIndex': 867, 'instruction': 'call\tavio_rl32@PLT'}, {'instIndex': 868, 'instruction': 'movq\t0x60(%rsp), %rdi'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 221, 'instruction': 'movq\t0x20(%rsp), %rdi'}, {'instIndex': 222, 'instruction': 'leaq\t.LC14(%rip), %rsi'}, {'instIndex': 223, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 224, 'instruction': 'xorl\t%r12d, %r12d'}, {'instIndex': 225, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 226, 'instruction': 'movq\t0x20(%rsp), %rdi'}, {'instIndex': 227, 'instruction': 'call\tavio_flush@PLT'}, {'instIndex': 228, 'instruction': 'movq\t0x20(%rsp), %rdi'}, {'instIndex': 229, 'instruction': 'call\tavio_close@PLT'}, {'instIndex': 230, 'instruction': 'movq\t0x10(%rsp), %rsi'}, {'instIndex': 231, 'instruction': 'leaq\t0x428(%rsp), %rdi'}, {'instIndex': 232, 'instruction': 'call\trename@PLT'}, {'instIndex': 233, 'instruction': 'movq\t0x828(%rsp), %rax'}, {'instIndex': 234, 'instruction': 'subq\t%fs:0x28, %rax'}, {'instIndex': 235, 'instruction': 'je\t.L40'}, {'instIndex': 236, 'instruction': 'call\t__stack_chk_fail@PLT'}, {'instIndex': 237, 'instruction': 'addq\t$0x838, %rsp'}, {'instIndex': 238, 'instruction': 'movl\t%r12d, %eax'}, {'instIndex': 239, 'instruction': 'popq\t%rbx'}, {'instIndex': 240, 'instruction': 'popq\t%rbp'}, {'instIndex': 241, 'instruction': 'popq\t%r12'}, {'instIndex': 242, 'instruction': 'popq\t%r13'}, {'instIndex': 243, 'instruction': 'popq\t%r14'}, {'instIndex': 244, 'instruction': 'popq\t%r15'}, {'instIndex': 245, 'instruction': 'ret'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_after/Os/smoothstreamingenc.o
Binary file does not exist.
{'write_manifest': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%r15'}, {'instIndex': 1, 'instruction': 'leaq\t0x38(%rdi), %r9'}, {'instIndex': 4, 'instruction': 'pushq\t%r14'}, {'instIndex': 6, 'instruction': 'pushq\t%r13'}, {'instIndex': 7, 'instruction': 'movl\t%esi, %r13d'}, {'instIndex': 9, 'instruction': 'pushq\t%r12'}, {'instIndex': 10, 'instruction': 'pushq\t%rbp'}, {'instIndex': 11, 'instruction': 'movq\t%rdi, %rbp'}, {'instIndex': 12, 'instruction': 'pushq\t%rbx'}, {'instIndex': 13, 'instruction': 'subq\t$0x838, %rsp'}, {'instIndex': 14, 'instruction': 'movq\t0x18(%rdi), %rbx'}, {'instIndex': 15, 'instruction': 'movq\t%fs:0x28, %rax'}, {'instIndex': 16, 'instruction': 'movq\t%rax, 0x828(%rsp)'}, {'instIndex': 17, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 33, 'instruction': 'xorl\t%r8d, %r8d'}, {'instIndex': 34, 'instruction': 'leaq\t0x20(%rsp), %rdi'}, {'instIndex': 35, 'instruction': 'movq\t%r14, %rsi'}, {'instIndex': 36, 'instruction': 'leaq\t0x4b0(%rbp), %rcx'}, {'instIndex': 37, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 38, 'instruction': 'call\tavio_open2@PLT'}, {'instIndex': 39, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 40, 'instruction': 'jns\t.L22'}, {'instIndex': 41, 'instruction': 'movl\t%eax, %r12d'}, {'instIndex': 42, 'instruction': 'movq\t%r14, %rcx'}, {'instIndex': 43, 'instruction': 'leaq\t.LC4(%rip), %rdx'}, {'instIndex': 44, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 45, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 46, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 47, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 48, 'instruction': 'jmp\t.L21'}, {'instIndex': 49, 'instruction': 'movq\t0x20(%rsp), %rdi'}, {'instIndex': 50, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 51, 'instruction': 'xorl\t%r15d, %r15d'}, {'instIndex': 52, 'instruction': 'xorl\t%r12d, %r12d'}, {'instIndex': 53, 'instruction': 'leaq\t.LC5(%rip), %rsi'}, {'instIndex': 54, 'instruction': 'xorl\t%r14d, %r14d'}, {'instIndex': 55, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 58, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 59, 'instruction': 'movl\t$0, 8(%rsp)'}, {'instIndex': 83, 'instruction': 'movl\t%esi, %r14d'}, {'instIndex': 84, 'instruction': 'jmp\t.L24'}, {'instIndex': 852, 'instruction': 'call\tavio_rb32@PLT'}, {'instIndex': 853, 'instruction': 'movq\t0x60(%rsp), %rdi'}, {'instIndex': 854, 'instruction': 'call\tavio_rl32@PLT'}, {'instIndex': 855, 'instruction': 'cmpl\t$0x66617274, %eax'}, {'instIndex': 863, 'instruction': 'movq\t0x60(%rsp), %rdi'}, {'instIndex': 864, 'instruction': 'call\tavio_rb32@PLT'}, {'instIndex': 865, 'instruction': 'movq\t0x60(%rsp), %rdi'}, {'instIndex': 867, 'instruction': 'call\tavio_rl32@PLT'}, {'instIndex': 868, 'instruction': 'movq\t0x60(%rsp), %rdi'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 221, 'instruction': 'movq\t0x20(%rsp), %rdi'}, {'instIndex': 222, 'instruction': 'leaq\t.LC14(%rip), %rsi'}, {'instIndex': 223, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 224, 'instruction': 'xorl\t%r12d, %r12d'}, {'instIndex': 225, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 226, 'instruction': 'movq\t0x20(%rsp), %rdi'}, {'instIndex': 227, 'instruction': 'call\tavio_flush@PLT'}, {'instIndex': 228, 'instruction': 'movq\t0x20(%rsp), %rdi'}, {'instIndex': 229, 'instruction': 'call\tavio_close@PLT'}, {'instIndex': 230, 'instruction': 'movq\t0x10(%rsp), %rsi'}, {'instIndex': 231, 'instruction': 'leaq\t0x428(%rsp), %rdi'}, {'instIndex': 232, 'instruction': 'call\trename@PLT'}, {'instIndex': 233, 'instruction': 'movq\t0x828(%rsp), %rax'}, {'instIndex': 234, 'instruction': 'subq\t%fs:0x28, %rax'}, {'instIndex': 235, 'instruction': 'je\t.L40'}, {'instIndex': 236, 'instruction': 'call\t__stack_chk_fail@PLT'}, {'instIndex': 237, 'instruction': 'addq\t$0x838, %rsp'}, {'instIndex': 238, 'instruction': 'movl\t%r12d, %eax'}, {'instIndex': 239, 'instruction': 'popq\t%rbx'}, {'instIndex': 240, 'instruction': 'popq\t%rbp'}, {'instIndex': 241, 'instruction': 'popq\t%r12'}, {'instIndex': 242, 'instruction': 'popq\t%r13'}, {'instIndex': 243, 'instruction': 'popq\t%r14'}, {'instIndex': 244, 'instruction': 'popq\t%r15'}, {'instIndex': 245, 'instruction': 'ret'}]}]}
The case of compiler clang with optimization no.
Patched source code file: smoothstreamingenc.c
Patched function: 1---static int write_manifest 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_after/no/smoothstreamingenc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_after/no/smoothstreamingenc.s---write_manifest---after
function id: 6
function flag: True
There are 341 instructions for function: write_manifest in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '210', 'end': 224}, 'before': {'start': '210', 'end': 223}}}, {'modifyIndex': 2, 'line': {'after': {'start': '279', 'end': 285}, 'before': {'start': '278', 'end': 283}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%rbx'}, {'instIndex': 1, 'instruction': 'subq\t$0x8b0, %rsp                     # imm = 0x8B0'}, {'instIndex': 2, 'instruction': 'movq\t%rdi, 0x8a0(%rsp)'}, {'instIndex': 3, 'instruction': 'movl\t%esi, 0x89c(%rsp)'}, {'instIndex': 4, 'instruction': 'movq\t0x8a0(%rsp), %rax'}, {'instIndex': 5, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 6, 'instruction': 'movq\t%rax, 0x890(%rsp)'}, {'instIndex': 7, 'instruction': 'movl\t$0, 0x74(%rsp)'}, {'instIndex': 8, 'instruction': 'movl\t$0, 0x70(%rsp)'}, {'instIndex': 9, 'instruction': 'movl\t$0, 0x6c(%rsp)'}, {'instIndex': 10, 'instruction': 'movl\t$0, 0x68(%rsp)'}, {'instIndex': 11, 'instruction': 'movq\t$0, 0x60(%rsp)'}, {'instIndex': 12, 'instruction': 'leaq\t0x480(%rsp), %rdi'}, {'instIndex': 13, 'instruction': 'movq\t0x8a0(%rsp), %rcx'}, {'instIndex': 14, 'instruction': 'addq\t$0x38, %rcx'}, {'instIndex': 15, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 16, 'instruction': 'leaq\t.L.str.0x20(%rip), %rdx'}, {'instIndex': 17, 'instruction': 'movb\t$0, %al'}, {'instIndex': 18, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 19, 'instruction': 'leaq\t0x80(%rsp), %rdi'}, {'instIndex': 20, 'instruction': 'movq\t0x8a0(%rsp), %rcx'}, {'instIndex': 21, 'instruction': 'addq\t$0x38, %rcx'}, {'instIndex': 22, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 23, 'instruction': 'leaq\t.L.str.0x21(%rip), %rdx'}, {'instIndex': 24, 'instruction': 'movb\t$0, %al'}, {'instIndex': 25, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 26, 'instruction': 'leaq\t0x80(%rsp), %rsi'}, {'instIndex': 27, 'instruction': 'movq\t0x8a0(%rsp), %rcx'}, {'instIndex': 28, 'instruction': 'addq\t$0x4b0, %rcx                     # imm = 0x4B0'}, {'instIndex': 29, 'instruction': 'leaq\t0x888(%rsp), %rdi'}, {'instIndex': 30, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 31, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 32, 'instruction': 'movl\t%eax, %r8d'}, {'instIndex': 33, 'instruction': 'callq\tavio_open2@PLT'}, {'instIndex': 34, 'instruction': 'movl\t%eax, 0x7c(%rsp)'}, {'instIndex': 35, 'instruction': 'cmpl\t$0, 0x7c(%rsp)'}, {'instIndex': 36, 'instruction': 'jge\t.LBB6_2'}, {'instIndex': 37, 'instruction': 'movq\t0x8a0(%rsp), %rdi'}, {'instIndex': 38, 'instruction': 'leaq\t0x80(%rsp), %rcx'}, {'instIndex': 39, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 40, 'instruction': 'leaq\t.L.str.0x22(%rip), %rdx'}, {'instIndex': 41, 'instruction': 'movb\t$0, %al'}, {'instIndex': 42, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 43, 'instruction': 'movl\t0x7c(%rsp), %eax'}, {'instIndex': 44, 'instruction': 'movl\t%eax, 0x8ac(%rsp)'}, {'instIndex': 45, 'instruction': 'jmp\t.LBB6_40'}, {'instIndex': 46, 'instruction': 'movq\t0x888(%rsp), %rdi'}, {'instIndex': 47, 'instruction': 'leaq\t.L.str.0x23(%rip), %rsi'}, {'instIndex': 48, 'instruction': 'movb\t$0, %al'}, {'instIndex': 49, 'instruction': 'callq\tavio_printf@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 325, 'instruction': 'movq\t0x888(%rsp), %rdi'}, {'instIndex': 326, 'instruction': 'leaq\t.L.str.0x2c(%rip), %rsi'}, {'instIndex': 327, 'instruction': 'movb\t$0, %al'}, {'instIndex': 328, 'instruction': 'callq\tavio_printf@PLT'}, {'instIndex': 329, 'instruction': 'movq\t0x888(%rsp), %rdi'}, {'instIndex': 330, 'instruction': 'callq\tavio_flush@PLT'}, {'instIndex': 331, 'instruction': 'movq\t0x888(%rsp), %rdi'}, {'instIndex': 332, 'instruction': 'callq\tavio_close@PLT'}, {'instIndex': 333, 'instruction': 'leaq\t0x80(%rsp), %rdi'}, {'instIndex': 334, 'instruction': 'leaq\t0x480(%rsp), %rsi'}, {'instIndex': 335, 'instruction': 'callq\trename@PLT'}, {'instIndex': 336, 'instruction': 'movl\t$0, 0x8ac(%rsp)'}, {'instIndex': 337, 'instruction': 'movl\t0x8ac(%rsp), %eax'}, {'instIndex': 338, 'instruction': 'addq\t$0x8b0, %rsp                     # imm = 0x8B0'}, {'instIndex': 339, 'instruction': 'popq\t%rbx'}, {'instIndex': 340, 'instruction': 'retq'}]}]
Patched function: 1---static int write_manifest 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_after/no/smoothstreamingenc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_after/no/smoothstreamingenc.s---write_manifest---after
function id: 6
function flag: True
There are 341 instructions for function: write_manifest in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '210', 'end': 224}, 'before': {'start': '210', 'end': 223}}}, {'modifyIndex': 2, 'line': {'after': {'start': '279', 'end': 285}, 'before': {'start': '278', 'end': 283}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%rbx'}, {'instIndex': 1, 'instruction': 'subq\t$0x8b0, %rsp                     # imm = 0x8B0'}, {'instIndex': 2, 'instruction': 'movq\t%rdi, 0x8a0(%rsp)'}, {'instIndex': 3, 'instruction': 'movl\t%esi, 0x89c(%rsp)'}, {'instIndex': 4, 'instruction': 'movq\t0x8a0(%rsp), %rax'}, {'instIndex': 5, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 6, 'instruction': 'movq\t%rax, 0x890(%rsp)'}, {'instIndex': 7, 'instruction': 'movl\t$0, 0x74(%rsp)'}, {'instIndex': 8, 'instruction': 'movl\t$0, 0x70(%rsp)'}, {'instIndex': 9, 'instruction': 'movl\t$0, 0x6c(%rsp)'}, {'instIndex': 10, 'instruction': 'movl\t$0, 0x68(%rsp)'}, {'instIndex': 11, 'instruction': 'movq\t$0, 0x60(%rsp)'}, {'instIndex': 12, 'instruction': 'leaq\t0x480(%rsp), %rdi'}, {'instIndex': 13, 'instruction': 'movq\t0x8a0(%rsp), %rcx'}, {'instIndex': 14, 'instruction': 'addq\t$0x38, %rcx'}, {'instIndex': 15, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 16, 'instruction': 'leaq\t.L.str.0x20(%rip), %rdx'}, {'instIndex': 17, 'instruction': 'movb\t$0, %al'}, {'instIndex': 18, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 19, 'instruction': 'leaq\t0x80(%rsp), %rdi'}, {'instIndex': 20, 'instruction': 'movq\t0x8a0(%rsp), %rcx'}, {'instIndex': 21, 'instruction': 'addq\t$0x38, %rcx'}, {'instIndex': 22, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 23, 'instruction': 'leaq\t.L.str.0x21(%rip), %rdx'}, {'instIndex': 24, 'instruction': 'movb\t$0, %al'}, {'instIndex': 25, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 26, 'instruction': 'leaq\t0x80(%rsp), %rsi'}, {'instIndex': 27, 'instruction': 'movq\t0x8a0(%rsp), %rcx'}, {'instIndex': 28, 'instruction': 'addq\t$0x4b0, %rcx                     # imm = 0x4B0'}, {'instIndex': 29, 'instruction': 'leaq\t0x888(%rsp), %rdi'}, {'instIndex': 30, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 31, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 32, 'instruction': 'movl\t%eax, %r8d'}, {'instIndex': 33, 'instruction': 'callq\tavio_open2@PLT'}, {'instIndex': 34, 'instruction': 'movl\t%eax, 0x7c(%rsp)'}, {'instIndex': 35, 'instruction': 'cmpl\t$0, 0x7c(%rsp)'}, {'instIndex': 36, 'instruction': 'jge\t.LBB6_2'}, {'instIndex': 37, 'instruction': 'movq\t0x8a0(%rsp), %rdi'}, {'instIndex': 38, 'instruction': 'leaq\t0x80(%rsp), %rcx'}, {'instIndex': 39, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 40, 'instruction': 'leaq\t.L.str.0x22(%rip), %rdx'}, {'instIndex': 41, 'instruction': 'movb\t$0, %al'}, {'instIndex': 42, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 43, 'instruction': 'movl\t0x7c(%rsp), %eax'}, {'instIndex': 44, 'instruction': 'movl\t%eax, 0x8ac(%rsp)'}, {'instIndex': 45, 'instruction': 'jmp\t.LBB6_40'}, {'instIndex': 46, 'instruction': 'movq\t0x888(%rsp), %rdi'}, {'instIndex': 47, 'instruction': 'leaq\t.L.str.0x23(%rip), %rsi'}, {'instIndex': 48, 'instruction': 'movb\t$0, %al'}, {'instIndex': 49, 'instruction': 'callq\tavio_printf@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 325, 'instruction': 'movq\t0x888(%rsp), %rdi'}, {'instIndex': 326, 'instruction': 'leaq\t.L.str.0x2c(%rip), %rsi'}, {'instIndex': 327, 'instruction': 'movb\t$0, %al'}, {'instIndex': 328, 'instruction': 'callq\tavio_printf@PLT'}, {'instIndex': 329, 'instruction': 'movq\t0x888(%rsp), %rdi'}, {'instIndex': 330, 'instruction': 'callq\tavio_flush@PLT'}, {'instIndex': 331, 'instruction': 'movq\t0x888(%rsp), %rdi'}, {'instIndex': 332, 'instruction': 'callq\tavio_close@PLT'}, {'instIndex': 333, 'instruction': 'leaq\t0x80(%rsp), %rdi'}, {'instIndex': 334, 'instruction': 'leaq\t0x480(%rsp), %rsi'}, {'instIndex': 335, 'instruction': 'callq\trename@PLT'}, {'instIndex': 336, 'instruction': 'movl\t$0, 0x8ac(%rsp)'}, {'instIndex': 337, 'instruction': 'movl\t0x8ac(%rsp), %eax'}, {'instIndex': 338, 'instruction': 'addq\t$0x8b0, %rsp                     # imm = 0x8B0'}, {'instIndex': 339, 'instruction': 'popq\t%rbx'}, {'instIndex': 340, 'instruction': 'retq'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_after/no/smoothstreamingenc.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_after/no/smoothstreamingenc.o---after
The extraction of function: write_manifest
Analyzing the binaries to generate subCFGs from patched function ...
It has 423 nodes and 763 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 341 instructions in binary file.
[4197552, 4197675, 4197714, 4197760, 4197771, 4197806, 4197822]
[4199240, 4199262, 4199275, 4199288, 4199309, 4199320]
The execution time of patched subCFG information extraction via angr: 0:00:00.447853
{'write_manifest': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dbe>, <DisassemblerInsn "lea" for 0x400dc6>, <DisassemblerInsn "mov" for 0x400dcd>, <DisassemblerInsn "call" for 0x400dcf>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d8b>, <DisassemblerInsn "lea" for 0x400d93>, <DisassemblerInsn "mov" for 0x400d9b>, <DisassemblerInsn "lea" for 0x400da0>, <DisassemblerInsn "mov" for 0x400da7>, <DisassemblerInsn "call" for 0x400da9>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x400cb0>, <DisassemblerInsn "sub" for 0x400cb1>, <DisassemblerInsn "mov" for 0x400cb8>, <DisassemblerInsn "mov" for 0x400cc0>, <DisassemblerInsn "mov" for 0x400cc7>, <DisassemblerInsn "mov" for 0x400ccf>, <DisassemblerInsn "mov" for 0x400cd3>, <DisassemblerInsn "mov" for 0x400cdb>, <DisassemblerInsn "mov" for 0x400ce3>, <DisassemblerInsn "mov" for 0x400ceb>, <DisassemblerInsn "mov" for 0x400cf3>, <DisassemblerInsn "mov" for 0x400cfb>, <DisassemblerInsn "lea" for 0x400d04>, <DisassemblerInsn "mov" for 0x400d0c>, <DisassemblerInsn "add" for 0x400d14>, <DisassemblerInsn "mov" for 0x400d18>, <DisassemblerInsn "lea" for 0x400d1d>, <DisassemblerInsn "mov" for 0x400d24>, <DisassemblerInsn "call" for 0x400d26>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dd4>, <DisassemblerInsn "mov" for 0x400ddc>, <DisassemblerInsn "mov" for 0x400de0>, <DisassemblerInsn "cmp" for 0x400de8>, <DisassemblerInsn "jae" for 0x400deb>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dae>, <DisassemblerInsn "mov" for 0x400db2>, <DisassemblerInsn "jmp" for 0x400db9>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400d52>, <DisassemblerInsn "mov" for 0x400d5a>, <DisassemblerInsn "add" for 0x400d62>, <DisassemblerInsn "lea" for 0x400d69>, <DisassemblerInsn "mov" for 0x400d71>, <DisassemblerInsn "xor" for 0x400d76>, <DisassemblerInsn "mov" for 0x400d78>, <DisassemblerInsn "call" for 0x400d7b>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400d2b>, <DisassemblerInsn "mov" for 0x400d33>, <DisassemblerInsn "add" for 0x400d3b>, <DisassemblerInsn "mov" for 0x400d3f>, <DisassemblerInsn "lea" for 0x400d44>, <DisassemblerInsn "mov" for 0x400d4b>, <DisassemblerInsn "call" for 0x400d4d>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401398>, <DisassemblerInsn "add" for 0x40139f>, <DisassemblerInsn "pop" for 0x4013a6>, <DisassemblerInsn "ret" for 0x4013a7>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d80>, <DisassemblerInsn "cmp" for 0x400d84>, <DisassemblerInsn "jge" for 0x400d89>]'}], 'cfg_block_detailed_info': [{'block_Idx': 5, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x888]>', '<lea~~rsi, [rip + 0x16d3]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x8a0]>', '<lea~~rcx, [rsp + 0x80]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x16da]>', '<mov~~al, 0>', '<call~~0x500018>']}, {'block_Idx': 0, 'blockInsts': ['<push~~rbx>', '<sub~~rsp, 0x8b0>', '<mov~~qword ptr [rsp + 0x8a0], rdi>', '<mov~~dword ptr [rsp + 0x89c], esi>', '<mov~~rax, qword ptr [rsp + 0x8a0]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 0x890], rax>', '<mov~~dword ptr [rsp + 0x74], 0>', '<mov~~dword ptr [rsp + 0x70], 0>', '<mov~~dword ptr [rsp + 0x6c], 0>', '<mov~~dword ptr [rsp + 0x68], 0>', '<mov~~qword ptr [rsp + 0x60], 0>', '<lea~~rdi, [rsp + 0x480]>', '<mov~~rcx, qword ptr [rsp + 0x8a0]>', '<add~~rcx, 0x38>', '<mov~~esi, 0x400>', '<lea~~rdx, [rip + 0x1741]>', '<mov~~al, 0>', '<call~~0x500020>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~dword ptr [rsp + 0x78], 0>', '<mov~~eax, dword ptr [rsp + 0x78]>', '<mov~~rcx, qword ptr [rsp + 0x8a0]>', '<cmp~~eax, dword ptr [rcx + 0x2c]>', '<jae~~0x400ec9>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x7c]>', '<mov~~dword ptr [rsp + 0x8ac], eax>', '<jmp~~0x401398>']}, {'block_Idx': 2, 'blockInsts': ['<lea~~rsi, [rsp + 0x80]>', '<mov~~rcx, qword ptr [rsp + 0x8a0]>', '<add~~rcx, 0x4b0>', '<lea~~rdi, [rsp + 0x888]>', '<mov~~edx, 2>', '<xor~~eax, eax>', '<mov~~r8d, eax>', '<call~~0x5000b8>']}, {'block_Idx': 1, 'blockInsts': ['<lea~~rdi, [rsp + 0x80]>', '<mov~~rcx, qword ptr [rsp + 0x8a0]>', '<add~~rcx, 0x38>', '<mov~~esi, 0x400>', '<lea~~rdx, [rip + 0x1726]>', '<mov~~al, 0>', '<call~~0x500020>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x8ac]>', '<add~~rsp, 0x8b0>', '<pop~~rbx>', '<ret~~>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~dword ptr [rsp + 0x7c], eax>', '<cmp~~dword ptr [rsp + 0x7c], 0>', '<jge~~0x400dbe>']}], 'cfg_edge_info': [(0, 1), (1, 2), (3, 4), (6, 8), (4, 6), (5, 7), (2, 3), (3, 5)]}, {'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401398>, <DisassemblerInsn "add" for 0x40139f>, <DisassemblerInsn "pop" for 0x4013a6>, <DisassemblerInsn "ret" for 0x4013a7>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40138d>, <DisassemblerInsn "mov" for 0x401398>, <DisassemblerInsn "add" for 0x40139f>, <DisassemblerInsn "pop" for 0x4013a6>, <DisassemblerInsn "ret" for 0x4013a7>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dae>, <DisassemblerInsn "mov" for 0x400db2>, <DisassemblerInsn "jmp" for 0x400db9>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401171>, <DisassemblerInsn "cmp" for 0x401179>, <DisassemblerInsn "je" for 0x40117d>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401348>, <DisassemblerInsn "lea" for 0x401350>, <DisassemblerInsn "mov" for 0x401357>, <DisassemblerInsn "call" for 0x401359>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "lea" for 0x401378>, <DisassemblerInsn "lea" for 0x401380>, <DisassemblerInsn "call" for 0x401388>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401332>, <DisassemblerInsn "lea" for 0x40133a>, <DisassemblerInsn "mov" for 0x401341>, <DisassemblerInsn "call" for 0x401343>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40135e>, <DisassemblerInsn "call" for 0x401366>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40136b>, <DisassemblerInsn "call" for 0x401373>]'}], 'cfg_block_detailed_info': [{'block_Idx': 8, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x8ac]>', '<add~~rsp, 0x8b0>', '<pop~~rbx>', '<ret~~>']}, {'block_Idx': 53, 'blockInsts': ['<mov~~dword ptr [rsp + 0x8ac], 0>', '<mov~~eax, dword ptr [rsp + 0x8ac]>', '<add~~rsp, 0x8b0>', '<pop~~rbx>', '<ret~~>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x7c]>', '<mov~~dword ptr [rsp + 0x8ac], eax>', '<jmp~~0x401398>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x890]>', '<cmp~~dword ptr [rax + 0x2c], 0>', '<je~~0x401348>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x888]>', '<lea~~rsi, [rip + 0x1400]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 47, 'blockInsts': ['<lea~~rdi, [rsp + 0x80]>', '<lea~~rsi, [rsp + 0x480]>', '<call~~0x5000d0>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x888]>', '<lea~~rsi, [rip + 0x12f1]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x888]>', '<call~~0x500058>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x888]>', '<call~~0x5000c8>']}], 'cfg_edge_info': [(47, 53), (32, 34), (6, 8), (37, 41), (50, 34), (34, 37), (41, 47)]}]}
{'write_manifest': [4199240, 4199262, 4199275, 4199288, 4199309, 4199320]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_after/no/smoothstreamingenc.o---after
The extraction of function: write_manifest
[4199240, 4199262, 4199275, 4199288, 4199309, 4199320]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 124 nodes and 193 edges in CFGEmulated.
It has 118 nodes and 167 edges in CDG.
It has 1720 nodes and 2276 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4199240, 4199262, 4199275, 4199288, 4199309, 4199320]
{4197760, 4198275, 4198787, 4197771, 4199309, 4198677, 4199320, 4198308, 4197806, 4198833, 4199218, 4198073, 4198330, 4197822, 4199240, 4198089, 4198348, 4198099, 4197844, 4198747, 4197852, 4199262, 4199275, 4198124, 4199148, 4198769, 4197873, 4199288, 4198265, 4198394}
[12, 7, 60, 8, 44, 13, 22, 45, 41, 81, 25, 63, 11, 88, 19, 49, 37, 6, 21, 52, 94, 84, 53, 80, 17, 51, 30, 50, 14, 56, 55, 24, 74, 35, 16, 4, 23, 18, 78, 15, 29, 31, 43, 42, 34]
The execution time of patched slicing information extraction via angr: 0:02:42.974090
{'write_manifest': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dd4>, <DisassemblerInsn "mov" for 0x400ddc>, <DisassemblerInsn "mov" for 0x400de0>, <DisassemblerInsn "cmp" for 0x400de8>, <DisassemblerInsn "jae" for 0x400deb>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d8b>, <DisassemblerInsn "lea" for 0x400d93>, <DisassemblerInsn "mov" for 0x400d9b>, <DisassemblerInsn "lea" for 0x400da0>, <DisassemblerInsn "mov" for 0x400da7>, <DisassemblerInsn "call" for 0x400da9>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40136b>, <DisassemblerInsn "call" for 0x401373>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dbe>, <DisassemblerInsn "lea" for 0x400dc6>, <DisassemblerInsn "mov" for 0x400dcd>, <DisassemblerInsn "call" for 0x400dcf>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401348>, <DisassemblerInsn "lea" for 0x401350>, <DisassemblerInsn "mov" for 0x401357>, <DisassemblerInsn "call" for 0x401359>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401398>, <DisassemblerInsn "add" for 0x40139f>, <DisassemblerInsn "pop" for 0x4013a6>, <DisassemblerInsn "ret" for 0x4013a7>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400f5e>, <DisassemblerInsn "mov" for 0x400f66>, <DisassemblerInsn "lea" for 0x400f6b>, <DisassemblerInsn "mov" for 0x400f72>, <DisassemblerInsn "call" for 0x400f74>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401183>, <DisassemblerInsn "mov" for 0x40118b>, <DisassemblerInsn "mov" for 0x401193>, <DisassemblerInsn "mov" for 0x40119b>, <DisassemblerInsn "mov" for 0x40119f>, <DisassemblerInsn "lea" for 0x4011a3>, <DisassemblerInsn "mov" for 0x4011aa>, <DisassemblerInsn "call" for 0x4011ac>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400fba>, <DisassemblerInsn "cmp" for 0x400fc2>, <DisassemblerInsn "je" for 0x400fc6>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "add" for 0x4016c9>, <DisassemblerInsn "ret" for 0x4016cd>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400eb9>, <DisassemblerInsn "add" for 0x400ebd>, <DisassemblerInsn "mov" for 0x400ec0>, <DisassemblerInsn "jmp" for 0x400ec4>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "sub" for 0x401560>, <DisassemblerInsn "mov" for 0x401564>, <DisassemblerInsn "mov" for 0x401569>, <DisassemblerInsn "mov" for 0x40156e>, <DisassemblerInsn "mov" for 0x401572>, <DisassemblerInsn "mov" for 0x401576>, <DisassemblerInsn "mov" for 0x40157b>, <DisassemblerInsn "mov" for 0x401583>, <DisassemblerInsn "mov" for 0x40158b>, <DisassemblerInsn "cmp" for 0x401590>, <DisassemblerInsn "jg" for 0x401597>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dae>, <DisassemblerInsn "mov" for 0x400db2>, <DisassemblerInsn "jmp" for 0x400db9>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401332>, <DisassemblerInsn "lea" for 0x40133a>, <DisassemblerInsn "mov" for 0x401341>, <DisassemblerInsn "call" for 0x401343>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400eec>, <DisassemblerInsn "cmp" for 0x400ef4>, <DisassemblerInsn "je" for 0x400ef8>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ffa>, <DisassemblerInsn "mov" for 0x401002>, <DisassemblerInsn "mov" for 0x401006>, <DisassemblerInsn "cmp" for 0x40100e>, <DisassemblerInsn "jae" for 0x401011>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400f56>, <DisassemblerInsn "mov" for 0x400f5a>, <DisassemblerInsn "mov" for 0x400f5e>, <DisassemblerInsn "mov" for 0x400f66>, <DisassemblerInsn "lea" for 0x400f6b>, <DisassemblerInsn "mov" for 0x400f72>, <DisassemblerInsn "call" for 0x400f74>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d80>, <DisassemblerInsn "cmp" for 0x400d84>, <DisassemblerInsn "jge" for 0x400d89>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e9d>, <DisassemblerInsn "mov" for 0x400ea2>, <DisassemblerInsn "mov" for 0x400ea8>, <DisassemblerInsn "mov" for 0x400eac>, <DisassemblerInsn "add" for 0x400eb0>, <DisassemblerInsn "mov" for 0x400eb3>, <DisassemblerInsn "jmp" for 0x400eb7>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401017>, <DisassemblerInsn "mov" for 0x40101f>, <DisassemblerInsn "movsxd" for 0x401023>, <DisassemblerInsn "imul" for 0x401028>, <DisassemblerInsn "add" for 0x40102f>, <DisassemblerInsn "mov" for 0x401032>, <DisassemblerInsn "mov" for 0x401037>, <DisassemblerInsn "mov" for 0x40103f>, <DisassemblerInsn "movsxd" for 0x401043>, <DisassemblerInsn "mov" for 0x401048>, <DisassemblerInsn "mov" for 0x40104c>, <DisassemblerInsn "cmp" for 0x401050>, <DisassemblerInsn "je" for 0x401054>]'}, {'block_Idx': 94, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40138d>, <DisassemblerInsn "mov" for 0x401398>, <DisassemblerInsn "add" for 0x40139f>, <DisassemblerInsn "pop" for 0x4013a6>, <DisassemblerInsn "ret" for 0x4013a7>]'}, {'block_Idx': 84, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40115b>, <DisassemblerInsn "lea" for 0x401163>, <DisassemblerInsn "mov" for 0x40116a>, <DisassemblerInsn "call" for 0x40116c>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401115>, <DisassemblerInsn "mov" for 0x40111d>, <DisassemblerInsn "movsxd" for 0x401121>, <DisassemblerInsn "imul" for 0x401126>, <DisassemblerInsn "add" for 0x40112d>, <DisassemblerInsn "mov" for 0x401130>, <DisassemblerInsn "mov" for 0x401138>, <DisassemblerInsn "mov" for 0x40113f>, <DisassemblerInsn "mov" for 0x401147>, <DisassemblerInsn "mov" for 0x40114a>, <DisassemblerInsn "mov" for 0x401152>, <DisassemblerInsn "call" for 0x401156>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011b9>, <DisassemblerInsn "mov" for 0x4011bd>, <DisassemblerInsn "cmp" for 0x4011c5>, <DisassemblerInsn "jae" for 0x4011c8>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e1f>, <DisassemblerInsn "mov" for 0x400e24>, <DisassemblerInsn "mov" for 0x400e2b>, <DisassemblerInsn "mov" for 0x400e30>, <DisassemblerInsn "sub" for 0x400e36>, <DisassemblerInsn "movsxd" for 0x400e39>, <DisassemblerInsn "mov" for 0x400e3c>, <DisassemblerInsn "mov" for 0x400e40>, <DisassemblerInsn "mov" for 0x400e45>, <DisassemblerInsn "mov" for 0x400e4a>, <DisassemblerInsn "mov" for 0x400e51>, <DisassemblerInsn "add" for 0x400e56>, <DisassemblerInsn "mov" for 0x400e5d>, <DisassemblerInsn "mov" for 0x400e62>, <DisassemblerInsn "mov" for 0x400e6a>, <DisassemblerInsn "movsxd" for 0x400e6e>, <DisassemblerInsn "mov" for 0x400e73>, <DisassemblerInsn "mov" for 0x400e77>, <DisassemblerInsn "cmp" for 0x400e7b>, <DisassemblerInsn "jne" for 0x400e7f>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011b1>, <DisassemblerInsn "mov" for 0x4011b9>, <DisassemblerInsn "mov" for 0x4011bd>, <DisassemblerInsn "cmp" for 0x4011c5>, <DisassemblerInsn "jae" for 0x4011c8>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400f79>, <DisassemblerInsn "jne" for 0x400f81>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40135e>, <DisassemblerInsn "call" for 0x401366>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400df1>, <DisassemblerInsn "mov" for 0x400df9>, <DisassemblerInsn "movsxd" for 0x400dfd>, <DisassemblerInsn "imul" for 0x400e02>, <DisassemblerInsn "add" for 0x400e09>, <DisassemblerInsn "mov" for 0x400e0c>, <DisassemblerInsn "mov" for 0x400e11>, <DisassemblerInsn "cmp" for 0x400e16>, <DisassemblerInsn "jle" for 0x400e1d>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4012ec>, <DisassemblerInsn "mov" for 0x4012f4>, <DisassemblerInsn "movsxd" for 0x4012f8>, <DisassemblerInsn "imul" for 0x4012fd>, <DisassemblerInsn "add" for 0x401304>, <DisassemblerInsn "mov" for 0x401307>, <DisassemblerInsn "mov" for 0x40130f>, <DisassemblerInsn "mov" for 0x401316>, <DisassemblerInsn "mov" for 0x40131e>, <DisassemblerInsn "mov" for 0x401321>, <DisassemblerInsn "mov" for 0x401329>, <DisassemblerInsn "call" for 0x40132d>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011ce>, <DisassemblerInsn "mov" for 0x4011d6>, <DisassemblerInsn "movsxd" for 0x4011da>, <DisassemblerInsn "imul" for 0x4011df>, <DisassemblerInsn "add" for 0x4011e6>, <DisassemblerInsn "mov" for 0x4011e9>, <DisassemblerInsn "mov" for 0x4011ee>, <DisassemblerInsn "mov" for 0x4011f6>, <DisassemblerInsn "movsxd" for 0x4011fa>, <DisassemblerInsn "mov" for 0x4011ff>, <DisassemblerInsn "mov" for 0x401203>, <DisassemblerInsn "cmp" for 0x401207>, <DisassemblerInsn "je" for 0x40120b>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400eb7>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401002>, <DisassemblerInsn "mov" for 0x401006>, <DisassemblerInsn "cmp" for 0x40100e>, <DisassemblerInsn "jae" for 0x401011>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400fa4>, <DisassemblerInsn "lea" for 0x400fac>, <DisassemblerInsn "mov" for 0x400fb3>, <DisassemblerInsn "call" for 0x400fb5>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e62>, <DisassemblerInsn "mov" for 0x400e6a>, <DisassemblerInsn "movsxd" for 0x400e6e>, <DisassemblerInsn "mov" for 0x400e73>, <DisassemblerInsn "mov" for 0x400e77>, <DisassemblerInsn "cmp" for 0x400e7b>, <DisassemblerInsn "jne" for 0x400e7f>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400d52>, <DisassemblerInsn "mov" for 0x400d5a>, <DisassemblerInsn "add" for 0x400d62>, <DisassemblerInsn "lea" for 0x400d69>, <DisassemblerInsn "mov" for 0x400d71>, <DisassemblerInsn "xor" for 0x400d76>, <DisassemblerInsn "mov" for 0x400d78>, <DisassemblerInsn "call" for 0x400d7b>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400efa>, <DisassemblerInsn "mov" for 0x400efe>, <DisassemblerInsn "cmp" for 0x400f06>, <DisassemblerInsn "jle" for 0x400f09>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ed3>, <DisassemblerInsn "mov" for 0x400edc>, <DisassemblerInsn "mov" for 0x400ee4>, <DisassemblerInsn "mov" for 0x400eec>, <DisassemblerInsn "cmp" for 0x400ef4>, <DisassemblerInsn "je" for 0x400ef8>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "lea" for 0x401378>, <DisassemblerInsn "lea" for 0x401380>, <DisassemblerInsn "call" for 0x401388>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400ec9>, <DisassemblerInsn "jne" for 0x400ed1>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ddc>, <DisassemblerInsn "mov" for 0x400de0>, <DisassemblerInsn "cmp" for 0x400de8>, <DisassemblerInsn "jae" for 0x400deb>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400f4e>, <DisassemblerInsn "mov" for 0x400f52>, <DisassemblerInsn "mov" for 0x400f56>, <DisassemblerInsn "mov" for 0x400f5a>, <DisassemblerInsn "mov" for 0x400f5e>, <DisassemblerInsn "mov" for 0x400f66>, <DisassemblerInsn "lea" for 0x400f6b>, <DisassemblerInsn "mov" for 0x400f72>, <DisassemblerInsn "call" for 0x400f74>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400fcc>, <DisassemblerInsn "mov" for 0x400fd4>, <DisassemblerInsn "mov" for 0x400fdc>, <DisassemblerInsn "mov" for 0x400fe4>, <DisassemblerInsn "mov" for 0x400fe8>, <DisassemblerInsn "lea" for 0x400fec>, <DisassemblerInsn "mov" for 0x400ff3>, <DisassemblerInsn "call" for 0x400ff5>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401171>, <DisassemblerInsn "cmp" for 0x401179>, <DisassemblerInsn "je" for 0x40117d>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400f83>, <DisassemblerInsn "mov" for 0x400f8b>, <DisassemblerInsn "mov" for 0x400f93>, <DisassemblerInsn "lea" for 0x400f96>, <DisassemblerInsn "mov" for 0x400f9d>, <DisassemblerInsn "call" for 0x400f9f>]'}], 'cfg_block_detailed_info': [{'block_Idx': 12, 'blockInsts': ['<mov~~dword ptr [rsp + 0x78], 0>', '<mov~~eax, dword ptr [rsp + 0x78]>', '<mov~~rcx, qword ptr [rsp + 0x8a0]>', '<cmp~~eax, dword ptr [rcx + 0x2c]>', '<jae~~0x400ec9>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x8a0]>', '<lea~~rcx, [rsp + 0x80]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x16da]>', '<mov~~al, 0>', '<call~~0x500018>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x888]>', '<call~~0x5000c8>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x888]>', '<lea~~rsi, [rip + 0x16d3]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x888]>', '<lea~~rsi, [rip + 0x1400]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x8ac]>', '<add~~rsp, 0x8b0>', '<pop~~rbx>', '<ret~~>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x888]>', '<mov~~rdx, qword ptr [rsp + 0x60]>', '<lea~~rsi, [rip + 0x1556]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~dword ptr [rsp + 0x3c], 0xffffffff>', '<mov~~dword ptr [rsp + 0x38], 0>', '<mov~~rdi, qword ptr [rsp + 0x888]>', '<mov~~edx, dword ptr [rsp + 0x68]>', '<mov~~ecx, dword ptr [rsp + 0x70]>', '<lea~~rsi, [rip + 0x1498]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x890]>', '<cmp~~dword ptr [rax + 0x28], 0>', '<je~~0x401171>']}, {'block_Idx': 81, 'blockInsts': ['<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x78]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x78], eax>', '<jmp~~0x400ddc>']}, {'block_Idx': 63, 'blockInsts': ['<sub~~rsp, 0x38>', '<mov~~qword ptr [rsp + 0x30], rdi>', '<mov~~qword ptr [rsp + 0x28], rsi>', '<mov~~dword ptr [rsp + 0x24], edx>', '<mov~~dword ptr [rsp + 0x20], ecx>', '<mov~~dword ptr [rsp + 0x1c], r8d>', '<mov~~dword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x10], 0>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<cmp~~dword ptr [rax + 0x8450], 0>', '<jg~~0x40159e>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x7c]>', '<mov~~dword ptr [rsp + 0x8ac], eax>', '<jmp~~0x401398>']}, {'block_Idx': 88, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x888]>', '<lea~~rsi, [rip + 0x12f1]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x890]>', '<cmp~~dword ptr [rax + 8], 0>', '<je~~0x400f5e>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~dword ptr [rsp + 0x78], 0>', '<mov~~eax, dword ptr [rsp + 0x78]>', '<mov~~rcx, qword ptr [rsp + 0x8a0]>', '<cmp~~eax, dword ptr [rcx + 0x2c]>', '<jae~~0x401115>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x28]>', '<mov~~dword ptr [rsp + 0x70], eax>', '<mov~~rdi, qword ptr [rsp + 0x888]>', '<mov~~rdx, qword ptr [rsp + 0x60]>', '<lea~~rsi, [rip + 0x1556]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~dword ptr [rsp + 0x7c], eax>', '<cmp~~dword ptr [rsp + 0x7c], 0>', '<jge~~0x400dbe>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~eax, dword ptr [rax + 0x8450]>', '<mov~~dword ptr [rsp + 0x70], eax>', '<mov~~eax, dword ptr [rsp + 0x68]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x68], eax>', '<jmp~~0x400eb9>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x890]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<movsxd~~rcx, dword ptr [rsp + 0x78]>', '<imul~~rcx, rcx, 0x8480>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x40], rax>', '<mov~~rax, qword ptr [rsp + 0x8a0]>', '<mov~~rax, qword ptr [rax + 0x30]>', '<movsxd~~rcx, dword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0xc], 0>', '<je~~0x40105b>']}, {'block_Idx': 94, 'blockInsts': ['<mov~~dword ptr [rsp + 0x8ac], 0>', '<mov~~eax, dword ptr [rsp + 0x8ac]>', '<add~~rsp, 0x8b0>', '<pop~~rbx>', '<ret~~>']}, {'block_Idx': 84, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x888]>', '<lea~~rsi, [rip + 0x14c8]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 53, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x890]>', '<mov~~rdi, qword ptr [rax + 0x20]>', '<movsxd~~rax, dword ptr [rsp + 0x4c]>', '<imul~~rax, rax, 0x8480>', '<add~~rdi, rax>', '<mov~~rsi, qword ptr [rsp + 0x888]>', '<mov~~edx, dword ptr [rsp + 0x89c]>', '<mov~~rax, qword ptr [rsp + 0x890]>', '<mov~~ecx, dword ptr [rax + 0x10]>', '<mov~~rax, qword ptr [rsp + 0x890]>', '<mov~~r8d, dword ptr [rax + 8]>', '<call~~0x401560>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x78]>', '<mov~~rcx, qword ptr [rsp + 0x8a0]>', '<cmp~~eax, dword ptr [rcx + 0x2c]>', '<jae~~0x4012ec>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rax + 0x8460]>', '<mov~~rcx, qword ptr [rsp + 0x58]>', '<mov~~ecx, dword ptr [rcx + 0x8450]>', '<sub~~ecx, 1>', '<movsxd~~rcx, ecx>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~qword ptr [rsp + 0x50], rax>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<mov~~rax, qword ptr [rax + 0x800]>', '<mov~~rcx, qword ptr [rsp + 0x50]>', '<add~~rax, qword ptr [rcx + 0x808]>', '<mov~~qword ptr [rsp + 0x60], rax>', '<mov~~rax, qword ptr [rsp + 0x8a0]>', '<mov~~rax, qword ptr [rax + 0x30]>', '<movsxd~~rcx, dword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0xc], 0>', '<jne~~0x400e9d>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~dword ptr [rsp + 0x78], 0>', '<mov~~eax, dword ptr [rsp + 0x78]>', '<mov~~rcx, qword ptr [rsp + 0x8a0]>', '<cmp~~eax, dword ptr [rcx + 0x2c]>', '<jae~~0x4012ec>']}, {'block_Idx': 30, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x89c], 0>', '<jne~~0x400fa4>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x888]>', '<call~~0x500058>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x890]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<movsxd~~rcx, dword ptr [rsp + 0x78]>', '<imul~~rcx, rcx, 0x8480>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x58], rax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<cmp~~dword ptr [rax + 0x8450], 0>', '<jle~~0x400e62>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x890]>', '<mov~~rdi, qword ptr [rax + 0x20]>', '<movsxd~~rax, dword ptr [rsp + 0x3c]>', '<imul~~rax, rax, 0x8480>', '<add~~rdi, rax>', '<mov~~rsi, qword ptr [rsp + 0x888]>', '<mov~~edx, dword ptr [rsp + 0x89c]>', '<mov~~rax, qword ptr [rsp + 0x890]>', '<mov~~ecx, dword ptr [rax + 0x10]>', '<mov~~rax, qword ptr [rsp + 0x890]>', '<mov~~r8d, dword ptr [rax + 8]>', '<call~~0x401560>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x890]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<movsxd~~rcx, dword ptr [rsp + 0x78]>', '<imul~~rcx, rcx, 0x8480>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x30], rax>', '<mov~~rax, qword ptr [rsp + 0x8a0]>', '<mov~~rax, qword ptr [rax + 0x30]>', '<movsxd~~rcx, dword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0xc], 1>', '<je~~0x401212>']}, {'block_Idx': 24, 'blockInsts': ['<jmp~~0x400eb9>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x78]>', '<mov~~rcx, qword ptr [rsp + 0x8a0]>', '<cmp~~eax, dword ptr [rcx + 0x2c]>', '<jae~~0x401115>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x888]>', '<lea~~rsi, [rip + 0x159b]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x8a0]>', '<mov~~rax, qword ptr [rax + 0x30]>', '<movsxd~~rcx, dword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0xc], 0>', '<jne~~0x400e9d>']}, {'block_Idx': 4, 'blockInsts': ['<lea~~rsi, [rsp + 0x80]>', '<mov~~rcx, qword ptr [rsp + 0x8a0]>', '<add~~rcx, 0x4b0>', '<lea~~rdi, [rsp + 0x888]>', '<mov~~edx, 2>', '<xor~~eax, eax>', '<mov~~r8d, eax>', '<call~~0x5000b8>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x74]>', '<mov~~rcx, qword ptr [rsp + 0x890]>', '<cmp~~eax, dword ptr [rcx + 8]>', '<jle~~0x400f1c>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~qword ptr [rsp + 0x60], 0>', '<mov~~dword ptr [rsp + 0x70], 0>', '<mov~~dword ptr [rsp + 0x74], 0>', '<mov~~rax, qword ptr [rsp + 0x890]>', '<cmp~~dword ptr [rax + 8], 0>', '<je~~0x400f5e>']}, {'block_Idx': 78, 'blockInsts': ['<lea~~rdi, [rsp + 0x80]>', '<lea~~rsi, [rsp + 0x480]>', '<call~~0x5000d0>']}, {'block_Idx': 15, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x89c], 0>', '<jne~~0x400eec>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x78]>', '<mov~~rcx, qword ptr [rsp + 0x8a0]>', '<cmp~~eax, dword ptr [rcx + 0x2c]>', '<jae~~0x400ec9>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x70]>', '<mov~~dword ptr [rsp + 0x28], eax>', '<mov~~eax, dword ptr [rsp + 0x28]>', '<mov~~dword ptr [rsp + 0x70], eax>', '<mov~~rdi, qword ptr [rsp + 0x888]>', '<mov~~rdx, qword ptr [rsp + 0x60]>', '<lea~~rsi, [rip + 0x1556]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~dword ptr [rsp + 0x4c], 0xffffffff>', '<mov~~dword ptr [rsp + 0x48], 0>', '<mov~~rdi, qword ptr [rsp + 0x888]>', '<mov~~edx, dword ptr [rsp + 0x6c]>', '<mov~~ecx, dword ptr [rsp + 0x74]>', '<lea~~rsi, [rip + 0x155e]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 42, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x890]>', '<cmp~~dword ptr [rax + 0x2c], 0>', '<je~~0x401348>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x888]>', '<mov~~rax, qword ptr [rsp + 0x890]>', '<mov~~edx, dword ptr [rax + 0x10]>', '<lea~~rsi, [rip + 0x1572]>', '<mov~~al, 0>', '<call~~0x5000c0>']}], 'cfg_edge_info': [(29, 14), (80, 56), (25, 29), (42, 45), (41, 43), (18, 23), (81, 88), (53, 84), (4, 6), (51, 56), (43, 49), (14, 16), (21, 25), (8, 12), (37, 30), (49, 53), (6, 8), (41, 42), (81, 84), (88, 44), (51, 55), (42, 44), (18, 22), (35, 41), (44, 50), (12, 15), (50, 60), (56, 88), (49, 52), (78, 94), (19, 23), (11, 13), (45, 51), (30, 35), (6, 7), (24, 25), (15, 18), (15, 19), (56, 63), (29, 15), (74, 53), (12, 14), (31, 30), (14, 17), (22, 30), (84, 42), (34, 35), (60, 78), (19, 22), (7, 11), (53, 63), (30, 34)], 'cdg_edge_info': [(6, 12), (29, 14), (42, 45), (41, 43), (41, 49), (6, 15), (6, 30), (42, 51), (6, 94), (29, 29), (6, 42), (12, 25), (6, 60), (6, 11), (6, 8), (6, 78), (29, 25), (42, 56), (6, 35), (6, 44), (6, 41), (6, 50), (41, 84), (6, 7), (6, 13), (15, 19), (12, 14), (41, 53), (12, 29), (42, 88), (15, 18), (30, 34)], 'ddg_edge_info': [(35, 88), (35, 42), (12, 25), (8, 18), (84, 50), (6, 11), (41, 42), (18, 19), (35, 44), (34, 60), (8, 50), (7, 94), (12, 29), (60, 78), (84, 45), (8, 25), (30, 34), (8, 34), (34, 53), (25, 29), (8, 43), (35, 60), (84, 56), (8, 45), (88, 44), (35, 53), (8, 84), (8, 29), (30, 56), (8, 56), (41, 53), (84, 88), (84, 42), (84, 60), (34, 41), (34, 50), (7, 11), (84, 44), (88, 60), (8, 15), (34, 43), (8, 88), (50, 60), (35, 41), (35, 50), (18, 43), (78, 94), (34, 45), (30, 35), (8, 35), (8, 44), (12, 14), (35, 43), (34, 84), (18, 45), (8, 19), (25, 14), (45, 56), (34, 56), (43, 49), (35, 45), (8, 12), (35, 84), (44, 50), (88, 50), (8, 60), (35, 56), (34, 88), (8, 14), (34, 42), (45, 51), (41, 56), (43, 53), (8, 53), (30, 53), (34, 35), (34, 44), (11, 94)]}]}
{'write_manifest': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%rbx'}, {'instIndex': 1, 'instruction': 'subq\t$0x8b0, %rsp                     # imm = 0x8B0'}, {'instIndex': 2, 'instruction': 'movq\t%rdi, 0x8a0(%rsp)'}, {'instIndex': 3, 'instruction': 'movl\t%esi, 0x89c(%rsp)'}, {'instIndex': 4, 'instruction': 'movq\t0x8a0(%rsp), %rax'}, {'instIndex': 5, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 6, 'instruction': 'movq\t%rax, 0x890(%rsp)'}, {'instIndex': 7, 'instruction': 'movl\t$0, 0x74(%rsp)'}, {'instIndex': 8, 'instruction': 'movl\t$0, 0x70(%rsp)'}, {'instIndex': 9, 'instruction': 'movl\t$0, 0x6c(%rsp)'}, {'instIndex': 10, 'instruction': 'movl\t$0, 0x68(%rsp)'}, {'instIndex': 11, 'instruction': 'movq\t$0, 0x60(%rsp)'}, {'instIndex': 12, 'instruction': 'leaq\t0x480(%rsp), %rdi'}, {'instIndex': 13, 'instruction': 'movq\t0x8a0(%rsp), %rcx'}, {'instIndex': 14, 'instruction': 'addq\t$0x38, %rcx'}, {'instIndex': 15, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 16, 'instruction': 'leaq\t.L.str.0x20(%rip), %rdx'}, {'instIndex': 17, 'instruction': 'movb\t$0, %al'}, {'instIndex': 18, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 19, 'instruction': 'leaq\t0x80(%rsp), %rdi'}, {'instIndex': 20, 'instruction': 'movq\t0x8a0(%rsp), %rcx'}, {'instIndex': 21, 'instruction': 'addq\t$0x38, %rcx'}, {'instIndex': 22, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 23, 'instruction': 'leaq\t.L.str.0x21(%rip), %rdx'}, {'instIndex': 24, 'instruction': 'movb\t$0, %al'}, {'instIndex': 25, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 26, 'instruction': 'leaq\t0x80(%rsp), %rsi'}, {'instIndex': 27, 'instruction': 'movq\t0x8a0(%rsp), %rcx'}, {'instIndex': 28, 'instruction': 'addq\t$0x4b0, %rcx                     # imm = 0x4B0'}, {'instIndex': 29, 'instruction': 'leaq\t0x888(%rsp), %rdi'}, {'instIndex': 30, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 31, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 32, 'instruction': 'movl\t%eax, %r8d'}, {'instIndex': 33, 'instruction': 'callq\tavio_open2@PLT'}, {'instIndex': 34, 'instruction': 'movl\t%eax, 0x7c(%rsp)'}, {'instIndex': 35, 'instruction': 'cmpl\t$0, 0x7c(%rsp)'}, {'instIndex': 36, 'instruction': 'jge\t.LBB6_2'}, {'instIndex': 37, 'instruction': 'movq\t0x8a0(%rsp), %rdi'}, {'instIndex': 38, 'instruction': 'leaq\t0x80(%rsp), %rcx'}, {'instIndex': 39, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 40, 'instruction': 'leaq\t.L.str.0x22(%rip), %rdx'}, {'instIndex': 41, 'instruction': 'movb\t$0, %al'}, {'instIndex': 42, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 43, 'instruction': 'movl\t0x7c(%rsp), %eax'}, {'instIndex': 44, 'instruction': 'movl\t%eax, 0x8ac(%rsp)'}, {'instIndex': 45, 'instruction': 'jmp\t.LBB6_40'}, {'instIndex': 46, 'instruction': 'movq\t0x888(%rsp), %rdi'}, {'instIndex': 47, 'instruction': 'leaq\t.L.str.0x23(%rip), %rsi'}, {'instIndex': 48, 'instruction': 'movb\t$0, %al'}, {'instIndex': 49, 'instruction': 'callq\tavio_printf@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 325, 'instruction': 'movq\t0x888(%rsp), %rdi'}, {'instIndex': 326, 'instruction': 'leaq\t.L.str.0x2c(%rip), %rsi'}, {'instIndex': 327, 'instruction': 'movb\t$0, %al'}, {'instIndex': 328, 'instruction': 'callq\tavio_printf@PLT'}, {'instIndex': 329, 'instruction': 'movq\t0x888(%rsp), %rdi'}, {'instIndex': 330, 'instruction': 'callq\tavio_flush@PLT'}, {'instIndex': 331, 'instruction': 'movq\t0x888(%rsp), %rdi'}, {'instIndex': 332, 'instruction': 'callq\tavio_close@PLT'}, {'instIndex': 333, 'instruction': 'leaq\t0x80(%rsp), %rdi'}, {'instIndex': 334, 'instruction': 'leaq\t0x480(%rsp), %rsi'}, {'instIndex': 335, 'instruction': 'callq\trename@PLT'}, {'instIndex': 336, 'instruction': 'movl\t$0, 0x8ac(%rsp)'}, {'instIndex': 337, 'instruction': 'movl\t0x8ac(%rsp), %eax'}, {'instIndex': 338, 'instruction': 'addq\t$0x8b0, %rsp                     # imm = 0x8B0'}, {'instIndex': 339, 'instruction': 'popq\t%rbx'}, {'instIndex': 340, 'instruction': 'retq'}]}]}
The case of compiler clang with optimization O0.
Patched source code file: smoothstreamingenc.c
Patched function: 1---static int write_manifest 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_after/O0/smoothstreamingenc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_after/O0/smoothstreamingenc.s---write_manifest---after
function id: 6
function flag: True
There are 341 instructions for function: write_manifest in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '210', 'end': 224}, 'before': {'start': '210', 'end': 223}}}, {'modifyIndex': 2, 'line': {'after': {'start': '279', 'end': 285}, 'before': {'start': '278', 'end': 283}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%rbx'}, {'instIndex': 1, 'instruction': 'subq\t$0x8b0, %rsp                     # imm = 0x8B0'}, {'instIndex': 2, 'instruction': 'movq\t%rdi, 0x8a0(%rsp)'}, {'instIndex': 3, 'instruction': 'movl\t%esi, 0x89c(%rsp)'}, {'instIndex': 4, 'instruction': 'movq\t0x8a0(%rsp), %rax'}, {'instIndex': 5, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 6, 'instruction': 'movq\t%rax, 0x890(%rsp)'}, {'instIndex': 7, 'instruction': 'movl\t$0, 0x74(%rsp)'}, {'instIndex': 8, 'instruction': 'movl\t$0, 0x70(%rsp)'}, {'instIndex': 9, 'instruction': 'movl\t$0, 0x6c(%rsp)'}, {'instIndex': 10, 'instruction': 'movl\t$0, 0x68(%rsp)'}, {'instIndex': 11, 'instruction': 'movq\t$0, 0x60(%rsp)'}, {'instIndex': 12, 'instruction': 'leaq\t0x480(%rsp), %rdi'}, {'instIndex': 13, 'instruction': 'movq\t0x8a0(%rsp), %rcx'}, {'instIndex': 14, 'instruction': 'addq\t$0x38, %rcx'}, {'instIndex': 15, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 16, 'instruction': 'leaq\t.L.str.0x20(%rip), %rdx'}, {'instIndex': 17, 'instruction': 'movb\t$0, %al'}, {'instIndex': 18, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 19, 'instruction': 'leaq\t0x80(%rsp), %rdi'}, {'instIndex': 20, 'instruction': 'movq\t0x8a0(%rsp), %rcx'}, {'instIndex': 21, 'instruction': 'addq\t$0x38, %rcx'}, {'instIndex': 22, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 23, 'instruction': 'leaq\t.L.str.0x21(%rip), %rdx'}, {'instIndex': 24, 'instruction': 'movb\t$0, %al'}, {'instIndex': 25, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 26, 'instruction': 'leaq\t0x80(%rsp), %rsi'}, {'instIndex': 27, 'instruction': 'movq\t0x8a0(%rsp), %rcx'}, {'instIndex': 28, 'instruction': 'addq\t$0x4b0, %rcx                     # imm = 0x4B0'}, {'instIndex': 29, 'instruction': 'leaq\t0x888(%rsp), %rdi'}, {'instIndex': 30, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 31, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 32, 'instruction': 'movl\t%eax, %r8d'}, {'instIndex': 33, 'instruction': 'callq\tavio_open2@PLT'}, {'instIndex': 34, 'instruction': 'movl\t%eax, 0x7c(%rsp)'}, {'instIndex': 35, 'instruction': 'cmpl\t$0, 0x7c(%rsp)'}, {'instIndex': 36, 'instruction': 'jge\t.LBB6_2'}, {'instIndex': 37, 'instruction': 'movq\t0x8a0(%rsp), %rdi'}, {'instIndex': 38, 'instruction': 'leaq\t0x80(%rsp), %rcx'}, {'instIndex': 39, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 40, 'instruction': 'leaq\t.L.str.0x22(%rip), %rdx'}, {'instIndex': 41, 'instruction': 'movb\t$0, %al'}, {'instIndex': 42, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 43, 'instruction': 'movl\t0x7c(%rsp), %eax'}, {'instIndex': 44, 'instruction': 'movl\t%eax, 0x8ac(%rsp)'}, {'instIndex': 45, 'instruction': 'jmp\t.LBB6_40'}, {'instIndex': 46, 'instruction': 'movq\t0x888(%rsp), %rdi'}, {'instIndex': 47, 'instruction': 'leaq\t.L.str.0x23(%rip), %rsi'}, {'instIndex': 48, 'instruction': 'movb\t$0, %al'}, {'instIndex': 49, 'instruction': 'callq\tavio_printf@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 325, 'instruction': 'movq\t0x888(%rsp), %rdi'}, {'instIndex': 326, 'instruction': 'leaq\t.L.str.0x2c(%rip), %rsi'}, {'instIndex': 327, 'instruction': 'movb\t$0, %al'}, {'instIndex': 328, 'instruction': 'callq\tavio_printf@PLT'}, {'instIndex': 329, 'instruction': 'movq\t0x888(%rsp), %rdi'}, {'instIndex': 330, 'instruction': 'callq\tavio_flush@PLT'}, {'instIndex': 331, 'instruction': 'movq\t0x888(%rsp), %rdi'}, {'instIndex': 332, 'instruction': 'callq\tavio_close@PLT'}, {'instIndex': 333, 'instruction': 'leaq\t0x80(%rsp), %rdi'}, {'instIndex': 334, 'instruction': 'leaq\t0x480(%rsp), %rsi'}, {'instIndex': 335, 'instruction': 'callq\trename@PLT'}, {'instIndex': 336, 'instruction': 'movl\t$0, 0x8ac(%rsp)'}, {'instIndex': 337, 'instruction': 'movl\t0x8ac(%rsp), %eax'}, {'instIndex': 338, 'instruction': 'addq\t$0x8b0, %rsp                     # imm = 0x8B0'}, {'instIndex': 339, 'instruction': 'popq\t%rbx'}, {'instIndex': 340, 'instruction': 'retq'}]}]
Patched function: 1---static int write_manifest 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_after/O0/smoothstreamingenc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_after/O0/smoothstreamingenc.s---write_manifest---after
function id: 6
function flag: True
There are 341 instructions for function: write_manifest in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '210', 'end': 224}, 'before': {'start': '210', 'end': 223}}}, {'modifyIndex': 2, 'line': {'after': {'start': '279', 'end': 285}, 'before': {'start': '278', 'end': 283}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%rbx'}, {'instIndex': 1, 'instruction': 'subq\t$0x8b0, %rsp                     # imm = 0x8B0'}, {'instIndex': 2, 'instruction': 'movq\t%rdi, 0x8a0(%rsp)'}, {'instIndex': 3, 'instruction': 'movl\t%esi, 0x89c(%rsp)'}, {'instIndex': 4, 'instruction': 'movq\t0x8a0(%rsp), %rax'}, {'instIndex': 5, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 6, 'instruction': 'movq\t%rax, 0x890(%rsp)'}, {'instIndex': 7, 'instruction': 'movl\t$0, 0x74(%rsp)'}, {'instIndex': 8, 'instruction': 'movl\t$0, 0x70(%rsp)'}, {'instIndex': 9, 'instruction': 'movl\t$0, 0x6c(%rsp)'}, {'instIndex': 10, 'instruction': 'movl\t$0, 0x68(%rsp)'}, {'instIndex': 11, 'instruction': 'movq\t$0, 0x60(%rsp)'}, {'instIndex': 12, 'instruction': 'leaq\t0x480(%rsp), %rdi'}, {'instIndex': 13, 'instruction': 'movq\t0x8a0(%rsp), %rcx'}, {'instIndex': 14, 'instruction': 'addq\t$0x38, %rcx'}, {'instIndex': 15, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 16, 'instruction': 'leaq\t.L.str.0x20(%rip), %rdx'}, {'instIndex': 17, 'instruction': 'movb\t$0, %al'}, {'instIndex': 18, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 19, 'instruction': 'leaq\t0x80(%rsp), %rdi'}, {'instIndex': 20, 'instruction': 'movq\t0x8a0(%rsp), %rcx'}, {'instIndex': 21, 'instruction': 'addq\t$0x38, %rcx'}, {'instIndex': 22, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 23, 'instruction': 'leaq\t.L.str.0x21(%rip), %rdx'}, {'instIndex': 24, 'instruction': 'movb\t$0, %al'}, {'instIndex': 25, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 26, 'instruction': 'leaq\t0x80(%rsp), %rsi'}, {'instIndex': 27, 'instruction': 'movq\t0x8a0(%rsp), %rcx'}, {'instIndex': 28, 'instruction': 'addq\t$0x4b0, %rcx                     # imm = 0x4B0'}, {'instIndex': 29, 'instruction': 'leaq\t0x888(%rsp), %rdi'}, {'instIndex': 30, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 31, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 32, 'instruction': 'movl\t%eax, %r8d'}, {'instIndex': 33, 'instruction': 'callq\tavio_open2@PLT'}, {'instIndex': 34, 'instruction': 'movl\t%eax, 0x7c(%rsp)'}, {'instIndex': 35, 'instruction': 'cmpl\t$0, 0x7c(%rsp)'}, {'instIndex': 36, 'instruction': 'jge\t.LBB6_2'}, {'instIndex': 37, 'instruction': 'movq\t0x8a0(%rsp), %rdi'}, {'instIndex': 38, 'instruction': 'leaq\t0x80(%rsp), %rcx'}, {'instIndex': 39, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 40, 'instruction': 'leaq\t.L.str.0x22(%rip), %rdx'}, {'instIndex': 41, 'instruction': 'movb\t$0, %al'}, {'instIndex': 42, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 43, 'instruction': 'movl\t0x7c(%rsp), %eax'}, {'instIndex': 44, 'instruction': 'movl\t%eax, 0x8ac(%rsp)'}, {'instIndex': 45, 'instruction': 'jmp\t.LBB6_40'}, {'instIndex': 46, 'instruction': 'movq\t0x888(%rsp), %rdi'}, {'instIndex': 47, 'instruction': 'leaq\t.L.str.0x23(%rip), %rsi'}, {'instIndex': 48, 'instruction': 'movb\t$0, %al'}, {'instIndex': 49, 'instruction': 'callq\tavio_printf@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 325, 'instruction': 'movq\t0x888(%rsp), %rdi'}, {'instIndex': 326, 'instruction': 'leaq\t.L.str.0x2c(%rip), %rsi'}, {'instIndex': 327, 'instruction': 'movb\t$0, %al'}, {'instIndex': 328, 'instruction': 'callq\tavio_printf@PLT'}, {'instIndex': 329, 'instruction': 'movq\t0x888(%rsp), %rdi'}, {'instIndex': 330, 'instruction': 'callq\tavio_flush@PLT'}, {'instIndex': 331, 'instruction': 'movq\t0x888(%rsp), %rdi'}, {'instIndex': 332, 'instruction': 'callq\tavio_close@PLT'}, {'instIndex': 333, 'instruction': 'leaq\t0x80(%rsp), %rdi'}, {'instIndex': 334, 'instruction': 'leaq\t0x480(%rsp), %rsi'}, {'instIndex': 335, 'instruction': 'callq\trename@PLT'}, {'instIndex': 336, 'instruction': 'movl\t$0, 0x8ac(%rsp)'}, {'instIndex': 337, 'instruction': 'movl\t0x8ac(%rsp), %eax'}, {'instIndex': 338, 'instruction': 'addq\t$0x8b0, %rsp                     # imm = 0x8B0'}, {'instIndex': 339, 'instruction': 'popq\t%rbx'}, {'instIndex': 340, 'instruction': 'retq'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_after/O0/smoothstreamingenc.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_after/O0/smoothstreamingenc.o---after
The extraction of function: write_manifest
Analyzing the binaries to generate subCFGs from patched function ...
It has 423 nodes and 763 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 341 instructions in binary file.
[4197552, 4197675, 4197714, 4197760, 4197771, 4197806, 4197822]
[4199240, 4199262, 4199275, 4199288, 4199309, 4199320]
The execution time of patched subCFG information extraction via angr: 0:00:00.595323
{'write_manifest': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dbe>, <DisassemblerInsn "lea" for 0x400dc6>, <DisassemblerInsn "mov" for 0x400dcd>, <DisassemblerInsn "call" for 0x400dcf>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d8b>, <DisassemblerInsn "lea" for 0x400d93>, <DisassemblerInsn "mov" for 0x400d9b>, <DisassemblerInsn "lea" for 0x400da0>, <DisassemblerInsn "mov" for 0x400da7>, <DisassemblerInsn "call" for 0x400da9>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x400cb0>, <DisassemblerInsn "sub" for 0x400cb1>, <DisassemblerInsn "mov" for 0x400cb8>, <DisassemblerInsn "mov" for 0x400cc0>, <DisassemblerInsn "mov" for 0x400cc7>, <DisassemblerInsn "mov" for 0x400ccf>, <DisassemblerInsn "mov" for 0x400cd3>, <DisassemblerInsn "mov" for 0x400cdb>, <DisassemblerInsn "mov" for 0x400ce3>, <DisassemblerInsn "mov" for 0x400ceb>, <DisassemblerInsn "mov" for 0x400cf3>, <DisassemblerInsn "mov" for 0x400cfb>, <DisassemblerInsn "lea" for 0x400d04>, <DisassemblerInsn "mov" for 0x400d0c>, <DisassemblerInsn "add" for 0x400d14>, <DisassemblerInsn "mov" for 0x400d18>, <DisassemblerInsn "lea" for 0x400d1d>, <DisassemblerInsn "mov" for 0x400d24>, <DisassemblerInsn "call" for 0x400d26>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dd4>, <DisassemblerInsn "mov" for 0x400ddc>, <DisassemblerInsn "mov" for 0x400de0>, <DisassemblerInsn "cmp" for 0x400de8>, <DisassemblerInsn "jae" for 0x400deb>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dae>, <DisassemblerInsn "mov" for 0x400db2>, <DisassemblerInsn "jmp" for 0x400db9>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400d52>, <DisassemblerInsn "mov" for 0x400d5a>, <DisassemblerInsn "add" for 0x400d62>, <DisassemblerInsn "lea" for 0x400d69>, <DisassemblerInsn "mov" for 0x400d71>, <DisassemblerInsn "xor" for 0x400d76>, <DisassemblerInsn "mov" for 0x400d78>, <DisassemblerInsn "call" for 0x400d7b>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400d2b>, <DisassemblerInsn "mov" for 0x400d33>, <DisassemblerInsn "add" for 0x400d3b>, <DisassemblerInsn "mov" for 0x400d3f>, <DisassemblerInsn "lea" for 0x400d44>, <DisassemblerInsn "mov" for 0x400d4b>, <DisassemblerInsn "call" for 0x400d4d>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401398>, <DisassemblerInsn "add" for 0x40139f>, <DisassemblerInsn "pop" for 0x4013a6>, <DisassemblerInsn "ret" for 0x4013a7>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d80>, <DisassemblerInsn "cmp" for 0x400d84>, <DisassemblerInsn "jge" for 0x400d89>]'}], 'cfg_block_detailed_info': [{'block_Idx': 5, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x888]>', '<lea~~rsi, [rip + 0x16d3]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x8a0]>', '<lea~~rcx, [rsp + 0x80]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x16da]>', '<mov~~al, 0>', '<call~~0x500018>']}, {'block_Idx': 0, 'blockInsts': ['<push~~rbx>', '<sub~~rsp, 0x8b0>', '<mov~~qword ptr [rsp + 0x8a0], rdi>', '<mov~~dword ptr [rsp + 0x89c], esi>', '<mov~~rax, qword ptr [rsp + 0x8a0]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 0x890], rax>', '<mov~~dword ptr [rsp + 0x74], 0>', '<mov~~dword ptr [rsp + 0x70], 0>', '<mov~~dword ptr [rsp + 0x6c], 0>', '<mov~~dword ptr [rsp + 0x68], 0>', '<mov~~qword ptr [rsp + 0x60], 0>', '<lea~~rdi, [rsp + 0x480]>', '<mov~~rcx, qword ptr [rsp + 0x8a0]>', '<add~~rcx, 0x38>', '<mov~~esi, 0x400>', '<lea~~rdx, [rip + 0x1741]>', '<mov~~al, 0>', '<call~~0x500020>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~dword ptr [rsp + 0x78], 0>', '<mov~~eax, dword ptr [rsp + 0x78]>', '<mov~~rcx, qword ptr [rsp + 0x8a0]>', '<cmp~~eax, dword ptr [rcx + 0x2c]>', '<jae~~0x400ec9>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x7c]>', '<mov~~dword ptr [rsp + 0x8ac], eax>', '<jmp~~0x401398>']}, {'block_Idx': 2, 'blockInsts': ['<lea~~rsi, [rsp + 0x80]>', '<mov~~rcx, qword ptr [rsp + 0x8a0]>', '<add~~rcx, 0x4b0>', '<lea~~rdi, [rsp + 0x888]>', '<mov~~edx, 2>', '<xor~~eax, eax>', '<mov~~r8d, eax>', '<call~~0x5000b8>']}, {'block_Idx': 1, 'blockInsts': ['<lea~~rdi, [rsp + 0x80]>', '<mov~~rcx, qword ptr [rsp + 0x8a0]>', '<add~~rcx, 0x38>', '<mov~~esi, 0x400>', '<lea~~rdx, [rip + 0x1726]>', '<mov~~al, 0>', '<call~~0x500020>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x8ac]>', '<add~~rsp, 0x8b0>', '<pop~~rbx>', '<ret~~>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~dword ptr [rsp + 0x7c], eax>', '<cmp~~dword ptr [rsp + 0x7c], 0>', '<jge~~0x400dbe>']}], 'cfg_edge_info': [(0, 1), (1, 2), (3, 4), (6, 8), (4, 6), (5, 7), (2, 3), (3, 5)]}, {'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401398>, <DisassemblerInsn "add" for 0x40139f>, <DisassemblerInsn "pop" for 0x4013a6>, <DisassemblerInsn "ret" for 0x4013a7>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40138d>, <DisassemblerInsn "mov" for 0x401398>, <DisassemblerInsn "add" for 0x40139f>, <DisassemblerInsn "pop" for 0x4013a6>, <DisassemblerInsn "ret" for 0x4013a7>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dae>, <DisassemblerInsn "mov" for 0x400db2>, <DisassemblerInsn "jmp" for 0x400db9>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401171>, <DisassemblerInsn "cmp" for 0x401179>, <DisassemblerInsn "je" for 0x40117d>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401348>, <DisassemblerInsn "lea" for 0x401350>, <DisassemblerInsn "mov" for 0x401357>, <DisassemblerInsn "call" for 0x401359>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "lea" for 0x401378>, <DisassemblerInsn "lea" for 0x401380>, <DisassemblerInsn "call" for 0x401388>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401332>, <DisassemblerInsn "lea" for 0x40133a>, <DisassemblerInsn "mov" for 0x401341>, <DisassemblerInsn "call" for 0x401343>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40135e>, <DisassemblerInsn "call" for 0x401366>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40136b>, <DisassemblerInsn "call" for 0x401373>]'}], 'cfg_block_detailed_info': [{'block_Idx': 8, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x8ac]>', '<add~~rsp, 0x8b0>', '<pop~~rbx>', '<ret~~>']}, {'block_Idx': 53, 'blockInsts': ['<mov~~dword ptr [rsp + 0x8ac], 0>', '<mov~~eax, dword ptr [rsp + 0x8ac]>', '<add~~rsp, 0x8b0>', '<pop~~rbx>', '<ret~~>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x7c]>', '<mov~~dword ptr [rsp + 0x8ac], eax>', '<jmp~~0x401398>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x890]>', '<cmp~~dword ptr [rax + 0x2c], 0>', '<je~~0x401348>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x888]>', '<lea~~rsi, [rip + 0x1400]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 47, 'blockInsts': ['<lea~~rdi, [rsp + 0x80]>', '<lea~~rsi, [rsp + 0x480]>', '<call~~0x5000d0>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x888]>', '<lea~~rsi, [rip + 0x12f1]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x888]>', '<call~~0x500058>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x888]>', '<call~~0x5000c8>']}], 'cfg_edge_info': [(47, 53), (32, 34), (6, 8), (37, 41), (50, 34), (34, 37), (41, 47)]}]}
{'write_manifest': [4199240, 4199262, 4199275, 4199288, 4199309, 4199320]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_after/O0/smoothstreamingenc.o---after
The extraction of function: write_manifest
[4199240, 4199262, 4199275, 4199288, 4199309, 4199320]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 124 nodes and 193 edges in CFGEmulated.
It has 118 nodes and 167 edges in CDG.
It has 1720 nodes and 2276 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4199240, 4199262, 4199275, 4199288, 4199309, 4199320]
{4197760, 4198275, 4198787, 4197771, 4199309, 4198677, 4199320, 4198308, 4197806, 4198833, 4199218, 4198073, 4198330, 4197822, 4199240, 4198089, 4198348, 4198099, 4197844, 4198747, 4197852, 4199262, 4199275, 4198124, 4199148, 4198769, 4197873, 4199288, 4198265, 4198394}
[12, 7, 60, 8, 44, 13, 22, 45, 41, 81, 25, 63, 11, 88, 19, 49, 37, 6, 21, 52, 94, 84, 53, 80, 17, 51, 30, 50, 14, 56, 55, 24, 74, 35, 16, 4, 23, 18, 78, 15, 29, 31, 43, 42, 34]
The execution time of patched slicing information extraction via angr: 0:02:33.202864
{'write_manifest': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dd4>, <DisassemblerInsn "mov" for 0x400ddc>, <DisassemblerInsn "mov" for 0x400de0>, <DisassemblerInsn "cmp" for 0x400de8>, <DisassemblerInsn "jae" for 0x400deb>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d8b>, <DisassemblerInsn "lea" for 0x400d93>, <DisassemblerInsn "mov" for 0x400d9b>, <DisassemblerInsn "lea" for 0x400da0>, <DisassemblerInsn "mov" for 0x400da7>, <DisassemblerInsn "call" for 0x400da9>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40136b>, <DisassemblerInsn "call" for 0x401373>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dbe>, <DisassemblerInsn "lea" for 0x400dc6>, <DisassemblerInsn "mov" for 0x400dcd>, <DisassemblerInsn "call" for 0x400dcf>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401348>, <DisassemblerInsn "lea" for 0x401350>, <DisassemblerInsn "mov" for 0x401357>, <DisassemblerInsn "call" for 0x401359>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401398>, <DisassemblerInsn "add" for 0x40139f>, <DisassemblerInsn "pop" for 0x4013a6>, <DisassemblerInsn "ret" for 0x4013a7>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400f5e>, <DisassemblerInsn "mov" for 0x400f66>, <DisassemblerInsn "lea" for 0x400f6b>, <DisassemblerInsn "mov" for 0x400f72>, <DisassemblerInsn "call" for 0x400f74>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401183>, <DisassemblerInsn "mov" for 0x40118b>, <DisassemblerInsn "mov" for 0x401193>, <DisassemblerInsn "mov" for 0x40119b>, <DisassemblerInsn "mov" for 0x40119f>, <DisassemblerInsn "lea" for 0x4011a3>, <DisassemblerInsn "mov" for 0x4011aa>, <DisassemblerInsn "call" for 0x4011ac>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400fba>, <DisassemblerInsn "cmp" for 0x400fc2>, <DisassemblerInsn "je" for 0x400fc6>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "add" for 0x4016c9>, <DisassemblerInsn "ret" for 0x4016cd>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400eb9>, <DisassemblerInsn "add" for 0x400ebd>, <DisassemblerInsn "mov" for 0x400ec0>, <DisassemblerInsn "jmp" for 0x400ec4>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "sub" for 0x401560>, <DisassemblerInsn "mov" for 0x401564>, <DisassemblerInsn "mov" for 0x401569>, <DisassemblerInsn "mov" for 0x40156e>, <DisassemblerInsn "mov" for 0x401572>, <DisassemblerInsn "mov" for 0x401576>, <DisassemblerInsn "mov" for 0x40157b>, <DisassemblerInsn "mov" for 0x401583>, <DisassemblerInsn "mov" for 0x40158b>, <DisassemblerInsn "cmp" for 0x401590>, <DisassemblerInsn "jg" for 0x401597>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dae>, <DisassemblerInsn "mov" for 0x400db2>, <DisassemblerInsn "jmp" for 0x400db9>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401332>, <DisassemblerInsn "lea" for 0x40133a>, <DisassemblerInsn "mov" for 0x401341>, <DisassemblerInsn "call" for 0x401343>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400eec>, <DisassemblerInsn "cmp" for 0x400ef4>, <DisassemblerInsn "je" for 0x400ef8>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ffa>, <DisassemblerInsn "mov" for 0x401002>, <DisassemblerInsn "mov" for 0x401006>, <DisassemblerInsn "cmp" for 0x40100e>, <DisassemblerInsn "jae" for 0x401011>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400f56>, <DisassemblerInsn "mov" for 0x400f5a>, <DisassemblerInsn "mov" for 0x400f5e>, <DisassemblerInsn "mov" for 0x400f66>, <DisassemblerInsn "lea" for 0x400f6b>, <DisassemblerInsn "mov" for 0x400f72>, <DisassemblerInsn "call" for 0x400f74>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d80>, <DisassemblerInsn "cmp" for 0x400d84>, <DisassemblerInsn "jge" for 0x400d89>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e9d>, <DisassemblerInsn "mov" for 0x400ea2>, <DisassemblerInsn "mov" for 0x400ea8>, <DisassemblerInsn "mov" for 0x400eac>, <DisassemblerInsn "add" for 0x400eb0>, <DisassemblerInsn "mov" for 0x400eb3>, <DisassemblerInsn "jmp" for 0x400eb7>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401017>, <DisassemblerInsn "mov" for 0x40101f>, <DisassemblerInsn "movsxd" for 0x401023>, <DisassemblerInsn "imul" for 0x401028>, <DisassemblerInsn "add" for 0x40102f>, <DisassemblerInsn "mov" for 0x401032>, <DisassemblerInsn "mov" for 0x401037>, <DisassemblerInsn "mov" for 0x40103f>, <DisassemblerInsn "movsxd" for 0x401043>, <DisassemblerInsn "mov" for 0x401048>, <DisassemblerInsn "mov" for 0x40104c>, <DisassemblerInsn "cmp" for 0x401050>, <DisassemblerInsn "je" for 0x401054>]'}, {'block_Idx': 94, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40138d>, <DisassemblerInsn "mov" for 0x401398>, <DisassemblerInsn "add" for 0x40139f>, <DisassemblerInsn "pop" for 0x4013a6>, <DisassemblerInsn "ret" for 0x4013a7>]'}, {'block_Idx': 84, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40115b>, <DisassemblerInsn "lea" for 0x401163>, <DisassemblerInsn "mov" for 0x40116a>, <DisassemblerInsn "call" for 0x40116c>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401115>, <DisassemblerInsn "mov" for 0x40111d>, <DisassemblerInsn "movsxd" for 0x401121>, <DisassemblerInsn "imul" for 0x401126>, <DisassemblerInsn "add" for 0x40112d>, <DisassemblerInsn "mov" for 0x401130>, <DisassemblerInsn "mov" for 0x401138>, <DisassemblerInsn "mov" for 0x40113f>, <DisassemblerInsn "mov" for 0x401147>, <DisassemblerInsn "mov" for 0x40114a>, <DisassemblerInsn "mov" for 0x401152>, <DisassemblerInsn "call" for 0x401156>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011b9>, <DisassemblerInsn "mov" for 0x4011bd>, <DisassemblerInsn "cmp" for 0x4011c5>, <DisassemblerInsn "jae" for 0x4011c8>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e1f>, <DisassemblerInsn "mov" for 0x400e24>, <DisassemblerInsn "mov" for 0x400e2b>, <DisassemblerInsn "mov" for 0x400e30>, <DisassemblerInsn "sub" for 0x400e36>, <DisassemblerInsn "movsxd" for 0x400e39>, <DisassemblerInsn "mov" for 0x400e3c>, <DisassemblerInsn "mov" for 0x400e40>, <DisassemblerInsn "mov" for 0x400e45>, <DisassemblerInsn "mov" for 0x400e4a>, <DisassemblerInsn "mov" for 0x400e51>, <DisassemblerInsn "add" for 0x400e56>, <DisassemblerInsn "mov" for 0x400e5d>, <DisassemblerInsn "mov" for 0x400e62>, <DisassemblerInsn "mov" for 0x400e6a>, <DisassemblerInsn "movsxd" for 0x400e6e>, <DisassemblerInsn "mov" for 0x400e73>, <DisassemblerInsn "mov" for 0x400e77>, <DisassemblerInsn "cmp" for 0x400e7b>, <DisassemblerInsn "jne" for 0x400e7f>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011b1>, <DisassemblerInsn "mov" for 0x4011b9>, <DisassemblerInsn "mov" for 0x4011bd>, <DisassemblerInsn "cmp" for 0x4011c5>, <DisassemblerInsn "jae" for 0x4011c8>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400f79>, <DisassemblerInsn "jne" for 0x400f81>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40135e>, <DisassemblerInsn "call" for 0x401366>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400df1>, <DisassemblerInsn "mov" for 0x400df9>, <DisassemblerInsn "movsxd" for 0x400dfd>, <DisassemblerInsn "imul" for 0x400e02>, <DisassemblerInsn "add" for 0x400e09>, <DisassemblerInsn "mov" for 0x400e0c>, <DisassemblerInsn "mov" for 0x400e11>, <DisassemblerInsn "cmp" for 0x400e16>, <DisassemblerInsn "jle" for 0x400e1d>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4012ec>, <DisassemblerInsn "mov" for 0x4012f4>, <DisassemblerInsn "movsxd" for 0x4012f8>, <DisassemblerInsn "imul" for 0x4012fd>, <DisassemblerInsn "add" for 0x401304>, <DisassemblerInsn "mov" for 0x401307>, <DisassemblerInsn "mov" for 0x40130f>, <DisassemblerInsn "mov" for 0x401316>, <DisassemblerInsn "mov" for 0x40131e>, <DisassemblerInsn "mov" for 0x401321>, <DisassemblerInsn "mov" for 0x401329>, <DisassemblerInsn "call" for 0x40132d>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011ce>, <DisassemblerInsn "mov" for 0x4011d6>, <DisassemblerInsn "movsxd" for 0x4011da>, <DisassemblerInsn "imul" for 0x4011df>, <DisassemblerInsn "add" for 0x4011e6>, <DisassemblerInsn "mov" for 0x4011e9>, <DisassemblerInsn "mov" for 0x4011ee>, <DisassemblerInsn "mov" for 0x4011f6>, <DisassemblerInsn "movsxd" for 0x4011fa>, <DisassemblerInsn "mov" for 0x4011ff>, <DisassemblerInsn "mov" for 0x401203>, <DisassemblerInsn "cmp" for 0x401207>, <DisassemblerInsn "je" for 0x40120b>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400eb7>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401002>, <DisassemblerInsn "mov" for 0x401006>, <DisassemblerInsn "cmp" for 0x40100e>, <DisassemblerInsn "jae" for 0x401011>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400fa4>, <DisassemblerInsn "lea" for 0x400fac>, <DisassemblerInsn "mov" for 0x400fb3>, <DisassemblerInsn "call" for 0x400fb5>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e62>, <DisassemblerInsn "mov" for 0x400e6a>, <DisassemblerInsn "movsxd" for 0x400e6e>, <DisassemblerInsn "mov" for 0x400e73>, <DisassemblerInsn "mov" for 0x400e77>, <DisassemblerInsn "cmp" for 0x400e7b>, <DisassemblerInsn "jne" for 0x400e7f>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400d52>, <DisassemblerInsn "mov" for 0x400d5a>, <DisassemblerInsn "add" for 0x400d62>, <DisassemblerInsn "lea" for 0x400d69>, <DisassemblerInsn "mov" for 0x400d71>, <DisassemblerInsn "xor" for 0x400d76>, <DisassemblerInsn "mov" for 0x400d78>, <DisassemblerInsn "call" for 0x400d7b>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400efa>, <DisassemblerInsn "mov" for 0x400efe>, <DisassemblerInsn "cmp" for 0x400f06>, <DisassemblerInsn "jle" for 0x400f09>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ed3>, <DisassemblerInsn "mov" for 0x400edc>, <DisassemblerInsn "mov" for 0x400ee4>, <DisassemblerInsn "mov" for 0x400eec>, <DisassemblerInsn "cmp" for 0x400ef4>, <DisassemblerInsn "je" for 0x400ef8>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "lea" for 0x401378>, <DisassemblerInsn "lea" for 0x401380>, <DisassemblerInsn "call" for 0x401388>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400ec9>, <DisassemblerInsn "jne" for 0x400ed1>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ddc>, <DisassemblerInsn "mov" for 0x400de0>, <DisassemblerInsn "cmp" for 0x400de8>, <DisassemblerInsn "jae" for 0x400deb>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400f4e>, <DisassemblerInsn "mov" for 0x400f52>, <DisassemblerInsn "mov" for 0x400f56>, <DisassemblerInsn "mov" for 0x400f5a>, <DisassemblerInsn "mov" for 0x400f5e>, <DisassemblerInsn "mov" for 0x400f66>, <DisassemblerInsn "lea" for 0x400f6b>, <DisassemblerInsn "mov" for 0x400f72>, <DisassemblerInsn "call" for 0x400f74>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400fcc>, <DisassemblerInsn "mov" for 0x400fd4>, <DisassemblerInsn "mov" for 0x400fdc>, <DisassemblerInsn "mov" for 0x400fe4>, <DisassemblerInsn "mov" for 0x400fe8>, <DisassemblerInsn "lea" for 0x400fec>, <DisassemblerInsn "mov" for 0x400ff3>, <DisassemblerInsn "call" for 0x400ff5>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401171>, <DisassemblerInsn "cmp" for 0x401179>, <DisassemblerInsn "je" for 0x40117d>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400f83>, <DisassemblerInsn "mov" for 0x400f8b>, <DisassemblerInsn "mov" for 0x400f93>, <DisassemblerInsn "lea" for 0x400f96>, <DisassemblerInsn "mov" for 0x400f9d>, <DisassemblerInsn "call" for 0x400f9f>]'}], 'cfg_block_detailed_info': [{'block_Idx': 12, 'blockInsts': ['<mov~~dword ptr [rsp + 0x78], 0>', '<mov~~eax, dword ptr [rsp + 0x78]>', '<mov~~rcx, qword ptr [rsp + 0x8a0]>', '<cmp~~eax, dword ptr [rcx + 0x2c]>', '<jae~~0x400ec9>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x8a0]>', '<lea~~rcx, [rsp + 0x80]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x16da]>', '<mov~~al, 0>', '<call~~0x500018>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x888]>', '<call~~0x5000c8>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x888]>', '<lea~~rsi, [rip + 0x16d3]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x888]>', '<lea~~rsi, [rip + 0x1400]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x8ac]>', '<add~~rsp, 0x8b0>', '<pop~~rbx>', '<ret~~>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x888]>', '<mov~~rdx, qword ptr [rsp + 0x60]>', '<lea~~rsi, [rip + 0x1556]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~dword ptr [rsp + 0x3c], 0xffffffff>', '<mov~~dword ptr [rsp + 0x38], 0>', '<mov~~rdi, qword ptr [rsp + 0x888]>', '<mov~~edx, dword ptr [rsp + 0x68]>', '<mov~~ecx, dword ptr [rsp + 0x70]>', '<lea~~rsi, [rip + 0x1498]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x890]>', '<cmp~~dword ptr [rax + 0x28], 0>', '<je~~0x401171>']}, {'block_Idx': 81, 'blockInsts': ['<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x78]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x78], eax>', '<jmp~~0x400ddc>']}, {'block_Idx': 63, 'blockInsts': ['<sub~~rsp, 0x38>', '<mov~~qword ptr [rsp + 0x30], rdi>', '<mov~~qword ptr [rsp + 0x28], rsi>', '<mov~~dword ptr [rsp + 0x24], edx>', '<mov~~dword ptr [rsp + 0x20], ecx>', '<mov~~dword ptr [rsp + 0x1c], r8d>', '<mov~~dword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x10], 0>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<cmp~~dword ptr [rax + 0x8450], 0>', '<jg~~0x40159e>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x7c]>', '<mov~~dword ptr [rsp + 0x8ac], eax>', '<jmp~~0x401398>']}, {'block_Idx': 88, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x888]>', '<lea~~rsi, [rip + 0x12f1]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x890]>', '<cmp~~dword ptr [rax + 8], 0>', '<je~~0x400f5e>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~dword ptr [rsp + 0x78], 0>', '<mov~~eax, dword ptr [rsp + 0x78]>', '<mov~~rcx, qword ptr [rsp + 0x8a0]>', '<cmp~~eax, dword ptr [rcx + 0x2c]>', '<jae~~0x401115>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x28]>', '<mov~~dword ptr [rsp + 0x70], eax>', '<mov~~rdi, qword ptr [rsp + 0x888]>', '<mov~~rdx, qword ptr [rsp + 0x60]>', '<lea~~rsi, [rip + 0x1556]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~dword ptr [rsp + 0x7c], eax>', '<cmp~~dword ptr [rsp + 0x7c], 0>', '<jge~~0x400dbe>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~eax, dword ptr [rax + 0x8450]>', '<mov~~dword ptr [rsp + 0x70], eax>', '<mov~~eax, dword ptr [rsp + 0x68]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x68], eax>', '<jmp~~0x400eb9>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x890]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<movsxd~~rcx, dword ptr [rsp + 0x78]>', '<imul~~rcx, rcx, 0x8480>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x40], rax>', '<mov~~rax, qword ptr [rsp + 0x8a0]>', '<mov~~rax, qword ptr [rax + 0x30]>', '<movsxd~~rcx, dword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0xc], 0>', '<je~~0x40105b>']}, {'block_Idx': 94, 'blockInsts': ['<mov~~dword ptr [rsp + 0x8ac], 0>', '<mov~~eax, dword ptr [rsp + 0x8ac]>', '<add~~rsp, 0x8b0>', '<pop~~rbx>', '<ret~~>']}, {'block_Idx': 84, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x888]>', '<lea~~rsi, [rip + 0x14c8]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 53, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x890]>', '<mov~~rdi, qword ptr [rax + 0x20]>', '<movsxd~~rax, dword ptr [rsp + 0x4c]>', '<imul~~rax, rax, 0x8480>', '<add~~rdi, rax>', '<mov~~rsi, qword ptr [rsp + 0x888]>', '<mov~~edx, dword ptr [rsp + 0x89c]>', '<mov~~rax, qword ptr [rsp + 0x890]>', '<mov~~ecx, dword ptr [rax + 0x10]>', '<mov~~rax, qword ptr [rsp + 0x890]>', '<mov~~r8d, dword ptr [rax + 8]>', '<call~~0x401560>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x78]>', '<mov~~rcx, qword ptr [rsp + 0x8a0]>', '<cmp~~eax, dword ptr [rcx + 0x2c]>', '<jae~~0x4012ec>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rax + 0x8460]>', '<mov~~rcx, qword ptr [rsp + 0x58]>', '<mov~~ecx, dword ptr [rcx + 0x8450]>', '<sub~~ecx, 1>', '<movsxd~~rcx, ecx>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~qword ptr [rsp + 0x50], rax>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<mov~~rax, qword ptr [rax + 0x800]>', '<mov~~rcx, qword ptr [rsp + 0x50]>', '<add~~rax, qword ptr [rcx + 0x808]>', '<mov~~qword ptr [rsp + 0x60], rax>', '<mov~~rax, qword ptr [rsp + 0x8a0]>', '<mov~~rax, qword ptr [rax + 0x30]>', '<movsxd~~rcx, dword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0xc], 0>', '<jne~~0x400e9d>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~dword ptr [rsp + 0x78], 0>', '<mov~~eax, dword ptr [rsp + 0x78]>', '<mov~~rcx, qword ptr [rsp + 0x8a0]>', '<cmp~~eax, dword ptr [rcx + 0x2c]>', '<jae~~0x4012ec>']}, {'block_Idx': 30, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x89c], 0>', '<jne~~0x400fa4>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x888]>', '<call~~0x500058>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x890]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<movsxd~~rcx, dword ptr [rsp + 0x78]>', '<imul~~rcx, rcx, 0x8480>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x58], rax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<cmp~~dword ptr [rax + 0x8450], 0>', '<jle~~0x400e62>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x890]>', '<mov~~rdi, qword ptr [rax + 0x20]>', '<movsxd~~rax, dword ptr [rsp + 0x3c]>', '<imul~~rax, rax, 0x8480>', '<add~~rdi, rax>', '<mov~~rsi, qword ptr [rsp + 0x888]>', '<mov~~edx, dword ptr [rsp + 0x89c]>', '<mov~~rax, qword ptr [rsp + 0x890]>', '<mov~~ecx, dword ptr [rax + 0x10]>', '<mov~~rax, qword ptr [rsp + 0x890]>', '<mov~~r8d, dword ptr [rax + 8]>', '<call~~0x401560>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x890]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<movsxd~~rcx, dword ptr [rsp + 0x78]>', '<imul~~rcx, rcx, 0x8480>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x30], rax>', '<mov~~rax, qword ptr [rsp + 0x8a0]>', '<mov~~rax, qword ptr [rax + 0x30]>', '<movsxd~~rcx, dword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0xc], 1>', '<je~~0x401212>']}, {'block_Idx': 24, 'blockInsts': ['<jmp~~0x400eb9>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x78]>', '<mov~~rcx, qword ptr [rsp + 0x8a0]>', '<cmp~~eax, dword ptr [rcx + 0x2c]>', '<jae~~0x401115>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x888]>', '<lea~~rsi, [rip + 0x159b]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x8a0]>', '<mov~~rax, qword ptr [rax + 0x30]>', '<movsxd~~rcx, dword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0xc], 0>', '<jne~~0x400e9d>']}, {'block_Idx': 4, 'blockInsts': ['<lea~~rsi, [rsp + 0x80]>', '<mov~~rcx, qword ptr [rsp + 0x8a0]>', '<add~~rcx, 0x4b0>', '<lea~~rdi, [rsp + 0x888]>', '<mov~~edx, 2>', '<xor~~eax, eax>', '<mov~~r8d, eax>', '<call~~0x5000b8>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x74]>', '<mov~~rcx, qword ptr [rsp + 0x890]>', '<cmp~~eax, dword ptr [rcx + 8]>', '<jle~~0x400f1c>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~qword ptr [rsp + 0x60], 0>', '<mov~~dword ptr [rsp + 0x70], 0>', '<mov~~dword ptr [rsp + 0x74], 0>', '<mov~~rax, qword ptr [rsp + 0x890]>', '<cmp~~dword ptr [rax + 8], 0>', '<je~~0x400f5e>']}, {'block_Idx': 78, 'blockInsts': ['<lea~~rdi, [rsp + 0x80]>', '<lea~~rsi, [rsp + 0x480]>', '<call~~0x5000d0>']}, {'block_Idx': 15, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x89c], 0>', '<jne~~0x400eec>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x78]>', '<mov~~rcx, qword ptr [rsp + 0x8a0]>', '<cmp~~eax, dword ptr [rcx + 0x2c]>', '<jae~~0x400ec9>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x70]>', '<mov~~dword ptr [rsp + 0x28], eax>', '<mov~~eax, dword ptr [rsp + 0x28]>', '<mov~~dword ptr [rsp + 0x70], eax>', '<mov~~rdi, qword ptr [rsp + 0x888]>', '<mov~~rdx, qword ptr [rsp + 0x60]>', '<lea~~rsi, [rip + 0x1556]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~dword ptr [rsp + 0x4c], 0xffffffff>', '<mov~~dword ptr [rsp + 0x48], 0>', '<mov~~rdi, qword ptr [rsp + 0x888]>', '<mov~~edx, dword ptr [rsp + 0x6c]>', '<mov~~ecx, dword ptr [rsp + 0x74]>', '<lea~~rsi, [rip + 0x155e]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 42, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x890]>', '<cmp~~dword ptr [rax + 0x2c], 0>', '<je~~0x401348>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x888]>', '<mov~~rax, qword ptr [rsp + 0x890]>', '<mov~~edx, dword ptr [rax + 0x10]>', '<lea~~rsi, [rip + 0x1572]>', '<mov~~al, 0>', '<call~~0x5000c0>']}], 'cfg_edge_info': [(29, 14), (80, 56), (25, 29), (42, 45), (41, 43), (18, 23), (81, 88), (53, 84), (4, 6), (51, 56), (43, 49), (14, 16), (21, 25), (8, 12), (37, 30), (49, 53), (6, 8), (41, 42), (81, 84), (88, 44), (51, 55), (42, 44), (18, 22), (35, 41), (44, 50), (12, 15), (50, 60), (56, 88), (49, 52), (78, 94), (19, 23), (11, 13), (45, 51), (30, 35), (6, 7), (24, 25), (15, 18), (15, 19), (56, 63), (29, 15), (74, 53), (12, 14), (31, 30), (14, 17), (22, 30), (84, 42), (34, 35), (60, 78), (19, 22), (7, 11), (53, 63), (30, 34)], 'cdg_edge_info': [(6, 12), (29, 14), (42, 45), (41, 43), (41, 49), (6, 15), (6, 30), (42, 51), (6, 94), (29, 29), (6, 42), (12, 25), (6, 60), (6, 11), (6, 8), (6, 78), (29, 25), (42, 56), (6, 35), (6, 44), (6, 41), (6, 50), (41, 84), (6, 7), (6, 13), (15, 19), (12, 14), (41, 53), (12, 29), (42, 88), (15, 18), (30, 34)], 'ddg_edge_info': [(35, 88), (35, 42), (12, 25), (8, 18), (84, 50), (6, 11), (41, 42), (18, 19), (35, 44), (34, 60), (8, 50), (7, 94), (12, 29), (60, 78), (84, 45), (8, 25), (30, 34), (8, 34), (34, 53), (25, 29), (8, 43), (35, 60), (84, 56), (8, 45), (88, 44), (35, 53), (8, 84), (8, 29), (30, 56), (8, 56), (41, 53), (84, 88), (84, 42), (84, 60), (34, 41), (34, 50), (7, 11), (84, 44), (88, 60), (8, 15), (34, 43), (8, 88), (50, 60), (35, 41), (35, 50), (18, 43), (78, 94), (34, 45), (30, 35), (8, 35), (8, 44), (12, 14), (35, 43), (34, 84), (18, 45), (8, 19), (25, 14), (45, 56), (34, 56), (43, 49), (35, 45), (8, 12), (35, 84), (44, 50), (88, 50), (8, 60), (35, 56), (34, 88), (8, 14), (34, 42), (45, 51), (41, 56), (43, 53), (8, 53), (30, 53), (34, 35), (34, 44), (11, 94)]}]}
{'write_manifest': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%rbx'}, {'instIndex': 1, 'instruction': 'subq\t$0x8b0, %rsp                     # imm = 0x8B0'}, {'instIndex': 2, 'instruction': 'movq\t%rdi, 0x8a0(%rsp)'}, {'instIndex': 3, 'instruction': 'movl\t%esi, 0x89c(%rsp)'}, {'instIndex': 4, 'instruction': 'movq\t0x8a0(%rsp), %rax'}, {'instIndex': 5, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 6, 'instruction': 'movq\t%rax, 0x890(%rsp)'}, {'instIndex': 7, 'instruction': 'movl\t$0, 0x74(%rsp)'}, {'instIndex': 8, 'instruction': 'movl\t$0, 0x70(%rsp)'}, {'instIndex': 9, 'instruction': 'movl\t$0, 0x6c(%rsp)'}, {'instIndex': 10, 'instruction': 'movl\t$0, 0x68(%rsp)'}, {'instIndex': 11, 'instruction': 'movq\t$0, 0x60(%rsp)'}, {'instIndex': 12, 'instruction': 'leaq\t0x480(%rsp), %rdi'}, {'instIndex': 13, 'instruction': 'movq\t0x8a0(%rsp), %rcx'}, {'instIndex': 14, 'instruction': 'addq\t$0x38, %rcx'}, {'instIndex': 15, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 16, 'instruction': 'leaq\t.L.str.0x20(%rip), %rdx'}, {'instIndex': 17, 'instruction': 'movb\t$0, %al'}, {'instIndex': 18, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 19, 'instruction': 'leaq\t0x80(%rsp), %rdi'}, {'instIndex': 20, 'instruction': 'movq\t0x8a0(%rsp), %rcx'}, {'instIndex': 21, 'instruction': 'addq\t$0x38, %rcx'}, {'instIndex': 22, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 23, 'instruction': 'leaq\t.L.str.0x21(%rip), %rdx'}, {'instIndex': 24, 'instruction': 'movb\t$0, %al'}, {'instIndex': 25, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 26, 'instruction': 'leaq\t0x80(%rsp), %rsi'}, {'instIndex': 27, 'instruction': 'movq\t0x8a0(%rsp), %rcx'}, {'instIndex': 28, 'instruction': 'addq\t$0x4b0, %rcx                     # imm = 0x4B0'}, {'instIndex': 29, 'instruction': 'leaq\t0x888(%rsp), %rdi'}, {'instIndex': 30, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 31, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 32, 'instruction': 'movl\t%eax, %r8d'}, {'instIndex': 33, 'instruction': 'callq\tavio_open2@PLT'}, {'instIndex': 34, 'instruction': 'movl\t%eax, 0x7c(%rsp)'}, {'instIndex': 35, 'instruction': 'cmpl\t$0, 0x7c(%rsp)'}, {'instIndex': 36, 'instruction': 'jge\t.LBB6_2'}, {'instIndex': 37, 'instruction': 'movq\t0x8a0(%rsp), %rdi'}, {'instIndex': 38, 'instruction': 'leaq\t0x80(%rsp), %rcx'}, {'instIndex': 39, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 40, 'instruction': 'leaq\t.L.str.0x22(%rip), %rdx'}, {'instIndex': 41, 'instruction': 'movb\t$0, %al'}, {'instIndex': 42, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 43, 'instruction': 'movl\t0x7c(%rsp), %eax'}, {'instIndex': 44, 'instruction': 'movl\t%eax, 0x8ac(%rsp)'}, {'instIndex': 45, 'instruction': 'jmp\t.LBB6_40'}, {'instIndex': 46, 'instruction': 'movq\t0x888(%rsp), %rdi'}, {'instIndex': 47, 'instruction': 'leaq\t.L.str.0x23(%rip), %rsi'}, {'instIndex': 48, 'instruction': 'movb\t$0, %al'}, {'instIndex': 49, 'instruction': 'callq\tavio_printf@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 325, 'instruction': 'movq\t0x888(%rsp), %rdi'}, {'instIndex': 326, 'instruction': 'leaq\t.L.str.0x2c(%rip), %rsi'}, {'instIndex': 327, 'instruction': 'movb\t$0, %al'}, {'instIndex': 328, 'instruction': 'callq\tavio_printf@PLT'}, {'instIndex': 329, 'instruction': 'movq\t0x888(%rsp), %rdi'}, {'instIndex': 330, 'instruction': 'callq\tavio_flush@PLT'}, {'instIndex': 331, 'instruction': 'movq\t0x888(%rsp), %rdi'}, {'instIndex': 332, 'instruction': 'callq\tavio_close@PLT'}, {'instIndex': 333, 'instruction': 'leaq\t0x80(%rsp), %rdi'}, {'instIndex': 334, 'instruction': 'leaq\t0x480(%rsp), %rsi'}, {'instIndex': 335, 'instruction': 'callq\trename@PLT'}, {'instIndex': 336, 'instruction': 'movl\t$0, 0x8ac(%rsp)'}, {'instIndex': 337, 'instruction': 'movl\t0x8ac(%rsp), %eax'}, {'instIndex': 338, 'instruction': 'addq\t$0x8b0, %rsp                     # imm = 0x8B0'}, {'instIndex': 339, 'instruction': 'popq\t%rbx'}, {'instIndex': 340, 'instruction': 'retq'}]}]}
The case of compiler clang with optimization O1.
Patched source code file: smoothstreamingenc.c
Patched function: 1---static int write_manifest 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_after/O1/smoothstreamingenc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_after/O1/smoothstreamingenc.s---write_manifest---after
function id: 5
function flag: True
There are 626 instructions for function: write_manifest in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '210', 'end': 224}, 'before': {'start': '210', 'end': 223}}}, {'modifyIndex': 2, 'line': {'after': {'start': '279', 'end': 285}, 'before': {'start': '278', 'end': 283}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%r14'}, {'instIndex': 1, 'instruction': 'pushq\t%rbx'}, {'instIndex': 2, 'instruction': 'subq\t$0xa78, %rsp                     # imm = 0xA0x4e'}, {'instIndex': 3, 'instruction': 'movl\t%esi, 0x23c(%rsp)                 # 4-byte Spill'}, {'instIndex': 4, 'instruction': 'movq\t%rdi, %rcx'}, {'instIndex': 5, 'instruction': 'movq\t%rcx, 0x258(%rsp)                 # 8-byte Spill'}, {'instIndex': 6, 'instruction': 'movq\t0x18(%rcx), %rax'}, {'instIndex': 7, 'instruction': 'movq\t%rax, 0x240(%rsp)                 # 8-byte Spill'}, {'instIndex': 8, 'instruction': 'leaq\t0xa70(%rsp), %rax'}, {'instIndex': 9, 'instruction': 'leaq\t0x670(%rsp), %rdi'}, {'instIndex': 10, 'instruction': 'movq\t%rdi, 0x248(%rsp)                 # 8-byte Spill'}, {'instIndex': 11, 'instruction': 'leaq\t0x270(%rsp), %rax'}, {'instIndex': 12, 'instruction': 'movq\t%rax, 0x260(%rsp)                 # 8-byte Spill'}, {'instIndex': 13, 'instruction': 'addq\t$0x38, %rcx'}, {'instIndex': 14, 'instruction': 'movq\t%rcx, 0x250(%rsp)                 # 8-byte Spill'}, {'instIndex': 15, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 16, 'instruction': 'leaq\t.L.str.0x20(%rip), %rdx'}, {'instIndex': 17, 'instruction': 'movb\t$0, %al'}, {'instIndex': 18, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 21, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 22, 'instruction': 'leaq\t.L.str.0x21(%rip), %rdx'}, {'instIndex': 23, 'instruction': 'movb\t$0, %al'}, {'instIndex': 24, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 27, 'instruction': 'addq\t$0x4b0, %rcx                     # imm = 0x4B0'}, {'instIndex': 28, 'instruction': 'leaq\t0xa70(%rsp), %rdi'}, {'instIndex': 29, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 30, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 31, 'instruction': 'movl\t%eax, %r8d'}, {'instIndex': 32, 'instruction': 'callq\tavio_open2@PLT'}, {'instIndex': 34, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 35, 'instruction': 'jge\t.LBB5_2'}, {'instIndex': 38, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 39, 'instruction': 'leaq\t.L.str.0x22(%rip), %rdx'}, {'instIndex': 40, 'instruction': 'movb\t$0, %al'}, {'instIndex': 41, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 44, 'instruction': 'jmp\t.LBB5_41'}, {'instIndex': 45, 'instruction': 'movq\t0xa70(%rsp), %rdi'}, {'instIndex': 46, 'instruction': 'leaq\t.L.str.0x23(%rip), %rsi'}, {'instIndex': 47, 'instruction': 'movb\t$0, %al'}, {'instIndex': 48, 'instruction': 'callq\tavio_printf@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 608, 'instruction': 'movq\t0xa70(%rsp), %rdi'}, {'instIndex': 609, 'instruction': 'leaq\t.L.str.0x2c(%rip), %rsi'}, {'instIndex': 610, 'instruction': 'movb\t$0, %al'}, {'instIndex': 611, 'instruction': 'callq\tavio_printf@PLT'}, {'instIndex': 612, 'instruction': 'movq\t0xa70(%rsp), %rdi'}, {'instIndex': 613, 'instruction': 'callq\tavio_flush@PLT'}, {'instIndex': 614, 'instruction': 'movq\t0xa70(%rsp), %rdi'}, {'instIndex': 615, 'instruction': 'callq\tavio_close@PLT'}, {'instIndex': 618, 'instruction': 'callq\trename@PLT'}, {'instIndex': 622, 'instruction': 'addq\t$0xa78, %rsp                     # imm = 0xA0x4e'}, {'instIndex': 623, 'instruction': 'popq\t%rbx'}, {'instIndex': 624, 'instruction': 'popq\t%r14'}, {'instIndex': 625, 'instruction': 'retq'}]}]
Patched function: 1---static int write_manifest 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_after/O1/smoothstreamingenc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_after/O1/smoothstreamingenc.s---write_manifest---after
function id: 5
function flag: True
There are 626 instructions for function: write_manifest in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '210', 'end': 224}, 'before': {'start': '210', 'end': 223}}}, {'modifyIndex': 2, 'line': {'after': {'start': '279', 'end': 285}, 'before': {'start': '278', 'end': 283}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%r14'}, {'instIndex': 1, 'instruction': 'pushq\t%rbx'}, {'instIndex': 2, 'instruction': 'subq\t$0xa78, %rsp                     # imm = 0xA0x4e'}, {'instIndex': 3, 'instruction': 'movl\t%esi, 0x23c(%rsp)                 # 4-byte Spill'}, {'instIndex': 4, 'instruction': 'movq\t%rdi, %rcx'}, {'instIndex': 5, 'instruction': 'movq\t%rcx, 0x258(%rsp)                 # 8-byte Spill'}, {'instIndex': 6, 'instruction': 'movq\t0x18(%rcx), %rax'}, {'instIndex': 7, 'instruction': 'movq\t%rax, 0x240(%rsp)                 # 8-byte Spill'}, {'instIndex': 8, 'instruction': 'leaq\t0xa70(%rsp), %rax'}, {'instIndex': 9, 'instruction': 'leaq\t0x670(%rsp), %rdi'}, {'instIndex': 10, 'instruction': 'movq\t%rdi, 0x248(%rsp)                 # 8-byte Spill'}, {'instIndex': 11, 'instruction': 'leaq\t0x270(%rsp), %rax'}, {'instIndex': 12, 'instruction': 'movq\t%rax, 0x260(%rsp)                 # 8-byte Spill'}, {'instIndex': 13, 'instruction': 'addq\t$0x38, %rcx'}, {'instIndex': 14, 'instruction': 'movq\t%rcx, 0x250(%rsp)                 # 8-byte Spill'}, {'instIndex': 15, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 16, 'instruction': 'leaq\t.L.str.0x20(%rip), %rdx'}, {'instIndex': 17, 'instruction': 'movb\t$0, %al'}, {'instIndex': 18, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 21, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 22, 'instruction': 'leaq\t.L.str.0x21(%rip), %rdx'}, {'instIndex': 23, 'instruction': 'movb\t$0, %al'}, {'instIndex': 24, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 27, 'instruction': 'addq\t$0x4b0, %rcx                     # imm = 0x4B0'}, {'instIndex': 28, 'instruction': 'leaq\t0xa70(%rsp), %rdi'}, {'instIndex': 29, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 30, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 31, 'instruction': 'movl\t%eax, %r8d'}, {'instIndex': 32, 'instruction': 'callq\tavio_open2@PLT'}, {'instIndex': 34, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 35, 'instruction': 'jge\t.LBB5_2'}, {'instIndex': 38, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 39, 'instruction': 'leaq\t.L.str.0x22(%rip), %rdx'}, {'instIndex': 40, 'instruction': 'movb\t$0, %al'}, {'instIndex': 41, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 44, 'instruction': 'jmp\t.LBB5_41'}, {'instIndex': 45, 'instruction': 'movq\t0xa70(%rsp), %rdi'}, {'instIndex': 46, 'instruction': 'leaq\t.L.str.0x23(%rip), %rsi'}, {'instIndex': 47, 'instruction': 'movb\t$0, %al'}, {'instIndex': 48, 'instruction': 'callq\tavio_printf@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 608, 'instruction': 'movq\t0xa70(%rsp), %rdi'}, {'instIndex': 609, 'instruction': 'leaq\t.L.str.0x2c(%rip), %rsi'}, {'instIndex': 610, 'instruction': 'movb\t$0, %al'}, {'instIndex': 611, 'instruction': 'callq\tavio_printf@PLT'}, {'instIndex': 612, 'instruction': 'movq\t0xa70(%rsp), %rdi'}, {'instIndex': 613, 'instruction': 'callq\tavio_flush@PLT'}, {'instIndex': 614, 'instruction': 'movq\t0xa70(%rsp), %rdi'}, {'instIndex': 615, 'instruction': 'callq\tavio_close@PLT'}, {'instIndex': 618, 'instruction': 'callq\trename@PLT'}, {'instIndex': 622, 'instruction': 'addq\t$0xa78, %rsp                     # imm = 0xA0x4e'}, {'instIndex': 623, 'instruction': 'popq\t%rbx'}, {'instIndex': 624, 'instruction': 'popq\t%r14'}, {'instIndex': 625, 'instruction': 'retq'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_after/O1/smoothstreamingenc.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_after/O1/smoothstreamingenc.o---after
The extraction of function: write_manifest
Analyzing the binaries to generate subCFGs from patched function ...
It has 364 nodes and 711 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 626 instructions in binary file.
[4198528, 4198639, 4198674, 4198720, 4198732, 4198767, 4198786]
[4201798, 4201820, 4201833, 4201846, 4201867, 4201876]
The execution time of patched subCFG information extraction via angr: 0:00:00.603585
{'write_manifest': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401140>, <DisassemblerInsn "cmp" for 0x401147>, <DisassemblerInsn "jge" for 0x40114a>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401112>, <DisassemblerInsn "mov" for 0x40111a>, <DisassemblerInsn "add" for 0x401122>, <DisassemblerInsn "lea" for 0x401129>, <DisassemblerInsn "mov" for 0x401131>, <DisassemblerInsn "xor" for 0x401136>, <DisassemblerInsn "mov" for 0x401138>, <DisassemblerInsn "call" for 0x40113b>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401182>, <DisassemblerInsn "lea" for 0x40118a>, <DisassemblerInsn "mov" for 0x401191>, <DisassemblerInsn "call" for 0x401193>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4010ef>, <DisassemblerInsn "mov" for 0x4010f7>, <DisassemblerInsn "mov" for 0x4010ff>, <DisassemblerInsn "lea" for 0x401104>, <DisassemblerInsn "mov" for 0x40110b>, <DisassemblerInsn "call" for 0x40110d>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40114c>, <DisassemblerInsn "mov" for 0x401154>, <DisassemblerInsn "mov" for 0x40115c>, <DisassemblerInsn "lea" for 0x401161>, <DisassemblerInsn "mov" for 0x401168>, <DisassemblerInsn "call" for 0x40116a>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x401080>, <DisassemblerInsn "push" for 0x401082>, <DisassemblerInsn "sub" for 0x401083>, <DisassemblerInsn "mov" for 0x40108a>, <DisassemblerInsn "mov" for 0x401091>, <DisassemblerInsn "mov" for 0x401094>, <DisassemblerInsn "mov" for 0x40109c>, <DisassemblerInsn "mov" for 0x4010a0>, <DisassemblerInsn "lea" for 0x4010a8>, <DisassemblerInsn "lea" for 0x4010b0>, <DisassemblerInsn "mov" for 0x4010b8>, <DisassemblerInsn "lea" for 0x4010c0>, <DisassemblerInsn "mov" for 0x4010c8>, <DisassemblerInsn "add" for 0x4010d0>, <DisassemblerInsn "mov" for 0x4010d4>, <DisassemblerInsn "mov" for 0x4010dc>, <DisassemblerInsn "lea" for 0x4010e1>, <DisassemblerInsn "mov" for 0x4010e8>, <DisassemblerInsn "call" for 0x4010ea>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d94>, <DisassemblerInsn "add" for 0x401d9b>, <DisassemblerInsn "pop" for 0x401da2>, <DisassemblerInsn "pop" for 0x401da3>, <DisassemblerInsn "ret" for 0x401da5>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40116f>, <DisassemblerInsn "mov" for 0x401176>, <DisassemblerInsn "jmp" for 0x40117d>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401198>, <DisassemblerInsn "mov" for 0x4011a0>, <DisassemblerInsn "mov" for 0x4011a3>, <DisassemblerInsn "xor" for 0x4011aa>, <DisassemblerInsn "xor" for 0x4011ac>, <DisassemblerInsn "cmp" for 0x4011ae>, <DisassemblerInsn "mov" for 0x4011b1>, <DisassemblerInsn "mov" for 0x4011b3>, <DisassemblerInsn "mov" for 0x4011ba>, <DisassemblerInsn "mov" for 0x4011bc>, <DisassemblerInsn "mov" for 0x4011c3>, <DisassemblerInsn "mov" for 0x4011cb>, <DisassemblerInsn "mov" for 0x4011cd>, <DisassemblerInsn "mov" for 0x4011d4>, <DisassemblerInsn "je" for 0x4011db>]'}], 'cfg_block_detailed_info': [{'block_Idx': 3, 'blockInsts': ['<mov~~dword ptr [rsp + 0x26c], eax>', '<cmp~~eax, 0>', '<jge~~0x401182>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x258]>', '<mov~~rsi, qword ptr [rsp + 0x260]>', '<add~~rcx, 0x4b0>', '<lea~~rdi, [rsp + 0xa70]>', '<mov~~edx, 2>', '<xor~~eax, eax>', '<mov~~r8d, eax>', '<call~~0x5000c0>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xa70]>', '<lea~~rsi, [rip + 0x2597]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x250]>', '<mov~~rdi, qword ptr [rsp + 0x260]>', '<mov~~esi, 0x400>', '<lea~~rdx, [rip + 0x25ee]>', '<mov~~al, 0>', '<call~~0x500020>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x260]>', '<mov~~rdi, qword ptr [rsp + 0x258]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x25a1]>', '<mov~~al, 0>', '<call~~0x500018>']}, {'block_Idx': 0, 'blockInsts': ['<push~~r14>', '<push~~rbx>', '<sub~~rsp, 0xa78>', '<mov~~dword ptr [rsp + 0x23c], esi>', '<mov~~rcx, rdi>', '<mov~~qword ptr [rsp + 0x258], rcx>', '<mov~~rax, qword ptr [rcx + 0x18]>', '<mov~~qword ptr [rsp + 0x240], rax>', '<lea~~rax, [rsp + 0xa70]>', '<lea~~rdi, [rsp + 0x670]>', '<mov~~qword ptr [rsp + 0x248], rdi>', '<lea~~rax, [rsp + 0x270]>', '<mov~~qword ptr [rsp + 0x260], rax>', '<add~~rcx, 0x38>', '<mov~~qword ptr [rsp + 0x250], rcx>', '<mov~~esi, 0x400>', '<lea~~rdx, [rip + 0x2605]>', '<mov~~al, 0>', '<call~~0x500020>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x238]>', '<add~~rsp, 0xa78>', '<pop~~rbx>', '<pop~~r14>', '<ret~~>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x26c]>', '<mov~~dword ptr [rsp + 0x238], eax>', '<jmp~~0x401d94>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x258]>', '<mov~~edx, dword ptr [rax + 0x2c]>', '<mov~~dword ptr [rsp + 0x21c], edx>', '<xor~~eax, eax>', '<xor~~ecx, ecx>', '<cmp~~edx, 0>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x220], edx>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x224], edx>', '<mov~~qword ptr [rsp + 0x228], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x230], ecx>', '<mov~~dword ptr [rsp + 0x234], eax>', '<je~~0x40146b>']}], 'cfg_edge_info': [(0, 1), (1, 2), (3, 4), (6, 8), (4, 6), (5, 7), (2, 3), (3, 5)]}, {'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d46>, <DisassemblerInsn "lea" for 0x401d4e>, <DisassemblerInsn "mov" for 0x401d55>, <DisassemblerInsn "call" for 0x401d57>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d30>, <DisassemblerInsn "lea" for 0x401d38>, <DisassemblerInsn "mov" for 0x401d3f>, <DisassemblerInsn "call" for 0x401d41>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d5c>, <DisassemblerInsn "call" for 0x401d64>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d94>, <DisassemblerInsn "add" for 0x401d9b>, <DisassemblerInsn "pop" for 0x401da2>, <DisassemblerInsn "pop" for 0x401da3>, <DisassemblerInsn "ret" for 0x401da5>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "xor" for 0x401d8b>, <DisassemblerInsn "mov" for 0x401d8d>, <DisassemblerInsn "mov" for 0x401d94>, <DisassemblerInsn "add" for 0x401d9b>, <DisassemblerInsn "pop" for 0x401da2>, <DisassemblerInsn "pop" for 0x401da3>, <DisassemblerInsn "ret" for 0x401da5>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40116f>, <DisassemblerInsn "mov" for 0x401176>, <DisassemblerInsn "jmp" for 0x40117d>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d76>, <DisassemblerInsn "mov" for 0x401d7e>, <DisassemblerInsn "call" for 0x401d86>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d69>, <DisassemblerInsn "call" for 0x401d71>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401974>, <DisassemblerInsn "cmp" for 0x40197c>, <DisassemblerInsn "je" for 0x401980>]'}], 'cfg_block_detailed_info': [{'block_Idx': 24, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xa70]>', '<lea~~rsi, [rip + 0x1c8a]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xa70]>', '<lea~~rsi, [rip + 0x1b7b]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xa70]>', '<call~~0x500058>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x238]>', '<add~~rsp, 0xa78>', '<pop~~rbx>', '<pop~~r14>', '<ret~~>']}, {'block_Idx': 46, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x238], eax>', '<mov~~eax, dword ptr [rsp + 0x238]>', '<add~~rsp, 0xa78>', '<pop~~rbx>', '<pop~~r14>', '<ret~~>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x26c]>', '<mov~~dword ptr [rsp + 0x238], eax>', '<jmp~~0x401d94>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x260]>', '<mov~~rsi, qword ptr [rsp + 0x248]>', '<call~~0x5000d8>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xa70]>', '<call~~0x5000d0>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x240]>', '<cmp~~dword ptr [rax + 0x2c], 0>', '<je~~0x401d46>']}], 'cfg_edge_info': [(38, 46), (27, 31), (24, 27), (22, 24), (39, 24), (6, 8), (31, 38)]}]}
{'write_manifest': [4201798, 4201820, 4201833, 4201846, 4201867, 4201876]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_after/O1/smoothstreamingenc.o---after
The extraction of function: write_manifest
[4201798, 4201820, 4201833, 4201846, 4201867, 4201876]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 84 nodes and 135 edges in CFGEmulated.
It has 78 nodes and 107 edges in CDG.
It has 2474 nodes and 3129 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4201798, 4201820, 4201833, 4201846, 4201867, 4201876]
{4198528, 4198786, 4199813, 4200838, 4201867, 4200076, 4201739, 4200976, 4198674, 4201876, 4199831, 4198808, 4201368, 4201625, 4200608, 4199969, 4200874, 4200749, 4201776, 4199867, 4198720, 4199745, 4201798, 4200903, 4198732, 4199756, 4199758, 4199896, 4201820, 4200798, 4198881, 4200419, 4200550, 4201833, 4199531, 4201579, 4198767, 4199791, 4198639, 4200306, 4200820, 4201846, 4201466, 4201083}
[53, 6, 66, 65, 73, 0, 18, 70, 29, 19, 47, 60, 4, 62, 24, 12, 39, 82, 43, 44, 48, 76, 17, 26, 33, 50, 13, 38, 37, 67, 2, 7, 45, 30, 69, 21, 32, 64, 11, 15, 68, 14, 83, 77, 81, 40, 51, 79, 52, 8, 22, 80, 63, 49, 31, 46, 55, 57, 41, 23]
The execution time of patched slicing information extraction via angr: 0:02:54.405432
{'write_manifest': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b4c>, <DisassemblerInsn "mov" for 0x401b54>, <DisassemblerInsn "mov" for 0x401b5c>, <DisassemblerInsn "mov" for 0x401b63>, <DisassemblerInsn "add" for 0x401b6a>, <DisassemblerInsn "mov" for 0x401b6e>, <DisassemblerInsn "cmp" for 0x401b70>, <DisassemblerInsn "mov" for 0x401b73>, <DisassemblerInsn "mov" for 0x401b7b>, <DisassemblerInsn "mov" for 0x401b82>, <DisassemblerInsn "mov" for 0x401b84>, <DisassemblerInsn "mov" for 0x401b8b>, <DisassemblerInsn "jb" for 0x401b92>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401140>, <DisassemblerInsn "cmp" for 0x401147>, <DisassemblerInsn "jge" for 0x40114a>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d76>, <DisassemblerInsn "mov" for 0x401d7e>, <DisassemblerInsn "call" for 0x401d86>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401706>, <DisassemblerInsn "mov" for 0x40170e>, <DisassemblerInsn "add" for 0x401715>, <DisassemblerInsn "mov" for 0x401718>, <DisassemblerInsn "mov" for 0x40171f>, <DisassemblerInsn "mov" for 0x401726>, <DisassemblerInsn "mov" for 0x40172e>, <DisassemblerInsn "mov" for 0x401736>, <DisassemblerInsn "mov" for 0x40173d>, <DisassemblerInsn "add" for 0x401744>, <DisassemblerInsn "mov" for 0x401748>, <DisassemblerInsn "cmp" for 0x40174a>, <DisassemblerInsn "mov" for 0x40174d>, <DisassemblerInsn "mov" for 0x401755>, <DisassemblerInsn "mov" for 0x40175c>, <DisassemblerInsn "mov" for 0x40175e>, <DisassemblerInsn "mov" for 0x401765>, <DisassemblerInsn "jb" for 0x40176c>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ce6>, <DisassemblerInsn "mov" for 0x401ceb>, <DisassemblerInsn "mov" for 0x401cf0>, <DisassemblerInsn "mov" for 0x401cf6>, <DisassemblerInsn "lea" for 0x401cfd>, <DisassemblerInsn "mov" for 0x401d04>, <DisassemblerInsn "call" for 0x401d06>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x401080>, <DisassemblerInsn "push" for 0x401082>, <DisassemblerInsn "sub" for 0x401083>, <DisassemblerInsn "mov" for 0x40108a>, <DisassemblerInsn "mov" for 0x401091>, <DisassemblerInsn "mov" for 0x401094>, <DisassemblerInsn "mov" for 0x40109c>, <DisassemblerInsn "mov" for 0x4010a0>, <DisassemblerInsn "lea" for 0x4010a8>, <DisassemblerInsn "lea" for 0x4010b0>, <DisassemblerInsn "mov" for 0x4010b8>, <DisassemblerInsn "lea" for 0x4010c0>, <DisassemblerInsn "mov" for 0x4010c8>, <DisassemblerInsn "add" for 0x4010d0>, <DisassemblerInsn "mov" for 0x4010d4>, <DisassemblerInsn "mov" for 0x4010dc>, <DisassemblerInsn "lea" for 0x4010e1>, <DisassemblerInsn "mov" for 0x4010e8>, <DisassemblerInsn "call" for 0x4010ea>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4012d8>, <DisassemblerInsn "mov" for 0x4012df>, <DisassemblerInsn "mov" for 0x4012e7>, <DisassemblerInsn "imul" for 0x4012ef>, <DisassemblerInsn "add" for 0x4012f6>, <DisassemblerInsn "add" for 0x4012f9>, <DisassemblerInsn "mov" for 0x4012ff>, <DisassemblerInsn "add" for 0x401302>, <DisassemblerInsn "mov" for 0x401305>, <DisassemblerInsn "mov" for 0x401307>, <DisassemblerInsn "mov" for 0x40130b>, <DisassemblerInsn "add" for 0x401312>, <DisassemblerInsn "mov" for 0x401319>, <DisassemblerInsn "mov" for 0x401321>, <DisassemblerInsn "mov" for 0x401329>, <DisassemblerInsn "mov" for 0x401331>, <DisassemblerInsn "mov" for 0x401339>, <DisassemblerInsn "mov" for 0x401341>, <DisassemblerInsn "mov" for 0x401345>, <DisassemblerInsn "cmp" for 0x401349>, <DisassemblerInsn "jne" for 0x40134d>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401902>, <DisassemblerInsn "mov" for 0x40190a>, <DisassemblerInsn "mov" for 0x401912>, <DisassemblerInsn "mov" for 0x401918>, <DisassemblerInsn "lea" for 0x40191f>, <DisassemblerInsn "mov" for 0x401926>, <DisassemblerInsn "call" for 0x401928>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401585>, <DisassemblerInsn "cmp" for 0x40158d>, <DisassemblerInsn "je" for 0x401591>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401541>, <DisassemblerInsn "test" for 0x401548>, <DisassemblerInsn "jne" for 0x40154a>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40168c>, <DisassemblerInsn "mov" for 0x401694>, <DisassemblerInsn "mov" for 0x40169b>, <DisassemblerInsn "mov" for 0x4016a3>, <DisassemblerInsn "mov" for 0x4016ab>, <DisassemblerInsn "mov" for 0x4016b3>, <DisassemblerInsn "imul" for 0x4016b7>, <DisassemblerInsn "mov" for 0x4016be>, <DisassemblerInsn "add" for 0x4016c1>, <DisassemblerInsn "add" for 0x4016c4>, <DisassemblerInsn "mov" for 0x4016cb>, <DisassemblerInsn "mov" for 0x4016ce>, <DisassemblerInsn "mov" for 0x4016d5>, <DisassemblerInsn "imul" for 0x4016dc>, <DisassemblerInsn "add" for 0x4016e3>, <DisassemblerInsn "add" for 0x4016e6>, <DisassemblerInsn "mov" for 0x4016ec>, <DisassemblerInsn "lea" for 0x4016ef>, <DisassemblerInsn "mov" for 0x4016f6>, <DisassemblerInsn "mov" for 0x4016fa>, <DisassemblerInsn "mov" for 0x4016ff>, <DisassemblerInsn "call" for 0x401701>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c6b>, <DisassemblerInsn "mov" for 0x401c6f>, <DisassemblerInsn "mov" for 0x401c76>, <DisassemblerInsn "mov" for 0x401c7b>, <DisassemblerInsn "mov" for 0x401c7e>, <DisassemblerInsn "mov" for 0x401c81>, <DisassemblerInsn "test" for 0x401c87>, <DisassemblerInsn "setg" for 0x401c89>, <DisassemblerInsn "or" for 0x401c8c>, <DisassemblerInsn "mov" for 0x401c8e>, <DisassemblerInsn "mov" for 0x401c92>, <DisassemblerInsn "mov" for 0x401c94>, <DisassemblerInsn "mov" for 0x401c99>, <DisassemblerInsn "mov" for 0x401c9d>, <DisassemblerInsn "mov" for 0x401ca2>, <DisassemblerInsn "mov" for 0x401ca7>, <DisassemblerInsn "mov" for 0x401cac>, <DisassemblerInsn "mov" for 0x401caf>, <DisassemblerInsn "mov" for 0x401cb3>, <DisassemblerInsn "test" for 0x401cb8>, <DisassemblerInsn "jne" for 0x401cba>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401112>, <DisassemblerInsn "mov" for 0x40111a>, <DisassemblerInsn "add" for 0x401122>, <DisassemblerInsn "lea" for 0x401129>, <DisassemblerInsn "mov" for 0x401131>, <DisassemblerInsn "xor" for 0x401136>, <DisassemblerInsn "mov" for 0x401138>, <DisassemblerInsn "call" for 0x40113b>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a10>, <DisassemblerInsn "mov" for 0x401a18>, <DisassemblerInsn "mov" for 0x401a20>, <DisassemblerInsn "mov" for 0x401a28>, <DisassemblerInsn "mov" for 0x401a2f>, <DisassemblerInsn "mov" for 0x401a36>, <DisassemblerInsn "mov" for 0x401a3d>, <DisassemblerInsn "mov" for 0x401a45>, <DisassemblerInsn "mov" for 0x401a48>, <DisassemblerInsn "mov" for 0x401a50>, <DisassemblerInsn "mov" for 0x401a53>, <DisassemblerInsn "mov" for 0x401a57>, <DisassemblerInsn "mov" for 0x401a5b>, <DisassemblerInsn "cmp" for 0x401a63>, <DisassemblerInsn "mov" for 0x401a67>, <DisassemblerInsn "mov" for 0x401a6e>, <DisassemblerInsn "jne" for 0x401a75>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4013c7>, <DisassemblerInsn "mov" for 0x4013cf>, <DisassemblerInsn "mov" for 0x4013d7>, <DisassemblerInsn "mov" for 0x4013df>, <DisassemblerInsn "mov" for 0x4013e6>, <DisassemblerInsn "mov" for 0x4013ed>, <DisassemblerInsn "mov" for 0x4013f4>, <DisassemblerInsn "add" for 0x4013fb>, <DisassemblerInsn "cmp" for 0x4013ff>, <DisassemblerInsn "mov" for 0x401402>, <DisassemblerInsn "mov" for 0x40140a>, <DisassemblerInsn "mov" for 0x40140d>, <DisassemblerInsn "mov" for 0x401415>, <DisassemblerInsn "mov" for 0x401418>, <DisassemblerInsn "mov" for 0x401420>, <DisassemblerInsn "mov" for 0x401423>, <DisassemblerInsn "mov" for 0x40142b>, <DisassemblerInsn "mov" for 0x40142e>, <DisassemblerInsn "mov" for 0x401436>, <DisassemblerInsn "mov" for 0x401439>, <DisassemblerInsn "mov" for 0x401441>, <DisassemblerInsn "mov" for 0x401448>, <DisassemblerInsn "mov" for 0x40144f>, <DisassemblerInsn "mov" for 0x401457>, <DisassemblerInsn "mov" for 0x40145e>, <DisassemblerInsn "jne" for 0x401465>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401198>, <DisassemblerInsn "mov" for 0x4011a0>, <DisassemblerInsn "mov" for 0x4011a3>, <DisassemblerInsn "xor" for 0x4011aa>, <DisassemblerInsn "xor" for 0x4011ac>, <DisassemblerInsn "cmp" for 0x4011ae>, <DisassemblerInsn "mov" for 0x4011b1>, <DisassemblerInsn "mov" for 0x4011b3>, <DisassemblerInsn "mov" for 0x4011ba>, <DisassemblerInsn "mov" for 0x4011bc>, <DisassemblerInsn "mov" for 0x4011c3>, <DisassemblerInsn "mov" for 0x4011cb>, <DisassemblerInsn "mov" for 0x4011cd>, <DisassemblerInsn "mov" for 0x4011d4>, <DisassemblerInsn "je" for 0x4011db>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019aa>, <DisassemblerInsn "mov" for 0x4019b2>, <DisassemblerInsn "cmp" for 0x4019b7>, <DisassemblerInsn "mov" for 0x4019ba>, <DisassemblerInsn "je" for 0x4019c1>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4018a0>, <DisassemblerInsn "mov" for 0x4018a7>, <DisassemblerInsn "mov" for 0x4018af>, <DisassemblerInsn "mov" for 0x4018b7>, <DisassemblerInsn "mov" for 0x4018bf>, <DisassemblerInsn "mov" for 0x4018c2>, <DisassemblerInsn "mov" for 0x4018c6>, <DisassemblerInsn "test" for 0x4018ce>, <DisassemblerInsn "jne" for 0x4018d0>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b98>, <DisassemblerInsn "mov" for 0x401ba0>, <DisassemblerInsn "mov" for 0x401ba8>, <DisassemblerInsn "mov" for 0x401baf>, <DisassemblerInsn "mov" for 0x401bb3>, <DisassemblerInsn "movsxd" for 0x401bb8>, <DisassemblerInsn "mov" for 0x401bbb>, <DisassemblerInsn "mov" for 0x401bc0>, <DisassemblerInsn "mov" for 0x401bc8>, <DisassemblerInsn "mov" for 0x401bcd>, <DisassemblerInsn "mov" for 0x401bcf>, <DisassemblerInsn "imul" for 0x401bd3>, <DisassemblerInsn "add" for 0x401bda>, <DisassemblerInsn "add" for 0x401bdd>, <DisassemblerInsn "mov" for 0x401be3>, <DisassemblerInsn "mov" for 0x401be8>, <DisassemblerInsn "mov" for 0x401bea>, <DisassemblerInsn "cmp" for 0x401bf1>, <DisassemblerInsn "jl" for 0x401bf4>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019c7>, <DisassemblerInsn "mov" for 0x4019cf>, <DisassemblerInsn "add" for 0x4019d7>, <DisassemblerInsn "mov" for 0x4019db>, <DisassemblerInsn "add" for 0x4019e3>, <DisassemblerInsn "mov" for 0x4019e7>, <DisassemblerInsn "xor" for 0x4019ef>, <DisassemblerInsn "mov" for 0x4019f1>, <DisassemblerInsn "xor" for 0x4019f3>, <DisassemblerInsn "mov" for 0x4019f5>, <DisassemblerInsn "mov" for 0x4019fa>, <DisassemblerInsn "mov" for 0x401a02>, <DisassemblerInsn "mov" for 0x401a09>, <DisassemblerInsn "mov" for 0x401a10>, <DisassemblerInsn "mov" for 0x401a18>, <DisassemblerInsn "mov" for 0x401a20>, <DisassemblerInsn "mov" for 0x401a28>, <DisassemblerInsn "mov" for 0x401a2f>, <DisassemblerInsn "mov" for 0x401a36>, <DisassemblerInsn "mov" for 0x401a3d>, <DisassemblerInsn "mov" for 0x401a45>, <DisassemblerInsn "mov" for 0x401a48>, <DisassemblerInsn "mov" for 0x401a50>, <DisassemblerInsn "mov" for 0x401a53>, <DisassemblerInsn "mov" for 0x401a57>, <DisassemblerInsn "mov" for 0x401a5b>, <DisassemblerInsn "cmp" for 0x401a63>, <DisassemblerInsn "mov" for 0x401a67>, <DisassemblerInsn "mov" for 0x401a6e>, <DisassemblerInsn "jne" for 0x401a75>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401726>, <DisassemblerInsn "mov" for 0x40172e>, <DisassemblerInsn "mov" for 0x401736>, <DisassemblerInsn "mov" for 0x40173d>, <DisassemblerInsn "add" for 0x401744>, <DisassemblerInsn "mov" for 0x401748>, <DisassemblerInsn "cmp" for 0x40174a>, <DisassemblerInsn "mov" for 0x40174d>, <DisassemblerInsn "mov" for 0x401755>, <DisassemblerInsn "mov" for 0x40175c>, <DisassemblerInsn "mov" for 0x40175e>, <DisassemblerInsn "mov" for 0x401765>, <DisassemblerInsn "jb" for 0x40176c>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401900>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401321>, <DisassemblerInsn "mov" for 0x401329>, <DisassemblerInsn "mov" for 0x401331>, <DisassemblerInsn "mov" for 0x401339>, <DisassemblerInsn "mov" for 0x401341>, <DisassemblerInsn "mov" for 0x401345>, <DisassemblerInsn "cmp" for 0x401349>, <DisassemblerInsn "jne" for 0x40134d>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40156f>, <DisassemblerInsn "lea" for 0x401577>, <DisassemblerInsn "mov" for 0x40157e>, <DisassemblerInsn "call" for 0x401580>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401986>, <DisassemblerInsn "mov" for 0x40198d>, <DisassemblerInsn "mov" for 0x401994>, <DisassemblerInsn "lea" for 0x40199c>, <DisassemblerInsn "mov" for 0x4019a3>, <DisassemblerInsn "call" for 0x4019a5>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d30>, <DisassemblerInsn "lea" for 0x401d38>, <DisassemblerInsn "mov" for 0x401d3f>, <DisassemblerInsn "call" for 0x401d41>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d94>, <DisassemblerInsn "add" for 0x401d9b>, <DisassemblerInsn "pop" for 0x401da2>, <DisassemblerInsn "pop" for 0x401da3>, <DisassemblerInsn "ret" for 0x401da5>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d5c>, <DisassemblerInsn "call" for 0x401d64>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4015bb>, <DisassemblerInsn "mov" for 0x4015c3>, <DisassemblerInsn "cmp" for 0x4015c8>, <DisassemblerInsn "mov" for 0x4015cb>, <DisassemblerInsn "je" for 0x4015d2>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401cbc>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4010ef>, <DisassemblerInsn "mov" for 0x4010f7>, <DisassemblerInsn "mov" for 0x4010ff>, <DisassemblerInsn "lea" for 0x401104>, <DisassemblerInsn "mov" for 0x40110b>, <DisassemblerInsn "call" for 0x40110d>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40114c>, <DisassemblerInsn "mov" for 0x401154>, <DisassemblerInsn "mov" for 0x40115c>, <DisassemblerInsn "lea" for 0x401161>, <DisassemblerInsn "mov" for 0x401168>, <DisassemblerInsn "call" for 0x40116a>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40195e>, <DisassemblerInsn "lea" for 0x401966>, <DisassemblerInsn "mov" for 0x40196d>, <DisassemblerInsn "call" for 0x40196f>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401974>, <DisassemblerInsn "cmp" for 0x40197c>, <DisassemblerInsn "je" for 0x401980>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b2c>, <DisassemblerInsn "mov" for 0x401b34>, <DisassemblerInsn "add" for 0x401b3b>, <DisassemblerInsn "mov" for 0x401b3e>, <DisassemblerInsn "mov" for 0x401b45>, <DisassemblerInsn "mov" for 0x401b4c>, <DisassemblerInsn "mov" for 0x401b54>, <DisassemblerInsn "mov" for 0x401b5c>, <DisassemblerInsn "mov" for 0x401b63>, <DisassemblerInsn "add" for 0x401b6a>, <DisassemblerInsn "mov" for 0x401b6e>, <DisassemblerInsn "cmp" for 0x401b70>, <DisassemblerInsn "mov" for 0x401b73>, <DisassemblerInsn "mov" for 0x401b7b>, <DisassemblerInsn "mov" for 0x401b82>, <DisassemblerInsn "mov" for 0x401b84>, <DisassemblerInsn "mov" for 0x401b8b>, <DisassemblerInsn "jb" for 0x401b92>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40138c>, <DisassemblerInsn "mov" for 0x401393>, <DisassemblerInsn "mov" for 0x40139a>, <DisassemblerInsn "mov" for 0x4013a1>, <DisassemblerInsn "add" for 0x4013a8>, <DisassemblerInsn "mov" for 0x4013ab>, <DisassemblerInsn "mov" for 0x4013b2>, <DisassemblerInsn "mov" for 0x4013b9>, <DisassemblerInsn "mov" for 0x4013c0>, <DisassemblerInsn "mov" for 0x4013c7>, <DisassemblerInsn "mov" for 0x4013cf>, <DisassemblerInsn "mov" for 0x4013d7>, <DisassemblerInsn "mov" for 0x4013df>, <DisassemblerInsn "mov" for 0x4013e6>, <DisassemblerInsn "mov" for 0x4013ed>, <DisassemblerInsn "mov" for 0x4013f4>, <DisassemblerInsn "add" for 0x4013fb>, <DisassemblerInsn "cmp" for 0x4013ff>, <DisassemblerInsn "mov" for 0x401402>, <DisassemblerInsn "mov" for 0x40140a>, <DisassemblerInsn "mov" for 0x40140d>, <DisassemblerInsn "mov" for 0x401415>, <DisassemblerInsn "mov" for 0x401418>, <DisassemblerInsn "mov" for 0x401420>, <DisassemblerInsn "mov" for 0x401423>, <DisassemblerInsn "mov" for 0x40142b>, <DisassemblerInsn "mov" for 0x40142e>, <DisassemblerInsn "mov" for 0x401436>, <DisassemblerInsn "mov" for 0x401439>, <DisassemblerInsn "mov" for 0x401441>, <DisassemblerInsn "mov" for 0x401448>, <DisassemblerInsn "mov" for 0x40144f>, <DisassemblerInsn "mov" for 0x401457>, <DisassemblerInsn "mov" for 0x40145e>, <DisassemblerInsn "jne" for 0x401465>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d46>, <DisassemblerInsn "lea" for 0x401d4e>, <DisassemblerInsn "mov" for 0x401d55>, <DisassemblerInsn "call" for 0x401d57>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4018d4>, <DisassemblerInsn "mov" for 0x4018dc>, <DisassemblerInsn "mov" for 0x4018e4>, <DisassemblerInsn "mov" for 0x4018eb>, <DisassemblerInsn "lea" for 0x4018f2>, <DisassemblerInsn "mov" for 0x4018f9>, <DisassemblerInsn "call" for 0x4018fb>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40116f>, <DisassemblerInsn "mov" for 0x401176>, <DisassemblerInsn "jmp" for 0x40117d>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011e1>, <DisassemblerInsn "mov" for 0x4011e8>, <DisassemblerInsn "mov" for 0x4011f0>, <DisassemblerInsn "mov" for 0x4011f8>, <DisassemblerInsn "mov" for 0x4011fc>, <DisassemblerInsn "mov" for 0x401204>, <DisassemblerInsn "mov" for 0x401208>, <DisassemblerInsn "mov" for 0x401210>, <DisassemblerInsn "mov" for 0x401212>, <DisassemblerInsn "xor" for 0x40121a>, <DisassemblerInsn "mov" for 0x40121c>, <DisassemblerInsn "xor" for 0x40121e>, <DisassemblerInsn "mov" for 0x401220>, <DisassemblerInsn "mov" for 0x401223>, <DisassemblerInsn "mov" for 0x40122b>, <DisassemblerInsn "mov" for 0x40122d>, <DisassemblerInsn "mov" for 0x401234>, <DisassemblerInsn "mov" for 0x401236>, <DisassemblerInsn "mov" for 0x40123d>, <DisassemblerInsn "mov" for 0x401245>, <DisassemblerInsn "mov" for 0x401247>, <DisassemblerInsn "mov" for 0x40124e>, <DisassemblerInsn "mov" for 0x401255>, <DisassemblerInsn "mov" for 0x40125d>, <DisassemblerInsn "mov" for 0x401265>, <DisassemblerInsn "mov" for 0x40126c>, <DisassemblerInsn "mov" for 0x401273>, <DisassemblerInsn "mov" for 0x40127b>, <DisassemblerInsn "mov" for 0x401283>, <DisassemblerInsn "mov" for 0x40128b>, <DisassemblerInsn "mov" for 0x401293>, <DisassemblerInsn "mov" for 0x40129b>, <DisassemblerInsn "mov" for 0x4012a2>, <DisassemblerInsn "mov" for 0x4012a9>, <DisassemblerInsn "imul" for 0x4012b1>, <DisassemblerInsn "add" for 0x4012b8>, <DisassemblerInsn "add" for 0x4012bb>, <DisassemblerInsn "mov" for 0x4012c2>, <DisassemblerInsn "mov" for 0x4012c4>, <DisassemblerInsn "cmp" for 0x4012cb>, <DisassemblerInsn "mov" for 0x4012ce>, <DisassemblerInsn "jle" for 0x4012d6>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401cbe>, <DisassemblerInsn "mov" for 0x401cc3>, <DisassemblerInsn "mov" for 0x401cc8>, <DisassemblerInsn "mov" for 0x401ccf>, <DisassemblerInsn "lea" for 0x401cd6>, <DisassemblerInsn "mov" for 0x401cdd>, <DisassemblerInsn "call" for 0x401cdf>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40146b>, <DisassemblerInsn "mov" for 0x401473>, <DisassemblerInsn "mov" for 0x40147a>, <DisassemblerInsn "mov" for 0x401482>, <DisassemblerInsn "mov" for 0x40148a>, <DisassemblerInsn "mov" for 0x401492>, <DisassemblerInsn "mov" for 0x40149a>, <DisassemblerInsn "mov" for 0x4014a2>, <DisassemblerInsn "mov" for 0x4014a9>, <DisassemblerInsn "mov" for 0x4014b1>, <DisassemblerInsn "add" for 0x4014b9>, <DisassemblerInsn "mov" for 0x4014bd>, <DisassemblerInsn "cmp" for 0x4014c5>, <DisassemblerInsn "sete" for 0x4014c8>, <DisassemblerInsn "mov" for 0x4014cc>, <DisassemblerInsn "xor" for 0x4014d4>, <DisassemblerInsn "cmp" for 0x4014d6>, <DisassemblerInsn "cmove" for 0x4014d9>, <DisassemblerInsn "xor" for 0x4014dd>, <DisassemblerInsn "cmp" for 0x4014df>, <DisassemblerInsn "cmove" for 0x4014e2>, <DisassemblerInsn "xor" for 0x4014e6>, <DisassemblerInsn "cmp" for 0x4014e8>, <DisassemblerInsn "cmove" for 0x4014eb>, <DisassemblerInsn "mov" for 0x4014ee>, <DisassemblerInsn "add" for 0x4014f1>, <DisassemblerInsn "mov" for 0x4014f5>, <DisassemblerInsn "mov" for 0x4014fd>, <DisassemblerInsn "cmp" for 0x401500>, <DisassemblerInsn "mov" for 0x401502>, <DisassemblerInsn "cmovg" for 0x401504>, <DisassemblerInsn "cmp" for 0x401507>, <DisassemblerInsn "mov" for 0x40150a>, <DisassemblerInsn "cmovg" for 0x40150d>, <DisassemblerInsn "cmp" for 0x401510>, <DisassemblerInsn "cmove" for 0x401513>, <DisassemblerInsn "mov" for 0x401517>, <DisassemblerInsn "cmp" for 0x40151e>, <DisassemblerInsn "cmove" for 0x401521>, <DisassemblerInsn "mov" for 0x401524>, <DisassemblerInsn "mov" for 0x40152b>, <DisassemblerInsn "lea" for 0x401533>, <DisassemblerInsn "mov" for 0x40153a>, <DisassemblerInsn "call" for 0x40153c>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c99>, <DisassemblerInsn "mov" for 0x401c9d>, <DisassemblerInsn "mov" for 0x401ca2>, <DisassemblerInsn "mov" for 0x401ca7>, <DisassemblerInsn "mov" for 0x401cac>, <DisassemblerInsn "mov" for 0x401caf>, <DisassemblerInsn "mov" for 0x401cb3>, <DisassemblerInsn "test" for 0x401cb8>, <DisassemblerInsn "jne" for 0x401cba>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "xor" for 0x401d8b>, <DisassemblerInsn "mov" for 0x401d8d>, <DisassemblerInsn "mov" for 0x401d94>, <DisassemblerInsn "add" for 0x401d9b>, <DisassemblerInsn "pop" for 0x401da2>, <DisassemblerInsn "pop" for 0x401da3>, <DisassemblerInsn "ret" for 0x401da5>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d0b>, <DisassemblerInsn "mov" for 0x401d0f>, <DisassemblerInsn "mov" for 0x401d14>, <DisassemblerInsn "add" for 0x401d19>, <DisassemblerInsn "mov" for 0x401d1d>, <DisassemblerInsn "sub" for 0x401d1f>, <DisassemblerInsn "mov" for 0x401d21>, <DisassemblerInsn "cmp" for 0x401d23>, <DisassemblerInsn "mov" for 0x401d25>, <DisassemblerInsn "jg" for 0x401d2a>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401772>, <DisassemblerInsn "mov" for 0x40177a>, <DisassemblerInsn "mov" for 0x401782>, <DisassemblerInsn "mov" for 0x401789>, <DisassemblerInsn "mov" for 0x40178d>, <DisassemblerInsn "movsxd" for 0x401795>, <DisassemblerInsn "mov" for 0x401798>, <DisassemblerInsn "mov" for 0x4017a0>, <DisassemblerInsn "mov" for 0x4017a8>, <DisassemblerInsn "mov" for 0x4017b0>, <DisassemblerInsn "mov" for 0x4017b2>, <DisassemblerInsn "imul" for 0x4017b9>, <DisassemblerInsn "add" for 0x4017c0>, <DisassemblerInsn "add" for 0x4017c3>, <DisassemblerInsn "mov" for 0x4017c9>, <DisassemblerInsn "mov" for 0x4017d1>, <DisassemblerInsn "mov" for 0x4017d3>, <DisassemblerInsn "cmp" for 0x4017da>, <DisassemblerInsn "jl" for 0x4017dd>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401bfa>, <DisassemblerInsn "mov" for 0x401c01>, <DisassemblerInsn "mov" for 0x401c05>, <DisassemblerInsn "mov" for 0x401c0d>, <DisassemblerInsn "mov" for 0x401c12>, <DisassemblerInsn "mov" for 0x401c17>, <DisassemblerInsn "mov" for 0x401c1f>, <DisassemblerInsn "imul" for 0x401c22>, <DisassemblerInsn "add" for 0x401c29>, <DisassemblerInsn "add" for 0x401c2c>, <DisassemblerInsn "mov" for 0x401c33>, <DisassemblerInsn "xor" for 0x401c38>, <DisassemblerInsn "test" for 0x401c3a>, <DisassemblerInsn "cmovne" for 0x401c3e>, <DisassemblerInsn "mov" for 0x401c41>, <DisassemblerInsn "mov" for 0x401c45>, <DisassemblerInsn "add" for 0x401c47>, <DisassemblerInsn "mov" for 0x401c49>, <DisassemblerInsn "sub" for 0x401c4b>, <DisassemblerInsn "xor" for 0x401c4d>, <DisassemblerInsn "cmp" for 0x401c4f>, <DisassemblerInsn "cmovg" for 0x401c52>, <DisassemblerInsn "xor" for 0x401c55>, <DisassemblerInsn "cmp" for 0x401c57>, <DisassemblerInsn "cmove" for 0x401c5a>, <DisassemblerInsn "mov" for 0x401c5d>, <DisassemblerInsn "sub" for 0x401c61>, <DisassemblerInsn "cmp" for 0x401c63>, <DisassemblerInsn "jge" for 0x401c65>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401ce4>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a7b>, <DisassemblerInsn "mov" for 0x401a83>, <DisassemblerInsn "mov" for 0x401a8a>, <DisassemblerInsn "mov" for 0x401a92>, <DisassemblerInsn "mov" for 0x401a9a>, <DisassemblerInsn "mov" for 0x401aa2>, <DisassemblerInsn "imul" for 0x401aa6>, <DisassemblerInsn "mov" for 0x401aad>, <DisassemblerInsn "add" for 0x401ab0>, <DisassemblerInsn "add" for 0x401ab3>, <DisassemblerInsn "mov" for 0x401aba>, <DisassemblerInsn "mov" for 0x401abd>, <DisassemblerInsn "mov" for 0x401ac4>, <DisassemblerInsn "imul" for 0x401acb>, <DisassemblerInsn "mov" for 0x401ad2>, <DisassemblerInsn "add" for 0x401ad5>, <DisassemblerInsn "add" for 0x401ad8>, <DisassemblerInsn "mov" for 0x401adf>, <DisassemblerInsn "imul" for 0x401ae2>, <DisassemblerInsn "mov" for 0x401ae9>, <DisassemblerInsn "add" for 0x401aec>, <DisassemblerInsn "add" for 0x401aef>, <DisassemblerInsn "mov" for 0x401af6>, <DisassemblerInsn "imul" for 0x401af9>, <DisassemblerInsn "add" for 0x401b00>, <DisassemblerInsn "add" for 0x401b03>, <DisassemblerInsn "mov" for 0x401b09>, <DisassemblerInsn "lea" for 0x401b0c>, <DisassemblerInsn "mov" for 0x401b13>, <DisassemblerInsn "mov" for 0x401b16>, <DisassemblerInsn "mov" for 0x401b1b>, <DisassemblerInsn "mov" for 0x401b20>, <DisassemblerInsn "mov" for 0x401b25>, <DisassemblerInsn "call" for 0x401b27>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401182>, <DisassemblerInsn "lea" for 0x40118a>, <DisassemblerInsn "mov" for 0x401191>, <DisassemblerInsn "call" for 0x401193>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40154c>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40192d>, <DisassemblerInsn "mov" for 0x401934>, <DisassemblerInsn "mov" for 0x40193c>, <DisassemblerInsn "add" for 0x401944>, <DisassemblerInsn "mov" for 0x401948>, <DisassemblerInsn "sub" for 0x40194a>, <DisassemblerInsn "mov" for 0x40194c>, <DisassemblerInsn "cmp" for 0x40194e>, <DisassemblerInsn "mov" for 0x401950>, <DisassemblerInsn "jg" for 0x401958>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4018d2>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d69>, <DisassemblerInsn "call" for 0x401d71>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401597>, <DisassemblerInsn "mov" for 0x40159e>, <DisassemblerInsn "mov" for 0x4015a5>, <DisassemblerInsn "lea" for 0x4015ad>, <DisassemblerInsn "mov" for 0x4015b4>, <DisassemblerInsn "call" for 0x4015b6>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4017e3>, <DisassemblerInsn "mov" for 0x4017ea>, <DisassemblerInsn "mov" for 0x4017f1>, <DisassemblerInsn "mov" for 0x4017f9>, <DisassemblerInsn "mov" for 0x401801>, <DisassemblerInsn "mov" for 0x401809>, <DisassemblerInsn "mov" for 0x401811>, <DisassemblerInsn "imul" for 0x401814>, <DisassemblerInsn "add" for 0x40181b>, <DisassemblerInsn "add" for 0x40181e>, <DisassemblerInsn "mov" for 0x401825>, <DisassemblerInsn "xor" for 0x40182d>, <DisassemblerInsn "test" for 0x40182f>, <DisassemblerInsn "cmovne" for 0x401833>, <DisassemblerInsn "mov" for 0x401836>, <DisassemblerInsn "mov" for 0x40183d>, <DisassemblerInsn "add" for 0x40183f>, <DisassemblerInsn "mov" for 0x401841>, <DisassemblerInsn "sub" for 0x401843>, <DisassemblerInsn "xor" for 0x401845>, <DisassemblerInsn "cmp" for 0x401847>, <DisassemblerInsn "cmovg" for 0x40184a>, <DisassemblerInsn "xor" for 0x40184d>, <DisassemblerInsn "cmp" for 0x40184f>, <DisassemblerInsn "cmove" for 0x401852>, <DisassemblerInsn "mov" for 0x401855>, <DisassemblerInsn "sub" for 0x40185c>, <DisassemblerInsn "cmp" for 0x40185e>, <DisassemblerInsn "jge" for 0x401860>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401866>, <DisassemblerInsn "mov" for 0x40186d>, <DisassemblerInsn "mov" for 0x401874>, <DisassemblerInsn "mov" for 0x40187c>, <DisassemblerInsn "mov" for 0x40187f>, <DisassemblerInsn "mov" for 0x401882>, <DisassemblerInsn "test" for 0x401888>, <DisassemblerInsn "setg" for 0x40188a>, <DisassemblerInsn "or" for 0x40188d>, <DisassemblerInsn "mov" for 0x40188f>, <DisassemblerInsn "mov" for 0x401896>, <DisassemblerInsn "mov" for 0x401898>, <DisassemblerInsn "mov" for 0x4018a0>, <DisassemblerInsn "mov" for 0x4018a7>, <DisassemblerInsn "mov" for 0x4018af>, <DisassemblerInsn "mov" for 0x4018b7>, <DisassemblerInsn "mov" for 0x4018bf>, <DisassemblerInsn "mov" for 0x4018c2>, <DisassemblerInsn "mov" for 0x4018c6>, <DisassemblerInsn "test" for 0x4018ce>, <DisassemblerInsn "jne" for 0x4018d0>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401621>, <DisassemblerInsn "mov" for 0x401629>, <DisassemblerInsn "mov" for 0x401631>, <DisassemblerInsn "mov" for 0x401639>, <DisassemblerInsn "mov" for 0x401640>, <DisassemblerInsn "mov" for 0x401647>, <DisassemblerInsn "mov" for 0x40164e>, <DisassemblerInsn "mov" for 0x401656>, <DisassemblerInsn "mov" for 0x401659>, <DisassemblerInsn "mov" for 0x401661>, <DisassemblerInsn "mov" for 0x401664>, <DisassemblerInsn "mov" for 0x401668>, <DisassemblerInsn "mov" for 0x40166c>, <DisassemblerInsn "cmp" for 0x401674>, <DisassemblerInsn "mov" for 0x401678>, <DisassemblerInsn "mov" for 0x40167f>, <DisassemblerInsn "jne" for 0x401686>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4015d8>, <DisassemblerInsn "mov" for 0x4015e0>, <DisassemblerInsn "add" for 0x4015e8>, <DisassemblerInsn "mov" for 0x4015ec>, <DisassemblerInsn "add" for 0x4015f4>, <DisassemblerInsn "mov" for 0x4015f8>, <DisassemblerInsn "xor" for 0x401600>, <DisassemblerInsn "mov" for 0x401602>, <DisassemblerInsn "xor" for 0x401604>, <DisassemblerInsn "mov" for 0x401606>, <DisassemblerInsn "mov" for 0x40160b>, <DisassemblerInsn "mov" for 0x401613>, <DisassemblerInsn "mov" for 0x40161a>, <DisassemblerInsn "mov" for 0x401621>, <DisassemblerInsn "mov" for 0x401629>, <DisassemblerInsn "mov" for 0x401631>, <DisassemblerInsn "mov" for 0x401639>, <DisassemblerInsn "mov" for 0x401640>, <DisassemblerInsn "mov" for 0x401647>, <DisassemblerInsn "mov" for 0x40164e>, <DisassemblerInsn "mov" for 0x401656>, <DisassemblerInsn "mov" for 0x401659>, <DisassemblerInsn "mov" for 0x401661>, <DisassemblerInsn "mov" for 0x401664>, <DisassemblerInsn "mov" for 0x401668>, <DisassemblerInsn "mov" for 0x40166c>, <DisassemblerInsn "cmp" for 0x401674>, <DisassemblerInsn "mov" for 0x401678>, <DisassemblerInsn "mov" for 0x40167f>, <DisassemblerInsn "jne" for 0x401686>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40154e>, <DisassemblerInsn "mov" for 0x401556>, <DisassemblerInsn "mov" for 0x40155e>, <DisassemblerInsn "lea" for 0x401561>, <DisassemblerInsn "mov" for 0x401568>, <DisassemblerInsn "call" for 0x40156a>]'}], 'cfg_block_detailed_info': [{'block_Idx': 53, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x180]>', '<mov~~rdx, qword ptr [rsp + 0x88]>', '<mov~~eax, dword ptr [rsp + 0xa0]>', '<mov~~ecx, dword ptr [rsp + 0xa4]>', '<add~~rdx, 1>', '<mov~~esi, dword ptr [rsi]>', '<cmp~~rdx, rsi>', '<mov~~qword ptr [rsp + 0xb8], rdx>', '<mov~~dword ptr [rsp + 0xc4], ecx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0xc8], ecx>', '<mov~~dword ptr [rsp + 0xcc], eax>', '<jb~~0x401a10>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~dword ptr [rsp + 0x26c], eax>', '<cmp~~eax, 0>', '<jge~~0x401182>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x260]>', '<mov~~rsi, qword ptr [rsp + 0x248]>', '<call~~0x5000d8>']}, {'block_Idx': 65, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x130]>', '<mov~~eax, dword ptr [rsp + 0x12c]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x148], ecx>', '<mov~~dword ptr [rsp + 0x14c], eax>', '<mov~~rsi, qword ptr [rsp + 0x180]>', '<mov~~rdx, qword ptr [rsp + 0x130]>', '<mov~~eax, dword ptr [rsp + 0x148]>', '<mov~~ecx, dword ptr [rsp + 0x14c]>', '<add~~rdx, 1>', '<mov~~esi, dword ptr [rsi]>', '<cmp~~rdx, rsi>', '<mov~~qword ptr [rsp + 0x160], rdx>', '<mov~~dword ptr [rsp + 0x16c], ecx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x170], ecx>', '<mov~~dword ptr [rsp + 0x174], eax>', '<jb~~0x401621>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x68]>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~edx, dword ptr [rax + 0x810]>', '<mov~~rcx, qword ptr [rax + 0x808]>', '<lea~~rsi, [rip + 0x1d0b]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 0, 'blockInsts': ['<push~~r14>', '<push~~rbx>', '<sub~~rsp, 0xa78>', '<mov~~dword ptr [rsp + 0x23c], esi>', '<mov~~rcx, rdi>', '<mov~~qword ptr [rsp + 0x258], rcx>', '<mov~~rax, qword ptr [rcx + 0x18]>', '<mov~~qword ptr [rsp + 0x240], rax>', '<lea~~rax, [rsp + 0xa70]>', '<lea~~rdi, [rsp + 0x670]>', '<mov~~qword ptr [rsp + 0x248], rdi>', '<lea~~rax, [rsp + 0x270]>', '<mov~~qword ptr [rsp + 0x260], rax>', '<add~~rcx, 0x38>', '<mov~~qword ptr [rsp + 0x250], rcx>', '<mov~~esi, 0x400>', '<lea~~rdx, [rip + 0x2605]>', '<mov~~al, 0>', '<call~~0x500020>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x1d4]>', '<mov~~rax, qword ptr [rsp + 0x1e0]>', '<mov~~rdx, qword ptr [rsp + 0x1c8]>', '<imul~~rdx, rdx, 0x8480>', '<add~~rax, rdx>', '<add~~rax, 0x8460>', '<mov~~rax, qword ptr [rax]>', '<add~~ecx, -1>', '<mov~~ecx, ecx>', '<mov~~rcx, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rcx + 0x800]>', '<add~~rax, qword ptr [rcx + 0x808]>', '<mov~~qword ptr [rsp + 0x1d8], rax>', '<mov~~rax, qword ptr [rsp + 0x1e8]>', '<mov~~rcx, qword ptr [rsp + 0x1c8]>', '<mov~~rdx, qword ptr [rsp + 0x1d8]>', '<mov~~qword ptr [rsp + 0x1b0], rdx>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0xc], 0>', '<jne~~0x40138c>']}, {'block_Idx': 70, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x110]>', '<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~edx, dword ptr [rax + 0x810]>', '<mov~~rcx, qword ptr [rax + 0x808]>', '<lea~~rsi, [rip + 0x20e9]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x240]>', '<cmp~~dword ptr [rax + 0x28], 0>', '<je~~0x401974>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x19f]>', '<test~~al, 1>', '<jne~~0x40154e>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x130]>', '<mov~~edx, dword ptr [rsp + 0x12c]>', '<mov~~rax, qword ptr [rsp + 0x138]>', '<mov~~r10, qword ptr [rsp + 0x140]>', '<mov~~rdi, qword ptr [rsp + 0xa70]>', '<mov~~ecx, dword ptr [r10 + 0x60]>', '<imul~~r9, rsi, 0x8480>', '<mov~~r8, rax>', '<add~~r8, r9>', '<add~~r8, 0x8468>', '<mov~~r8, qword ptr [r8]>', '<mov~~r9d, dword ptr [r10 + 0x94]>', '<mov~~r10d, dword ptr [r10 + 0x98]>', '<imul~~rsi, rsi, 0x8480>', '<add~~rax, rsi>', '<add~~rax, 0x8470>', '<mov~~rax, qword ptr [rax]>', '<lea~~rsi, [rip + 0x215b]>', '<mov~~dword ptr [rsp], r10d>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~cl, byte ptr [rsp + 0x19f]>', '<mov~~rdx, qword ptr [rsp + 0x48]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~edx, dword ptr [rdx + 0x810]>', '<test~~edx, edx>', '<setg~~dl>', '<or~~cl, dl>', '<mov~~byte ptr [rsp + 0x3f], cl>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x40], rax>', '<mov~~al, byte ptr [rsp + 0x3f]>', '<mov~~rcx, qword ptr [rsp + 0x48]>', '<mov~~rdx, qword ptr [rsp + 0x40]>', '<mov~~qword ptr [rsp + 0x28], rdx>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~rcx, qword ptr [rcx + rdx*8]>', '<mov~~qword ptr [rsp + 0x30], rcx>', '<test~~al, 1>', '<jne~~0x401cbe>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x258]>', '<mov~~rsi, qword ptr [rsp + 0x260]>', '<add~~rcx, 0x4b0>', '<lea~~rdi, [rsp + 0xa70]>', '<mov~~edx, 2>', '<xor~~eax, eax>', '<mov~~r8d, eax>', '<call~~0x5000c0>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xb0]>', '<mov~~rdi, qword ptr [rsp + 0xa8]>', '<mov~~rsi, qword ptr [rsp + 0xb8]>', '<mov~~eax, dword ptr [rsp + 0xc4]>', '<mov~~ecx, dword ptr [rsp + 0xc8]>', '<mov~~dword ptr [rsp + 0x84], eax>', '<mov~~qword ptr [rsp + 0x88], rsi>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~qword ptr [rsp + 0x90], rdi>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdx, qword ptr [rdx + rsi*8]>', '<mov~~rdx, qword ptr [rdx + 8]>', '<mov~~qword ptr [rsp + 0x98], rdx>', '<cmp~~dword ptr [rdx + 0xc], 1>', '<mov~~dword ptr [rsp + 0xa0], ecx>', '<mov~~dword ptr [rsp + 0xa4], eax>', '<jne~~0x401b4c>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x1b0]>', '<mov~~r9, qword ptr [rsp + 0x1f0]>', '<mov~~r8, qword ptr [rsp + 0x1c8]>', '<mov~~edi, dword ptr [rsp + 0x1a0]>', '<mov~~esi, dword ptr [rsp + 0x1a4]>', '<mov~~ecx, dword ptr [rsp + 0x1a8]>', '<mov~~eax, dword ptr [rsp + 0x1ac]>', '<add~~r8, 1>', '<cmp~~r8, r9>', '<mov~~qword ptr [rsp + 0x1f8], r8>', '<mov~~r8d, eax>', '<mov~~dword ptr [rsp + 0x200], r8d>', '<mov~~r8d, ecx>', '<mov~~dword ptr [rsp + 0x204], r8d>', '<mov~~r8, rdx>', '<mov~~qword ptr [rsp + 0x208], r8>', '<mov~~r8d, esi>', '<mov~~dword ptr [rsp + 0x214], r8d>', '<mov~~r8d, edi>', '<mov~~dword ptr [rsp + 0x218], r8d>', '<mov~~dword ptr [rsp + 0x220], edi>', '<mov~~dword ptr [rsp + 0x224], esi>', '<mov~~qword ptr [rsp + 0x228], rdx>', '<mov~~dword ptr [rsp + 0x230], ecx>', '<mov~~dword ptr [rsp + 0x234], eax>', '<jne~~0x401255>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x258]>', '<mov~~edx, dword ptr [rax + 0x2c]>', '<mov~~dword ptr [rsp + 0x21c], edx>', '<xor~~eax, eax>', '<xor~~ecx, ecx>', '<cmp~~edx, 0>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x220], edx>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x224], edx>', '<mov~~qword ptr [rsp + 0x228], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x230], ecx>', '<mov~~dword ptr [rsp + 0x234], eax>', '<je~~0x40146b>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x180]>', '<mov~~eax, 0xffffffff>', '<cmp~~dword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0xcc], eax>', '<je~~0x401b98>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0xe7]>', '<mov~~rcx, qword ptr [rsp + 0xf0]>', '<mov~~rdx, qword ptr [rsp + 0xe8]>', '<mov~~qword ptr [rsp + 0xd0], rdx>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~rcx, qword ptr [rcx + rdx*8]>', '<mov~~qword ptr [rsp + 0xd8], rcx>', '<test~~al, 1>', '<jne~~0x4018d4>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x188]>', '<mov~~rax, qword ptr [rsp + 0x240]>', '<mov~~ecx, dword ptr [rsp + 0xcc]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<mov~~qword ptr [rsp + 0x58], rax>', '<movsxd~~rcx, ecx>', '<mov~~qword ptr [rsp + 0x60], rcx>', '<mov~~rsi, qword ptr [rsp + 0xa70]>', '<mov~~qword ptr [rsp + 0x68], rsi>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0x74], edx>', '<imul~~rcx, rcx, 0x8480>', '<add~~rax, rcx>', '<add~~rax, 0x8450>', '<mov~~qword ptr [rsp + 0x78], rax>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x80], eax>', '<cmp~~eax, 1>', '<jl~~0x401d30>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x258]>', '<mov~~rcx, qword ptr [rsp + 0x240]>', '<add~~rcx, 0x20>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<add~~rax, 0x30>', '<mov~~qword ptr [rsp + 0xb0], rax>', '<xor~~eax, eax>', '<mov~~edx, eax>', '<xor~~ecx, ecx>', '<mov~~eax, 0xffffffff>', '<mov~~qword ptr [rsp + 0xb8], rdx>', '<mov~~dword ptr [rsp + 0xc4], ecx>', '<mov~~dword ptr [rsp + 0xc8], eax>', '<mov~~rdx, qword ptr [rsp + 0xb0]>', '<mov~~rdi, qword ptr [rsp + 0xa8]>', '<mov~~rsi, qword ptr [rsp + 0xb8]>', '<mov~~eax, dword ptr [rsp + 0xc4]>', '<mov~~ecx, dword ptr [rsp + 0xc8]>', '<mov~~dword ptr [rsp + 0x84], eax>', '<mov~~qword ptr [rsp + 0x88], rsi>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~qword ptr [rsp + 0x90], rdi>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdx, qword ptr [rdx + rsi*8]>', '<mov~~rdx, qword ptr [rdx + 8]>', '<mov~~qword ptr [rsp + 0x98], rdx>', '<cmp~~dword ptr [rdx + 0xc], 1>', '<mov~~dword ptr [rsp + 0xa0], ecx>', '<mov~~dword ptr [rsp + 0xa4], eax>', '<jne~~0x401b4c>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x180]>', '<mov~~rdx, qword ptr [rsp + 0x130]>', '<mov~~eax, dword ptr [rsp + 0x148]>', '<mov~~ecx, dword ptr [rsp + 0x14c]>', '<add~~rdx, 1>', '<mov~~esi, dword ptr [rsi]>', '<cmp~~rdx, rsi>', '<mov~~qword ptr [rsp + 0x160], rdx>', '<mov~~dword ptr [rsp + 0x16c], ecx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x170], ecx>', '<mov~~dword ptr [rsp + 0x174], eax>', '<jb~~0x401621>']}, {'block_Idx': 76, 'blockInsts': ['<jmp~~0x40192d>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1e8]>', '<mov~~rcx, qword ptr [rsp + 0x1c8]>', '<mov~~rdx, qword ptr [rsp + 0x1d8]>', '<mov~~qword ptr [rsp + 0x1b0], rdx>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0xc], 0>', '<jne~~0x40138c>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xa70]>', '<lea~~rsi, [rip + 0x2258]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x194]>', '<mov~~edx, dword ptr [rsp + 0x178]>', '<mov~~rdi, qword ptr [rsp + 0xa70]>', '<lea~~rsi, [rip + 0x1f27]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xa70]>', '<lea~~rsi, [rip + 0x1b7b]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x238]>', '<add~~rsp, 0xa78>', '<pop~~rbx>', '<pop~~r14>', '<ret~~>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xa70]>', '<call~~0x500058>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x180]>', '<mov~~eax, 0xffffffff>', '<cmp~~dword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0x174], eax>', '<je~~0x401772>']}, {'block_Idx': 67, 'blockInsts': ['<jmp~~0x401ce6>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x250]>', '<mov~~rdi, qword ptr [rsp + 0x260]>', '<mov~~esi, 0x400>', '<lea~~rdx, [rip + 0x25ee]>', '<mov~~al, 0>', '<call~~0x500020>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x260]>', '<mov~~rdi, qword ptr [rsp + 0x258]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x25a1]>', '<mov~~al, 0>', '<call~~0x500018>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xa70]>', '<lea~~rsi, [rip + 0x1f4d]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x240]>', '<cmp~~dword ptr [rax + 0x2c], 0>', '<je~~0x401d46>']}, {'block_Idx': 69, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x88]>', '<mov~~eax, dword ptr [rsp + 0x84]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0xa0], ecx>', '<mov~~dword ptr [rsp + 0xa4], eax>', '<mov~~rsi, qword ptr [rsp + 0x180]>', '<mov~~rdx, qword ptr [rsp + 0x88]>', '<mov~~eax, dword ptr [rsp + 0xa0]>', '<mov~~ecx, dword ptr [rsp + 0xa4]>', '<add~~rdx, 1>', '<mov~~esi, dword ptr [rsi]>', '<cmp~~rdx, rsi>', '<mov~~qword ptr [rsp + 0xb8], rdx>', '<mov~~dword ptr [rsp + 0xc4], ecx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0xc8], ecx>', '<mov~~dword ptr [rsp + 0xcc], eax>', '<jb~~0x401a10>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1c4]>', '<mov~~ecx, dword ptr [rsp + 0x1d4]>', '<mov~~esi, dword ptr [rsp + 0x1b8]>', '<mov~~edx, dword ptr [rsp + 0x1bc]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp + 0x1a0], esi>', '<mov~~dword ptr [rsp + 0x1a4], edx>', '<mov~~dword ptr [rsp + 0x1a8], ecx>', '<mov~~dword ptr [rsp + 0x1ac], eax>', '<mov~~rdx, qword ptr [rsp + 0x1b0]>', '<mov~~r9, qword ptr [rsp + 0x1f0]>', '<mov~~r8, qword ptr [rsp + 0x1c8]>', '<mov~~edi, dword ptr [rsp + 0x1a0]>', '<mov~~esi, dword ptr [rsp + 0x1a4]>', '<mov~~ecx, dword ptr [rsp + 0x1a8]>', '<mov~~eax, dword ptr [rsp + 0x1ac]>', '<add~~r8, 1>', '<cmp~~r8, r9>', '<mov~~qword ptr [rsp + 0x1f8], r8>', '<mov~~r8d, eax>', '<mov~~dword ptr [rsp + 0x200], r8d>', '<mov~~r8d, ecx>', '<mov~~dword ptr [rsp + 0x204], r8d>', '<mov~~r8, rdx>', '<mov~~qword ptr [rsp + 0x208], r8>', '<mov~~r8d, esi>', '<mov~~dword ptr [rsp + 0x214], r8d>', '<mov~~r8d, edi>', '<mov~~dword ptr [rsp + 0x218], r8d>', '<mov~~dword ptr [rsp + 0x220], edi>', '<mov~~dword ptr [rsp + 0x224], esi>', '<mov~~qword ptr [rsp + 0x228], rdx>', '<mov~~dword ptr [rsp + 0x230], ecx>', '<mov~~dword ptr [rsp + 0x234], eax>', '<jne~~0x401255>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xa70]>', '<lea~~rsi, [rip + 0x1c8a]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x110]>', '<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~rdx, qword ptr [rax + 0x800]>', '<mov~~rcx, qword ptr [rax + 0x808]>', '<lea~~rsi, [rip + 0x20ff]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x26c]>', '<mov~~dword ptr [rsp + 0x238], eax>', '<jmp~~0x401d94>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x21c]>', '<mov~~rcx, qword ptr [rsp + 0x258]>', '<mov~~rdx, qword ptr [rsp + 0x240]>', '<mov~~rdx, qword ptr [rdx + 0x20]>', '<mov~~qword ptr [rsp + 0x1e0], rdx>', '<mov~~rcx, qword ptr [rcx + 0x30]>', '<mov~~qword ptr [rsp + 0x1e8], rcx>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x1f0], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~rdx, rcx>', '<mov~~qword ptr [rsp + 0x1f8], rdx>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x200], edx>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x204], edx>', '<mov~~qword ptr [rsp + 0x208], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x214], ecx>', '<mov~~dword ptr [rsp + 0x218], eax>', '<mov~~rcx, qword ptr [rsp + 0x1e0]>', '<mov~~rdx, qword ptr [rsp + 0x1f8]>', '<mov~~esi, dword ptr [rsp + 0x200]>', '<mov~~edi, dword ptr [rsp + 0x204]>', '<mov~~rax, qword ptr [rsp + 0x208]>', '<mov~~r8d, dword ptr [rsp + 0x214]>', '<mov~~r9d, dword ptr [rsp + 0x218]>', '<mov~~dword ptr [rsp + 0x1b8], r9d>', '<mov~~dword ptr [rsp + 0x1bc], r8d>', '<mov~~dword ptr [rsp + 0x1c0], edi>', '<mov~~dword ptr [rsp + 0x1c4], esi>', '<mov~~qword ptr [rsp + 0x1c8], rdx>', '<imul~~rdx, rdx, 0x8480>', '<add~~rcx, rdx>', '<add~~rcx, 0x8450>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x1d4], ecx>', '<cmp~~ecx, 0>', '<mov~~qword ptr [rsp + 0x1d8], rax>', '<jle~~0x401321>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x68]>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~rdx, qword ptr [rax + 0x800]>', '<mov~~rcx, qword ptr [rax + 0x808]>', '<lea~~rsi, [rip + 0x1d1b]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x240]>', '<mov~~edi, dword ptr [rsp + 0x23c]>', '<mov~~rsi, qword ptr [rsp + 0x258]>', '<mov~~r9d, dword ptr [rsp + 0x220]>', '<mov~~r10d, dword ptr [rsp + 0x224]>', '<mov~~rdx, qword ptr [rsp + 0x228]>', '<mov~~r8d, dword ptr [rsp + 0x230]>', '<mov~~ecx, dword ptr [rsp + 0x234]>', '<mov~~dword ptr [rsp + 0x178], r10d>', '<mov~~dword ptr [rsp + 0x17c], r9d>', '<add~~rsi, 0x2c>', '<mov~~qword ptr [rsp + 0x180], rsi>', '<cmp~~edi, 0>', '<sete~~sil>', '<mov~~byte ptr [rsp + 0x19f], sil>', '<xor~~esi, esi>', '<cmp~~edi, 0>', '<cmove~~rdx, rsi>', '<xor~~esi, esi>', '<cmp~~edi, 0>', '<cmove~~r8d, esi>', '<xor~~esi, esi>', '<cmp~~edi, 0>', '<cmove~~ecx, esi>', '<mov~~rsi, rax>', '<add~~rsi, 8>', '<mov~~qword ptr [rsp + 0x188], rsi>', '<mov~~esi, dword ptr [rax + 8]>', '<cmp~~ecx, esi>', '<mov~~eax, ecx>', '<cmovg~~eax, esi>', '<cmp~~r8d, esi>', '<mov~~edi, r8d>', '<cmovg~~edi, esi>', '<cmp~~esi, 0>', '<cmove~~edi, r8d>', '<mov~~dword ptr [rsp + 0x194], edi>', '<cmp~~esi, 0>', '<cmove~~eax, ecx>', '<mov~~dword ptr [rsp + 0x198], eax>', '<mov~~rdi, qword ptr [rsp + 0xa70]>', '<lea~~rsi, [rip + 0x2216]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 83, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x3f]>', '<mov~~rcx, qword ptr [rsp + 0x48]>', '<mov~~rdx, qword ptr [rsp + 0x40]>', '<mov~~qword ptr [rsp + 0x28], rdx>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~rcx, qword ptr [rcx + rdx*8]>', '<mov~~qword ptr [rsp + 0x30], rcx>', '<test~~al, 1>', '<jne~~0x401cbe>']}, {'block_Idx': 77, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x238], eax>', '<mov~~eax, dword ptr [rsp + 0x238]>', '<add~~rsp, 0xa78>', '<pop~~rbx>', '<pop~~r14>', '<ret~~>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x50]>', '<mov~~rcx, qword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<add~~rax, 1>', '<mov~~ecx, dword ptr [rcx]>', '<sub~~ecx, edx>', '<mov~~edx, eax>', '<cmp~~ecx, edx>', '<mov~~qword ptr [rsp + 0x40], rax>', '<jg~~0x401c99>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x188]>', '<mov~~rax, qword ptr [rsp + 0x240]>', '<mov~~ecx, dword ptr [rsp + 0x174]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<mov~~qword ptr [rsp + 0x100], rax>', '<movsxd~~rcx, ecx>', '<mov~~qword ptr [rsp + 0x108], rcx>', '<mov~~rsi, qword ptr [rsp + 0xa70]>', '<mov~~qword ptr [rsp + 0x110], rsi>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0x11c], edx>', '<imul~~rcx, rcx, 0x8480>', '<add~~rax, rcx>', '<add~~rax, 0x8450>', '<mov~~qword ptr [rsp + 0x120], rax>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x128], eax>', '<cmp~~eax, 1>', '<jl~~0x40195e>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x80]>', '<mov~~edi, dword ptr [rsp + 0x74]>', '<mov~~sil, byte ptr [rsp + 0x19f]>', '<mov~~rdx, qword ptr [rsp + 0x58]>', '<mov~~r8, qword ptr [rsp + 0x60]>', '<mov~~rax, qword ptr [rsp + 0x240]>', '<mov~~eax, dword ptr [rax + 0x10]>', '<imul~~r8, r8, 0x8480>', '<add~~rdx, r8>', '<add~~rdx, 0x8460>', '<mov~~qword ptr [rsp + 0x48], rdx>', '<xor~~edx, edx>', '<test~~sil, 1>', '<cmovne~~edx, eax>', '<mov~~dword ptr [rsp + 0x50], edx>', '<mov~~eax, edi>', '<add~~eax, edx>', '<mov~~esi, ecx>', '<sub~~esi, eax>', '<xor~~eax, eax>', '<cmp~~esi, 0>', '<cmovg~~eax, esi>', '<xor~~esi, esi>', '<cmp~~edi, 0>', '<cmove~~eax, esi>', '<mov~~dword ptr [rsp + 0x54], eax>', '<sub~~ecx, edx>', '<cmp~~eax, ecx>', '<jge~~0x401d30>']}, {'block_Idx': 79, 'blockInsts': ['<jmp~~0x401d0b>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~edx, dword ptr [rsp + 0x84]>', '<mov~~rax, qword ptr [rsp + 0x90]>', '<mov~~r10, qword ptr [rsp + 0x98]>', '<mov~~rdi, qword ptr [rsp + 0xa70]>', '<mov~~ecx, dword ptr [r10 + 0x60]>', '<imul~~r9, rsi, 0x8480>', '<mov~~r8, rax>', '<add~~r8, r9>', '<add~~r8, 0x8468>', '<mov~~r8, qword ptr [r8]>', '<mov~~r9d, dword ptr [r10 + 0x1d0]>', '<mov~~ebx, dword ptr [r10 + 0x1d4]>', '<imul~~r11, rsi, 0x8480>', '<mov~~r10, rax>', '<add~~r10, r11>', '<add~~r10, 0x8478>', '<mov~~r11d, dword ptr [r10]>', '<imul~~r14, rsi, 0x8480>', '<mov~~r10, rax>', '<add~~r10, r14>', '<add~~r10, 0x847c>', '<mov~~r10d, dword ptr [r10]>', '<imul~~rsi, rsi, 0x8480>', '<add~~rax, rsi>', '<add~~rax, 0x8470>', '<mov~~rax, qword ptr [rax]>', '<lea~~rsi, [rip + 0x1e2f]>', '<mov~~dword ptr [rsp], ebx>', '<mov~~dword ptr [rsp + 8], r11d>', '<mov~~dword ptr [rsp + 0x10], r10d>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xa70]>', '<lea~~rsi, [rip + 0x2597]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 22, 'blockInsts': ['<jmp~~0x40156f>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0xf8]>', '<mov~~rcx, qword ptr [rsp + 0x120]>', '<mov~~rax, qword ptr [rsp + 0xd0]>', '<add~~rax, 1>', '<mov~~ecx, dword ptr [rcx]>', '<sub~~ecx, edx>', '<mov~~edx, eax>', '<cmp~~ecx, edx>', '<mov~~qword ptr [rsp + 0xe8], rax>', '<jg~~0x4018a0>']}, {'block_Idx': 63, 'blockInsts': ['<jmp~~0x401902>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xa70]>', '<call~~0x5000d0>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x198]>', '<mov~~edx, dword ptr [rsp + 0x17c]>', '<mov~~rdi, qword ptr [rsp + 0xa70]>', '<lea~~rsi, [rip + 0x2225]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x128]>', '<mov~~edi, dword ptr [rsp + 0x11c]>', '<mov~~sil, byte ptr [rsp + 0x19f]>', '<mov~~rdx, qword ptr [rsp + 0x100]>', '<mov~~r8, qword ptr [rsp + 0x108]>', '<mov~~rax, qword ptr [rsp + 0x240]>', '<mov~~eax, dword ptr [rax + 0x10]>', '<imul~~r8, r8, 0x8480>', '<add~~rdx, r8>', '<add~~rdx, 0x8460>', '<mov~~qword ptr [rsp + 0xf0], rdx>', '<xor~~edx, edx>', '<test~~sil, 1>', '<cmovne~~edx, eax>', '<mov~~dword ptr [rsp + 0xf8], edx>', '<mov~~eax, edi>', '<add~~eax, edx>', '<mov~~esi, ecx>', '<sub~~esi, eax>', '<xor~~eax, eax>', '<cmp~~esi, 0>', '<cmovg~~eax, esi>', '<xor~~esi, esi>', '<cmp~~edi, 0>', '<cmove~~eax, esi>', '<mov~~dword ptr [rsp + 0xfc], eax>', '<sub~~ecx, edx>', '<cmp~~eax, ecx>', '<jge~~0x40195e>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xfc]>', '<mov~~cl, byte ptr [rsp + 0x19f]>', '<mov~~rdx, qword ptr [rsp + 0xf0]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~edx, dword ptr [rdx + 0x810]>', '<test~~edx, edx>', '<setg~~dl>', '<or~~cl, dl>', '<mov~~byte ptr [rsp + 0xe7], cl>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0xe8], rax>', '<mov~~al, byte ptr [rsp + 0xe7]>', '<mov~~rcx, qword ptr [rsp + 0xf0]>', '<mov~~rdx, qword ptr [rsp + 0xe8]>', '<mov~~qword ptr [rsp + 0xd0], rdx>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~rcx, qword ptr [rcx + rdx*8]>', '<mov~~qword ptr [rsp + 0xd8], rcx>', '<test~~al, 1>', '<jne~~0x4018d4>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x158]>', '<mov~~rdi, qword ptr [rsp + 0x150]>', '<mov~~rsi, qword ptr [rsp + 0x160]>', '<mov~~eax, dword ptr [rsp + 0x16c]>', '<mov~~ecx, dword ptr [rsp + 0x170]>', '<mov~~dword ptr [rsp + 0x12c], eax>', '<mov~~qword ptr [rsp + 0x130], rsi>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~qword ptr [rsp + 0x138], rdi>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdx, qword ptr [rdx + rsi*8]>', '<mov~~rdx, qword ptr [rdx + 8]>', '<mov~~qword ptr [rsp + 0x140], rdx>', '<cmp~~dword ptr [rdx + 0xc], 0>', '<mov~~dword ptr [rsp + 0x148], ecx>', '<mov~~dword ptr [rsp + 0x14c], eax>', '<jne~~0x401726>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x258]>', '<mov~~rcx, qword ptr [rsp + 0x240]>', '<add~~rcx, 0x20>', '<mov~~qword ptr [rsp + 0x150], rcx>', '<add~~rax, 0x30>', '<mov~~qword ptr [rsp + 0x158], rax>', '<xor~~eax, eax>', '<mov~~edx, eax>', '<xor~~ecx, ecx>', '<mov~~eax, 0xffffffff>', '<mov~~qword ptr [rsp + 0x160], rdx>', '<mov~~dword ptr [rsp + 0x16c], ecx>', '<mov~~dword ptr [rsp + 0x170], eax>', '<mov~~rdx, qword ptr [rsp + 0x158]>', '<mov~~rdi, qword ptr [rsp + 0x150]>', '<mov~~rsi, qword ptr [rsp + 0x160]>', '<mov~~eax, dword ptr [rsp + 0x16c]>', '<mov~~ecx, dword ptr [rsp + 0x170]>', '<mov~~dword ptr [rsp + 0x12c], eax>', '<mov~~qword ptr [rsp + 0x130], rsi>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~qword ptr [rsp + 0x138], rdi>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdx, qword ptr [rdx + rsi*8]>', '<mov~~rdx, qword ptr [rdx + 8]>', '<mov~~qword ptr [rsp + 0x140], rdx>', '<cmp~~dword ptr [rdx + 0xc], 0>', '<mov~~dword ptr [rsp + 0x148], ecx>', '<mov~~dword ptr [rsp + 0x14c], eax>', '<jne~~0x401726>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x240]>', '<mov~~rdi, qword ptr [rsp + 0xa70]>', '<mov~~edx, dword ptr [rax + 0x10]>', '<lea~~rsi, [rip + 0x222f]>', '<mov~~al, 0>', '<call~~0x5000c8>']}], 'cfg_edge_info': [(73, 81), (83, 67), (57, 48), (22, 26), (79, 81), (53, 62), (45, 30), (39, 44), (2, 4), (48, 40), (40, 45), (49, 66), (15, 18), (55, 63), (65, 40), (51, 50), (46, 45), (0, 2), (14, 19), (62, 53), (24, 14), (12, 15), (29, 31), (57, 47), (31, 37), (52, 69), (81, 50), (66, 77), (53, 43), (43, 50), (83, 68), (23, 26), (19, 22), (7, 11), (47, 65), (69, 62), (4, 6), (60, 68), (30, 33), (6, 8), (26, 29), (41, 48), (44, 53), (38, 49), (80, 82), (62, 52), (50, 32), (11, 13), (82, 64), (37, 41), (32, 38), (12, 14), (29, 30), (51, 60), (39, 43), (76, 80), (33, 39), (8, 12), (48, 57), (69, 43), (15, 17), (43, 51), (60, 67), (65, 57), (40, 46), (19, 23), (30, 32), (80, 45), (6, 7), (21, 14), (81, 83), (41, 47), (55, 64), (44, 52), (70, 80), (46, 55), (82, 63), (37, 40)], 'cdg_edge_info': [(6, 12), (30, 43), (6, 30), (80, 80), (6, 66), (30, 33), (6, 11), (6, 8), (6, 14), (30, 39), (81, 81), (6, 26), (6, 32), (43, 51), (12, 15), (6, 29), (29, 37), (57, 47), (29, 31), (29, 40), (6, 38), (39, 44), (80, 82), (40, 46), (62, 52), (19, 23), (37, 41), (46, 80), (6, 7), (6, 13), (6, 77), (81, 83), (41, 47), (6, 19), (30, 50), (51, 60), (44, 52), (46, 55), (6, 49), (29, 45), (51, 81), (19, 22)], 'ddg_edge_info': [(15, 30), (26, 30), (0, 51), (0, 14), (60, 83), (31, 47), (14, 31), (14, 40), (0, 23), (6, 11), (47, 55), (26, 32), (52, 51), (0, 44), (45, 30), (40, 43), (2, 4), (31, 40), (0, 7), (14, 33), (15, 62), (14, 51), (8, 32), (47, 57), (8, 50), (0, 46), (46, 52), (45, 32), (12, 29), (14, 26), (49, 66), (0, 30), (8, 43), (8, 52), (14, 19), (0, 2), (0, 66), (14, 83), (15, 57), (14, 37), (47, 52), (8, 45), (33, 44), (0, 41), (12, 15), (57, 47), (52, 60), (31, 37), (66, 77), (47, 45), (8, 38), (8, 47), (0, 43), (14, 60), (15, 43), (14, 23), (23, 26), (52, 62), (51, 81), (2, 6), (8, 31), (7, 11), (55, 60), (8, 40), (8, 49), (14, 62), (40, 81), (4, 6), (33, 51), (33, 60), (12, 37), (8, 15), (47, 40), (8, 33), (14, 46), (0, 29), (82, 80), (14, 55), (26, 29), (4, 8), (41, 57), (14, 82), (38, 49), (12, 30), (80, 82), (44, 62), (33, 62), (0, 4), (62, 52), (50, 32), (31, 46), (8, 26), (0, 77), (11, 77), (14, 39), (31, 55), (23, 51), (0, 40), (14, 57), (32, 38), (26, 31), (12, 14), (52, 50), (51, 60), (15, 40), (39, 43), (0, 15), (31, 57), (52, 43), (33, 39), (26, 33), (8, 12), (31, 41), (51, 83), (47, 46), (23, 46), (14, 43), (40, 62), (40, 80), (7, 77), (43, 51), (33, 50), (8, 14), (45, 33), (40, 46), (83, 81), (8, 23), (12, 39), (43, 81), (46, 80), (81, 83), (4, 7), (33, 43), (33, 52), (55, 82), (46, 55), (0, 12), (31, 45), (37, 40), (46, 82)]}]}
{'write_manifest': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%r14'}, {'instIndex': 1, 'instruction': 'pushq\t%rbx'}, {'instIndex': 2, 'instruction': 'subq\t$0xa78, %rsp                     # imm = 0xA0x4e'}, {'instIndex': 3, 'instruction': 'movl\t%esi, 0x23c(%rsp)                 # 4-byte Spill'}, {'instIndex': 4, 'instruction': 'movq\t%rdi, %rcx'}, {'instIndex': 5, 'instruction': 'movq\t%rcx, 0x258(%rsp)                 # 8-byte Spill'}, {'instIndex': 6, 'instruction': 'movq\t0x18(%rcx), %rax'}, {'instIndex': 7, 'instruction': 'movq\t%rax, 0x240(%rsp)                 # 8-byte Spill'}, {'instIndex': 8, 'instruction': 'leaq\t0xa70(%rsp), %rax'}, {'instIndex': 9, 'instruction': 'leaq\t0x670(%rsp), %rdi'}, {'instIndex': 10, 'instruction': 'movq\t%rdi, 0x248(%rsp)                 # 8-byte Spill'}, {'instIndex': 11, 'instruction': 'leaq\t0x270(%rsp), %rax'}, {'instIndex': 12, 'instruction': 'movq\t%rax, 0x260(%rsp)                 # 8-byte Spill'}, {'instIndex': 13, 'instruction': 'addq\t$0x38, %rcx'}, {'instIndex': 14, 'instruction': 'movq\t%rcx, 0x250(%rsp)                 # 8-byte Spill'}, {'instIndex': 15, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 16, 'instruction': 'leaq\t.L.str.0x20(%rip), %rdx'}, {'instIndex': 17, 'instruction': 'movb\t$0, %al'}, {'instIndex': 18, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 21, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 22, 'instruction': 'leaq\t.L.str.0x21(%rip), %rdx'}, {'instIndex': 23, 'instruction': 'movb\t$0, %al'}, {'instIndex': 24, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 27, 'instruction': 'addq\t$0x4b0, %rcx                     # imm = 0x4B0'}, {'instIndex': 28, 'instruction': 'leaq\t0xa70(%rsp), %rdi'}, {'instIndex': 29, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 30, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 31, 'instruction': 'movl\t%eax, %r8d'}, {'instIndex': 32, 'instruction': 'callq\tavio_open2@PLT'}, {'instIndex': 34, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 35, 'instruction': 'jge\t.LBB5_2'}, {'instIndex': 38, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 39, 'instruction': 'leaq\t.L.str.0x22(%rip), %rdx'}, {'instIndex': 40, 'instruction': 'movb\t$0, %al'}, {'instIndex': 41, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 44, 'instruction': 'jmp\t.LBB5_41'}, {'instIndex': 45, 'instruction': 'movq\t0xa70(%rsp), %rdi'}, {'instIndex': 46, 'instruction': 'leaq\t.L.str.0x23(%rip), %rsi'}, {'instIndex': 47, 'instruction': 'movb\t$0, %al'}, {'instIndex': 48, 'instruction': 'callq\tavio_printf@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 608, 'instruction': 'movq\t0xa70(%rsp), %rdi'}, {'instIndex': 609, 'instruction': 'leaq\t.L.str.0x2c(%rip), %rsi'}, {'instIndex': 610, 'instruction': 'movb\t$0, %al'}, {'instIndex': 611, 'instruction': 'callq\tavio_printf@PLT'}, {'instIndex': 612, 'instruction': 'movq\t0xa70(%rsp), %rdi'}, {'instIndex': 613, 'instruction': 'callq\tavio_flush@PLT'}, {'instIndex': 614, 'instruction': 'movq\t0xa70(%rsp), %rdi'}, {'instIndex': 615, 'instruction': 'callq\tavio_close@PLT'}, {'instIndex': 618, 'instruction': 'callq\trename@PLT'}, {'instIndex': 622, 'instruction': 'addq\t$0xa78, %rsp                     # imm = 0xA0x4e'}, {'instIndex': 623, 'instruction': 'popq\t%rbx'}, {'instIndex': 624, 'instruction': 'popq\t%r14'}, {'instIndex': 625, 'instruction': 'retq'}]}]}
The case of compiler clang with optimization O2.
Patched source code file: smoothstreamingenc.c
Patched function: 1---static int write_manifest 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_after/O2/smoothstreamingenc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_after/O2/smoothstreamingenc.s---write_manifest---after
function id: 5
function flag: True
There are 666 instructions for function: write_manifest in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '210', 'end': 224}, 'before': {'start': '210', 'end': 223}}}, {'modifyIndex': 2, 'line': {'after': {'start': '279', 'end': 285}, 'before': {'start': '278', 'end': 283}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%r14'}, {'instIndex': 1, 'instruction': 'pushq\t%rbx'}, {'instIndex': 2, 'instruction': 'subq\t$0xad8, %rsp                     # imm = 0xAD8'}, {'instIndex': 3, 'instruction': 'movl\t%esi, 0x29c(%rsp)                 # 4-byte Spill'}, {'instIndex': 4, 'instruction': 'movq\t%rdi, %rcx'}, {'instIndex': 5, 'instruction': 'movq\t%rcx, 0x2b8(%rsp)                 # 8-byte Spill'}, {'instIndex': 6, 'instruction': 'movq\t0x18(%rcx), %rax'}, {'instIndex': 7, 'instruction': 'movq\t%rax, 0x2a0(%rsp)                 # 8-byte Spill'}, {'instIndex': 8, 'instruction': 'leaq\t0xad0(%rsp), %rax'}, {'instIndex': 9, 'instruction': 'leaq\t0x6d0(%rsp), %rdi'}, {'instIndex': 10, 'instruction': 'movq\t%rdi, 0x2a8(%rsp)                 # 8-byte Spill'}, {'instIndex': 11, 'instruction': 'leaq\t0x2d0(%rsp), %rax'}, {'instIndex': 12, 'instruction': 'movq\t%rax, 0x2c0(%rsp)                 # 8-byte Spill'}, {'instIndex': 13, 'instruction': 'addq\t$0x38, %rcx'}, {'instIndex': 14, 'instruction': 'movq\t%rcx, 0x2b0(%rsp)                 # 8-byte Spill'}, {'instIndex': 15, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 16, 'instruction': 'leaq\t.L.str.0x20(%rip), %rdx'}, {'instIndex': 17, 'instruction': 'movb\t$0, %al'}, {'instIndex': 18, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 21, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 22, 'instruction': 'leaq\t.L.str.0x21(%rip), %rdx'}, {'instIndex': 23, 'instruction': 'movb\t$0, %al'}, {'instIndex': 24, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 27, 'instruction': 'addq\t$0x4b0, %rcx                     # imm = 0x4B0'}, {'instIndex': 28, 'instruction': 'leaq\t0xad0(%rsp), %rdi'}, {'instIndex': 29, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 30, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 31, 'instruction': 'movl\t%eax, %r8d'}, {'instIndex': 32, 'instruction': 'callq\tavio_open2@PLT'}, {'instIndex': 34, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 35, 'instruction': 'jge\t.LBB5_2'}, {'instIndex': 38, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 39, 'instruction': 'leaq\t.L.str.0x22(%rip), %rdx'}, {'instIndex': 40, 'instruction': 'movb\t$0, %al'}, {'instIndex': 41, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 44, 'instruction': 'jmp\t.LBB5_45'}, {'instIndex': 45, 'instruction': 'movq\t0xad0(%rsp), %rdi'}, {'instIndex': 46, 'instruction': 'leaq\t.L.str.0x23(%rip), %rsi'}, {'instIndex': 47, 'instruction': 'movb\t$0, %al'}, {'instIndex': 48, 'instruction': 'callq\tavio_printf@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 648, 'instruction': 'movq\t0xad0(%rsp), %rdi'}, {'instIndex': 649, 'instruction': 'leaq\t.L.str.0x2c(%rip), %rsi'}, {'instIndex': 650, 'instruction': 'movb\t$0, %al'}, {'instIndex': 651, 'instruction': 'callq\tavio_printf@PLT'}, {'instIndex': 652, 'instruction': 'movq\t0xad0(%rsp), %rdi'}, {'instIndex': 653, 'instruction': 'callq\tavio_flush@PLT'}, {'instIndex': 654, 'instruction': 'movq\t0xad0(%rsp), %rdi'}, {'instIndex': 655, 'instruction': 'callq\tavio_close@PLT'}, {'instIndex': 658, 'instruction': 'callq\trename@PLT'}, {'instIndex': 662, 'instruction': 'addq\t$0xad8, %rsp                     # imm = 0xAD8'}, {'instIndex': 663, 'instruction': 'popq\t%rbx'}, {'instIndex': 664, 'instruction': 'popq\t%r14'}, {'instIndex': 665, 'instruction': 'retq'}]}]
Patched function: 1---static int write_manifest 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_after/O2/smoothstreamingenc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_after/O2/smoothstreamingenc.s---write_manifest---after
function id: 5
function flag: True
There are 666 instructions for function: write_manifest in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '210', 'end': 224}, 'before': {'start': '210', 'end': 223}}}, {'modifyIndex': 2, 'line': {'after': {'start': '279', 'end': 285}, 'before': {'start': '278', 'end': 283}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%r14'}, {'instIndex': 1, 'instruction': 'pushq\t%rbx'}, {'instIndex': 2, 'instruction': 'subq\t$0xad8, %rsp                     # imm = 0xAD8'}, {'instIndex': 3, 'instruction': 'movl\t%esi, 0x29c(%rsp)                 # 4-byte Spill'}, {'instIndex': 4, 'instruction': 'movq\t%rdi, %rcx'}, {'instIndex': 5, 'instruction': 'movq\t%rcx, 0x2b8(%rsp)                 # 8-byte Spill'}, {'instIndex': 6, 'instruction': 'movq\t0x18(%rcx), %rax'}, {'instIndex': 7, 'instruction': 'movq\t%rax, 0x2a0(%rsp)                 # 8-byte Spill'}, {'instIndex': 8, 'instruction': 'leaq\t0xad0(%rsp), %rax'}, {'instIndex': 9, 'instruction': 'leaq\t0x6d0(%rsp), %rdi'}, {'instIndex': 10, 'instruction': 'movq\t%rdi, 0x2a8(%rsp)                 # 8-byte Spill'}, {'instIndex': 11, 'instruction': 'leaq\t0x2d0(%rsp), %rax'}, {'instIndex': 12, 'instruction': 'movq\t%rax, 0x2c0(%rsp)                 # 8-byte Spill'}, {'instIndex': 13, 'instruction': 'addq\t$0x38, %rcx'}, {'instIndex': 14, 'instruction': 'movq\t%rcx, 0x2b0(%rsp)                 # 8-byte Spill'}, {'instIndex': 15, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 16, 'instruction': 'leaq\t.L.str.0x20(%rip), %rdx'}, {'instIndex': 17, 'instruction': 'movb\t$0, %al'}, {'instIndex': 18, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 21, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 22, 'instruction': 'leaq\t.L.str.0x21(%rip), %rdx'}, {'instIndex': 23, 'instruction': 'movb\t$0, %al'}, {'instIndex': 24, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 27, 'instruction': 'addq\t$0x4b0, %rcx                     # imm = 0x4B0'}, {'instIndex': 28, 'instruction': 'leaq\t0xad0(%rsp), %rdi'}, {'instIndex': 29, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 30, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 31, 'instruction': 'movl\t%eax, %r8d'}, {'instIndex': 32, 'instruction': 'callq\tavio_open2@PLT'}, {'instIndex': 34, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 35, 'instruction': 'jge\t.LBB5_2'}, {'instIndex': 38, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 39, 'instruction': 'leaq\t.L.str.0x22(%rip), %rdx'}, {'instIndex': 40, 'instruction': 'movb\t$0, %al'}, {'instIndex': 41, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 44, 'instruction': 'jmp\t.LBB5_45'}, {'instIndex': 45, 'instruction': 'movq\t0xad0(%rsp), %rdi'}, {'instIndex': 46, 'instruction': 'leaq\t.L.str.0x23(%rip), %rsi'}, {'instIndex': 47, 'instruction': 'movb\t$0, %al'}, {'instIndex': 48, 'instruction': 'callq\tavio_printf@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 648, 'instruction': 'movq\t0xad0(%rsp), %rdi'}, {'instIndex': 649, 'instruction': 'leaq\t.L.str.0x2c(%rip), %rsi'}, {'instIndex': 650, 'instruction': 'movb\t$0, %al'}, {'instIndex': 651, 'instruction': 'callq\tavio_printf@PLT'}, {'instIndex': 652, 'instruction': 'movq\t0xad0(%rsp), %rdi'}, {'instIndex': 653, 'instruction': 'callq\tavio_flush@PLT'}, {'instIndex': 654, 'instruction': 'movq\t0xad0(%rsp), %rdi'}, {'instIndex': 655, 'instruction': 'callq\tavio_close@PLT'}, {'instIndex': 658, 'instruction': 'callq\trename@PLT'}, {'instIndex': 662, 'instruction': 'addq\t$0xad8, %rsp                     # imm = 0xAD8'}, {'instIndex': 663, 'instruction': 'popq\t%rbx'}, {'instIndex': 664, 'instruction': 'popq\t%r14'}, {'instIndex': 665, 'instruction': 'retq'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_after/O2/smoothstreamingenc.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_after/O2/smoothstreamingenc.o---after
The extraction of function: write_manifest
Analyzing the binaries to generate subCFGs from patched function ...
It has 361 nodes and 700 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 666 instructions in binary file.
[4198592, 4198703, 4198738, 4198784, 4198796, 4198831, 4198850]
[4202139, 4202161, 4202174, 4202187, 4202208, 4202217]
The execution time of patched subCFG information extraction via angr: 0:00:00.578244
{'write_manifest': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40112f>, <DisassemblerInsn "mov" for 0x401137>, <DisassemblerInsn "mov" for 0x40113f>, <DisassemblerInsn "lea" for 0x401144>, <DisassemblerInsn "mov" for 0x40114b>, <DisassemblerInsn "call" for 0x40114d>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011d8>, <DisassemblerInsn "mov" for 0x4011e0>, <DisassemblerInsn "add" for 0x4011e3>, <DisassemblerInsn "mov" for 0x4011e7>, <DisassemblerInsn "mov" for 0x4011ef>, <DisassemblerInsn "mov" for 0x4011f2>, <DisassemblerInsn "xor" for 0x4011f9>, <DisassemblerInsn "xor" for 0x4011fb>, <DisassemblerInsn "cmp" for 0x4011fd>, <DisassemblerInsn "mov" for 0x401200>, <DisassemblerInsn "mov" for 0x401202>, <DisassemblerInsn "mov" for 0x401209>, <DisassemblerInsn "mov" for 0x40120b>, <DisassemblerInsn "mov" for 0x401212>, <DisassemblerInsn "mov" for 0x40121a>, <DisassemblerInsn "mov" for 0x40121c>, <DisassemblerInsn "mov" for 0x401223>, <DisassemblerInsn "je" for 0x40122a>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401180>, <DisassemblerInsn "cmp" for 0x401187>, <DisassemblerInsn "jge" for 0x40118a>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x4010c0>, <DisassemblerInsn "push" for 0x4010c2>, <DisassemblerInsn "sub" for 0x4010c3>, <DisassemblerInsn "mov" for 0x4010ca>, <DisassemblerInsn "mov" for 0x4010d1>, <DisassemblerInsn "mov" for 0x4010d4>, <DisassemblerInsn "mov" for 0x4010dc>, <DisassemblerInsn "mov" for 0x4010e0>, <DisassemblerInsn "lea" for 0x4010e8>, <DisassemblerInsn "lea" for 0x4010f0>, <DisassemblerInsn "mov" for 0x4010f8>, <DisassemblerInsn "lea" for 0x401100>, <DisassemblerInsn "mov" for 0x401108>, <DisassemblerInsn "add" for 0x401110>, <DisassemblerInsn "mov" for 0x401114>, <DisassemblerInsn "mov" for 0x40111c>, <DisassemblerInsn "lea" for 0x401121>, <DisassemblerInsn "mov" for 0x401128>, <DisassemblerInsn "call" for 0x40112a>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40118c>, <DisassemblerInsn "mov" for 0x401194>, <DisassemblerInsn "mov" for 0x40119c>, <DisassemblerInsn "lea" for 0x4011a1>, <DisassemblerInsn "mov" for 0x4011a8>, <DisassemblerInsn "call" for 0x4011aa>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011af>, <DisassemblerInsn "mov" for 0x4011b6>, <DisassemblerInsn "jmp" for 0x4011bd>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011c2>, <DisassemblerInsn "lea" for 0x4011ca>, <DisassemblerInsn "mov" for 0x4011d1>, <DisassemblerInsn "call" for 0x4011d3>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ee9>, <DisassemblerInsn "add" for 0x401ef0>, <DisassemblerInsn "pop" for 0x401ef7>, <DisassemblerInsn "pop" for 0x401ef8>, <DisassemblerInsn "ret" for 0x401efa>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401152>, <DisassemblerInsn "mov" for 0x40115a>, <DisassemblerInsn "add" for 0x401162>, <DisassemblerInsn "lea" for 0x401169>, <DisassemblerInsn "mov" for 0x401171>, <DisassemblerInsn "xor" for 0x401176>, <DisassemblerInsn "mov" for 0x401178>, <DisassemblerInsn "call" for 0x40117b>]'}], 'cfg_block_detailed_info': [{'block_Idx': 1, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x2b0]>', '<mov~~rdi, qword ptr [rsp + 0x2c0]>', '<mov~~esi, 0x400>', '<lea~~rdx, [rip + 0x1f5e]>', '<mov~~al, 0>', '<call~~0x500020>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x2b8]>', '<mov~~rcx, rax>', '<add~~rcx, 0x2c>', '<mov~~qword ptr [rsp + 0x270], rcx>', '<mov~~edx, dword ptr [rax + 0x2c]>', '<mov~~dword ptr [rsp + 0x27c], edx>', '<xor~~eax, eax>', '<xor~~ecx, ecx>', '<cmp~~edx, 0>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x280], edx>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x284], edx>', '<mov~~qword ptr [rsp + 0x288], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x290], ecx>', '<mov~~dword ptr [rsp + 0x294], eax>', '<je~~0x4014ba>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2cc], eax>', '<cmp~~eax, 0>', '<jge~~0x4011c2>']}, {'block_Idx': 0, 'blockInsts': ['<push~~r14>', '<push~~rbx>', '<sub~~rsp, 0xad8>', '<mov~~dword ptr [rsp + 0x29c], esi>', '<mov~~rcx, rdi>', '<mov~~qword ptr [rsp + 0x2b8], rcx>', '<mov~~rax, qword ptr [rcx + 0x18]>', '<mov~~qword ptr [rsp + 0x2a0], rax>', '<lea~~rax, [rsp + 0xad0]>', '<lea~~rdi, [rsp + 0x6d0]>', '<mov~~qword ptr [rsp + 0x2a8], rdi>', '<lea~~rax, [rsp + 0x2d0]>', '<mov~~qword ptr [rsp + 0x2c0], rax>', '<add~~rcx, 0x38>', '<mov~~qword ptr [rsp + 0x2b0], rcx>', '<mov~~esi, 0x400>', '<lea~~rdx, [rip + 0x1f75]>', '<mov~~al, 0>', '<call~~0x500020>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x2c0]>', '<mov~~rdi, qword ptr [rsp + 0x2b8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x1f11]>', '<mov~~al, 0>', '<call~~0x500018>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2cc]>', '<mov~~dword ptr [rsp + 0x298], eax>', '<jmp~~0x401ee9>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xad0]>', '<lea~~rsi, [rip + 0x1f07]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x298]>', '<add~~rsp, 0xad8>', '<pop~~rbx>', '<pop~~r14>', '<ret~~>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x2b8]>', '<mov~~rsi, qword ptr [rsp + 0x2c0]>', '<add~~rcx, 0x4b0>', '<lea~~rdi, [rsp + 0xad0]>', '<mov~~edx, 2>', '<xor~~eax, eax>', '<mov~~r8d, eax>', '<call~~0x5000c0>']}], 'cfg_edge_info': [(0, 1), (1, 2), (3, 4), (6, 8), (4, 6), (5, 7), (2, 3), (3, 5)]}, {'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e85>, <DisassemblerInsn "lea" for 0x401e8d>, <DisassemblerInsn "mov" for 0x401e94>, <DisassemblerInsn "call" for 0x401e96>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401eb1>, <DisassemblerInsn "call" for 0x401eb9>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ebe>, <DisassemblerInsn "call" for 0x401ec6>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e9b>, <DisassemblerInsn "lea" for 0x401ea3>, <DisassemblerInsn "mov" for 0x401eaa>, <DisassemblerInsn "call" for 0x401eac>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "xor" for 0x401ee0>, <DisassemblerInsn "mov" for 0x401ee2>, <DisassemblerInsn "mov" for 0x401ee9>, <DisassemblerInsn "add" for 0x401ef0>, <DisassemblerInsn "pop" for 0x401ef7>, <DisassemblerInsn "pop" for 0x401ef8>, <DisassemblerInsn "ret" for 0x401efa>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ecb>, <DisassemblerInsn "mov" for 0x401ed3>, <DisassemblerInsn "call" for 0x401edb>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011af>, <DisassemblerInsn "mov" for 0x4011b6>, <DisassemblerInsn "jmp" for 0x4011bd>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a3e>, <DisassemblerInsn "cmp" for 0x401a46>, <DisassemblerInsn "je" for 0x401a4a>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ee9>, <DisassemblerInsn "add" for 0x401ef0>, <DisassemblerInsn "pop" for 0x401ef7>, <DisassemblerInsn "pop" for 0x401ef8>, <DisassemblerInsn "ret" for 0x401efa>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e75>, <DisassemblerInsn "mov" for 0x401e7d>, <DisassemblerInsn "mov" for 0x401e85>, <DisassemblerInsn "lea" for 0x401e8d>, <DisassemblerInsn "mov" for 0x401e94>, <DisassemblerInsn "call" for 0x401e96>]'}], 'cfg_block_detailed_info': [{'block_Idx': 39, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x98]>', '<lea~~rsi, [rip + 0x13d6]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xad0]>', '<call~~0x500058>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xad0]>', '<call~~0x5000d0>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xad0]>', '<lea~~rsi, [rip + 0x14e5]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 46, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x298], eax>', '<mov~~eax, dword ptr [rsp + 0x298]>', '<add~~rsp, 0xad8>', '<pop~~rbx>', '<pop~~r14>', '<ret~~>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x2c0]>', '<mov~~rsi, qword ptr [rsp + 0x2a8]>', '<call~~0x5000d8>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2cc]>', '<mov~~dword ptr [rsp + 0x298], eax>', '<jmp~~0x401ee9>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x2a0]>', '<cmp~~dword ptr [rax + 0x2c], 0>', '<je~~0x401e9b>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x298]>', '<add~~rsp, 0xad8>', '<pop~~rbx>', '<pop~~r14>', '<ret~~>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xad0]>', '<mov~~qword ptr [rsp + 0x98], rax>', '<mov~~rdi, qword ptr [rsp + 0x98]>', '<lea~~rsi, [rip + 0x13d6]>', '<mov~~al, 0>', '<call~~0x5000c8>']}], 'cfg_edge_info': [(38, 46), (27, 31), (24, 27), (22, 24), (39, 24), (6, 8), (31, 38), (62, 24)]}]}
{'write_manifest': [4202139, 4202161, 4202174, 4202187, 4202208, 4202217]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_after/O2/smoothstreamingenc.o---after
The extraction of function: write_manifest
[4202139, 4202161, 4202174, 4202187, 4202208, 4202217]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 90 nodes and 143 edges in CFGEmulated.
It has 84 nodes and 117 edges in CDG.
It has 2647 nodes and 3335 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4202139, 4202161, 4202174, 4202187, 4202208, 4202217]
{4198784, 4199813, 4199815, 4198796, 4201743, 4202002, 4201875, 4200984, 4200858, 4202139, 4199962, 4201114, 4201630, 4201499, 4199848, 4198831, 4198960, 4202161, 4198703, 4202039, 4199610, 4200763, 4199870, 4201022, 4202174, 4198592, 4198850, 4200901, 4201928, 4202187, 4199888, 4201040, 4198738, 4198872, 4202073, 4202208, 4200545, 4200292, 4200423, 4202217, 4200170, 4201322, 4200812, 4201962, 4200944, 4200049, 4201201, 4199924, 4201076, 4202101, 4200695, 4199802}
[50, 79, 43, 68, 48, 15, 64, 65, 40, 30, 70, 53, 0, 69, 82, 81, 46, 19, 11, 2, 47, 12, 67, 26, 4, 33, 22, 32, 6, 38, 76, 41, 89, 7, 23, 60, 80, 39, 49, 85, 66, 52, 87, 18, 77, 45, 17, 62, 55, 57, 14, 83, 51, 73, 13, 24, 8, 44, 29, 37, 84, 31, 21, 63]
The execution time of patched slicing information extraction via angr: 0:03:02.736792
{'write_manifest': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e85>, <DisassemblerInsn "lea" for 0x401e8d>, <DisassemblerInsn "mov" for 0x401e94>, <DisassemblerInsn "call" for 0x401e96>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401e10>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c9e>, <DisassemblerInsn "mov" for 0x401ca6>, <DisassemblerInsn "mov" for 0x401cae>, <DisassemblerInsn "mov" for 0x401cb5>, <DisassemblerInsn "mov" for 0x401cb9>, <DisassemblerInsn "movsxd" for 0x401cbe>, <DisassemblerInsn "mov" for 0x401cc1>, <DisassemblerInsn "mov" for 0x401cc6>, <DisassemblerInsn "mov" for 0x401cce>, <DisassemblerInsn "mov" for 0x401cd3>, <DisassemblerInsn "mov" for 0x401cd5>, <DisassemblerInsn "imul" for 0x401cdc>, <DisassemblerInsn "add" for 0x401ce3>, <DisassemblerInsn "add" for 0x401ce6>, <DisassemblerInsn "mov" for 0x401ced>, <DisassemblerInsn "mov" for 0x401cf5>, <DisassemblerInsn "mov" for 0x401cf7>, <DisassemblerInsn "cmp" for 0x401cfe>, <DisassemblerInsn "mov" for 0x401d01>, <DisassemblerInsn "jl" for 0x401d09>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401dea>, <DisassemblerInsn "mov" for 0x401def>, <DisassemblerInsn "mov" for 0x401df4>, <DisassemblerInsn "mov" for 0x401dfb>, <DisassemblerInsn "lea" for 0x401e02>, <DisassemblerInsn "mov" for 0x401e09>, <DisassemblerInsn "call" for 0x401e0b>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401795>, <DisassemblerInsn "mov" for 0x40179d>, <DisassemblerInsn "mov" for 0x4017a4>, <DisassemblerInsn "mov" for 0x4017ab>, <DisassemblerInsn "add" for 0x4017b2>, <DisassemblerInsn "mov" for 0x4017b6>, <DisassemblerInsn "cmp" for 0x4017b8>, <DisassemblerInsn "mov" for 0x4017bb>, <DisassemblerInsn "mov" for 0x4017c2>, <DisassemblerInsn "mov" for 0x4017ca>, <DisassemblerInsn "mov" for 0x4017d1>, <DisassemblerInsn "mov" for 0x4017d3>, <DisassemblerInsn "mov" for 0x4017da>, <DisassemblerInsn "jb" for 0x4017e1>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401230>, <DisassemblerInsn "mov" for 0x401237>, <DisassemblerInsn "mov" for 0x40123f>, <DisassemblerInsn "mov" for 0x401247>, <DisassemblerInsn "mov" for 0x40124b>, <DisassemblerInsn "mov" for 0x401253>, <DisassemblerInsn "mov" for 0x401257>, <DisassemblerInsn "mov" for 0x40125f>, <DisassemblerInsn "mov" for 0x401261>, <DisassemblerInsn "xor" for 0x401269>, <DisassemblerInsn "mov" for 0x40126b>, <DisassemblerInsn "xor" for 0x40126d>, <DisassemblerInsn "mov" for 0x40126f>, <DisassemblerInsn "mov" for 0x401272>, <DisassemblerInsn "mov" for 0x40127a>, <DisassemblerInsn "mov" for 0x40127c>, <DisassemblerInsn "mov" for 0x401283>, <DisassemblerInsn "mov" for 0x401285>, <DisassemblerInsn "mov" for 0x40128c>, <DisassemblerInsn "mov" for 0x401294>, <DisassemblerInsn "mov" for 0x401296>, <DisassemblerInsn "mov" for 0x40129d>, <DisassemblerInsn "mov" for 0x4012a4>, <DisassemblerInsn "mov" for 0x4012ac>, <DisassemblerInsn "mov" for 0x4012b4>, <DisassemblerInsn "mov" for 0x4012bb>, <DisassemblerInsn "mov" for 0x4012c2>, <DisassemblerInsn "mov" for 0x4012ca>, <DisassemblerInsn "mov" for 0x4012d2>, <DisassemblerInsn "mov" for 0x4012da>, <DisassemblerInsn "mov" for 0x4012e2>, <DisassemblerInsn "mov" for 0x4012ea>, <DisassemblerInsn "mov" for 0x4012f1>, <DisassemblerInsn "mov" for 0x4012f8>, <DisassemblerInsn "imul" for 0x401300>, <DisassemblerInsn "add" for 0x401307>, <DisassemblerInsn "add" for 0x40130a>, <DisassemblerInsn "mov" for 0x401311>, <DisassemblerInsn "mov" for 0x401313>, <DisassemblerInsn "cmp" for 0x40131a>, <DisassemblerInsn "mov" for 0x40131d>, <DisassemblerInsn "jle" for 0x401325>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40196c>, <DisassemblerInsn "mov" for 0x401974>, <DisassemblerInsn "mov" for 0x40197c>, <DisassemblerInsn "mov" for 0x401983>, <DisassemblerInsn "lea" for 0x40198a>, <DisassemblerInsn "mov" for 0x401991>, <DisassemblerInsn "call" for 0x401993>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401764>, <DisassemblerInsn "mov" for 0x40176c>, <DisassemblerInsn "mov" for 0x401774>, <DisassemblerInsn "add" for 0x40177b>, <DisassemblerInsn "mov" for 0x40177e>, <DisassemblerInsn "mov" for 0x401780>, <DisassemblerInsn "mov" for 0x401787>, <DisassemblerInsn "mov" for 0x40178e>, <DisassemblerInsn "mov" for 0x401795>, <DisassemblerInsn "mov" for 0x40179d>, <DisassemblerInsn "mov" for 0x4017a4>, <DisassemblerInsn "mov" for 0x4017ab>, <DisassemblerInsn "add" for 0x4017b2>, <DisassemblerInsn "mov" for 0x4017b6>, <DisassemblerInsn "cmp" for 0x4017b8>, <DisassemblerInsn "mov" for 0x4017bb>, <DisassemblerInsn "mov" for 0x4017c2>, <DisassemblerInsn "mov" for 0x4017ca>, <DisassemblerInsn "mov" for 0x4017d1>, <DisassemblerInsn "mov" for 0x4017d3>, <DisassemblerInsn "mov" for 0x4017da>, <DisassemblerInsn "jb" for 0x4017e1>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4017e7>, <DisassemblerInsn "mov" for 0x4017ef>, <DisassemblerInsn "mov" for 0x4017f7>, <DisassemblerInsn "mov" for 0x4017fe>, <DisassemblerInsn "mov" for 0x401802>, <DisassemblerInsn "movsxd" for 0x40180a>, <DisassemblerInsn "mov" for 0x40180d>, <DisassemblerInsn "mov" for 0x401815>, <DisassemblerInsn "mov" for 0x40181d>, <DisassemblerInsn "mov" for 0x401825>, <DisassemblerInsn "mov" for 0x401827>, <DisassemblerInsn "imul" for 0x40182e>, <DisassemblerInsn "add" for 0x401835>, <DisassemblerInsn "add" for 0x401838>, <DisassemblerInsn "mov" for 0x40183f>, <DisassemblerInsn "mov" for 0x401847>, <DisassemblerInsn "mov" for 0x401849>, <DisassemblerInsn "cmp" for 0x401850>, <DisassemblerInsn "mov" for 0x401853>, <DisassemblerInsn "jl" for 0x40185b>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a3e>, <DisassemblerInsn "cmp" for 0x401a46>, <DisassemblerInsn "je" for 0x401a4a>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40199a>, <DisassemblerInsn "mov" for 0x4019a2>, <DisassemblerInsn "mov" for 0x4019aa>, <DisassemblerInsn "mov" for 0x4019b0>, <DisassemblerInsn "lea" for 0x4019b7>, <DisassemblerInsn "mov" for 0x4019be>, <DisassemblerInsn "call" for 0x4019c0>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c4c>, <DisassemblerInsn "mov" for 0x401c54>, <DisassemblerInsn "mov" for 0x401c5b>, <DisassemblerInsn "mov" for 0x401c62>, <DisassemblerInsn "add" for 0x401c69>, <DisassemblerInsn "mov" for 0x401c6d>, <DisassemblerInsn "cmp" for 0x401c6f>, <DisassemblerInsn "mov" for 0x401c72>, <DisassemblerInsn "mov" for 0x401c79>, <DisassemblerInsn "mov" for 0x401c81>, <DisassemblerInsn "mov" for 0x401c88>, <DisassemblerInsn "mov" for 0x401c8a>, <DisassemblerInsn "mov" for 0x401c91>, <DisassemblerInsn "jb" for 0x401c98>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x4010c0>, <DisassemblerInsn "push" for 0x4010c2>, <DisassemblerInsn "sub" for 0x4010c3>, <DisassemblerInsn "mov" for 0x4010ca>, <DisassemblerInsn "mov" for 0x4010d1>, <DisassemblerInsn "mov" for 0x4010d4>, <DisassemblerInsn "mov" for 0x4010dc>, <DisassemblerInsn "mov" for 0x4010e0>, <DisassemblerInsn "lea" for 0x4010e8>, <DisassemblerInsn "lea" for 0x4010f0>, <DisassemblerInsn "mov" for 0x4010f8>, <DisassemblerInsn "lea" for 0x401100>, <DisassemblerInsn "mov" for 0x401108>, <DisassemblerInsn "add" for 0x401110>, <DisassemblerInsn "mov" for 0x401114>, <DisassemblerInsn "mov" for 0x40111c>, <DisassemblerInsn "lea" for 0x401121>, <DisassemblerInsn "mov" for 0x401128>, <DisassemblerInsn "call" for 0x40112a>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c1b>, <DisassemblerInsn "mov" for 0x401c23>, <DisassemblerInsn "mov" for 0x401c2b>, <DisassemblerInsn "add" for 0x401c32>, <DisassemblerInsn "mov" for 0x401c35>, <DisassemblerInsn "mov" for 0x401c37>, <DisassemblerInsn "mov" for 0x401c3e>, <DisassemblerInsn "mov" for 0x401c45>, <DisassemblerInsn "mov" for 0x401c4c>, <DisassemblerInsn "mov" for 0x401c54>, <DisassemblerInsn "mov" for 0x401c5b>, <DisassemblerInsn "mov" for 0x401c62>, <DisassemblerInsn "add" for 0x401c69>, <DisassemblerInsn "mov" for 0x401c6d>, <DisassemblerInsn "cmp" for 0x401c6f>, <DisassemblerInsn "mov" for 0x401c72>, <DisassemblerInsn "mov" for 0x401c79>, <DisassemblerInsn "mov" for 0x401c81>, <DisassemblerInsn "mov" for 0x401c88>, <DisassemblerInsn "mov" for 0x401c8a>, <DisassemblerInsn "mov" for 0x401c91>, <DisassemblerInsn "jb" for 0x401c98>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a18>, <DisassemblerInsn "mov" for 0x401a20>, <DisassemblerInsn "mov" for 0x401a28>, <DisassemblerInsn "lea" for 0x401a30>, <DisassemblerInsn "mov" for 0x401a37>, <DisassemblerInsn "call" for 0x401a39>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e37>, <DisassemblerInsn "mov" for 0x401e3b>, <DisassemblerInsn "mov" for 0x401e43>, <DisassemblerInsn "add" for 0x401e48>, <DisassemblerInsn "mov" for 0x401e4c>, <DisassemblerInsn "mov" for 0x401e51>, <DisassemblerInsn "sub" for 0x401e53>, <DisassemblerInsn "cmp" for 0x401e55>, <DisassemblerInsn "jle" for 0x401e57>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401861>, <DisassemblerInsn "mov" for 0x401869>, <DisassemblerInsn "mov" for 0x401870>, <DisassemblerInsn "mov" for 0x401878>, <DisassemblerInsn "mov" for 0x401880>, <DisassemblerInsn "mov" for 0x401888>, <DisassemblerInsn "mov" for 0x401890>, <DisassemblerInsn "mov" for 0x401898>, <DisassemblerInsn "imul" for 0x40189b>, <DisassemblerInsn "add" for 0x4018a2>, <DisassemblerInsn "add" for 0x4018a5>, <DisassemblerInsn "mov" for 0x4018ac>, <DisassemblerInsn "xor" for 0x4018b4>, <DisassemblerInsn "test" for 0x4018b6>, <DisassemblerInsn "cmovne" for 0x4018ba>, <DisassemblerInsn "mov" for 0x4018bd>, <DisassemblerInsn "mov" for 0x4018c4>, <DisassemblerInsn "add" for 0x4018c7>, <DisassemblerInsn "mov" for 0x4018c9>, <DisassemblerInsn "sub" for 0x4018cb>, <DisassemblerInsn "xor" for 0x4018cd>, <DisassemblerInsn "cmp" for 0x4018cf>, <DisassemblerInsn "cmovg" for 0x4018d2>, <DisassemblerInsn "xor" for 0x4018d5>, <DisassemblerInsn "cmp" for 0x4018d7>, <DisassemblerInsn "cmove" for 0x4018db>, <DisassemblerInsn "mov" for 0x4018de>, <DisassemblerInsn "sub" for 0x4018e5>, <DisassemblerInsn "cmp" for 0x4018e7>, <DisassemblerInsn "mov" for 0x4018e9>, <DisassemblerInsn "jge" for 0x4018f1>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40157a>, <DisassemblerInsn "test" for 0x401581>, <DisassemblerInsn "jne" for 0x401583>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011af>, <DisassemblerInsn "mov" for 0x4011b6>, <DisassemblerInsn "jmp" for 0x4011bd>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40112f>, <DisassemblerInsn "mov" for 0x401137>, <DisassemblerInsn "mov" for 0x40113f>, <DisassemblerInsn "lea" for 0x401144>, <DisassemblerInsn "mov" for 0x40114b>, <DisassemblerInsn "call" for 0x40114d>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4016ea>, <DisassemblerInsn "mov" for 0x4016f2>, <DisassemblerInsn "mov" for 0x4016f9>, <DisassemblerInsn "mov" for 0x401701>, <DisassemblerInsn "mov" for 0x401709>, <DisassemblerInsn "mov" for 0x401711>, <DisassemblerInsn "imul" for 0x401715>, <DisassemblerInsn "mov" for 0x40171c>, <DisassemblerInsn "add" for 0x40171f>, <DisassemblerInsn "add" for 0x401722>, <DisassemblerInsn "mov" for 0x401729>, <DisassemblerInsn "mov" for 0x40172c>, <DisassemblerInsn "mov" for 0x401733>, <DisassemblerInsn "imul" for 0x40173a>, <DisassemblerInsn "add" for 0x401741>, <DisassemblerInsn "add" for 0x401744>, <DisassemblerInsn "mov" for 0x40174a>, <DisassemblerInsn "lea" for 0x40174d>, <DisassemblerInsn "mov" for 0x401754>, <DisassemblerInsn "mov" for 0x401758>, <DisassemblerInsn "mov" for 0x40175d>, <DisassemblerInsn "call" for 0x40175f>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011d8>, <DisassemblerInsn "mov" for 0x4011e0>, <DisassemblerInsn "add" for 0x4011e3>, <DisassemblerInsn "mov" for 0x4011e7>, <DisassemblerInsn "mov" for 0x4011ef>, <DisassemblerInsn "mov" for 0x4011f2>, <DisassemblerInsn "xor" for 0x4011f9>, <DisassemblerInsn "xor" for 0x4011fb>, <DisassemblerInsn "cmp" for 0x4011fd>, <DisassemblerInsn "mov" for 0x401200>, <DisassemblerInsn "mov" for 0x401202>, <DisassemblerInsn "mov" for 0x401209>, <DisassemblerInsn "mov" for 0x40120b>, <DisassemblerInsn "mov" for 0x401212>, <DisassemblerInsn "mov" for 0x40121a>, <DisassemblerInsn "mov" for 0x40121c>, <DisassemblerInsn "mov" for 0x401223>, <DisassemblerInsn "je" for 0x40122a>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401de8>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4015a8>, <DisassemblerInsn "lea" for 0x4015b0>, <DisassemblerInsn "mov" for 0x4015b7>, <DisassemblerInsn "call" for 0x4015b9>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401152>, <DisassemblerInsn "mov" for 0x40115a>, <DisassemblerInsn "add" for 0x401162>, <DisassemblerInsn "lea" for 0x401169>, <DisassemblerInsn "mov" for 0x401171>, <DisassemblerInsn "xor" for 0x401176>, <DisassemblerInsn "mov" for 0x401178>, <DisassemblerInsn "call" for 0x40117b>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a50>, <DisassemblerInsn "mov" for 0x401a57>, <DisassemblerInsn "mov" for 0x401a5e>, <DisassemblerInsn "lea" for 0x401a66>, <DisassemblerInsn "mov" for 0x401a6d>, <DisassemblerInsn "call" for 0x401a6f>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401585>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e9b>, <DisassemblerInsn "lea" for 0x401ea3>, <DisassemblerInsn "mov" for 0x401eaa>, <DisassemblerInsn "call" for 0x401eac>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401180>, <DisassemblerInsn "cmp" for 0x401187>, <DisassemblerInsn "jge" for 0x40118a>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401eb1>, <DisassemblerInsn "call" for 0x401eb9>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401998>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40161a>, <DisassemblerInsn "mov" for 0x401621>, <DisassemblerInsn "mov" for 0x401629>, <DisassemblerInsn "add" for 0x401631>, <DisassemblerInsn "mov" for 0x401635>, <DisassemblerInsn "add" for 0x40163d>, <DisassemblerInsn "mov" for 0x401641>, <DisassemblerInsn "xor" for 0x401649>, <DisassemblerInsn "mov" for 0x40164b>, <DisassemblerInsn "xor" for 0x40164d>, <DisassemblerInsn "mov" for 0x40164f>, <DisassemblerInsn "mov" for 0x401654>, <DisassemblerInsn "mov" for 0x40165b>, <DisassemblerInsn "mov" for 0x401663>, <DisassemblerInsn "mov" for 0x40166a>, <DisassemblerInsn "mov" for 0x401671>, <DisassemblerInsn "mov" for 0x401679>, <DisassemblerInsn "mov" for 0x401681>, <DisassemblerInsn "mov" for 0x401688>, <DisassemblerInsn "mov" for 0x401690>, <DisassemblerInsn "mov" for 0x401697>, <DisassemblerInsn "mov" for 0x40169e>, <DisassemblerInsn "mov" for 0x4016a5>, <DisassemblerInsn "mov" for 0x4016ad>, <DisassemblerInsn "mov" for 0x4016b0>, <DisassemblerInsn "mov" for 0x4016b8>, <DisassemblerInsn "mov" for 0x4016bb>, <DisassemblerInsn "mov" for 0x4016bf>, <DisassemblerInsn "mov" for 0x4016c3>, <DisassemblerInsn "cmp" for 0x4016cb>, <DisassemblerInsn "mov" for 0x4016cf>, <DisassemblerInsn "mov" for 0x4016d6>, <DisassemblerInsn "mov" for 0x4016dd>, <DisassemblerInsn "jne" for 0x4016e4>]'}, {'block_Idx': 89, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401dc8>, <DisassemblerInsn "mov" for 0x401dcc>, <DisassemblerInsn "mov" for 0x401dd1>, <DisassemblerInsn "mov" for 0x401dd6>, <DisassemblerInsn "mov" for 0x401ddb>, <DisassemblerInsn "mov" for 0x401ddf>, <DisassemblerInsn "test" for 0x401de4>, <DisassemblerInsn "jne" for 0x401de6>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40118c>, <DisassemblerInsn "mov" for 0x401194>, <DisassemblerInsn "mov" for 0x40119c>, <DisassemblerInsn "lea" for 0x4011a1>, <DisassemblerInsn "mov" for 0x4011a8>, <DisassemblerInsn "call" for 0x4011aa>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401587>, <DisassemblerInsn "mov" for 0x40158f>, <DisassemblerInsn "mov" for 0x401597>, <DisassemblerInsn "lea" for 0x40159a>, <DisassemblerInsn "mov" for 0x4015a1>, <DisassemblerInsn "call" for 0x4015a3>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d93>, <DisassemblerInsn "mov" for 0x401d97>, <DisassemblerInsn "mov" for 0x401d9e>, <DisassemblerInsn "mov" for 0x401da3>, <DisassemblerInsn "mov" for 0x401da6>, <DisassemblerInsn "mov" for 0x401da9>, <DisassemblerInsn "test" for 0x401daf>, <DisassemblerInsn "setg" for 0x401db1>, <DisassemblerInsn "or" for 0x401db5>, <DisassemblerInsn "mov" for 0x401db8>, <DisassemblerInsn "mov" for 0x401dbc>, <DisassemblerInsn "mov" for 0x401dbe>, <DisassemblerInsn "mov" for 0x401dc3>, <DisassemblerInsn "mov" for 0x401dc8>, <DisassemblerInsn "mov" for 0x401dcc>, <DisassemblerInsn "mov" for 0x401dd1>, <DisassemblerInsn "mov" for 0x401dd6>, <DisassemblerInsn "mov" for 0x401ddb>, <DisassemblerInsn "mov" for 0x401ddf>, <DisassemblerInsn "test" for 0x401de4>, <DisassemblerInsn "jne" for 0x401de6>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019c5>, <DisassemblerInsn "mov" for 0x4019cc>, <DisassemblerInsn "mov" for 0x4019d4>, <DisassemblerInsn "add" for 0x4019dc>, <DisassemblerInsn "mov" for 0x4019e0>, <DisassemblerInsn "mov" for 0x4019e8>, <DisassemblerInsn "sub" for 0x4019ea>, <DisassemblerInsn "cmp" for 0x4019ec>, <DisassemblerInsn "jle" for 0x4019ee>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a74>, <DisassemblerInsn "mov" for 0x401a7c>, <DisassemblerInsn "mov" for 0x401a7e>, <DisassemblerInsn "mov" for 0x401a85>, <DisassemblerInsn "cmp" for 0x401a8a>, <DisassemblerInsn "mov" for 0x401a8d>, <DisassemblerInsn "je" for 0x401a94>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ebe>, <DisassemblerInsn "call" for 0x401ec6>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e59>, <DisassemblerInsn "mov" for 0x401e5e>, <DisassemblerInsn "mov" for 0x401e63>, <DisassemblerInsn "mov" for 0x401e66>, <DisassemblerInsn "mov" for 0x401e6b>, <DisassemblerInsn "jmp" for 0x401e70>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ecb>, <DisassemblerInsn "mov" for 0x401ed3>, <DisassemblerInsn "call" for 0x401edb>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b6a>, <DisassemblerInsn "mov" for 0x401b72>, <DisassemblerInsn "mov" for 0x401b79>, <DisassemblerInsn "mov" for 0x401b81>, <DisassemblerInsn "mov" for 0x401b89>, <DisassemblerInsn "mov" for 0x401b91>, <DisassemblerInsn "imul" for 0x401b95>, <DisassemblerInsn "mov" for 0x401b9c>, <DisassemblerInsn "add" for 0x401b9f>, <DisassemblerInsn "add" for 0x401ba2>, <DisassemblerInsn "mov" for 0x401ba9>, <DisassemblerInsn "mov" for 0x401bac>, <DisassemblerInsn "mov" for 0x401bb3>, <DisassemblerInsn "imul" for 0x401bba>, <DisassemblerInsn "mov" for 0x401bc1>, <DisassemblerInsn "add" for 0x401bc4>, <DisassemblerInsn "add" for 0x401bc7>, <DisassemblerInsn "mov" for 0x401bce>, <DisassemblerInsn "imul" for 0x401bd1>, <DisassemblerInsn "mov" for 0x401bd8>, <DisassemblerInsn "add" for 0x401bdb>, <DisassemblerInsn "add" for 0x401bde>, <DisassemblerInsn "mov" for 0x401be5>, <DisassemblerInsn "imul" for 0x401be8>, <DisassemblerInsn "add" for 0x401bef>, <DisassemblerInsn "add" for 0x401bf2>, <DisassemblerInsn "mov" for 0x401bf8>, <DisassemblerInsn "lea" for 0x401bfb>, <DisassemblerInsn "mov" for 0x401c02>, <DisassemblerInsn "mov" for 0x401c05>, <DisassemblerInsn "mov" for 0x401c0a>, <DisassemblerInsn "mov" for 0x401c0f>, <DisassemblerInsn "mov" for 0x401c14>, <DisassemblerInsn "call" for 0x401c16>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40193b>, <DisassemblerInsn "mov" for 0x401942>, <DisassemblerInsn "mov" for 0x40194a>, <DisassemblerInsn "mov" for 0x401952>, <DisassemblerInsn "mov" for 0x40195a>, <DisassemblerInsn "mov" for 0x40195e>, <DisassemblerInsn "test" for 0x401966>, <DisassemblerInsn "jne" for 0x401968>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401327>, <DisassemblerInsn "mov" for 0x40132e>, <DisassemblerInsn "mov" for 0x401336>, <DisassemblerInsn "imul" for 0x40133e>, <DisassemblerInsn "add" for 0x401345>, <DisassemblerInsn "add" for 0x401348>, <DisassemblerInsn "mov" for 0x40134e>, <DisassemblerInsn "add" for 0x401351>, <DisassemblerInsn "mov" for 0x401354>, <DisassemblerInsn "mov" for 0x401356>, <DisassemblerInsn "mov" for 0x40135a>, <DisassemblerInsn "add" for 0x401361>, <DisassemblerInsn "mov" for 0x401368>, <DisassemblerInsn "mov" for 0x401370>, <DisassemblerInsn "mov" for 0x401378>, <DisassemblerInsn "mov" for 0x401380>, <DisassemblerInsn "mov" for 0x401388>, <DisassemblerInsn "mov" for 0x401390>, <DisassemblerInsn "mov" for 0x401394>, <DisassemblerInsn "cmp" for 0x401398>, <DisassemblerInsn "jne" for 0x40139c>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "xor" for 0x401ee0>, <DisassemblerInsn "mov" for 0x401ee2>, <DisassemblerInsn "mov" for 0x401ee9>, <DisassemblerInsn "add" for 0x401ef0>, <DisassemblerInsn "pop" for 0x401ef7>, <DisassemblerInsn "pop" for 0x401ef8>, <DisassemblerInsn "ret" for 0x401efa>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a28>, <DisassemblerInsn "lea" for 0x401a30>, <DisassemblerInsn "mov" for 0x401a37>, <DisassemblerInsn "call" for 0x401a39>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401370>, <DisassemblerInsn "mov" for 0x401378>, <DisassemblerInsn "mov" for 0x401380>, <DisassemblerInsn "mov" for 0x401388>, <DisassemblerInsn "mov" for 0x401390>, <DisassemblerInsn "mov" for 0x401394>, <DisassemblerInsn "cmp" for 0x401398>, <DisassemblerInsn "jne" for 0x40139c>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401af1>, <DisassemblerInsn "mov" for 0x401af9>, <DisassemblerInsn "mov" for 0x401b01>, <DisassemblerInsn "mov" for 0x401b08>, <DisassemblerInsn "mov" for 0x401b10>, <DisassemblerInsn "mov" for 0x401b17>, <DisassemblerInsn "mov" for 0x401b1e>, <DisassemblerInsn "mov" for 0x401b25>, <DisassemblerInsn "mov" for 0x401b2d>, <DisassemblerInsn "mov" for 0x401b30>, <DisassemblerInsn "mov" for 0x401b38>, <DisassemblerInsn "mov" for 0x401b3b>, <DisassemblerInsn "mov" for 0x401b3f>, <DisassemblerInsn "mov" for 0x401b43>, <DisassemblerInsn "cmp" for 0x401b4b>, <DisassemblerInsn "mov" for 0x401b4f>, <DisassemblerInsn "mov" for 0x401b56>, <DisassemblerInsn "mov" for 0x401b5d>, <DisassemblerInsn "jne" for 0x401b64>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4018f7>, <DisassemblerInsn "mov" for 0x4018fe>, <DisassemblerInsn "mov" for 0x401905>, <DisassemblerInsn "mov" for 0x40190d>, <DisassemblerInsn "mov" for 0x401910>, <DisassemblerInsn "mov" for 0x401913>, <DisassemblerInsn "test" for 0x401919>, <DisassemblerInsn "setg" for 0x40191b>, <DisassemblerInsn "or" for 0x40191f>, <DisassemblerInsn "mov" for 0x401922>, <DisassemblerInsn "mov" for 0x401929>, <DisassemblerInsn "mov" for 0x40192b>, <DisassemblerInsn "mov" for 0x401933>, <DisassemblerInsn "mov" for 0x40193b>, <DisassemblerInsn "mov" for 0x401942>, <DisassemblerInsn "mov" for 0x40194a>, <DisassemblerInsn "mov" for 0x401952>, <DisassemblerInsn "mov" for 0x40195a>, <DisassemblerInsn "mov" for 0x40195e>, <DisassemblerInsn "test" for 0x401966>, <DisassemblerInsn "jne" for 0x401968>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401671>, <DisassemblerInsn "mov" for 0x401679>, <DisassemblerInsn "mov" for 0x401681>, <DisassemblerInsn "mov" for 0x401688>, <DisassemblerInsn "mov" for 0x401690>, <DisassemblerInsn "mov" for 0x401697>, <DisassemblerInsn "mov" for 0x40169e>, <DisassemblerInsn "mov" for 0x4016a5>, <DisassemblerInsn "mov" for 0x4016ad>, <DisassemblerInsn "mov" for 0x4016b0>, <DisassemblerInsn "mov" for 0x4016b8>, <DisassemblerInsn "mov" for 0x4016bb>, <DisassemblerInsn "mov" for 0x4016bf>, <DisassemblerInsn "mov" for 0x4016c3>, <DisassemblerInsn "cmp" for 0x4016cb>, <DisassemblerInsn "mov" for 0x4016cf>, <DisassemblerInsn "mov" for 0x4016d6>, <DisassemblerInsn "mov" for 0x4016dd>, <DisassemblerInsn "jne" for 0x4016e4>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4014ba>, <DisassemblerInsn "mov" for 0x4014c2>, <DisassemblerInsn "mov" for 0x4014c9>, <DisassemblerInsn "mov" for 0x4014d0>, <DisassemblerInsn "mov" for 0x4014d8>, <DisassemblerInsn "mov" for 0x4014e0>, <DisassemblerInsn "mov" for 0x4014e8>, <DisassemblerInsn "mov" for 0x4014ef>, <DisassemblerInsn "mov" for 0x4014f7>, <DisassemblerInsn "cmp" for 0x4014fe>, <DisassemblerInsn "sete" for 0x401501>, <DisassemblerInsn "mov" for 0x401505>, <DisassemblerInsn "xor" for 0x40150d>, <DisassemblerInsn "cmp" for 0x40150f>, <DisassemblerInsn "cmove" for 0x401512>, <DisassemblerInsn "xor" for 0x401516>, <DisassemblerInsn "cmp" for 0x401518>, <DisassemblerInsn "cmove" for 0x40151b>, <DisassemblerInsn "xor" for 0x40151f>, <DisassemblerInsn "cmp" for 0x401521>, <DisassemblerInsn "cmove" for 0x401524>, <DisassemblerInsn "mov" for 0x401527>, <DisassemblerInsn "add" for 0x40152a>, <DisassemblerInsn "mov" for 0x40152e>, <DisassemblerInsn "mov" for 0x401536>, <DisassemblerInsn "cmp" for 0x401539>, <DisassemblerInsn "mov" for 0x40153b>, <DisassemblerInsn "cmovg" for 0x40153d>, <DisassemblerInsn "cmp" for 0x401540>, <DisassemblerInsn "mov" for 0x401543>, <DisassemblerInsn "cmovg" for 0x401546>, <DisassemblerInsn "cmp" for 0x401549>, <DisassemblerInsn "cmove" for 0x40154c>, <DisassemblerInsn "mov" for 0x401550>, <DisassemblerInsn "cmp" for 0x401557>, <DisassemblerInsn "cmove" for 0x40155a>, <DisassemblerInsn "mov" for 0x40155d>, <DisassemblerInsn "mov" for 0x401564>, <DisassemblerInsn "lea" for 0x40156c>, <DisassemblerInsn "mov" for 0x401573>, <DisassemblerInsn "call" for 0x401575>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019f0>, <DisassemblerInsn "mov" for 0x4019f8>, <DisassemblerInsn "mov" for 0x401a00>, <DisassemblerInsn "mov" for 0x401a03>, <DisassemblerInsn "mov" for 0x401a0b>, <DisassemblerInsn "jmp" for 0x401a13>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d0f>, <DisassemblerInsn "mov" for 0x401d14>, <DisassemblerInsn "mov" for 0x401d1b>, <DisassemblerInsn "mov" for 0x401d23>, <DisassemblerInsn "mov" for 0x401d2b>, <DisassemblerInsn "mov" for 0x401d30>, <DisassemblerInsn "mov" for 0x401d35>, <DisassemblerInsn "mov" for 0x401d3d>, <DisassemblerInsn "imul" for 0x401d40>, <DisassemblerInsn "add" for 0x401d47>, <DisassemblerInsn "add" for 0x401d4a>, <DisassemblerInsn "mov" for 0x401d51>, <DisassemblerInsn "xor" for 0x401d56>, <DisassemblerInsn "test" for 0x401d58>, <DisassemblerInsn "cmovne" for 0x401d5c>, <DisassemblerInsn "mov" for 0x401d5f>, <DisassemblerInsn "mov" for 0x401d63>, <DisassemblerInsn "add" for 0x401d66>, <DisassemblerInsn "mov" for 0x401d68>, <DisassemblerInsn "sub" for 0x401d6a>, <DisassemblerInsn "xor" for 0x401d6c>, <DisassemblerInsn "cmp" for 0x401d6e>, <DisassemblerInsn "cmovg" for 0x401d71>, <DisassemblerInsn "xor" for 0x401d74>, <DisassemblerInsn "cmp" for 0x401d76>, <DisassemblerInsn "cmove" for 0x401d7a>, <DisassemblerInsn "mov" for 0x401d7d>, <DisassemblerInsn "sub" for 0x401d81>, <DisassemblerInsn "cmp" for 0x401d83>, <DisassemblerInsn "mov" for 0x401d85>, <DisassemblerInsn "jge" for 0x401d8d>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e12>, <DisassemblerInsn "mov" for 0x401e17>, <DisassemblerInsn "mov" for 0x401e1c>, <DisassemblerInsn "mov" for 0x401e22>, <DisassemblerInsn "lea" for 0x401e29>, <DisassemblerInsn "mov" for 0x401e30>, <DisassemblerInsn "call" for 0x401e32>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ee9>, <DisassemblerInsn "add" for 0x401ef0>, <DisassemblerInsn "pop" for 0x401ef7>, <DisassemblerInsn "pop" for 0x401ef8>, <DisassemblerInsn "ret" for 0x401efa>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401416>, <DisassemblerInsn "mov" for 0x40141e>, <DisassemblerInsn "mov" for 0x401426>, <DisassemblerInsn "mov" for 0x40142e>, <DisassemblerInsn "mov" for 0x401435>, <DisassemblerInsn "mov" for 0x40143c>, <DisassemblerInsn "mov" for 0x401443>, <DisassemblerInsn "add" for 0x40144a>, <DisassemblerInsn "cmp" for 0x40144e>, <DisassemblerInsn "mov" for 0x401451>, <DisassemblerInsn "mov" for 0x401459>, <DisassemblerInsn "mov" for 0x40145c>, <DisassemblerInsn "mov" for 0x401464>, <DisassemblerInsn "mov" for 0x401467>, <DisassemblerInsn "mov" for 0x40146f>, <DisassemblerInsn "mov" for 0x401472>, <DisassemblerInsn "mov" for 0x40147a>, <DisassemblerInsn "mov" for 0x40147d>, <DisassemblerInsn "mov" for 0x401485>, <DisassemblerInsn "mov" for 0x401488>, <DisassemblerInsn "mov" for 0x401490>, <DisassemblerInsn "mov" for 0x401497>, <DisassemblerInsn "mov" for 0x40149e>, <DisassemblerInsn "mov" for 0x4014a6>, <DisassemblerInsn "mov" for 0x4014ad>, <DisassemblerInsn "jne" for 0x4014b4>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011c2>, <DisassemblerInsn "lea" for 0x4011ca>, <DisassemblerInsn "mov" for 0x4011d1>, <DisassemblerInsn "call" for 0x4011d3>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a9a>, <DisassemblerInsn "mov" for 0x401aa1>, <DisassemblerInsn "mov" for 0x401aa9>, <DisassemblerInsn "add" for 0x401ab1>, <DisassemblerInsn "mov" for 0x401ab5>, <DisassemblerInsn "add" for 0x401abd>, <DisassemblerInsn "mov" for 0x401ac1>, <DisassemblerInsn "xor" for 0x401ac9>, <DisassemblerInsn "mov" for 0x401acb>, <DisassemblerInsn "xor" for 0x401acd>, <DisassemblerInsn "mov" for 0x401acf>, <DisassemblerInsn "mov" for 0x401ad4>, <DisassemblerInsn "mov" for 0x401adb>, <DisassemblerInsn "mov" for 0x401ae3>, <DisassemblerInsn "mov" for 0x401aea>, <DisassemblerInsn "mov" for 0x401af1>, <DisassemblerInsn "mov" for 0x401af9>, <DisassemblerInsn "mov" for 0x401b01>, <DisassemblerInsn "mov" for 0x401b08>, <DisassemblerInsn "mov" for 0x401b10>, <DisassemblerInsn "mov" for 0x401b17>, <DisassemblerInsn "mov" for 0x401b1e>, <DisassemblerInsn "mov" for 0x401b25>, <DisassemblerInsn "mov" for 0x401b2d>, <DisassemblerInsn "mov" for 0x401b30>, <DisassemblerInsn "mov" for 0x401b38>, <DisassemblerInsn "mov" for 0x401b3b>, <DisassemblerInsn "mov" for 0x401b3f>, <DisassemblerInsn "mov" for 0x401b43>, <DisassemblerInsn "cmp" for 0x401b4b>, <DisassemblerInsn "mov" for 0x401b4f>, <DisassemblerInsn "mov" for 0x401b56>, <DisassemblerInsn "mov" for 0x401b5d>, <DisassemblerInsn "jne" for 0x401b64>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4015be>, <DisassemblerInsn "cmp" for 0x4015c6>, <DisassemblerInsn "je" for 0x4015ca>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4015f4>, <DisassemblerInsn "mov" for 0x4015fc>, <DisassemblerInsn "mov" for 0x4015fe>, <DisassemblerInsn "mov" for 0x401605>, <DisassemblerInsn "cmp" for 0x40160a>, <DisassemblerInsn "mov" for 0x40160d>, <DisassemblerInsn "je" for 0x401614>]'}, {'block_Idx': 84, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e75>, <DisassemblerInsn "mov" for 0x401e7d>, <DisassemblerInsn "mov" for 0x401e85>, <DisassemblerInsn "lea" for 0x401e8d>, <DisassemblerInsn "mov" for 0x401e94>, <DisassemblerInsn "call" for 0x401e96>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4015d0>, <DisassemblerInsn "mov" for 0x4015d7>, <DisassemblerInsn "mov" for 0x4015de>, <DisassemblerInsn "lea" for 0x4015e6>, <DisassemblerInsn "mov" for 0x4015ed>, <DisassemblerInsn "call" for 0x4015ef>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4013db>, <DisassemblerInsn "mov" for 0x4013e2>, <DisassemblerInsn "mov" for 0x4013e9>, <DisassemblerInsn "mov" for 0x4013f0>, <DisassemblerInsn "add" for 0x4013f7>, <DisassemblerInsn "mov" for 0x4013fa>, <DisassemblerInsn "mov" for 0x401401>, <DisassemblerInsn "mov" for 0x401408>, <DisassemblerInsn "mov" for 0x40140f>, <DisassemblerInsn "mov" for 0x401416>, <DisassemblerInsn "mov" for 0x40141e>, <DisassemblerInsn "mov" for 0x401426>, <DisassemblerInsn "mov" for 0x40142e>, <DisassemblerInsn "mov" for 0x401435>, <DisassemblerInsn "mov" for 0x40143c>, <DisassemblerInsn "mov" for 0x401443>, <DisassemblerInsn "add" for 0x40144a>, <DisassemblerInsn "cmp" for 0x40144e>, <DisassemblerInsn "mov" for 0x401451>, <DisassemblerInsn "mov" for 0x401459>, <DisassemblerInsn "mov" for 0x40145c>, <DisassemblerInsn "mov" for 0x401464>, <DisassemblerInsn "mov" for 0x401467>, <DisassemblerInsn "mov" for 0x40146f>, <DisassemblerInsn "mov" for 0x401472>, <DisassemblerInsn "mov" for 0x40147a>, <DisassemblerInsn "mov" for 0x40147d>, <DisassemblerInsn "mov" for 0x401485>, <DisassemblerInsn "mov" for 0x401488>, <DisassemblerInsn "mov" for 0x401490>, <DisassemblerInsn "mov" for 0x401497>, <DisassemblerInsn "mov" for 0x40149e>, <DisassemblerInsn "mov" for 0x4014a6>, <DisassemblerInsn "mov" for 0x4014ad>, <DisassemblerInsn "jne" for 0x4014b4>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40196a>]'}], 'cfg_block_detailed_info': [{'block_Idx': 50, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x98]>', '<lea~~rsi, [rip + 0x13d6]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 79, 'blockInsts': ['<jmp~~0x401e37>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x1e0]>', '<mov~~rcx, qword ptr [rsp + 0x2a0]>', '<mov~~eax, dword ptr [rsp + 0xfc]>', '<mov~~rcx, qword ptr [rcx + 0x20]>', '<mov~~qword ptr [rsp + 0x68], rcx>', '<movsxd~~rdx, eax>', '<mov~~qword ptr [rsp + 0x70], rdx>', '<mov~~rax, qword ptr [rsp + 0xad0]>', '<mov~~qword ptr [rsp + 0x78], rax>', '<mov~~esi, dword ptr [rsi]>', '<mov~~dword ptr [rsp + 0x84], esi>', '<imul~~rdx, rdx, 0x8480>', '<add~~rcx, rdx>', '<add~~rcx, 0x8450>', '<mov~~qword ptr [rsp + 0x88], rcx>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x94], ecx>', '<cmp~~ecx, 1>', '<mov~~qword ptr [rsp + 0x98], rax>', '<jl~~0x401e85>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rdx, qword ptr [rax + 0x800]>', '<mov~~rcx, qword ptr [rax + 0x808]>', '<lea~~rsi, [rip + 0x159f]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x180]>', '<mov~~esi, dword ptr [rsp + 0x19c]>', '<mov~~eax, dword ptr [rsp + 0x1a0]>', '<mov~~ecx, dword ptr [rsp + 0x1a4]>', '<add~~rdx, 1>', '<mov~~edi, esi>', '<cmp~~rdx, rdi>', '<mov~~dword ptr [rsp + 0x1bc], esi>', '<mov~~qword ptr [rsp + 0x1c0], rdx>', '<mov~~dword ptr [rsp + 0x1c8], ecx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x1cc], ecx>', '<mov~~dword ptr [rsp + 0x1d4], eax>', '<jb~~0x401671>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x27c]>', '<mov~~rcx, qword ptr [rsp + 0x2b8]>', '<mov~~rdx, qword ptr [rsp + 0x2a0]>', '<mov~~rdx, qword ptr [rdx + 0x20]>', '<mov~~qword ptr [rsp + 0x238], rdx>', '<mov~~rcx, qword ptr [rcx + 0x30]>', '<mov~~qword ptr [rsp + 0x240], rcx>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x248], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~rdx, rcx>', '<mov~~qword ptr [rsp + 0x250], rdx>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x258], edx>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x25c], edx>', '<mov~~qword ptr [rsp + 0x260], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x268], ecx>', '<mov~~dword ptr [rsp + 0x26c], eax>', '<mov~~rcx, qword ptr [rsp + 0x238]>', '<mov~~rdx, qword ptr [rsp + 0x250]>', '<mov~~esi, dword ptr [rsp + 0x258]>', '<mov~~edi, dword ptr [rsp + 0x25c]>', '<mov~~rax, qword ptr [rsp + 0x260]>', '<mov~~r8d, dword ptr [rsp + 0x268]>', '<mov~~r9d, dword ptr [rsp + 0x26c]>', '<mov~~dword ptr [rsp + 0x210], r9d>', '<mov~~dword ptr [rsp + 0x214], r8d>', '<mov~~dword ptr [rsp + 0x218], edi>', '<mov~~dword ptr [rsp + 0x21c], esi>', '<mov~~qword ptr [rsp + 0x220], rdx>', '<imul~~rdx, rdx, 0x8480>', '<add~~rcx, rdx>', '<add~~rcx, 0x8450>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x22c], ecx>', '<cmp~~ecx, 0>', '<mov~~qword ptr [rsp + 0x230], rax>', '<jle~~0x401370>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x150]>', '<mov~~rax, qword ptr [rsp + 0x110]>', '<mov~~rdx, qword ptr [rax + 0x800]>', '<mov~~rcx, qword ptr [rax + 0x808]>', '<lea~~rsi, [rip + 0x1a17]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 65, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x180]>', '<mov~~rdx, qword ptr [rsp + 0x270]>', '<mov~~eax, dword ptr [rsp + 0x17c]>', '<add~~eax, 1>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0x19c], edx>', '<mov~~dword ptr [rsp + 0x1a0], ecx>', '<mov~~dword ptr [rsp + 0x1a4], eax>', '<mov~~rdx, qword ptr [rsp + 0x180]>', '<mov~~esi, dword ptr [rsp + 0x19c]>', '<mov~~eax, dword ptr [rsp + 0x1a0]>', '<mov~~ecx, dword ptr [rsp + 0x1a4]>', '<add~~rdx, 1>', '<mov~~edi, esi>', '<cmp~~rdx, rdi>', '<mov~~dword ptr [rsp + 0x1bc], esi>', '<mov~~qword ptr [rsp + 0x1c0], rdx>', '<mov~~dword ptr [rsp + 0x1c8], ecx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x1cc], ecx>', '<mov~~dword ptr [rsp + 0x1d4], eax>', '<jb~~0x401671>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x1e0]>', '<mov~~rcx, qword ptr [rsp + 0x2a0]>', '<mov~~eax, dword ptr [rsp + 0x1d4]>', '<mov~~rcx, qword ptr [rcx + 0x20]>', '<mov~~qword ptr [rsp + 0x140], rcx>', '<movsxd~~rdx, eax>', '<mov~~qword ptr [rsp + 0x148], rdx>', '<mov~~rax, qword ptr [rsp + 0xad0]>', '<mov~~qword ptr [rsp + 0x150], rax>', '<mov~~esi, dword ptr [rsi]>', '<mov~~dword ptr [rsp + 0x15c], esi>', '<imul~~rdx, rdx, 0x8480>', '<add~~rcx, rdx>', '<add~~rcx, 0x8450>', '<mov~~qword ptr [rsp + 0x160], rcx>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x16c], ecx>', '<cmp~~ecx, 1>', '<mov~~qword ptr [rsp + 0x170], rax>', '<jl~~0x401a28>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x2a0]>', '<cmp~~dword ptr [rax + 0x2c], 0>', '<je~~0x401e9b>']}, {'block_Idx': 70, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x150]>', '<mov~~rax, qword ptr [rsp + 0x110]>', '<mov~~edx, dword ptr [rax + 0x810]>', '<mov~~rcx, qword ptr [rax + 0x808]>', '<lea~~rsi, [rip + 0x1a01]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 53, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xa8]>', '<mov~~esi, dword ptr [rsp + 0xc4]>', '<mov~~eax, dword ptr [rsp + 0xc8]>', '<mov~~ecx, dword ptr [rsp + 0xcc]>', '<add~~rdx, 1>', '<mov~~edi, esi>', '<cmp~~rdx, rdi>', '<mov~~dword ptr [rsp + 0xe4], esi>', '<mov~~qword ptr [rsp + 0xe8], rdx>', '<mov~~dword ptr [rsp + 0xf0], ecx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0xf4], ecx>', '<mov~~dword ptr [rsp + 0xfc], eax>', '<jb~~0x401af1>']}, {'block_Idx': 0, 'blockInsts': ['<push~~r14>', '<push~~rbx>', '<sub~~rsp, 0xad8>', '<mov~~dword ptr [rsp + 0x29c], esi>', '<mov~~rcx, rdi>', '<mov~~qword ptr [rsp + 0x2b8], rcx>', '<mov~~rax, qword ptr [rcx + 0x18]>', '<mov~~qword ptr [rsp + 0x2a0], rax>', '<lea~~rax, [rsp + 0xad0]>', '<lea~~rdi, [rsp + 0x6d0]>', '<mov~~qword ptr [rsp + 0x2a8], rdi>', '<lea~~rax, [rsp + 0x2d0]>', '<mov~~qword ptr [rsp + 0x2c0], rax>', '<add~~rcx, 0x38>', '<mov~~qword ptr [rsp + 0x2b0], rcx>', '<mov~~esi, 0x400>', '<lea~~rdx, [rip + 0x1f75]>', '<mov~~al, 0>', '<call~~0x500020>']}, {'block_Idx': 69, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xa8]>', '<mov~~rdx, qword ptr [rsp + 0x270]>', '<mov~~eax, dword ptr [rsp + 0xa4]>', '<add~~eax, 1>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0xc4], edx>', '<mov~~dword ptr [rsp + 0xc8], ecx>', '<mov~~dword ptr [rsp + 0xcc], eax>', '<mov~~rdx, qword ptr [rsp + 0xa8]>', '<mov~~esi, dword ptr [rsp + 0xc4]>', '<mov~~eax, dword ptr [rsp + 0xc8]>', '<mov~~ecx, dword ptr [rsp + 0xcc]>', '<add~~rdx, 1>', '<mov~~edi, esi>', '<cmp~~rdx, rdi>', '<mov~~dword ptr [rsp + 0xe4], esi>', '<mov~~qword ptr [rsp + 0xe8], rdx>', '<mov~~dword ptr [rsp + 0xf0], ecx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0xf4], ecx>', '<mov~~dword ptr [rsp + 0xfc], eax>', '<jb~~0x401af1>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xad0]>', '<mov~~qword ptr [rsp + 0x170], rax>', '<mov~~rdi, qword ptr [rsp + 0x170]>', '<lea~~rsi, [rip + 0x1833]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x60]>', '<mov~~rax, qword ptr [rsp + 0x88]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x28], rcx>', '<mov~~eax, dword ptr [rax]>', '<sub~~eax, edx>', '<cmp~~eax, ecx>', '<jle~~0x401e75>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~edx, dword ptr [rsp + 0x16c]>', '<mov~~r8d, dword ptr [rsp + 0x15c]>', '<mov~~dil, byte ptr [rsp + 0x1f7]>', '<mov~~rsi, qword ptr [rsp + 0x140]>', '<mov~~r9, qword ptr [rsp + 0x148]>', '<mov~~rcx, qword ptr [rsp + 0x2a0]>', '<mov~~ecx, dword ptr [rcx + 0x10]>', '<imul~~r9, r9, 0x8480>', '<add~~rsi, r9>', '<add~~rsi, 0x8460>', '<mov~~qword ptr [rsp + 0x130], rsi>', '<xor~~esi, esi>', '<test~~dil, 1>', '<cmovne~~esi, ecx>', '<mov~~dword ptr [rsp + 0x138], esi>', '<mov~~ecx, r8d>', '<add~~ecx, esi>', '<mov~~edi, edx>', '<sub~~edi, ecx>', '<xor~~ecx, ecx>', '<cmp~~edi, 0>', '<cmovg~~ecx, edi>', '<xor~~edi, edi>', '<cmp~~r8d, 0>', '<cmove~~ecx, edi>', '<mov~~dword ptr [rsp + 0x13c], ecx>', '<sub~~edx, esi>', '<cmp~~ecx, edx>', '<mov~~qword ptr [rsp + 0x170], rax>', '<jge~~0x401a28>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x1f7]>', '<test~~al, 1>', '<jne~~0x401587>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2cc]>', '<mov~~dword ptr [rsp + 0x298], eax>', '<jmp~~0x401ee9>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x2b0]>', '<mov~~rdi, qword ptr [rsp + 0x2c0]>', '<mov~~esi, 0x400>', '<lea~~rdx, [rip + 0x1f5e]>', '<mov~~al, 0>', '<call~~0x500020>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x180]>', '<mov~~edx, dword ptr [rsp + 0x17c]>', '<mov~~rax, qword ptr [rsp + 0x188]>', '<mov~~r10, qword ptr [rsp + 0x190]>', '<mov~~rdi, qword ptr [rsp + 0xad0]>', '<mov~~ecx, dword ptr [r10 + 0x60]>', '<imul~~r9, rsi, 0x8480>', '<mov~~r8, rax>', '<add~~r8, r9>', '<add~~r8, 0x8468>', '<mov~~r8, qword ptr [r8]>', '<mov~~r9d, dword ptr [r10 + 0x94]>', '<mov~~r10d, dword ptr [r10 + 0x98]>', '<imul~~rsi, rsi, 0x8480>', '<add~~rax, rsi>', '<add~~rax, 0x8470>', '<mov~~rax, qword ptr [rax]>', '<lea~~rsi, [rip + 0x1aad]>', '<mov~~dword ptr [rsp], r10d>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x2b8]>', '<mov~~rcx, rax>', '<add~~rcx, 0x2c>', '<mov~~qword ptr [rsp + 0x270], rcx>', '<mov~~edx, dword ptr [rax + 0x2c]>', '<mov~~dword ptr [rsp + 0x27c], edx>', '<xor~~eax, eax>', '<xor~~ecx, ecx>', '<cmp~~edx, 0>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x280], edx>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x284], edx>', '<mov~~qword ptr [rsp + 0x288], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x290], ecx>', '<mov~~dword ptr [rsp + 0x294], eax>', '<je~~0x4014ba>']}, {'block_Idx': 67, 'blockInsts': ['<jmp~~0x401e12>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xad0]>', '<lea~~rsi, [rip + 0x1bcf]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x2b8]>', '<mov~~rsi, qword ptr [rsp + 0x2c0]>', '<add~~rcx, 0x4b0>', '<lea~~rdi, [rsp + 0xad0]>', '<mov~~edx, 2>', '<xor~~eax, eax>', '<mov~~r8d, eax>', '<call~~0x5000c0>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x1ec]>', '<mov~~edx, dword ptr [rsp + 0x1d8]>', '<mov~~rdi, qword ptr [rsp + 0xad0]>', '<lea~~rsi, [rip + 0x180d]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 22, 'blockInsts': ['<jmp~~0x4015a8>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xad0]>', '<lea~~rsi, [rip + 0x14e5]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2cc], eax>', '<cmp~~eax, 0>', '<jge~~0x4011c2>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xad0]>', '<call~~0x500058>']}, {'block_Idx': 76, 'blockInsts': ['<jmp~~0x4019c5>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x1d0]>', '<mov~~rax, qword ptr [rsp + 0x2b8]>', '<mov~~rcx, qword ptr [rsp + 0x2a0]>', '<add~~rcx, 0x20>', '<mov~~qword ptr [rsp + 0x1a8], rcx>', '<add~~rax, 0x30>', '<mov~~qword ptr [rsp + 0x1b0], rax>', '<xor~~eax, eax>', '<mov~~edx, eax>', '<xor~~ecx, ecx>', '<mov~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x1bc], esi>', '<mov~~qword ptr [rsp + 0x1c0], rdx>', '<mov~~dword ptr [rsp + 0x1c8], ecx>', '<mov~~dword ptr [rsp + 0x1cc], eax>', '<mov~~rsi, qword ptr [rsp + 0x1b0]>', '<mov~~r8, qword ptr [rsp + 0x1a8]>', '<mov~~edx, dword ptr [rsp + 0x1bc]>', '<mov~~rdi, qword ptr [rsp + 0x1c0]>', '<mov~~eax, dword ptr [rsp + 0x1c8]>', '<mov~~ecx, dword ptr [rsp + 0x1cc]>', '<mov~~dword ptr [rsp + 0x17c], eax>', '<mov~~qword ptr [rsp + 0x180], rdi>', '<mov~~r8, qword ptr [r8]>', '<mov~~qword ptr [rsp + 0x188], r8>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rsi + rdi*8]>', '<mov~~rsi, qword ptr [rsi + 8]>', '<mov~~qword ptr [rsp + 0x190], rsi>', '<cmp~~dword ptr [rsi + 0xc], 0>', '<mov~~dword ptr [rsp + 0x19c], edx>', '<mov~~dword ptr [rsp + 0x1a0], ecx>', '<mov~~dword ptr [rsp + 0x1a4], eax>', '<jne~~0x401795>']}, {'block_Idx': 89, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x47]>', '<mov~~rcx, qword ptr [rsp + 0x48]>', '<mov~~rdx, qword ptr [rsp + 0x50]>', '<mov~~qword ptr [rsp + 0x30], rdx>', '<mov~~rcx, qword ptr [rcx + rdx*8]>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<test~~al, 1>', '<jne~~0x401dea>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x2c0]>', '<mov~~rdi, qword ptr [rsp + 0x2b8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x1f11]>', '<mov~~al, 0>', '<call~~0x500018>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x2a0]>', '<mov~~rdi, qword ptr [rsp + 0xad0]>', '<mov~~edx, dword ptr [rax + 0x10]>', '<lea~~rsi, [rip + 0x1ba6]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<mov~~dl, byte ptr [rsp + 0x1f7]>', '<mov~~rcx, qword ptr [rsp + 0x58]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~rsi, qword ptr [rcx]>', '<mov~~esi, dword ptr [rsi + 0x810]>', '<test~~esi, esi>', '<setg~~sil>', '<or~~dl, sil>', '<mov~~byte ptr [rsp + 0x47], dl>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x48], rcx>', '<mov~~qword ptr [rsp + 0x50], rax>', '<mov~~al, byte ptr [rsp + 0x47]>', '<mov~~rcx, qword ptr [rsp + 0x48]>', '<mov~~rdx, qword ptr [rsp + 0x50]>', '<mov~~qword ptr [rsp + 0x30], rdx>', '<mov~~rcx, qword ptr [rcx + rdx*8]>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<test~~al, 1>', '<jne~~0x401dea>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x138]>', '<mov~~rax, qword ptr [rsp + 0x160]>', '<mov~~rcx, qword ptr [rsp + 0x108]>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x100], rcx>', '<mov~~eax, dword ptr [rax]>', '<sub~~eax, edx>', '<cmp~~eax, ecx>', '<jle~~0x401a18>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x270]>', '<mov~~ecx, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0xf8], ecx>', '<mov~~eax, 0xffffffff>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0xfc], eax>', '<je~~0x401c9e>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xad0]>', '<call~~0x5000d0>']}, {'block_Idx': 85, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rcx, qword ptr [rsp + 0x58]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~qword ptr [rsp + 0x48], rcx>', '<mov~~qword ptr [rsp + 0x50], rax>', '<jmp~~0x401dc8>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x2c0]>', '<mov~~rsi, qword ptr [rsp + 0x2a8]>', '<call~~0x5000d8>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0xa8]>', '<mov~~edx, dword ptr [rsp + 0xa4]>', '<mov~~rax, qword ptr [rsp + 0xb0]>', '<mov~~r10, qword ptr [rsp + 0xb8]>', '<mov~~rdi, qword ptr [rsp + 0xad0]>', '<mov~~ecx, dword ptr [r10 + 0x60]>', '<imul~~r9, rsi, 0x8480>', '<mov~~r8, rax>', '<add~~r8, r9>', '<add~~r8, 0x8468>', '<mov~~r8, qword ptr [r8]>', '<mov~~r9d, dword ptr [r10 + 0x1d0]>', '<mov~~ebx, dword ptr [r10 + 0x1d4]>', '<imul~~r11, rsi, 0x8480>', '<mov~~r10, rax>', '<add~~r10, r11>', '<add~~r10, 0x8478>', '<mov~~r11d, dword ptr [r10]>', '<imul~~r14, rsi, 0x8480>', '<mov~~r10, rax>', '<add~~r10, r14>', '<add~~r10, 0x847c>', '<mov~~r10d, dword ptr [r10]>', '<imul~~rsi, rsi, 0x8480>', '<add~~rax, rsi>', '<add~~rax, 0x8470>', '<mov~~rax, qword ptr [rax]>', '<lea~~rsi, [rip + 0x16f0]>', '<mov~~dword ptr [rsp], ebx>', '<mov~~dword ptr [rsp + 8], r11d>', '<mov~~dword ptr [rsp + 0x10], r10d>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 87, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x11f]>', '<mov~~rcx, qword ptr [rsp + 0x120]>', '<mov~~rdx, qword ptr [rsp + 0x128]>', '<mov~~qword ptr [rsp + 0x108], rdx>', '<mov~~rcx, qword ptr [rcx + rdx*8]>', '<mov~~qword ptr [rsp + 0x110], rcx>', '<test~~al, 1>', '<jne~~0x40196c>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x22c]>', '<mov~~rax, qword ptr [rsp + 0x238]>', '<mov~~rdx, qword ptr [rsp + 0x220]>', '<imul~~rdx, rdx, 0x8480>', '<add~~rax, rdx>', '<add~~rax, 0x8460>', '<mov~~rax, qword ptr [rax]>', '<add~~ecx, -1>', '<mov~~ecx, ecx>', '<mov~~rcx, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rcx + 0x800]>', '<add~~rax, qword ptr [rcx + 0x808]>', '<mov~~qword ptr [rsp + 0x230], rax>', '<mov~~rax, qword ptr [rsp + 0x240]>', '<mov~~rcx, qword ptr [rsp + 0x220]>', '<mov~~rdx, qword ptr [rsp + 0x230]>', '<mov~~qword ptr [rsp + 0x208], rdx>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0xc], 0>', '<jne~~0x4013db>']}, {'block_Idx': 77, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x298], eax>', '<mov~~eax, dword ptr [rsp + 0x298]>', '<add~~rsp, 0xad8>', '<pop~~rbx>', '<pop~~r14>', '<ret~~>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x170]>', '<lea~~rsi, [rip + 0x1833]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x240]>', '<mov~~rcx, qword ptr [rsp + 0x220]>', '<mov~~rdx, qword ptr [rsp + 0x230]>', '<mov~~qword ptr [rsp + 0x208], rdx>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0xc], 0>', '<jne~~0x4013db>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0xd8]>', '<mov~~r8, qword ptr [rsp + 0xd0]>', '<mov~~edx, dword ptr [rsp + 0xe4]>', '<mov~~rdi, qword ptr [rsp + 0xe8]>', '<mov~~eax, dword ptr [rsp + 0xf0]>', '<mov~~ecx, dword ptr [rsp + 0xf4]>', '<mov~~dword ptr [rsp + 0xa4], eax>', '<mov~~qword ptr [rsp + 0xa8], rdi>', '<mov~~r8, qword ptr [r8]>', '<mov~~qword ptr [rsp + 0xb0], r8>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rsi + rdi*8]>', '<mov~~rsi, qword ptr [rsi + 8]>', '<mov~~qword ptr [rsp + 0xb8], rsi>', '<cmp~~dword ptr [rsi + 0xc], 1>', '<mov~~dword ptr [rsp + 0xc4], edx>', '<mov~~dword ptr [rsp + 0xc8], ecx>', '<mov~~dword ptr [rsp + 0xcc], eax>', '<jne~~0x401c4c>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x13c]>', '<mov~~dl, byte ptr [rsp + 0x1f7]>', '<mov~~rcx, qword ptr [rsp + 0x130]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~rsi, qword ptr [rcx]>', '<mov~~esi, dword ptr [rsi + 0x810]>', '<test~~esi, esi>', '<setg~~sil>', '<or~~dl, sil>', '<mov~~byte ptr [rsp + 0x11f], dl>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x120], rcx>', '<mov~~qword ptr [rsp + 0x128], rax>', '<mov~~al, byte ptr [rsp + 0x11f]>', '<mov~~rcx, qword ptr [rsp + 0x120]>', '<mov~~rdx, qword ptr [rsp + 0x128]>', '<mov~~qword ptr [rsp + 0x108], rdx>', '<mov~~rcx, qword ptr [rcx + rdx*8]>', '<mov~~qword ptr [rsp + 0x110], rcx>', '<test~~al, 1>', '<jne~~0x40196c>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x1b0]>', '<mov~~r8, qword ptr [rsp + 0x1a8]>', '<mov~~edx, dword ptr [rsp + 0x1bc]>', '<mov~~rdi, qword ptr [rsp + 0x1c0]>', '<mov~~eax, dword ptr [rsp + 0x1c8]>', '<mov~~ecx, dword ptr [rsp + 0x1cc]>', '<mov~~dword ptr [rsp + 0x17c], eax>', '<mov~~qword ptr [rsp + 0x180], rdi>', '<mov~~r8, qword ptr [r8]>', '<mov~~qword ptr [rsp + 0x188], r8>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rsi + rdi*8]>', '<mov~~rsi, qword ptr [rsi + 8]>', '<mov~~qword ptr [rsp + 0x190], rsi>', '<cmp~~dword ptr [rsi + 0xc], 0>', '<mov~~dword ptr [rsp + 0x19c], edx>', '<mov~~dword ptr [rsp + 0x1a0], ecx>', '<mov~~dword ptr [rsp + 0x1a4], eax>', '<jne~~0x401795>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x2a0]>', '<mov~~edi, dword ptr [rsp + 0x29c]>', '<mov~~esi, dword ptr [rsp + 0x280]>', '<mov~~r9d, dword ptr [rsp + 0x284]>', '<mov~~rdx, qword ptr [rsp + 0x288]>', '<mov~~r8d, dword ptr [rsp + 0x290]>', '<mov~~ecx, dword ptr [rsp + 0x294]>', '<mov~~dword ptr [rsp + 0x1d8], r9d>', '<mov~~dword ptr [rsp + 0x1dc], esi>', '<cmp~~edi, 0>', '<sete~~sil>', '<mov~~byte ptr [rsp + 0x1f7], sil>', '<xor~~esi, esi>', '<cmp~~edi, 0>', '<cmove~~rdx, rsi>', '<xor~~esi, esi>', '<cmp~~edi, 0>', '<cmove~~r8d, esi>', '<xor~~esi, esi>', '<cmp~~edi, 0>', '<cmove~~ecx, esi>', '<mov~~rsi, rax>', '<add~~rsi, 8>', '<mov~~qword ptr [rsp + 0x1e0], rsi>', '<mov~~esi, dword ptr [rax + 8]>', '<cmp~~ecx, esi>', '<mov~~eax, ecx>', '<cmovg~~eax, esi>', '<cmp~~r8d, esi>', '<mov~~edi, r8d>', '<cmovg~~edi, esi>', '<cmp~~esi, 0>', '<cmove~~edi, r8d>', '<mov~~dword ptr [rsp + 0x1ec], edi>', '<cmp~~esi, 0>', '<cmove~~eax, ecx>', '<mov~~dword ptr [rsp + 0x1f0], eax>', '<mov~~rdi, qword ptr [rsp + 0xad0]>', '<lea~~rsi, [rip + 0x1b8d]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 83, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x100]>', '<mov~~rcx, qword ptr [rsp + 0x130]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~qword ptr [rsp + 0x120], rcx>', '<mov~~qword ptr [rsp + 0x128], rax>', '<jmp~~0x40193b>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x78]>', '<mov~~edx, dword ptr [rsp + 0x94]>', '<mov~~r8d, dword ptr [rsp + 0x84]>', '<mov~~dil, byte ptr [rsp + 0x1f7]>', '<mov~~rsi, qword ptr [rsp + 0x68]>', '<mov~~r9, qword ptr [rsp + 0x70]>', '<mov~~rcx, qword ptr [rsp + 0x2a0]>', '<mov~~ecx, dword ptr [rcx + 0x10]>', '<imul~~r9, r9, 0x8480>', '<add~~rsi, r9>', '<add~~rsi, 0x8460>', '<mov~~qword ptr [rsp + 0x58], rsi>', '<xor~~esi, esi>', '<test~~dil, 1>', '<cmovne~~esi, ecx>', '<mov~~dword ptr [rsp + 0x60], esi>', '<mov~~ecx, r8d>', '<add~~ecx, esi>', '<mov~~edi, edx>', '<sub~~edi, ecx>', '<xor~~ecx, ecx>', '<cmp~~edi, 0>', '<cmovg~~ecx, edi>', '<xor~~edi, edi>', '<cmp~~r8d, 0>', '<cmove~~ecx, edi>', '<mov~~dword ptr [rsp + 0x64], ecx>', '<sub~~edx, esi>', '<cmp~~ecx, edx>', '<mov~~qword ptr [rsp + 0x98], rax>', '<jge~~0x401e85>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edx, dword ptr [rax + 0x810]>', '<mov~~rcx, qword ptr [rax + 0x808]>', '<lea~~rsi, [rip + 0x158f]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x298]>', '<add~~rsp, 0xad8>', '<pop~~rbx>', '<pop~~r14>', '<ret~~>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x208]>', '<mov~~r9, qword ptr [rsp + 0x248]>', '<mov~~r8, qword ptr [rsp + 0x220]>', '<mov~~edi, dword ptr [rsp + 0x1f8]>', '<mov~~esi, dword ptr [rsp + 0x1fc]>', '<mov~~ecx, dword ptr [rsp + 0x200]>', '<mov~~eax, dword ptr [rsp + 0x204]>', '<add~~r8, 1>', '<cmp~~r8, r9>', '<mov~~qword ptr [rsp + 0x250], r8>', '<mov~~r8d, eax>', '<mov~~dword ptr [rsp + 0x258], r8d>', '<mov~~r8d, ecx>', '<mov~~dword ptr [rsp + 0x25c], r8d>', '<mov~~r8, rdx>', '<mov~~qword ptr [rsp + 0x260], r8>', '<mov~~r8d, esi>', '<mov~~dword ptr [rsp + 0x268], r8d>', '<mov~~r8d, edi>', '<mov~~dword ptr [rsp + 0x26c], r8d>', '<mov~~dword ptr [rsp + 0x280], edi>', '<mov~~dword ptr [rsp + 0x284], esi>', '<mov~~qword ptr [rsp + 0x288], rdx>', '<mov~~dword ptr [rsp + 0x290], ecx>', '<mov~~dword ptr [rsp + 0x294], eax>', '<jne~~0x4012a4>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xad0]>', '<lea~~rsi, [rip + 0x1f07]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0xf8]>', '<mov~~rax, qword ptr [rsp + 0x2b8]>', '<mov~~rcx, qword ptr [rsp + 0x2a0]>', '<add~~rcx, 0x20>', '<mov~~qword ptr [rsp + 0xd0], rcx>', '<add~~rax, 0x30>', '<mov~~qword ptr [rsp + 0xd8], rax>', '<xor~~eax, eax>', '<mov~~edx, eax>', '<xor~~ecx, ecx>', '<mov~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0xe4], esi>', '<mov~~qword ptr [rsp + 0xe8], rdx>', '<mov~~dword ptr [rsp + 0xf0], ecx>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<mov~~rsi, qword ptr [rsp + 0xd8]>', '<mov~~r8, qword ptr [rsp + 0xd0]>', '<mov~~edx, dword ptr [rsp + 0xe4]>', '<mov~~rdi, qword ptr [rsp + 0xe8]>', '<mov~~eax, dword ptr [rsp + 0xf0]>', '<mov~~ecx, dword ptr [rsp + 0xf4]>', '<mov~~dword ptr [rsp + 0xa4], eax>', '<mov~~qword ptr [rsp + 0xa8], rdi>', '<mov~~r8, qword ptr [r8]>', '<mov~~qword ptr [rsp + 0xb0], r8>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rsi + rdi*8]>', '<mov~~rsi, qword ptr [rsi + 8]>', '<mov~~qword ptr [rsp + 0xb8], rsi>', '<cmp~~dword ptr [rsi + 0xc], 1>', '<mov~~dword ptr [rsp + 0xc4], edx>', '<mov~~dword ptr [rsp + 0xc8], ecx>', '<mov~~dword ptr [rsp + 0xcc], eax>', '<jne~~0x401c4c>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x2a0]>', '<cmp~~dword ptr [rax + 0x28], 0>', '<je~~0x401a3e>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x270]>', '<mov~~ecx, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x1d0], ecx>', '<mov~~eax, 0xffffffff>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x1d4], eax>', '<je~~0x4017e7>']}, {'block_Idx': 84, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xad0]>', '<mov~~qword ptr [rsp + 0x98], rax>', '<mov~~rdi, qword ptr [rsp + 0x98]>', '<lea~~rsi, [rip + 0x13d6]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x1f0]>', '<mov~~edx, dword ptr [rsp + 0x1dc]>', '<mov~~rdi, qword ptr [rsp + 0xad0]>', '<lea~~rsi, [rip + 0x1b9c]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x21c]>', '<mov~~ecx, dword ptr [rsp + 0x22c]>', '<mov~~esi, dword ptr [rsp + 0x210]>', '<mov~~edx, dword ptr [rsp + 0x214]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp + 0x1f8], esi>', '<mov~~dword ptr [rsp + 0x1fc], edx>', '<mov~~dword ptr [rsp + 0x200], ecx>', '<mov~~dword ptr [rsp + 0x204], eax>', '<mov~~rdx, qword ptr [rsp + 0x208]>', '<mov~~r9, qword ptr [rsp + 0x248]>', '<mov~~r8, qword ptr [rsp + 0x220]>', '<mov~~edi, dword ptr [rsp + 0x1f8]>', '<mov~~esi, dword ptr [rsp + 0x1fc]>', '<mov~~ecx, dword ptr [rsp + 0x200]>', '<mov~~eax, dword ptr [rsp + 0x204]>', '<add~~r8, 1>', '<cmp~~r8, r9>', '<mov~~qword ptr [rsp + 0x250], r8>', '<mov~~r8d, eax>', '<mov~~dword ptr [rsp + 0x258], r8d>', '<mov~~r8d, ecx>', '<mov~~dword ptr [rsp + 0x25c], r8d>', '<mov~~r8, rdx>', '<mov~~qword ptr [rsp + 0x260], r8>', '<mov~~r8d, esi>', '<mov~~dword ptr [rsp + 0x268], r8d>', '<mov~~r8d, edi>', '<mov~~dword ptr [rsp + 0x26c], r8d>', '<mov~~dword ptr [rsp + 0x280], edi>', '<mov~~dword ptr [rsp + 0x284], esi>', '<mov~~qword ptr [rsp + 0x288], rdx>', '<mov~~dword ptr [rsp + 0x290], ecx>', '<mov~~dword ptr [rsp + 0x294], eax>', '<jne~~0x4012a4>']}, {'block_Idx': 63, 'blockInsts': ['<jmp~~0x40199a>']}], 'cfg_edge_info': [(81, 85), (89, 68), (73, 81), (57, 48), (22, 26), (79, 81), (87, 64), (53, 62), (45, 30), (39, 44), (2, 4), (83, 87), (48, 40), (40, 45), (49, 66), (68, 79), (15, 18), (55, 63), (65, 40), (51, 50), (46, 45), (0, 2), (14, 19), (80, 83), (62, 53), (24, 14), (63, 70), (81, 84), (12, 15), (29, 31), (57, 47), (31, 37), (52, 69), (53, 43), (66, 77), (87, 63), (82, 30), (43, 50), (23, 26), (19, 22), (7, 11), (47, 65), (69, 62), (4, 6), (60, 68), (30, 33), (6, 8), (41, 48), (26, 29), (89, 67), (44, 53), (38, 49), (80, 82), (62, 52), (50, 32), (11, 13), (37, 41), (32, 38), (12, 14), (29, 30), (51, 60), (39, 43), (76, 80), (33, 39), (84, 32), (8, 12), (48, 57), (69, 43), (15, 17), (67, 73), (43, 51), (60, 67), (65, 57), (40, 46), (19, 23), (30, 32), (6, 7), (21, 14), (41, 47), (55, 64), (64, 76), (44, 52), (70, 80), (46, 55), (37, 40), (85, 89)], 'cdg_edge_info': [(6, 12), (30, 43), (89, 68), (81, 85), (69, 62), (6, 30), (60, 68), (80, 80), (80, 83), (44, 69), (6, 66), (30, 33), (6, 11), (6, 8), (87, 70), (87, 64), (30, 39), (6, 14), (81, 81), (6, 26), (6, 32), (89, 73), (12, 15), (29, 31), (57, 47), (43, 51), (29, 37), (6, 29), (29, 40), (60, 73), (39, 44), (65, 57), (6, 38), (57, 65), (40, 46), (62, 52), (19, 23), (37, 41), (46, 80), (6, 7), (6, 13), (6, 77), (55, 64), (55, 70), (81, 89), (41, 47), (6, 19), (51, 60), (44, 52), (41, 65), (46, 55), (80, 87), (6, 49), (51, 81), (51, 84), (19, 22), (46, 82), (62, 69)], 'ddg_edge_info': [(89, 68), (26, 30), (81, 85), (70, 64), (87, 80), (73, 81), (70, 73), (64, 87), (0, 51), (70, 82), (0, 14), (14, 31), (8, 82), (31, 47), (14, 40), (0, 23), (31, 65), (33, 84), (6, 11), (68, 84), (87, 64), (47, 55), (52, 51), (26, 32), (47, 64), (64, 80), (0, 44), (47, 82), (39, 44), (0, 7), (2, 4), (31, 40), (40, 43), (14, 33), (60, 85), (83, 87), (15, 62), (14, 51), (40, 70), (8, 32), (47, 57), (64, 73), (55, 70), (73, 85), (64, 82), (0, 46), (82, 33), (70, 68), (14, 26), (51, 84), (49, 66), (62, 69), (0, 30), (8, 43), (65, 40), (8, 52), (0, 2), (14, 19), (0, 66), (80, 83), (15, 57), (43, 73), (60, 89), (47, 52), (87, 70), (64, 68), (33, 44), (0, 41), (73, 89), (47, 70), (12, 15), (57, 47), (52, 60), (31, 37), (60, 73), (52, 69), (57, 65), (66, 77), (43, 84), (8, 84), (8, 38), (64, 70), (8, 47), (82, 30), (14, 60), (0, 43), (89, 81), (23, 26), (14, 23), (15, 43), (14, 87), (52, 62), (43, 68), (51, 81), (2, 6), (8, 31), (7, 11), (55, 60), (8, 40), (8, 49), (47, 65), (12, 65), (14, 62), (40, 81), (69, 62), (73, 84), (4, 6), (82, 32), (33, 51), (33, 60), (52, 73), (12, 37), (33, 69), (8, 15), (47, 40), (8, 33), (73, 68), (14, 46), (68, 81), (0, 29), (14, 55), (26, 29), (4, 8), (41, 57), (55, 83), (38, 49), (33, 62), (44, 62), (0, 4), (52, 84), (62, 52), (31, 46), (8, 26), (11, 77), (0, 77), (37, 41), (31, 55), (23, 51), (31, 64), (14, 57), (0, 40), (32, 38), (12, 69), (26, 31), (31, 82), (12, 14), (51, 60), (15, 40), (52, 68), (70, 83), (39, 43), (33, 73), (0, 15), (31, 57), (68, 85), (52, 43), (33, 39), (26, 33), (84, 32), (55, 87), (8, 12), (31, 41), (47, 46), (23, 46), (40, 62), (14, 43), (69, 43), (40, 80), (7, 77), (89, 73), (43, 51), (64, 83), (65, 57), (33, 68), (70, 87), (8, 14), (40, 46), (8, 23), (12, 39), (43, 81), (40, 64), (46, 80), (68, 89), (31, 70), (40, 82), (4, 7), (33, 43), (55, 73), (33, 52), (70, 80), (46, 55), (0, 12), (37, 40), (68, 73), (85, 89), (46, 82)]}]}
{'write_manifest': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%r14'}, {'instIndex': 1, 'instruction': 'pushq\t%rbx'}, {'instIndex': 2, 'instruction': 'subq\t$0xad8, %rsp                     # imm = 0xAD8'}, {'instIndex': 3, 'instruction': 'movl\t%esi, 0x29c(%rsp)                 # 4-byte Spill'}, {'instIndex': 4, 'instruction': 'movq\t%rdi, %rcx'}, {'instIndex': 5, 'instruction': 'movq\t%rcx, 0x2b8(%rsp)                 # 8-byte Spill'}, {'instIndex': 6, 'instruction': 'movq\t0x18(%rcx), %rax'}, {'instIndex': 7, 'instruction': 'movq\t%rax, 0x2a0(%rsp)                 # 8-byte Spill'}, {'instIndex': 8, 'instruction': 'leaq\t0xad0(%rsp), %rax'}, {'instIndex': 9, 'instruction': 'leaq\t0x6d0(%rsp), %rdi'}, {'instIndex': 10, 'instruction': 'movq\t%rdi, 0x2a8(%rsp)                 # 8-byte Spill'}, {'instIndex': 11, 'instruction': 'leaq\t0x2d0(%rsp), %rax'}, {'instIndex': 12, 'instruction': 'movq\t%rax, 0x2c0(%rsp)                 # 8-byte Spill'}, {'instIndex': 13, 'instruction': 'addq\t$0x38, %rcx'}, {'instIndex': 14, 'instruction': 'movq\t%rcx, 0x2b0(%rsp)                 # 8-byte Spill'}, {'instIndex': 15, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 16, 'instruction': 'leaq\t.L.str.0x20(%rip), %rdx'}, {'instIndex': 17, 'instruction': 'movb\t$0, %al'}, {'instIndex': 18, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 21, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 22, 'instruction': 'leaq\t.L.str.0x21(%rip), %rdx'}, {'instIndex': 23, 'instruction': 'movb\t$0, %al'}, {'instIndex': 24, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 27, 'instruction': 'addq\t$0x4b0, %rcx                     # imm = 0x4B0'}, {'instIndex': 28, 'instruction': 'leaq\t0xad0(%rsp), %rdi'}, {'instIndex': 29, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 30, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 31, 'instruction': 'movl\t%eax, %r8d'}, {'instIndex': 32, 'instruction': 'callq\tavio_open2@PLT'}, {'instIndex': 34, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 35, 'instruction': 'jge\t.LBB5_2'}, {'instIndex': 38, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 39, 'instruction': 'leaq\t.L.str.0x22(%rip), %rdx'}, {'instIndex': 40, 'instruction': 'movb\t$0, %al'}, {'instIndex': 41, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 44, 'instruction': 'jmp\t.LBB5_45'}, {'instIndex': 45, 'instruction': 'movq\t0xad0(%rsp), %rdi'}, {'instIndex': 46, 'instruction': 'leaq\t.L.str.0x23(%rip), %rsi'}, {'instIndex': 47, 'instruction': 'movb\t$0, %al'}, {'instIndex': 48, 'instruction': 'callq\tavio_printf@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 648, 'instruction': 'movq\t0xad0(%rsp), %rdi'}, {'instIndex': 649, 'instruction': 'leaq\t.L.str.0x2c(%rip), %rsi'}, {'instIndex': 650, 'instruction': 'movb\t$0, %al'}, {'instIndex': 651, 'instruction': 'callq\tavio_printf@PLT'}, {'instIndex': 652, 'instruction': 'movq\t0xad0(%rsp), %rdi'}, {'instIndex': 653, 'instruction': 'callq\tavio_flush@PLT'}, {'instIndex': 654, 'instruction': 'movq\t0xad0(%rsp), %rdi'}, {'instIndex': 655, 'instruction': 'callq\tavio_close@PLT'}, {'instIndex': 658, 'instruction': 'callq\trename@PLT'}, {'instIndex': 662, 'instruction': 'addq\t$0xad8, %rsp                     # imm = 0xAD8'}, {'instIndex': 663, 'instruction': 'popq\t%rbx'}, {'instIndex': 664, 'instruction': 'popq\t%r14'}, {'instIndex': 665, 'instruction': 'retq'}]}]}
The case of compiler clang with optimization O3.
Patched source code file: smoothstreamingenc.c
Patched function: 1---static int write_manifest 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_after/O3/smoothstreamingenc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_after/O3/smoothstreamingenc.s---write_manifest---after
function id: 5
function flag: True
There are 746 instructions for function: write_manifest in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '210', 'end': 224}, 'before': {'start': '210', 'end': 223}}}, {'modifyIndex': 2, 'line': {'after': {'start': '279', 'end': 285}, 'before': {'start': '278', 'end': 283}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%r14'}, {'instIndex': 1, 'instruction': 'pushq\t%rbx'}, {'instIndex': 2, 'instruction': 'subq\t$0xaf8, %rsp                     # imm = 0xAF8'}, {'instIndex': 3, 'instruction': 'movl\t%esi, 0x2bc(%rsp)                 # 4-byte Spill'}, {'instIndex': 4, 'instruction': 'movq\t%rdi, %rcx'}, {'instIndex': 5, 'instruction': 'movq\t%rcx, 0x2d8(%rsp)                 # 8-byte Spill'}, {'instIndex': 6, 'instruction': 'movq\t0x18(%rcx), %rax'}, {'instIndex': 7, 'instruction': 'movq\t%rax, 0x2c0(%rsp)                 # 8-byte Spill'}, {'instIndex': 8, 'instruction': 'leaq\t0xaf0(%rsp), %rax'}, {'instIndex': 9, 'instruction': 'leaq\t0x6f0(%rsp), %rdi'}, {'instIndex': 10, 'instruction': 'movq\t%rdi, 0x2c8(%rsp)                 # 8-byte Spill'}, {'instIndex': 11, 'instruction': 'leaq\t0x2f0(%rsp), %rax'}, {'instIndex': 12, 'instruction': 'movq\t%rax, 0x2e0(%rsp)                 # 8-byte Spill'}, {'instIndex': 13, 'instruction': 'addq\t$0x38, %rcx'}, {'instIndex': 14, 'instruction': 'movq\t%rcx, 0x2d0(%rsp)                 # 8-byte Spill'}, {'instIndex': 15, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 16, 'instruction': 'leaq\t.L.str.0x20(%rip), %rdx'}, {'instIndex': 17, 'instruction': 'movb\t$0, %al'}, {'instIndex': 18, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 21, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 22, 'instruction': 'leaq\t.L.str.0x21(%rip), %rdx'}, {'instIndex': 23, 'instruction': 'movb\t$0, %al'}, {'instIndex': 24, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 27, 'instruction': 'addq\t$0x4b0, %rcx                     # imm = 0x4B0'}, {'instIndex': 28, 'instruction': 'leaq\t0xaf0(%rsp), %rdi'}, {'instIndex': 29, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 30, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 31, 'instruction': 'movl\t%eax, %r8d'}, {'instIndex': 32, 'instruction': 'callq\tavio_open2@PLT'}, {'instIndex': 34, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 35, 'instruction': 'jge\t.LBB5_2'}, {'instIndex': 38, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 39, 'instruction': 'leaq\t.L.str.0x22(%rip), %rdx'}, {'instIndex': 40, 'instruction': 'movb\t$0, %al'}, {'instIndex': 41, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 44, 'instruction': 'jmp\t.LBB5_41'}, {'instIndex': 45, 'instruction': 'movq\t0xaf0(%rsp), %rdi'}, {'instIndex': 46, 'instruction': 'leaq\t.L.str.0x23(%rip), %rsi'}, {'instIndex': 47, 'instruction': 'movb\t$0, %al'}, {'instIndex': 48, 'instruction': 'callq\tavio_printf@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 728, 'instruction': 'movq\t0xaf0(%rsp), %rdi'}, {'instIndex': 729, 'instruction': 'leaq\t.L.str.0x2c(%rip), %rsi'}, {'instIndex': 730, 'instruction': 'movb\t$0, %al'}, {'instIndex': 731, 'instruction': 'callq\tavio_printf@PLT'}, {'instIndex': 732, 'instruction': 'movq\t0xaf0(%rsp), %rdi'}, {'instIndex': 733, 'instruction': 'callq\tavio_flush@PLT'}, {'instIndex': 734, 'instruction': 'movq\t0xaf0(%rsp), %rdi'}, {'instIndex': 735, 'instruction': 'callq\tavio_close@PLT'}, {'instIndex': 738, 'instruction': 'callq\trename@PLT'}, {'instIndex': 742, 'instruction': 'addq\t$0xaf8, %rsp                     # imm = 0xAF8'}, {'instIndex': 743, 'instruction': 'popq\t%rbx'}, {'instIndex': 744, 'instruction': 'popq\t%r14'}, {'instIndex': 745, 'instruction': 'retq'}]}]
Patched function: 1---static int write_manifest 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_after/O3/smoothstreamingenc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_after/O3/smoothstreamingenc.s---write_manifest---after
function id: 5
function flag: True
There are 746 instructions for function: write_manifest in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '210', 'end': 224}, 'before': {'start': '210', 'end': 223}}}, {'modifyIndex': 2, 'line': {'after': {'start': '279', 'end': 285}, 'before': {'start': '278', 'end': 283}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%r14'}, {'instIndex': 1, 'instruction': 'pushq\t%rbx'}, {'instIndex': 2, 'instruction': 'subq\t$0xaf8, %rsp                     # imm = 0xAF8'}, {'instIndex': 3, 'instruction': 'movl\t%esi, 0x2bc(%rsp)                 # 4-byte Spill'}, {'instIndex': 4, 'instruction': 'movq\t%rdi, %rcx'}, {'instIndex': 5, 'instruction': 'movq\t%rcx, 0x2d8(%rsp)                 # 8-byte Spill'}, {'instIndex': 6, 'instruction': 'movq\t0x18(%rcx), %rax'}, {'instIndex': 7, 'instruction': 'movq\t%rax, 0x2c0(%rsp)                 # 8-byte Spill'}, {'instIndex': 8, 'instruction': 'leaq\t0xaf0(%rsp), %rax'}, {'instIndex': 9, 'instruction': 'leaq\t0x6f0(%rsp), %rdi'}, {'instIndex': 10, 'instruction': 'movq\t%rdi, 0x2c8(%rsp)                 # 8-byte Spill'}, {'instIndex': 11, 'instruction': 'leaq\t0x2f0(%rsp), %rax'}, {'instIndex': 12, 'instruction': 'movq\t%rax, 0x2e0(%rsp)                 # 8-byte Spill'}, {'instIndex': 13, 'instruction': 'addq\t$0x38, %rcx'}, {'instIndex': 14, 'instruction': 'movq\t%rcx, 0x2d0(%rsp)                 # 8-byte Spill'}, {'instIndex': 15, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 16, 'instruction': 'leaq\t.L.str.0x20(%rip), %rdx'}, {'instIndex': 17, 'instruction': 'movb\t$0, %al'}, {'instIndex': 18, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 21, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 22, 'instruction': 'leaq\t.L.str.0x21(%rip), %rdx'}, {'instIndex': 23, 'instruction': 'movb\t$0, %al'}, {'instIndex': 24, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 27, 'instruction': 'addq\t$0x4b0, %rcx                     # imm = 0x4B0'}, {'instIndex': 28, 'instruction': 'leaq\t0xaf0(%rsp), %rdi'}, {'instIndex': 29, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 30, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 31, 'instruction': 'movl\t%eax, %r8d'}, {'instIndex': 32, 'instruction': 'callq\tavio_open2@PLT'}, {'instIndex': 34, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 35, 'instruction': 'jge\t.LBB5_2'}, {'instIndex': 38, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 39, 'instruction': 'leaq\t.L.str.0x22(%rip), %rdx'}, {'instIndex': 40, 'instruction': 'movb\t$0, %al'}, {'instIndex': 41, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 44, 'instruction': 'jmp\t.LBB5_41'}, {'instIndex': 45, 'instruction': 'movq\t0xaf0(%rsp), %rdi'}, {'instIndex': 46, 'instruction': 'leaq\t.L.str.0x23(%rip), %rsi'}, {'instIndex': 47, 'instruction': 'movb\t$0, %al'}, {'instIndex': 48, 'instruction': 'callq\tavio_printf@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 728, 'instruction': 'movq\t0xaf0(%rsp), %rdi'}, {'instIndex': 729, 'instruction': 'leaq\t.L.str.0x2c(%rip), %rsi'}, {'instIndex': 730, 'instruction': 'movb\t$0, %al'}, {'instIndex': 731, 'instruction': 'callq\tavio_printf@PLT'}, {'instIndex': 732, 'instruction': 'movq\t0xaf0(%rsp), %rdi'}, {'instIndex': 733, 'instruction': 'callq\tavio_flush@PLT'}, {'instIndex': 734, 'instruction': 'movq\t0xaf0(%rsp), %rdi'}, {'instIndex': 735, 'instruction': 'callq\tavio_close@PLT'}, {'instIndex': 738, 'instruction': 'callq\trename@PLT'}, {'instIndex': 742, 'instruction': 'addq\t$0xaf8, %rsp                     # imm = 0xAF8'}, {'instIndex': 743, 'instruction': 'popq\t%rbx'}, {'instIndex': 744, 'instruction': 'popq\t%r14'}, {'instIndex': 745, 'instruction': 'retq'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_after/O3/smoothstreamingenc.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_after/O3/smoothstreamingenc.o---after
The extraction of function: write_manifest
Analyzing the binaries to generate subCFGs from patched function ...
It has 365 nodes and 714 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 746 instructions in binary file.
[4198592, 4198703, 4198738, 4198784, 4198796, 4198831, 4198850]
[4202519, 4202541, 4202554, 4202567, 4202588, 4202597]
The execution time of patched subCFG information extraction via angr: 0:00:00.641280
{'write_manifest': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x4010c0>, <DisassemblerInsn "push" for 0x4010c2>, <DisassemblerInsn "sub" for 0x4010c3>, <DisassemblerInsn "mov" for 0x4010ca>, <DisassemblerInsn "mov" for 0x4010d1>, <DisassemblerInsn "mov" for 0x4010d4>, <DisassemblerInsn "mov" for 0x4010dc>, <DisassemblerInsn "mov" for 0x4010e0>, <DisassemblerInsn "lea" for 0x4010e8>, <DisassemblerInsn "lea" for 0x4010f0>, <DisassemblerInsn "mov" for 0x4010f8>, <DisassemblerInsn "lea" for 0x401100>, <DisassemblerInsn "mov" for 0x401108>, <DisassemblerInsn "add" for 0x401110>, <DisassemblerInsn "mov" for 0x401114>, <DisassemblerInsn "mov" for 0x40111c>, <DisassemblerInsn "lea" for 0x401121>, <DisassemblerInsn "mov" for 0x401128>, <DisassemblerInsn "call" for 0x40112a>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40112f>, <DisassemblerInsn "mov" for 0x401137>, <DisassemblerInsn "mov" for 0x40113f>, <DisassemblerInsn "lea" for 0x401144>, <DisassemblerInsn "mov" for 0x40114b>, <DisassemblerInsn "call" for 0x40114d>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401152>, <DisassemblerInsn "mov" for 0x40115a>, <DisassemblerInsn "add" for 0x401162>, <DisassemblerInsn "lea" for 0x401169>, <DisassemblerInsn "mov" for 0x401171>, <DisassemblerInsn "xor" for 0x401176>, <DisassemblerInsn "mov" for 0x401178>, <DisassemblerInsn "call" for 0x40117b>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40118c>, <DisassemblerInsn "mov" for 0x401194>, <DisassemblerInsn "mov" for 0x40119c>, <DisassemblerInsn "lea" for 0x4011a1>, <DisassemblerInsn "mov" for 0x4011a8>, <DisassemblerInsn "call" for 0x4011aa>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401180>, <DisassemblerInsn "cmp" for 0x401187>, <DisassemblerInsn "jge" for 0x40118a>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011af>, <DisassemblerInsn "mov" for 0x4011b6>, <DisassemblerInsn "jmp" for 0x4011bd>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011c2>, <DisassemblerInsn "lea" for 0x4011ca>, <DisassemblerInsn "mov" for 0x4011d1>, <DisassemblerInsn "call" for 0x4011d3>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011d8>, <DisassemblerInsn "mov" for 0x4011e0>, <DisassemblerInsn "add" for 0x4011e3>, <DisassemblerInsn "mov" for 0x4011e7>, <DisassemblerInsn "mov" for 0x4011ef>, <DisassemblerInsn "mov" for 0x4011f2>, <DisassemblerInsn "xor" for 0x4011f9>, <DisassemblerInsn "xor" for 0x4011fb>, <DisassemblerInsn "cmp" for 0x4011fd>, <DisassemblerInsn "mov" for 0x401200>, <DisassemblerInsn "mov" for 0x401202>, <DisassemblerInsn "mov" for 0x401209>, <DisassemblerInsn "mov" for 0x40120b>, <DisassemblerInsn "mov" for 0x401212>, <DisassemblerInsn "mov" for 0x40121a>, <DisassemblerInsn "mov" for 0x40121c>, <DisassemblerInsn "mov" for 0x401223>, <DisassemblerInsn "je" for 0x40122a>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402065>, <DisassemblerInsn "add" for 0x40206c>, <DisassemblerInsn "pop" for 0x402073>, <DisassemblerInsn "pop" for 0x402074>, <DisassemblerInsn "ret" for 0x402076>]'}], 'cfg_block_detailed_info': [{'block_Idx': 0, 'blockInsts': ['<push~~r14>', '<push~~rbx>', '<sub~~rsp, 0xaf8>', '<mov~~dword ptr [rsp + 0x2bc], esi>', '<mov~~rcx, rdi>', '<mov~~qword ptr [rsp + 0x2d8], rcx>', '<mov~~rax, qword ptr [rcx + 0x18]>', '<mov~~qword ptr [rsp + 0x2c0], rax>', '<lea~~rax, [rsp + 0xaf0]>', '<lea~~rdi, [rsp + 0x6f0]>', '<mov~~qword ptr [rsp + 0x2c8], rdi>', '<lea~~rax, [rsp + 0x2f0]>', '<mov~~qword ptr [rsp + 0x2e0], rax>', '<add~~rcx, 0x38>', '<mov~~qword ptr [rsp + 0x2d0], rcx>', '<mov~~esi, 0x400>', '<lea~~rdx, [rip + 0x20f5]>', '<mov~~al, 0>', '<call~~0x500020>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x2d0]>', '<mov~~rdi, qword ptr [rsp + 0x2e0]>', '<mov~~esi, 0x400>', '<lea~~rdx, [rip + 0x20de]>', '<mov~~al, 0>', '<call~~0x500020>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x2d8]>', '<mov~~rsi, qword ptr [rsp + 0x2e0]>', '<add~~rcx, 0x4b0>', '<lea~~rdi, [rsp + 0xaf0]>', '<mov~~edx, 2>', '<xor~~eax, eax>', '<mov~~r8d, eax>', '<call~~0x5000c0>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x2e0]>', '<mov~~rdi, qword ptr [rsp + 0x2d8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x2091]>', '<mov~~al, 0>', '<call~~0x500018>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2ec], eax>', '<cmp~~eax, 0>', '<jge~~0x4011c2>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2ec]>', '<mov~~dword ptr [rsp + 0x2b8], eax>', '<jmp~~0x402065>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xaf0]>', '<lea~~rsi, [rip + 0x2087]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x2d8]>', '<mov~~rcx, rax>', '<add~~rcx, 0x2c>', '<mov~~qword ptr [rsp + 0x290], rcx>', '<mov~~edx, dword ptr [rax + 0x2c]>', '<mov~~dword ptr [rsp + 0x29c], edx>', '<xor~~eax, eax>', '<xor~~ecx, ecx>', '<cmp~~edx, 0>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x2a0], edx>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x2a4], edx>', '<mov~~qword ptr [rsp + 0x2a8], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x2b0], ecx>', '<mov~~dword ptr [rsp + 0x2b4], eax>', '<je~~0x4014ba>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2b8]>', '<add~~rsp, 0xaf8>', '<pop~~rbx>', '<pop~~r14>', '<ret~~>']}], 'cfg_edge_info': [(0, 1), (1, 2), (3, 4), (6, 8), (4, 6), (5, 7), (2, 3), (3, 5)]}, {'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402047>, <DisassemblerInsn "mov" for 0x40204f>, <DisassemblerInsn "call" for 0x402057>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402001>, <DisassemblerInsn "lea" for 0x402009>, <DisassemblerInsn "mov" for 0x402010>, <DisassemblerInsn "call" for 0x402012>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402017>, <DisassemblerInsn "lea" for 0x40201f>, <DisassemblerInsn "mov" for 0x402026>, <DisassemblerInsn "call" for 0x402028>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011af>, <DisassemblerInsn "mov" for 0x4011b6>, <DisassemblerInsn "jmp" for 0x4011bd>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40202d>, <DisassemblerInsn "call" for 0x402035>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401af3>, <DisassemblerInsn "cmp" for 0x401afb>, <DisassemblerInsn "je" for 0x401aff>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402065>, <DisassemblerInsn "add" for 0x40206c>, <DisassemblerInsn "pop" for 0x402073>, <DisassemblerInsn "pop" for 0x402074>, <DisassemblerInsn "ret" for 0x402076>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40203a>, <DisassemblerInsn "call" for 0x402042>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "xor" for 0x40205c>, <DisassemblerInsn "mov" for 0x40205e>, <DisassemblerInsn "mov" for 0x402065>, <DisassemblerInsn "add" for 0x40206c>, <DisassemblerInsn "pop" for 0x402073>, <DisassemblerInsn "pop" for 0x402074>, <DisassemblerInsn "ret" for 0x402076>]'}], 'cfg_block_detailed_info': [{'block_Idx': 38, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x2e0]>', '<mov~~rsi, qword ptr [rsp + 0x2c8]>', '<call~~0x5000d8>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xaf0]>', '<lea~~rsi, [rip + 0x13da]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xaf0]>', '<lea~~rsi, [rip + 0x14e9]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2ec]>', '<mov~~dword ptr [rsp + 0x2b8], eax>', '<jmp~~0x402065>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xaf0]>', '<call~~0x500058>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x2c0]>', '<cmp~~dword ptr [rax + 0x2c], 0>', '<je~~0x402017>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2b8]>', '<add~~rsp, 0xaf8>', '<pop~~rbx>', '<pop~~r14>', '<ret~~>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xaf0]>', '<call~~0x5000d0>']}, {'block_Idx': 46, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x2b8], eax>', '<mov~~eax, dword ptr [rsp + 0x2b8]>', '<add~~rsp, 0xaf8>', '<pop~~rbx>', '<pop~~r14>', '<ret~~>']}], 'cfg_edge_info': [(38, 46), (27, 31), (24, 27), (22, 24), (39, 24), (6, 8), (31, 38)]}]}
{'write_manifest': [4202519, 4202541, 4202554, 4202567, 4202588, 4202597]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_after/O3/smoothstreamingenc.o---after
The extraction of function: write_manifest
[4202519, 4202541, 4202554, 4202567, 4202588, 4202597]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 96 nodes and 155 edges in CFGEmulated.
It has 90 nodes and 117 edges in CDG.
It has 2915 nodes and 3622 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4202519, 4202541, 4202554, 4202567, 4202588, 4202597]
{4198784, 4202497, 4202241, 4199813, 4201221, 4199815, 4198796, 4202519, 4199962, 4201503, 4200993, 4201121, 4201382, 4199848, 4201257, 4202152, 4202541, 4200877, 4198831, 4198960, 4198703, 4199610, 4202554, 4199870, 4198592, 4198850, 4201924, 4202052, 4202567, 4200779, 4201295, 4199888, 4202449, 4198738, 4201811, 4198872, 4200536, 4200667, 4202588, 4201181, 4202597, 4202342, 4200423, 4200170, 4200049, 4201203, 4199924, 4199802}
[45, 46, 82, 48, 15, 65, 40, 66, 33, 0, 95, 49, 63, 43, 90, 79, 19, 11, 81, 2, 47, 69, 83, 12, 26, 4, 62, 92, 75, 22, 6, 41, 7, 85, 23, 32, 67, 55, 53, 44, 76, 18, 80, 17, 39, 77, 57, 52, 51, 91, 14, 84, 94, 8, 68, 64, 29, 24, 37, 38, 50, 13, 78, 21, 30, 31, 60, 93]
The execution time of patched slicing information extraction via angr: 0:03:03.042214
{'write_manifest': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401add>, <DisassemblerInsn "lea" for 0x401ae5>, <DisassemblerInsn "mov" for 0x401aec>, <DisassemblerInsn "call" for 0x401aee>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401858>, <DisassemblerInsn "mov" for 0x40185f>, <DisassemblerInsn "mov" for 0x401866>, <DisassemblerInsn "mov" for 0x40186e>, <DisassemblerInsn "mov" for 0x401876>, <DisassemblerInsn "mov" for 0x40187e>, <DisassemblerInsn "mov" for 0x401886>, <DisassemblerInsn "imul" for 0x401889>, <DisassemblerInsn "add" for 0x401890>, <DisassemblerInsn "add" for 0x401893>, <DisassemblerInsn "mov" for 0x40189a>, <DisassemblerInsn "xor" for 0x4018a2>, <DisassemblerInsn "test" for 0x4018a4>, <DisassemblerInsn "cmovne" for 0x4018a8>, <DisassemblerInsn "mov" for 0x4018ab>, <DisassemblerInsn "mov" for 0x4018b2>, <DisassemblerInsn "add" for 0x4018b4>, <DisassemblerInsn "mov" for 0x4018b6>, <DisassemblerInsn "sub" for 0x4018b8>, <DisassemblerInsn "xor" for 0x4018ba>, <DisassemblerInsn "cmp" for 0x4018bc>, <DisassemblerInsn "cmovg" for 0x4018bf>, <DisassemblerInsn "xor" for 0x4018c2>, <DisassemblerInsn "cmp" for 0x4018c4>, <DisassemblerInsn "cmove" for 0x4018c7>, <DisassemblerInsn "mov" for 0x4018ca>, <DisassemblerInsn "sub" for 0x4018d1>, <DisassemblerInsn "cmp" for 0x4018d3>, <DisassemblerInsn "jge" for 0x4018d5>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019de>, <DisassemblerInsn "mov" for 0x4019e6>, <DisassemblerInsn "mov" for 0x4019ee>, <DisassemblerInsn "mov" for 0x4019f6>, <DisassemblerInsn "mov" for 0x4019fe>, <DisassemblerInsn "mov" for 0x401a01>, <DisassemblerInsn "mov" for 0x401a05>, <DisassemblerInsn "mov" for 0x401a0c>, <DisassemblerInsn "lea" for 0x401a13>, <DisassemblerInsn "mov" for 0x401a1a>, <DisassemblerInsn "call" for 0x401a1c>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401795>, <DisassemblerInsn "mov" for 0x40179d>, <DisassemblerInsn "mov" for 0x4017a4>, <DisassemblerInsn "mov" for 0x4017ab>, <DisassemblerInsn "add" for 0x4017b2>, <DisassemblerInsn "mov" for 0x4017b6>, <DisassemblerInsn "cmp" for 0x4017b8>, <DisassemblerInsn "mov" for 0x4017bb>, <DisassemblerInsn "mov" for 0x4017c2>, <DisassemblerInsn "mov" for 0x4017ca>, <DisassemblerInsn "mov" for 0x4017d1>, <DisassemblerInsn "mov" for 0x4017d3>, <DisassemblerInsn "mov" for 0x4017da>, <DisassemblerInsn "jb" for 0x4017e1>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401230>, <DisassemblerInsn "mov" for 0x401237>, <DisassemblerInsn "mov" for 0x40123f>, <DisassemblerInsn "mov" for 0x401247>, <DisassemblerInsn "mov" for 0x40124b>, <DisassemblerInsn "mov" for 0x401253>, <DisassemblerInsn "mov" for 0x401257>, <DisassemblerInsn "mov" for 0x40125f>, <DisassemblerInsn "mov" for 0x401261>, <DisassemblerInsn "xor" for 0x401269>, <DisassemblerInsn "mov" for 0x40126b>, <DisassemblerInsn "xor" for 0x40126d>, <DisassemblerInsn "mov" for 0x40126f>, <DisassemblerInsn "mov" for 0x401272>, <DisassemblerInsn "mov" for 0x40127a>, <DisassemblerInsn "mov" for 0x40127c>, <DisassemblerInsn "mov" for 0x401283>, <DisassemblerInsn "mov" for 0x401285>, <DisassemblerInsn "mov" for 0x40128c>, <DisassemblerInsn "mov" for 0x401294>, <DisassemblerInsn "mov" for 0x401296>, <DisassemblerInsn "mov" for 0x40129d>, <DisassemblerInsn "mov" for 0x4012a4>, <DisassemblerInsn "mov" for 0x4012ac>, <DisassemblerInsn "mov" for 0x4012b4>, <DisassemblerInsn "mov" for 0x4012bb>, <DisassemblerInsn "mov" for 0x4012c2>, <DisassemblerInsn "mov" for 0x4012ca>, <DisassemblerInsn "mov" for 0x4012d2>, <DisassemblerInsn "mov" for 0x4012da>, <DisassemblerInsn "mov" for 0x4012e2>, <DisassemblerInsn "mov" for 0x4012ea>, <DisassemblerInsn "mov" for 0x4012f1>, <DisassemblerInsn "mov" for 0x4012f8>, <DisassemblerInsn "imul" for 0x401300>, <DisassemblerInsn "add" for 0x401307>, <DisassemblerInsn "add" for 0x40130a>, <DisassemblerInsn "mov" for 0x401311>, <DisassemblerInsn "mov" for 0x401313>, <DisassemblerInsn "cmp" for 0x40131a>, <DisassemblerInsn "mov" for 0x40131d>, <DisassemblerInsn "jle" for 0x401325>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401764>, <DisassemblerInsn "mov" for 0x40176c>, <DisassemblerInsn "mov" for 0x401774>, <DisassemblerInsn "add" for 0x40177b>, <DisassemblerInsn "mov" for 0x40177e>, <DisassemblerInsn "mov" for 0x401780>, <DisassemblerInsn "mov" for 0x401787>, <DisassemblerInsn "mov" for 0x40178e>, <DisassemblerInsn "mov" for 0x401795>, <DisassemblerInsn "mov" for 0x40179d>, <DisassemblerInsn "mov" for 0x4017a4>, <DisassemblerInsn "mov" for 0x4017ab>, <DisassemblerInsn "add" for 0x4017b2>, <DisassemblerInsn "mov" for 0x4017b6>, <DisassemblerInsn "cmp" for 0x4017b8>, <DisassemblerInsn "mov" for 0x4017bb>, <DisassemblerInsn "mov" for 0x4017c2>, <DisassemblerInsn "mov" for 0x4017ca>, <DisassemblerInsn "mov" for 0x4017d1>, <DisassemblerInsn "mov" for 0x4017d3>, <DisassemblerInsn "mov" for 0x4017da>, <DisassemblerInsn "jb" for 0x4017e1>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4017e7>, <DisassemblerInsn "mov" for 0x4017ef>, <DisassemblerInsn "mov" for 0x4017f7>, <DisassemblerInsn "mov" for 0x4017fe>, <DisassemblerInsn "mov" for 0x401802>, <DisassemblerInsn "movsxd" for 0x40180a>, <DisassemblerInsn "mov" for 0x40180d>, <DisassemblerInsn "mov" for 0x401815>, <DisassemblerInsn "mov" for 0x40181d>, <DisassemblerInsn "mov" for 0x401825>, <DisassemblerInsn "mov" for 0x401827>, <DisassemblerInsn "imul" for 0x40182e>, <DisassemblerInsn "add" for 0x401835>, <DisassemblerInsn "add" for 0x401838>, <DisassemblerInsn "mov" for 0x40183e>, <DisassemblerInsn "mov" for 0x401846>, <DisassemblerInsn "mov" for 0x401848>, <DisassemblerInsn "cmp" for 0x40184f>, <DisassemblerInsn "jl" for 0x401852>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402047>, <DisassemblerInsn "mov" for 0x40204f>, <DisassemblerInsn "call" for 0x402057>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b05>, <DisassemblerInsn "mov" for 0x401b0c>, <DisassemblerInsn "mov" for 0x401b13>, <DisassemblerInsn "lea" for 0x401b1b>, <DisassemblerInsn "mov" for 0x401b22>, <DisassemblerInsn "call" for 0x401b24>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x4010c0>, <DisassemblerInsn "push" for 0x4010c2>, <DisassemblerInsn "sub" for 0x4010c3>, <DisassemblerInsn "mov" for 0x4010ca>, <DisassemblerInsn "mov" for 0x4010d1>, <DisassemblerInsn "mov" for 0x4010d4>, <DisassemblerInsn "mov" for 0x4010dc>, <DisassemblerInsn "mov" for 0x4010e0>, <DisassemblerInsn "lea" for 0x4010e8>, <DisassemblerInsn "lea" for 0x4010f0>, <DisassemblerInsn "mov" for 0x4010f8>, <DisassemblerInsn "lea" for 0x401100>, <DisassemblerInsn "mov" for 0x401108>, <DisassemblerInsn "add" for 0x401110>, <DisassemblerInsn "mov" for 0x401114>, <DisassemblerInsn "mov" for 0x40111c>, <DisassemblerInsn "lea" for 0x401121>, <DisassemblerInsn "mov" for 0x401128>, <DisassemblerInsn "call" for 0x40112a>]'}, {'block_Idx': 95, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401f96>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40203a>, <DisassemblerInsn "call" for 0x402042>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401920>, <DisassemblerInsn "mov" for 0x401928>, <DisassemblerInsn "mov" for 0x401930>, <DisassemblerInsn "mov" for 0x401936>, <DisassemblerInsn "lea" for 0x40193d>, <DisassemblerInsn "mov" for 0x401944>, <DisassemblerInsn "call" for 0x401946>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d53>, <DisassemblerInsn "mov" for 0x401d5b>, <DisassemblerInsn "mov" for 0x401d63>, <DisassemblerInsn "mov" for 0x401d6a>, <DisassemblerInsn "mov" for 0x401d6e>, <DisassemblerInsn "movsxd" for 0x401d76>, <DisassemblerInsn "mov" for 0x401d79>, <DisassemblerInsn "mov" for 0x401d81>, <DisassemblerInsn "mov" for 0x401d89>, <DisassemblerInsn "mov" for 0x401d91>, <DisassemblerInsn "mov" for 0x401d93>, <DisassemblerInsn "imul" for 0x401d9a>, <DisassemblerInsn "add" for 0x401da1>, <DisassemblerInsn "add" for 0x401da4>, <DisassemblerInsn "mov" for 0x401daa>, <DisassemblerInsn "mov" for 0x401db2>, <DisassemblerInsn "mov" for 0x401db4>, <DisassemblerInsn "cmp" for 0x401dbb>, <DisassemblerInsn "jl" for 0x401dbe>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401aa1>, <DisassemblerInsn "mov" for 0x401aa9>, <DisassemblerInsn "mov" for 0x401ab0>, <DisassemblerInsn "add" for 0x401ab8>, <DisassemblerInsn "mov" for 0x401abc>, <DisassemblerInsn "mov" for 0x401ac4>, <DisassemblerInsn "sub" for 0x401ac6>, <DisassemblerInsn "mov" for 0x401ac8>, <DisassemblerInsn "mov" for 0x401acf>, <DisassemblerInsn "cmp" for 0x401ad1>, <DisassemblerInsn "mov" for 0x401ad3>, <DisassemblerInsn "jg" for 0x401adb>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f01>, <DisassemblerInsn "mov" for 0x401f09>, <DisassemblerInsn "mov" for 0x401f10>, <DisassemblerInsn "add" for 0x401f15>, <DisassemblerInsn "mov" for 0x401f19>, <DisassemblerInsn "sub" for 0x401f1b>, <DisassemblerInsn "mov" for 0x401f1d>, <DisassemblerInsn "cmp" for 0x401f1f>, <DisassemblerInsn "mov" for 0x401f21>, <DisassemblerInsn "jle" for 0x401f26>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40157a>, <DisassemblerInsn "test" for 0x401581>, <DisassemblerInsn "jne" for 0x401583>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011af>, <DisassemblerInsn "mov" for 0x4011b6>, <DisassemblerInsn "jmp" for 0x4011bd>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a5f>, <DisassemblerInsn "mov" for 0x401a67>, <DisassemblerInsn "mov" for 0x401a6f>, <DisassemblerInsn "mov" for 0x401a77>, <DisassemblerInsn "mov" for 0x401a7f>, <DisassemblerInsn "mov" for 0x401a82>, <DisassemblerInsn "mov" for 0x401a86>, <DisassemblerInsn "mov" for 0x401a8c>, <DisassemblerInsn "lea" for 0x401a93>, <DisassemblerInsn "mov" for 0x401a9a>, <DisassemblerInsn "call" for 0x401a9c>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40112f>, <DisassemblerInsn "mov" for 0x401137>, <DisassemblerInsn "mov" for 0x40113f>, <DisassemblerInsn "lea" for 0x401144>, <DisassemblerInsn "mov" for 0x40114b>, <DisassemblerInsn "call" for 0x40114d>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4016ea>, <DisassemblerInsn "mov" for 0x4016f2>, <DisassemblerInsn "mov" for 0x4016f9>, <DisassemblerInsn "mov" for 0x401701>, <DisassemblerInsn "mov" for 0x401709>, <DisassemblerInsn "mov" for 0x401711>, <DisassemblerInsn "imul" for 0x401715>, <DisassemblerInsn "mov" for 0x40171c>, <DisassemblerInsn "add" for 0x40171f>, <DisassemblerInsn "add" for 0x401722>, <DisassemblerInsn "mov" for 0x401729>, <DisassemblerInsn "mov" for 0x40172c>, <DisassemblerInsn "mov" for 0x401733>, <DisassemblerInsn "imul" for 0x40173a>, <DisassemblerInsn "add" for 0x401741>, <DisassemblerInsn "add" for 0x401744>, <DisassemblerInsn "mov" for 0x40174a>, <DisassemblerInsn "lea" for 0x40174d>, <DisassemblerInsn "mov" for 0x401754>, <DisassemblerInsn "mov" for 0x401758>, <DisassemblerInsn "mov" for 0x40175d>, <DisassemblerInsn "call" for 0x40175f>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401cd0>, <DisassemblerInsn "mov" for 0x401cd8>, <DisassemblerInsn "mov" for 0x401ce0>, <DisassemblerInsn "add" for 0x401ce7>, <DisassemblerInsn "mov" for 0x401cea>, <DisassemblerInsn "mov" for 0x401cec>, <DisassemblerInsn "mov" for 0x401cf3>, <DisassemblerInsn "mov" for 0x401cfa>, <DisassemblerInsn "mov" for 0x401d01>, <DisassemblerInsn "mov" for 0x401d09>, <DisassemblerInsn "mov" for 0x401d10>, <DisassemblerInsn "mov" for 0x401d17>, <DisassemblerInsn "add" for 0x401d1e>, <DisassemblerInsn "mov" for 0x401d22>, <DisassemblerInsn "cmp" for 0x401d24>, <DisassemblerInsn "mov" for 0x401d27>, <DisassemblerInsn "mov" for 0x401d2e>, <DisassemblerInsn "mov" for 0x401d36>, <DisassemblerInsn "mov" for 0x401d3d>, <DisassemblerInsn "mov" for 0x401d3f>, <DisassemblerInsn "mov" for 0x401d46>, <DisassemblerInsn "jb" for 0x401d4d>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401ed3>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011d8>, <DisassemblerInsn "mov" for 0x4011e0>, <DisassemblerInsn "add" for 0x4011e3>, <DisassemblerInsn "mov" for 0x4011e7>, <DisassemblerInsn "mov" for 0x4011ef>, <DisassemblerInsn "mov" for 0x4011f2>, <DisassemblerInsn "xor" for 0x4011f9>, <DisassemblerInsn "xor" for 0x4011fb>, <DisassemblerInsn "cmp" for 0x4011fd>, <DisassemblerInsn "mov" for 0x401200>, <DisassemblerInsn "mov" for 0x401202>, <DisassemblerInsn "mov" for 0x401209>, <DisassemblerInsn "mov" for 0x40120b>, <DisassemblerInsn "mov" for 0x401212>, <DisassemblerInsn "mov" for 0x40121a>, <DisassemblerInsn "mov" for 0x40121c>, <DisassemblerInsn "mov" for 0x401223>, <DisassemblerInsn "je" for 0x40122a>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4015a8>, <DisassemblerInsn "lea" for 0x4015b0>, <DisassemblerInsn "mov" for 0x4015b7>, <DisassemblerInsn "call" for 0x4015b9>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401152>, <DisassemblerInsn "mov" for 0x40115a>, <DisassemblerInsn "add" for 0x401162>, <DisassemblerInsn "lea" for 0x401169>, <DisassemblerInsn "mov" for 0x401171>, <DisassemblerInsn "xor" for 0x401176>, <DisassemblerInsn "mov" for 0x401178>, <DisassemblerInsn "call" for 0x40117b>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ba6>, <DisassemblerInsn "mov" for 0x401bae>, <DisassemblerInsn "mov" for 0x401bb6>, <DisassemblerInsn "mov" for 0x401bbd>, <DisassemblerInsn "mov" for 0x401bc5>, <DisassemblerInsn "mov" for 0x401bcc>, <DisassemblerInsn "mov" for 0x401bd3>, <DisassemblerInsn "mov" for 0x401bda>, <DisassemblerInsn "mov" for 0x401be2>, <DisassemblerInsn "mov" for 0x401be5>, <DisassemblerInsn "mov" for 0x401bed>, <DisassemblerInsn "mov" for 0x401bf0>, <DisassemblerInsn "mov" for 0x401bf4>, <DisassemblerInsn "mov" for 0x401bf8>, <DisassemblerInsn "cmp" for 0x401c00>, <DisassemblerInsn "mov" for 0x401c04>, <DisassemblerInsn "mov" for 0x401c0b>, <DisassemblerInsn "mov" for 0x401c12>, <DisassemblerInsn "jne" for 0x401c19>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fd1>, <DisassemblerInsn "mov" for 0x401fd9>, <DisassemblerInsn "mov" for 0x401fe0>, <DisassemblerInsn "add" for 0x401fe5>, <DisassemblerInsn "mov" for 0x401fe9>, <DisassemblerInsn "mov" for 0x401fee>, <DisassemblerInsn "sub" for 0x401ff0>, <DisassemblerInsn "mov" for 0x401ff2>, <DisassemblerInsn "mov" for 0x401ff6>, <DisassemblerInsn "cmp" for 0x401ff8>, <DisassemblerInsn "mov" for 0x401ffa>, <DisassemblerInsn "jg" for 0x401fff>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40194b>, <DisassemblerInsn "mov" for 0x401953>, <DisassemblerInsn "mov" for 0x40195a>, <DisassemblerInsn "add" for 0x401962>, <DisassemblerInsn "mov" for 0x401966>, <DisassemblerInsn "sub" for 0x401968>, <DisassemblerInsn "mov" for 0x40196a>, <DisassemblerInsn "cmp" for 0x40196c>, <DisassemblerInsn "mov" for 0x40196e>, <DisassemblerInsn "jg" for 0x401976>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401585>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401180>, <DisassemblerInsn "cmp" for 0x401187>, <DisassemblerInsn "jge" for 0x40118a>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40161a>, <DisassemblerInsn "mov" for 0x401621>, <DisassemblerInsn "mov" for 0x401629>, <DisassemblerInsn "add" for 0x401631>, <DisassemblerInsn "mov" for 0x401635>, <DisassemblerInsn "add" for 0x40163d>, <DisassemblerInsn "mov" for 0x401641>, <DisassemblerInsn "xor" for 0x401649>, <DisassemblerInsn "mov" for 0x40164b>, <DisassemblerInsn "xor" for 0x40164d>, <DisassemblerInsn "mov" for 0x40164f>, <DisassemblerInsn "mov" for 0x401654>, <DisassemblerInsn "mov" for 0x40165b>, <DisassemblerInsn "mov" for 0x401663>, <DisassemblerInsn "mov" for 0x40166a>, <DisassemblerInsn "mov" for 0x401671>, <DisassemblerInsn "mov" for 0x401679>, <DisassemblerInsn "mov" for 0x401681>, <DisassemblerInsn "mov" for 0x401688>, <DisassemblerInsn "mov" for 0x401690>, <DisassemblerInsn "mov" for 0x401697>, <DisassemblerInsn "mov" for 0x40169e>, <DisassemblerInsn "mov" for 0x4016a5>, <DisassemblerInsn "mov" for 0x4016ad>, <DisassemblerInsn "mov" for 0x4016b0>, <DisassemblerInsn "mov" for 0x4016b8>, <DisassemblerInsn "mov" for 0x4016bb>, <DisassemblerInsn "mov" for 0x4016bf>, <DisassemblerInsn "mov" for 0x4016c3>, <DisassemblerInsn "cmp" for 0x4016cb>, <DisassemblerInsn "mov" for 0x4016cf>, <DisassemblerInsn "mov" for 0x4016d6>, <DisassemblerInsn "mov" for 0x4016dd>, <DisassemblerInsn "jne" for 0x4016e4>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40118c>, <DisassemblerInsn "mov" for 0x401194>, <DisassemblerInsn "mov" for 0x40119c>, <DisassemblerInsn "lea" for 0x4011a1>, <DisassemblerInsn "mov" for 0x4011a8>, <DisassemblerInsn "call" for 0x4011aa>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f2c>, <DisassemblerInsn "mov" for 0x401f31>, <DisassemblerInsn "mov" for 0x401f39>, <DisassemblerInsn "mov" for 0x401f3e>, <DisassemblerInsn "mov" for 0x401f43>, <DisassemblerInsn "mov" for 0x401f46>, <DisassemblerInsn "mov" for 0x401f4a>, <DisassemblerInsn "mov" for 0x401f51>, <DisassemblerInsn "lea" for 0x401f58>, <DisassemblerInsn "mov" for 0x401f5f>, <DisassemblerInsn "call" for 0x401f61>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401587>, <DisassemblerInsn "mov" for 0x40158f>, <DisassemblerInsn "mov" for 0x401597>, <DisassemblerInsn "lea" for 0x40159a>, <DisassemblerInsn "mov" for 0x4015a1>, <DisassemblerInsn "call" for 0x4015a3>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402017>, <DisassemblerInsn "lea" for 0x40201f>, <DisassemblerInsn "mov" for 0x402026>, <DisassemblerInsn "call" for 0x402028>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e80>, <DisassemblerInsn "mov" for 0x401e88>, <DisassemblerInsn "mov" for 0x401e8d>, <DisassemblerInsn "mov" for 0x401e93>, <DisassemblerInsn "lea" for 0x401e9a>, <DisassemblerInsn "mov" for 0x401ea1>, <DisassemblerInsn "call" for 0x401ea3>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4018db>, <DisassemblerInsn "mov" for 0x4018e2>, <DisassemblerInsn "mov" for 0x4018e9>, <DisassemblerInsn "mov" for 0x4018f1>, <DisassemblerInsn "mov" for 0x4018f4>, <DisassemblerInsn "mov" for 0x4018f7>, <DisassemblerInsn "test" for 0x4018fd>, <DisassemblerInsn "setg" for 0x4018ff>, <DisassemblerInsn "or" for 0x401903>, <DisassemblerInsn "mov" for 0x401906>, <DisassemblerInsn "mov" for 0x401908>, <DisassemblerInsn "mov" for 0x401910>, <DisassemblerInsn "mov" for 0x401914>, <DisassemblerInsn "test" for 0x40191c>, <DisassemblerInsn "jne" for 0x40191e>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d01>, <DisassemblerInsn "mov" for 0x401d09>, <DisassemblerInsn "mov" for 0x401d10>, <DisassemblerInsn "mov" for 0x401d17>, <DisassemblerInsn "add" for 0x401d1e>, <DisassemblerInsn "mov" for 0x401d22>, <DisassemblerInsn "cmp" for 0x401d24>, <DisassemblerInsn "mov" for 0x401d27>, <DisassemblerInsn "mov" for 0x401d2e>, <DisassemblerInsn "mov" for 0x401d36>, <DisassemblerInsn "mov" for 0x401d3d>, <DisassemblerInsn "mov" for 0x401d3f>, <DisassemblerInsn "mov" for 0x401d46>, <DisassemblerInsn "jb" for 0x401d4d>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b4f>, <DisassemblerInsn "mov" for 0x401b56>, <DisassemblerInsn "mov" for 0x401b5e>, <DisassemblerInsn "add" for 0x401b66>, <DisassemblerInsn "mov" for 0x401b6a>, <DisassemblerInsn "add" for 0x401b72>, <DisassemblerInsn "mov" for 0x401b76>, <DisassemblerInsn "xor" for 0x401b7e>, <DisassemblerInsn "mov" for 0x401b80>, <DisassemblerInsn "xor" for 0x401b82>, <DisassemblerInsn "mov" for 0x401b84>, <DisassemblerInsn "mov" for 0x401b89>, <DisassemblerInsn "mov" for 0x401b90>, <DisassemblerInsn "mov" for 0x401b98>, <DisassemblerInsn "mov" for 0x401b9f>, <DisassemblerInsn "mov" for 0x401ba6>, <DisassemblerInsn "mov" for 0x401bae>, <DisassemblerInsn "mov" for 0x401bb6>, <DisassemblerInsn "mov" for 0x401bbd>, <DisassemblerInsn "mov" for 0x401bc5>, <DisassemblerInsn "mov" for 0x401bcc>, <DisassemblerInsn "mov" for 0x401bd3>, <DisassemblerInsn "mov" for 0x401bda>, <DisassemblerInsn "mov" for 0x401be2>, <DisassemblerInsn "mov" for 0x401be5>, <DisassemblerInsn "mov" for 0x401bed>, <DisassemblerInsn "mov" for 0x401bf0>, <DisassemblerInsn "mov" for 0x401bf4>, <DisassemblerInsn "mov" for 0x401bf8>, <DisassemblerInsn "cmp" for 0x401c00>, <DisassemblerInsn "mov" for 0x401c04>, <DisassemblerInsn "mov" for 0x401c0b>, <DisassemblerInsn "mov" for 0x401c12>, <DisassemblerInsn "jne" for 0x401c19>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019ad>, <DisassemblerInsn "mov" for 0x4019b5>, <DisassemblerInsn "mov" for 0x4019bc>, <DisassemblerInsn "add" for 0x4019c4>, <DisassemblerInsn "mov" for 0x4019c8>, <DisassemblerInsn "sub" for 0x4019ca>, <DisassemblerInsn "mov" for 0x4019cc>, <DisassemblerInsn "cmp" for 0x4019ce>, <DisassemblerInsn "mov" for 0x4019d0>, <DisassemblerInsn "jle" for 0x4019d8>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401327>, <DisassemblerInsn "mov" for 0x40132e>, <DisassemblerInsn "mov" for 0x401336>, <DisassemblerInsn "imul" for 0x40133e>, <DisassemblerInsn "add" for 0x401345>, <DisassemblerInsn "add" for 0x401348>, <DisassemblerInsn "mov" for 0x40134e>, <DisassemblerInsn "add" for 0x401351>, <DisassemblerInsn "mov" for 0x401354>, <DisassemblerInsn "mov" for 0x401356>, <DisassemblerInsn "mov" for 0x40135a>, <DisassemblerInsn "add" for 0x401361>, <DisassemblerInsn "mov" for 0x401368>, <DisassemblerInsn "mov" for 0x401370>, <DisassemblerInsn "mov" for 0x401378>, <DisassemblerInsn "mov" for 0x401380>, <DisassemblerInsn "mov" for 0x401388>, <DisassemblerInsn "mov" for 0x401390>, <DisassemblerInsn "mov" for 0x401394>, <DisassemblerInsn "cmp" for 0x401398>, <DisassemblerInsn "jne" for 0x40139c>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40197c>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401370>, <DisassemblerInsn "mov" for 0x401378>, <DisassemblerInsn "mov" for 0x401380>, <DisassemblerInsn "mov" for 0x401388>, <DisassemblerInsn "mov" for 0x401390>, <DisassemblerInsn "mov" for 0x401394>, <DisassemblerInsn "cmp" for 0x401398>, <DisassemblerInsn "jne" for 0x40139c>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b29>, <DisassemblerInsn "mov" for 0x401b31>, <DisassemblerInsn "mov" for 0x401b33>, <DisassemblerInsn "mov" for 0x401b3a>, <DisassemblerInsn "cmp" for 0x401b3f>, <DisassemblerInsn "mov" for 0x401b42>, <DisassemblerInsn "je" for 0x401b49>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "xor" for 0x40205c>, <DisassemblerInsn "mov" for 0x40205e>, <DisassemblerInsn "mov" for 0x402065>, <DisassemblerInsn "add" for 0x40206c>, <DisassemblerInsn "pop" for 0x402073>, <DisassemblerInsn "pop" for 0x402074>, <DisassemblerInsn "ret" for 0x402076>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401671>, <DisassemblerInsn "mov" for 0x401679>, <DisassemblerInsn "mov" for 0x401681>, <DisassemblerInsn "mov" for 0x401688>, <DisassemblerInsn "mov" for 0x401690>, <DisassemblerInsn "mov" for 0x401697>, <DisassemblerInsn "mov" for 0x40169e>, <DisassemblerInsn "mov" for 0x4016a5>, <DisassemblerInsn "mov" for 0x4016ad>, <DisassemblerInsn "mov" for 0x4016b0>, <DisassemblerInsn "mov" for 0x4016b8>, <DisassemblerInsn "mov" for 0x4016bb>, <DisassemblerInsn "mov" for 0x4016bf>, <DisassemblerInsn "mov" for 0x4016c3>, <DisassemblerInsn "cmp" for 0x4016cb>, <DisassemblerInsn "mov" for 0x4016cf>, <DisassemblerInsn "mov" for 0x4016d6>, <DisassemblerInsn "mov" for 0x4016dd>, <DisassemblerInsn "jne" for 0x4016e4>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c1f>, <DisassemblerInsn "mov" for 0x401c27>, <DisassemblerInsn "mov" for 0x401c2e>, <DisassemblerInsn "mov" for 0x401c36>, <DisassemblerInsn "mov" for 0x401c3e>, <DisassemblerInsn "mov" for 0x401c46>, <DisassemblerInsn "imul" for 0x401c4a>, <DisassemblerInsn "mov" for 0x401c51>, <DisassemblerInsn "add" for 0x401c54>, <DisassemblerInsn "add" for 0x401c57>, <DisassemblerInsn "mov" for 0x401c5e>, <DisassemblerInsn "mov" for 0x401c61>, <DisassemblerInsn "mov" for 0x401c68>, <DisassemblerInsn "imul" for 0x401c6f>, <DisassemblerInsn "mov" for 0x401c76>, <DisassemblerInsn "add" for 0x401c79>, <DisassemblerInsn "add" for 0x401c7c>, <DisassemblerInsn "mov" for 0x401c83>, <DisassemblerInsn "imul" for 0x401c86>, <DisassemblerInsn "mov" for 0x401c8d>, <DisassemblerInsn "add" for 0x401c90>, <DisassemblerInsn "add" for 0x401c93>, <DisassemblerInsn "mov" for 0x401c9a>, <DisassemblerInsn "imul" for 0x401c9d>, <DisassemblerInsn "add" for 0x401ca4>, <DisassemblerInsn "add" for 0x401ca7>, <DisassemblerInsn "mov" for 0x401cad>, <DisassemblerInsn "lea" for 0x401cb0>, <DisassemblerInsn "mov" for 0x401cb7>, <DisassemblerInsn "mov" for 0x401cba>, <DisassemblerInsn "mov" for 0x401cbf>, <DisassemblerInsn "mov" for 0x401cc4>, <DisassemblerInsn "mov" for 0x401cc9>, <DisassemblerInsn "call" for 0x401ccb>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401dc4>, <DisassemblerInsn "mov" for 0x401dcb>, <DisassemblerInsn "mov" for 0x401dd2>, <DisassemblerInsn "mov" for 0x401dda>, <DisassemblerInsn "mov" for 0x401de2>, <DisassemblerInsn "mov" for 0x401dea>, <DisassemblerInsn "mov" for 0x401df2>, <DisassemblerInsn "imul" for 0x401df5>, <DisassemblerInsn "add" for 0x401dfc>, <DisassemblerInsn "add" for 0x401dff>, <DisassemblerInsn "mov" for 0x401e06>, <DisassemblerInsn "xor" for 0x401e0b>, <DisassemblerInsn "test" for 0x401e0d>, <DisassemblerInsn "cmovne" for 0x401e11>, <DisassemblerInsn "mov" for 0x401e14>, <DisassemblerInsn "mov" for 0x401e1b>, <DisassemblerInsn "add" for 0x401e1d>, <DisassemblerInsn "mov" for 0x401e1f>, <DisassemblerInsn "sub" for 0x401e21>, <DisassemblerInsn "xor" for 0x401e23>, <DisassemblerInsn "cmp" for 0x401e25>, <DisassemblerInsn "cmovg" for 0x401e28>, <DisassemblerInsn "xor" for 0x401e2b>, <DisassemblerInsn "cmp" for 0x401e2d>, <DisassemblerInsn "cmove" for 0x401e30>, <DisassemblerInsn "mov" for 0x401e33>, <DisassemblerInsn "sub" for 0x401e3a>, <DisassemblerInsn "cmp" for 0x401e3c>, <DisassemblerInsn "jge" for 0x401e3e>]'}, {'block_Idx': 91, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a21>, <DisassemblerInsn "mov" for 0x401a29>, <DisassemblerInsn "mov" for 0x401a30>, <DisassemblerInsn "add" for 0x401a38>, <DisassemblerInsn "mov" for 0x401a3c>, <DisassemblerInsn "mov" for 0x401a44>, <DisassemblerInsn "sub" for 0x401a46>, <DisassemblerInsn "mov" for 0x401a48>, <DisassemblerInsn "mov" for 0x401a4f>, <DisassemblerInsn "cmp" for 0x401a51>, <DisassemblerInsn "mov" for 0x401a53>, <DisassemblerInsn "jg" for 0x401a5b>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4014ba>, <DisassemblerInsn "mov" for 0x4014c2>, <DisassemblerInsn "mov" for 0x4014c9>, <DisassemblerInsn "mov" for 0x4014d0>, <DisassemblerInsn "mov" for 0x4014d8>, <DisassemblerInsn "mov" for 0x4014e0>, <DisassemblerInsn "mov" for 0x4014e8>, <DisassemblerInsn "mov" for 0x4014ef>, <DisassemblerInsn "mov" for 0x4014f7>, <DisassemblerInsn "cmp" for 0x4014fe>, <DisassemblerInsn "sete" for 0x401501>, <DisassemblerInsn "mov" for 0x401505>, <DisassemblerInsn "xor" for 0x40150d>, <DisassemblerInsn "cmp" for 0x40150f>, <DisassemblerInsn "cmove" for 0x401512>, <DisassemblerInsn "xor" for 0x401516>, <DisassemblerInsn "cmp" for 0x401518>, <DisassemblerInsn "cmove" for 0x40151b>, <DisassemblerInsn "xor" for 0x40151f>, <DisassemblerInsn "cmp" for 0x401521>, <DisassemblerInsn "cmove" for 0x401524>, <DisassemblerInsn "mov" for 0x401527>, <DisassemblerInsn "add" for 0x40152a>, <DisassemblerInsn "mov" for 0x40152e>, <DisassemblerInsn "mov" for 0x401536>, <DisassemblerInsn "cmp" for 0x401539>, <DisassemblerInsn "mov" for 0x40153b>, <DisassemblerInsn "cmovg" for 0x40153d>, <DisassemblerInsn "cmp" for 0x401540>, <DisassemblerInsn "mov" for 0x401543>, <DisassemblerInsn "cmovg" for 0x401546>, <DisassemblerInsn "cmp" for 0x401549>, <DisassemblerInsn "cmove" for 0x40154c>, <DisassemblerInsn "mov" for 0x401550>, <DisassemblerInsn "cmp" for 0x401557>, <DisassemblerInsn "cmove" for 0x40155a>, <DisassemblerInsn "mov" for 0x40155d>, <DisassemblerInsn "mov" for 0x401564>, <DisassemblerInsn "lea" for 0x40156c>, <DisassemblerInsn "mov" for 0x401573>, <DisassemblerInsn "call" for 0x401575>]'}, {'block_Idx': 84, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f98>, <DisassemblerInsn "mov" for 0x401f9d>, <DisassemblerInsn "mov" for 0x401fa5>, <DisassemblerInsn "mov" for 0x401faa>, <DisassemblerInsn "mov" for 0x401faf>, <DisassemblerInsn "mov" for 0x401fb2>, <DisassemblerInsn "mov" for 0x401fb6>, <DisassemblerInsn "mov" for 0x401fbc>, <DisassemblerInsn "lea" for 0x401fc3>, <DisassemblerInsn "mov" for 0x401fca>, <DisassemblerInsn "call" for 0x401fcc>]'}, {'block_Idx': 94, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401a5d>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011c2>, <DisassemblerInsn "lea" for 0x4011ca>, <DisassemblerInsn "mov" for 0x4011d1>, <DisassemblerInsn "call" for 0x4011d3>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ed8>, <DisassemblerInsn "mov" for 0x401ee0>, <DisassemblerInsn "mov" for 0x401ee5>, <DisassemblerInsn "mov" for 0x401eec>, <DisassemblerInsn "lea" for 0x401ef3>, <DisassemblerInsn "mov" for 0x401efa>, <DisassemblerInsn "call" for 0x401efc>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401981>, <DisassemblerInsn "mov" for 0x401989>, <DisassemblerInsn "mov" for 0x401991>, <DisassemblerInsn "mov" for 0x401998>, <DisassemblerInsn "lea" for 0x40199f>, <DisassemblerInsn "mov" for 0x4019a6>, <DisassemblerInsn "call" for 0x4019a8>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4015be>, <DisassemblerInsn "cmp" for 0x4015c6>, <DisassemblerInsn "je" for 0x4015ca>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401416>, <DisassemblerInsn "mov" for 0x40141e>, <DisassemblerInsn "mov" for 0x401426>, <DisassemblerInsn "mov" for 0x40142e>, <DisassemblerInsn "mov" for 0x401435>, <DisassemblerInsn "mov" for 0x40143c>, <DisassemblerInsn "mov" for 0x401443>, <DisassemblerInsn "add" for 0x40144a>, <DisassemblerInsn "cmp" for 0x40144e>, <DisassemblerInsn "mov" for 0x401451>, <DisassemblerInsn "mov" for 0x401459>, <DisassemblerInsn "mov" for 0x40145c>, <DisassemblerInsn "mov" for 0x401464>, <DisassemblerInsn "mov" for 0x401467>, <DisassemblerInsn "mov" for 0x40146f>, <DisassemblerInsn "mov" for 0x401472>, <DisassemblerInsn "mov" for 0x40147a>, <DisassemblerInsn "mov" for 0x40147d>, <DisassemblerInsn "mov" for 0x401485>, <DisassemblerInsn "mov" for 0x401488>, <DisassemblerInsn "mov" for 0x401490>, <DisassemblerInsn "mov" for 0x401497>, <DisassemblerInsn "mov" for 0x40149e>, <DisassemblerInsn "mov" for 0x4014a6>, <DisassemblerInsn "mov" for 0x4014ad>, <DisassemblerInsn "jne" for 0x4014b4>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4015f4>, <DisassemblerInsn "mov" for 0x4015fc>, <DisassemblerInsn "mov" for 0x4015fe>, <DisassemblerInsn "mov" for 0x401605>, <DisassemblerInsn "cmp" for 0x40160a>, <DisassemblerInsn "mov" for 0x40160d>, <DisassemblerInsn "je" for 0x401614>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40202d>, <DisassemblerInsn "call" for 0x402035>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402001>, <DisassemblerInsn "lea" for 0x402009>, <DisassemblerInsn "mov" for 0x402010>, <DisassemblerInsn "call" for 0x402012>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402065>, <DisassemblerInsn "add" for 0x40206c>, <DisassemblerInsn "pop" for 0x402073>, <DisassemblerInsn "pop" for 0x402074>, <DisassemblerInsn "ret" for 0x402076>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ea8>, <DisassemblerInsn "mov" for 0x401eb0>, <DisassemblerInsn "mov" for 0x401eb7>, <DisassemblerInsn "add" for 0x401ebc>, <DisassemblerInsn "mov" for 0x401ec0>, <DisassemblerInsn "sub" for 0x401ec2>, <DisassemblerInsn "mov" for 0x401ec4>, <DisassemblerInsn "cmp" for 0x401ec6>, <DisassemblerInsn "mov" for 0x401ec8>, <DisassemblerInsn "jg" for 0x401ecd>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4013db>, <DisassemblerInsn "mov" for 0x4013e2>, <DisassemblerInsn "mov" for 0x4013e9>, <DisassemblerInsn "mov" for 0x4013f0>, <DisassemblerInsn "add" for 0x4013f7>, <DisassemblerInsn "mov" for 0x4013fa>, <DisassemblerInsn "mov" for 0x401401>, <DisassemblerInsn "mov" for 0x401408>, <DisassemblerInsn "mov" for 0x40140f>, <DisassemblerInsn "mov" for 0x401416>, <DisassemblerInsn "mov" for 0x40141e>, <DisassemblerInsn "mov" for 0x401426>, <DisassemblerInsn "mov" for 0x40142e>, <DisassemblerInsn "mov" for 0x401435>, <DisassemblerInsn "mov" for 0x40143c>, <DisassemblerInsn "mov" for 0x401443>, <DisassemblerInsn "add" for 0x40144a>, <DisassemblerInsn "cmp" for 0x40144e>, <DisassemblerInsn "mov" for 0x401451>, <DisassemblerInsn "mov" for 0x401459>, <DisassemblerInsn "mov" for 0x40145c>, <DisassemblerInsn "mov" for 0x401464>, <DisassemblerInsn "mov" for 0x401467>, <DisassemblerInsn "mov" for 0x40146f>, <DisassemblerInsn "mov" for 0x401472>, <DisassemblerInsn "mov" for 0x40147a>, <DisassemblerInsn "mov" for 0x40147d>, <DisassemblerInsn "mov" for 0x401485>, <DisassemblerInsn "mov" for 0x401488>, <DisassemblerInsn "mov" for 0x401490>, <DisassemblerInsn "mov" for 0x401497>, <DisassemblerInsn "mov" for 0x40149e>, <DisassemblerInsn "mov" for 0x4014a6>, <DisassemblerInsn "mov" for 0x4014ad>, <DisassemblerInsn "jne" for 0x4014b4>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401af3>, <DisassemblerInsn "cmp" for 0x401afb>, <DisassemblerInsn "je" for 0x401aff>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4015d0>, <DisassemblerInsn "mov" for 0x4015d7>, <DisassemblerInsn "mov" for 0x4015de>, <DisassemblerInsn "lea" for 0x4015e6>, <DisassemblerInsn "mov" for 0x4015ed>, <DisassemblerInsn "call" for 0x4015ef>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e44>, <DisassemblerInsn "mov" for 0x401e4b>, <DisassemblerInsn "mov" for 0x401e52>, <DisassemblerInsn "mov" for 0x401e57>, <DisassemblerInsn "mov" for 0x401e5a>, <DisassemblerInsn "mov" for 0x401e5d>, <DisassemblerInsn "test" for 0x401e63>, <DisassemblerInsn "setg" for 0x401e65>, <DisassemblerInsn "or" for 0x401e69>, <DisassemblerInsn "mov" for 0x401e6c>, <DisassemblerInsn "mov" for 0x401e6e>, <DisassemblerInsn "mov" for 0x401e73>, <DisassemblerInsn "mov" for 0x401e77>, <DisassemblerInsn "test" for 0x401e7c>, <DisassemblerInsn "jne" for 0x401e7e>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f66>, <DisassemblerInsn "mov" for 0x401f6e>, <DisassemblerInsn "mov" for 0x401f75>, <DisassemblerInsn "add" for 0x401f7a>, <DisassemblerInsn "mov" for 0x401f7e>, <DisassemblerInsn "mov" for 0x401f83>, <DisassemblerInsn "sub" for 0x401f85>, <DisassemblerInsn "mov" for 0x401f87>, <DisassemblerInsn "mov" for 0x401f8b>, <DisassemblerInsn "cmp" for 0x401f8d>, <DisassemblerInsn "mov" for 0x401f8f>, <DisassemblerInsn "jg" for 0x401f94>]'}], 'cfg_block_detailed_info': [{'block_Idx': 45, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xaf0]>', '<lea~~rsi, [rip + 0x18fe]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x198]>', '<mov~~edi, dword ptr [rsp + 0x18c]>', '<mov~~sil, byte ptr [rsp + 0x217]>', '<mov~~rdx, qword ptr [rsp + 0x170]>', '<mov~~r8, qword ptr [rsp + 0x178]>', '<mov~~rax, qword ptr [rsp + 0x2c0]>', '<mov~~eax, dword ptr [rax + 0x10]>', '<imul~~r8, r8, 0x8480>', '<add~~rdx, r8>', '<add~~rdx, 0x8460>', '<mov~~qword ptr [rsp + 0x160], rdx>', '<xor~~edx, edx>', '<test~~sil, 1>', '<cmovne~~edx, eax>', '<mov~~dword ptr [rsp + 0x168], edx>', '<mov~~eax, edi>', '<add~~eax, edx>', '<mov~~esi, ecx>', '<sub~~esi, eax>', '<xor~~eax, eax>', '<cmp~~esi, 0>', '<cmovg~~eax, esi>', '<xor~~esi, esi>', '<cmp~~edi, 0>', '<cmove~~eax, esi>', '<mov~~dword ptr [rsp + 0x16c], eax>', '<sub~~ecx, edx>', '<cmp~~eax, ecx>', '<jge~~0x401add>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x140]>', '<mov~~rdi, qword ptr [rsp + 0x180]>', '<mov~~rax, qword ptr [rsp + 0x160]>', '<mov~~qword ptr [rsp + 0x128], rcx>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~rdx, qword ptr [rax + 0x800]>', '<mov~~rcx, qword ptr [rax + 0x808]>', '<lea~~rsi, [rip + 0x1b0e]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x1a0]>', '<mov~~esi, dword ptr [rsp + 0x1bc]>', '<mov~~eax, dword ptr [rsp + 0x1c0]>', '<mov~~ecx, dword ptr [rsp + 0x1c4]>', '<add~~rdx, 1>', '<mov~~edi, esi>', '<cmp~~rdx, rdi>', '<mov~~dword ptr [rsp + 0x1dc], esi>', '<mov~~qword ptr [rsp + 0x1e0], rdx>', '<mov~~dword ptr [rsp + 0x1e8], ecx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x1ec], ecx>', '<mov~~dword ptr [rsp + 0x1f4], eax>', '<jb~~0x401671>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x29c]>', '<mov~~rcx, qword ptr [rsp + 0x2d8]>', '<mov~~rdx, qword ptr [rsp + 0x2c0]>', '<mov~~rdx, qword ptr [rdx + 0x20]>', '<mov~~qword ptr [rsp + 0x258], rdx>', '<mov~~rcx, qword ptr [rcx + 0x30]>', '<mov~~qword ptr [rsp + 0x260], rcx>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x268], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~rdx, rcx>', '<mov~~qword ptr [rsp + 0x270], rdx>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x278], edx>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x27c], edx>', '<mov~~qword ptr [rsp + 0x280], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x288], ecx>', '<mov~~dword ptr [rsp + 0x28c], eax>', '<mov~~rcx, qword ptr [rsp + 0x258]>', '<mov~~rdx, qword ptr [rsp + 0x270]>', '<mov~~esi, dword ptr [rsp + 0x278]>', '<mov~~edi, dword ptr [rsp + 0x27c]>', '<mov~~rax, qword ptr [rsp + 0x280]>', '<mov~~r8d, dword ptr [rsp + 0x288]>', '<mov~~r9d, dword ptr [rsp + 0x28c]>', '<mov~~dword ptr [rsp + 0x230], r9d>', '<mov~~dword ptr [rsp + 0x234], r8d>', '<mov~~dword ptr [rsp + 0x238], edi>', '<mov~~dword ptr [rsp + 0x23c], esi>', '<mov~~qword ptr [rsp + 0x240], rdx>', '<imul~~rdx, rdx, 0x8480>', '<add~~rcx, rdx>', '<add~~rcx, 0x8450>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x24c], ecx>', '<cmp~~ecx, 0>', '<mov~~qword ptr [rsp + 0x250], rax>', '<jle~~0x401370>']}, {'block_Idx': 65, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1a0]>', '<mov~~rdx, qword ptr [rsp + 0x290]>', '<mov~~eax, dword ptr [rsp + 0x19c]>', '<add~~eax, 1>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0x1bc], edx>', '<mov~~dword ptr [rsp + 0x1c0], ecx>', '<mov~~dword ptr [rsp + 0x1c4], eax>', '<mov~~rdx, qword ptr [rsp + 0x1a0]>', '<mov~~esi, dword ptr [rsp + 0x1bc]>', '<mov~~eax, dword ptr [rsp + 0x1c0]>', '<mov~~ecx, dword ptr [rsp + 0x1c4]>', '<add~~rdx, 1>', '<mov~~edi, esi>', '<cmp~~rdx, rdi>', '<mov~~dword ptr [rsp + 0x1dc], esi>', '<mov~~qword ptr [rsp + 0x1e0], rdx>', '<mov~~dword ptr [rsp + 0x1e8], ecx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x1ec], ecx>', '<mov~~dword ptr [rsp + 0x1f4], eax>', '<jb~~0x401671>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x200]>', '<mov~~rax, qword ptr [rsp + 0x2c0]>', '<mov~~ecx, dword ptr [rsp + 0x1f4]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<mov~~qword ptr [rsp + 0x170], rax>', '<movsxd~~rcx, ecx>', '<mov~~qword ptr [rsp + 0x178], rcx>', '<mov~~rsi, qword ptr [rsp + 0xaf0]>', '<mov~~qword ptr [rsp + 0x180], rsi>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0x18c], edx>', '<imul~~rcx, rcx, 0x8480>', '<add~~rax, rcx>', '<add~~rax, 0x8450>', '<mov~~qword ptr [rsp + 0x190], rax>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x198], eax>', '<cmp~~eax, 1>', '<jl~~0x401add>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x2e0]>', '<mov~~rsi, qword ptr [rsp + 0x2c8]>', '<call~~0x5000d8>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x20c]>', '<mov~~edx, dword ptr [rsp + 0x1f8]>', '<mov~~rdi, qword ptr [rsp + 0xaf0]>', '<lea~~rsi, [rip + 0x18d8]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 0, 'blockInsts': ['<push~~r14>', '<push~~rbx>', '<sub~~rsp, 0xaf8>', '<mov~~dword ptr [rsp + 0x2bc], esi>', '<mov~~rcx, rdi>', '<mov~~qword ptr [rsp + 0x2d8], rcx>', '<mov~~rax, qword ptr [rcx + 0x18]>', '<mov~~qword ptr [rsp + 0x2c0], rax>', '<lea~~rax, [rsp + 0xaf0]>', '<lea~~rdi, [rsp + 0x6f0]>', '<mov~~qword ptr [rsp + 0x2c8], rdi>', '<lea~~rax, [rsp + 0x2f0]>', '<mov~~qword ptr [rsp + 0x2e0], rax>', '<add~~rcx, 0x38>', '<mov~~qword ptr [rsp + 0x2d0], rcx>', '<mov~~esi, 0x400>', '<lea~~rdx, [rip + 0x20f5]>', '<mov~~al, 0>', '<call~~0x500020>']}, {'block_Idx': 95, 'blockInsts': ['<jmp~~0x402001>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xaf0]>', '<call~~0x5000d0>']}, {'block_Idx': 63, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x180]>', '<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~edx, dword ptr [rax + 0x810]>', '<mov~~rcx, qword ptr [rax + 0x808]>', '<lea~~rsi, [rip + 0x1bfb]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x200]>', '<mov~~rax, qword ptr [rsp + 0x2c0]>', '<mov~~ecx, dword ptr [rsp + 0x10c]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<mov~~qword ptr [rsp + 0x88], rax>', '<movsxd~~rcx, ecx>', '<mov~~qword ptr [rsp + 0x90], rcx>', '<mov~~rsi, qword ptr [rsp + 0xaf0]>', '<mov~~qword ptr [rsp + 0x98], rsi>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0xa4], edx>', '<imul~~rcx, rcx, 0x8480>', '<add~~rax, rcx>', '<add~~rax, 0x8450>', '<mov~~qword ptr [rsp + 0xa8], rax>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0xb0], eax>', '<cmp~~eax, 1>', '<jl~~0x402001>']}, {'block_Idx': 90, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x190]>', '<mov~~edx, dword ptr [rsp + 0x168]>', '<mov~~rax, qword ptr [rsp + 0x110]>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x118], rax>', '<mov~~ecx, dword ptr [rcx]>', '<sub~~ecx, edx>', '<mov~~dword ptr [rsp + 0x124], ecx>', '<mov~~edx, eax>', '<cmp~~ecx, edx>', '<mov~~qword ptr [rsp + 0x148], rax>', '<jg~~0x401a5f>']}, {'block_Idx': 79, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xa8]>', '<mov~~edx, dword ptr [rsp + 0x80]>', '<mov~~rax, qword ptr [rsp + 0x68]>', '<add~~rax, 1>', '<mov~~ecx, dword ptr [rcx]>', '<sub~~ecx, edx>', '<mov~~edx, eax>', '<cmp~~ecx, edx>', '<mov~~qword ptr [rsp + 0x58], rax>', '<jle~~0x402001>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x217]>', '<test~~al, 1>', '<jne~~0x401587>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2ec]>', '<mov~~dword ptr [rsp + 0x2b8], eax>', '<jmp~~0x402065>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x148]>', '<mov~~rdi, qword ptr [rsp + 0x180]>', '<mov~~rax, qword ptr [rsp + 0x160]>', '<mov~~qword ptr [rsp + 0x110], rcx>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~edx, dword ptr [rax + 0x810]>', '<mov~~rcx, qword ptr [rax + 0x808]>', '<lea~~rsi, [rip + 0x1aa5]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x2d0]>', '<mov~~rdi, qword ptr [rsp + 0x2e0]>', '<mov~~esi, 0x400>', '<lea~~rdx, [rip + 0x20de]>', '<mov~~al, 0>', '<call~~0x500020>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x1a0]>', '<mov~~edx, dword ptr [rsp + 0x19c]>', '<mov~~rax, qword ptr [rsp + 0x1a8]>', '<mov~~r10, qword ptr [rsp + 0x1b0]>', '<mov~~rdi, qword ptr [rsp + 0xaf0]>', '<mov~~ecx, dword ptr [r10 + 0x60]>', '<imul~~r9, rsi, 0x8480>', '<mov~~r8, rax>', '<add~~r8, r9>', '<add~~r8, 0x8468>', '<mov~~r8, qword ptr [r8]>', '<mov~~r9d, dword ptr [r10 + 0x94]>', '<mov~~r10d, dword ptr [r10 + 0x98]>', '<imul~~rsi, rsi, 0x8480>', '<add~~rax, rsi>', '<add~~rax, 0x8470>', '<mov~~rax, qword ptr [rax]>', '<lea~~rsi, [rip + 0x1c2d]>', '<mov~~dword ptr [rsp], r10d>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 69, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xb8]>', '<mov~~rdx, qword ptr [rsp + 0x290]>', '<mov~~eax, dword ptr [rsp + 0xb4]>', '<add~~eax, 1>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0xd4], edx>', '<mov~~dword ptr [rsp + 0xd8], ecx>', '<mov~~dword ptr [rsp + 0xdc], eax>', '<mov~~rdx, qword ptr [rsp + 0xb8]>', '<mov~~esi, dword ptr [rsp + 0xd4]>', '<mov~~eax, dword ptr [rsp + 0xd8]>', '<mov~~ecx, dword ptr [rsp + 0xdc]>', '<add~~rdx, 1>', '<mov~~edi, esi>', '<cmp~~rdx, rdi>', '<mov~~dword ptr [rsp + 0xf4], esi>', '<mov~~qword ptr [rsp + 0xf8], rdx>', '<mov~~dword ptr [rsp + 0x100], ecx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x104], ecx>', '<mov~~dword ptr [rsp + 0x10c], eax>', '<jb~~0x401ba6>']}, {'block_Idx': 83, 'blockInsts': ['<jmp~~0x402001>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x2d8]>', '<mov~~rcx, rax>', '<add~~rcx, 0x2c>', '<mov~~qword ptr [rsp + 0x290], rcx>', '<mov~~edx, dword ptr [rax + 0x2c]>', '<mov~~dword ptr [rsp + 0x29c], edx>', '<xor~~eax, eax>', '<xor~~ecx, ecx>', '<cmp~~edx, 0>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x2a0], edx>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x2a4], edx>', '<mov~~qword ptr [rsp + 0x2a8], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x2b0], ecx>', '<mov~~dword ptr [rsp + 0x2b4], eax>', '<je~~0x4014ba>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xaf0]>', '<lea~~rsi, [rip + 0x1d4f]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x2d8]>', '<mov~~rsi, qword ptr [rsp + 0x2e0]>', '<add~~rcx, 0x4b0>', '<lea~~rdi, [rsp + 0xaf0]>', '<mov~~edx, 2>', '<xor~~eax, eax>', '<mov~~r8d, eax>', '<call~~0x5000c0>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0xe8]>', '<mov~~r8, qword ptr [rsp + 0xe0]>', '<mov~~edx, dword ptr [rsp + 0xf4]>', '<mov~~rdi, qword ptr [rsp + 0xf8]>', '<mov~~eax, dword ptr [rsp + 0x100]>', '<mov~~ecx, dword ptr [rsp + 0x104]>', '<mov~~dword ptr [rsp + 0xb4], eax>', '<mov~~qword ptr [rsp + 0xb8], rdi>', '<mov~~r8, qword ptr [r8]>', '<mov~~qword ptr [rsp + 0xc0], r8>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rsi + rdi*8]>', '<mov~~rsi, qword ptr [rsi + 8]>', '<mov~~qword ptr [rsp + 0xc8], rsi>', '<cmp~~dword ptr [rsi + 0xc], 1>', '<mov~~dword ptr [rsp + 0xd4], edx>', '<mov~~dword ptr [rsp + 0xd8], ecx>', '<mov~~dword ptr [rsp + 0xdc], eax>', '<jne~~0x401d01>']}, {'block_Idx': 92, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xa8]>', '<mov~~edx, dword ptr [rsp + 0x80]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x30], rax>', '<mov~~ecx, dword ptr [rcx]>', '<sub~~ecx, edx>', '<mov~~dword ptr [rsp + 0x3c], ecx>', '<mov~~edx, eax>', '<cmp~~ecx, edx>', '<mov~~qword ptr [rsp + 0x60], rax>', '<jg~~0x401f98>']}, {'block_Idx': 75, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x190]>', '<mov~~edx, dword ptr [rsp + 0x168]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<add~~rax, 1>', '<mov~~ecx, dword ptr [rcx]>', '<sub~~ecx, edx>', '<mov~~edx, eax>', '<cmp~~ecx, edx>', '<mov~~qword ptr [rsp + 0x148], rax>', '<jg~~0x401a5f>']}, {'block_Idx': 22, 'blockInsts': ['<jmp~~0x4015a8>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2ec], eax>', '<cmp~~eax, 0>', '<jge~~0x4011c2>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x1f0]>', '<mov~~rax, qword ptr [rsp + 0x2d8]>', '<mov~~rcx, qword ptr [rsp + 0x2c0]>', '<add~~rcx, 0x20>', '<mov~~qword ptr [rsp + 0x1c8], rcx>', '<add~~rax, 0x30>', '<mov~~qword ptr [rsp + 0x1d0], rax>', '<xor~~eax, eax>', '<mov~~edx, eax>', '<xor~~ecx, ecx>', '<mov~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x1dc], esi>', '<mov~~qword ptr [rsp + 0x1e0], rdx>', '<mov~~dword ptr [rsp + 0x1e8], ecx>', '<mov~~dword ptr [rsp + 0x1ec], eax>', '<mov~~rsi, qword ptr [rsp + 0x1d0]>', '<mov~~r8, qword ptr [rsp + 0x1c8]>', '<mov~~edx, dword ptr [rsp + 0x1dc]>', '<mov~~rdi, qword ptr [rsp + 0x1e0]>', '<mov~~eax, dword ptr [rsp + 0x1e8]>', '<mov~~ecx, dword ptr [rsp + 0x1ec]>', '<mov~~dword ptr [rsp + 0x19c], eax>', '<mov~~qword ptr [rsp + 0x1a0], rdi>', '<mov~~r8, qword ptr [r8]>', '<mov~~qword ptr [rsp + 0x1a8], r8>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rsi + rdi*8]>', '<mov~~rsi, qword ptr [rsi + 8]>', '<mov~~qword ptr [rsp + 0x1b0], rsi>', '<cmp~~dword ptr [rsi + 0xc], 0>', '<mov~~dword ptr [rsp + 0x1bc], edx>', '<mov~~dword ptr [rsp + 0x1c0], ecx>', '<mov~~dword ptr [rsp + 0x1c4], eax>', '<jne~~0x401795>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x2e0]>', '<mov~~rdi, qword ptr [rsp + 0x2d8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x2091]>', '<mov~~al, 0>', '<call~~0x500018>']}, {'block_Idx': 85, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x58]>', '<mov~~rdi, qword ptr [rsp + 0x98]>', '<mov~~rax, qword ptr [rsp + 0x78]>', '<mov~~qword ptr [rsp + 0x40], rcx>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~rdx, qword ptr [rax + 0x800]>', '<mov~~rcx, qword ptr [rax + 0x808]>', '<lea~~rsi, [rip + 0x15c9]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x2c0]>', '<mov~~rdi, qword ptr [rsp + 0xaf0]>', '<mov~~edx, dword ptr [rax + 0x10]>', '<lea~~rsi, [rip + 0x1d26]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xaf0]>', '<lea~~rsi, [rip + 0x14e9]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x98]>', '<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~edx, dword ptr [rax + 0x810]>', '<mov~~rcx, qword ptr [rax + 0x808]>', '<lea~~rsi, [rip + 0x169e]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x16c]>', '<mov~~al, byte ptr [rsp + 0x217]>', '<mov~~rcx, qword ptr [rsp + 0x160]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~rsi, qword ptr [rcx]>', '<mov~~esi, dword ptr [rsi + 0x810]>', '<test~~esi, esi>', '<setg~~sil>', '<or~~al, sil>', '<mov~~edx, edx>', '<mov~~qword ptr [rsp + 0x150], rdx>', '<mov~~rcx, qword ptr [rcx + rdx*8]>', '<mov~~qword ptr [rsp + 0x158], rcx>', '<test~~al, 1>', '<jne~~0x401981>']}, {'block_Idx': 53, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xb8]>', '<mov~~esi, dword ptr [rsp + 0xd4]>', '<mov~~eax, dword ptr [rsp + 0xd8]>', '<mov~~ecx, dword ptr [rsp + 0xdc]>', '<add~~rdx, 1>', '<mov~~edi, esi>', '<cmp~~rdx, rdi>', '<mov~~dword ptr [rsp + 0xf4], esi>', '<mov~~qword ptr [rsp + 0xf8], rdx>', '<mov~~dword ptr [rsp + 0x100], ecx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x104], ecx>', '<mov~~dword ptr [rsp + 0x10c], eax>', '<jb~~0x401ba6>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x108]>', '<mov~~rax, qword ptr [rsp + 0x2d8]>', '<mov~~rcx, qword ptr [rsp + 0x2c0]>', '<add~~rcx, 0x20>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<add~~rax, 0x30>', '<mov~~qword ptr [rsp + 0xe8], rax>', '<xor~~eax, eax>', '<mov~~edx, eax>', '<xor~~ecx, ecx>', '<mov~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0xf4], esi>', '<mov~~qword ptr [rsp + 0xf8], rdx>', '<mov~~dword ptr [rsp + 0x100], ecx>', '<mov~~dword ptr [rsp + 0x104], eax>', '<mov~~rsi, qword ptr [rsp + 0xe8]>', '<mov~~r8, qword ptr [rsp + 0xe0]>', '<mov~~edx, dword ptr [rsp + 0xf4]>', '<mov~~rdi, qword ptr [rsp + 0xf8]>', '<mov~~eax, dword ptr [rsp + 0x100]>', '<mov~~ecx, dword ptr [rsp + 0x104]>', '<mov~~dword ptr [rsp + 0xb4], eax>', '<mov~~qword ptr [rsp + 0xb8], rdi>', '<mov~~r8, qword ptr [r8]>', '<mov~~qword ptr [rsp + 0xc0], r8>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rsi + rdi*8]>', '<mov~~rsi, qword ptr [rsi + 8]>', '<mov~~qword ptr [rsp + 0xc8], rsi>', '<cmp~~dword ptr [rsi + 0xc], 1>', '<mov~~dword ptr [rsp + 0xd4], edx>', '<mov~~dword ptr [rsp + 0xd8], ecx>', '<mov~~dword ptr [rsp + 0xdc], eax>', '<jne~~0x401d01>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x190]>', '<mov~~edx, dword ptr [rsp + 0x168]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<add~~rax, 1>', '<mov~~ecx, dword ptr [rcx]>', '<sub~~ecx, edx>', '<mov~~edx, eax>', '<cmp~~ecx, edx>', '<mov~~qword ptr [rsp + 0x140], rax>', '<jle~~0x401add>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x24c]>', '<mov~~rax, qword ptr [rsp + 0x258]>', '<mov~~rdx, qword ptr [rsp + 0x240]>', '<imul~~rdx, rdx, 0x8480>', '<add~~rax, rdx>', '<add~~rax, 0x8460>', '<mov~~rax, qword ptr [rax]>', '<add~~ecx, -1>', '<mov~~ecx, ecx>', '<mov~~rcx, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rcx + 0x800]>', '<add~~rax, qword ptr [rcx + 0x808]>', '<mov~~qword ptr [rsp + 0x250], rax>', '<mov~~rax, qword ptr [rsp + 0x260]>', '<mov~~rcx, qword ptr [rsp + 0x240]>', '<mov~~rdx, qword ptr [rsp + 0x250]>', '<mov~~qword ptr [rsp + 0x228], rdx>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0xc], 0>', '<jne~~0x4013db>']}, {'block_Idx': 80, 'blockInsts': ['<jmp~~0x401add>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x260]>', '<mov~~rcx, qword ptr [rsp + 0x240]>', '<mov~~rdx, qword ptr [rsp + 0x250]>', '<mov~~qword ptr [rsp + 0x228], rdx>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0xc], 0>', '<jne~~0x4013db>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x290]>', '<mov~~ecx, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x108], ecx>', '<mov~~eax, 0xffffffff>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x10c], eax>', '<je~~0x401d53>']}, {'block_Idx': 77, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x2b8], eax>', '<mov~~eax, dword ptr [rsp + 0x2b8]>', '<add~~rsp, 0xaf8>', '<pop~~rbx>', '<pop~~r14>', '<ret~~>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x1d0]>', '<mov~~r8, qword ptr [rsp + 0x1c8]>', '<mov~~edx, dword ptr [rsp + 0x1dc]>', '<mov~~rdi, qword ptr [rsp + 0x1e0]>', '<mov~~eax, dword ptr [rsp + 0x1e8]>', '<mov~~ecx, dword ptr [rsp + 0x1ec]>', '<mov~~dword ptr [rsp + 0x19c], eax>', '<mov~~qword ptr [rsp + 0x1a0], rdi>', '<mov~~r8, qword ptr [r8]>', '<mov~~qword ptr [rsp + 0x1a8], r8>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rsi + rdi*8]>', '<mov~~rsi, qword ptr [rsi + 8]>', '<mov~~qword ptr [rsp + 0x1b0], rsi>', '<cmp~~dword ptr [rsi + 0xc], 0>', '<mov~~dword ptr [rsp + 0x1bc], edx>', '<mov~~dword ptr [rsp + 0x1c0], ecx>', '<mov~~dword ptr [rsp + 0x1c4], eax>', '<jne~~0x401795>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0xb8]>', '<mov~~edx, dword ptr [rsp + 0xb4]>', '<mov~~rax, qword ptr [rsp + 0xc0]>', '<mov~~r10, qword ptr [rsp + 0xc8]>', '<mov~~rdi, qword ptr [rsp + 0xaf0]>', '<mov~~ecx, dword ptr [r10 + 0x60]>', '<imul~~r9, rsi, 0x8480>', '<mov~~r8, rax>', '<add~~r8, r9>', '<add~~r8, 0x8468>', '<mov~~r8, qword ptr [r8]>', '<mov~~r9d, dword ptr [r10 + 0x1d0]>', '<mov~~ebx, dword ptr [r10 + 0x1d4]>', '<imul~~r11, rsi, 0x8480>', '<mov~~r10, rax>', '<add~~r10, r11>', '<add~~r10, 0x8478>', '<mov~~r11d, dword ptr [r10]>', '<imul~~r14, rsi, 0x8480>', '<mov~~r10, rax>', '<add~~r10, r14>', '<add~~r10, 0x847c>', '<mov~~r10d, dword ptr [r10]>', '<imul~~rsi, rsi, 0x8480>', '<add~~rax, rsi>', '<add~~rax, 0x8470>', '<mov~~rax, qword ptr [rax]>', '<lea~~rsi, [rip + 0x17bb]>', '<mov~~dword ptr [rsp], ebx>', '<mov~~dword ptr [rsp + 8], r11d>', '<mov~~dword ptr [rsp + 0x10], r10d>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xb0]>', '<mov~~edi, dword ptr [rsp + 0xa4]>', '<mov~~sil, byte ptr [rsp + 0x217]>', '<mov~~rdx, qword ptr [rsp + 0x88]>', '<mov~~r8, qword ptr [rsp + 0x90]>', '<mov~~rax, qword ptr [rsp + 0x2c0]>', '<mov~~eax, dword ptr [rax + 0x10]>', '<imul~~r8, r8, 0x8480>', '<add~~rdx, r8>', '<add~~rdx, 0x8460>', '<mov~~qword ptr [rsp + 0x78], rdx>', '<xor~~edx, edx>', '<test~~sil, 1>', '<cmovne~~edx, eax>', '<mov~~dword ptr [rsp + 0x80], edx>', '<mov~~eax, edi>', '<add~~eax, edx>', '<mov~~esi, ecx>', '<sub~~esi, eax>', '<xor~~eax, eax>', '<cmp~~esi, 0>', '<cmovg~~eax, esi>', '<xor~~esi, esi>', '<cmp~~edi, 0>', '<cmove~~eax, esi>', '<mov~~dword ptr [rsp + 0x84], eax>', '<sub~~ecx, edx>', '<cmp~~eax, ecx>', '<jge~~0x402001>']}, {'block_Idx': 91, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x190]>', '<mov~~edx, dword ptr [rsp + 0x168]>', '<mov~~rax, qword ptr [rsp + 0x128]>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x130], rax>', '<mov~~ecx, dword ptr [rcx]>', '<sub~~ecx, edx>', '<mov~~dword ptr [rsp + 0x13c], ecx>', '<mov~~edx, eax>', '<cmp~~ecx, edx>', '<mov~~qword ptr [rsp + 0x140], rax>', '<jg~~0x4019de>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x2c0]>', '<mov~~edi, dword ptr [rsp + 0x2bc]>', '<mov~~esi, dword ptr [rsp + 0x2a0]>', '<mov~~r9d, dword ptr [rsp + 0x2a4]>', '<mov~~rdx, qword ptr [rsp + 0x2a8]>', '<mov~~r8d, dword ptr [rsp + 0x2b0]>', '<mov~~ecx, dword ptr [rsp + 0x2b4]>', '<mov~~dword ptr [rsp + 0x1f8], r9d>', '<mov~~dword ptr [rsp + 0x1fc], esi>', '<cmp~~edi, 0>', '<sete~~sil>', '<mov~~byte ptr [rsp + 0x217], sil>', '<xor~~esi, esi>', '<cmp~~edi, 0>', '<cmove~~rdx, rsi>', '<xor~~esi, esi>', '<cmp~~edi, 0>', '<cmove~~r8d, esi>', '<xor~~esi, esi>', '<cmp~~edi, 0>', '<cmove~~ecx, esi>', '<mov~~rsi, rax>', '<add~~rsi, 8>', '<mov~~qword ptr [rsp + 0x200], rsi>', '<mov~~esi, dword ptr [rax + 8]>', '<cmp~~ecx, esi>', '<mov~~eax, ecx>', '<cmovg~~eax, esi>', '<cmp~~r8d, esi>', '<mov~~edi, r8d>', '<cmovg~~edi, esi>', '<cmp~~esi, 0>', '<cmove~~edi, r8d>', '<mov~~dword ptr [rsp + 0x20c], edi>', '<cmp~~esi, 0>', '<cmove~~eax, ecx>', '<mov~~dword ptr [rsp + 0x210], eax>', '<mov~~rdi, qword ptr [rsp + 0xaf0]>', '<lea~~rsi, [rip + 0x1d0d]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 84, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x60]>', '<mov~~rdi, qword ptr [rsp + 0x98]>', '<mov~~rax, qword ptr [rsp + 0x78]>', '<mov~~qword ptr [rsp + 0x28], rcx>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~edx, dword ptr [rax + 0x810]>', '<mov~~rcx, qword ptr [rax + 0x808]>', '<lea~~rsi, [rip + 0x1575]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 94, 'blockInsts': ['<jmp~~0x401add>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xaf0]>', '<lea~~rsi, [rip + 0x2087]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x98]>', '<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~rdx, qword ptr [rax + 0x800]>', '<mov~~rcx, qword ptr [rax + 0x808]>', '<lea~~rsi, [rip + 0x162e]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x180]>', '<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~rdx, qword ptr [rax + 0x800]>', '<mov~~rcx, qword ptr [rax + 0x808]>', '<lea~~rsi, [rip + 0x1b82]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x2c0]>', '<cmp~~dword ptr [rax + 0x28], 0>', '<je~~0x401af3>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x228]>', '<mov~~r9, qword ptr [rsp + 0x268]>', '<mov~~r8, qword ptr [rsp + 0x240]>', '<mov~~edi, dword ptr [rsp + 0x218]>', '<mov~~esi, dword ptr [rsp + 0x21c]>', '<mov~~ecx, dword ptr [rsp + 0x220]>', '<mov~~eax, dword ptr [rsp + 0x224]>', '<add~~r8, 1>', '<cmp~~r8, r9>', '<mov~~qword ptr [rsp + 0x270], r8>', '<mov~~r8d, eax>', '<mov~~dword ptr [rsp + 0x278], r8d>', '<mov~~r8d, ecx>', '<mov~~dword ptr [rsp + 0x27c], r8d>', '<mov~~r8, rdx>', '<mov~~qword ptr [rsp + 0x280], r8>', '<mov~~r8d, esi>', '<mov~~dword ptr [rsp + 0x288], r8d>', '<mov~~r8d, edi>', '<mov~~dword ptr [rsp + 0x28c], r8d>', '<mov~~dword ptr [rsp + 0x2a0], edi>', '<mov~~dword ptr [rsp + 0x2a4], esi>', '<mov~~qword ptr [rsp + 0x2a8], rdx>', '<mov~~dword ptr [rsp + 0x2b0], ecx>', '<mov~~dword ptr [rsp + 0x2b4], eax>', '<jne~~0x4012a4>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x290]>', '<mov~~ecx, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x1f0], ecx>', '<mov~~eax, 0xffffffff>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x1f4], eax>', '<je~~0x4017e7>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xaf0]>', '<call~~0x500058>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xaf0]>', '<lea~~rsi, [rip + 0x13da]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2b8]>', '<add~~rsp, 0xaf8>', '<pop~~rbx>', '<pop~~r14>', '<ret~~>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xa8]>', '<mov~~edx, dword ptr [rsp + 0x80]>', '<mov~~rax, qword ptr [rsp + 0x68]>', '<add~~rax, 1>', '<mov~~ecx, dword ptr [rcx]>', '<sub~~ecx, edx>', '<mov~~edx, eax>', '<cmp~~ecx, edx>', '<mov~~qword ptr [rsp + 0x60], rax>', '<jg~~0x401f98>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x23c]>', '<mov~~ecx, dword ptr [rsp + 0x24c]>', '<mov~~esi, dword ptr [rsp + 0x230]>', '<mov~~edx, dword ptr [rsp + 0x234]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp + 0x218], esi>', '<mov~~dword ptr [rsp + 0x21c], edx>', '<mov~~dword ptr [rsp + 0x220], ecx>', '<mov~~dword ptr [rsp + 0x224], eax>', '<mov~~rdx, qword ptr [rsp + 0x228]>', '<mov~~r9, qword ptr [rsp + 0x268]>', '<mov~~r8, qword ptr [rsp + 0x240]>', '<mov~~edi, dword ptr [rsp + 0x218]>', '<mov~~esi, dword ptr [rsp + 0x21c]>', '<mov~~ecx, dword ptr [rsp + 0x220]>', '<mov~~eax, dword ptr [rsp + 0x224]>', '<add~~r8, 1>', '<cmp~~r8, r9>', '<mov~~qword ptr [rsp + 0x270], r8>', '<mov~~r8d, eax>', '<mov~~dword ptr [rsp + 0x278], r8d>', '<mov~~r8d, ecx>', '<mov~~dword ptr [rsp + 0x27c], r8d>', '<mov~~r8, rdx>', '<mov~~qword ptr [rsp + 0x280], r8>', '<mov~~r8d, esi>', '<mov~~dword ptr [rsp + 0x288], r8d>', '<mov~~r8d, edi>', '<mov~~dword ptr [rsp + 0x28c], r8d>', '<mov~~dword ptr [rsp + 0x2a0], edi>', '<mov~~dword ptr [rsp + 0x2a4], esi>', '<mov~~qword ptr [rsp + 0x2a8], rdx>', '<mov~~dword ptr [rsp + 0x2b0], ecx>', '<mov~~dword ptr [rsp + 0x2b4], eax>', '<jne~~0x4012a4>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x2c0]>', '<cmp~~dword ptr [rax + 0x2c], 0>', '<je~~0x402017>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x210]>', '<mov~~edx, dword ptr [rsp + 0x1fc]>', '<mov~~rdi, qword ptr [rsp + 0xaf0]>', '<lea~~rsi, [rip + 0x1d1c]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x84]>', '<mov~~al, byte ptr [rsp + 0x217]>', '<mov~~rcx, qword ptr [rsp + 0x78]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~rsi, qword ptr [rcx]>', '<mov~~esi, dword ptr [rsi + 0x810]>', '<test~~esi, esi>', '<setg~~sil>', '<or~~al, sil>', '<mov~~edx, edx>', '<mov~~qword ptr [rsp + 0x68], rdx>', '<mov~~rcx, qword ptr [rcx + rdx*8]>', '<mov~~qword ptr [rsp + 0x70], rcx>', '<test~~al, 1>', '<jne~~0x401ed8>']}, {'block_Idx': 93, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xa8]>', '<mov~~edx, dword ptr [rsp + 0x80]>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x48], rax>', '<mov~~ecx, dword ptr [rcx]>', '<sub~~ecx, edx>', '<mov~~dword ptr [rsp + 0x54], ecx>', '<mov~~edx, eax>', '<cmp~~ecx, edx>', '<mov~~qword ptr [rsp + 0x58], rax>', '<jg~~0x401f2c>']}], 'cfg_edge_info': [(57, 48), (22, 26), (95, 50), (75, 81), (90, 81), (53, 62), (76, 45), (45, 30), (91, 82), (39, 44), (2, 4), (48, 40), (40, 45), (49, 66), (68, 79), (15, 18), (79, 85), (55, 63), (65, 40), (51, 50), (46, 45), (0, 2), (14, 19), (62, 53), (24, 14), (93, 95), (12, 15), (29, 31), (57, 47), (31, 37), (52, 69), (75, 80), (66, 77), (53, 43), (85, 93), (83, 50), (43, 50), (23, 26), (19, 22), (7, 11), (47, 65), (69, 62), (4, 6), (60, 68), (78, 83), (30, 33), (6, 8), (94, 45), (41, 48), (26, 29), (84, 92), (44, 53), (38, 49), (79, 50), (92, 84), (62, 52), (50, 32), (11, 13), (93, 85), (37, 41), (92, 50), (32, 38), (82, 91), (12, 14), (29, 30), (51, 60), (67, 78), (39, 43), (33, 39), (90, 45), (8, 12), (48, 57), (76, 82), (69, 43), (15, 17), (81, 90), (43, 51), (60, 67), (65, 57), (40, 46), (19, 23), (91, 94), (30, 32), (6, 7), (80, 45), (63, 75), (21, 14), (41, 47), (55, 64), (64, 76), (44, 52), (78, 84), (46, 55), (37, 40)], 'cdg_edge_info': [(6, 12), (30, 43), (6, 30), (55, 75), (78, 92), (75, 90), (30, 33), (6, 66), (6, 11), (76, 91), (6, 8), (6, 14), (30, 39), (90, 90), (79, 93), (6, 26), (6, 32), (43, 51), (12, 15), (29, 31), (57, 47), (29, 37), (6, 29), (6, 38), (29, 40), (39, 44), (60, 79), (91, 91), (40, 46), (19, 23), (62, 52), (37, 41), (6, 7), (6, 13), (6, 77), (41, 47), (6, 19), (30, 50), (51, 60), (44, 52), (55, 76), (46, 55), (6, 49), (29, 45), (60, 78), (92, 92), (93, 93), (19, 22)], 'ddg_edge_info': [(26, 30), (55, 75), (0, 51), (0, 14), (14, 31), (31, 47), (14, 40), (0, 23), (46, 75), (6, 11), (47, 55), (52, 51), (26, 32), (0, 44), (45, 30), (39, 44), (40, 43), (2, 4), (31, 40), (0, 7), (14, 33), (15, 62), (43, 78), (14, 51), (8, 32), (47, 57), (8, 50), (0, 46), (40, 91), (45, 32), (14, 26), (60, 78), (49, 66), (51, 93), (0, 30), (8, 43), (46, 91), (8, 52), (40, 93), (0, 2), (14, 19), (0, 66), (15, 57), (47, 52), (8, 45), (33, 44), (0, 41), (12, 15), (57, 47), (52, 60), (31, 37), (51, 79), (66, 77), (47, 45), (8, 38), (8, 47), (40, 75), (40, 79), (0, 43), (14, 60), (15, 43), (23, 26), (14, 23), (52, 62), (2, 6), (8, 31), (7, 11), (55, 60), (8, 40), (8, 49), (14, 62), (4, 6), (40, 90), (33, 51), (33, 60), (12, 37), (8, 15), (43, 79), (47, 40), (8, 33), (14, 46), (0, 29), (14, 55), (46, 90), (26, 29), (4, 8), (40, 92), (41, 57), (38, 49), (60, 79), (44, 62), (33, 62), (0, 4), (62, 52), (50, 32), (31, 46), (8, 26), (0, 77), (11, 77), (37, 41), (31, 55), (23, 51), (14, 57), (0, 40), (32, 38), (43, 93), (40, 76), (26, 31), (52, 50), (12, 14), (51, 60), (55, 76), (15, 40), (39, 43), (0, 15), (46, 76), (31, 57), (40, 78), (52, 43), (33, 39), (26, 33), (8, 12), (31, 41), (47, 46), (23, 46), (40, 62), (14, 43), (51, 92), (7, 77), (43, 51), (33, 50), (45, 33), (8, 14), (40, 46), (8, 23), (12, 39), (4, 7), (33, 43), (33, 52), (46, 55), (0, 12), (31, 45), (51, 78), (37, 40), (43, 92)]}]}
{'write_manifest': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%r14'}, {'instIndex': 1, 'instruction': 'pushq\t%rbx'}, {'instIndex': 2, 'instruction': 'subq\t$0xaf8, %rsp                     # imm = 0xAF8'}, {'instIndex': 3, 'instruction': 'movl\t%esi, 0x2bc(%rsp)                 # 4-byte Spill'}, {'instIndex': 4, 'instruction': 'movq\t%rdi, %rcx'}, {'instIndex': 5, 'instruction': 'movq\t%rcx, 0x2d8(%rsp)                 # 8-byte Spill'}, {'instIndex': 6, 'instruction': 'movq\t0x18(%rcx), %rax'}, {'instIndex': 7, 'instruction': 'movq\t%rax, 0x2c0(%rsp)                 # 8-byte Spill'}, {'instIndex': 8, 'instruction': 'leaq\t0xaf0(%rsp), %rax'}, {'instIndex': 9, 'instruction': 'leaq\t0x6f0(%rsp), %rdi'}, {'instIndex': 10, 'instruction': 'movq\t%rdi, 0x2c8(%rsp)                 # 8-byte Spill'}, {'instIndex': 11, 'instruction': 'leaq\t0x2f0(%rsp), %rax'}, {'instIndex': 12, 'instruction': 'movq\t%rax, 0x2e0(%rsp)                 # 8-byte Spill'}, {'instIndex': 13, 'instruction': 'addq\t$0x38, %rcx'}, {'instIndex': 14, 'instruction': 'movq\t%rcx, 0x2d0(%rsp)                 # 8-byte Spill'}, {'instIndex': 15, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 16, 'instruction': 'leaq\t.L.str.0x20(%rip), %rdx'}, {'instIndex': 17, 'instruction': 'movb\t$0, %al'}, {'instIndex': 18, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 21, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 22, 'instruction': 'leaq\t.L.str.0x21(%rip), %rdx'}, {'instIndex': 23, 'instruction': 'movb\t$0, %al'}, {'instIndex': 24, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 27, 'instruction': 'addq\t$0x4b0, %rcx                     # imm = 0x4B0'}, {'instIndex': 28, 'instruction': 'leaq\t0xaf0(%rsp), %rdi'}, {'instIndex': 29, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 30, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 31, 'instruction': 'movl\t%eax, %r8d'}, {'instIndex': 32, 'instruction': 'callq\tavio_open2@PLT'}, {'instIndex': 34, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 35, 'instruction': 'jge\t.LBB5_2'}, {'instIndex': 38, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 39, 'instruction': 'leaq\t.L.str.0x22(%rip), %rdx'}, {'instIndex': 40, 'instruction': 'movb\t$0, %al'}, {'instIndex': 41, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 44, 'instruction': 'jmp\t.LBB5_41'}, {'instIndex': 45, 'instruction': 'movq\t0xaf0(%rsp), %rdi'}, {'instIndex': 46, 'instruction': 'leaq\t.L.str.0x23(%rip), %rsi'}, {'instIndex': 47, 'instruction': 'movb\t$0, %al'}, {'instIndex': 48, 'instruction': 'callq\tavio_printf@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 728, 'instruction': 'movq\t0xaf0(%rsp), %rdi'}, {'instIndex': 729, 'instruction': 'leaq\t.L.str.0x2c(%rip), %rsi'}, {'instIndex': 730, 'instruction': 'movb\t$0, %al'}, {'instIndex': 731, 'instruction': 'callq\tavio_printf@PLT'}, {'instIndex': 732, 'instruction': 'movq\t0xaf0(%rsp), %rdi'}, {'instIndex': 733, 'instruction': 'callq\tavio_flush@PLT'}, {'instIndex': 734, 'instruction': 'movq\t0xaf0(%rsp), %rdi'}, {'instIndex': 735, 'instruction': 'callq\tavio_close@PLT'}, {'instIndex': 738, 'instruction': 'callq\trename@PLT'}, {'instIndex': 742, 'instruction': 'addq\t$0xaf8, %rsp                     # imm = 0xAF8'}, {'instIndex': 743, 'instruction': 'popq\t%rbx'}, {'instIndex': 744, 'instruction': 'popq\t%r14'}, {'instIndex': 745, 'instruction': 'retq'}]}]}
The case of compiler clang with optimization Os.
Patched source code file: smoothstreamingenc.c
Patched function: 1---static int write_manifest 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_after/Os/smoothstreamingenc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_after/Os/smoothstreamingenc.s---write_manifest---after
function id: 5
function flag: True
There are 480 instructions for function: write_manifest in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '210', 'end': 224}, 'before': {'start': '210', 'end': 223}}}, {'modifyIndex': 2, 'line': {'after': {'start': '279', 'end': 285}, 'before': {'start': '278', 'end': 283}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%r14'}, {'instIndex': 1, 'instruction': 'pushq\t%rbx'}, {'instIndex': 2, 'instruction': 'subq\t$0x9e8, %rsp                     # imm = 0x9E8'}, {'instIndex': 3, 'instruction': 'movl\t%esi, 0x1ac(%rsp)                 # 4-byte Spill'}, {'instIndex': 4, 'instruction': 'movq\t%rdi, %rcx'}, {'instIndex': 5, 'instruction': 'movq\t%rcx, 0x1c8(%rsp)                 # 8-byte Spill'}, {'instIndex': 6, 'instruction': 'movq\t0x18(%rcx), %rax'}, {'instIndex': 7, 'instruction': 'movq\t%rax, 0x1b0(%rsp)                 # 8-byte Spill'}, {'instIndex': 8, 'instruction': 'leaq\t0x9e0(%rsp), %rax'}, {'instIndex': 9, 'instruction': 'leaq\t0x5e0(%rsp), %rdi'}, {'instIndex': 10, 'instruction': 'movq\t%rdi, 0x1b8(%rsp)                 # 8-byte Spill'}, {'instIndex': 11, 'instruction': 'leaq\t0x1e0(%rsp), %rax'}, {'instIndex': 12, 'instruction': 'movq\t%rax, 0x1d0(%rsp)                 # 8-byte Spill'}, {'instIndex': 13, 'instruction': 'addq\t$0x38, %rcx'}, {'instIndex': 14, 'instruction': 'movq\t%rcx, 0x1c0(%rsp)                 # 8-byte Spill'}, {'instIndex': 15, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 16, 'instruction': 'leaq\t.L.str.0x20(%rip), %rdx'}, {'instIndex': 17, 'instruction': 'movb\t$0, %al'}, {'instIndex': 18, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 21, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 22, 'instruction': 'leaq\t.L.str.0x21(%rip), %rdx'}, {'instIndex': 23, 'instruction': 'movb\t$0, %al'}, {'instIndex': 24, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 27, 'instruction': 'addq\t$0x4b0, %rcx                     # imm = 0x4B0'}, {'instIndex': 28, 'instruction': 'leaq\t0x9e0(%rsp), %rdi'}, {'instIndex': 29, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 30, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 31, 'instruction': 'movl\t%eax, %r8d'}, {'instIndex': 32, 'instruction': 'callq\tavio_open2@PLT'}, {'instIndex': 34, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 35, 'instruction': 'jge\t.LBB5_2'}, {'instIndex': 38, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 39, 'instruction': 'leaq\t.L.str.0x22(%rip), %rdx'}, {'instIndex': 40, 'instruction': 'movb\t$0, %al'}, {'instIndex': 41, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 44, 'instruction': 'jmp\t.LBB5_27'}, {'instIndex': 45, 'instruction': 'movq\t0x9e0(%rsp), %rdi'}, {'instIndex': 46, 'instruction': 'leaq\t.L.str.0x23(%rip), %rsi'}, {'instIndex': 47, 'instruction': 'movb\t$0, %al'}, {'instIndex': 48, 'instruction': 'callq\tavio_printf@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 462, 'instruction': 'movq\t0x9e0(%rsp), %rdi'}, {'instIndex': 463, 'instruction': 'leaq\t.L.str.0x2c(%rip), %rsi'}, {'instIndex': 464, 'instruction': 'movb\t$0, %al'}, {'instIndex': 465, 'instruction': 'callq\tavio_printf@PLT'}, {'instIndex': 466, 'instruction': 'movq\t0x9e0(%rsp), %rdi'}, {'instIndex': 467, 'instruction': 'callq\tavio_flush@PLT'}, {'instIndex': 468, 'instruction': 'movq\t0x9e0(%rsp), %rdi'}, {'instIndex': 469, 'instruction': 'callq\tavio_close@PLT'}, {'instIndex': 472, 'instruction': 'callq\trename@PLT'}, {'instIndex': 476, 'instruction': 'addq\t$0x9e8, %rsp                     # imm = 0x9E8'}, {'instIndex': 477, 'instruction': 'popq\t%rbx'}, {'instIndex': 478, 'instruction': 'popq\t%r14'}, {'instIndex': 479, 'instruction': 'retq'}]}]
Patched function: 1---static int write_manifest 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_after/Os/smoothstreamingenc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_after/Os/smoothstreamingenc.s---write_manifest---after
function id: 5
function flag: True
There are 480 instructions for function: write_manifest in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '210', 'end': 224}, 'before': {'start': '210', 'end': 223}}}, {'modifyIndex': 2, 'line': {'after': {'start': '279', 'end': 285}, 'before': {'start': '278', 'end': 283}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%r14'}, {'instIndex': 1, 'instruction': 'pushq\t%rbx'}, {'instIndex': 2, 'instruction': 'subq\t$0x9e8, %rsp                     # imm = 0x9E8'}, {'instIndex': 3, 'instruction': 'movl\t%esi, 0x1ac(%rsp)                 # 4-byte Spill'}, {'instIndex': 4, 'instruction': 'movq\t%rdi, %rcx'}, {'instIndex': 5, 'instruction': 'movq\t%rcx, 0x1c8(%rsp)                 # 8-byte Spill'}, {'instIndex': 6, 'instruction': 'movq\t0x18(%rcx), %rax'}, {'instIndex': 7, 'instruction': 'movq\t%rax, 0x1b0(%rsp)                 # 8-byte Spill'}, {'instIndex': 8, 'instruction': 'leaq\t0x9e0(%rsp), %rax'}, {'instIndex': 9, 'instruction': 'leaq\t0x5e0(%rsp), %rdi'}, {'instIndex': 10, 'instruction': 'movq\t%rdi, 0x1b8(%rsp)                 # 8-byte Spill'}, {'instIndex': 11, 'instruction': 'leaq\t0x1e0(%rsp), %rax'}, {'instIndex': 12, 'instruction': 'movq\t%rax, 0x1d0(%rsp)                 # 8-byte Spill'}, {'instIndex': 13, 'instruction': 'addq\t$0x38, %rcx'}, {'instIndex': 14, 'instruction': 'movq\t%rcx, 0x1c0(%rsp)                 # 8-byte Spill'}, {'instIndex': 15, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 16, 'instruction': 'leaq\t.L.str.0x20(%rip), %rdx'}, {'instIndex': 17, 'instruction': 'movb\t$0, %al'}, {'instIndex': 18, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 21, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 22, 'instruction': 'leaq\t.L.str.0x21(%rip), %rdx'}, {'instIndex': 23, 'instruction': 'movb\t$0, %al'}, {'instIndex': 24, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 27, 'instruction': 'addq\t$0x4b0, %rcx                     # imm = 0x4B0'}, {'instIndex': 28, 'instruction': 'leaq\t0x9e0(%rsp), %rdi'}, {'instIndex': 29, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 30, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 31, 'instruction': 'movl\t%eax, %r8d'}, {'instIndex': 32, 'instruction': 'callq\tavio_open2@PLT'}, {'instIndex': 34, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 35, 'instruction': 'jge\t.LBB5_2'}, {'instIndex': 38, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 39, 'instruction': 'leaq\t.L.str.0x22(%rip), %rdx'}, {'instIndex': 40, 'instruction': 'movb\t$0, %al'}, {'instIndex': 41, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 44, 'instruction': 'jmp\t.LBB5_27'}, {'instIndex': 45, 'instruction': 'movq\t0x9e0(%rsp), %rdi'}, {'instIndex': 46, 'instruction': 'leaq\t.L.str.0x23(%rip), %rsi'}, {'instIndex': 47, 'instruction': 'movb\t$0, %al'}, {'instIndex': 48, 'instruction': 'callq\tavio_printf@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 462, 'instruction': 'movq\t0x9e0(%rsp), %rdi'}, {'instIndex': 463, 'instruction': 'leaq\t.L.str.0x2c(%rip), %rsi'}, {'instIndex': 464, 'instruction': 'movb\t$0, %al'}, {'instIndex': 465, 'instruction': 'callq\tavio_printf@PLT'}, {'instIndex': 466, 'instruction': 'movq\t0x9e0(%rsp), %rdi'}, {'instIndex': 467, 'instruction': 'callq\tavio_flush@PLT'}, {'instIndex': 468, 'instruction': 'movq\t0x9e0(%rsp), %rdi'}, {'instIndex': 469, 'instruction': 'callq\tavio_close@PLT'}, {'instIndex': 472, 'instruction': 'callq\trename@PLT'}, {'instIndex': 476, 'instruction': 'addq\t$0x9e8, %rsp                     # imm = 0x9E8'}, {'instIndex': 477, 'instruction': 'popq\t%rbx'}, {'instIndex': 478, 'instruction': 'popq\t%r14'}, {'instIndex': 479, 'instruction': 'retq'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_after/Os/smoothstreamingenc.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_after/Os/smoothstreamingenc.o---after
The extraction of function: write_manifest
Analyzing the binaries to generate subCFGs from patched function ...
It has 345 nodes and 676 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 480 instructions in binary file.
[4198563, 4198674, 4198709, 4198755, 4198767, 4198802, 4198821]
[4201079, 4201101, 4201114, 4201127, 4201148, 4201157]
The execution time of patched subCFG information extraction via angr: 0:00:00.649202
{'write_manifest': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40116f>, <DisassemblerInsn "mov" for 0x401177>, <DisassemblerInsn "mov" for 0x40117f>, <DisassemblerInsn "lea" for 0x401184>, <DisassemblerInsn "mov" for 0x40118b>, <DisassemblerInsn "call" for 0x40118d>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401163>, <DisassemblerInsn "cmp" for 0x40116a>, <DisassemblerInsn "jge" for 0x40116d>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011bb>, <DisassemblerInsn "mov" for 0x4011c3>, <DisassemblerInsn "add" for 0x4011c6>, <DisassemblerInsn "mov" for 0x4011ca>, <DisassemblerInsn "mov" for 0x4011d2>, <DisassemblerInsn "mov" for 0x4011d5>, <DisassemblerInsn "xor" for 0x4011dc>, <DisassemblerInsn "xor" for 0x4011de>, <DisassemblerInsn "cmp" for 0x4011e0>, <DisassemblerInsn "mov" for 0x4011e3>, <DisassemblerInsn "mov" for 0x4011e5>, <DisassemblerInsn "mov" for 0x4011ec>, <DisassemblerInsn "mov" for 0x4011ee>, <DisassemblerInsn "mov" for 0x4011f5>, <DisassemblerInsn "mov" for 0x4011fd>, <DisassemblerInsn "mov" for 0x4011ff>, <DisassemblerInsn "mov" for 0x401206>, <DisassemblerInsn "je" for 0x40120d>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x4010a3>, <DisassemblerInsn "push" for 0x4010a5>, <DisassemblerInsn "sub" for 0x4010a6>, <DisassemblerInsn "mov" for 0x4010ad>, <DisassemblerInsn "mov" for 0x4010b4>, <DisassemblerInsn "mov" for 0x4010b7>, <DisassemblerInsn "mov" for 0x4010bf>, <DisassemblerInsn "mov" for 0x4010c3>, <DisassemblerInsn "lea" for 0x4010cb>, <DisassemblerInsn "lea" for 0x4010d3>, <DisassemblerInsn "mov" for 0x4010db>, <DisassemblerInsn "lea" for 0x4010e3>, <DisassemblerInsn "mov" for 0x4010eb>, <DisassemblerInsn "add" for 0x4010f3>, <DisassemblerInsn "mov" for 0x4010f7>, <DisassemblerInsn "mov" for 0x4010ff>, <DisassemblerInsn "lea" for 0x401104>, <DisassemblerInsn "mov" for 0x40110b>, <DisassemblerInsn "call" for 0x40110d>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401135>, <DisassemblerInsn "mov" for 0x40113d>, <DisassemblerInsn "add" for 0x401145>, <DisassemblerInsn "lea" for 0x40114c>, <DisassemblerInsn "mov" for 0x401154>, <DisassemblerInsn "xor" for 0x401159>, <DisassemblerInsn "mov" for 0x40115b>, <DisassemblerInsn "call" for 0x40115e>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011a5>, <DisassemblerInsn "lea" for 0x4011ad>, <DisassemblerInsn "mov" for 0x4011b4>, <DisassemblerInsn "call" for 0x4011b6>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ac5>, <DisassemblerInsn "add" for 0x401acc>, <DisassemblerInsn "pop" for 0x401ad3>, <DisassemblerInsn "pop" for 0x401ad4>, <DisassemblerInsn "ret" for 0x401ad6>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401192>, <DisassemblerInsn "mov" for 0x401199>, <DisassemblerInsn "jmp" for 0x4011a0>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401112>, <DisassemblerInsn "mov" for 0x40111a>, <DisassemblerInsn "mov" for 0x401122>, <DisassemblerInsn "lea" for 0x401127>, <DisassemblerInsn "mov" for 0x40112e>, <DisassemblerInsn "call" for 0x401130>]'}], 'cfg_block_detailed_info': [{'block_Idx': 4, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1d0]>', '<mov~~rdi, qword ptr [rsp + 0x1c8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x1c7e]>', '<mov~~al, 0>', '<call~~0x500018>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~dword ptr [rsp + 0x1dc], eax>', '<cmp~~eax, 0>', '<jge~~0x4011a5>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1c8]>', '<mov~~rcx, rax>', '<add~~rcx, 0x2c>', '<mov~~qword ptr [rsp + 0x180], rcx>', '<mov~~edx, dword ptr [rax + 0x2c]>', '<mov~~dword ptr [rsp + 0x18c], edx>', '<xor~~eax, eax>', '<xor~~ecx, ecx>', '<cmp~~edx, 0>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x190], edx>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x194], edx>', '<mov~~qword ptr [rsp + 0x198], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x1a0], ecx>', '<mov~~dword ptr [rsp + 0x1a4], eax>', '<je~~0x40149d>']}, {'block_Idx': 0, 'blockInsts': ['<push~~r14>', '<push~~rbx>', '<sub~~rsp, 0x9e8>', '<mov~~dword ptr [rsp + 0x1ac], esi>', '<mov~~rcx, rdi>', '<mov~~qword ptr [rsp + 0x1c8], rcx>', '<mov~~rax, qword ptr [rcx + 0x18]>', '<mov~~qword ptr [rsp + 0x1b0], rax>', '<lea~~rax, [rsp + 0x9e0]>', '<lea~~rdi, [rsp + 0x5e0]>', '<mov~~qword ptr [rsp + 0x1b8], rdi>', '<lea~~rax, [rsp + 0x1e0]>', '<mov~~qword ptr [rsp + 0x1d0], rax>', '<add~~rcx, 0x38>', '<mov~~qword ptr [rsp + 0x1c0], rcx>', '<mov~~esi, 0x400>', '<lea~~rdx, [rip + 0x1ce2]>', '<mov~~al, 0>', '<call~~0x500020>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1c8]>', '<mov~~rsi, qword ptr [rsp + 0x1d0]>', '<add~~rcx, 0x4b0>', '<lea~~rdi, [rsp + 0x9e0]>', '<mov~~edx, 2>', '<xor~~eax, eax>', '<mov~~r8d, eax>', '<call~~0x5000c0>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x9e0]>', '<lea~~rsi, [rip + 0x1c74]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1a8]>', '<add~~rsp, 0x9e8>', '<pop~~rbx>', '<pop~~r14>', '<ret~~>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1dc]>', '<mov~~dword ptr [rsp + 0x1a8], eax>', '<jmp~~0x401ac5>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1c0]>', '<mov~~rdi, qword ptr [rsp + 0x1d0]>', '<mov~~esi, 0x400>', '<lea~~rdx, [rip + 0x1ccb]>', '<mov~~al, 0>', '<call~~0x500020>']}], 'cfg_edge_info': [(0, 1), (1, 2), (3, 4), (6, 8), (4, 6), (5, 7), (2, 3), (3, 5)]}, {'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a9a>, <DisassemblerInsn "call" for 0x401aa2>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a77>, <DisassemblerInsn "lea" for 0x401a7f>, <DisassemblerInsn "mov" for 0x401a86>, <DisassemblerInsn "call" for 0x401a88>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401aa7>, <DisassemblerInsn "mov" for 0x401aaf>, <DisassemblerInsn "call" for 0x401ab7>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a8d>, <DisassemblerInsn "call" for 0x401a95>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401822>, <DisassemblerInsn "cmp" for 0x40182a>, <DisassemblerInsn "je" for 0x40182e>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a61>, <DisassemblerInsn "lea" for 0x401a69>, <DisassemblerInsn "mov" for 0x401a70>, <DisassemblerInsn "call" for 0x401a72>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ac5>, <DisassemblerInsn "add" for 0x401acc>, <DisassemblerInsn "pop" for 0x401ad3>, <DisassemblerInsn "pop" for 0x401ad4>, <DisassemblerInsn "ret" for 0x401ad6>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "xor" for 0x401abc>, <DisassemblerInsn "mov" for 0x401abe>, <DisassemblerInsn "mov" for 0x401ac5>, <DisassemblerInsn "add" for 0x401acc>, <DisassemblerInsn "pop" for 0x401ad3>, <DisassemblerInsn "pop" for 0x401ad4>, <DisassemblerInsn "ret" for 0x401ad6>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401192>, <DisassemblerInsn "mov" for 0x401199>, <DisassemblerInsn "jmp" for 0x4011a0>]'}], 'cfg_block_detailed_info': [{'block_Idx': 31, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x9e0]>', '<call~~0x5000d0>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x9e0]>', '<lea~~rsi, [rip + 0x1659]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1d0]>', '<mov~~rsi, qword ptr [rsp + 0x1b8]>', '<call~~0x5000d8>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x9e0]>', '<call~~0x500058>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<cmp~~dword ptr [rax + 0x2c], 0>', '<je~~0x401a77>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x9e0]>', '<lea~~rsi, [rip + 0x154a]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1a8]>', '<add~~rsp, 0x9e8>', '<pop~~rbx>', '<pop~~r14>', '<ret~~>']}, {'block_Idx': 43, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x1a8], eax>', '<mov~~eax, dword ptr [rsp + 0x1a8]>', '<add~~rsp, 0x9e8>', '<pop~~rbx>', '<pop~~r14>', '<ret~~>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1dc]>', '<mov~~dword ptr [rsp + 0x1a8], eax>', '<jmp~~0x401ac5>']}], 'cfg_edge_info': [(27, 31), (24, 27), (22, 24), (6, 8), (37, 43), (38, 24), (31, 37)]}]}
{'write_manifest': [4201079, 4201101, 4201114, 4201127, 4201148, 4201157]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_after/Os/smoothstreamingenc.o---after
The extraction of function: write_manifest
[4201079, 4201101, 4201114, 4201127, 4201148, 4201157]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 90 nodes and 143 edges in CFGEmulated.
It has 84 nodes and 113 edges in CDG.
It has 2309 nodes and 2911 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4201079, 4201101, 4201114, 4201127, 4201148, 4201157]
{4199819, 4200460, 4201101, 4198802, 4198931, 4198674, 4201114, 4199581, 4200991, 4199841, 4200482, 4198563, 4198821, 4201127, 4199859, 4200500, 4198709, 4198843, 4201148, 4201157, 4200646, 4200394, 4200020, 4199895, 4200536, 4199773, 4201057, 4198755, 4199784, 4199786, 4198767, 4201079, 4199933, 4200574}
[22, 40, 63, 50, 57, 23, 17, 37, 31, 46, 18, 26, 41, 55, 4, 51, 0, 24, 2, 32, 29, 60, 30, 47, 14, 21, 13, 65, 33, 8, 49, 7, 6, 77, 39, 64, 19, 67, 12, 61, 43, 44, 48, 11, 38, 15]
The execution time of patched slicing information extraction via angr: 0:03:15.522135
{'write_manifest': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401568>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4017ca>, <DisassemblerInsn "mov" for 0x4017d1>, <DisassemblerInsn "mov" for 0x4017d9>, <DisassemblerInsn "mov" for 0x4017e1>, <DisassemblerInsn "mov" for 0x4017e8>, <DisassemblerInsn "movsxd" for 0x4017ec>, <DisassemblerInsn "imul" for 0x4017ef>, <DisassemblerInsn "add" for 0x4017f6>, <DisassemblerInsn "mov" for 0x4017f9>, <DisassemblerInsn "mov" for 0x401801>, <DisassemblerInsn "mov" for 0x401804>, <DisassemblerInsn "call" for 0x401807>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401747>, <DisassemblerInsn "mov" for 0x40174f>, <DisassemblerInsn "mov" for 0x401757>, <DisassemblerInsn "add" for 0x40175e>, <DisassemblerInsn "mov" for 0x401761>, <DisassemblerInsn "mov" for 0x401763>, <DisassemblerInsn "mov" for 0x40176a>, <DisassemblerInsn "mov" for 0x401771>, <DisassemblerInsn "mov" for 0x401778>, <DisassemblerInsn "mov" for 0x401780>, <DisassemblerInsn "mov" for 0x401787>, <DisassemblerInsn "mov" for 0x40178e>, <DisassemblerInsn "add" for 0x401795>, <DisassemblerInsn "mov" for 0x401799>, <DisassemblerInsn "cmp" for 0x40179b>, <DisassemblerInsn "mov" for 0x40179e>, <DisassemblerInsn "mov" for 0x4017a5>, <DisassemblerInsn "mov" for 0x4017ad>, <DisassemblerInsn "mov" for 0x4017b4>, <DisassemblerInsn "mov" for 0x4017b6>, <DisassemblerInsn "mov" for 0x4017bd>, <DisassemblerInsn "jb" for 0x4017c4>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40191b>, <DisassemblerInsn "mov" for 0x401920>, <DisassemblerInsn "mov" for 0x401924>, <DisassemblerInsn "mov" for 0x401929>, <DisassemblerInsn "mov" for 0x40192e>, <DisassemblerInsn "mov" for 0x401936>, <DisassemblerInsn "imul" for 0x40193a>, <DisassemblerInsn "mov" for 0x401941>, <DisassemblerInsn "add" for 0x401944>, <DisassemblerInsn "add" for 0x401947>, <DisassemblerInsn "mov" for 0x40194e>, <DisassemblerInsn "mov" for 0x401951>, <DisassemblerInsn "mov" for 0x401958>, <DisassemblerInsn "imul" for 0x40195f>, <DisassemblerInsn "mov" for 0x401966>, <DisassemblerInsn "add" for 0x401969>, <DisassemblerInsn "add" for 0x40196c>, <DisassemblerInsn "mov" for 0x401973>, <DisassemblerInsn "imul" for 0x401976>, <DisassemblerInsn "mov" for 0x40197d>, <DisassemblerInsn "add" for 0x401980>, <DisassemblerInsn "add" for 0x401983>, <DisassemblerInsn "mov" for 0x40198a>, <DisassemblerInsn "imul" for 0x40198d>, <DisassemblerInsn "add" for 0x401994>, <DisassemblerInsn "add" for 0x401997>, <DisassemblerInsn "mov" for 0x40199d>, <DisassemblerInsn "lea" for 0x4019a0>, <DisassemblerInsn "mov" for 0x4019a7>, <DisassemblerInsn "mov" for 0x4019aa>, <DisassemblerInsn "mov" for 0x4019af>, <DisassemblerInsn "mov" for 0x4019b4>, <DisassemblerInsn "mov" for 0x4019b9>, <DisassemblerInsn "call" for 0x4019bb>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "add" for 0x401f19>, <DisassemblerInsn "ret" for 0x401f1d>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40156a>, <DisassemblerInsn "mov" for 0x401572>, <DisassemblerInsn "mov" for 0x40157a>, <DisassemblerInsn "lea" for 0x40157d>, <DisassemblerInsn "mov" for 0x401584>, <DisassemblerInsn "call" for 0x401586>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401353>, <DisassemblerInsn "mov" for 0x40135b>, <DisassemblerInsn "mov" for 0x401363>, <DisassemblerInsn "mov" for 0x40136b>, <DisassemblerInsn "mov" for 0x401373>, <DisassemblerInsn "mov" for 0x401377>, <DisassemblerInsn "cmp" for 0x40137b>, <DisassemblerInsn "jne" for 0x40137f>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4015d7>, <DisassemblerInsn "mov" for 0x4015df>, <DisassemblerInsn "mov" for 0x4015e1>, <DisassemblerInsn "mov" for 0x4015e8>, <DisassemblerInsn "cmp" for 0x4015ed>, <DisassemblerInsn "mov" for 0x4015f0>, <DisassemblerInsn "je" for 0x4015f7>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4015b3>, <DisassemblerInsn "mov" for 0x4015ba>, <DisassemblerInsn "mov" for 0x4015c1>, <DisassemblerInsn "lea" for 0x4015c9>, <DisassemblerInsn "mov" for 0x4015d0>, <DisassemblerInsn "call" for 0x4015d2>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4016cd>, <DisassemblerInsn "mov" for 0x4016d5>, <DisassemblerInsn "mov" for 0x4016dc>, <DisassemblerInsn "mov" for 0x4016e4>, <DisassemblerInsn "mov" for 0x4016ec>, <DisassemblerInsn "mov" for 0x4016f4>, <DisassemblerInsn "imul" for 0x4016f8>, <DisassemblerInsn "mov" for 0x4016ff>, <DisassemblerInsn "add" for 0x401702>, <DisassemblerInsn "add" for 0x401705>, <DisassemblerInsn "mov" for 0x40170c>, <DisassemblerInsn "mov" for 0x40170f>, <DisassemblerInsn "mov" for 0x401716>, <DisassemblerInsn "imul" for 0x40171d>, <DisassemblerInsn "add" for 0x401724>, <DisassemblerInsn "add" for 0x401727>, <DisassemblerInsn "mov" for 0x40172d>, <DisassemblerInsn "lea" for 0x401730>, <DisassemblerInsn "mov" for 0x401737>, <DisassemblerInsn "mov" for 0x40173b>, <DisassemblerInsn "mov" for 0x401740>, <DisassemblerInsn "call" for 0x401742>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40130a>, <DisassemblerInsn "mov" for 0x401311>, <DisassemblerInsn "mov" for 0x401319>, <DisassemblerInsn "imul" for 0x401321>, <DisassemblerInsn "add" for 0x401328>, <DisassemblerInsn "add" for 0x40132b>, <DisassemblerInsn "mov" for 0x401331>, <DisassemblerInsn "add" for 0x401334>, <DisassemblerInsn "mov" for 0x401337>, <DisassemblerInsn "mov" for 0x401339>, <DisassemblerInsn "mov" for 0x40133d>, <DisassemblerInsn "add" for 0x401344>, <DisassemblerInsn "mov" for 0x40134b>, <DisassemblerInsn "mov" for 0x401353>, <DisassemblerInsn "mov" for 0x40135b>, <DisassemblerInsn "mov" for 0x401363>, <DisassemblerInsn "mov" for 0x40136b>, <DisassemblerInsn "mov" for 0x401373>, <DisassemblerInsn "mov" for 0x401377>, <DisassemblerInsn "cmp" for 0x40137b>, <DisassemblerInsn "jne" for 0x40137f>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40158b>, <DisassemblerInsn "lea" for 0x401593>, <DisassemblerInsn "mov" for 0x40159a>, <DisassemblerInsn "call" for 0x40159c>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4015fd>, <DisassemblerInsn "mov" for 0x401604>, <DisassemblerInsn "mov" for 0x40160c>, <DisassemblerInsn "add" for 0x401614>, <DisassemblerInsn "mov" for 0x401618>, <DisassemblerInsn "add" for 0x401620>, <DisassemblerInsn "mov" for 0x401624>, <DisassemblerInsn "xor" for 0x40162c>, <DisassemblerInsn "mov" for 0x40162e>, <DisassemblerInsn "xor" for 0x401630>, <DisassemblerInsn "mov" for 0x401632>, <DisassemblerInsn "mov" for 0x401637>, <DisassemblerInsn "mov" for 0x40163e>, <DisassemblerInsn "mov" for 0x401646>, <DisassemblerInsn "mov" for 0x40164d>, <DisassemblerInsn "mov" for 0x401654>, <DisassemblerInsn "mov" for 0x40165c>, <DisassemblerInsn "mov" for 0x401664>, <DisassemblerInsn "mov" for 0x40166b>, <DisassemblerInsn "mov" for 0x401673>, <DisassemblerInsn "mov" for 0x40167a>, <DisassemblerInsn "mov" for 0x401681>, <DisassemblerInsn "mov" for 0x401688>, <DisassemblerInsn "mov" for 0x401690>, <DisassemblerInsn "mov" for 0x401693>, <DisassemblerInsn "mov" for 0x40169b>, <DisassemblerInsn "mov" for 0x40169e>, <DisassemblerInsn "mov" for 0x4016a2>, <DisassemblerInsn "mov" for 0x4016a6>, <DisassemblerInsn "cmp" for 0x4016ae>, <DisassemblerInsn "mov" for 0x4016b2>, <DisassemblerInsn "mov" for 0x4016b9>, <DisassemblerInsn "mov" for 0x4016c0>, <DisassemblerInsn "jne" for 0x4016c7>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401654>, <DisassemblerInsn "mov" for 0x40165c>, <DisassemblerInsn "mov" for 0x401664>, <DisassemblerInsn "mov" for 0x40166b>, <DisassemblerInsn "mov" for 0x401673>, <DisassemblerInsn "mov" for 0x40167a>, <DisassemblerInsn "mov" for 0x401681>, <DisassemblerInsn "mov" for 0x401688>, <DisassemblerInsn "mov" for 0x401690>, <DisassemblerInsn "mov" for 0x401693>, <DisassemblerInsn "mov" for 0x40169b>, <DisassemblerInsn "mov" for 0x40169e>, <DisassemblerInsn "mov" for 0x4016a2>, <DisassemblerInsn "mov" for 0x4016a6>, <DisassemblerInsn "cmp" for 0x4016ae>, <DisassemblerInsn "mov" for 0x4016b2>, <DisassemblerInsn "mov" for 0x4016b9>, <DisassemblerInsn "mov" for 0x4016c0>, <DisassemblerInsn "jne" for 0x4016c7>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401135>, <DisassemblerInsn "mov" for 0x40113d>, <DisassemblerInsn "add" for 0x401145>, <DisassemblerInsn "lea" for 0x40114c>, <DisassemblerInsn "mov" for 0x401154>, <DisassemblerInsn "xor" for 0x401159>, <DisassemblerInsn "mov" for 0x40115b>, <DisassemblerInsn "call" for 0x40115e>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019e2>, <DisassemblerInsn "mov" for 0x4019e7>, <DisassemblerInsn "mov" for 0x4019eb>, <DisassemblerInsn "mov" for 0x4019ef>, <DisassemblerInsn "add" for 0x4019f3>, <DisassemblerInsn "mov" for 0x4019f7>, <DisassemblerInsn "cmp" for 0x4019f9>, <DisassemblerInsn "mov" for 0x4019fc>, <DisassemblerInsn "mov" for 0x401a00>, <DisassemblerInsn "mov" for 0x401a05>, <DisassemblerInsn "mov" for 0x401a09>, <DisassemblerInsn "mov" for 0x401a0b>, <DisassemblerInsn "mov" for 0x401a12>, <DisassemblerInsn "jb" for 0x401a19>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x4010a3>, <DisassemblerInsn "push" for 0x4010a5>, <DisassemblerInsn "sub" for 0x4010a6>, <DisassemblerInsn "mov" for 0x4010ad>, <DisassemblerInsn "mov" for 0x4010b4>, <DisassemblerInsn "mov" for 0x4010b7>, <DisassemblerInsn "mov" for 0x4010bf>, <DisassemblerInsn "mov" for 0x4010c3>, <DisassemblerInsn "lea" for 0x4010cb>, <DisassemblerInsn "lea" for 0x4010d3>, <DisassemblerInsn "mov" for 0x4010db>, <DisassemblerInsn "lea" for 0x4010e3>, <DisassemblerInsn "mov" for 0x4010eb>, <DisassemblerInsn "add" for 0x4010f3>, <DisassemblerInsn "mov" for 0x4010f7>, <DisassemblerInsn "mov" for 0x4010ff>, <DisassemblerInsn "lea" for 0x401104>, <DisassemblerInsn "mov" for 0x40110b>, <DisassemblerInsn "call" for 0x40110d>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4013f9>, <DisassemblerInsn "mov" for 0x401401>, <DisassemblerInsn "mov" for 0x401409>, <DisassemblerInsn "mov" for 0x401411>, <DisassemblerInsn "mov" for 0x401418>, <DisassemblerInsn "mov" for 0x40141f>, <DisassemblerInsn "mov" for 0x401426>, <DisassemblerInsn "add" for 0x40142d>, <DisassemblerInsn "cmp" for 0x401431>, <DisassemblerInsn "mov" for 0x401434>, <DisassemblerInsn "mov" for 0x40143c>, <DisassemblerInsn "mov" for 0x40143f>, <DisassemblerInsn "mov" for 0x401447>, <DisassemblerInsn "mov" for 0x40144a>, <DisassemblerInsn "mov" for 0x401452>, <DisassemblerInsn "mov" for 0x401455>, <DisassemblerInsn "mov" for 0x40145d>, <DisassemblerInsn "mov" for 0x401460>, <DisassemblerInsn "mov" for 0x401468>, <DisassemblerInsn "mov" for 0x40146b>, <DisassemblerInsn "mov" for 0x401473>, <DisassemblerInsn "mov" for 0x40147a>, <DisassemblerInsn "mov" for 0x401481>, <DisassemblerInsn "mov" for 0x401489>, <DisassemblerInsn "mov" for 0x401490>, <DisassemblerInsn "jne" for 0x401497>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401112>, <DisassemblerInsn "mov" for 0x40111a>, <DisassemblerInsn "mov" for 0x401122>, <DisassemblerInsn "lea" for 0x401127>, <DisassemblerInsn "mov" for 0x40112e>, <DisassemblerInsn "call" for 0x401130>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a77>, <DisassemblerInsn "lea" for 0x401a7f>, <DisassemblerInsn "mov" for 0x401a86>, <DisassemblerInsn "call" for 0x401a88>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4015a1>, <DisassemblerInsn "cmp" for 0x4015a9>, <DisassemblerInsn "je" for 0x4015ad>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4018c6>, <DisassemblerInsn "mov" for 0x4018cb>, <DisassemblerInsn "mov" for 0x4018d0>, <DisassemblerInsn "mov" for 0x4018d4>, <DisassemblerInsn "mov" for 0x4018d9>, <DisassemblerInsn "mov" for 0x4018dd>, <DisassemblerInsn "mov" for 0x4018e4>, <DisassemblerInsn "mov" for 0x4018e8>, <DisassemblerInsn "mov" for 0x4018ed>, <DisassemblerInsn "mov" for 0x4018f0>, <DisassemblerInsn "mov" for 0x4018f5>, <DisassemblerInsn "mov" for 0x4018f8>, <DisassemblerInsn "mov" for 0x4018fc>, <DisassemblerInsn "mov" for 0x401900>, <DisassemblerInsn "cmp" for 0x401905>, <DisassemblerInsn "mov" for 0x401909>, <DisassemblerInsn "mov" for 0x40190d>, <DisassemblerInsn "mov" for 0x401911>, <DisassemblerInsn "jne" for 0x401915>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401822>, <DisassemblerInsn "cmp" for 0x40182a>, <DisassemblerInsn "je" for 0x40182e>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401778>, <DisassemblerInsn "mov" for 0x401780>, <DisassemblerInsn "mov" for 0x401787>, <DisassemblerInsn "mov" for 0x40178e>, <DisassemblerInsn "add" for 0x401795>, <DisassemblerInsn "mov" for 0x401799>, <DisassemblerInsn "cmp" for 0x40179b>, <DisassemblerInsn "mov" for 0x40179e>, <DisassemblerInsn "mov" for 0x4017a5>, <DisassemblerInsn "mov" for 0x4017ad>, <DisassemblerInsn "mov" for 0x4017b4>, <DisassemblerInsn "mov" for 0x4017b6>, <DisassemblerInsn "mov" for 0x4017bd>, <DisassemblerInsn "jb" for 0x4017c4>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40149d>, <DisassemblerInsn "mov" for 0x4014a5>, <DisassemblerInsn "mov" for 0x4014ac>, <DisassemblerInsn "mov" for 0x4014b3>, <DisassemblerInsn "mov" for 0x4014bb>, <DisassemblerInsn "mov" for 0x4014c3>, <DisassemblerInsn "mov" for 0x4014cb>, <DisassemblerInsn "mov" for 0x4014d2>, <DisassemblerInsn "mov" for 0x4014da>, <DisassemblerInsn "cmp" for 0x4014e1>, <DisassemblerInsn "sete" for 0x4014e4>, <DisassemblerInsn "mov" for 0x4014e8>, <DisassemblerInsn "xor" for 0x4014f0>, <DisassemblerInsn "cmp" for 0x4014f2>, <DisassemblerInsn "cmove" for 0x4014f5>, <DisassemblerInsn "xor" for 0x4014f9>, <DisassemblerInsn "cmp" for 0x4014fb>, <DisassemblerInsn "cmove" for 0x4014fe>, <DisassemblerInsn "xor" for 0x401502>, <DisassemblerInsn "cmp" for 0x401504>, <DisassemblerInsn "cmove" for 0x401507>, <DisassemblerInsn "mov" for 0x40150a>, <DisassemblerInsn "add" for 0x40150d>, <DisassemblerInsn "mov" for 0x401511>, <DisassemblerInsn "mov" for 0x401519>, <DisassemblerInsn "cmp" for 0x40151c>, <DisassemblerInsn "mov" for 0x40151e>, <DisassemblerInsn "cmovg" for 0x401520>, <DisassemblerInsn "cmp" for 0x401523>, <DisassemblerInsn "mov" for 0x401526>, <DisassemblerInsn "cmovg" for 0x401529>, <DisassemblerInsn "cmp" for 0x40152c>, <DisassemblerInsn "cmove" for 0x40152f>, <DisassemblerInsn "mov" for 0x401533>, <DisassemblerInsn "cmp" for 0x40153a>, <DisassemblerInsn "cmove" for 0x40153d>, <DisassemblerInsn "mov" for 0x401540>, <DisassemblerInsn "mov" for 0x401547>, <DisassemblerInsn "lea" for 0x40154f>, <DisassemblerInsn "mov" for 0x401556>, <DisassemblerInsn "call" for 0x401558>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4013be>, <DisassemblerInsn "mov" for 0x4013c5>, <DisassemblerInsn "mov" for 0x4013cc>, <DisassemblerInsn "mov" for 0x4013d3>, <DisassemblerInsn "add" for 0x4013da>, <DisassemblerInsn "mov" for 0x4013dd>, <DisassemblerInsn "mov" for 0x4013e4>, <DisassemblerInsn "mov" for 0x4013eb>, <DisassemblerInsn "mov" for 0x4013f2>, <DisassemblerInsn "mov" for 0x4013f9>, <DisassemblerInsn "mov" for 0x401401>, <DisassemblerInsn "mov" for 0x401409>, <DisassemblerInsn "mov" for 0x401411>, <DisassemblerInsn "mov" for 0x401418>, <DisassemblerInsn "mov" for 0x40141f>, <DisassemblerInsn "mov" for 0x401426>, <DisassemblerInsn "add" for 0x40142d>, <DisassemblerInsn "cmp" for 0x401431>, <DisassemblerInsn "mov" for 0x401434>, <DisassemblerInsn "mov" for 0x40143c>, <DisassemblerInsn "mov" for 0x40143f>, <DisassemblerInsn "mov" for 0x401447>, <DisassemblerInsn "mov" for 0x40144a>, <DisassemblerInsn "mov" for 0x401452>, <DisassemblerInsn "mov" for 0x401455>, <DisassemblerInsn "mov" for 0x40145d>, <DisassemblerInsn "mov" for 0x401460>, <DisassemblerInsn "mov" for 0x401468>, <DisassemblerInsn "mov" for 0x40146b>, <DisassemblerInsn "mov" for 0x401473>, <DisassemblerInsn "mov" for 0x40147a>, <DisassemblerInsn "mov" for 0x401481>, <DisassemblerInsn "mov" for 0x401489>, <DisassemblerInsn "mov" for 0x401490>, <DisassemblerInsn "jne" for 0x401497>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ac5>, <DisassemblerInsn "add" for 0x401acc>, <DisassemblerInsn "pop" for 0x401ad3>, <DisassemblerInsn "pop" for 0x401ad4>, <DisassemblerInsn "ret" for 0x401ad6>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a61>, <DisassemblerInsn "lea" for 0x401a69>, <DisassemblerInsn "mov" for 0x401a70>, <DisassemblerInsn "call" for 0x401a72>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401834>, <DisassemblerInsn "mov" for 0x40183b>, <DisassemblerInsn "mov" for 0x401842>, <DisassemblerInsn "lea" for 0x40184a>, <DisassemblerInsn "mov" for 0x401851>, <DisassemblerInsn "call" for 0x401853>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011a5>, <DisassemblerInsn "lea" for 0x4011ad>, <DisassemblerInsn "mov" for 0x4011b4>, <DisassemblerInsn "call" for 0x4011b6>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "sub" for 0x401da4>, <DisassemblerInsn "mov" for 0x401da8>, <DisassemblerInsn "mov" for 0x401dad>, <DisassemblerInsn "mov" for 0x401db1>, <DisassemblerInsn "mov" for 0x401db5>, <DisassemblerInsn "mov" for 0x401dba>, <DisassemblerInsn "mov" for 0x401dbf>, <DisassemblerInsn "add" for 0x401dc2>, <DisassemblerInsn "mov" for 0x401dc8>, <DisassemblerInsn "mov" for 0x401dcd>, <DisassemblerInsn "mov" for 0x401dd3>, <DisassemblerInsn "cmp" for 0x401dd7>, <DisassemblerInsn "jl" for 0x401dda>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40116f>, <DisassemblerInsn "mov" for 0x401177>, <DisassemblerInsn "mov" for 0x40117f>, <DisassemblerInsn "lea" for 0x401184>, <DisassemblerInsn "mov" for 0x40118b>, <DisassemblerInsn "call" for 0x40118d>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401163>, <DisassemblerInsn "cmp" for 0x40116a>, <DisassemblerInsn "jge" for 0x40116d>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "xor" for 0x401abc>, <DisassemblerInsn "mov" for 0x401abe>, <DisassemblerInsn "mov" for 0x401ac5>, <DisassemblerInsn "add" for 0x401acc>, <DisassemblerInsn "pop" for 0x401ad3>, <DisassemblerInsn "pop" for 0x401ad4>, <DisassemblerInsn "ret" for 0x401ad6>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401858>, <DisassemblerInsn "mov" for 0x401860>, <DisassemblerInsn "mov" for 0x401862>, <DisassemblerInsn "mov" for 0x401869>, <DisassemblerInsn "cmp" for 0x40186e>, <DisassemblerInsn "mov" for 0x401871>, <DisassemblerInsn "je" for 0x401878>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401aa7>, <DisassemblerInsn "mov" for 0x401aaf>, <DisassemblerInsn "call" for 0x401ab7>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40155d>, <DisassemblerInsn "test" for 0x401564>, <DisassemblerInsn "jne" for 0x401566>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019c0>, <DisassemblerInsn "mov" for 0x4019c5>, <DisassemblerInsn "mov" for 0x4019cd>, <DisassemblerInsn "add" for 0x4019d1>, <DisassemblerInsn "mov" for 0x4019d4>, <DisassemblerInsn "mov" for 0x4019d6>, <DisassemblerInsn "mov" for 0x4019da>, <DisassemblerInsn "mov" for 0x4019de>, <DisassemblerInsn "mov" for 0x4019e2>, <DisassemblerInsn "mov" for 0x4019e7>, <DisassemblerInsn "mov" for 0x4019eb>, <DisassemblerInsn "mov" for 0x4019ef>, <DisassemblerInsn "add" for 0x4019f3>, <DisassemblerInsn "mov" for 0x4019f7>, <DisassemblerInsn "cmp" for 0x4019f9>, <DisassemblerInsn "mov" for 0x4019fc>, <DisassemblerInsn "mov" for 0x401a00>, <DisassemblerInsn "mov" for 0x401a05>, <DisassemblerInsn "mov" for 0x401a09>, <DisassemblerInsn "mov" for 0x401a0b>, <DisassemblerInsn "mov" for 0x401a12>, <DisassemblerInsn "jb" for 0x401a19>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011bb>, <DisassemblerInsn "mov" for 0x4011c3>, <DisassemblerInsn "add" for 0x4011c6>, <DisassemblerInsn "mov" for 0x4011ca>, <DisassemblerInsn "mov" for 0x4011d2>, <DisassemblerInsn "mov" for 0x4011d5>, <DisassemblerInsn "xor" for 0x4011dc>, <DisassemblerInsn "xor" for 0x4011de>, <DisassemblerInsn "cmp" for 0x4011e0>, <DisassemblerInsn "mov" for 0x4011e3>, <DisassemblerInsn "mov" for 0x4011e5>, <DisassemblerInsn "mov" for 0x4011ec>, <DisassemblerInsn "mov" for 0x4011ee>, <DisassemblerInsn "mov" for 0x4011f5>, <DisassemblerInsn "mov" for 0x4011fd>, <DisassemblerInsn "mov" for 0x4011ff>, <DisassemblerInsn "mov" for 0x401206>, <DisassemblerInsn "je" for 0x40120d>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40180c>, <DisassemblerInsn "lea" for 0x401814>, <DisassemblerInsn "mov" for 0x40181b>, <DisassemblerInsn "call" for 0x40181d>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a1f>, <DisassemblerInsn "mov" for 0x401a26>, <DisassemblerInsn "mov" for 0x401a2e>, <DisassemblerInsn "mov" for 0x401a36>, <DisassemblerInsn "mov" for 0x401a3d>, <DisassemblerInsn "movsxd" for 0x401a41>, <DisassemblerInsn "imul" for 0x401a44>, <DisassemblerInsn "add" for 0x401a4b>, <DisassemblerInsn "mov" for 0x401a4e>, <DisassemblerInsn "mov" for 0x401a56>, <DisassemblerInsn "mov" for 0x401a59>, <DisassemblerInsn "call" for 0x401a5c>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40187e>, <DisassemblerInsn "mov" for 0x401885>, <DisassemblerInsn "mov" for 0x40188d>, <DisassemblerInsn "add" for 0x401895>, <DisassemblerInsn "mov" for 0x401899>, <DisassemblerInsn "add" for 0x40189e>, <DisassemblerInsn "mov" for 0x4018a2>, <DisassemblerInsn "xor" for 0x4018a7>, <DisassemblerInsn "mov" for 0x4018a9>, <DisassemblerInsn "xor" for 0x4018ab>, <DisassemblerInsn "mov" for 0x4018ad>, <DisassemblerInsn "mov" for 0x4018b2>, <DisassemblerInsn "mov" for 0x4018b6>, <DisassemblerInsn "mov" for 0x4018bb>, <DisassemblerInsn "mov" for 0x4018bf>, <DisassemblerInsn "mov" for 0x4018c6>, <DisassemblerInsn "mov" for 0x4018cb>, <DisassemblerInsn "mov" for 0x4018d0>, <DisassemblerInsn "mov" for 0x4018d4>, <DisassemblerInsn "mov" for 0x4018d9>, <DisassemblerInsn "mov" for 0x4018dd>, <DisassemblerInsn "mov" for 0x4018e4>, <DisassemblerInsn "mov" for 0x4018e8>, <DisassemblerInsn "mov" for 0x4018ed>, <DisassemblerInsn "mov" for 0x4018f0>, <DisassemblerInsn "mov" for 0x4018f5>, <DisassemblerInsn "mov" for 0x4018f8>, <DisassemblerInsn "mov" for 0x4018fc>, <DisassemblerInsn "mov" for 0x401900>, <DisassemblerInsn "cmp" for 0x401905>, <DisassemblerInsn "mov" for 0x401909>, <DisassemblerInsn "mov" for 0x40190d>, <DisassemblerInsn "mov" for 0x401911>, <DisassemblerInsn "jne" for 0x401915>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a9a>, <DisassemblerInsn "call" for 0x401aa2>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401192>, <DisassemblerInsn "mov" for 0x401199>, <DisassemblerInsn "jmp" for 0x4011a0>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a8d>, <DisassemblerInsn "call" for 0x401a95>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401213>, <DisassemblerInsn "mov" for 0x40121a>, <DisassemblerInsn "mov" for 0x401222>, <DisassemblerInsn "mov" for 0x40122a>, <DisassemblerInsn "mov" for 0x40122e>, <DisassemblerInsn "mov" for 0x401236>, <DisassemblerInsn "mov" for 0x40123a>, <DisassemblerInsn "mov" for 0x401242>, <DisassemblerInsn "mov" for 0x401244>, <DisassemblerInsn "xor" for 0x40124c>, <DisassemblerInsn "mov" for 0x40124e>, <DisassemblerInsn "xor" for 0x401250>, <DisassemblerInsn "mov" for 0x401252>, <DisassemblerInsn "mov" for 0x401255>, <DisassemblerInsn "mov" for 0x40125d>, <DisassemblerInsn "mov" for 0x40125f>, <DisassemblerInsn "mov" for 0x401266>, <DisassemblerInsn "mov" for 0x401268>, <DisassemblerInsn "mov" for 0x40126f>, <DisassemblerInsn "mov" for 0x401277>, <DisassemblerInsn "mov" for 0x401279>, <DisassemblerInsn "mov" for 0x401280>, <DisassemblerInsn "mov" for 0x401287>, <DisassemblerInsn "mov" for 0x40128f>, <DisassemblerInsn "mov" for 0x401297>, <DisassemblerInsn "mov" for 0x40129e>, <DisassemblerInsn "mov" for 0x4012a5>, <DisassemblerInsn "mov" for 0x4012ad>, <DisassemblerInsn "mov" for 0x4012b5>, <DisassemblerInsn "mov" for 0x4012bd>, <DisassemblerInsn "mov" for 0x4012c5>, <DisassemblerInsn "mov" for 0x4012cd>, <DisassemblerInsn "mov" for 0x4012d4>, <DisassemblerInsn "mov" for 0x4012db>, <DisassemblerInsn "imul" for 0x4012e3>, <DisassemblerInsn "add" for 0x4012ea>, <DisassemblerInsn "add" for 0x4012ed>, <DisassemblerInsn "mov" for 0x4012f4>, <DisassemblerInsn "mov" for 0x4012f6>, <DisassemblerInsn "cmp" for 0x4012fd>, <DisassemblerInsn "mov" for 0x401300>, <DisassemblerInsn "jle" for 0x401308>]'}], 'cfg_block_detailed_info': [{'block_Idx': 22, 'blockInsts': ['<jmp~~0x40158b>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x1ac]>', '<mov~~rax, qword ptr [rsp + 0xf0]>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~esi, dword ptr [rsp + 0xe4]>', '<mov~~rdi, qword ptr [rcx + 0x20]>', '<movsxd~~rsi, esi>', '<imul~~rsi, rsi, 0x8480>', '<add~~rdi, rsi>', '<mov~~rsi, qword ptr [rsp + 0x9e0]>', '<mov~~ecx, dword ptr [rcx + 0x10]>', '<mov~~r8d, dword ptr [rax]>', '<call~~0x401da4>']}, {'block_Idx': 63, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x90]>', '<mov~~rdx, qword ptr [rsp + 0x180]>', '<mov~~eax, dword ptr [rsp + 0x8c]>', '<add~~eax, 1>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0xac], edx>', '<mov~~dword ptr [rsp + 0xb0], ecx>', '<mov~~dword ptr [rsp + 0xb4], eax>', '<mov~~rdx, qword ptr [rsp + 0x90]>', '<mov~~esi, dword ptr [rsp + 0xac]>', '<mov~~eax, dword ptr [rsp + 0xb0]>', '<mov~~ecx, dword ptr [rsp + 0xb4]>', '<add~~rdx, 1>', '<mov~~edi, esi>', '<cmp~~rdx, rdi>', '<mov~~dword ptr [rsp + 0xcc], esi>', '<mov~~qword ptr [rsp + 0xd0], rdx>', '<mov~~dword ptr [rsp + 0xd8], ecx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0xdc], ecx>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<jb~~0x401654>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x30]>', '<mov~~edx, dword ptr [rsp + 0x2c]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~r10, qword ptr [rsp + 0x40]>', '<mov~~rdi, qword ptr [rsp + 0x9e0]>', '<mov~~ecx, dword ptr [r10 + 0x60]>', '<imul~~r9, rsi, 0x8480>', '<mov~~r8, rax>', '<add~~r8, r9>', '<add~~r8, 0x8468>', '<mov~~r8, qword ptr [r8]>', '<mov~~r9d, dword ptr [r10 + 0x1d0]>', '<mov~~ebx, dword ptr [r10 + 0x1d4]>', '<imul~~r11, rsi, 0x8480>', '<mov~~r10, rax>', '<add~~r10, r11>', '<add~~r10, 0x8478>', '<mov~~r11d, dword ptr [r10]>', '<imul~~r14, rsi, 0x8480>', '<mov~~r10, rax>', '<add~~r10, r14>', '<add~~r10, 0x847c>', '<mov~~r10d, dword ptr [r10]>', '<imul~~rsi, rsi, 0x8480>', '<add~~rax, rsi>', '<add~~rax, 0x8470>', '<mov~~rax, qword ptr [rax]>', '<lea~~rsi, [rip + 0x169b]>', '<mov~~dword ptr [rsp], ebx>', '<mov~~dword ptr [rsp + 8], r11d>', '<mov~~dword ptr [rsp + 0x10], r10d>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 57, 'blockInsts': ['<add~~rsp, 0x78>', '<ret~~>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rdi, qword ptr [rsp + 0x9e0]>', '<mov~~edx, dword ptr [rax + 0x10]>', '<lea~~rsi, [rip + 0x1913]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~rcx, qword ptr [rsp + 0x130]>', '<mov~~rdx, qword ptr [rsp + 0x140]>', '<mov~~qword ptr [rsp + 0x118], rdx>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0xc], 0>', '<jne~~0x4013be>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x180]>', '<mov~~ecx, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0xe0], ecx>', '<mov~~eax, 0xffffffff>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<je~~0x4017ca>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x100]>', '<mov~~edx, dword ptr [rsp + 0xec]>', '<mov~~rdi, qword ptr [rsp + 0x9e0]>', '<lea~~rsi, [rip + 0x1909]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x90]>', '<mov~~edx, dword ptr [rsp + 0x8c]>', '<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~r10, qword ptr [rsp + 0xa0]>', '<mov~~rdi, qword ptr [rsp + 0x9e0]>', '<mov~~ecx, dword ptr [r10 + 0x60]>', '<imul~~r9, rsi, 0x8480>', '<mov~~r8, rax>', '<add~~r8, r9>', '<add~~r8, 0x8468>', '<mov~~r8, qword ptr [r8]>', '<mov~~r9d, dword ptr [r10 + 0x94]>', '<mov~~r10d, dword ptr [r10 + 0x98]>', '<imul~~rsi, rsi, 0x8480>', '<add~~rax, rsi>', '<add~~rax, 0x8470>', '<mov~~rax, qword ptr [rax]>', '<lea~~rsi, [rip + 0x181a]>', '<mov~~dword ptr [rsp], r10d>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x13c]>', '<mov~~rax, qword ptr [rsp + 0x148]>', '<mov~~rdx, qword ptr [rsp + 0x130]>', '<imul~~rdx, rdx, 0x8480>', '<add~~rax, rdx>', '<add~~rax, 0x8460>', '<mov~~rax, qword ptr [rax]>', '<add~~ecx, -1>', '<mov~~ecx, ecx>', '<mov~~rcx, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rcx + 0x800]>', '<add~~rax, qword ptr [rcx + 0x808]>', '<mov~~qword ptr [rsp + 0x140], rax>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~rcx, qword ptr [rsp + 0x130]>', '<mov~~rdx, qword ptr [rsp + 0x140]>', '<mov~~qword ptr [rsp + 0x118], rdx>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0xc], 0>', '<jne~~0x4013be>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x9e0]>', '<lea~~rsi, [rip + 0x193c]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0xe0]>', '<mov~~rax, qword ptr [rsp + 0x1c8]>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<add~~rcx, 0x20>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<add~~rax, 0x30>', '<mov~~qword ptr [rsp + 0xc0], rax>', '<xor~~eax, eax>', '<mov~~edx, eax>', '<xor~~ecx, ecx>', '<mov~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0xcc], esi>', '<mov~~qword ptr [rsp + 0xd0], rdx>', '<mov~~dword ptr [rsp + 0xd8], ecx>', '<mov~~dword ptr [rsp + 0xdc], eax>', '<mov~~rsi, qword ptr [rsp + 0xc0]>', '<mov~~r8, qword ptr [rsp + 0xb8]>', '<mov~~edx, dword ptr [rsp + 0xcc]>', '<mov~~rdi, qword ptr [rsp + 0xd0]>', '<mov~~eax, dword ptr [rsp + 0xd8]>', '<mov~~ecx, dword ptr [rsp + 0xdc]>', '<mov~~dword ptr [rsp + 0x8c], eax>', '<mov~~qword ptr [rsp + 0x90], rdi>', '<mov~~r8, qword ptr [r8]>', '<mov~~qword ptr [rsp + 0x98], r8>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rsi + rdi*8]>', '<mov~~rsi, qword ptr [rsi + 8]>', '<mov~~qword ptr [rsp + 0xa0], rsi>', '<cmp~~dword ptr [rsi + 0xc], 0>', '<mov~~dword ptr [rsp + 0xac], edx>', '<mov~~dword ptr [rsp + 0xb0], ecx>', '<mov~~dword ptr [rsp + 0xb4], eax>', '<jne~~0x401778>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0xc0]>', '<mov~~r8, qword ptr [rsp + 0xb8]>', '<mov~~edx, dword ptr [rsp + 0xcc]>', '<mov~~rdi, qword ptr [rsp + 0xd0]>', '<mov~~eax, dword ptr [rsp + 0xd8]>', '<mov~~ecx, dword ptr [rsp + 0xdc]>', '<mov~~dword ptr [rsp + 0x8c], eax>', '<mov~~qword ptr [rsp + 0x90], rdi>', '<mov~~r8, qword ptr [r8]>', '<mov~~qword ptr [rsp + 0x98], r8>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rsi + rdi*8]>', '<mov~~rsi, qword ptr [rsi + 8]>', '<mov~~qword ptr [rsp + 0xa0], rsi>', '<cmp~~dword ptr [rsi + 0xc], 0>', '<mov~~dword ptr [rsp + 0xac], edx>', '<mov~~dword ptr [rsp + 0xb0], ecx>', '<mov~~dword ptr [rsp + 0xb4], eax>', '<jne~~0x401778>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1c8]>', '<mov~~rsi, qword ptr [rsp + 0x1d0]>', '<add~~rcx, 0x4b0>', '<lea~~rdi, [rsp + 0x9e0]>', '<mov~~edx, 2>', '<xor~~eax, eax>', '<mov~~r8d, eax>', '<call~~0x5000c0>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x30]>', '<mov~~esi, dword ptr [rsp + 0x4c]>', '<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~ecx, dword ptr [rsp + 0x54]>', '<add~~rdx, 1>', '<mov~~edi, esi>', '<cmp~~rdx, rdi>', '<mov~~dword ptr [rsp + 0x6c], esi>', '<mov~~qword ptr [rsp + 0x70], rdx>', '<mov~~dword ptr [rsp + 0x7c], ecx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x80], ecx>', '<mov~~dword ptr [rsp + 0x88], eax>', '<jb~~0x4018c6>']}, {'block_Idx': 0, 'blockInsts': ['<push~~r14>', '<push~~rbx>', '<sub~~rsp, 0x9e8>', '<mov~~dword ptr [rsp + 0x1ac], esi>', '<mov~~rcx, rdi>', '<mov~~qword ptr [rsp + 0x1c8], rcx>', '<mov~~rax, qword ptr [rcx + 0x18]>', '<mov~~qword ptr [rsp + 0x1b0], rax>', '<lea~~rax, [rsp + 0x9e0]>', '<lea~~rdi, [rsp + 0x5e0]>', '<mov~~qword ptr [rsp + 0x1b8], rdi>', '<lea~~rax, [rsp + 0x1e0]>', '<mov~~qword ptr [rsp + 0x1d0], rax>', '<add~~rcx, 0x38>', '<mov~~qword ptr [rsp + 0x1c0], rcx>', '<mov~~esi, 0x400>', '<lea~~rdx, [rip + 0x1ce2]>', '<mov~~al, 0>', '<call~~0x500020>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x118]>', '<mov~~r9, qword ptr [rsp + 0x158]>', '<mov~~r8, qword ptr [rsp + 0x130]>', '<mov~~edi, dword ptr [rsp + 0x108]>', '<mov~~esi, dword ptr [rsp + 0x10c]>', '<mov~~ecx, dword ptr [rsp + 0x110]>', '<mov~~eax, dword ptr [rsp + 0x114]>', '<add~~r8, 1>', '<cmp~~r8, r9>', '<mov~~qword ptr [rsp + 0x160], r8>', '<mov~~r8d, eax>', '<mov~~dword ptr [rsp + 0x168], r8d>', '<mov~~r8d, ecx>', '<mov~~dword ptr [rsp + 0x16c], r8d>', '<mov~~r8, rdx>', '<mov~~qword ptr [rsp + 0x170], r8>', '<mov~~r8d, esi>', '<mov~~dword ptr [rsp + 0x178], r8d>', '<mov~~r8d, edi>', '<mov~~dword ptr [rsp + 0x17c], r8d>', '<mov~~dword ptr [rsp + 0x190], edi>', '<mov~~dword ptr [rsp + 0x194], esi>', '<mov~~qword ptr [rsp + 0x198], rdx>', '<mov~~dword ptr [rsp + 0x1a0], ecx>', '<mov~~dword ptr [rsp + 0x1a4], eax>', '<jne~~0x401287>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1c0]>', '<mov~~rdi, qword ptr [rsp + 0x1d0]>', '<mov~~esi, 0x400>', '<lea~~rdx, [rip + 0x1ccb]>', '<mov~~al, 0>', '<call~~0x500020>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x9e0]>', '<lea~~rsi, [rip + 0x1659]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<cmp~~dword ptr [rax + 0x28], 0>', '<je~~0x401822>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x60]>', '<mov~~r8, qword ptr [rsp + 0x58]>', '<mov~~edx, dword ptr [rsp + 0x6c]>', '<mov~~rdi, qword ptr [rsp + 0x70]>', '<mov~~eax, dword ptr [rsp + 0x7c]>', '<mov~~ecx, dword ptr [rsp + 0x80]>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<mov~~qword ptr [rsp + 0x30], rdi>', '<mov~~r8, qword ptr [r8]>', '<mov~~qword ptr [rsp + 0x38], r8>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rsi + rdi*8]>', '<mov~~rsi, qword ptr [rsi + 8]>', '<mov~~qword ptr [rsp + 0x40], rsi>', '<cmp~~dword ptr [rsi + 0xc], 1>', '<mov~~dword ptr [rsp + 0x4c], edx>', '<mov~~dword ptr [rsp + 0x50], ecx>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jne~~0x4019e2>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<cmp~~dword ptr [rax + 0x2c], 0>', '<je~~0x401a77>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x90]>', '<mov~~esi, dword ptr [rsp + 0xac]>', '<mov~~eax, dword ptr [rsp + 0xb0]>', '<mov~~ecx, dword ptr [rsp + 0xb4]>', '<add~~rdx, 1>', '<mov~~edi, esi>', '<cmp~~rdx, rdi>', '<mov~~dword ptr [rsp + 0xcc], esi>', '<mov~~qword ptr [rsp + 0xd0], rdx>', '<mov~~dword ptr [rsp + 0xd8], ecx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0xdc], ecx>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<jb~~0x401654>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~edi, dword ptr [rsp + 0x1ac]>', '<mov~~esi, dword ptr [rsp + 0x190]>', '<mov~~r9d, dword ptr [rsp + 0x194]>', '<mov~~rdx, qword ptr [rsp + 0x198]>', '<mov~~r8d, dword ptr [rsp + 0x1a0]>', '<mov~~ecx, dword ptr [rsp + 0x1a4]>', '<mov~~dword ptr [rsp + 0xe8], r9d>', '<mov~~dword ptr [rsp + 0xec], esi>', '<cmp~~edi, 0>', '<sete~~sil>', '<mov~~byte ptr [rsp + 0x107], sil>', '<xor~~esi, esi>', '<cmp~~edi, 0>', '<cmove~~rdx, rsi>', '<xor~~esi, esi>', '<cmp~~edi, 0>', '<cmove~~r8d, esi>', '<xor~~esi, esi>', '<cmp~~edi, 0>', '<cmove~~ecx, esi>', '<mov~~rsi, rax>', '<add~~rsi, 8>', '<mov~~qword ptr [rsp + 0xf0], rsi>', '<mov~~esi, dword ptr [rax + 8]>', '<cmp~~ecx, esi>', '<mov~~eax, ecx>', '<cmovg~~eax, esi>', '<cmp~~r8d, esi>', '<mov~~edi, r8d>', '<cmovg~~edi, esi>', '<cmp~~esi, 0>', '<cmove~~edi, r8d>', '<mov~~dword ptr [rsp + 0xfc], edi>', '<cmp~~esi, 0>', '<cmove~~eax, ecx>', '<mov~~dword ptr [rsp + 0x100], eax>', '<mov~~rdi, qword ptr [rsp + 0x9e0]>', '<lea~~rsi, [rip + 0x18fa]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x12c]>', '<mov~~ecx, dword ptr [rsp + 0x13c]>', '<mov~~esi, dword ptr [rsp + 0x120]>', '<mov~~edx, dword ptr [rsp + 0x124]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp + 0x108], esi>', '<mov~~dword ptr [rsp + 0x10c], edx>', '<mov~~dword ptr [rsp + 0x110], ecx>', '<mov~~dword ptr [rsp + 0x114], eax>', '<mov~~rdx, qword ptr [rsp + 0x118]>', '<mov~~r9, qword ptr [rsp + 0x158]>', '<mov~~r8, qword ptr [rsp + 0x130]>', '<mov~~edi, dword ptr [rsp + 0x108]>', '<mov~~esi, dword ptr [rsp + 0x10c]>', '<mov~~ecx, dword ptr [rsp + 0x110]>', '<mov~~eax, dword ptr [rsp + 0x114]>', '<add~~r8, 1>', '<cmp~~r8, r9>', '<mov~~qword ptr [rsp + 0x160], r8>', '<mov~~r8d, eax>', '<mov~~dword ptr [rsp + 0x168], r8d>', '<mov~~r8d, ecx>', '<mov~~dword ptr [rsp + 0x16c], r8d>', '<mov~~r8, rdx>', '<mov~~qword ptr [rsp + 0x170], r8>', '<mov~~r8d, esi>', '<mov~~dword ptr [rsp + 0x178], r8d>', '<mov~~r8d, edi>', '<mov~~dword ptr [rsp + 0x17c], r8d>', '<mov~~dword ptr [rsp + 0x190], edi>', '<mov~~dword ptr [rsp + 0x194], esi>', '<mov~~qword ptr [rsp + 0x198], rdx>', '<mov~~dword ptr [rsp + 0x1a0], ecx>', '<mov~~dword ptr [rsp + 0x1a4], eax>', '<jne~~0x401287>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1a8]>', '<add~~rsp, 0x9e8>', '<pop~~rbx>', '<pop~~r14>', '<ret~~>']}, {'block_Idx': 65, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x9e0]>', '<lea~~rsi, [rip + 0x154a]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xfc]>', '<mov~~edx, dword ptr [rsp + 0xe8]>', '<mov~~rdi, qword ptr [rsp + 0x9e0]>', '<lea~~rsi, [rip + 0x1779]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x9e0]>', '<lea~~rsi, [rip + 0x1c74]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 49, 'blockInsts': ['<sub~~rsp, 0x78>', '<mov~~dword ptr [rsp + 0x4c], r8d>', '<mov~~dword ptr [rsp + 0x50], ecx>', '<mov~~dword ptr [rsp + 0x54], edx>', '<mov~~qword ptr [rsp + 0x58], rsi>', '<mov~~qword ptr [rsp + 0x60], rdi>', '<mov~~rax, rdi>', '<add~~rax, 0x8450>', '<mov~~qword ptr [rsp + 0x68], rax>', '<mov~~eax, dword ptr [rdi + 0x8450]>', '<mov~~dword ptr [rsp + 0x74], eax>', '<cmp~~eax, 1>', '<jl~~0x401f19>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1d0]>', '<mov~~rdi, qword ptr [rsp + 0x1c8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x1c7e]>', '<mov~~al, 0>', '<call~~0x500018>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~dword ptr [rsp + 0x1dc], eax>', '<cmp~~eax, 0>', '<jge~~0x4011a5>']}, {'block_Idx': 77, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x1a8], eax>', '<mov~~eax, dword ptr [rsp + 0x1a8]>', '<add~~rsp, 0x9e8>', '<pop~~rbx>', '<pop~~r14>', '<ret~~>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x180]>', '<mov~~ecx, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x84], ecx>', '<mov~~eax, 0xffffffff>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x88], eax>', '<je~~0x401a1f>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1d0]>', '<mov~~rsi, qword ptr [rsp + 0x1b8]>', '<call~~0x5000d8>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x107]>', '<test~~al, 1>', '<jne~~0x40156a>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x30]>', '<mov~~rdx, qword ptr [rsp + 0x180]>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<add~~eax, 1>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0x4c], edx>', '<mov~~dword ptr [rsp + 0x50], ecx>', '<mov~~dword ptr [rsp + 0x54], eax>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<mov~~esi, dword ptr [rsp + 0x4c]>', '<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~ecx, dword ptr [rsp + 0x54]>', '<add~~rdx, 1>', '<mov~~edi, esi>', '<cmp~~rdx, rdi>', '<mov~~dword ptr [rsp + 0x6c], esi>', '<mov~~qword ptr [rsp + 0x70], rdx>', '<mov~~dword ptr [rsp + 0x7c], ecx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x80], ecx>', '<mov~~dword ptr [rsp + 0x88], eax>', '<jb~~0x4018c6>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1c8]>', '<mov~~rcx, rax>', '<add~~rcx, 0x2c>', '<mov~~qword ptr [rsp + 0x180], rcx>', '<mov~~edx, dword ptr [rax + 0x2c]>', '<mov~~dword ptr [rsp + 0x18c], edx>', '<xor~~eax, eax>', '<xor~~ecx, ecx>', '<cmp~~edx, 0>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x190], edx>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x194], edx>', '<mov~~qword ptr [rsp + 0x198], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x1a0], ecx>', '<mov~~dword ptr [rsp + 0x1a4], eax>', '<je~~0x40149d>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x9e0]>', '<lea~~rsi, [rip + 0x179f]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x1ac]>', '<mov~~rax, qword ptr [rsp + 0xf0]>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~esi, dword ptr [rsp + 0x88]>', '<mov~~rdi, qword ptr [rcx + 0x20]>', '<movsxd~~rsi, esi>', '<imul~~rsi, rsi, 0x8480>', '<add~~rdi, rsi>', '<mov~~rsi, qword ptr [rsp + 0x9e0]>', '<mov~~ecx, dword ptr [rcx + 0x10]>', '<mov~~r8d, dword ptr [rax]>', '<call~~0x401da4>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x84]>', '<mov~~rax, qword ptr [rsp + 0x1c8]>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<add~~rcx, 0x20>', '<mov~~qword ptr [rsp + 0x58], rcx>', '<add~~rax, 0x30>', '<mov~~qword ptr [rsp + 0x60], rax>', '<xor~~eax, eax>', '<mov~~edx, eax>', '<xor~~ecx, ecx>', '<mov~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x6c], esi>', '<mov~~qword ptr [rsp + 0x70], rdx>', '<mov~~dword ptr [rsp + 0x7c], ecx>', '<mov~~dword ptr [rsp + 0x80], eax>', '<mov~~rsi, qword ptr [rsp + 0x60]>', '<mov~~r8, qword ptr [rsp + 0x58]>', '<mov~~edx, dword ptr [rsp + 0x6c]>', '<mov~~rdi, qword ptr [rsp + 0x70]>', '<mov~~eax, dword ptr [rsp + 0x7c]>', '<mov~~ecx, dword ptr [rsp + 0x80]>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<mov~~qword ptr [rsp + 0x30], rdi>', '<mov~~r8, qword ptr [r8]>', '<mov~~qword ptr [rsp + 0x38], r8>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rsi + rdi*8]>', '<mov~~rsi, qword ptr [rsi + 8]>', '<mov~~qword ptr [rsp + 0x40], rsi>', '<cmp~~dword ptr [rsi + 0xc], 1>', '<mov~~dword ptr [rsp + 0x4c], edx>', '<mov~~dword ptr [rsp + 0x50], ecx>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jne~~0x4019e2>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x9e0]>', '<call~~0x5000d0>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1dc]>', '<mov~~dword ptr [rsp + 0x1a8], eax>', '<jmp~~0x401ac5>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x9e0]>', '<call~~0x500058>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x18c]>', '<mov~~rcx, qword ptr [rsp + 0x1c8]>', '<mov~~rdx, qword ptr [rsp + 0x1b0]>', '<mov~~rdx, qword ptr [rdx + 0x20]>', '<mov~~qword ptr [rsp + 0x148], rdx>', '<mov~~rcx, qword ptr [rcx + 0x30]>', '<mov~~qword ptr [rsp + 0x150], rcx>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x158], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~rdx, rcx>', '<mov~~qword ptr [rsp + 0x160], rdx>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x168], edx>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x16c], edx>', '<mov~~qword ptr [rsp + 0x170], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x178], ecx>', '<mov~~dword ptr [rsp + 0x17c], eax>', '<mov~~rcx, qword ptr [rsp + 0x148]>', '<mov~~rdx, qword ptr [rsp + 0x160]>', '<mov~~esi, dword ptr [rsp + 0x168]>', '<mov~~edi, dword ptr [rsp + 0x16c]>', '<mov~~rax, qword ptr [rsp + 0x170]>', '<mov~~r8d, dword ptr [rsp + 0x178]>', '<mov~~r9d, dword ptr [rsp + 0x17c]>', '<mov~~dword ptr [rsp + 0x120], r9d>', '<mov~~dword ptr [rsp + 0x124], r8d>', '<mov~~dword ptr [rsp + 0x128], edi>', '<mov~~dword ptr [rsp + 0x12c], esi>', '<mov~~qword ptr [rsp + 0x130], rdx>', '<imul~~rdx, rdx, 0x8480>', '<add~~rcx, rdx>', '<add~~rcx, 0x8450>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x13c], ecx>', '<cmp~~ecx, 0>', '<mov~~qword ptr [rsp + 0x140], rax>', '<jle~~0x401353>']}], 'cfg_edge_info': [(60, 50), (33, 39), (41, 46), (44, 51), (43, 49), (4, 6), (0, 2), (22, 26), (14, 19), (63, 40), (8, 12), (61, 30), (63, 55), (24, 14), (67, 43), (47, 40), (55, 47), (30, 33), (15, 17), (6, 8), (47, 55), (51, 43), (64, 77), (26, 29), (12, 15), (29, 31), (44, 50), (31, 37), (39, 44), (2, 4), (40, 49), (57, 65), (19, 23), (11, 13), (55, 46), (40, 61), (30, 32), (37, 41), (6, 7), (65, 32), (60, 51), (21, 14), (32, 38), (67, 60), (41, 47), (12, 14), (29, 30), (51, 60), (23, 26), (43, 65), (38, 48), (57, 61), (39, 43), (37, 40), (48, 64), (19, 22), (7, 11), (15, 18)], 'cdg_edge_info': [(6, 12), (30, 43), (6, 30), (6, 48), (30, 33), (6, 11), (6, 8), (6, 14), (30, 39), (6, 26), (6, 32), (12, 15), (29, 31), (29, 37), (6, 29), (29, 40), (6, 38), (39, 44), (19, 23), (29, 61), (37, 41), (6, 7), (6, 13), (6, 77), (6, 19), (30, 65), (19, 22), (6, 64)], 'ddg_edge_info': [(15, 30), (26, 30), (0, 14), (14, 31), (23, 43), (14, 40), (15, 60), (0, 23), (6, 11), (26, 32), (8, 48), (0, 44), (39, 44), (40, 43), (31, 40), (2, 4), (0, 7), (14, 33), (61, 38), (8, 32), (65, 38), (0, 64), (38, 48), (14, 26), (12, 29), (15, 55), (0, 30), (8, 43), (8, 61), (0, 2), (14, 19), (23, 40), (61, 33), (33, 44), (64, 77), (0, 41), (12, 15), (31, 37), (8, 38), (14, 60), (0, 43), (61, 65), (23, 26), (14, 23), (15, 43), (2, 6), (8, 31), (7, 11), (8, 40), (4, 6), (41, 55), (44, 60), (33, 60), (12, 37), (8, 15), (61, 30), (8, 33), (0, 29), (14, 55), (65, 48), (26, 29), (4, 8), (12, 30), (0, 4), (61, 32), (8, 26), (11, 77), (0, 77), (37, 41), (31, 55), (65, 32), (0, 40), (32, 38), (12, 14), (26, 31), (15, 40), (8, 65), (39, 43), (0, 15), (48, 64), (40, 60), (33, 39), (26, 33), (8, 12), (31, 41), (14, 43), (61, 48), (7, 77), (8, 14), (8, 23), (12, 39), (4, 7), (33, 43), (0, 12), (37, 40), (61, 43)]}]}
{'write_manifest': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%r14'}, {'instIndex': 1, 'instruction': 'pushq\t%rbx'}, {'instIndex': 2, 'instruction': 'subq\t$0x9e8, %rsp                     # imm = 0x9E8'}, {'instIndex': 3, 'instruction': 'movl\t%esi, 0x1ac(%rsp)                 # 4-byte Spill'}, {'instIndex': 4, 'instruction': 'movq\t%rdi, %rcx'}, {'instIndex': 5, 'instruction': 'movq\t%rcx, 0x1c8(%rsp)                 # 8-byte Spill'}, {'instIndex': 6, 'instruction': 'movq\t0x18(%rcx), %rax'}, {'instIndex': 7, 'instruction': 'movq\t%rax, 0x1b0(%rsp)                 # 8-byte Spill'}, {'instIndex': 8, 'instruction': 'leaq\t0x9e0(%rsp), %rax'}, {'instIndex': 9, 'instruction': 'leaq\t0x5e0(%rsp), %rdi'}, {'instIndex': 10, 'instruction': 'movq\t%rdi, 0x1b8(%rsp)                 # 8-byte Spill'}, {'instIndex': 11, 'instruction': 'leaq\t0x1e0(%rsp), %rax'}, {'instIndex': 12, 'instruction': 'movq\t%rax, 0x1d0(%rsp)                 # 8-byte Spill'}, {'instIndex': 13, 'instruction': 'addq\t$0x38, %rcx'}, {'instIndex': 14, 'instruction': 'movq\t%rcx, 0x1c0(%rsp)                 # 8-byte Spill'}, {'instIndex': 15, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 16, 'instruction': 'leaq\t.L.str.0x20(%rip), %rdx'}, {'instIndex': 17, 'instruction': 'movb\t$0, %al'}, {'instIndex': 18, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 21, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 22, 'instruction': 'leaq\t.L.str.0x21(%rip), %rdx'}, {'instIndex': 23, 'instruction': 'movb\t$0, %al'}, {'instIndex': 24, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 27, 'instruction': 'addq\t$0x4b0, %rcx                     # imm = 0x4B0'}, {'instIndex': 28, 'instruction': 'leaq\t0x9e0(%rsp), %rdi'}, {'instIndex': 29, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 30, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 31, 'instruction': 'movl\t%eax, %r8d'}, {'instIndex': 32, 'instruction': 'callq\tavio_open2@PLT'}, {'instIndex': 34, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 35, 'instruction': 'jge\t.LBB5_2'}, {'instIndex': 38, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 39, 'instruction': 'leaq\t.L.str.0x22(%rip), %rdx'}, {'instIndex': 40, 'instruction': 'movb\t$0, %al'}, {'instIndex': 41, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 44, 'instruction': 'jmp\t.LBB5_27'}, {'instIndex': 45, 'instruction': 'movq\t0x9e0(%rsp), %rdi'}, {'instIndex': 46, 'instruction': 'leaq\t.L.str.0x23(%rip), %rsi'}, {'instIndex': 47, 'instruction': 'movb\t$0, %al'}, {'instIndex': 48, 'instruction': 'callq\tavio_printf@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'after', 'insts_info': [{'instIndex': 462, 'instruction': 'movq\t0x9e0(%rsp), %rdi'}, {'instIndex': 463, 'instruction': 'leaq\t.L.str.0x2c(%rip), %rsi'}, {'instIndex': 464, 'instruction': 'movb\t$0, %al'}, {'instIndex': 465, 'instruction': 'callq\tavio_printf@PLT'}, {'instIndex': 466, 'instruction': 'movq\t0x9e0(%rsp), %rdi'}, {'instIndex': 467, 'instruction': 'callq\tavio_flush@PLT'}, {'instIndex': 468, 'instruction': 'movq\t0x9e0(%rsp), %rdi'}, {'instIndex': 469, 'instruction': 'callq\tavio_close@PLT'}, {'instIndex': 472, 'instruction': 'callq\trename@PLT'}, {'instIndex': 476, 'instruction': 'addq\t$0x9e8, %rsp                     # imm = 0x9E8'}, {'instIndex': 477, 'instruction': 'popq\t%rbx'}, {'instIndex': 478, 'instruction': 'popq\t%r14'}, {'instIndex': 479, 'instruction': 'retq'}]}]}
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd---a/libavformat/smoothstreamingenc.c
The case of compiler gcc with optimization no.
Patched source code file: smoothstreamingenc.c
Patched function: 1---static int write_manifest 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_before/no/smoothstreamingenc_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_before/no/smoothstreamingenc_gcc.s---write_manifest---before
function id: 39
function flag: True
There are 389 instructions for function: write_manifest in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '210', 'end': 224}, 'before': {'start': '210', 'end': 223}}}, {'modifyIndex': 2, 'line': {'after': {'start': '279', 'end': 285}, 'before': {'start': '278', 'end': 283}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'endbr64'}, {'instIndex': 1, 'instruction': 'subq\t$0x488, %rsp'}, {'instIndex': 2, 'instruction': 'movq\t%rdi, 8(%rsp)'}, {'instIndex': 3, 'instruction': 'movl\t%esi, 4(%rsp)'}, {'instIndex': 4, 'instruction': 'movq\t%fs:0x28, %rax'}, {'instIndex': 5, 'instruction': 'movq\t%rax, 0x478(%rsp)'}, {'instIndex': 6, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 7, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 8, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 9, 'instruction': 'movq\t%rax, 0x48(%rsp)'}, {'instIndex': 10, 'instruction': 'movl\t$0, 0x14(%rsp)'}, {'instIndex': 11, 'instruction': 'movl\t$0, 0x18(%rsp)'}, {'instIndex': 12, 'instruction': 'movl\t$0, 0x1c(%rsp)'}, {'instIndex': 13, 'instruction': 'movl\t$0, 0x20(%rsp)'}, {'instIndex': 14, 'instruction': 'movq\t$0, 0x40(%rsp)'}, {'instIndex': 15, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 16, 'instruction': 'leaq\t0x38(%rax), %rdx'}, {'instIndex': 17, 'instruction': 'leaq\t0x70(%rsp), %rax'}, {'instIndex': 18, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 19, 'instruction': 'leaq\t.LC5(%rip), %rdx'}, {'instIndex': 20, 'instruction': 'movl\t$0x400, %esi'}, {'instIndex': 21, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 22, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 23, 'instruction': 'call\tsnprintf@PLT'}, {'instIndex': 24, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'leaq\t0x4b0(%rax), %rdx'}, {'instIndex': 26, 'instruction': 'leaq\t0x70(%rsp), %rsi'}, {'instIndex': 27, 'instruction': 'leaq\t0x38(%rsp), %rax'}, {'instIndex': 28, 'instruction': 'movl\t$0, %r8d'}, {'instIndex': 29, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 30, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 31, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 32, 'instruction': 'call\tavio_open2@PLT'}, {'instIndex': 33, 'instruction': 'movl\t%eax, 0x34(%rsp)'}, {'instIndex': 34, 'instruction': 'cmpl\t$0, 0x34(%rsp)'}, {'instIndex': 35, 'instruction': 'jns\t.L54'}, {'instIndex': 36, 'instruction': 'leaq\t0x70(%rsp), %rdx'}, {'instIndex': 37, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 38, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 39, 'instruction': 'leaq\t.LC6(%rip), %rdx'}, {'instIndex': 40, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 41, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 42, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 43, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 44, 'instruction': 'movl\t0x34(%rsp), %eax'}, {'instIndex': 45, 'instruction': 'jmp\t.L74'}, {'instIndex': 46, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 47, 'instruction': 'leaq\t.LC7(%rip), %rdx'}, {'instIndex': 48, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 49, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 50, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 51, 'instruction': 'call\tavio_printf@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 370, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 371, 'instruction': 'leaq\t.LC0x10(%rip), %rdx'}, {'instIndex': 372, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 373, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 374, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 375, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 376, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 377, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 378, 'instruction': 'call\tavio_flush@PLT'}, {'instIndex': 379, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 380, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 381, 'instruction': 'call\tavio_close@PLT'}, {'instIndex': 382, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 383, 'instruction': 'movq\t0x478(%rsp), %rdx'}, {'instIndex': 384, 'instruction': 'subq\t%fs:0x28, %rdx'}, {'instIndex': 385, 'instruction': 'je\t.L75'}, {'instIndex': 386, 'instruction': 'call\t__stack_chk_fail@PLT'}, {'instIndex': 387, 'instruction': 'addq\t$0x488, %rsp'}, {'instIndex': 388, 'instruction': 'ret'}]}]
Patched function: 1---static int write_manifest 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_before/no/smoothstreamingenc_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_before/no/smoothstreamingenc_gcc.s---write_manifest---before
function id: 39
function flag: True
There are 389 instructions for function: write_manifest in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '210', 'end': 224}, 'before': {'start': '210', 'end': 223}}}, {'modifyIndex': 2, 'line': {'after': {'start': '279', 'end': 285}, 'before': {'start': '278', 'end': 283}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'endbr64'}, {'instIndex': 1, 'instruction': 'subq\t$0x488, %rsp'}, {'instIndex': 2, 'instruction': 'movq\t%rdi, 8(%rsp)'}, {'instIndex': 3, 'instruction': 'movl\t%esi, 4(%rsp)'}, {'instIndex': 4, 'instruction': 'movq\t%fs:0x28, %rax'}, {'instIndex': 5, 'instruction': 'movq\t%rax, 0x478(%rsp)'}, {'instIndex': 6, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 7, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 8, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 9, 'instruction': 'movq\t%rax, 0x48(%rsp)'}, {'instIndex': 10, 'instruction': 'movl\t$0, 0x14(%rsp)'}, {'instIndex': 11, 'instruction': 'movl\t$0, 0x18(%rsp)'}, {'instIndex': 12, 'instruction': 'movl\t$0, 0x1c(%rsp)'}, {'instIndex': 13, 'instruction': 'movl\t$0, 0x20(%rsp)'}, {'instIndex': 14, 'instruction': 'movq\t$0, 0x40(%rsp)'}, {'instIndex': 15, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 16, 'instruction': 'leaq\t0x38(%rax), %rdx'}, {'instIndex': 17, 'instruction': 'leaq\t0x70(%rsp), %rax'}, {'instIndex': 18, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 19, 'instruction': 'leaq\t.LC5(%rip), %rdx'}, {'instIndex': 20, 'instruction': 'movl\t$0x400, %esi'}, {'instIndex': 21, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 22, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 23, 'instruction': 'call\tsnprintf@PLT'}, {'instIndex': 24, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'leaq\t0x4b0(%rax), %rdx'}, {'instIndex': 26, 'instruction': 'leaq\t0x70(%rsp), %rsi'}, {'instIndex': 27, 'instruction': 'leaq\t0x38(%rsp), %rax'}, {'instIndex': 28, 'instruction': 'movl\t$0, %r8d'}, {'instIndex': 29, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 30, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 31, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 32, 'instruction': 'call\tavio_open2@PLT'}, {'instIndex': 33, 'instruction': 'movl\t%eax, 0x34(%rsp)'}, {'instIndex': 34, 'instruction': 'cmpl\t$0, 0x34(%rsp)'}, {'instIndex': 35, 'instruction': 'jns\t.L54'}, {'instIndex': 36, 'instruction': 'leaq\t0x70(%rsp), %rdx'}, {'instIndex': 37, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 38, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 39, 'instruction': 'leaq\t.LC6(%rip), %rdx'}, {'instIndex': 40, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 41, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 42, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 43, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 44, 'instruction': 'movl\t0x34(%rsp), %eax'}, {'instIndex': 45, 'instruction': 'jmp\t.L74'}, {'instIndex': 46, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 47, 'instruction': 'leaq\t.LC7(%rip), %rdx'}, {'instIndex': 48, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 49, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 50, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 51, 'instruction': 'call\tavio_printf@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 370, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 371, 'instruction': 'leaq\t.LC0x10(%rip), %rdx'}, {'instIndex': 372, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 373, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 374, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 375, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 376, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 377, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 378, 'instruction': 'call\tavio_flush@PLT'}, {'instIndex': 379, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 380, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 381, 'instruction': 'call\tavio_close@PLT'}, {'instIndex': 382, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 383, 'instruction': 'movq\t0x478(%rsp), %rdx'}, {'instIndex': 384, 'instruction': 'subq\t%fs:0x28, %rdx'}, {'instIndex': 385, 'instruction': 'je\t.L75'}, {'instIndex': 386, 'instruction': 'call\t__stack_chk_fail@PLT'}, {'instIndex': 387, 'instruction': 'addq\t$0x488, %rsp'}, {'instIndex': 388, 'instruction': 'ret'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_before/no/smoothstreamingenc.o
Binary file does not exist.
{'write_manifest': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'endbr64'}, {'instIndex': 1, 'instruction': 'subq\t$0x488, %rsp'}, {'instIndex': 2, 'instruction': 'movq\t%rdi, 8(%rsp)'}, {'instIndex': 3, 'instruction': 'movl\t%esi, 4(%rsp)'}, {'instIndex': 4, 'instruction': 'movq\t%fs:0x28, %rax'}, {'instIndex': 5, 'instruction': 'movq\t%rax, 0x478(%rsp)'}, {'instIndex': 6, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 7, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 8, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 9, 'instruction': 'movq\t%rax, 0x48(%rsp)'}, {'instIndex': 10, 'instruction': 'movl\t$0, 0x14(%rsp)'}, {'instIndex': 11, 'instruction': 'movl\t$0, 0x18(%rsp)'}, {'instIndex': 12, 'instruction': 'movl\t$0, 0x1c(%rsp)'}, {'instIndex': 13, 'instruction': 'movl\t$0, 0x20(%rsp)'}, {'instIndex': 14, 'instruction': 'movq\t$0, 0x40(%rsp)'}, {'instIndex': 15, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 16, 'instruction': 'leaq\t0x38(%rax), %rdx'}, {'instIndex': 17, 'instruction': 'leaq\t0x70(%rsp), %rax'}, {'instIndex': 18, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 19, 'instruction': 'leaq\t.LC5(%rip), %rdx'}, {'instIndex': 20, 'instruction': 'movl\t$0x400, %esi'}, {'instIndex': 21, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 22, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 23, 'instruction': 'call\tsnprintf@PLT'}, {'instIndex': 24, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'leaq\t0x4b0(%rax), %rdx'}, {'instIndex': 26, 'instruction': 'leaq\t0x70(%rsp), %rsi'}, {'instIndex': 27, 'instruction': 'leaq\t0x38(%rsp), %rax'}, {'instIndex': 28, 'instruction': 'movl\t$0, %r8d'}, {'instIndex': 29, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 30, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 31, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 32, 'instruction': 'call\tavio_open2@PLT'}, {'instIndex': 33, 'instruction': 'movl\t%eax, 0x34(%rsp)'}, {'instIndex': 34, 'instruction': 'cmpl\t$0, 0x34(%rsp)'}, {'instIndex': 35, 'instruction': 'jns\t.L54'}, {'instIndex': 36, 'instruction': 'leaq\t0x70(%rsp), %rdx'}, {'instIndex': 37, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 38, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 39, 'instruction': 'leaq\t.LC6(%rip), %rdx'}, {'instIndex': 40, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 41, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 42, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 43, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 44, 'instruction': 'movl\t0x34(%rsp), %eax'}, {'instIndex': 45, 'instruction': 'jmp\t.L74'}, {'instIndex': 46, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 47, 'instruction': 'leaq\t.LC7(%rip), %rdx'}, {'instIndex': 48, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 49, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 50, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 51, 'instruction': 'call\tavio_printf@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 370, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 371, 'instruction': 'leaq\t.LC0x10(%rip), %rdx'}, {'instIndex': 372, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 373, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 374, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 375, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 376, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 377, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 378, 'instruction': 'call\tavio_flush@PLT'}, {'instIndex': 379, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 380, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 381, 'instruction': 'call\tavio_close@PLT'}, {'instIndex': 382, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 383, 'instruction': 'movq\t0x478(%rsp), %rdx'}, {'instIndex': 384, 'instruction': 'subq\t%fs:0x28, %rdx'}, {'instIndex': 385, 'instruction': 'je\t.L75'}, {'instIndex': 386, 'instruction': 'call\t__stack_chk_fail@PLT'}, {'instIndex': 387, 'instruction': 'addq\t$0x488, %rsp'}, {'instIndex': 388, 'instruction': 'ret'}]}]}
The case of compiler gcc with optimization O0.
Patched source code file: smoothstreamingenc.c
Patched function: 1---static int write_manifest 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_before/O0/smoothstreamingenc_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_before/O0/smoothstreamingenc_gcc.s---write_manifest---before
function id: 39
function flag: True
There are 389 instructions for function: write_manifest in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '210', 'end': 224}, 'before': {'start': '210', 'end': 223}}}, {'modifyIndex': 2, 'line': {'after': {'start': '279', 'end': 285}, 'before': {'start': '278', 'end': 283}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'endbr64'}, {'instIndex': 1, 'instruction': 'subq\t$0x488, %rsp'}, {'instIndex': 2, 'instruction': 'movq\t%rdi, 8(%rsp)'}, {'instIndex': 3, 'instruction': 'movl\t%esi, 4(%rsp)'}, {'instIndex': 4, 'instruction': 'movq\t%fs:0x28, %rax'}, {'instIndex': 5, 'instruction': 'movq\t%rax, 0x478(%rsp)'}, {'instIndex': 6, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 7, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 8, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 9, 'instruction': 'movq\t%rax, 0x48(%rsp)'}, {'instIndex': 10, 'instruction': 'movl\t$0, 0x14(%rsp)'}, {'instIndex': 11, 'instruction': 'movl\t$0, 0x18(%rsp)'}, {'instIndex': 12, 'instruction': 'movl\t$0, 0x1c(%rsp)'}, {'instIndex': 13, 'instruction': 'movl\t$0, 0x20(%rsp)'}, {'instIndex': 14, 'instruction': 'movq\t$0, 0x40(%rsp)'}, {'instIndex': 15, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 16, 'instruction': 'leaq\t0x38(%rax), %rdx'}, {'instIndex': 17, 'instruction': 'leaq\t0x70(%rsp), %rax'}, {'instIndex': 18, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 19, 'instruction': 'leaq\t.LC5(%rip), %rdx'}, {'instIndex': 20, 'instruction': 'movl\t$0x400, %esi'}, {'instIndex': 21, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 22, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 23, 'instruction': 'call\tsnprintf@PLT'}, {'instIndex': 24, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'leaq\t0x4b0(%rax), %rdx'}, {'instIndex': 26, 'instruction': 'leaq\t0x70(%rsp), %rsi'}, {'instIndex': 27, 'instruction': 'leaq\t0x38(%rsp), %rax'}, {'instIndex': 28, 'instruction': 'movl\t$0, %r8d'}, {'instIndex': 29, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 30, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 31, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 32, 'instruction': 'call\tavio_open2@PLT'}, {'instIndex': 33, 'instruction': 'movl\t%eax, 0x34(%rsp)'}, {'instIndex': 34, 'instruction': 'cmpl\t$0, 0x34(%rsp)'}, {'instIndex': 35, 'instruction': 'jns\t.L54'}, {'instIndex': 36, 'instruction': 'leaq\t0x70(%rsp), %rdx'}, {'instIndex': 37, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 38, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 39, 'instruction': 'leaq\t.LC6(%rip), %rdx'}, {'instIndex': 40, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 41, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 42, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 43, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 44, 'instruction': 'movl\t0x34(%rsp), %eax'}, {'instIndex': 45, 'instruction': 'jmp\t.L74'}, {'instIndex': 46, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 47, 'instruction': 'leaq\t.LC7(%rip), %rdx'}, {'instIndex': 48, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 49, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 50, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 51, 'instruction': 'call\tavio_printf@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 370, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 371, 'instruction': 'leaq\t.LC0x10(%rip), %rdx'}, {'instIndex': 372, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 373, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 374, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 375, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 376, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 377, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 378, 'instruction': 'call\tavio_flush@PLT'}, {'instIndex': 379, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 380, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 381, 'instruction': 'call\tavio_close@PLT'}, {'instIndex': 382, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 383, 'instruction': 'movq\t0x478(%rsp), %rdx'}, {'instIndex': 384, 'instruction': 'subq\t%fs:0x28, %rdx'}, {'instIndex': 385, 'instruction': 'je\t.L75'}, {'instIndex': 386, 'instruction': 'call\t__stack_chk_fail@PLT'}, {'instIndex': 387, 'instruction': 'addq\t$0x488, %rsp'}, {'instIndex': 388, 'instruction': 'ret'}]}]
Patched function: 1---static int write_manifest 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_before/O0/smoothstreamingenc_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_before/O0/smoothstreamingenc_gcc.s---write_manifest---before
function id: 39
function flag: True
There are 389 instructions for function: write_manifest in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '210', 'end': 224}, 'before': {'start': '210', 'end': 223}}}, {'modifyIndex': 2, 'line': {'after': {'start': '279', 'end': 285}, 'before': {'start': '278', 'end': 283}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'endbr64'}, {'instIndex': 1, 'instruction': 'subq\t$0x488, %rsp'}, {'instIndex': 2, 'instruction': 'movq\t%rdi, 8(%rsp)'}, {'instIndex': 3, 'instruction': 'movl\t%esi, 4(%rsp)'}, {'instIndex': 4, 'instruction': 'movq\t%fs:0x28, %rax'}, {'instIndex': 5, 'instruction': 'movq\t%rax, 0x478(%rsp)'}, {'instIndex': 6, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 7, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 8, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 9, 'instruction': 'movq\t%rax, 0x48(%rsp)'}, {'instIndex': 10, 'instruction': 'movl\t$0, 0x14(%rsp)'}, {'instIndex': 11, 'instruction': 'movl\t$0, 0x18(%rsp)'}, {'instIndex': 12, 'instruction': 'movl\t$0, 0x1c(%rsp)'}, {'instIndex': 13, 'instruction': 'movl\t$0, 0x20(%rsp)'}, {'instIndex': 14, 'instruction': 'movq\t$0, 0x40(%rsp)'}, {'instIndex': 15, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 16, 'instruction': 'leaq\t0x38(%rax), %rdx'}, {'instIndex': 17, 'instruction': 'leaq\t0x70(%rsp), %rax'}, {'instIndex': 18, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 19, 'instruction': 'leaq\t.LC5(%rip), %rdx'}, {'instIndex': 20, 'instruction': 'movl\t$0x400, %esi'}, {'instIndex': 21, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 22, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 23, 'instruction': 'call\tsnprintf@PLT'}, {'instIndex': 24, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'leaq\t0x4b0(%rax), %rdx'}, {'instIndex': 26, 'instruction': 'leaq\t0x70(%rsp), %rsi'}, {'instIndex': 27, 'instruction': 'leaq\t0x38(%rsp), %rax'}, {'instIndex': 28, 'instruction': 'movl\t$0, %r8d'}, {'instIndex': 29, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 30, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 31, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 32, 'instruction': 'call\tavio_open2@PLT'}, {'instIndex': 33, 'instruction': 'movl\t%eax, 0x34(%rsp)'}, {'instIndex': 34, 'instruction': 'cmpl\t$0, 0x34(%rsp)'}, {'instIndex': 35, 'instruction': 'jns\t.L54'}, {'instIndex': 36, 'instruction': 'leaq\t0x70(%rsp), %rdx'}, {'instIndex': 37, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 38, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 39, 'instruction': 'leaq\t.LC6(%rip), %rdx'}, {'instIndex': 40, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 41, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 42, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 43, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 44, 'instruction': 'movl\t0x34(%rsp), %eax'}, {'instIndex': 45, 'instruction': 'jmp\t.L74'}, {'instIndex': 46, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 47, 'instruction': 'leaq\t.LC7(%rip), %rdx'}, {'instIndex': 48, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 49, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 50, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 51, 'instruction': 'call\tavio_printf@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 370, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 371, 'instruction': 'leaq\t.LC0x10(%rip), %rdx'}, {'instIndex': 372, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 373, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 374, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 375, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 376, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 377, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 378, 'instruction': 'call\tavio_flush@PLT'}, {'instIndex': 379, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 380, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 381, 'instruction': 'call\tavio_close@PLT'}, {'instIndex': 382, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 383, 'instruction': 'movq\t0x478(%rsp), %rdx'}, {'instIndex': 384, 'instruction': 'subq\t%fs:0x28, %rdx'}, {'instIndex': 385, 'instruction': 'je\t.L75'}, {'instIndex': 386, 'instruction': 'call\t__stack_chk_fail@PLT'}, {'instIndex': 387, 'instruction': 'addq\t$0x488, %rsp'}, {'instIndex': 388, 'instruction': 'ret'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_before/O0/smoothstreamingenc.o
Binary file does not exist.
{'write_manifest': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'endbr64'}, {'instIndex': 1, 'instruction': 'subq\t$0x488, %rsp'}, {'instIndex': 2, 'instruction': 'movq\t%rdi, 8(%rsp)'}, {'instIndex': 3, 'instruction': 'movl\t%esi, 4(%rsp)'}, {'instIndex': 4, 'instruction': 'movq\t%fs:0x28, %rax'}, {'instIndex': 5, 'instruction': 'movq\t%rax, 0x478(%rsp)'}, {'instIndex': 6, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 7, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 8, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 9, 'instruction': 'movq\t%rax, 0x48(%rsp)'}, {'instIndex': 10, 'instruction': 'movl\t$0, 0x14(%rsp)'}, {'instIndex': 11, 'instruction': 'movl\t$0, 0x18(%rsp)'}, {'instIndex': 12, 'instruction': 'movl\t$0, 0x1c(%rsp)'}, {'instIndex': 13, 'instruction': 'movl\t$0, 0x20(%rsp)'}, {'instIndex': 14, 'instruction': 'movq\t$0, 0x40(%rsp)'}, {'instIndex': 15, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 16, 'instruction': 'leaq\t0x38(%rax), %rdx'}, {'instIndex': 17, 'instruction': 'leaq\t0x70(%rsp), %rax'}, {'instIndex': 18, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 19, 'instruction': 'leaq\t.LC5(%rip), %rdx'}, {'instIndex': 20, 'instruction': 'movl\t$0x400, %esi'}, {'instIndex': 21, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 22, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 23, 'instruction': 'call\tsnprintf@PLT'}, {'instIndex': 24, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'leaq\t0x4b0(%rax), %rdx'}, {'instIndex': 26, 'instruction': 'leaq\t0x70(%rsp), %rsi'}, {'instIndex': 27, 'instruction': 'leaq\t0x38(%rsp), %rax'}, {'instIndex': 28, 'instruction': 'movl\t$0, %r8d'}, {'instIndex': 29, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 30, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 31, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 32, 'instruction': 'call\tavio_open2@PLT'}, {'instIndex': 33, 'instruction': 'movl\t%eax, 0x34(%rsp)'}, {'instIndex': 34, 'instruction': 'cmpl\t$0, 0x34(%rsp)'}, {'instIndex': 35, 'instruction': 'jns\t.L54'}, {'instIndex': 36, 'instruction': 'leaq\t0x70(%rsp), %rdx'}, {'instIndex': 37, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 38, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 39, 'instruction': 'leaq\t.LC6(%rip), %rdx'}, {'instIndex': 40, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 41, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 42, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 43, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 44, 'instruction': 'movl\t0x34(%rsp), %eax'}, {'instIndex': 45, 'instruction': 'jmp\t.L74'}, {'instIndex': 46, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 47, 'instruction': 'leaq\t.LC7(%rip), %rdx'}, {'instIndex': 48, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 49, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 50, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 51, 'instruction': 'call\tavio_printf@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 370, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 371, 'instruction': 'leaq\t.LC0x10(%rip), %rdx'}, {'instIndex': 372, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 373, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 374, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 375, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 376, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 377, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 378, 'instruction': 'call\tavio_flush@PLT'}, {'instIndex': 379, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 380, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 381, 'instruction': 'call\tavio_close@PLT'}, {'instIndex': 382, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 383, 'instruction': 'movq\t0x478(%rsp), %rdx'}, {'instIndex': 384, 'instruction': 'subq\t%fs:0x28, %rdx'}, {'instIndex': 385, 'instruction': 'je\t.L75'}, {'instIndex': 386, 'instruction': 'call\t__stack_chk_fail@PLT'}, {'instIndex': 387, 'instruction': 'addq\t$0x488, %rsp'}, {'instIndex': 388, 'instruction': 'ret'}]}]}
The case of compiler gcc with optimization O1.
Patched source code file: smoothstreamingenc.c
Patched function: 1---static int write_manifest 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_before/O1/smoothstreamingenc_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_before/O1/smoothstreamingenc_gcc.s---write_manifest---before
function id: 18
function flag: True
There are 1306 instructions for function: write_manifest in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '210', 'end': 224}, 'before': {'start': '210', 'end': 223}}}, {'modifyIndex': 2, 'line': {'after': {'start': '279', 'end': 285}, 'before': {'start': '278', 'end': 283}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%r15'}, {'instIndex': 1, 'instruction': 'pushq\t%r14'}, {'instIndex': 2, 'instruction': 'pushq\t%r13'}, {'instIndex': 3, 'instruction': 'pushq\t%r12'}, {'instIndex': 4, 'instruction': 'pushq\t%rbp'}, {'instIndex': 5, 'instruction': 'pushq\t%rbx'}, {'instIndex': 6, 'instruction': 'subq\t$0x438, %rsp'}, {'instIndex': 7, 'instruction': 'movq\t%rdi, %rbx'}, {'instIndex': 8, 'instruction': 'movl\t%esi, 12(%rsp)'}, {'instIndex': 9, 'instruction': 'movq\t%fs:0x28, %rax'}, {'instIndex': 10, 'instruction': 'movq\t%rax, 0x428(%rsp)'}, {'instIndex': 11, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 12, 'instruction': 'movq\t0x18(%rdi), %r12'}, {'instIndex': 21, 'instruction': 'leaq\t0x4b0(%rbx), %rcx'}, {'instIndex': 22, 'instruction': 'leaq\t0x18(%rsp), %rdi'}, {'instIndex': 23, 'instruction': 'movl\t$0, %r8d'}, {'instIndex': 24, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 25, 'instruction': 'movq\t%rbp, %rsi'}, {'instIndex': 26, 'instruction': 'call\tavio_open2@PLT'}, {'instIndex': 27, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 28, 'instruction': 'js\t.L50'}, {'instIndex': 29, 'instruction': 'leaq\t.LC4(%rip), %rsi'}, {'instIndex': 30, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 31, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 32, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 41, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 42, 'instruction': 'movl\t$0, %r13d'}, {'instIndex': 43, 'instruction': 'movl\t$0, %ebp'}, {'instIndex': 44, 'instruction': 'movl\t$0, 8(%rsp)'}, {'instIndex': 45, 'instruction': 'movl\t$0, %r14d'}, {'instIndex': 46, 'instruction': 'jmp\t.L22'}, {'instIndex': 47, 'instruction': 'movl\t%eax, %ebp'}, {'instIndex': 48, 'instruction': 'leaq\t0x20(%rsp), %rcx'}, {'instIndex': 49, 'instruction': 'leaq\t.LC3(%rip), %rdx'}, {'instIndex': 50, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 51, 'instruction': 'movq\t%rbx, %rdi'}, {'instIndex': 52, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 53, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 54, 'instruction': 'jmp\t.L15'}, {'instIndex': 76, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 77, 'instruction': 'movl\t$0, %r13d'}, {'instIndex': 78, 'instruction': 'movl\t$0, %ebp'}, {'instIndex': 79, 'instruction': 'movl\t$0, 8(%rsp)'}, {'instIndex': 80, 'instruction': 'movl\t$0, %r14d'}, {'instIndex': 321, 'instruction': 'call\tavio_seek@PLT'}, {'instIndex': 322, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 323, 'instruction': 'movl\t$0, %esi'}, {'instIndex': 324, 'instruction': 'movq\t0x48(%rsp), %rdi'}, {'instIndex': 333, 'instruction': 'movl\t%eax, %r13d'}, {'instIndex': 334, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 335, 'instruction': 'movl\t$0, %esi'}, {'instIndex': 336, 'instruction': 'movq\t0x48(%rsp), %rdi'}, {'instIndex': 337, 'instruction': 'call\tavio_seek@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 224, 'instruction': 'leaq\t.LC12(%rip), %rsi'}, {'instIndex': 225, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 226, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 227, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 228, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 229, 'instruction': 'call\tavio_flush@PLT'}, {'instIndex': 230, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 231, 'instruction': 'call\tavio_close@PLT'}, {'instIndex': 232, 'instruction': 'movl\t$0, %ebp'}, {'instIndex': 233, 'instruction': 'movq\t0x428(%rsp), %rax'}, {'instIndex': 234, 'instruction': 'subq\t%fs:0x28, %rax'}, {'instIndex': 235, 'instruction': 'jne\t.L53'}, {'instIndex': 236, 'instruction': 'movl\t%ebp, %eax'}, {'instIndex': 237, 'instruction': 'addq\t$0x438, %rsp'}, {'instIndex': 238, 'instruction': 'popq\t%rbx'}, {'instIndex': 239, 'instruction': 'popq\t%rbp'}, {'instIndex': 240, 'instruction': 'popq\t%r12'}, {'instIndex': 241, 'instruction': 'popq\t%r13'}, {'instIndex': 242, 'instruction': 'popq\t%r14'}, {'instIndex': 243, 'instruction': 'popq\t%r15'}, {'instIndex': 244, 'instruction': 'ret'}, {'instIndex': 264, 'instruction': 'call\t__stack_chk_fail@PLT'}]}]
Patched function: 1---static int write_manifest 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_before/O1/smoothstreamingenc_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_before/O1/smoothstreamingenc_gcc.s---write_manifest---before
function id: 18
function flag: True
There are 1306 instructions for function: write_manifest in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '210', 'end': 224}, 'before': {'start': '210', 'end': 223}}}, {'modifyIndex': 2, 'line': {'after': {'start': '279', 'end': 285}, 'before': {'start': '278', 'end': 283}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%r15'}, {'instIndex': 1, 'instruction': 'pushq\t%r14'}, {'instIndex': 2, 'instruction': 'pushq\t%r13'}, {'instIndex': 3, 'instruction': 'pushq\t%r12'}, {'instIndex': 4, 'instruction': 'pushq\t%rbp'}, {'instIndex': 5, 'instruction': 'pushq\t%rbx'}, {'instIndex': 6, 'instruction': 'subq\t$0x438, %rsp'}, {'instIndex': 7, 'instruction': 'movq\t%rdi, %rbx'}, {'instIndex': 8, 'instruction': 'movl\t%esi, 12(%rsp)'}, {'instIndex': 9, 'instruction': 'movq\t%fs:0x28, %rax'}, {'instIndex': 10, 'instruction': 'movq\t%rax, 0x428(%rsp)'}, {'instIndex': 11, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 12, 'instruction': 'movq\t0x18(%rdi), %r12'}, {'instIndex': 21, 'instruction': 'leaq\t0x4b0(%rbx), %rcx'}, {'instIndex': 22, 'instruction': 'leaq\t0x18(%rsp), %rdi'}, {'instIndex': 23, 'instruction': 'movl\t$0, %r8d'}, {'instIndex': 24, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 25, 'instruction': 'movq\t%rbp, %rsi'}, {'instIndex': 26, 'instruction': 'call\tavio_open2@PLT'}, {'instIndex': 27, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 28, 'instruction': 'js\t.L50'}, {'instIndex': 29, 'instruction': 'leaq\t.LC4(%rip), %rsi'}, {'instIndex': 30, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 31, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 32, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 41, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 42, 'instruction': 'movl\t$0, %r13d'}, {'instIndex': 43, 'instruction': 'movl\t$0, %ebp'}, {'instIndex': 44, 'instruction': 'movl\t$0, 8(%rsp)'}, {'instIndex': 45, 'instruction': 'movl\t$0, %r14d'}, {'instIndex': 46, 'instruction': 'jmp\t.L22'}, {'instIndex': 47, 'instruction': 'movl\t%eax, %ebp'}, {'instIndex': 48, 'instruction': 'leaq\t0x20(%rsp), %rcx'}, {'instIndex': 49, 'instruction': 'leaq\t.LC3(%rip), %rdx'}, {'instIndex': 50, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 51, 'instruction': 'movq\t%rbx, %rdi'}, {'instIndex': 52, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 53, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 54, 'instruction': 'jmp\t.L15'}, {'instIndex': 76, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 77, 'instruction': 'movl\t$0, %r13d'}, {'instIndex': 78, 'instruction': 'movl\t$0, %ebp'}, {'instIndex': 79, 'instruction': 'movl\t$0, 8(%rsp)'}, {'instIndex': 80, 'instruction': 'movl\t$0, %r14d'}, {'instIndex': 321, 'instruction': 'call\tavio_seek@PLT'}, {'instIndex': 322, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 323, 'instruction': 'movl\t$0, %esi'}, {'instIndex': 324, 'instruction': 'movq\t0x48(%rsp), %rdi'}, {'instIndex': 333, 'instruction': 'movl\t%eax, %r13d'}, {'instIndex': 334, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 335, 'instruction': 'movl\t$0, %esi'}, {'instIndex': 336, 'instruction': 'movq\t0x48(%rsp), %rdi'}, {'instIndex': 337, 'instruction': 'call\tavio_seek@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 224, 'instruction': 'leaq\t.LC12(%rip), %rsi'}, {'instIndex': 225, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 226, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 227, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 228, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 229, 'instruction': 'call\tavio_flush@PLT'}, {'instIndex': 230, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 231, 'instruction': 'call\tavio_close@PLT'}, {'instIndex': 232, 'instruction': 'movl\t$0, %ebp'}, {'instIndex': 233, 'instruction': 'movq\t0x428(%rsp), %rax'}, {'instIndex': 234, 'instruction': 'subq\t%fs:0x28, %rax'}, {'instIndex': 235, 'instruction': 'jne\t.L53'}, {'instIndex': 236, 'instruction': 'movl\t%ebp, %eax'}, {'instIndex': 237, 'instruction': 'addq\t$0x438, %rsp'}, {'instIndex': 238, 'instruction': 'popq\t%rbx'}, {'instIndex': 239, 'instruction': 'popq\t%rbp'}, {'instIndex': 240, 'instruction': 'popq\t%r12'}, {'instIndex': 241, 'instruction': 'popq\t%r13'}, {'instIndex': 242, 'instruction': 'popq\t%r14'}, {'instIndex': 243, 'instruction': 'popq\t%r15'}, {'instIndex': 244, 'instruction': 'ret'}, {'instIndex': 264, 'instruction': 'call\t__stack_chk_fail@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_before/O1/smoothstreamingenc.o
Binary file does not exist.
{'write_manifest': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%r15'}, {'instIndex': 1, 'instruction': 'pushq\t%r14'}, {'instIndex': 2, 'instruction': 'pushq\t%r13'}, {'instIndex': 3, 'instruction': 'pushq\t%r12'}, {'instIndex': 4, 'instruction': 'pushq\t%rbp'}, {'instIndex': 5, 'instruction': 'pushq\t%rbx'}, {'instIndex': 6, 'instruction': 'subq\t$0x438, %rsp'}, {'instIndex': 7, 'instruction': 'movq\t%rdi, %rbx'}, {'instIndex': 8, 'instruction': 'movl\t%esi, 12(%rsp)'}, {'instIndex': 9, 'instruction': 'movq\t%fs:0x28, %rax'}, {'instIndex': 10, 'instruction': 'movq\t%rax, 0x428(%rsp)'}, {'instIndex': 11, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 12, 'instruction': 'movq\t0x18(%rdi), %r12'}, {'instIndex': 21, 'instruction': 'leaq\t0x4b0(%rbx), %rcx'}, {'instIndex': 22, 'instruction': 'leaq\t0x18(%rsp), %rdi'}, {'instIndex': 23, 'instruction': 'movl\t$0, %r8d'}, {'instIndex': 24, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 25, 'instruction': 'movq\t%rbp, %rsi'}, {'instIndex': 26, 'instruction': 'call\tavio_open2@PLT'}, {'instIndex': 27, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 28, 'instruction': 'js\t.L50'}, {'instIndex': 29, 'instruction': 'leaq\t.LC4(%rip), %rsi'}, {'instIndex': 30, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 31, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 32, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 41, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 42, 'instruction': 'movl\t$0, %r13d'}, {'instIndex': 43, 'instruction': 'movl\t$0, %ebp'}, {'instIndex': 44, 'instruction': 'movl\t$0, 8(%rsp)'}, {'instIndex': 45, 'instruction': 'movl\t$0, %r14d'}, {'instIndex': 46, 'instruction': 'jmp\t.L22'}, {'instIndex': 47, 'instruction': 'movl\t%eax, %ebp'}, {'instIndex': 48, 'instruction': 'leaq\t0x20(%rsp), %rcx'}, {'instIndex': 49, 'instruction': 'leaq\t.LC3(%rip), %rdx'}, {'instIndex': 50, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 51, 'instruction': 'movq\t%rbx, %rdi'}, {'instIndex': 52, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 53, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 54, 'instruction': 'jmp\t.L15'}, {'instIndex': 76, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 77, 'instruction': 'movl\t$0, %r13d'}, {'instIndex': 78, 'instruction': 'movl\t$0, %ebp'}, {'instIndex': 79, 'instruction': 'movl\t$0, 8(%rsp)'}, {'instIndex': 80, 'instruction': 'movl\t$0, %r14d'}, {'instIndex': 321, 'instruction': 'call\tavio_seek@PLT'}, {'instIndex': 322, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 323, 'instruction': 'movl\t$0, %esi'}, {'instIndex': 324, 'instruction': 'movq\t0x48(%rsp), %rdi'}, {'instIndex': 333, 'instruction': 'movl\t%eax, %r13d'}, {'instIndex': 334, 'instruction': 'movl\t$1, %edx'}, {'instIndex': 335, 'instruction': 'movl\t$0, %esi'}, {'instIndex': 336, 'instruction': 'movq\t0x48(%rsp), %rdi'}, {'instIndex': 337, 'instruction': 'call\tavio_seek@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 224, 'instruction': 'leaq\t.LC12(%rip), %rsi'}, {'instIndex': 225, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 226, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 227, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 228, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 229, 'instruction': 'call\tavio_flush@PLT'}, {'instIndex': 230, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 231, 'instruction': 'call\tavio_close@PLT'}, {'instIndex': 232, 'instruction': 'movl\t$0, %ebp'}, {'instIndex': 233, 'instruction': 'movq\t0x428(%rsp), %rax'}, {'instIndex': 234, 'instruction': 'subq\t%fs:0x28, %rax'}, {'instIndex': 235, 'instruction': 'jne\t.L53'}, {'instIndex': 236, 'instruction': 'movl\t%ebp, %eax'}, {'instIndex': 237, 'instruction': 'addq\t$0x438, %rsp'}, {'instIndex': 238, 'instruction': 'popq\t%rbx'}, {'instIndex': 239, 'instruction': 'popq\t%rbp'}, {'instIndex': 240, 'instruction': 'popq\t%r12'}, {'instIndex': 241, 'instruction': 'popq\t%r13'}, {'instIndex': 242, 'instruction': 'popq\t%r14'}, {'instIndex': 243, 'instruction': 'popq\t%r15'}, {'instIndex': 244, 'instruction': 'ret'}, {'instIndex': 264, 'instruction': 'call\t__stack_chk_fail@PLT'}]}]}
The case of compiler gcc with optimization O2.
Patched source code file: smoothstreamingenc.c
Patched function: 1---static int write_manifest 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_before/O2/smoothstreamingenc_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_before/O2/smoothstreamingenc_gcc.s---write_manifest---before
function id: 21
function flag: True
There are 1374 instructions for function: write_manifest in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '210', 'end': 224}, 'before': {'start': '210', 'end': 223}}}, {'modifyIndex': 2, 'line': {'after': {'start': '279', 'end': 285}, 'before': {'start': '278', 'end': 283}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%r15'}, {'instIndex': 4, 'instruction': 'pushq\t%r14'}, {'instIndex': 6, 'instruction': 'pushq\t%r13'}, {'instIndex': 7, 'instruction': 'pushq\t%r12'}, {'instIndex': 8, 'instruction': 'pushq\t%rbp'}, {'instIndex': 9, 'instruction': 'movq\t%rdi, %rbp'}, {'instIndex': 10, 'instruction': 'pushq\t%rbx'}, {'instIndex': 11, 'instruction': 'subq\t$0x438, %rsp'}, {'instIndex': 12, 'instruction': 'movq\t0x18(%rdi), %rbx'}, {'instIndex': 13, 'instruction': 'movl\t%esi, 8(%rsp)'}, {'instIndex': 17, 'instruction': 'movq\t%fs:0x28, %rax'}, {'instIndex': 18, 'instruction': 'movq\t%rax, 0x428(%rsp)'}, {'instIndex': 19, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 21, 'instruction': 'xorl\t%r8d, %r8d'}, {'instIndex': 22, 'instruction': 'leaq\t0x18(%rsp), %rdi'}, {'instIndex': 23, 'instruction': 'movq\t%r14, %rsi'}, {'instIndex': 24, 'instruction': 'leaq\t0x4b0(%rbp), %rcx'}, {'instIndex': 25, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 26, 'instruction': 'call\tavio_open2@PLT'}, {'instIndex': 27, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 28, 'instruction': 'js\t.L58'}, {'instIndex': 29, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 30, 'instruction': 'leaq\t.LC4(%rip), %rsi'}, {'instIndex': 31, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 32, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 39, 'instruction': 'xorl\t%r10d, %r10d'}, {'instIndex': 40, 'instruction': 'xorl\t%r14d, %r14d'}, {'instIndex': 41, 'instruction': 'xorl\t%r13d, %r13d'}, {'instIndex': 42, 'instruction': 'xorl\t%r12d, %r12d'}, {'instIndex': 43, 'instruction': 'xorl\t%r15d, %r15d'}, {'instIndex': 44, 'instruction': 'leaq\t8(%rdi), %rax'}, {'instIndex': 45, 'instruction': 'addq\t$0x8460, %rdx'}, {'instIndex': 46, 'instruction': 'leaq\t(%rax,%rcx,8), %r9'}, {'instIndex': 47, 'instruction': 'jmp\t.L28'}, {'instIndex': 137, 'instruction': 'movq\t%r14, %rcx'}, {'instIndex': 138, 'instruction': 'leaq\t.LC3(%rip), %rdx'}, {'instIndex': 139, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 140, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 141, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 142, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 143, 'instruction': 'jmp\t.L21'}, {'instIndex': 272, 'instruction': 'xorl\t%r10d, %r10d'}, {'instIndex': 273, 'instruction': 'xorl\t%r14d, %r14d'}, {'instIndex': 274, 'instruction': 'xorl\t%r13d, %r13d'}, {'instIndex': 275, 'instruction': 'xorl\t%r12d, %r12d'}, {'instIndex': 276, 'instruction': 'xorl\t%r15d, %r15d'}, {'instIndex': 277, 'instruction': 'jmp\t.L24'}, {'instIndex': 1187, 'instruction': 'movq\t%r13, 0x10(%rsp)'}, {'instIndex': 1188, 'instruction': 'jmp\t.L204'}, {'instIndex': 1189, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 1190, 'instruction': 'movq\t%r13, %rsi'}, {'instIndex': 1198, 'instruction': 'movq\t0x68(%rsp), %rdi'}, {'instIndex': 1199, 'instruction': 'call\tavio_rb32@PLT'}, {'instIndex': 1200, 'instruction': 'movq\t0x68(%rsp), %rdi'}, {'instIndex': 1202, 'instruction': 'call\tavio_rl32@PLT'}, {'instIndex': 1203, 'instruction': 'movq\t0x68(%rsp), %rdi'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 115, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 116, 'instruction': 'leaq\t.LC12(%rip), %rsi'}, {'instIndex': 117, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 118, 'instruction': 'xorl\t%r12d, %r12d'}, {'instIndex': 119, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 120, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 121, 'instruction': 'call\tavio_flush@PLT'}, {'instIndex': 122, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 123, 'instruction': 'call\tavio_close@PLT'}, {'instIndex': 124, 'instruction': 'movq\t0x428(%rsp), %rax'}, {'instIndex': 125, 'instruction': 'subq\t%fs:0x28, %rax'}, {'instIndex': 126, 'instruction': 'jne\t.L64'}, {'instIndex': 127, 'instruction': 'addq\t$0x438, %rsp'}, {'instIndex': 128, 'instruction': 'movl\t%r12d, %eax'}, {'instIndex': 129, 'instruction': 'popq\t%rbx'}, {'instIndex': 130, 'instruction': 'popq\t%rbp'}, {'instIndex': 131, 'instruction': 'popq\t%r12'}, {'instIndex': 132, 'instruction': 'popq\t%r13'}, {'instIndex': 133, 'instruction': 'popq\t%r14'}, {'instIndex': 134, 'instruction': 'popq\t%r15'}, {'instIndex': 135, 'instruction': 'ret'}, {'instIndex': 136, 'instruction': 'movl\t%eax, %r12d'}, {'instIndex': 282, 'instruction': 'call\t__stack_chk_fail@PLT'}]}]
Patched function: 1---static int write_manifest 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_before/O2/smoothstreamingenc_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_before/O2/smoothstreamingenc_gcc.s---write_manifest---before
function id: 21
function flag: True
There are 1374 instructions for function: write_manifest in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '210', 'end': 224}, 'before': {'start': '210', 'end': 223}}}, {'modifyIndex': 2, 'line': {'after': {'start': '279', 'end': 285}, 'before': {'start': '278', 'end': 283}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%r15'}, {'instIndex': 4, 'instruction': 'pushq\t%r14'}, {'instIndex': 6, 'instruction': 'pushq\t%r13'}, {'instIndex': 7, 'instruction': 'pushq\t%r12'}, {'instIndex': 8, 'instruction': 'pushq\t%rbp'}, {'instIndex': 9, 'instruction': 'movq\t%rdi, %rbp'}, {'instIndex': 10, 'instruction': 'pushq\t%rbx'}, {'instIndex': 11, 'instruction': 'subq\t$0x438, %rsp'}, {'instIndex': 12, 'instruction': 'movq\t0x18(%rdi), %rbx'}, {'instIndex': 13, 'instruction': 'movl\t%esi, 8(%rsp)'}, {'instIndex': 17, 'instruction': 'movq\t%fs:0x28, %rax'}, {'instIndex': 18, 'instruction': 'movq\t%rax, 0x428(%rsp)'}, {'instIndex': 19, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 21, 'instruction': 'xorl\t%r8d, %r8d'}, {'instIndex': 22, 'instruction': 'leaq\t0x18(%rsp), %rdi'}, {'instIndex': 23, 'instruction': 'movq\t%r14, %rsi'}, {'instIndex': 24, 'instruction': 'leaq\t0x4b0(%rbp), %rcx'}, {'instIndex': 25, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 26, 'instruction': 'call\tavio_open2@PLT'}, {'instIndex': 27, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 28, 'instruction': 'js\t.L58'}, {'instIndex': 29, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 30, 'instruction': 'leaq\t.LC4(%rip), %rsi'}, {'instIndex': 31, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 32, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 39, 'instruction': 'xorl\t%r10d, %r10d'}, {'instIndex': 40, 'instruction': 'xorl\t%r14d, %r14d'}, {'instIndex': 41, 'instruction': 'xorl\t%r13d, %r13d'}, {'instIndex': 42, 'instruction': 'xorl\t%r12d, %r12d'}, {'instIndex': 43, 'instruction': 'xorl\t%r15d, %r15d'}, {'instIndex': 44, 'instruction': 'leaq\t8(%rdi), %rax'}, {'instIndex': 45, 'instruction': 'addq\t$0x8460, %rdx'}, {'instIndex': 46, 'instruction': 'leaq\t(%rax,%rcx,8), %r9'}, {'instIndex': 47, 'instruction': 'jmp\t.L28'}, {'instIndex': 137, 'instruction': 'movq\t%r14, %rcx'}, {'instIndex': 138, 'instruction': 'leaq\t.LC3(%rip), %rdx'}, {'instIndex': 139, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 140, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 141, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 142, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 143, 'instruction': 'jmp\t.L21'}, {'instIndex': 272, 'instruction': 'xorl\t%r10d, %r10d'}, {'instIndex': 273, 'instruction': 'xorl\t%r14d, %r14d'}, {'instIndex': 274, 'instruction': 'xorl\t%r13d, %r13d'}, {'instIndex': 275, 'instruction': 'xorl\t%r12d, %r12d'}, {'instIndex': 276, 'instruction': 'xorl\t%r15d, %r15d'}, {'instIndex': 277, 'instruction': 'jmp\t.L24'}, {'instIndex': 1187, 'instruction': 'movq\t%r13, 0x10(%rsp)'}, {'instIndex': 1188, 'instruction': 'jmp\t.L204'}, {'instIndex': 1189, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 1190, 'instruction': 'movq\t%r13, %rsi'}, {'instIndex': 1198, 'instruction': 'movq\t0x68(%rsp), %rdi'}, {'instIndex': 1199, 'instruction': 'call\tavio_rb32@PLT'}, {'instIndex': 1200, 'instruction': 'movq\t0x68(%rsp), %rdi'}, {'instIndex': 1202, 'instruction': 'call\tavio_rl32@PLT'}, {'instIndex': 1203, 'instruction': 'movq\t0x68(%rsp), %rdi'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 115, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 116, 'instruction': 'leaq\t.LC12(%rip), %rsi'}, {'instIndex': 117, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 118, 'instruction': 'xorl\t%r12d, %r12d'}, {'instIndex': 119, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 120, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 121, 'instruction': 'call\tavio_flush@PLT'}, {'instIndex': 122, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 123, 'instruction': 'call\tavio_close@PLT'}, {'instIndex': 124, 'instruction': 'movq\t0x428(%rsp), %rax'}, {'instIndex': 125, 'instruction': 'subq\t%fs:0x28, %rax'}, {'instIndex': 126, 'instruction': 'jne\t.L64'}, {'instIndex': 127, 'instruction': 'addq\t$0x438, %rsp'}, {'instIndex': 128, 'instruction': 'movl\t%r12d, %eax'}, {'instIndex': 129, 'instruction': 'popq\t%rbx'}, {'instIndex': 130, 'instruction': 'popq\t%rbp'}, {'instIndex': 131, 'instruction': 'popq\t%r12'}, {'instIndex': 132, 'instruction': 'popq\t%r13'}, {'instIndex': 133, 'instruction': 'popq\t%r14'}, {'instIndex': 134, 'instruction': 'popq\t%r15'}, {'instIndex': 135, 'instruction': 'ret'}, {'instIndex': 136, 'instruction': 'movl\t%eax, %r12d'}, {'instIndex': 282, 'instruction': 'call\t__stack_chk_fail@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_before/O2/smoothstreamingenc.o
Binary file does not exist.
{'write_manifest': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%r15'}, {'instIndex': 4, 'instruction': 'pushq\t%r14'}, {'instIndex': 6, 'instruction': 'pushq\t%r13'}, {'instIndex': 7, 'instruction': 'pushq\t%r12'}, {'instIndex': 8, 'instruction': 'pushq\t%rbp'}, {'instIndex': 9, 'instruction': 'movq\t%rdi, %rbp'}, {'instIndex': 10, 'instruction': 'pushq\t%rbx'}, {'instIndex': 11, 'instruction': 'subq\t$0x438, %rsp'}, {'instIndex': 12, 'instruction': 'movq\t0x18(%rdi), %rbx'}, {'instIndex': 13, 'instruction': 'movl\t%esi, 8(%rsp)'}, {'instIndex': 17, 'instruction': 'movq\t%fs:0x28, %rax'}, {'instIndex': 18, 'instruction': 'movq\t%rax, 0x428(%rsp)'}, {'instIndex': 19, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 21, 'instruction': 'xorl\t%r8d, %r8d'}, {'instIndex': 22, 'instruction': 'leaq\t0x18(%rsp), %rdi'}, {'instIndex': 23, 'instruction': 'movq\t%r14, %rsi'}, {'instIndex': 24, 'instruction': 'leaq\t0x4b0(%rbp), %rcx'}, {'instIndex': 25, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 26, 'instruction': 'call\tavio_open2@PLT'}, {'instIndex': 27, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 28, 'instruction': 'js\t.L58'}, {'instIndex': 29, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 30, 'instruction': 'leaq\t.LC4(%rip), %rsi'}, {'instIndex': 31, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 32, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 39, 'instruction': 'xorl\t%r10d, %r10d'}, {'instIndex': 40, 'instruction': 'xorl\t%r14d, %r14d'}, {'instIndex': 41, 'instruction': 'xorl\t%r13d, %r13d'}, {'instIndex': 42, 'instruction': 'xorl\t%r12d, %r12d'}, {'instIndex': 43, 'instruction': 'xorl\t%r15d, %r15d'}, {'instIndex': 44, 'instruction': 'leaq\t8(%rdi), %rax'}, {'instIndex': 45, 'instruction': 'addq\t$0x8460, %rdx'}, {'instIndex': 46, 'instruction': 'leaq\t(%rax,%rcx,8), %r9'}, {'instIndex': 47, 'instruction': 'jmp\t.L28'}, {'instIndex': 137, 'instruction': 'movq\t%r14, %rcx'}, {'instIndex': 138, 'instruction': 'leaq\t.LC3(%rip), %rdx'}, {'instIndex': 139, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 140, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 141, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 142, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 143, 'instruction': 'jmp\t.L21'}, {'instIndex': 272, 'instruction': 'xorl\t%r10d, %r10d'}, {'instIndex': 273, 'instruction': 'xorl\t%r14d, %r14d'}, {'instIndex': 274, 'instruction': 'xorl\t%r13d, %r13d'}, {'instIndex': 275, 'instruction': 'xorl\t%r12d, %r12d'}, {'instIndex': 276, 'instruction': 'xorl\t%r15d, %r15d'}, {'instIndex': 277, 'instruction': 'jmp\t.L24'}, {'instIndex': 1187, 'instruction': 'movq\t%r13, 0x10(%rsp)'}, {'instIndex': 1188, 'instruction': 'jmp\t.L204'}, {'instIndex': 1189, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 1190, 'instruction': 'movq\t%r13, %rsi'}, {'instIndex': 1198, 'instruction': 'movq\t0x68(%rsp), %rdi'}, {'instIndex': 1199, 'instruction': 'call\tavio_rb32@PLT'}, {'instIndex': 1200, 'instruction': 'movq\t0x68(%rsp), %rdi'}, {'instIndex': 1202, 'instruction': 'call\tavio_rl32@PLT'}, {'instIndex': 1203, 'instruction': 'movq\t0x68(%rsp), %rdi'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 115, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 116, 'instruction': 'leaq\t.LC12(%rip), %rsi'}, {'instIndex': 117, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 118, 'instruction': 'xorl\t%r12d, %r12d'}, {'instIndex': 119, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 120, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 121, 'instruction': 'call\tavio_flush@PLT'}, {'instIndex': 122, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 123, 'instruction': 'call\tavio_close@PLT'}, {'instIndex': 124, 'instruction': 'movq\t0x428(%rsp), %rax'}, {'instIndex': 125, 'instruction': 'subq\t%fs:0x28, %rax'}, {'instIndex': 126, 'instruction': 'jne\t.L64'}, {'instIndex': 127, 'instruction': 'addq\t$0x438, %rsp'}, {'instIndex': 128, 'instruction': 'movl\t%r12d, %eax'}, {'instIndex': 129, 'instruction': 'popq\t%rbx'}, {'instIndex': 130, 'instruction': 'popq\t%rbp'}, {'instIndex': 131, 'instruction': 'popq\t%r12'}, {'instIndex': 132, 'instruction': 'popq\t%r13'}, {'instIndex': 133, 'instruction': 'popq\t%r14'}, {'instIndex': 134, 'instruction': 'popq\t%r15'}, {'instIndex': 135, 'instruction': 'ret'}, {'instIndex': 136, 'instruction': 'movl\t%eax, %r12d'}, {'instIndex': 282, 'instruction': 'call\t__stack_chk_fail@PLT'}]}]}
The case of compiler gcc with optimization O3.
Patched source code file: smoothstreamingenc.c
Patched function: 1---static int write_manifest 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_before/O3/smoothstreamingenc_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_before/O3/smoothstreamingenc_gcc.s---write_manifest---before
function id: 28
function flag: True
There are 1401 instructions for function: write_manifest in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '210', 'end': 224}, 'before': {'start': '210', 'end': 223}}}, {'modifyIndex': 2, 'line': {'after': {'start': '279', 'end': 285}, 'before': {'start': '278', 'end': 283}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%r15'}, {'instIndex': 4, 'instruction': 'pushq\t%r14'}, {'instIndex': 6, 'instruction': 'pushq\t%r13'}, {'instIndex': 7, 'instruction': 'pushq\t%r12'}, {'instIndex': 8, 'instruction': 'pushq\t%rbp'}, {'instIndex': 9, 'instruction': 'movq\t%rdi, %rbp'}, {'instIndex': 10, 'instruction': 'pushq\t%rbx'}, {'instIndex': 11, 'instruction': 'subq\t$0x438, %rsp'}, {'instIndex': 12, 'instruction': 'movq\t0x18(%rdi), %r12'}, {'instIndex': 13, 'instruction': 'movl\t%esi, 4(%rsp)'}, {'instIndex': 17, 'instruction': 'movq\t%fs:0x28, %rax'}, {'instIndex': 18, 'instruction': 'movq\t%rax, 0x428(%rsp)'}, {'instIndex': 19, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 21, 'instruction': 'xorl\t%r8d, %r8d'}, {'instIndex': 22, 'instruction': 'leaq\t0x18(%rsp), %rdi'}, {'instIndex': 23, 'instruction': 'movq\t%r14, %rsi'}, {'instIndex': 24, 'instruction': 'leaq\t0x4b0(%rbp), %rcx'}, {'instIndex': 25, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 26, 'instruction': 'call\tavio_open2@PLT'}, {'instIndex': 27, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 28, 'instruction': 'js\t.L64'}, {'instIndex': 29, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 30, 'instruction': 'leaq\t.LC4(%rip), %rsi'}, {'instIndex': 31, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 32, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 39, 'instruction': 'xorl\t%r10d, %r10d'}, {'instIndex': 40, 'instruction': 'xorl\t%r13d, %r13d'}, {'instIndex': 41, 'instruction': 'xorl\t%r15d, %r15d'}, {'instIndex': 42, 'instruction': 'xorl\t%r14d, %r14d'}, {'instIndex': 43, 'instruction': 'leaq\t8(%rdi), %rax'}, {'instIndex': 44, 'instruction': 'leaq\t0x8460(%rbx), %rdx'}, {'instIndex': 45, 'instruction': 'xorl\t%ebx, %ebx'}, {'instIndex': 46, 'instruction': 'leaq\t(%rax,%rcx,8), %r9'}, {'instIndex': 47, 'instruction': 'jmp\t.L29'}, {'instIndex': 137, 'instruction': 'movq\t%r14, %rcx'}, {'instIndex': 138, 'instruction': 'leaq\t.LC3(%rip), %rdx'}, {'instIndex': 139, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 140, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 141, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 142, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 143, 'instruction': 'jmp\t.L22'}, {'instIndex': 293, 'instruction': 'xorl\t%r10d, %r10d'}, {'instIndex': 294, 'instruction': 'xorl\t%r13d, %r13d'}, {'instIndex': 295, 'instruction': 'xorl\t%r15d, %r15d'}, {'instIndex': 296, 'instruction': 'xorl\t%r14d, %r14d'}, {'instIndex': 297, 'instruction': 'xorl\t%ebx, %ebx'}, {'instIndex': 298, 'instruction': 'jmp\t.L25'}, {'instIndex': 1212, 'instruction': 'movq\t%r13, 0x10(%rsp)'}, {'instIndex': 1213, 'instruction': 'jmp\t.L214'}, {'instIndex': 1214, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 1215, 'instruction': 'movq\t%r13, %rsi'}, {'instIndex': 1223, 'instruction': 'movq\t0x68(%rsp), %rdi'}, {'instIndex': 1224, 'instruction': 'call\tavio_rb32@PLT'}, {'instIndex': 1225, 'instruction': 'movq\t0x68(%rsp), %rdi'}, {'instIndex': 1227, 'instruction': 'call\tavio_rl32@PLT'}, {'instIndex': 1228, 'instruction': 'movq\t0x68(%rsp), %rdi'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 115, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 116, 'instruction': 'leaq\t.LC12(%rip), %rsi'}, {'instIndex': 117, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 118, 'instruction': 'xorl\t%r13d, %r13d'}, {'instIndex': 119, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 120, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 121, 'instruction': 'call\tavio_flush@PLT'}, {'instIndex': 122, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 123, 'instruction': 'call\tavio_close@PLT'}, {'instIndex': 124, 'instruction': 'movq\t0x428(%rsp), %rax'}, {'instIndex': 125, 'instruction': 'subq\t%fs:0x28, %rax'}, {'instIndex': 126, 'instruction': 'jne\t.L70'}, {'instIndex': 127, 'instruction': 'addq\t$0x438, %rsp'}, {'instIndex': 128, 'instruction': 'movl\t%r13d, %eax'}, {'instIndex': 129, 'instruction': 'popq\t%rbx'}, {'instIndex': 130, 'instruction': 'popq\t%rbp'}, {'instIndex': 131, 'instruction': 'popq\t%r12'}, {'instIndex': 132, 'instruction': 'popq\t%r13'}, {'instIndex': 133, 'instruction': 'popq\t%r14'}, {'instIndex': 134, 'instruction': 'popq\t%r15'}, {'instIndex': 135, 'instruction': 'ret'}, {'instIndex': 136, 'instruction': 'movl\t%eax, %r13d'}, {'instIndex': 303, 'instruction': 'call\t__stack_chk_fail@PLT'}]}]
Patched function: 1---static int write_manifest 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_before/O3/smoothstreamingenc_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_before/O3/smoothstreamingenc_gcc.s---write_manifest---before
function id: 28
function flag: True
There are 1401 instructions for function: write_manifest in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '210', 'end': 224}, 'before': {'start': '210', 'end': 223}}}, {'modifyIndex': 2, 'line': {'after': {'start': '279', 'end': 285}, 'before': {'start': '278', 'end': 283}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%r15'}, {'instIndex': 4, 'instruction': 'pushq\t%r14'}, {'instIndex': 6, 'instruction': 'pushq\t%r13'}, {'instIndex': 7, 'instruction': 'pushq\t%r12'}, {'instIndex': 8, 'instruction': 'pushq\t%rbp'}, {'instIndex': 9, 'instruction': 'movq\t%rdi, %rbp'}, {'instIndex': 10, 'instruction': 'pushq\t%rbx'}, {'instIndex': 11, 'instruction': 'subq\t$0x438, %rsp'}, {'instIndex': 12, 'instruction': 'movq\t0x18(%rdi), %r12'}, {'instIndex': 13, 'instruction': 'movl\t%esi, 4(%rsp)'}, {'instIndex': 17, 'instruction': 'movq\t%fs:0x28, %rax'}, {'instIndex': 18, 'instruction': 'movq\t%rax, 0x428(%rsp)'}, {'instIndex': 19, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 21, 'instruction': 'xorl\t%r8d, %r8d'}, {'instIndex': 22, 'instruction': 'leaq\t0x18(%rsp), %rdi'}, {'instIndex': 23, 'instruction': 'movq\t%r14, %rsi'}, {'instIndex': 24, 'instruction': 'leaq\t0x4b0(%rbp), %rcx'}, {'instIndex': 25, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 26, 'instruction': 'call\tavio_open2@PLT'}, {'instIndex': 27, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 28, 'instruction': 'js\t.L64'}, {'instIndex': 29, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 30, 'instruction': 'leaq\t.LC4(%rip), %rsi'}, {'instIndex': 31, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 32, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 39, 'instruction': 'xorl\t%r10d, %r10d'}, {'instIndex': 40, 'instruction': 'xorl\t%r13d, %r13d'}, {'instIndex': 41, 'instruction': 'xorl\t%r15d, %r15d'}, {'instIndex': 42, 'instruction': 'xorl\t%r14d, %r14d'}, {'instIndex': 43, 'instruction': 'leaq\t8(%rdi), %rax'}, {'instIndex': 44, 'instruction': 'leaq\t0x8460(%rbx), %rdx'}, {'instIndex': 45, 'instruction': 'xorl\t%ebx, %ebx'}, {'instIndex': 46, 'instruction': 'leaq\t(%rax,%rcx,8), %r9'}, {'instIndex': 47, 'instruction': 'jmp\t.L29'}, {'instIndex': 137, 'instruction': 'movq\t%r14, %rcx'}, {'instIndex': 138, 'instruction': 'leaq\t.LC3(%rip), %rdx'}, {'instIndex': 139, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 140, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 141, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 142, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 143, 'instruction': 'jmp\t.L22'}, {'instIndex': 293, 'instruction': 'xorl\t%r10d, %r10d'}, {'instIndex': 294, 'instruction': 'xorl\t%r13d, %r13d'}, {'instIndex': 295, 'instruction': 'xorl\t%r15d, %r15d'}, {'instIndex': 296, 'instruction': 'xorl\t%r14d, %r14d'}, {'instIndex': 297, 'instruction': 'xorl\t%ebx, %ebx'}, {'instIndex': 298, 'instruction': 'jmp\t.L25'}, {'instIndex': 1212, 'instruction': 'movq\t%r13, 0x10(%rsp)'}, {'instIndex': 1213, 'instruction': 'jmp\t.L214'}, {'instIndex': 1214, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 1215, 'instruction': 'movq\t%r13, %rsi'}, {'instIndex': 1223, 'instruction': 'movq\t0x68(%rsp), %rdi'}, {'instIndex': 1224, 'instruction': 'call\tavio_rb32@PLT'}, {'instIndex': 1225, 'instruction': 'movq\t0x68(%rsp), %rdi'}, {'instIndex': 1227, 'instruction': 'call\tavio_rl32@PLT'}, {'instIndex': 1228, 'instruction': 'movq\t0x68(%rsp), %rdi'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 115, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 116, 'instruction': 'leaq\t.LC12(%rip), %rsi'}, {'instIndex': 117, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 118, 'instruction': 'xorl\t%r13d, %r13d'}, {'instIndex': 119, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 120, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 121, 'instruction': 'call\tavio_flush@PLT'}, {'instIndex': 122, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 123, 'instruction': 'call\tavio_close@PLT'}, {'instIndex': 124, 'instruction': 'movq\t0x428(%rsp), %rax'}, {'instIndex': 125, 'instruction': 'subq\t%fs:0x28, %rax'}, {'instIndex': 126, 'instruction': 'jne\t.L70'}, {'instIndex': 127, 'instruction': 'addq\t$0x438, %rsp'}, {'instIndex': 128, 'instruction': 'movl\t%r13d, %eax'}, {'instIndex': 129, 'instruction': 'popq\t%rbx'}, {'instIndex': 130, 'instruction': 'popq\t%rbp'}, {'instIndex': 131, 'instruction': 'popq\t%r12'}, {'instIndex': 132, 'instruction': 'popq\t%r13'}, {'instIndex': 133, 'instruction': 'popq\t%r14'}, {'instIndex': 134, 'instruction': 'popq\t%r15'}, {'instIndex': 135, 'instruction': 'ret'}, {'instIndex': 136, 'instruction': 'movl\t%eax, %r13d'}, {'instIndex': 303, 'instruction': 'call\t__stack_chk_fail@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_before/O3/smoothstreamingenc.o
Binary file does not exist.
{'write_manifest': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%r15'}, {'instIndex': 4, 'instruction': 'pushq\t%r14'}, {'instIndex': 6, 'instruction': 'pushq\t%r13'}, {'instIndex': 7, 'instruction': 'pushq\t%r12'}, {'instIndex': 8, 'instruction': 'pushq\t%rbp'}, {'instIndex': 9, 'instruction': 'movq\t%rdi, %rbp'}, {'instIndex': 10, 'instruction': 'pushq\t%rbx'}, {'instIndex': 11, 'instruction': 'subq\t$0x438, %rsp'}, {'instIndex': 12, 'instruction': 'movq\t0x18(%rdi), %r12'}, {'instIndex': 13, 'instruction': 'movl\t%esi, 4(%rsp)'}, {'instIndex': 17, 'instruction': 'movq\t%fs:0x28, %rax'}, {'instIndex': 18, 'instruction': 'movq\t%rax, 0x428(%rsp)'}, {'instIndex': 19, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 21, 'instruction': 'xorl\t%r8d, %r8d'}, {'instIndex': 22, 'instruction': 'leaq\t0x18(%rsp), %rdi'}, {'instIndex': 23, 'instruction': 'movq\t%r14, %rsi'}, {'instIndex': 24, 'instruction': 'leaq\t0x4b0(%rbp), %rcx'}, {'instIndex': 25, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 26, 'instruction': 'call\tavio_open2@PLT'}, {'instIndex': 27, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 28, 'instruction': 'js\t.L64'}, {'instIndex': 29, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 30, 'instruction': 'leaq\t.LC4(%rip), %rsi'}, {'instIndex': 31, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 32, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 39, 'instruction': 'xorl\t%r10d, %r10d'}, {'instIndex': 40, 'instruction': 'xorl\t%r13d, %r13d'}, {'instIndex': 41, 'instruction': 'xorl\t%r15d, %r15d'}, {'instIndex': 42, 'instruction': 'xorl\t%r14d, %r14d'}, {'instIndex': 43, 'instruction': 'leaq\t8(%rdi), %rax'}, {'instIndex': 44, 'instruction': 'leaq\t0x8460(%rbx), %rdx'}, {'instIndex': 45, 'instruction': 'xorl\t%ebx, %ebx'}, {'instIndex': 46, 'instruction': 'leaq\t(%rax,%rcx,8), %r9'}, {'instIndex': 47, 'instruction': 'jmp\t.L29'}, {'instIndex': 137, 'instruction': 'movq\t%r14, %rcx'}, {'instIndex': 138, 'instruction': 'leaq\t.LC3(%rip), %rdx'}, {'instIndex': 139, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 140, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 141, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 142, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 143, 'instruction': 'jmp\t.L22'}, {'instIndex': 293, 'instruction': 'xorl\t%r10d, %r10d'}, {'instIndex': 294, 'instruction': 'xorl\t%r13d, %r13d'}, {'instIndex': 295, 'instruction': 'xorl\t%r15d, %r15d'}, {'instIndex': 296, 'instruction': 'xorl\t%r14d, %r14d'}, {'instIndex': 297, 'instruction': 'xorl\t%ebx, %ebx'}, {'instIndex': 298, 'instruction': 'jmp\t.L25'}, {'instIndex': 1212, 'instruction': 'movq\t%r13, 0x10(%rsp)'}, {'instIndex': 1213, 'instruction': 'jmp\t.L214'}, {'instIndex': 1214, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 1215, 'instruction': 'movq\t%r13, %rsi'}, {'instIndex': 1223, 'instruction': 'movq\t0x68(%rsp), %rdi'}, {'instIndex': 1224, 'instruction': 'call\tavio_rb32@PLT'}, {'instIndex': 1225, 'instruction': 'movq\t0x68(%rsp), %rdi'}, {'instIndex': 1227, 'instruction': 'call\tavio_rl32@PLT'}, {'instIndex': 1228, 'instruction': 'movq\t0x68(%rsp), %rdi'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 115, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 116, 'instruction': 'leaq\t.LC12(%rip), %rsi'}, {'instIndex': 117, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 118, 'instruction': 'xorl\t%r13d, %r13d'}, {'instIndex': 119, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 120, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 121, 'instruction': 'call\tavio_flush@PLT'}, {'instIndex': 122, 'instruction': 'movq\t0x18(%rsp), %rdi'}, {'instIndex': 123, 'instruction': 'call\tavio_close@PLT'}, {'instIndex': 124, 'instruction': 'movq\t0x428(%rsp), %rax'}, {'instIndex': 125, 'instruction': 'subq\t%fs:0x28, %rax'}, {'instIndex': 126, 'instruction': 'jne\t.L70'}, {'instIndex': 127, 'instruction': 'addq\t$0x438, %rsp'}, {'instIndex': 128, 'instruction': 'movl\t%r13d, %eax'}, {'instIndex': 129, 'instruction': 'popq\t%rbx'}, {'instIndex': 130, 'instruction': 'popq\t%rbp'}, {'instIndex': 131, 'instruction': 'popq\t%r12'}, {'instIndex': 132, 'instruction': 'popq\t%r13'}, {'instIndex': 133, 'instruction': 'popq\t%r14'}, {'instIndex': 134, 'instruction': 'popq\t%r15'}, {'instIndex': 135, 'instruction': 'ret'}, {'instIndex': 136, 'instruction': 'movl\t%eax, %r13d'}, {'instIndex': 303, 'instruction': 'call\t__stack_chk_fail@PLT'}]}]}
The case of compiler gcc with optimization Os.
Patched source code file: smoothstreamingenc.c
Patched function: 1---static int write_manifest 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_before/Os/smoothstreamingenc_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_before/Os/smoothstreamingenc_gcc.s---write_manifest---before
function id: 20
function flag: True
There are 1224 instructions for function: write_manifest in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '210', 'end': 224}, 'before': {'start': '210', 'end': 223}}}, {'modifyIndex': 2, 'line': {'after': {'start': '279', 'end': 285}, 'before': {'start': '278', 'end': 283}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%r15'}, {'instIndex': 4, 'instruction': 'pushq\t%r14'}, {'instIndex': 6, 'instruction': 'pushq\t%r13'}, {'instIndex': 7, 'instruction': 'movl\t%esi, %r13d'}, {'instIndex': 9, 'instruction': 'pushq\t%r12'}, {'instIndex': 10, 'instruction': 'pushq\t%rbp'}, {'instIndex': 11, 'instruction': 'movq\t%rdi, %rbp'}, {'instIndex': 12, 'instruction': 'pushq\t%rbx'}, {'instIndex': 13, 'instruction': 'subq\t$0x428, %rsp'}, {'instIndex': 14, 'instruction': 'movq\t0x18(%rdi), %rbx'}, {'instIndex': 15, 'instruction': 'movq\t%fs:0x28, %rax'}, {'instIndex': 16, 'instruction': 'movq\t%rax, 0x418(%rsp)'}, {'instIndex': 17, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 21, 'instruction': 'xorl\t%r8d, %r8d'}, {'instIndex': 22, 'instruction': 'leaq\t0x10(%rsp), %rdi'}, {'instIndex': 23, 'instruction': 'movq\t%r14, %rsi'}, {'instIndex': 24, 'instruction': 'leaq\t0x4b0(%rbp), %rcx'}, {'instIndex': 25, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 26, 'instruction': 'call\tavio_open2@PLT'}, {'instIndex': 27, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 28, 'instruction': 'jns\t.L22'}, {'instIndex': 29, 'instruction': 'movl\t%eax, %r12d'}, {'instIndex': 30, 'instruction': 'movq\t%r14, %rcx'}, {'instIndex': 31, 'instruction': 'leaq\t.LC3(%rip), %rdx'}, {'instIndex': 32, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 33, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 34, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 35, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 36, 'instruction': 'jmp\t.L21'}, {'instIndex': 37, 'instruction': 'movq\t0x10(%rsp), %rdi'}, {'instIndex': 38, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 39, 'instruction': 'xorl\t%r15d, %r15d'}, {'instIndex': 40, 'instruction': 'xorl\t%r12d, %r12d'}, {'instIndex': 41, 'instruction': 'leaq\t.LC4(%rip), %rsi'}, {'instIndex': 42, 'instruction': 'xorl\t%r14d, %r14d'}, {'instIndex': 43, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 46, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 47, 'instruction': 'movl\t$0, 8(%rsp)'}, {'instIndex': 71, 'instruction': 'movl\t%esi, %r14d'}, {'instIndex': 72, 'instruction': 'jmp\t.L24'}, {'instIndex': 837, 'instruction': 'call\tavio_rb32@PLT'}, {'instIndex': 838, 'instruction': 'movq\t0x60(%rsp), %rdi'}, {'instIndex': 839, 'instruction': 'call\tavio_rl32@PLT'}, {'instIndex': 840, 'instruction': 'cmpl\t$0x66617274, %eax'}, {'instIndex': 848, 'instruction': 'movq\t0x60(%rsp), %rdi'}, {'instIndex': 849, 'instruction': 'call\tavio_rb32@PLT'}, {'instIndex': 850, 'instruction': 'movq\t0x60(%rsp), %rdi'}, {'instIndex': 852, 'instruction': 'call\tavio_rl32@PLT'}, {'instIndex': 853, 'instruction': 'movq\t0x60(%rsp), %rdi'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 209, 'instruction': 'movq\t0x10(%rsp), %rdi'}, {'instIndex': 210, 'instruction': 'leaq\t.LC13(%rip), %rsi'}, {'instIndex': 211, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 212, 'instruction': 'xorl\t%r12d, %r12d'}, {'instIndex': 213, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 214, 'instruction': 'movq\t0x10(%rsp), %rdi'}, {'instIndex': 215, 'instruction': 'call\tavio_flush@PLT'}, {'instIndex': 216, 'instruction': 'movq\t0x10(%rsp), %rdi'}, {'instIndex': 217, 'instruction': 'call\tavio_close@PLT'}, {'instIndex': 218, 'instruction': 'movq\t0x418(%rsp), %rax'}, {'instIndex': 219, 'instruction': 'subq\t%fs:0x28, %rax'}, {'instIndex': 220, 'instruction': 'je\t.L40'}, {'instIndex': 221, 'instruction': 'call\t__stack_chk_fail@PLT'}, {'instIndex': 222, 'instruction': 'addq\t$0x428, %rsp'}, {'instIndex': 223, 'instruction': 'movl\t%r12d, %eax'}, {'instIndex': 224, 'instruction': 'popq\t%rbx'}, {'instIndex': 225, 'instruction': 'popq\t%rbp'}, {'instIndex': 226, 'instruction': 'popq\t%r12'}, {'instIndex': 227, 'instruction': 'popq\t%r13'}, {'instIndex': 228, 'instruction': 'popq\t%r14'}, {'instIndex': 229, 'instruction': 'popq\t%r15'}, {'instIndex': 230, 'instruction': 'ret'}]}]
Patched function: 1---static int write_manifest 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_before/Os/smoothstreamingenc_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_before/Os/smoothstreamingenc_gcc.s---write_manifest---before
function id: 20
function flag: True
There are 1224 instructions for function: write_manifest in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '210', 'end': 224}, 'before': {'start': '210', 'end': 223}}}, {'modifyIndex': 2, 'line': {'after': {'start': '279', 'end': 285}, 'before': {'start': '278', 'end': 283}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%r15'}, {'instIndex': 4, 'instruction': 'pushq\t%r14'}, {'instIndex': 6, 'instruction': 'pushq\t%r13'}, {'instIndex': 7, 'instruction': 'movl\t%esi, %r13d'}, {'instIndex': 9, 'instruction': 'pushq\t%r12'}, {'instIndex': 10, 'instruction': 'pushq\t%rbp'}, {'instIndex': 11, 'instruction': 'movq\t%rdi, %rbp'}, {'instIndex': 12, 'instruction': 'pushq\t%rbx'}, {'instIndex': 13, 'instruction': 'subq\t$0x428, %rsp'}, {'instIndex': 14, 'instruction': 'movq\t0x18(%rdi), %rbx'}, {'instIndex': 15, 'instruction': 'movq\t%fs:0x28, %rax'}, {'instIndex': 16, 'instruction': 'movq\t%rax, 0x418(%rsp)'}, {'instIndex': 17, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 21, 'instruction': 'xorl\t%r8d, %r8d'}, {'instIndex': 22, 'instruction': 'leaq\t0x10(%rsp), %rdi'}, {'instIndex': 23, 'instruction': 'movq\t%r14, %rsi'}, {'instIndex': 24, 'instruction': 'leaq\t0x4b0(%rbp), %rcx'}, {'instIndex': 25, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 26, 'instruction': 'call\tavio_open2@PLT'}, {'instIndex': 27, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 28, 'instruction': 'jns\t.L22'}, {'instIndex': 29, 'instruction': 'movl\t%eax, %r12d'}, {'instIndex': 30, 'instruction': 'movq\t%r14, %rcx'}, {'instIndex': 31, 'instruction': 'leaq\t.LC3(%rip), %rdx'}, {'instIndex': 32, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 33, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 34, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 35, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 36, 'instruction': 'jmp\t.L21'}, {'instIndex': 37, 'instruction': 'movq\t0x10(%rsp), %rdi'}, {'instIndex': 38, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 39, 'instruction': 'xorl\t%r15d, %r15d'}, {'instIndex': 40, 'instruction': 'xorl\t%r12d, %r12d'}, {'instIndex': 41, 'instruction': 'leaq\t.LC4(%rip), %rsi'}, {'instIndex': 42, 'instruction': 'xorl\t%r14d, %r14d'}, {'instIndex': 43, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 46, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 47, 'instruction': 'movl\t$0, 8(%rsp)'}, {'instIndex': 71, 'instruction': 'movl\t%esi, %r14d'}, {'instIndex': 72, 'instruction': 'jmp\t.L24'}, {'instIndex': 837, 'instruction': 'call\tavio_rb32@PLT'}, {'instIndex': 838, 'instruction': 'movq\t0x60(%rsp), %rdi'}, {'instIndex': 839, 'instruction': 'call\tavio_rl32@PLT'}, {'instIndex': 840, 'instruction': 'cmpl\t$0x66617274, %eax'}, {'instIndex': 848, 'instruction': 'movq\t0x60(%rsp), %rdi'}, {'instIndex': 849, 'instruction': 'call\tavio_rb32@PLT'}, {'instIndex': 850, 'instruction': 'movq\t0x60(%rsp), %rdi'}, {'instIndex': 852, 'instruction': 'call\tavio_rl32@PLT'}, {'instIndex': 853, 'instruction': 'movq\t0x60(%rsp), %rdi'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 209, 'instruction': 'movq\t0x10(%rsp), %rdi'}, {'instIndex': 210, 'instruction': 'leaq\t.LC13(%rip), %rsi'}, {'instIndex': 211, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 212, 'instruction': 'xorl\t%r12d, %r12d'}, {'instIndex': 213, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 214, 'instruction': 'movq\t0x10(%rsp), %rdi'}, {'instIndex': 215, 'instruction': 'call\tavio_flush@PLT'}, {'instIndex': 216, 'instruction': 'movq\t0x10(%rsp), %rdi'}, {'instIndex': 217, 'instruction': 'call\tavio_close@PLT'}, {'instIndex': 218, 'instruction': 'movq\t0x418(%rsp), %rax'}, {'instIndex': 219, 'instruction': 'subq\t%fs:0x28, %rax'}, {'instIndex': 220, 'instruction': 'je\t.L40'}, {'instIndex': 221, 'instruction': 'call\t__stack_chk_fail@PLT'}, {'instIndex': 222, 'instruction': 'addq\t$0x428, %rsp'}, {'instIndex': 223, 'instruction': 'movl\t%r12d, %eax'}, {'instIndex': 224, 'instruction': 'popq\t%rbx'}, {'instIndex': 225, 'instruction': 'popq\t%rbp'}, {'instIndex': 226, 'instruction': 'popq\t%r12'}, {'instIndex': 227, 'instruction': 'popq\t%r13'}, {'instIndex': 228, 'instruction': 'popq\t%r14'}, {'instIndex': 229, 'instruction': 'popq\t%r15'}, {'instIndex': 230, 'instruction': 'ret'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/gcc_before/Os/smoothstreamingenc.o
Binary file does not exist.
{'write_manifest': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%r15'}, {'instIndex': 4, 'instruction': 'pushq\t%r14'}, {'instIndex': 6, 'instruction': 'pushq\t%r13'}, {'instIndex': 7, 'instruction': 'movl\t%esi, %r13d'}, {'instIndex': 9, 'instruction': 'pushq\t%r12'}, {'instIndex': 10, 'instruction': 'pushq\t%rbp'}, {'instIndex': 11, 'instruction': 'movq\t%rdi, %rbp'}, {'instIndex': 12, 'instruction': 'pushq\t%rbx'}, {'instIndex': 13, 'instruction': 'subq\t$0x428, %rsp'}, {'instIndex': 14, 'instruction': 'movq\t0x18(%rdi), %rbx'}, {'instIndex': 15, 'instruction': 'movq\t%fs:0x28, %rax'}, {'instIndex': 16, 'instruction': 'movq\t%rax, 0x418(%rsp)'}, {'instIndex': 17, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 21, 'instruction': 'xorl\t%r8d, %r8d'}, {'instIndex': 22, 'instruction': 'leaq\t0x10(%rsp), %rdi'}, {'instIndex': 23, 'instruction': 'movq\t%r14, %rsi'}, {'instIndex': 24, 'instruction': 'leaq\t0x4b0(%rbp), %rcx'}, {'instIndex': 25, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 26, 'instruction': 'call\tavio_open2@PLT'}, {'instIndex': 27, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 28, 'instruction': 'jns\t.L22'}, {'instIndex': 29, 'instruction': 'movl\t%eax, %r12d'}, {'instIndex': 30, 'instruction': 'movq\t%r14, %rcx'}, {'instIndex': 31, 'instruction': 'leaq\t.LC3(%rip), %rdx'}, {'instIndex': 32, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 33, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 34, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 35, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 36, 'instruction': 'jmp\t.L21'}, {'instIndex': 37, 'instruction': 'movq\t0x10(%rsp), %rdi'}, {'instIndex': 38, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 39, 'instruction': 'xorl\t%r15d, %r15d'}, {'instIndex': 40, 'instruction': 'xorl\t%r12d, %r12d'}, {'instIndex': 41, 'instruction': 'leaq\t.LC4(%rip), %rsi'}, {'instIndex': 42, 'instruction': 'xorl\t%r14d, %r14d'}, {'instIndex': 43, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 46, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 47, 'instruction': 'movl\t$0, 8(%rsp)'}, {'instIndex': 71, 'instruction': 'movl\t%esi, %r14d'}, {'instIndex': 72, 'instruction': 'jmp\t.L24'}, {'instIndex': 837, 'instruction': 'call\tavio_rb32@PLT'}, {'instIndex': 838, 'instruction': 'movq\t0x60(%rsp), %rdi'}, {'instIndex': 839, 'instruction': 'call\tavio_rl32@PLT'}, {'instIndex': 840, 'instruction': 'cmpl\t$0x66617274, %eax'}, {'instIndex': 848, 'instruction': 'movq\t0x60(%rsp), %rdi'}, {'instIndex': 849, 'instruction': 'call\tavio_rb32@PLT'}, {'instIndex': 850, 'instruction': 'movq\t0x60(%rsp), %rdi'}, {'instIndex': 852, 'instruction': 'call\tavio_rl32@PLT'}, {'instIndex': 853, 'instruction': 'movq\t0x60(%rsp), %rdi'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 209, 'instruction': 'movq\t0x10(%rsp), %rdi'}, {'instIndex': 210, 'instruction': 'leaq\t.LC13(%rip), %rsi'}, {'instIndex': 211, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 212, 'instruction': 'xorl\t%r12d, %r12d'}, {'instIndex': 213, 'instruction': 'call\tavio_printf@PLT'}, {'instIndex': 214, 'instruction': 'movq\t0x10(%rsp), %rdi'}, {'instIndex': 215, 'instruction': 'call\tavio_flush@PLT'}, {'instIndex': 216, 'instruction': 'movq\t0x10(%rsp), %rdi'}, {'instIndex': 217, 'instruction': 'call\tavio_close@PLT'}, {'instIndex': 218, 'instruction': 'movq\t0x418(%rsp), %rax'}, {'instIndex': 219, 'instruction': 'subq\t%fs:0x28, %rax'}, {'instIndex': 220, 'instruction': 'je\t.L40'}, {'instIndex': 221, 'instruction': 'call\t__stack_chk_fail@PLT'}, {'instIndex': 222, 'instruction': 'addq\t$0x428, %rsp'}, {'instIndex': 223, 'instruction': 'movl\t%r12d, %eax'}, {'instIndex': 224, 'instruction': 'popq\t%rbx'}, {'instIndex': 225, 'instruction': 'popq\t%rbp'}, {'instIndex': 226, 'instruction': 'popq\t%r12'}, {'instIndex': 227, 'instruction': 'popq\t%r13'}, {'instIndex': 228, 'instruction': 'popq\t%r14'}, {'instIndex': 229, 'instruction': 'popq\t%r15'}, {'instIndex': 230, 'instruction': 'ret'}]}]}
The case of compiler clang with optimization no.
Patched source code file: smoothstreamingenc.c
Patched function: 1---static int write_manifest 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_before/no/smoothstreamingenc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_before/no/smoothstreamingenc.s---write_manifest---before
function id: 6
function flag: True
There are 331 instructions for function: write_manifest in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '210', 'end': 224}, 'before': {'start': '210', 'end': 223}}}, {'modifyIndex': 2, 'line': {'after': {'start': '279', 'end': 285}, 'before': {'start': '278', 'end': 283}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%rbx'}, {'instIndex': 1, 'instruction': 'subq\t$0x4b0, %rsp                     # imm = 0x4B0'}, {'instIndex': 2, 'instruction': 'movq\t%rdi, 0x4a0(%rsp)'}, {'instIndex': 3, 'instruction': 'movl\t%esi, 0x49c(%rsp)'}, {'instIndex': 4, 'instruction': 'movq\t0x4a0(%rsp), %rax'}, {'instIndex': 5, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 6, 'instruction': 'movq\t%rax, 0x490(%rsp)'}, {'instIndex': 7, 'instruction': 'movl\t$0, 0x74(%rsp)'}, {'instIndex': 8, 'instruction': 'movl\t$0, 0x70(%rsp)'}, {'instIndex': 9, 'instruction': 'movl\t$0, 0x6c(%rsp)'}, {'instIndex': 10, 'instruction': 'movl\t$0, 0x68(%rsp)'}, {'instIndex': 11, 'instruction': 'movq\t$0, 0x60(%rsp)'}, {'instIndex': 12, 'instruction': 'leaq\t0x80(%rsp), %rdi'}, {'instIndex': 13, 'instruction': 'movq\t0x4a0(%rsp), %rcx'}, {'instIndex': 14, 'instruction': 'addq\t$0x38, %rcx'}, {'instIndex': 15, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 16, 'instruction': 'leaq\t.L.str.0x20(%rip), %rdx'}, {'instIndex': 17, 'instruction': 'movb\t$0, %al'}, {'instIndex': 18, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 19, 'instruction': 'leaq\t0x80(%rsp), %rsi'}, {'instIndex': 20, 'instruction': 'movq\t0x4a0(%rsp), %rcx'}, {'instIndex': 21, 'instruction': 'addq\t$0x4b0, %rcx                     # imm = 0x4B0'}, {'instIndex': 22, 'instruction': 'leaq\t0x488(%rsp), %rdi'}, {'instIndex': 23, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 24, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 25, 'instruction': 'movl\t%eax, %r8d'}, {'instIndex': 26, 'instruction': 'callq\tavio_open2@PLT'}, {'instIndex': 27, 'instruction': 'movl\t%eax, 0x7c(%rsp)'}, {'instIndex': 28, 'instruction': 'cmpl\t$0, 0x7c(%rsp)'}, {'instIndex': 29, 'instruction': 'jge\t.LBB6_2'}, {'instIndex': 30, 'instruction': 'movq\t0x4a0(%rsp), %rdi'}, {'instIndex': 31, 'instruction': 'leaq\t0x80(%rsp), %rcx'}, {'instIndex': 32, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 33, 'instruction': 'leaq\t.L.str.0x21(%rip), %rdx'}, {'instIndex': 34, 'instruction': 'movb\t$0, %al'}, {'instIndex': 35, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 36, 'instruction': 'movl\t0x7c(%rsp), %eax'}, {'instIndex': 37, 'instruction': 'movl\t%eax, 0x4ac(%rsp)'}, {'instIndex': 38, 'instruction': 'jmp\t.LBB6_40'}, {'instIndex': 39, 'instruction': 'movq\t0x488(%rsp), %rdi'}, {'instIndex': 40, 'instruction': 'leaq\t.L.str.0x22(%rip), %rsi'}, {'instIndex': 41, 'instruction': 'movb\t$0, %al'}, {'instIndex': 42, 'instruction': 'callq\tavio_printf@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 318, 'instruction': 'movq\t0x488(%rsp), %rdi'}, {'instIndex': 319, 'instruction': 'leaq\t.L.str.0x2b(%rip), %rsi'}, {'instIndex': 320, 'instruction': 'movb\t$0, %al'}, {'instIndex': 321, 'instruction': 'callq\tavio_printf@PLT'}, {'instIndex': 322, 'instruction': 'movq\t0x488(%rsp), %rdi'}, {'instIndex': 323, 'instruction': 'callq\tavio_flush@PLT'}, {'instIndex': 324, 'instruction': 'movq\t0x488(%rsp), %rdi'}, {'instIndex': 325, 'instruction': 'callq\tavio_close@PLT'}, {'instIndex': 326, 'instruction': 'movl\t$0, 0x4ac(%rsp)'}, {'instIndex': 327, 'instruction': 'movl\t0x4ac(%rsp), %eax'}, {'instIndex': 328, 'instruction': 'addq\t$0x4b0, %rsp                     # imm = 0x4B0'}, {'instIndex': 329, 'instruction': 'popq\t%rbx'}, {'instIndex': 330, 'instruction': 'retq'}]}]
Patched function: 1---static int write_manifest 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_before/no/smoothstreamingenc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_before/no/smoothstreamingenc.s---write_manifest---before
function id: 6
function flag: True
There are 331 instructions for function: write_manifest in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '210', 'end': 224}, 'before': {'start': '210', 'end': 223}}}, {'modifyIndex': 2, 'line': {'after': {'start': '279', 'end': 285}, 'before': {'start': '278', 'end': 283}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%rbx'}, {'instIndex': 1, 'instruction': 'subq\t$0x4b0, %rsp                     # imm = 0x4B0'}, {'instIndex': 2, 'instruction': 'movq\t%rdi, 0x4a0(%rsp)'}, {'instIndex': 3, 'instruction': 'movl\t%esi, 0x49c(%rsp)'}, {'instIndex': 4, 'instruction': 'movq\t0x4a0(%rsp), %rax'}, {'instIndex': 5, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 6, 'instruction': 'movq\t%rax, 0x490(%rsp)'}, {'instIndex': 7, 'instruction': 'movl\t$0, 0x74(%rsp)'}, {'instIndex': 8, 'instruction': 'movl\t$0, 0x70(%rsp)'}, {'instIndex': 9, 'instruction': 'movl\t$0, 0x6c(%rsp)'}, {'instIndex': 10, 'instruction': 'movl\t$0, 0x68(%rsp)'}, {'instIndex': 11, 'instruction': 'movq\t$0, 0x60(%rsp)'}, {'instIndex': 12, 'instruction': 'leaq\t0x80(%rsp), %rdi'}, {'instIndex': 13, 'instruction': 'movq\t0x4a0(%rsp), %rcx'}, {'instIndex': 14, 'instruction': 'addq\t$0x38, %rcx'}, {'instIndex': 15, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 16, 'instruction': 'leaq\t.L.str.0x20(%rip), %rdx'}, {'instIndex': 17, 'instruction': 'movb\t$0, %al'}, {'instIndex': 18, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 19, 'instruction': 'leaq\t0x80(%rsp), %rsi'}, {'instIndex': 20, 'instruction': 'movq\t0x4a0(%rsp), %rcx'}, {'instIndex': 21, 'instruction': 'addq\t$0x4b0, %rcx                     # imm = 0x4B0'}, {'instIndex': 22, 'instruction': 'leaq\t0x488(%rsp), %rdi'}, {'instIndex': 23, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 24, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 25, 'instruction': 'movl\t%eax, %r8d'}, {'instIndex': 26, 'instruction': 'callq\tavio_open2@PLT'}, {'instIndex': 27, 'instruction': 'movl\t%eax, 0x7c(%rsp)'}, {'instIndex': 28, 'instruction': 'cmpl\t$0, 0x7c(%rsp)'}, {'instIndex': 29, 'instruction': 'jge\t.LBB6_2'}, {'instIndex': 30, 'instruction': 'movq\t0x4a0(%rsp), %rdi'}, {'instIndex': 31, 'instruction': 'leaq\t0x80(%rsp), %rcx'}, {'instIndex': 32, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 33, 'instruction': 'leaq\t.L.str.0x21(%rip), %rdx'}, {'instIndex': 34, 'instruction': 'movb\t$0, %al'}, {'instIndex': 35, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 36, 'instruction': 'movl\t0x7c(%rsp), %eax'}, {'instIndex': 37, 'instruction': 'movl\t%eax, 0x4ac(%rsp)'}, {'instIndex': 38, 'instruction': 'jmp\t.LBB6_40'}, {'instIndex': 39, 'instruction': 'movq\t0x488(%rsp), %rdi'}, {'instIndex': 40, 'instruction': 'leaq\t.L.str.0x22(%rip), %rsi'}, {'instIndex': 41, 'instruction': 'movb\t$0, %al'}, {'instIndex': 42, 'instruction': 'callq\tavio_printf@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 318, 'instruction': 'movq\t0x488(%rsp), %rdi'}, {'instIndex': 319, 'instruction': 'leaq\t.L.str.0x2b(%rip), %rsi'}, {'instIndex': 320, 'instruction': 'movb\t$0, %al'}, {'instIndex': 321, 'instruction': 'callq\tavio_printf@PLT'}, {'instIndex': 322, 'instruction': 'movq\t0x488(%rsp), %rdi'}, {'instIndex': 323, 'instruction': 'callq\tavio_flush@PLT'}, {'instIndex': 324, 'instruction': 'movq\t0x488(%rsp), %rdi'}, {'instIndex': 325, 'instruction': 'callq\tavio_close@PLT'}, {'instIndex': 326, 'instruction': 'movl\t$0, 0x4ac(%rsp)'}, {'instIndex': 327, 'instruction': 'movl\t0x4ac(%rsp), %eax'}, {'instIndex': 328, 'instruction': 'addq\t$0x4b0, %rsp                     # imm = 0x4B0'}, {'instIndex': 329, 'instruction': 'popq\t%rbx'}, {'instIndex': 330, 'instruction': 'retq'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_before/no/smoothstreamingenc.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_before/no/smoothstreamingenc.o---before
The extraction of function: write_manifest
Analyzing the binaries to generate subCFGs from patched function ...
It has 421 nodes and 757 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 331 instructions in binary file.
[4197552, 4197675, 4197721, 4197732, 4197767, 4197783]
[4199201, 4199223, 4199236, 4199249, 4199260]
The execution time of patched subCFG information extraction via angr: 0:00:00.650371
{'write_manifest': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d97>, <DisassemblerInsn "lea" for 0x400d9f>, <DisassemblerInsn "mov" for 0x400da6>, <DisassemblerInsn "call" for 0x400da8>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x400cb0>, <DisassemblerInsn "sub" for 0x400cb1>, <DisassemblerInsn "mov" for 0x400cb8>, <DisassemblerInsn "mov" for 0x400cc0>, <DisassemblerInsn "mov" for 0x400cc7>, <DisassemblerInsn "mov" for 0x400ccf>, <DisassemblerInsn "mov" for 0x400cd3>, <DisassemblerInsn "mov" for 0x400cdb>, <DisassemblerInsn "mov" for 0x400ce3>, <DisassemblerInsn "mov" for 0x400ceb>, <DisassemblerInsn "mov" for 0x400cf3>, <DisassemblerInsn "mov" for 0x400cfb>, <DisassemblerInsn "lea" for 0x400d04>, <DisassemblerInsn "mov" for 0x400d0c>, <DisassemblerInsn "add" for 0x400d14>, <DisassemblerInsn "mov" for 0x400d18>, <DisassemblerInsn "lea" for 0x400d1d>, <DisassemblerInsn "mov" for 0x400d24>, <DisassemblerInsn "call" for 0x400d26>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400d2b>, <DisassemblerInsn "mov" for 0x400d33>, <DisassemblerInsn "add" for 0x400d3b>, <DisassemblerInsn "lea" for 0x400d42>, <DisassemblerInsn "mov" for 0x400d4a>, <DisassemblerInsn "xor" for 0x400d4f>, <DisassemblerInsn "mov" for 0x400d51>, <DisassemblerInsn "call" for 0x400d54>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d87>, <DisassemblerInsn "mov" for 0x400d8b>, <DisassemblerInsn "jmp" for 0x400d92>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d64>, <DisassemblerInsn "lea" for 0x400d6c>, <DisassemblerInsn "mov" for 0x400d74>, <DisassemblerInsn "lea" for 0x400d79>, <DisassemblerInsn "mov" for 0x400d80>, <DisassemblerInsn "call" for 0x400d82>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dad>, <DisassemblerInsn "mov" for 0x400db5>, <DisassemblerInsn "mov" for 0x400db9>, <DisassemblerInsn "cmp" for 0x400dc1>, <DisassemblerInsn "jae" for 0x400dc4>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d59>, <DisassemblerInsn "cmp" for 0x400d5d>, <DisassemblerInsn "jge" for 0x400d62>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40135c>, <DisassemblerInsn "add" for 0x401363>, <DisassemblerInsn "pop" for 0x40136a>, <DisassemblerInsn "ret" for 0x40136b>]'}], 'cfg_block_detailed_info': [{'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x488]>', '<lea~~rsi, [rip + 0x16aa]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 0, 'blockInsts': ['<push~~rbx>', '<sub~~rsp, 0x4b0>', '<mov~~qword ptr [rsp + 0x4a0], rdi>', '<mov~~dword ptr [rsp + 0x49c], esi>', '<mov~~rax, qword ptr [rsp + 0x4a0]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 0x490], rax>', '<mov~~dword ptr [rsp + 0x74], 0>', '<mov~~dword ptr [rsp + 0x70], 0>', '<mov~~dword ptr [rsp + 0x6c], 0>', '<mov~~dword ptr [rsp + 0x68], 0>', '<mov~~qword ptr [rsp + 0x60], 0>', '<lea~~rdi, [rsp + 0x80]>', '<mov~~rcx, qword ptr [rsp + 0x4a0]>', '<add~~rcx, 0x38>', '<mov~~esi, 0x400>', '<lea~~rdx, [rip + 0x1701]>', '<mov~~al, 0>', '<call~~0x500020>']}, {'block_Idx': 1, 'blockInsts': ['<lea~~rsi, [rsp + 0x80]>', '<mov~~rcx, qword ptr [rsp + 0x4a0]>', '<add~~rcx, 0x4b0>', '<lea~~rdi, [rsp + 0x488]>', '<mov~~edx, 2>', '<xor~~eax, eax>', '<mov~~r8d, eax>', '<call~~0x5000b8>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x7c]>', '<mov~~dword ptr [rsp + 0x4ac], eax>', '<jmp~~0x40135c>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x4a0]>', '<lea~~rcx, [rsp + 0x80]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x16b1]>', '<mov~~al, 0>', '<call~~0x500018>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~dword ptr [rsp + 0x78], 0>', '<mov~~eax, dword ptr [rsp + 0x78]>', '<mov~~rcx, qword ptr [rsp + 0x4a0]>', '<cmp~~eax, dword ptr [rcx + 0x2c]>', '<jae~~0x400ea2>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~dword ptr [rsp + 0x7c], eax>', '<cmp~~dword ptr [rsp + 0x7c], 0>', '<jge~~0x400d97>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x4ac]>', '<add~~rsp, 0x4b0>', '<pop~~rbx>', '<ret~~>']}], 'cfg_edge_info': [(0, 1), (2, 4), (1, 2), (4, 6), (5, 7), (2, 3), (3, 5)]}, {'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401344>, <DisassemblerInsn "call" for 0x40134c>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40114a>, <DisassemblerInsn "cmp" for 0x401152>, <DisassemblerInsn "je" for 0x401156>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401351>, <DisassemblerInsn "mov" for 0x40135c>, <DisassemblerInsn "add" for 0x401363>, <DisassemblerInsn "pop" for 0x40136a>, <DisassemblerInsn "ret" for 0x40136b>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401337>, <DisassemblerInsn "call" for 0x40133f>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40130b>, <DisassemblerInsn "lea" for 0x401313>, <DisassemblerInsn "mov" for 0x40131a>, <DisassemblerInsn "call" for 0x40131c>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d87>, <DisassemblerInsn "mov" for 0x400d8b>, <DisassemblerInsn "jmp" for 0x400d92>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401321>, <DisassemblerInsn "lea" for 0x401329>, <DisassemblerInsn "mov" for 0x401330>, <DisassemblerInsn "call" for 0x401332>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40135c>, <DisassemblerInsn "add" for 0x401363>, <DisassemblerInsn "pop" for 0x40136a>, <DisassemblerInsn "ret" for 0x40136b>]'}], 'cfg_block_detailed_info': [{'block_Idx': 40, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x488]>', '<call~~0x5000c8>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x490]>', '<cmp~~dword ptr [rax + 0x2c], 0>', '<je~~0x401321>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~dword ptr [rsp + 0x4ac], 0>', '<mov~~eax, dword ptr [rsp + 0x4ac]>', '<add~~rsp, 0x4b0>', '<pop~~rbx>', '<ret~~>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x488]>', '<call~~0x500058>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x488]>', '<lea~~rsi, [rip + 0x12c8]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x7c]>', '<mov~~dword ptr [rsp + 0x4ac], eax>', '<jmp~~0x40135c>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x488]>', '<lea~~rsi, [rip + 0x13d7]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x4ac]>', '<add~~rsp, 0x4b0>', '<pop~~rbx>', '<ret~~>']}], 'cfg_edge_info': [(36, 40), (33, 36), (40, 46), (31, 33), (5, 7), (49, 33)]}]}
{'write_manifest': [4199201, 4199223, 4199236, 4199249, 4199260]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_before/no/smoothstreamingenc.o---before
The extraction of function: write_manifest
[4199201, 4199223, 4199236, 4199249, 4199260]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 120 nodes and 187 edges in CFGEmulated.
It has 116 nodes and 165 edges in CDG.
It has 1699 nodes and 2254 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4199201, 4199223, 4199236, 4199249, 4199260]
{4197767, 4198794, 4199179, 4198034, 4198291, 4197783, 4199201, 4198050, 4198309, 4198060, 4197805, 4198708, 4197813, 4199223, 4199236, 4198085, 4199109, 4198730, 4197834, 4199249, 4198226, 4198355, 4197721, 4199260, 4198236, 4198748, 4197732, 4198638, 4198269}
[6, 54, 20, 40, 82, 17, 33, 14, 32, 22, 85, 23, 2, 43, 35, 50, 41, 19, 61, 51, 16, 47, 29, 5, 4, 58, 10, 42, 12, 39, 53, 28, 78, 49, 48, 15, 72, 21, 76, 27, 79, 13, 9, 11]
The execution time of patched slicing information extraction via angr: 0:01:36.084997
{'write_manifest': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d97>, <DisassemblerInsn "lea" for 0x400d9f>, <DisassemblerInsn "mov" for 0x400da6>, <DisassemblerInsn "call" for 0x400da8>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4012c5>, <DisassemblerInsn "mov" for 0x4012cd>, <DisassemblerInsn "movsxd" for 0x4012d1>, <DisassemblerInsn "imul" for 0x4012d6>, <DisassemblerInsn "add" for 0x4012dd>, <DisassemblerInsn "mov" for 0x4012e0>, <DisassemblerInsn "mov" for 0x4012e8>, <DisassemblerInsn "mov" for 0x4012ef>, <DisassemblerInsn "mov" for 0x4012f7>, <DisassemblerInsn "mov" for 0x4012fa>, <DisassemblerInsn "mov" for 0x401302>, <DisassemblerInsn "call" for 0x401306>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400f37>, <DisassemblerInsn "mov" for 0x400f3f>, <DisassemblerInsn "lea" for 0x400f44>, <DisassemblerInsn "mov" for 0x400f4b>, <DisassemblerInsn "call" for 0x400f4d>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40114a>, <DisassemblerInsn "cmp" for 0x401152>, <DisassemblerInsn "je" for 0x401156>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401134>, <DisassemblerInsn "lea" for 0x40113c>, <DisassemblerInsn "mov" for 0x401143>, <DisassemblerInsn "call" for 0x401145>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ec5>, <DisassemblerInsn "cmp" for 0x400ecd>, <DisassemblerInsn "je" for 0x400ed1>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400f7d>, <DisassemblerInsn "lea" for 0x400f85>, <DisassemblerInsn "mov" for 0x400f8c>, <DisassemblerInsn "call" for 0x400f8e>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e3b>, <DisassemblerInsn "mov" for 0x400e43>, <DisassemblerInsn "movsxd" for 0x400e47>, <DisassemblerInsn "mov" for 0x400e4c>, <DisassemblerInsn "mov" for 0x400e50>, <DisassemblerInsn "cmp" for 0x400e54>, <DisassemblerInsn "jne" for 0x400e58>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400f5c>, <DisassemblerInsn "mov" for 0x400f64>, <DisassemblerInsn "mov" for 0x400f6c>, <DisassemblerInsn "lea" for 0x400f6f>, <DisassemblerInsn "mov" for 0x400f76>, <DisassemblerInsn "call" for 0x400f78>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400e90>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40130b>, <DisassemblerInsn "lea" for 0x401313>, <DisassemblerInsn "mov" for 0x40131a>, <DisassemblerInsn "call" for 0x40131c>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e92>, <DisassemblerInsn "add" for 0x400e96>, <DisassemblerInsn "mov" for 0x400e99>, <DisassemblerInsn "jmp" for 0x400e9d>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400d2b>, <DisassemblerInsn "mov" for 0x400d33>, <DisassemblerInsn "add" for 0x400d3b>, <DisassemblerInsn "lea" for 0x400d42>, <DisassemblerInsn "mov" for 0x400d4a>, <DisassemblerInsn "xor" for 0x400d4f>, <DisassemblerInsn "mov" for 0x400d51>, <DisassemblerInsn "call" for 0x400d54>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40115c>, <DisassemblerInsn "mov" for 0x401164>, <DisassemblerInsn "mov" for 0x40116c>, <DisassemblerInsn "mov" for 0x401174>, <DisassemblerInsn "mov" for 0x401178>, <DisassemblerInsn "lea" for 0x40117c>, <DisassemblerInsn "mov" for 0x401183>, <DisassemblerInsn "call" for 0x401185>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400f2f>, <DisassemblerInsn "mov" for 0x400f33>, <DisassemblerInsn "mov" for 0x400f37>, <DisassemblerInsn "mov" for 0x400f3f>, <DisassemblerInsn "lea" for 0x400f44>, <DisassemblerInsn "mov" for 0x400f4b>, <DisassemblerInsn "call" for 0x400f4d>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ff0>, <DisassemblerInsn "mov" for 0x400ff8>, <DisassemblerInsn "movsxd" for 0x400ffc>, <DisassemblerInsn "imul" for 0x401001>, <DisassemblerInsn "add" for 0x401008>, <DisassemblerInsn "mov" for 0x40100b>, <DisassemblerInsn "mov" for 0x401010>, <DisassemblerInsn "mov" for 0x401018>, <DisassemblerInsn "movsxd" for 0x40101c>, <DisassemblerInsn "mov" for 0x401021>, <DisassemblerInsn "mov" for 0x401025>, <DisassemblerInsn "cmp" for 0x401029>, <DisassemblerInsn "je" for 0x40102d>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400fa5>, <DisassemblerInsn "mov" for 0x400fad>, <DisassemblerInsn "mov" for 0x400fb5>, <DisassemblerInsn "mov" for 0x400fbd>, <DisassemblerInsn "mov" for 0x400fc1>, <DisassemblerInsn "lea" for 0x400fc5>, <DisassemblerInsn "mov" for 0x400fcc>, <DisassemblerInsn "call" for 0x400fce>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e76>, <DisassemblerInsn "mov" for 0x400e7b>, <DisassemblerInsn "mov" for 0x400e81>, <DisassemblerInsn "mov" for 0x400e85>, <DisassemblerInsn "add" for 0x400e89>, <DisassemblerInsn "mov" for 0x400e8c>, <DisassemblerInsn "jmp" for 0x400e90>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "sub" for 0x401520>, <DisassemblerInsn "mov" for 0x401524>, <DisassemblerInsn "mov" for 0x401529>, <DisassemblerInsn "mov" for 0x40152e>, <DisassemblerInsn "mov" for 0x401532>, <DisassemblerInsn "mov" for 0x401536>, <DisassemblerInsn "mov" for 0x40153b>, <DisassemblerInsn "mov" for 0x401543>, <DisassemblerInsn "mov" for 0x40154b>, <DisassemblerInsn "cmp" for 0x401550>, <DisassemblerInsn "jg" for 0x401557>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4010ee>, <DisassemblerInsn "mov" for 0x4010f6>, <DisassemblerInsn "movsxd" for 0x4010fa>, <DisassemblerInsn "imul" for 0x4010ff>, <DisassemblerInsn "add" for 0x401106>, <DisassemblerInsn "mov" for 0x401109>, <DisassemblerInsn "mov" for 0x401111>, <DisassemblerInsn "mov" for 0x401118>, <DisassemblerInsn "mov" for 0x401120>, <DisassemblerInsn "mov" for 0x401123>, <DisassemblerInsn "mov" for 0x40112b>, <DisassemblerInsn "call" for 0x40112f>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400eac>, <DisassemblerInsn "mov" for 0x400eb5>, <DisassemblerInsn "mov" for 0x400ebd>, <DisassemblerInsn "mov" for 0x400ec5>, <DisassemblerInsn "cmp" for 0x400ecd>, <DisassemblerInsn "je" for 0x400ed1>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400fd3>, <DisassemblerInsn "mov" for 0x400fdb>, <DisassemblerInsn "mov" for 0x400fdf>, <DisassemblerInsn "cmp" for 0x400fe7>, <DisassemblerInsn "jae" for 0x400fea>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400f27>, <DisassemblerInsn "mov" for 0x400f2b>, <DisassemblerInsn "mov" for 0x400f2f>, <DisassemblerInsn "mov" for 0x400f33>, <DisassemblerInsn "mov" for 0x400f37>, <DisassemblerInsn "mov" for 0x400f3f>, <DisassemblerInsn "lea" for 0x400f44>, <DisassemblerInsn "mov" for 0x400f4b>, <DisassemblerInsn "call" for 0x400f4d>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d64>, <DisassemblerInsn "lea" for 0x400d6c>, <DisassemblerInsn "mov" for 0x400d74>, <DisassemblerInsn "lea" for 0x400d79>, <DisassemblerInsn "mov" for 0x400d80>, <DisassemblerInsn "call" for 0x400d82>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d59>, <DisassemblerInsn "cmp" for 0x400d5d>, <DisassemblerInsn "jge" for 0x400d62>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401344>, <DisassemblerInsn "call" for 0x40134c>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dad>, <DisassemblerInsn "mov" for 0x400db5>, <DisassemblerInsn "mov" for 0x400db9>, <DisassemblerInsn "cmp" for 0x400dc1>, <DisassemblerInsn "jae" for 0x400dc4>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401321>, <DisassemblerInsn "lea" for 0x401329>, <DisassemblerInsn "mov" for 0x401330>, <DisassemblerInsn "call" for 0x401332>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dca>, <DisassemblerInsn "mov" for 0x400dd2>, <DisassemblerInsn "movsxd" for 0x400dd6>, <DisassemblerInsn "imul" for 0x400ddb>, <DisassemblerInsn "add" for 0x400de2>, <DisassemblerInsn "mov" for 0x400de5>, <DisassemblerInsn "mov" for 0x400dea>, <DisassemblerInsn "cmp" for 0x400def>, <DisassemblerInsn "jle" for 0x400df6>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400f93>, <DisassemblerInsn "cmp" for 0x400f9b>, <DisassemblerInsn "je" for 0x400f9f>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011a7>, <DisassemblerInsn "mov" for 0x4011af>, <DisassemblerInsn "movsxd" for 0x4011b3>, <DisassemblerInsn "imul" for 0x4011b8>, <DisassemblerInsn "add" for 0x4011bf>, <DisassemblerInsn "mov" for 0x4011c2>, <DisassemblerInsn "mov" for 0x4011c7>, <DisassemblerInsn "mov" for 0x4011cf>, <DisassemblerInsn "movsxd" for 0x4011d3>, <DisassemblerInsn "mov" for 0x4011d8>, <DisassemblerInsn "mov" for 0x4011dc>, <DisassemblerInsn "cmp" for 0x4011e0>, <DisassemblerInsn "je" for 0x4011e4>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400f52>, <DisassemblerInsn "jne" for 0x400f5a>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401192>, <DisassemblerInsn "mov" for 0x401196>, <DisassemblerInsn "cmp" for 0x40119e>, <DisassemblerInsn "jae" for 0x4011a1>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40118a>, <DisassemblerInsn "mov" for 0x401192>, <DisassemblerInsn "mov" for 0x401196>, <DisassemblerInsn "cmp" for 0x40119e>, <DisassemblerInsn "jae" for 0x4011a1>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401337>, <DisassemblerInsn "call" for 0x40133f>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400df8>, <DisassemblerInsn "mov" for 0x400dfd>, <DisassemblerInsn "mov" for 0x400e04>, <DisassemblerInsn "mov" for 0x400e09>, <DisassemblerInsn "sub" for 0x400e0f>, <DisassemblerInsn "movsxd" for 0x400e12>, <DisassemblerInsn "mov" for 0x400e15>, <DisassemblerInsn "mov" for 0x400e19>, <DisassemblerInsn "mov" for 0x400e1e>, <DisassemblerInsn "mov" for 0x400e23>, <DisassemblerInsn "mov" for 0x400e2a>, <DisassemblerInsn "add" for 0x400e2f>, <DisassemblerInsn "mov" for 0x400e36>, <DisassemblerInsn "mov" for 0x400e3b>, <DisassemblerInsn "mov" for 0x400e43>, <DisassemblerInsn "movsxd" for 0x400e47>, <DisassemblerInsn "mov" for 0x400e4c>, <DisassemblerInsn "mov" for 0x400e50>, <DisassemblerInsn "cmp" for 0x400e54>, <DisassemblerInsn "jne" for 0x400e58>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400fdb>, <DisassemblerInsn "mov" for 0x400fdf>, <DisassemblerInsn "cmp" for 0x400fe7>, <DisassemblerInsn "jae" for 0x400fea>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ed3>, <DisassemblerInsn "mov" for 0x400ed7>, <DisassemblerInsn "cmp" for 0x400edf>, <DisassemblerInsn "jle" for 0x400ee2>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401351>, <DisassemblerInsn "mov" for 0x40135c>, <DisassemblerInsn "add" for 0x401363>, <DisassemblerInsn "pop" for 0x40136a>, <DisassemblerInsn "ret" for 0x40136b>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400db5>, <DisassemblerInsn "mov" for 0x400db9>, <DisassemblerInsn "cmp" for 0x400dc1>, <DisassemblerInsn "jae" for 0x400dc4>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "add" for 0x401689>, <DisassemblerInsn "ret" for 0x40168d>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400ea2>, <DisassemblerInsn "jne" for 0x400eaa>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d87>, <DisassemblerInsn "mov" for 0x400d8b>, <DisassemblerInsn "jmp" for 0x400d92>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40135c>, <DisassemblerInsn "add" for 0x401363>, <DisassemblerInsn "pop" for 0x40136a>, <DisassemblerInsn "ret" for 0x40136b>]'}], 'cfg_block_detailed_info': [{'block_Idx': 6, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x488]>', '<lea~~rsi, [rip + 0x16aa]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x490]>', '<mov~~rdi, qword ptr [rax + 0x20]>', '<movsxd~~rax, dword ptr [rsp + 0x3c]>', '<imul~~rax, rax, 0x8480>', '<add~~rdi, rax>', '<mov~~rsi, qword ptr [rsp + 0x488]>', '<mov~~edx, dword ptr [rsp + 0x49c]>', '<mov~~rax, qword ptr [rsp + 0x490]>', '<mov~~ecx, dword ptr [rax + 0x10]>', '<mov~~rax, qword ptr [rsp + 0x490]>', '<mov~~r8d, dword ptr [rax + 8]>', '<call~~0x401520>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x488]>', '<mov~~rdx, qword ptr [rsp + 0x60]>', '<lea~~rsi, [rip + 0x152d]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x490]>', '<cmp~~dword ptr [rax + 0x2c], 0>', '<je~~0x401321>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x488]>', '<lea~~rsi, [rip + 0x149f]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x490]>', '<cmp~~dword ptr [rax + 8], 0>', '<je~~0x400f37>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x488]>', '<lea~~rsi, [rip + 0x1572]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4a0]>', '<mov~~rax, qword ptr [rax + 0x30]>', '<movsxd~~rcx, dword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0xc], 0>', '<jne~~0x400e76>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x488]>', '<mov~~rax, qword ptr [rsp + 0x490]>', '<mov~~edx, dword ptr [rax + 0x10]>', '<lea~~rsi, [rip + 0x1549]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 22, 'blockInsts': ['<jmp~~0x400e92>']}, {'block_Idx': 85, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x488]>', '<lea~~rsi, [rip + 0x12c8]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x78]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x78], eax>', '<jmp~~0x400db5>']}, {'block_Idx': 2, 'blockInsts': ['<lea~~rsi, [rsp + 0x80]>', '<mov~~rcx, qword ptr [rsp + 0x4a0]>', '<add~~rcx, 0x4b0>', '<lea~~rdi, [rsp + 0x488]>', '<mov~~edx, 2>', '<xor~~eax, eax>', '<mov~~r8d, eax>', '<call~~0x5000b8>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~dword ptr [rsp + 0x3c], 0xffffffff>', '<mov~~dword ptr [rsp + 0x38], 0>', '<mov~~rdi, qword ptr [rsp + 0x488]>', '<mov~~edx, dword ptr [rsp + 0x68]>', '<mov~~ecx, dword ptr [rsp + 0x70]>', '<lea~~rsi, [rip + 0x146f]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x28]>', '<mov~~dword ptr [rsp + 0x70], eax>', '<mov~~rdi, qword ptr [rsp + 0x488]>', '<mov~~rdx, qword ptr [rsp + 0x60]>', '<lea~~rsi, [rip + 0x152d]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x490]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<movsxd~~rcx, dword ptr [rsp + 0x78]>', '<imul~~rcx, rcx, 0x8480>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x40], rax>', '<mov~~rax, qword ptr [rsp + 0x4a0]>', '<mov~~rax, qword ptr [rax + 0x30]>', '<movsxd~~rcx, dword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0xc], 0>', '<je~~0x401034>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~dword ptr [rsp + 0x4c], 0xffffffff>', '<mov~~dword ptr [rsp + 0x48], 0>', '<mov~~rdi, qword ptr [rsp + 0x488]>', '<mov~~edx, dword ptr [rsp + 0x6c]>', '<mov~~ecx, dword ptr [rsp + 0x74]>', '<lea~~rsi, [rip + 0x1535]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~eax, dword ptr [rax + 0x8450]>', '<mov~~dword ptr [rsp + 0x70], eax>', '<mov~~eax, dword ptr [rsp + 0x68]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x68], eax>', '<jmp~~0x400e92>']}, {'block_Idx': 61, 'blockInsts': ['<sub~~rsp, 0x38>', '<mov~~qword ptr [rsp + 0x30], rdi>', '<mov~~qword ptr [rsp + 0x28], rsi>', '<mov~~dword ptr [rsp + 0x24], edx>', '<mov~~dword ptr [rsp + 0x20], ecx>', '<mov~~dword ptr [rsp + 0x1c], r8d>', '<mov~~dword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x10], 0>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<cmp~~dword ptr [rax + 0x8450], 0>', '<jg~~0x40155e>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x490]>', '<mov~~rdi, qword ptr [rax + 0x20]>', '<movsxd~~rax, dword ptr [rsp + 0x4c]>', '<imul~~rax, rax, 0x8480>', '<add~~rdi, rax>', '<mov~~rsi, qword ptr [rsp + 0x488]>', '<mov~~edx, dword ptr [rsp + 0x49c]>', '<mov~~rax, qword ptr [rsp + 0x490]>', '<mov~~ecx, dword ptr [rax + 0x10]>', '<mov~~rax, qword ptr [rsp + 0x490]>', '<mov~~r8d, dword ptr [rax + 8]>', '<call~~0x401520>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~qword ptr [rsp + 0x60], 0>', '<mov~~dword ptr [rsp + 0x70], 0>', '<mov~~dword ptr [rsp + 0x74], 0>', '<mov~~rax, qword ptr [rsp + 0x490]>', '<cmp~~dword ptr [rax + 8], 0>', '<je~~0x400f37>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~dword ptr [rsp + 0x78], 0>', '<mov~~eax, dword ptr [rsp + 0x78]>', '<mov~~rcx, qword ptr [rsp + 0x4a0]>', '<cmp~~eax, dword ptr [rcx + 0x2c]>', '<jae~~0x4010ee>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x70]>', '<mov~~dword ptr [rsp + 0x28], eax>', '<mov~~eax, dword ptr [rsp + 0x28]>', '<mov~~dword ptr [rsp + 0x70], eax>', '<mov~~rdi, qword ptr [rsp + 0x488]>', '<mov~~rdx, qword ptr [rsp + 0x60]>', '<lea~~rsi, [rip + 0x152d]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x4a0]>', '<lea~~rcx, [rsp + 0x80]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x16b1]>', '<mov~~al, 0>', '<call~~0x500018>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~dword ptr [rsp + 0x7c], eax>', '<cmp~~dword ptr [rsp + 0x7c], 0>', '<jge~~0x400d97>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x488]>', '<call~~0x5000c8>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~dword ptr [rsp + 0x78], 0>', '<mov~~eax, dword ptr [rsp + 0x78]>', '<mov~~rcx, qword ptr [rsp + 0x4a0]>', '<cmp~~eax, dword ptr [rcx + 0x2c]>', '<jae~~0x400ea2>']}, {'block_Idx': 42, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x488]>', '<lea~~rsi, [rip + 0x13d7]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x490]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<movsxd~~rcx, dword ptr [rsp + 0x78]>', '<imul~~rcx, rcx, 0x8480>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x58], rax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<cmp~~dword ptr [rax + 0x8450], 0>', '<jle~~0x400e3b>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x490]>', '<cmp~~dword ptr [rax + 0x28], 0>', '<je~~0x40114a>']}, {'block_Idx': 53, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x490]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<movsxd~~rcx, dword ptr [rsp + 0x78]>', '<imul~~rcx, rcx, 0x8480>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x30], rax>', '<mov~~rax, qword ptr [rsp + 0x4a0]>', '<mov~~rax, qword ptr [rax + 0x30]>', '<movsxd~~rcx, dword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0xc], 1>', '<je~~0x4011eb>']}, {'block_Idx': 28, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x49c], 0>', '<jne~~0x400f7d>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x78]>', '<mov~~rcx, qword ptr [rsp + 0x4a0]>', '<cmp~~eax, dword ptr [rcx + 0x2c]>', '<jae~~0x4012c5>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~dword ptr [rsp + 0x78], 0>', '<mov~~eax, dword ptr [rsp + 0x78]>', '<mov~~rcx, qword ptr [rsp + 0x4a0]>', '<cmp~~eax, dword ptr [rcx + 0x2c]>', '<jae~~0x4012c5>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x488]>', '<call~~0x500058>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rax + 0x8460]>', '<mov~~rcx, qword ptr [rsp + 0x58]>', '<mov~~ecx, dword ptr [rcx + 0x8450]>', '<sub~~ecx, 1>', '<movsxd~~rcx, ecx>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~qword ptr [rsp + 0x50], rax>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<mov~~rax, qword ptr [rax + 0x800]>', '<mov~~rcx, qword ptr [rsp + 0x50]>', '<add~~rax, qword ptr [rcx + 0x808]>', '<mov~~qword ptr [rsp + 0x60], rax>', '<mov~~rax, qword ptr [rsp + 0x4a0]>', '<mov~~rax, qword ptr [rax + 0x30]>', '<movsxd~~rcx, dword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0xc], 0>', '<jne~~0x400e76>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x78]>', '<mov~~rcx, qword ptr [rsp + 0x4a0]>', '<cmp~~eax, dword ptr [rcx + 0x2c]>', '<jae~~0x4010ee>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x74]>', '<mov~~rcx, qword ptr [rsp + 0x490]>', '<cmp~~eax, dword ptr [rcx + 8]>', '<jle~~0x400ef5>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~dword ptr [rsp + 0x4ac], 0>', '<mov~~eax, dword ptr [rsp + 0x4ac]>', '<add~~rsp, 0x4b0>', '<pop~~rbx>', '<ret~~>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x78]>', '<mov~~rcx, qword ptr [rsp + 0x4a0]>', '<cmp~~eax, dword ptr [rcx + 0x2c]>', '<jae~~0x400ea2>']}, {'block_Idx': 79, 'blockInsts': ['<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 13, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x49c], 0>', '<jne~~0x400ec5>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x7c]>', '<mov~~dword ptr [rsp + 0x4ac], eax>', '<jmp~~0x40135c>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x4ac]>', '<add~~rsp, 0x4b0>', '<pop~~rbx>', '<ret~~>']}], 'cfg_edge_info': [(79, 85), (16, 20), (33, 39), (42, 48), (43, 49), (4, 6), (22, 23), (27, 13), (17, 21), (9, 11), (49, 53), (72, 51), (10, 12), (28, 33), (13, 17), (54, 61), (32, 33), (85, 42), (4, 5), (29, 28), (54, 85), (12, 15), (5, 9), (82, 40), (39, 41), (20, 28), (58, 76), (27, 12), (51, 61), (23, 27), (40, 43), (2, 4), (17, 20), (19, 23), (51, 82), (13, 16), (28, 32), (78, 54), (47, 51), (16, 21), (6, 10), (35, 28), (41, 47), (12, 14), (40, 42), (39, 40), (49, 54), (10, 13), (48, 58), (79, 82), (47, 50)], 'cdg_edge_info': [(39, 82), (4, 58), (4, 9), (4, 6), (4, 76), (39, 51), (4, 33), (10, 12), (4, 39), (13, 17), (4, 42), (4, 48), (10, 27), (4, 5), (4, 11), (39, 41), (27, 12), (40, 43), (40, 49), (39, 47), (27, 27), (10, 23), (13, 16), (28, 32), (40, 85), (4, 10), (4, 13), (4, 28), (27, 23), (40, 54), (4, 40)], 'ddg_edge_info': [(6, 82), (42, 48), (4, 9), (33, 54), (39, 51), (6, 48), (32, 85), (10, 27), (32, 39), (41, 51), (28, 51), (85, 48), (82, 40), (5, 76), (6, 41), (23, 27), (82, 58), (6, 13), (33, 40), (82, 42), (6, 43), (9, 76), (48, 58), (16, 17), (33, 42), (6, 27), (6, 54), (32, 82), (32, 48), (5, 9), (58, 76), (28, 32), (82, 85), (32, 41), (33, 58), (6, 58), (33, 85), (32, 43), (85, 58), (6, 33), (33, 51), (6, 42), (6, 51), (10, 12), (85, 42), (28, 54), (6, 17), (23, 12), (43, 54), (32, 54), (10, 23), (6, 10), (82, 48), (33, 82), (6, 12), (32, 40), (33, 39), (6, 85), (43, 49), (33, 48), (32, 58), (16, 41), (39, 54), (28, 33), (32, 33), (6, 23), (32, 42), (33, 41), (32, 51), (6, 32), (16, 43), (82, 43), (6, 16), (41, 47), (33, 43), (39, 40), (82, 54)]}]}
{'write_manifest': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%rbx'}, {'instIndex': 1, 'instruction': 'subq\t$0x4b0, %rsp                     # imm = 0x4B0'}, {'instIndex': 2, 'instruction': 'movq\t%rdi, 0x4a0(%rsp)'}, {'instIndex': 3, 'instruction': 'movl\t%esi, 0x49c(%rsp)'}, {'instIndex': 4, 'instruction': 'movq\t0x4a0(%rsp), %rax'}, {'instIndex': 5, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 6, 'instruction': 'movq\t%rax, 0x490(%rsp)'}, {'instIndex': 7, 'instruction': 'movl\t$0, 0x74(%rsp)'}, {'instIndex': 8, 'instruction': 'movl\t$0, 0x70(%rsp)'}, {'instIndex': 9, 'instruction': 'movl\t$0, 0x6c(%rsp)'}, {'instIndex': 10, 'instruction': 'movl\t$0, 0x68(%rsp)'}, {'instIndex': 11, 'instruction': 'movq\t$0, 0x60(%rsp)'}, {'instIndex': 12, 'instruction': 'leaq\t0x80(%rsp), %rdi'}, {'instIndex': 13, 'instruction': 'movq\t0x4a0(%rsp), %rcx'}, {'instIndex': 14, 'instruction': 'addq\t$0x38, %rcx'}, {'instIndex': 15, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 16, 'instruction': 'leaq\t.L.str.0x20(%rip), %rdx'}, {'instIndex': 17, 'instruction': 'movb\t$0, %al'}, {'instIndex': 18, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 19, 'instruction': 'leaq\t0x80(%rsp), %rsi'}, {'instIndex': 20, 'instruction': 'movq\t0x4a0(%rsp), %rcx'}, {'instIndex': 21, 'instruction': 'addq\t$0x4b0, %rcx                     # imm = 0x4B0'}, {'instIndex': 22, 'instruction': 'leaq\t0x488(%rsp), %rdi'}, {'instIndex': 23, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 24, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 25, 'instruction': 'movl\t%eax, %r8d'}, {'instIndex': 26, 'instruction': 'callq\tavio_open2@PLT'}, {'instIndex': 27, 'instruction': 'movl\t%eax, 0x7c(%rsp)'}, {'instIndex': 28, 'instruction': 'cmpl\t$0, 0x7c(%rsp)'}, {'instIndex': 29, 'instruction': 'jge\t.LBB6_2'}, {'instIndex': 30, 'instruction': 'movq\t0x4a0(%rsp), %rdi'}, {'instIndex': 31, 'instruction': 'leaq\t0x80(%rsp), %rcx'}, {'instIndex': 32, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 33, 'instruction': 'leaq\t.L.str.0x21(%rip), %rdx'}, {'instIndex': 34, 'instruction': 'movb\t$0, %al'}, {'instIndex': 35, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 36, 'instruction': 'movl\t0x7c(%rsp), %eax'}, {'instIndex': 37, 'instruction': 'movl\t%eax, 0x4ac(%rsp)'}, {'instIndex': 38, 'instruction': 'jmp\t.LBB6_40'}, {'instIndex': 39, 'instruction': 'movq\t0x488(%rsp), %rdi'}, {'instIndex': 40, 'instruction': 'leaq\t.L.str.0x22(%rip), %rsi'}, {'instIndex': 41, 'instruction': 'movb\t$0, %al'}, {'instIndex': 42, 'instruction': 'callq\tavio_printf@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 318, 'instruction': 'movq\t0x488(%rsp), %rdi'}, {'instIndex': 319, 'instruction': 'leaq\t.L.str.0x2b(%rip), %rsi'}, {'instIndex': 320, 'instruction': 'movb\t$0, %al'}, {'instIndex': 321, 'instruction': 'callq\tavio_printf@PLT'}, {'instIndex': 322, 'instruction': 'movq\t0x488(%rsp), %rdi'}, {'instIndex': 323, 'instruction': 'callq\tavio_flush@PLT'}, {'instIndex': 324, 'instruction': 'movq\t0x488(%rsp), %rdi'}, {'instIndex': 325, 'instruction': 'callq\tavio_close@PLT'}, {'instIndex': 326, 'instruction': 'movl\t$0, 0x4ac(%rsp)'}, {'instIndex': 327, 'instruction': 'movl\t0x4ac(%rsp), %eax'}, {'instIndex': 328, 'instruction': 'addq\t$0x4b0, %rsp                     # imm = 0x4B0'}, {'instIndex': 329, 'instruction': 'popq\t%rbx'}, {'instIndex': 330, 'instruction': 'retq'}]}]}
The case of compiler clang with optimization O0.
Patched source code file: smoothstreamingenc.c
Patched function: 1---static int write_manifest 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_before/O0/smoothstreamingenc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_before/O0/smoothstreamingenc.s---write_manifest---before
function id: 6
function flag: True
There are 331 instructions for function: write_manifest in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '210', 'end': 224}, 'before': {'start': '210', 'end': 223}}}, {'modifyIndex': 2, 'line': {'after': {'start': '279', 'end': 285}, 'before': {'start': '278', 'end': 283}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%rbx'}, {'instIndex': 1, 'instruction': 'subq\t$0x4b0, %rsp                     # imm = 0x4B0'}, {'instIndex': 2, 'instruction': 'movq\t%rdi, 0x4a0(%rsp)'}, {'instIndex': 3, 'instruction': 'movl\t%esi, 0x49c(%rsp)'}, {'instIndex': 4, 'instruction': 'movq\t0x4a0(%rsp), %rax'}, {'instIndex': 5, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 6, 'instruction': 'movq\t%rax, 0x490(%rsp)'}, {'instIndex': 7, 'instruction': 'movl\t$0, 0x74(%rsp)'}, {'instIndex': 8, 'instruction': 'movl\t$0, 0x70(%rsp)'}, {'instIndex': 9, 'instruction': 'movl\t$0, 0x6c(%rsp)'}, {'instIndex': 10, 'instruction': 'movl\t$0, 0x68(%rsp)'}, {'instIndex': 11, 'instruction': 'movq\t$0, 0x60(%rsp)'}, {'instIndex': 12, 'instruction': 'leaq\t0x80(%rsp), %rdi'}, {'instIndex': 13, 'instruction': 'movq\t0x4a0(%rsp), %rcx'}, {'instIndex': 14, 'instruction': 'addq\t$0x38, %rcx'}, {'instIndex': 15, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 16, 'instruction': 'leaq\t.L.str.0x20(%rip), %rdx'}, {'instIndex': 17, 'instruction': 'movb\t$0, %al'}, {'instIndex': 18, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 19, 'instruction': 'leaq\t0x80(%rsp), %rsi'}, {'instIndex': 20, 'instruction': 'movq\t0x4a0(%rsp), %rcx'}, {'instIndex': 21, 'instruction': 'addq\t$0x4b0, %rcx                     # imm = 0x4B0'}, {'instIndex': 22, 'instruction': 'leaq\t0x488(%rsp), %rdi'}, {'instIndex': 23, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 24, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 25, 'instruction': 'movl\t%eax, %r8d'}, {'instIndex': 26, 'instruction': 'callq\tavio_open2@PLT'}, {'instIndex': 27, 'instruction': 'movl\t%eax, 0x7c(%rsp)'}, {'instIndex': 28, 'instruction': 'cmpl\t$0, 0x7c(%rsp)'}, {'instIndex': 29, 'instruction': 'jge\t.LBB6_2'}, {'instIndex': 30, 'instruction': 'movq\t0x4a0(%rsp), %rdi'}, {'instIndex': 31, 'instruction': 'leaq\t0x80(%rsp), %rcx'}, {'instIndex': 32, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 33, 'instruction': 'leaq\t.L.str.0x21(%rip), %rdx'}, {'instIndex': 34, 'instruction': 'movb\t$0, %al'}, {'instIndex': 35, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 36, 'instruction': 'movl\t0x7c(%rsp), %eax'}, {'instIndex': 37, 'instruction': 'movl\t%eax, 0x4ac(%rsp)'}, {'instIndex': 38, 'instruction': 'jmp\t.LBB6_40'}, {'instIndex': 39, 'instruction': 'movq\t0x488(%rsp), %rdi'}, {'instIndex': 40, 'instruction': 'leaq\t.L.str.0x22(%rip), %rsi'}, {'instIndex': 41, 'instruction': 'movb\t$0, %al'}, {'instIndex': 42, 'instruction': 'callq\tavio_printf@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 318, 'instruction': 'movq\t0x488(%rsp), %rdi'}, {'instIndex': 319, 'instruction': 'leaq\t.L.str.0x2b(%rip), %rsi'}, {'instIndex': 320, 'instruction': 'movb\t$0, %al'}, {'instIndex': 321, 'instruction': 'callq\tavio_printf@PLT'}, {'instIndex': 322, 'instruction': 'movq\t0x488(%rsp), %rdi'}, {'instIndex': 323, 'instruction': 'callq\tavio_flush@PLT'}, {'instIndex': 324, 'instruction': 'movq\t0x488(%rsp), %rdi'}, {'instIndex': 325, 'instruction': 'callq\tavio_close@PLT'}, {'instIndex': 326, 'instruction': 'movl\t$0, 0x4ac(%rsp)'}, {'instIndex': 327, 'instruction': 'movl\t0x4ac(%rsp), %eax'}, {'instIndex': 328, 'instruction': 'addq\t$0x4b0, %rsp                     # imm = 0x4B0'}, {'instIndex': 329, 'instruction': 'popq\t%rbx'}, {'instIndex': 330, 'instruction': 'retq'}]}]
Patched function: 1---static int write_manifest 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_before/O0/smoothstreamingenc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_before/O0/smoothstreamingenc.s---write_manifest---before
function id: 6
function flag: True
There are 331 instructions for function: write_manifest in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '210', 'end': 224}, 'before': {'start': '210', 'end': 223}}}, {'modifyIndex': 2, 'line': {'after': {'start': '279', 'end': 285}, 'before': {'start': '278', 'end': 283}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%rbx'}, {'instIndex': 1, 'instruction': 'subq\t$0x4b0, %rsp                     # imm = 0x4B0'}, {'instIndex': 2, 'instruction': 'movq\t%rdi, 0x4a0(%rsp)'}, {'instIndex': 3, 'instruction': 'movl\t%esi, 0x49c(%rsp)'}, {'instIndex': 4, 'instruction': 'movq\t0x4a0(%rsp), %rax'}, {'instIndex': 5, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 6, 'instruction': 'movq\t%rax, 0x490(%rsp)'}, {'instIndex': 7, 'instruction': 'movl\t$0, 0x74(%rsp)'}, {'instIndex': 8, 'instruction': 'movl\t$0, 0x70(%rsp)'}, {'instIndex': 9, 'instruction': 'movl\t$0, 0x6c(%rsp)'}, {'instIndex': 10, 'instruction': 'movl\t$0, 0x68(%rsp)'}, {'instIndex': 11, 'instruction': 'movq\t$0, 0x60(%rsp)'}, {'instIndex': 12, 'instruction': 'leaq\t0x80(%rsp), %rdi'}, {'instIndex': 13, 'instruction': 'movq\t0x4a0(%rsp), %rcx'}, {'instIndex': 14, 'instruction': 'addq\t$0x38, %rcx'}, {'instIndex': 15, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 16, 'instruction': 'leaq\t.L.str.0x20(%rip), %rdx'}, {'instIndex': 17, 'instruction': 'movb\t$0, %al'}, {'instIndex': 18, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 19, 'instruction': 'leaq\t0x80(%rsp), %rsi'}, {'instIndex': 20, 'instruction': 'movq\t0x4a0(%rsp), %rcx'}, {'instIndex': 21, 'instruction': 'addq\t$0x4b0, %rcx                     # imm = 0x4B0'}, {'instIndex': 22, 'instruction': 'leaq\t0x488(%rsp), %rdi'}, {'instIndex': 23, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 24, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 25, 'instruction': 'movl\t%eax, %r8d'}, {'instIndex': 26, 'instruction': 'callq\tavio_open2@PLT'}, {'instIndex': 27, 'instruction': 'movl\t%eax, 0x7c(%rsp)'}, {'instIndex': 28, 'instruction': 'cmpl\t$0, 0x7c(%rsp)'}, {'instIndex': 29, 'instruction': 'jge\t.LBB6_2'}, {'instIndex': 30, 'instruction': 'movq\t0x4a0(%rsp), %rdi'}, {'instIndex': 31, 'instruction': 'leaq\t0x80(%rsp), %rcx'}, {'instIndex': 32, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 33, 'instruction': 'leaq\t.L.str.0x21(%rip), %rdx'}, {'instIndex': 34, 'instruction': 'movb\t$0, %al'}, {'instIndex': 35, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 36, 'instruction': 'movl\t0x7c(%rsp), %eax'}, {'instIndex': 37, 'instruction': 'movl\t%eax, 0x4ac(%rsp)'}, {'instIndex': 38, 'instruction': 'jmp\t.LBB6_40'}, {'instIndex': 39, 'instruction': 'movq\t0x488(%rsp), %rdi'}, {'instIndex': 40, 'instruction': 'leaq\t.L.str.0x22(%rip), %rsi'}, {'instIndex': 41, 'instruction': 'movb\t$0, %al'}, {'instIndex': 42, 'instruction': 'callq\tavio_printf@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 318, 'instruction': 'movq\t0x488(%rsp), %rdi'}, {'instIndex': 319, 'instruction': 'leaq\t.L.str.0x2b(%rip), %rsi'}, {'instIndex': 320, 'instruction': 'movb\t$0, %al'}, {'instIndex': 321, 'instruction': 'callq\tavio_printf@PLT'}, {'instIndex': 322, 'instruction': 'movq\t0x488(%rsp), %rdi'}, {'instIndex': 323, 'instruction': 'callq\tavio_flush@PLT'}, {'instIndex': 324, 'instruction': 'movq\t0x488(%rsp), %rdi'}, {'instIndex': 325, 'instruction': 'callq\tavio_close@PLT'}, {'instIndex': 326, 'instruction': 'movl\t$0, 0x4ac(%rsp)'}, {'instIndex': 327, 'instruction': 'movl\t0x4ac(%rsp), %eax'}, {'instIndex': 328, 'instruction': 'addq\t$0x4b0, %rsp                     # imm = 0x4B0'}, {'instIndex': 329, 'instruction': 'popq\t%rbx'}, {'instIndex': 330, 'instruction': 'retq'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_before/O0/smoothstreamingenc.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_before/O0/smoothstreamingenc.o---before
The extraction of function: write_manifest
Analyzing the binaries to generate subCFGs from patched function ...
It has 421 nodes and 757 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 331 instructions in binary file.
[4197552, 4197675, 4197721, 4197732, 4197767, 4197783]
[4199201, 4199223, 4199236, 4199249, 4199260]
The execution time of patched subCFG information extraction via angr: 0:00:00.639282
{'write_manifest': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d97>, <DisassemblerInsn "lea" for 0x400d9f>, <DisassemblerInsn "mov" for 0x400da6>, <DisassemblerInsn "call" for 0x400da8>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x400cb0>, <DisassemblerInsn "sub" for 0x400cb1>, <DisassemblerInsn "mov" for 0x400cb8>, <DisassemblerInsn "mov" for 0x400cc0>, <DisassemblerInsn "mov" for 0x400cc7>, <DisassemblerInsn "mov" for 0x400ccf>, <DisassemblerInsn "mov" for 0x400cd3>, <DisassemblerInsn "mov" for 0x400cdb>, <DisassemblerInsn "mov" for 0x400ce3>, <DisassemblerInsn "mov" for 0x400ceb>, <DisassemblerInsn "mov" for 0x400cf3>, <DisassemblerInsn "mov" for 0x400cfb>, <DisassemblerInsn "lea" for 0x400d04>, <DisassemblerInsn "mov" for 0x400d0c>, <DisassemblerInsn "add" for 0x400d14>, <DisassemblerInsn "mov" for 0x400d18>, <DisassemblerInsn "lea" for 0x400d1d>, <DisassemblerInsn "mov" for 0x400d24>, <DisassemblerInsn "call" for 0x400d26>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400d2b>, <DisassemblerInsn "mov" for 0x400d33>, <DisassemblerInsn "add" for 0x400d3b>, <DisassemblerInsn "lea" for 0x400d42>, <DisassemblerInsn "mov" for 0x400d4a>, <DisassemblerInsn "xor" for 0x400d4f>, <DisassemblerInsn "mov" for 0x400d51>, <DisassemblerInsn "call" for 0x400d54>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d87>, <DisassemblerInsn "mov" for 0x400d8b>, <DisassemblerInsn "jmp" for 0x400d92>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d64>, <DisassemblerInsn "lea" for 0x400d6c>, <DisassemblerInsn "mov" for 0x400d74>, <DisassemblerInsn "lea" for 0x400d79>, <DisassemblerInsn "mov" for 0x400d80>, <DisassemblerInsn "call" for 0x400d82>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dad>, <DisassemblerInsn "mov" for 0x400db5>, <DisassemblerInsn "mov" for 0x400db9>, <DisassemblerInsn "cmp" for 0x400dc1>, <DisassemblerInsn "jae" for 0x400dc4>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d59>, <DisassemblerInsn "cmp" for 0x400d5d>, <DisassemblerInsn "jge" for 0x400d62>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40135c>, <DisassemblerInsn "add" for 0x401363>, <DisassemblerInsn "pop" for 0x40136a>, <DisassemblerInsn "ret" for 0x40136b>]'}], 'cfg_block_detailed_info': [{'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x488]>', '<lea~~rsi, [rip + 0x16aa]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 0, 'blockInsts': ['<push~~rbx>', '<sub~~rsp, 0x4b0>', '<mov~~qword ptr [rsp + 0x4a0], rdi>', '<mov~~dword ptr [rsp + 0x49c], esi>', '<mov~~rax, qword ptr [rsp + 0x4a0]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 0x490], rax>', '<mov~~dword ptr [rsp + 0x74], 0>', '<mov~~dword ptr [rsp + 0x70], 0>', '<mov~~dword ptr [rsp + 0x6c], 0>', '<mov~~dword ptr [rsp + 0x68], 0>', '<mov~~qword ptr [rsp + 0x60], 0>', '<lea~~rdi, [rsp + 0x80]>', '<mov~~rcx, qword ptr [rsp + 0x4a0]>', '<add~~rcx, 0x38>', '<mov~~esi, 0x400>', '<lea~~rdx, [rip + 0x1701]>', '<mov~~al, 0>', '<call~~0x500020>']}, {'block_Idx': 1, 'blockInsts': ['<lea~~rsi, [rsp + 0x80]>', '<mov~~rcx, qword ptr [rsp + 0x4a0]>', '<add~~rcx, 0x4b0>', '<lea~~rdi, [rsp + 0x488]>', '<mov~~edx, 2>', '<xor~~eax, eax>', '<mov~~r8d, eax>', '<call~~0x5000b8>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x7c]>', '<mov~~dword ptr [rsp + 0x4ac], eax>', '<jmp~~0x40135c>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x4a0]>', '<lea~~rcx, [rsp + 0x80]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x16b1]>', '<mov~~al, 0>', '<call~~0x500018>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~dword ptr [rsp + 0x78], 0>', '<mov~~eax, dword ptr [rsp + 0x78]>', '<mov~~rcx, qword ptr [rsp + 0x4a0]>', '<cmp~~eax, dword ptr [rcx + 0x2c]>', '<jae~~0x400ea2>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~dword ptr [rsp + 0x7c], eax>', '<cmp~~dword ptr [rsp + 0x7c], 0>', '<jge~~0x400d97>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x4ac]>', '<add~~rsp, 0x4b0>', '<pop~~rbx>', '<ret~~>']}], 'cfg_edge_info': [(0, 1), (2, 4), (1, 2), (4, 6), (5, 7), (2, 3), (3, 5)]}, {'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401344>, <DisassemblerInsn "call" for 0x40134c>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40114a>, <DisassemblerInsn "cmp" for 0x401152>, <DisassemblerInsn "je" for 0x401156>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401351>, <DisassemblerInsn "mov" for 0x40135c>, <DisassemblerInsn "add" for 0x401363>, <DisassemblerInsn "pop" for 0x40136a>, <DisassemblerInsn "ret" for 0x40136b>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401337>, <DisassemblerInsn "call" for 0x40133f>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40130b>, <DisassemblerInsn "lea" for 0x401313>, <DisassemblerInsn "mov" for 0x40131a>, <DisassemblerInsn "call" for 0x40131c>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d87>, <DisassemblerInsn "mov" for 0x400d8b>, <DisassemblerInsn "jmp" for 0x400d92>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401321>, <DisassemblerInsn "lea" for 0x401329>, <DisassemblerInsn "mov" for 0x401330>, <DisassemblerInsn "call" for 0x401332>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40135c>, <DisassemblerInsn "add" for 0x401363>, <DisassemblerInsn "pop" for 0x40136a>, <DisassemblerInsn "ret" for 0x40136b>]'}], 'cfg_block_detailed_info': [{'block_Idx': 40, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x488]>', '<call~~0x5000c8>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x490]>', '<cmp~~dword ptr [rax + 0x2c], 0>', '<je~~0x401321>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~dword ptr [rsp + 0x4ac], 0>', '<mov~~eax, dword ptr [rsp + 0x4ac]>', '<add~~rsp, 0x4b0>', '<pop~~rbx>', '<ret~~>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x488]>', '<call~~0x500058>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x488]>', '<lea~~rsi, [rip + 0x12c8]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x7c]>', '<mov~~dword ptr [rsp + 0x4ac], eax>', '<jmp~~0x40135c>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x488]>', '<lea~~rsi, [rip + 0x13d7]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x4ac]>', '<add~~rsp, 0x4b0>', '<pop~~rbx>', '<ret~~>']}], 'cfg_edge_info': [(36, 40), (33, 36), (40, 46), (31, 33), (5, 7), (49, 33)]}]}
{'write_manifest': [4199201, 4199223, 4199236, 4199249, 4199260]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_before/O0/smoothstreamingenc.o---before
The extraction of function: write_manifest
[4199201, 4199223, 4199236, 4199249, 4199260]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 120 nodes and 187 edges in CFGEmulated.
It has 116 nodes and 165 edges in CDG.
It has 1699 nodes and 2254 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4199201, 4199223, 4199236, 4199249, 4199260]
{4197767, 4198794, 4199179, 4198034, 4198291, 4197783, 4199201, 4198050, 4198309, 4198060, 4197805, 4198708, 4197813, 4199223, 4199236, 4198085, 4199109, 4198730, 4197834, 4199249, 4198226, 4198355, 4197721, 4199260, 4198236, 4198748, 4197732, 4198638, 4198269}
[6, 54, 20, 40, 82, 17, 33, 14, 32, 22, 85, 23, 2, 43, 35, 50, 41, 19, 61, 51, 16, 47, 29, 5, 4, 58, 10, 42, 12, 39, 53, 28, 78, 49, 48, 15, 72, 21, 76, 27, 79, 13, 9, 11]
The execution time of patched slicing information extraction via angr: 0:01:31.714849
{'write_manifest': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d97>, <DisassemblerInsn "lea" for 0x400d9f>, <DisassemblerInsn "mov" for 0x400da6>, <DisassemblerInsn "call" for 0x400da8>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4012c5>, <DisassemblerInsn "mov" for 0x4012cd>, <DisassemblerInsn "movsxd" for 0x4012d1>, <DisassemblerInsn "imul" for 0x4012d6>, <DisassemblerInsn "add" for 0x4012dd>, <DisassemblerInsn "mov" for 0x4012e0>, <DisassemblerInsn "mov" for 0x4012e8>, <DisassemblerInsn "mov" for 0x4012ef>, <DisassemblerInsn "mov" for 0x4012f7>, <DisassemblerInsn "mov" for 0x4012fa>, <DisassemblerInsn "mov" for 0x401302>, <DisassemblerInsn "call" for 0x401306>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400f37>, <DisassemblerInsn "mov" for 0x400f3f>, <DisassemblerInsn "lea" for 0x400f44>, <DisassemblerInsn "mov" for 0x400f4b>, <DisassemblerInsn "call" for 0x400f4d>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40114a>, <DisassemblerInsn "cmp" for 0x401152>, <DisassemblerInsn "je" for 0x401156>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401134>, <DisassemblerInsn "lea" for 0x40113c>, <DisassemblerInsn "mov" for 0x401143>, <DisassemblerInsn "call" for 0x401145>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ec5>, <DisassemblerInsn "cmp" for 0x400ecd>, <DisassemblerInsn "je" for 0x400ed1>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400f7d>, <DisassemblerInsn "lea" for 0x400f85>, <DisassemblerInsn "mov" for 0x400f8c>, <DisassemblerInsn "call" for 0x400f8e>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e3b>, <DisassemblerInsn "mov" for 0x400e43>, <DisassemblerInsn "movsxd" for 0x400e47>, <DisassemblerInsn "mov" for 0x400e4c>, <DisassemblerInsn "mov" for 0x400e50>, <DisassemblerInsn "cmp" for 0x400e54>, <DisassemblerInsn "jne" for 0x400e58>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400f5c>, <DisassemblerInsn "mov" for 0x400f64>, <DisassemblerInsn "mov" for 0x400f6c>, <DisassemblerInsn "lea" for 0x400f6f>, <DisassemblerInsn "mov" for 0x400f76>, <DisassemblerInsn "call" for 0x400f78>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400e90>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40130b>, <DisassemblerInsn "lea" for 0x401313>, <DisassemblerInsn "mov" for 0x40131a>, <DisassemblerInsn "call" for 0x40131c>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e92>, <DisassemblerInsn "add" for 0x400e96>, <DisassemblerInsn "mov" for 0x400e99>, <DisassemblerInsn "jmp" for 0x400e9d>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "lea" for 0x400d2b>, <DisassemblerInsn "mov" for 0x400d33>, <DisassemblerInsn "add" for 0x400d3b>, <DisassemblerInsn "lea" for 0x400d42>, <DisassemblerInsn "mov" for 0x400d4a>, <DisassemblerInsn "xor" for 0x400d4f>, <DisassemblerInsn "mov" for 0x400d51>, <DisassemblerInsn "call" for 0x400d54>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40115c>, <DisassemblerInsn "mov" for 0x401164>, <DisassemblerInsn "mov" for 0x40116c>, <DisassemblerInsn "mov" for 0x401174>, <DisassemblerInsn "mov" for 0x401178>, <DisassemblerInsn "lea" for 0x40117c>, <DisassemblerInsn "mov" for 0x401183>, <DisassemblerInsn "call" for 0x401185>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400f2f>, <DisassemblerInsn "mov" for 0x400f33>, <DisassemblerInsn "mov" for 0x400f37>, <DisassemblerInsn "mov" for 0x400f3f>, <DisassemblerInsn "lea" for 0x400f44>, <DisassemblerInsn "mov" for 0x400f4b>, <DisassemblerInsn "call" for 0x400f4d>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ff0>, <DisassemblerInsn "mov" for 0x400ff8>, <DisassemblerInsn "movsxd" for 0x400ffc>, <DisassemblerInsn "imul" for 0x401001>, <DisassemblerInsn "add" for 0x401008>, <DisassemblerInsn "mov" for 0x40100b>, <DisassemblerInsn "mov" for 0x401010>, <DisassemblerInsn "mov" for 0x401018>, <DisassemblerInsn "movsxd" for 0x40101c>, <DisassemblerInsn "mov" for 0x401021>, <DisassemblerInsn "mov" for 0x401025>, <DisassemblerInsn "cmp" for 0x401029>, <DisassemblerInsn "je" for 0x40102d>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400fa5>, <DisassemblerInsn "mov" for 0x400fad>, <DisassemblerInsn "mov" for 0x400fb5>, <DisassemblerInsn "mov" for 0x400fbd>, <DisassemblerInsn "mov" for 0x400fc1>, <DisassemblerInsn "lea" for 0x400fc5>, <DisassemblerInsn "mov" for 0x400fcc>, <DisassemblerInsn "call" for 0x400fce>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e76>, <DisassemblerInsn "mov" for 0x400e7b>, <DisassemblerInsn "mov" for 0x400e81>, <DisassemblerInsn "mov" for 0x400e85>, <DisassemblerInsn "add" for 0x400e89>, <DisassemblerInsn "mov" for 0x400e8c>, <DisassemblerInsn "jmp" for 0x400e90>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "sub" for 0x401520>, <DisassemblerInsn "mov" for 0x401524>, <DisassemblerInsn "mov" for 0x401529>, <DisassemblerInsn "mov" for 0x40152e>, <DisassemblerInsn "mov" for 0x401532>, <DisassemblerInsn "mov" for 0x401536>, <DisassemblerInsn "mov" for 0x40153b>, <DisassemblerInsn "mov" for 0x401543>, <DisassemblerInsn "mov" for 0x40154b>, <DisassemblerInsn "cmp" for 0x401550>, <DisassemblerInsn "jg" for 0x401557>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4010ee>, <DisassemblerInsn "mov" for 0x4010f6>, <DisassemblerInsn "movsxd" for 0x4010fa>, <DisassemblerInsn "imul" for 0x4010ff>, <DisassemblerInsn "add" for 0x401106>, <DisassemblerInsn "mov" for 0x401109>, <DisassemblerInsn "mov" for 0x401111>, <DisassemblerInsn "mov" for 0x401118>, <DisassemblerInsn "mov" for 0x401120>, <DisassemblerInsn "mov" for 0x401123>, <DisassemblerInsn "mov" for 0x40112b>, <DisassemblerInsn "call" for 0x40112f>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400eac>, <DisassemblerInsn "mov" for 0x400eb5>, <DisassemblerInsn "mov" for 0x400ebd>, <DisassemblerInsn "mov" for 0x400ec5>, <DisassemblerInsn "cmp" for 0x400ecd>, <DisassemblerInsn "je" for 0x400ed1>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400fd3>, <DisassemblerInsn "mov" for 0x400fdb>, <DisassemblerInsn "mov" for 0x400fdf>, <DisassemblerInsn "cmp" for 0x400fe7>, <DisassemblerInsn "jae" for 0x400fea>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400f27>, <DisassemblerInsn "mov" for 0x400f2b>, <DisassemblerInsn "mov" for 0x400f2f>, <DisassemblerInsn "mov" for 0x400f33>, <DisassemblerInsn "mov" for 0x400f37>, <DisassemblerInsn "mov" for 0x400f3f>, <DisassemblerInsn "lea" for 0x400f44>, <DisassemblerInsn "mov" for 0x400f4b>, <DisassemblerInsn "call" for 0x400f4d>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d64>, <DisassemblerInsn "lea" for 0x400d6c>, <DisassemblerInsn "mov" for 0x400d74>, <DisassemblerInsn "lea" for 0x400d79>, <DisassemblerInsn "mov" for 0x400d80>, <DisassemblerInsn "call" for 0x400d82>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d59>, <DisassemblerInsn "cmp" for 0x400d5d>, <DisassemblerInsn "jge" for 0x400d62>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401344>, <DisassemblerInsn "call" for 0x40134c>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dad>, <DisassemblerInsn "mov" for 0x400db5>, <DisassemblerInsn "mov" for 0x400db9>, <DisassemblerInsn "cmp" for 0x400dc1>, <DisassemblerInsn "jae" for 0x400dc4>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401321>, <DisassemblerInsn "lea" for 0x401329>, <DisassemblerInsn "mov" for 0x401330>, <DisassemblerInsn "call" for 0x401332>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dca>, <DisassemblerInsn "mov" for 0x400dd2>, <DisassemblerInsn "movsxd" for 0x400dd6>, <DisassemblerInsn "imul" for 0x400ddb>, <DisassemblerInsn "add" for 0x400de2>, <DisassemblerInsn "mov" for 0x400de5>, <DisassemblerInsn "mov" for 0x400dea>, <DisassemblerInsn "cmp" for 0x400def>, <DisassemblerInsn "jle" for 0x400df6>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400f93>, <DisassemblerInsn "cmp" for 0x400f9b>, <DisassemblerInsn "je" for 0x400f9f>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011a7>, <DisassemblerInsn "mov" for 0x4011af>, <DisassemblerInsn "movsxd" for 0x4011b3>, <DisassemblerInsn "imul" for 0x4011b8>, <DisassemblerInsn "add" for 0x4011bf>, <DisassemblerInsn "mov" for 0x4011c2>, <DisassemblerInsn "mov" for 0x4011c7>, <DisassemblerInsn "mov" for 0x4011cf>, <DisassemblerInsn "movsxd" for 0x4011d3>, <DisassemblerInsn "mov" for 0x4011d8>, <DisassemblerInsn "mov" for 0x4011dc>, <DisassemblerInsn "cmp" for 0x4011e0>, <DisassemblerInsn "je" for 0x4011e4>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400f52>, <DisassemblerInsn "jne" for 0x400f5a>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401192>, <DisassemblerInsn "mov" for 0x401196>, <DisassemblerInsn "cmp" for 0x40119e>, <DisassemblerInsn "jae" for 0x4011a1>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40118a>, <DisassemblerInsn "mov" for 0x401192>, <DisassemblerInsn "mov" for 0x401196>, <DisassemblerInsn "cmp" for 0x40119e>, <DisassemblerInsn "jae" for 0x4011a1>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401337>, <DisassemblerInsn "call" for 0x40133f>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400df8>, <DisassemblerInsn "mov" for 0x400dfd>, <DisassemblerInsn "mov" for 0x400e04>, <DisassemblerInsn "mov" for 0x400e09>, <DisassemblerInsn "sub" for 0x400e0f>, <DisassemblerInsn "movsxd" for 0x400e12>, <DisassemblerInsn "mov" for 0x400e15>, <DisassemblerInsn "mov" for 0x400e19>, <DisassemblerInsn "mov" for 0x400e1e>, <DisassemblerInsn "mov" for 0x400e23>, <DisassemblerInsn "mov" for 0x400e2a>, <DisassemblerInsn "add" for 0x400e2f>, <DisassemblerInsn "mov" for 0x400e36>, <DisassemblerInsn "mov" for 0x400e3b>, <DisassemblerInsn "mov" for 0x400e43>, <DisassemblerInsn "movsxd" for 0x400e47>, <DisassemblerInsn "mov" for 0x400e4c>, <DisassemblerInsn "mov" for 0x400e50>, <DisassemblerInsn "cmp" for 0x400e54>, <DisassemblerInsn "jne" for 0x400e58>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400fdb>, <DisassemblerInsn "mov" for 0x400fdf>, <DisassemblerInsn "cmp" for 0x400fe7>, <DisassemblerInsn "jae" for 0x400fea>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ed3>, <DisassemblerInsn "mov" for 0x400ed7>, <DisassemblerInsn "cmp" for 0x400edf>, <DisassemblerInsn "jle" for 0x400ee2>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401351>, <DisassemblerInsn "mov" for 0x40135c>, <DisassemblerInsn "add" for 0x401363>, <DisassemblerInsn "pop" for 0x40136a>, <DisassemblerInsn "ret" for 0x40136b>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400db5>, <DisassemblerInsn "mov" for 0x400db9>, <DisassemblerInsn "cmp" for 0x400dc1>, <DisassemblerInsn "jae" for 0x400dc4>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "add" for 0x401689>, <DisassemblerInsn "ret" for 0x40168d>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400ea2>, <DisassemblerInsn "jne" for 0x400eaa>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d87>, <DisassemblerInsn "mov" for 0x400d8b>, <DisassemblerInsn "jmp" for 0x400d92>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40135c>, <DisassemblerInsn "add" for 0x401363>, <DisassemblerInsn "pop" for 0x40136a>, <DisassemblerInsn "ret" for 0x40136b>]'}], 'cfg_block_detailed_info': [{'block_Idx': 6, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x488]>', '<lea~~rsi, [rip + 0x16aa]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x490]>', '<mov~~rdi, qword ptr [rax + 0x20]>', '<movsxd~~rax, dword ptr [rsp + 0x3c]>', '<imul~~rax, rax, 0x8480>', '<add~~rdi, rax>', '<mov~~rsi, qword ptr [rsp + 0x488]>', '<mov~~edx, dword ptr [rsp + 0x49c]>', '<mov~~rax, qword ptr [rsp + 0x490]>', '<mov~~ecx, dword ptr [rax + 0x10]>', '<mov~~rax, qword ptr [rsp + 0x490]>', '<mov~~r8d, dword ptr [rax + 8]>', '<call~~0x401520>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x488]>', '<mov~~rdx, qword ptr [rsp + 0x60]>', '<lea~~rsi, [rip + 0x152d]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x490]>', '<cmp~~dword ptr [rax + 0x2c], 0>', '<je~~0x401321>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x488]>', '<lea~~rsi, [rip + 0x149f]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x490]>', '<cmp~~dword ptr [rax + 8], 0>', '<je~~0x400f37>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x488]>', '<lea~~rsi, [rip + 0x1572]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x4a0]>', '<mov~~rax, qword ptr [rax + 0x30]>', '<movsxd~~rcx, dword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0xc], 0>', '<jne~~0x400e76>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x488]>', '<mov~~rax, qword ptr [rsp + 0x490]>', '<mov~~edx, dword ptr [rax + 0x10]>', '<lea~~rsi, [rip + 0x1549]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 22, 'blockInsts': ['<jmp~~0x400e92>']}, {'block_Idx': 85, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x488]>', '<lea~~rsi, [rip + 0x12c8]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x78]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x78], eax>', '<jmp~~0x400db5>']}, {'block_Idx': 2, 'blockInsts': ['<lea~~rsi, [rsp + 0x80]>', '<mov~~rcx, qword ptr [rsp + 0x4a0]>', '<add~~rcx, 0x4b0>', '<lea~~rdi, [rsp + 0x488]>', '<mov~~edx, 2>', '<xor~~eax, eax>', '<mov~~r8d, eax>', '<call~~0x5000b8>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~dword ptr [rsp + 0x3c], 0xffffffff>', '<mov~~dword ptr [rsp + 0x38], 0>', '<mov~~rdi, qword ptr [rsp + 0x488]>', '<mov~~edx, dword ptr [rsp + 0x68]>', '<mov~~ecx, dword ptr [rsp + 0x70]>', '<lea~~rsi, [rip + 0x146f]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x28]>', '<mov~~dword ptr [rsp + 0x70], eax>', '<mov~~rdi, qword ptr [rsp + 0x488]>', '<mov~~rdx, qword ptr [rsp + 0x60]>', '<lea~~rsi, [rip + 0x152d]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x490]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<movsxd~~rcx, dword ptr [rsp + 0x78]>', '<imul~~rcx, rcx, 0x8480>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x40], rax>', '<mov~~rax, qword ptr [rsp + 0x4a0]>', '<mov~~rax, qword ptr [rax + 0x30]>', '<movsxd~~rcx, dword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0xc], 0>', '<je~~0x401034>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~dword ptr [rsp + 0x4c], 0xffffffff>', '<mov~~dword ptr [rsp + 0x48], 0>', '<mov~~rdi, qword ptr [rsp + 0x488]>', '<mov~~edx, dword ptr [rsp + 0x6c]>', '<mov~~ecx, dword ptr [rsp + 0x74]>', '<lea~~rsi, [rip + 0x1535]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~eax, dword ptr [rax + 0x8450]>', '<mov~~dword ptr [rsp + 0x70], eax>', '<mov~~eax, dword ptr [rsp + 0x68]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x68], eax>', '<jmp~~0x400e92>']}, {'block_Idx': 61, 'blockInsts': ['<sub~~rsp, 0x38>', '<mov~~qword ptr [rsp + 0x30], rdi>', '<mov~~qword ptr [rsp + 0x28], rsi>', '<mov~~dword ptr [rsp + 0x24], edx>', '<mov~~dword ptr [rsp + 0x20], ecx>', '<mov~~dword ptr [rsp + 0x1c], r8d>', '<mov~~dword ptr [rsp + 0x18], 0>', '<mov~~dword ptr [rsp + 0x10], 0>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<cmp~~dword ptr [rax + 0x8450], 0>', '<jg~~0x40155e>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x490]>', '<mov~~rdi, qword ptr [rax + 0x20]>', '<movsxd~~rax, dword ptr [rsp + 0x4c]>', '<imul~~rax, rax, 0x8480>', '<add~~rdi, rax>', '<mov~~rsi, qword ptr [rsp + 0x488]>', '<mov~~edx, dword ptr [rsp + 0x49c]>', '<mov~~rax, qword ptr [rsp + 0x490]>', '<mov~~ecx, dword ptr [rax + 0x10]>', '<mov~~rax, qword ptr [rsp + 0x490]>', '<mov~~r8d, dword ptr [rax + 8]>', '<call~~0x401520>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~qword ptr [rsp + 0x60], 0>', '<mov~~dword ptr [rsp + 0x70], 0>', '<mov~~dword ptr [rsp + 0x74], 0>', '<mov~~rax, qword ptr [rsp + 0x490]>', '<cmp~~dword ptr [rax + 8], 0>', '<je~~0x400f37>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~dword ptr [rsp + 0x78], 0>', '<mov~~eax, dword ptr [rsp + 0x78]>', '<mov~~rcx, qword ptr [rsp + 0x4a0]>', '<cmp~~eax, dword ptr [rcx + 0x2c]>', '<jae~~0x4010ee>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x70]>', '<mov~~dword ptr [rsp + 0x28], eax>', '<mov~~eax, dword ptr [rsp + 0x28]>', '<mov~~dword ptr [rsp + 0x70], eax>', '<mov~~rdi, qword ptr [rsp + 0x488]>', '<mov~~rdx, qword ptr [rsp + 0x60]>', '<lea~~rsi, [rip + 0x152d]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x4a0]>', '<lea~~rcx, [rsp + 0x80]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x16b1]>', '<mov~~al, 0>', '<call~~0x500018>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~dword ptr [rsp + 0x7c], eax>', '<cmp~~dword ptr [rsp + 0x7c], 0>', '<jge~~0x400d97>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x488]>', '<call~~0x5000c8>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~dword ptr [rsp + 0x78], 0>', '<mov~~eax, dword ptr [rsp + 0x78]>', '<mov~~rcx, qword ptr [rsp + 0x4a0]>', '<cmp~~eax, dword ptr [rcx + 0x2c]>', '<jae~~0x400ea2>']}, {'block_Idx': 42, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x488]>', '<lea~~rsi, [rip + 0x13d7]>', '<mov~~al, 0>', '<call~~0x5000c0>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x490]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<movsxd~~rcx, dword ptr [rsp + 0x78]>', '<imul~~rcx, rcx, 0x8480>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x58], rax>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<cmp~~dword ptr [rax + 0x8450], 0>', '<jle~~0x400e3b>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x490]>', '<cmp~~dword ptr [rax + 0x28], 0>', '<je~~0x40114a>']}, {'block_Idx': 53, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x490]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<movsxd~~rcx, dword ptr [rsp + 0x78]>', '<imul~~rcx, rcx, 0x8480>', '<add~~rax, rcx>', '<mov~~qword ptr [rsp + 0x30], rax>', '<mov~~rax, qword ptr [rsp + 0x4a0]>', '<mov~~rax, qword ptr [rax + 0x30]>', '<movsxd~~rcx, dword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0xc], 1>', '<je~~0x4011eb>']}, {'block_Idx': 28, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x49c], 0>', '<jne~~0x400f7d>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x78]>', '<mov~~rcx, qword ptr [rsp + 0x4a0]>', '<cmp~~eax, dword ptr [rcx + 0x2c]>', '<jae~~0x4012c5>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~dword ptr [rsp + 0x78], 0>', '<mov~~eax, dword ptr [rsp + 0x78]>', '<mov~~rcx, qword ptr [rsp + 0x4a0]>', '<cmp~~eax, dword ptr [rcx + 0x2c]>', '<jae~~0x4012c5>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x488]>', '<call~~0x500058>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rax + 0x8460]>', '<mov~~rcx, qword ptr [rsp + 0x58]>', '<mov~~ecx, dword ptr [rcx + 0x8450]>', '<sub~~ecx, 1>', '<movsxd~~rcx, ecx>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~qword ptr [rsp + 0x50], rax>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<mov~~rax, qword ptr [rax + 0x800]>', '<mov~~rcx, qword ptr [rsp + 0x50]>', '<add~~rax, qword ptr [rcx + 0x808]>', '<mov~~qword ptr [rsp + 0x60], rax>', '<mov~~rax, qword ptr [rsp + 0x4a0]>', '<mov~~rax, qword ptr [rax + 0x30]>', '<movsxd~~rcx, dword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0xc], 0>', '<jne~~0x400e76>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x78]>', '<mov~~rcx, qword ptr [rsp + 0x4a0]>', '<cmp~~eax, dword ptr [rcx + 0x2c]>', '<jae~~0x4010ee>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x74]>', '<mov~~rcx, qword ptr [rsp + 0x490]>', '<cmp~~eax, dword ptr [rcx + 8]>', '<jle~~0x400ef5>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~dword ptr [rsp + 0x4ac], 0>', '<mov~~eax, dword ptr [rsp + 0x4ac]>', '<add~~rsp, 0x4b0>', '<pop~~rbx>', '<ret~~>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x78]>', '<mov~~rcx, qword ptr [rsp + 0x4a0]>', '<cmp~~eax, dword ptr [rcx + 0x2c]>', '<jae~~0x400ea2>']}, {'block_Idx': 79, 'blockInsts': ['<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 13, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x49c], 0>', '<jne~~0x400ec5>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x7c]>', '<mov~~dword ptr [rsp + 0x4ac], eax>', '<jmp~~0x40135c>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x4ac]>', '<add~~rsp, 0x4b0>', '<pop~~rbx>', '<ret~~>']}], 'cfg_edge_info': [(79, 85), (16, 20), (33, 39), (42, 48), (43, 49), (4, 6), (22, 23), (27, 13), (17, 21), (9, 11), (49, 53), (72, 51), (10, 12), (28, 33), (13, 17), (54, 61), (32, 33), (85, 42), (4, 5), (29, 28), (54, 85), (12, 15), (5, 9), (82, 40), (39, 41), (20, 28), (58, 76), (27, 12), (51, 61), (23, 27), (40, 43), (2, 4), (17, 20), (19, 23), (51, 82), (13, 16), (28, 32), (78, 54), (47, 51), (16, 21), (6, 10), (35, 28), (41, 47), (12, 14), (40, 42), (39, 40), (49, 54), (10, 13), (48, 58), (79, 82), (47, 50)], 'cdg_edge_info': [(39, 82), (4, 58), (4, 9), (4, 6), (4, 76), (39, 51), (4, 33), (10, 12), (4, 39), (13, 17), (4, 42), (4, 48), (10, 27), (4, 5), (4, 11), (39, 41), (27, 12), (40, 43), (40, 49), (39, 47), (27, 27), (10, 23), (13, 16), (28, 32), (40, 85), (4, 10), (4, 13), (4, 28), (27, 23), (40, 54), (4, 40)], 'ddg_edge_info': [(6, 82), (42, 48), (4, 9), (33, 54), (39, 51), (6, 48), (32, 85), (10, 27), (32, 39), (41, 51), (28, 51), (85, 48), (82, 40), (5, 76), (6, 41), (23, 27), (82, 58), (6, 13), (33, 40), (82, 42), (6, 43), (9, 76), (48, 58), (16, 17), (33, 42), (6, 27), (6, 54), (32, 82), (32, 48), (5, 9), (58, 76), (28, 32), (82, 85), (32, 41), (33, 58), (6, 58), (33, 85), (32, 43), (85, 58), (6, 33), (33, 51), (6, 42), (6, 51), (10, 12), (85, 42), (28, 54), (6, 17), (23, 12), (43, 54), (32, 54), (10, 23), (6, 10), (82, 48), (33, 82), (6, 12), (32, 40), (33, 39), (6, 85), (43, 49), (33, 48), (32, 58), (16, 41), (39, 54), (28, 33), (32, 33), (6, 23), (32, 42), (33, 41), (32, 51), (6, 32), (16, 43), (82, 43), (6, 16), (41, 47), (33, 43), (39, 40), (82, 54)]}]}
{'write_manifest': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%rbx'}, {'instIndex': 1, 'instruction': 'subq\t$0x4b0, %rsp                     # imm = 0x4B0'}, {'instIndex': 2, 'instruction': 'movq\t%rdi, 0x4a0(%rsp)'}, {'instIndex': 3, 'instruction': 'movl\t%esi, 0x49c(%rsp)'}, {'instIndex': 4, 'instruction': 'movq\t0x4a0(%rsp), %rax'}, {'instIndex': 5, 'instruction': 'movq\t0x18(%rax), %rax'}, {'instIndex': 6, 'instruction': 'movq\t%rax, 0x490(%rsp)'}, {'instIndex': 7, 'instruction': 'movl\t$0, 0x74(%rsp)'}, {'instIndex': 8, 'instruction': 'movl\t$0, 0x70(%rsp)'}, {'instIndex': 9, 'instruction': 'movl\t$0, 0x6c(%rsp)'}, {'instIndex': 10, 'instruction': 'movl\t$0, 0x68(%rsp)'}, {'instIndex': 11, 'instruction': 'movq\t$0, 0x60(%rsp)'}, {'instIndex': 12, 'instruction': 'leaq\t0x80(%rsp), %rdi'}, {'instIndex': 13, 'instruction': 'movq\t0x4a0(%rsp), %rcx'}, {'instIndex': 14, 'instruction': 'addq\t$0x38, %rcx'}, {'instIndex': 15, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 16, 'instruction': 'leaq\t.L.str.0x20(%rip), %rdx'}, {'instIndex': 17, 'instruction': 'movb\t$0, %al'}, {'instIndex': 18, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 19, 'instruction': 'leaq\t0x80(%rsp), %rsi'}, {'instIndex': 20, 'instruction': 'movq\t0x4a0(%rsp), %rcx'}, {'instIndex': 21, 'instruction': 'addq\t$0x4b0, %rcx                     # imm = 0x4B0'}, {'instIndex': 22, 'instruction': 'leaq\t0x488(%rsp), %rdi'}, {'instIndex': 23, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 24, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 25, 'instruction': 'movl\t%eax, %r8d'}, {'instIndex': 26, 'instruction': 'callq\tavio_open2@PLT'}, {'instIndex': 27, 'instruction': 'movl\t%eax, 0x7c(%rsp)'}, {'instIndex': 28, 'instruction': 'cmpl\t$0, 0x7c(%rsp)'}, {'instIndex': 29, 'instruction': 'jge\t.LBB6_2'}, {'instIndex': 30, 'instruction': 'movq\t0x4a0(%rsp), %rdi'}, {'instIndex': 31, 'instruction': 'leaq\t0x80(%rsp), %rcx'}, {'instIndex': 32, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 33, 'instruction': 'leaq\t.L.str.0x21(%rip), %rdx'}, {'instIndex': 34, 'instruction': 'movb\t$0, %al'}, {'instIndex': 35, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 36, 'instruction': 'movl\t0x7c(%rsp), %eax'}, {'instIndex': 37, 'instruction': 'movl\t%eax, 0x4ac(%rsp)'}, {'instIndex': 38, 'instruction': 'jmp\t.LBB6_40'}, {'instIndex': 39, 'instruction': 'movq\t0x488(%rsp), %rdi'}, {'instIndex': 40, 'instruction': 'leaq\t.L.str.0x22(%rip), %rsi'}, {'instIndex': 41, 'instruction': 'movb\t$0, %al'}, {'instIndex': 42, 'instruction': 'callq\tavio_printf@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 318, 'instruction': 'movq\t0x488(%rsp), %rdi'}, {'instIndex': 319, 'instruction': 'leaq\t.L.str.0x2b(%rip), %rsi'}, {'instIndex': 320, 'instruction': 'movb\t$0, %al'}, {'instIndex': 321, 'instruction': 'callq\tavio_printf@PLT'}, {'instIndex': 322, 'instruction': 'movq\t0x488(%rsp), %rdi'}, {'instIndex': 323, 'instruction': 'callq\tavio_flush@PLT'}, {'instIndex': 324, 'instruction': 'movq\t0x488(%rsp), %rdi'}, {'instIndex': 325, 'instruction': 'callq\tavio_close@PLT'}, {'instIndex': 326, 'instruction': 'movl\t$0, 0x4ac(%rsp)'}, {'instIndex': 327, 'instruction': 'movl\t0x4ac(%rsp), %eax'}, {'instIndex': 328, 'instruction': 'addq\t$0x4b0, %rsp                     # imm = 0x4B0'}, {'instIndex': 329, 'instruction': 'popq\t%rbx'}, {'instIndex': 330, 'instruction': 'retq'}]}]}
The case of compiler clang with optimization O1.
Patched source code file: smoothstreamingenc.c
Patched function: 1---static int write_manifest 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_before/O1/smoothstreamingenc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_before/O1/smoothstreamingenc.s---write_manifest---before
function id: 5
function flag: True
There are 614 instructions for function: write_manifest in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '210', 'end': 224}, 'before': {'start': '210', 'end': 223}}}, {'modifyIndex': 2, 'line': {'after': {'start': '279', 'end': 285}, 'before': {'start': '278', 'end': 283}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%r14'}, {'instIndex': 1, 'instruction': 'pushq\t%rbx'}, {'instIndex': 2, 'instruction': 'subq\t$0x668, %rsp                     # imm = 0x0x29c'}, {'instIndex': 3, 'instruction': 'movl\t%esi, 0x23c(%rsp)                 # 4-byte Spill'}, {'instIndex': 4, 'instruction': 'movq\t%rdi, %rcx'}, {'instIndex': 5, 'instruction': 'movq\t%rcx, 0x248(%rsp)                 # 8-byte Spill'}, {'instIndex': 6, 'instruction': 'movq\t0x18(%rcx), %rax'}, {'instIndex': 7, 'instruction': 'movq\t%rax, 0x240(%rsp)                 # 8-byte Spill'}, {'instIndex': 8, 'instruction': 'leaq\t0x660(%rsp), %rax'}, {'instIndex': 9, 'instruction': 'leaq\t0x260(%rsp), %rdi'}, {'instIndex': 10, 'instruction': 'movq\t%rdi, 0x250(%rsp)                 # 8-byte Spill'}, {'instIndex': 11, 'instruction': 'addq\t$0x38, %rcx'}, {'instIndex': 12, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 13, 'instruction': 'leaq\t.L.str.0x20(%rip), %rdx'}, {'instIndex': 14, 'instruction': 'movb\t$0, %al'}, {'instIndex': 15, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 18, 'instruction': 'addq\t$0x4b0, %rcx                     # imm = 0x4B0'}, {'instIndex': 19, 'instruction': 'leaq\t0x660(%rsp), %rdi'}, {'instIndex': 20, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 21, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 22, 'instruction': 'movl\t%eax, %r8d'}, {'instIndex': 23, 'instruction': 'callq\tavio_open2@PLT'}, {'instIndex': 25, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 26, 'instruction': 'jge\t.LBB5_2'}, {'instIndex': 29, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 30, 'instruction': 'leaq\t.L.str.0x21(%rip), %rdx'}, {'instIndex': 31, 'instruction': 'movb\t$0, %al'}, {'instIndex': 32, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 35, 'instruction': 'jmp\t.LBB5_41'}, {'instIndex': 36, 'instruction': 'movq\t0x660(%rsp), %rdi'}, {'instIndex': 37, 'instruction': 'leaq\t.L.str.0x22(%rip), %rsi'}, {'instIndex': 38, 'instruction': 'movb\t$0, %al'}, {'instIndex': 39, 'instruction': 'callq\tavio_printf@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 599, 'instruction': 'movq\t0x660(%rsp), %rdi'}, {'instIndex': 600, 'instruction': 'leaq\t.L.str.0x2b(%rip), %rsi'}, {'instIndex': 601, 'instruction': 'movb\t$0, %al'}, {'instIndex': 602, 'instruction': 'callq\tavio_printf@PLT'}, {'instIndex': 603, 'instruction': 'movq\t0x660(%rsp), %rdi'}, {'instIndex': 604, 'instruction': 'callq\tavio_flush@PLT'}, {'instIndex': 605, 'instruction': 'movq\t0x660(%rsp), %rdi'}, {'instIndex': 606, 'instruction': 'callq\tavio_close@PLT'}, {'instIndex': 610, 'instruction': 'addq\t$0x668, %rsp                     # imm = 0x0x29c'}, {'instIndex': 611, 'instruction': 'popq\t%rbx'}, {'instIndex': 612, 'instruction': 'popq\t%r14'}, {'instIndex': 613, 'instruction': 'retq'}]}]
Patched function: 1---static int write_manifest 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_before/O1/smoothstreamingenc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_before/O1/smoothstreamingenc.s---write_manifest---before
function id: 5
function flag: True
There are 614 instructions for function: write_manifest in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '210', 'end': 224}, 'before': {'start': '210', 'end': 223}}}, {'modifyIndex': 2, 'line': {'after': {'start': '279', 'end': 285}, 'before': {'start': '278', 'end': 283}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%r14'}, {'instIndex': 1, 'instruction': 'pushq\t%rbx'}, {'instIndex': 2, 'instruction': 'subq\t$0x668, %rsp                     # imm = 0x0x29c'}, {'instIndex': 3, 'instruction': 'movl\t%esi, 0x23c(%rsp)                 # 4-byte Spill'}, {'instIndex': 4, 'instruction': 'movq\t%rdi, %rcx'}, {'instIndex': 5, 'instruction': 'movq\t%rcx, 0x248(%rsp)                 # 8-byte Spill'}, {'instIndex': 6, 'instruction': 'movq\t0x18(%rcx), %rax'}, {'instIndex': 7, 'instruction': 'movq\t%rax, 0x240(%rsp)                 # 8-byte Spill'}, {'instIndex': 8, 'instruction': 'leaq\t0x660(%rsp), %rax'}, {'instIndex': 9, 'instruction': 'leaq\t0x260(%rsp), %rdi'}, {'instIndex': 10, 'instruction': 'movq\t%rdi, 0x250(%rsp)                 # 8-byte Spill'}, {'instIndex': 11, 'instruction': 'addq\t$0x38, %rcx'}, {'instIndex': 12, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 13, 'instruction': 'leaq\t.L.str.0x20(%rip), %rdx'}, {'instIndex': 14, 'instruction': 'movb\t$0, %al'}, {'instIndex': 15, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 18, 'instruction': 'addq\t$0x4b0, %rcx                     # imm = 0x4B0'}, {'instIndex': 19, 'instruction': 'leaq\t0x660(%rsp), %rdi'}, {'instIndex': 20, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 21, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 22, 'instruction': 'movl\t%eax, %r8d'}, {'instIndex': 23, 'instruction': 'callq\tavio_open2@PLT'}, {'instIndex': 25, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 26, 'instruction': 'jge\t.LBB5_2'}, {'instIndex': 29, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 30, 'instruction': 'leaq\t.L.str.0x21(%rip), %rdx'}, {'instIndex': 31, 'instruction': 'movb\t$0, %al'}, {'instIndex': 32, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 35, 'instruction': 'jmp\t.LBB5_41'}, {'instIndex': 36, 'instruction': 'movq\t0x660(%rsp), %rdi'}, {'instIndex': 37, 'instruction': 'leaq\t.L.str.0x22(%rip), %rsi'}, {'instIndex': 38, 'instruction': 'movb\t$0, %al'}, {'instIndex': 39, 'instruction': 'callq\tavio_printf@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 599, 'instruction': 'movq\t0x660(%rsp), %rdi'}, {'instIndex': 600, 'instruction': 'leaq\t.L.str.0x2b(%rip), %rsi'}, {'instIndex': 601, 'instruction': 'movb\t$0, %al'}, {'instIndex': 602, 'instruction': 'callq\tavio_printf@PLT'}, {'instIndex': 603, 'instruction': 'movq\t0x660(%rsp), %rdi'}, {'instIndex': 604, 'instruction': 'callq\tavio_flush@PLT'}, {'instIndex': 605, 'instruction': 'movq\t0x660(%rsp), %rdi'}, {'instIndex': 606, 'instruction': 'callq\tavio_close@PLT'}, {'instIndex': 610, 'instruction': 'addq\t$0x668, %rsp                     # imm = 0x0x29c'}, {'instIndex': 611, 'instruction': 'popq\t%rbx'}, {'instIndex': 612, 'instruction': 'popq\t%r14'}, {'instIndex': 613, 'instruction': 'retq'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_before/O1/smoothstreamingenc.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_before/O1/smoothstreamingenc.o---before
The extraction of function: write_manifest
Analyzing the binaries to generate subCFGs from patched function ...
It has 362 nodes and 705 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 614 instructions in binary file.
[4198528, 4198615, 4198661, 4198673, 4198708, 4198727]
[4201739, 4201761, 4201774, 4201787, 4201796]
The execution time of patched subCFG information extraction via angr: 0:00:00.680590
{'write_manifest': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401105>, <DisassemblerInsn "cmp" for 0x40110c>, <DisassemblerInsn "jge" for 0x40110f>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401147>, <DisassemblerInsn "lea" for 0x40114f>, <DisassemblerInsn "mov" for 0x401156>, <DisassemblerInsn "call" for 0x401158>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40115d>, <DisassemblerInsn "mov" for 0x401165>, <DisassemblerInsn "mov" for 0x401168>, <DisassemblerInsn "xor" for 0x40116f>, <DisassemblerInsn "xor" for 0x401171>, <DisassemblerInsn "cmp" for 0x401173>, <DisassemblerInsn "mov" for 0x401176>, <DisassemblerInsn "mov" for 0x401178>, <DisassemblerInsn "mov" for 0x40117f>, <DisassemblerInsn "mov" for 0x401181>, <DisassemblerInsn "mov" for 0x401188>, <DisassemblerInsn "mov" for 0x401190>, <DisassemblerInsn "mov" for 0x401192>, <DisassemblerInsn "mov" for 0x401199>, <DisassemblerInsn "je" for 0x4011a0>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4010d7>, <DisassemblerInsn "mov" for 0x4010df>, <DisassemblerInsn "add" for 0x4010e7>, <DisassemblerInsn "lea" for 0x4010ee>, <DisassemblerInsn "mov" for 0x4010f6>, <DisassemblerInsn "xor" for 0x4010fb>, <DisassemblerInsn "mov" for 0x4010fd>, <DisassemblerInsn "call" for 0x401100>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x401080>, <DisassemblerInsn "push" for 0x401082>, <DisassemblerInsn "sub" for 0x401083>, <DisassemblerInsn "mov" for 0x40108a>, <DisassemblerInsn "mov" for 0x401091>, <DisassemblerInsn "mov" for 0x401094>, <DisassemblerInsn "mov" for 0x40109c>, <DisassemblerInsn "mov" for 0x4010a0>, <DisassemblerInsn "lea" for 0x4010a8>, <DisassemblerInsn "lea" for 0x4010b0>, <DisassemblerInsn "mov" for 0x4010b8>, <DisassemblerInsn "add" for 0x4010c0>, <DisassemblerInsn "mov" for 0x4010c4>, <DisassemblerInsn "lea" for 0x4010c9>, <DisassemblerInsn "mov" for 0x4010d0>, <DisassemblerInsn "call" for 0x4010d2>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401134>, <DisassemblerInsn "mov" for 0x40113b>, <DisassemblerInsn "jmp" for 0x401142>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d44>, <DisassemblerInsn "add" for 0x401d4b>, <DisassemblerInsn "pop" for 0x401d52>, <DisassemblerInsn "pop" for 0x401d53>, <DisassemblerInsn "ret" for 0x401d55>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401111>, <DisassemblerInsn "mov" for 0x401119>, <DisassemblerInsn "mov" for 0x401121>, <DisassemblerInsn "lea" for 0x401126>, <DisassemblerInsn "mov" for 0x40112d>, <DisassemblerInsn "call" for 0x40112f>]'}], 'cfg_block_detailed_info': [{'block_Idx': 2, 'blockInsts': ['<mov~~dword ptr [rsp + 0x25c], eax>', '<cmp~~eax, 0>', '<jge~~0x401147>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x660]>', '<lea~~rsi, [rip + 0x2572]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x248]>', '<mov~~edx, dword ptr [rax + 0x2c]>', '<mov~~dword ptr [rsp + 0x21c], edx>', '<xor~~eax, eax>', '<xor~~ecx, ecx>', '<cmp~~edx, 0>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x220], edx>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x224], edx>', '<mov~~qword ptr [rsp + 0x228], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x230], ecx>', '<mov~~dword ptr [rsp + 0x234], eax>', '<je~~0x401430>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x248]>', '<mov~~rsi, qword ptr [rsp + 0x250]>', '<add~~rcx, 0x4b0>', '<lea~~rdi, [rsp + 0x660]>', '<mov~~edx, 2>', '<xor~~eax, eax>', '<mov~~r8d, eax>', '<call~~0x5000c0>']}, {'block_Idx': 0, 'blockInsts': ['<push~~r14>', '<push~~rbx>', '<sub~~rsp, 0x668>', '<mov~~dword ptr [rsp + 0x23c], esi>', '<mov~~rcx, rdi>', '<mov~~qword ptr [rsp + 0x248], rcx>', '<mov~~rax, qword ptr [rcx + 0x18]>', '<mov~~qword ptr [rsp + 0x240], rax>', '<lea~~rax, [rsp + 0x660]>', '<lea~~rdi, [rsp + 0x260]>', '<mov~~qword ptr [rsp + 0x250], rdi>', '<add~~rcx, 0x38>', '<mov~~esi, 0x400>', '<lea~~rdx, [rip + 0x25cd]>', '<mov~~al, 0>', '<call~~0x500020>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x25c]>', '<mov~~dword ptr [rsp + 0x238], eax>', '<jmp~~0x401d44>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x238]>', '<add~~rsp, 0x668>', '<pop~~rbx>', '<pop~~r14>', '<ret~~>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x250]>', '<mov~~rdi, qword ptr [rsp + 0x248]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x257c]>', '<mov~~al, 0>', '<call~~0x500018>']}], 'cfg_edge_info': [(0, 1), (2, 4), (1, 2), (4, 6), (5, 7), (2, 3), (3, 5)]}, {'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401939>, <DisassemblerInsn "cmp" for 0x401941>, <DisassemblerInsn "je" for 0x401945>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "xor" for 0x401d3b>, <DisassemblerInsn "mov" for 0x401d3d>, <DisassemblerInsn "mov" for 0x401d44>, <DisassemblerInsn "add" for 0x401d4b>, <DisassemblerInsn "pop" for 0x401d52>, <DisassemblerInsn "pop" for 0x401d53>, <DisassemblerInsn "ret" for 0x401d55>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d0b>, <DisassemblerInsn "lea" for 0x401d13>, <DisassemblerInsn "mov" for 0x401d1a>, <DisassemblerInsn "call" for 0x401d1c>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401134>, <DisassemblerInsn "mov" for 0x40113b>, <DisassemblerInsn "jmp" for 0x401142>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d21>, <DisassemblerInsn "call" for 0x401d29>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d44>, <DisassemblerInsn "add" for 0x401d4b>, <DisassemblerInsn "pop" for 0x401d52>, <DisassemblerInsn "pop" for 0x401d53>, <DisassemblerInsn "ret" for 0x401d55>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401cf5>, <DisassemblerInsn "lea" for 0x401cfd>, <DisassemblerInsn "mov" for 0x401d04>, <DisassemblerInsn "call" for 0x401d06>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d2e>, <DisassemblerInsn "call" for 0x401d36>]'}], 'cfg_block_detailed_info': [{'block_Idx': 21, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x240]>', '<cmp~~dword ptr [rax + 0x2c], 0>', '<je~~0x401d0b>']}, {'block_Idx': 37, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x238], eax>', '<mov~~eax, dword ptr [rsp + 0x238]>', '<add~~rsp, 0x668>', '<pop~~rbx>', '<pop~~r14>', '<ret~~>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x660]>', '<lea~~rsi, [rip + 0x1c65]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x25c]>', '<mov~~dword ptr [rsp + 0x238], eax>', '<jmp~~0x401d44>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x660]>', '<call~~0x500058>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x238]>', '<add~~rsp, 0x668>', '<pop~~rbx>', '<pop~~r14>', '<ret~~>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x660]>', '<lea~~rsi, [rip + 0x1b56]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x660]>', '<call~~0x5000d0>']}], 'cfg_edge_info': [(38, 23), (26, 30), (23, 26), (5, 7), (30, 37), (21, 23)]}]}
{'write_manifest': [4201739, 4201761, 4201774, 4201787, 4201796]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_before/O1/smoothstreamingenc.o---before
The extraction of function: write_manifest
[4201739, 4201761, 4201774, 4201787, 4201796]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 80 nodes and 129 edges in CFGEmulated.
It has 76 nodes and 105 edges in CDG.
It has 2448 nodes and 3090 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4201739, 4201761, 4201774, 4201787, 4201796]
{4199808, 4198528, 4198661, 4199686, 4201739, 4200844, 4198673, 4199697, 4199699, 4199837, 4201761, 4200739, 4198822, 4200360, 4200491, 4201774, 4199472, 4201520, 4198708, 4199732, 4200247, 4200761, 4201787, 4201407, 4201024, 4201796, 4198727, 4199754, 4200779, 4201680, 4200017, 4200917, 4198615, 4199772, 4198749, 4201309, 4201566, 4200549, 4199910, 4200815, 4200690, 4201717}
[47, 44, 76, 19, 39, 0, 66, 53, 55, 6, 37, 35, 21, 70, 36, 68, 51, 64, 58, 63, 61, 11, 17, 60, 27, 10, 78, 41, 45, 5, 22, 77, 46, 15, 38, 2, 31, 62, 20, 42, 43, 67, 49, 73, 30, 16, 65, 9, 13, 28, 12, 75, 79, 48, 50, 24, 4, 29]
The execution time of patched slicing information extraction via angr: 0:01:40.592887
{'write_manifest': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d2e>, <DisassemblerInsn "call" for 0x401d36>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4017a8>, <DisassemblerInsn "mov" for 0x4017af>, <DisassemblerInsn "mov" for 0x4017b6>, <DisassemblerInsn "mov" for 0x4017be>, <DisassemblerInsn "mov" for 0x4017c6>, <DisassemblerInsn "mov" for 0x4017ce>, <DisassemblerInsn "mov" for 0x4017d6>, <DisassemblerInsn "imul" for 0x4017d9>, <DisassemblerInsn "add" for 0x4017e0>, <DisassemblerInsn "add" for 0x4017e3>, <DisassemblerInsn "mov" for 0x4017ea>, <DisassemblerInsn "xor" for 0x4017f2>, <DisassemblerInsn "test" for 0x4017f4>, <DisassemblerInsn "cmovne" for 0x4017f8>, <DisassemblerInsn "mov" for 0x4017fb>, <DisassemblerInsn "mov" for 0x401802>, <DisassemblerInsn "add" for 0x401804>, <DisassemblerInsn "mov" for 0x401806>, <DisassemblerInsn "sub" for 0x401808>, <DisassemblerInsn "xor" for 0x40180a>, <DisassemblerInsn "cmp" for 0x40180c>, <DisassemblerInsn "cmovg" for 0x40180f>, <DisassemblerInsn "xor" for 0x401812>, <DisassemblerInsn "cmp" for 0x401814>, <DisassemblerInsn "cmove" for 0x401817>, <DisassemblerInsn "mov" for 0x40181a>, <DisassemblerInsn "sub" for 0x401821>, <DisassemblerInsn "cmp" for 0x401823>, <DisassemblerInsn "jge" for 0x401825>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4018f2>, <DisassemblerInsn "mov" for 0x4018f9>, <DisassemblerInsn "mov" for 0x401901>, <DisassemblerInsn "add" for 0x401909>, <DisassemblerInsn "mov" for 0x40190d>, <DisassemblerInsn "sub" for 0x40190f>, <DisassemblerInsn "mov" for 0x401911>, <DisassemblerInsn "cmp" for 0x401913>, <DisassemblerInsn "mov" for 0x401915>, <DisassemblerInsn "jg" for 0x40191d>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401351>, <DisassemblerInsn "mov" for 0x401358>, <DisassemblerInsn "mov" for 0x40135f>, <DisassemblerInsn "mov" for 0x401366>, <DisassemblerInsn "add" for 0x40136d>, <DisassemblerInsn "mov" for 0x401370>, <DisassemblerInsn "mov" for 0x401377>, <DisassemblerInsn "mov" for 0x40137e>, <DisassemblerInsn "mov" for 0x401385>, <DisassemblerInsn "mov" for 0x40138c>, <DisassemblerInsn "mov" for 0x401394>, <DisassemblerInsn "mov" for 0x40139c>, <DisassemblerInsn "mov" for 0x4013a4>, <DisassemblerInsn "mov" for 0x4013ab>, <DisassemblerInsn "mov" for 0x4013b2>, <DisassemblerInsn "mov" for 0x4013b9>, <DisassemblerInsn "add" for 0x4013c0>, <DisassemblerInsn "cmp" for 0x4013c4>, <DisassemblerInsn "mov" for 0x4013c7>, <DisassemblerInsn "mov" for 0x4013cf>, <DisassemblerInsn "mov" for 0x4013d2>, <DisassemblerInsn "mov" for 0x4013da>, <DisassemblerInsn "mov" for 0x4013dd>, <DisassemblerInsn "mov" for 0x4013e5>, <DisassemblerInsn "mov" for 0x4013e8>, <DisassemblerInsn "mov" for 0x4013f0>, <DisassemblerInsn "mov" for 0x4013f3>, <DisassemblerInsn "mov" for 0x4013fb>, <DisassemblerInsn "mov" for 0x4013fe>, <DisassemblerInsn "mov" for 0x401406>, <DisassemblerInsn "mov" for 0x40140d>, <DisassemblerInsn "mov" for 0x401414>, <DisassemblerInsn "mov" for 0x40141c>, <DisassemblerInsn "mov" for 0x401423>, <DisassemblerInsn "jne" for 0x40142a>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40159d>, <DisassemblerInsn "mov" for 0x4015a5>, <DisassemblerInsn "add" for 0x4015ad>, <DisassemblerInsn "mov" for 0x4015b1>, <DisassemblerInsn "add" for 0x4015b9>, <DisassemblerInsn "mov" for 0x4015bd>, <DisassemblerInsn "xor" for 0x4015c5>, <DisassemblerInsn "mov" for 0x4015c7>, <DisassemblerInsn "xor" for 0x4015c9>, <DisassemblerInsn "mov" for 0x4015cb>, <DisassemblerInsn "mov" for 0x4015d0>, <DisassemblerInsn "mov" for 0x4015d8>, <DisassemblerInsn "mov" for 0x4015df>, <DisassemblerInsn "mov" for 0x4015e6>, <DisassemblerInsn "mov" for 0x4015ee>, <DisassemblerInsn "mov" for 0x4015f6>, <DisassemblerInsn "mov" for 0x4015fe>, <DisassemblerInsn "mov" for 0x401605>, <DisassemblerInsn "mov" for 0x40160c>, <DisassemblerInsn "mov" for 0x401613>, <DisassemblerInsn "mov" for 0x40161b>, <DisassemblerInsn "mov" for 0x40161e>, <DisassemblerInsn "mov" for 0x401626>, <DisassemblerInsn "mov" for 0x401629>, <DisassemblerInsn "mov" for 0x40162d>, <DisassemblerInsn "mov" for 0x401631>, <DisassemblerInsn "cmp" for 0x401639>, <DisassemblerInsn "mov" for 0x40163d>, <DisassemblerInsn "mov" for 0x401644>, <DisassemblerInsn "jne" for 0x40164b>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x401080>, <DisassemblerInsn "push" for 0x401082>, <DisassemblerInsn "sub" for 0x401083>, <DisassemblerInsn "mov" for 0x40108a>, <DisassemblerInsn "mov" for 0x401091>, <DisassemblerInsn "mov" for 0x401094>, <DisassemblerInsn "mov" for 0x40109c>, <DisassemblerInsn "mov" for 0x4010a0>, <DisassemblerInsn "lea" for 0x4010a8>, <DisassemblerInsn "lea" for 0x4010b0>, <DisassemblerInsn "mov" for 0x4010b8>, <DisassemblerInsn "add" for 0x4010c0>, <DisassemblerInsn "mov" for 0x4010c4>, <DisassemblerInsn "lea" for 0x4010c9>, <DisassemblerInsn "mov" for 0x4010d0>, <DisassemblerInsn "call" for 0x4010d2>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c83>, <DisassemblerInsn "mov" for 0x401c88>, <DisassemblerInsn "mov" for 0x401c8d>, <DisassemblerInsn "mov" for 0x401c94>, <DisassemblerInsn "lea" for 0x401c9b>, <DisassemblerInsn "mov" for 0x401ca2>, <DisassemblerInsn "call" for 0x401ca4>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40182b>, <DisassemblerInsn "mov" for 0x401832>, <DisassemblerInsn "mov" for 0x401839>, <DisassemblerInsn "mov" for 0x401841>, <DisassemblerInsn "mov" for 0x401844>, <DisassemblerInsn "mov" for 0x401847>, <DisassemblerInsn "test" for 0x40184d>, <DisassemblerInsn "setg" for 0x40184f>, <DisassemblerInsn "or" for 0x401852>, <DisassemblerInsn "mov" for 0x401854>, <DisassemblerInsn "mov" for 0x40185b>, <DisassemblerInsn "mov" for 0x40185d>, <DisassemblerInsn "mov" for 0x401865>, <DisassemblerInsn "mov" for 0x40186c>, <DisassemblerInsn "mov" for 0x401874>, <DisassemblerInsn "mov" for 0x40187c>, <DisassemblerInsn "mov" for 0x401884>, <DisassemblerInsn "mov" for 0x401887>, <DisassemblerInsn "mov" for 0x40188b>, <DisassemblerInsn "test" for 0x401893>, <DisassemblerInsn "jne" for 0x401895>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4015e6>, <DisassemblerInsn "mov" for 0x4015ee>, <DisassemblerInsn "mov" for 0x4015f6>, <DisassemblerInsn "mov" for 0x4015fe>, <DisassemblerInsn "mov" for 0x401605>, <DisassemblerInsn "mov" for 0x40160c>, <DisassemblerInsn "mov" for 0x401613>, <DisassemblerInsn "mov" for 0x40161b>, <DisassemblerInsn "mov" for 0x40161e>, <DisassemblerInsn "mov" for 0x401626>, <DisassemblerInsn "mov" for 0x401629>, <DisassemblerInsn "mov" for 0x40162d>, <DisassemblerInsn "mov" for 0x401631>, <DisassemblerInsn "cmp" for 0x401639>, <DisassemblerInsn "mov" for 0x40163d>, <DisassemblerInsn "mov" for 0x401644>, <DisassemblerInsn "jne" for 0x40164b>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401147>, <DisassemblerInsn "lea" for 0x40114f>, <DisassemblerInsn "mov" for 0x401156>, <DisassemblerInsn "call" for 0x401158>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40196f>, <DisassemblerInsn "mov" for 0x401977>, <DisassemblerInsn "cmp" for 0x40197c>, <DisassemblerInsn "mov" for 0x40197f>, <DisassemblerInsn "je" for 0x401986>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401580>, <DisassemblerInsn "mov" for 0x401588>, <DisassemblerInsn "cmp" for 0x40158d>, <DisassemblerInsn "mov" for 0x401590>, <DisassemblerInsn "je" for 0x401597>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401513>, <DisassemblerInsn "mov" for 0x40151b>, <DisassemblerInsn "mov" for 0x401523>, <DisassemblerInsn "lea" for 0x401526>, <DisassemblerInsn "mov" for 0x40152d>, <DisassemblerInsn "call" for 0x40152f>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401cab>, <DisassemblerInsn "mov" for 0x401cb0>, <DisassemblerInsn "mov" for 0x401cb5>, <DisassemblerInsn "mov" for 0x401cbb>, <DisassemblerInsn "lea" for 0x401cc2>, <DisassemblerInsn "mov" for 0x401cc9>, <DisassemblerInsn "call" for 0x401ccb>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d21>, <DisassemblerInsn "call" for 0x401d29>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4018c7>, <DisassemblerInsn "mov" for 0x4018cf>, <DisassemblerInsn "mov" for 0x4018d7>, <DisassemblerInsn "mov" for 0x4018dd>, <DisassemblerInsn "lea" for 0x4018e4>, <DisassemblerInsn "mov" for 0x4018eb>, <DisassemblerInsn "call" for 0x4018ed>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b11>, <DisassemblerInsn "mov" for 0x401b19>, <DisassemblerInsn "mov" for 0x401b21>, <DisassemblerInsn "mov" for 0x401b28>, <DisassemblerInsn "add" for 0x401b2f>, <DisassemblerInsn "mov" for 0x401b33>, <DisassemblerInsn "cmp" for 0x401b35>, <DisassemblerInsn "mov" for 0x401b38>, <DisassemblerInsn "mov" for 0x401b40>, <DisassemblerInsn "mov" for 0x401b47>, <DisassemblerInsn "mov" for 0x401b49>, <DisassemblerInsn "mov" for 0x401b50>, <DisassemblerInsn "jb" for 0x401b57>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "xor" for 0x401d3b>, <DisassemblerInsn "mov" for 0x401d3d>, <DisassemblerInsn "mov" for 0x401d44>, <DisassemblerInsn "add" for 0x401d4b>, <DisassemblerInsn "pop" for 0x401d52>, <DisassemblerInsn "pop" for 0x401d53>, <DisassemblerInsn "ret" for 0x401d55>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c30>, <DisassemblerInsn "mov" for 0x401c34>, <DisassemblerInsn "mov" for 0x401c3b>, <DisassemblerInsn "mov" for 0x401c40>, <DisassemblerInsn "mov" for 0x401c43>, <DisassemblerInsn "mov" for 0x401c46>, <DisassemblerInsn "test" for 0x401c4c>, <DisassemblerInsn "setg" for 0x401c4e>, <DisassemblerInsn "or" for 0x401c51>, <DisassemblerInsn "mov" for 0x401c53>, <DisassemblerInsn "mov" for 0x401c57>, <DisassemblerInsn "mov" for 0x401c59>, <DisassemblerInsn "mov" for 0x401c5e>, <DisassemblerInsn "mov" for 0x401c62>, <DisassemblerInsn "mov" for 0x401c67>, <DisassemblerInsn "mov" for 0x401c6c>, <DisassemblerInsn "mov" for 0x401c71>, <DisassemblerInsn "mov" for 0x401c74>, <DisassemblerInsn "mov" for 0x401c78>, <DisassemblerInsn "test" for 0x401c7d>, <DisassemblerInsn "jne" for 0x401c7f>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4016cb>, <DisassemblerInsn "mov" for 0x4016d3>, <DisassemblerInsn "add" for 0x4016da>, <DisassemblerInsn "mov" for 0x4016dd>, <DisassemblerInsn "mov" for 0x4016e4>, <DisassemblerInsn "mov" for 0x4016eb>, <DisassemblerInsn "mov" for 0x4016f3>, <DisassemblerInsn "mov" for 0x4016fb>, <DisassemblerInsn "mov" for 0x401702>, <DisassemblerInsn "add" for 0x401709>, <DisassemblerInsn "mov" for 0x40170d>, <DisassemblerInsn "cmp" for 0x40170f>, <DisassemblerInsn "mov" for 0x401712>, <DisassemblerInsn "mov" for 0x40171a>, <DisassemblerInsn "mov" for 0x401721>, <DisassemblerInsn "mov" for 0x401723>, <DisassemblerInsn "mov" for 0x40172a>, <DisassemblerInsn "jb" for 0x401731>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401897>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d44>, <DisassemblerInsn "add" for 0x401d4b>, <DisassemblerInsn "pop" for 0x401d52>, <DisassemblerInsn "pop" for 0x401d53>, <DisassemblerInsn "ret" for 0x401d55>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401506>, <DisassemblerInsn "test" for 0x40150d>, <DisassemblerInsn "jne" for 0x40150f>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019d5>, <DisassemblerInsn "mov" for 0x4019dd>, <DisassemblerInsn "mov" for 0x4019e5>, <DisassemblerInsn "mov" for 0x4019ed>, <DisassemblerInsn "mov" for 0x4019f4>, <DisassemblerInsn "mov" for 0x4019fb>, <DisassemblerInsn "mov" for 0x401a02>, <DisassemblerInsn "mov" for 0x401a0a>, <DisassemblerInsn "mov" for 0x401a0d>, <DisassemblerInsn "mov" for 0x401a15>, <DisassemblerInsn "mov" for 0x401a18>, <DisassemblerInsn "mov" for 0x401a1c>, <DisassemblerInsn "mov" for 0x401a20>, <DisassemblerInsn "cmp" for 0x401a28>, <DisassemblerInsn "mov" for 0x401a2c>, <DisassemblerInsn "mov" for 0x401a33>, <DisassemblerInsn "jne" for 0x401a3a>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40154a>, <DisassemblerInsn "cmp" for 0x401552>, <DisassemblerInsn "je" for 0x401556>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40115d>, <DisassemblerInsn "mov" for 0x401165>, <DisassemblerInsn "mov" for 0x401168>, <DisassemblerInsn "xor" for 0x40116f>, <DisassemblerInsn "xor" for 0x401171>, <DisassemblerInsn "cmp" for 0x401173>, <DisassemblerInsn "mov" for 0x401176>, <DisassemblerInsn "mov" for 0x401178>, <DisassemblerInsn "mov" for 0x40117f>, <DisassemblerInsn "mov" for 0x401181>, <DisassemblerInsn "mov" for 0x401188>, <DisassemblerInsn "mov" for 0x401190>, <DisassemblerInsn "mov" for 0x401192>, <DisassemblerInsn "mov" for 0x401199>, <DisassemblerInsn "je" for 0x4011a0>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401865>, <DisassemblerInsn "mov" for 0x40186c>, <DisassemblerInsn "mov" for 0x401874>, <DisassemblerInsn "mov" for 0x40187c>, <DisassemblerInsn "mov" for 0x401884>, <DisassemblerInsn "mov" for 0x401887>, <DisassemblerInsn "mov" for 0x40188b>, <DisassemblerInsn "test" for 0x401893>, <DisassemblerInsn "jne" for 0x401895>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b5d>, <DisassemblerInsn "mov" for 0x401b65>, <DisassemblerInsn "mov" for 0x401b6d>, <DisassemblerInsn "mov" for 0x401b74>, <DisassemblerInsn "mov" for 0x401b78>, <DisassemblerInsn "movsxd" for 0x401b7d>, <DisassemblerInsn "mov" for 0x401b80>, <DisassemblerInsn "mov" for 0x401b85>, <DisassemblerInsn "mov" for 0x401b8d>, <DisassemblerInsn "mov" for 0x401b92>, <DisassemblerInsn "mov" for 0x401b94>, <DisassemblerInsn "imul" for 0x401b98>, <DisassemblerInsn "add" for 0x401b9f>, <DisassemblerInsn "add" for 0x401ba2>, <DisassemblerInsn "mov" for 0x401ba8>, <DisassemblerInsn "mov" for 0x401bad>, <DisassemblerInsn "mov" for 0x401baf>, <DisassemblerInsn "cmp" for 0x401bb6>, <DisassemblerInsn "jl" for 0x401bb9>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401651>, <DisassemblerInsn "mov" for 0x401659>, <DisassemblerInsn "mov" for 0x401660>, <DisassemblerInsn "mov" for 0x401668>, <DisassemblerInsn "mov" for 0x401670>, <DisassemblerInsn "mov" for 0x401678>, <DisassemblerInsn "imul" for 0x40167c>, <DisassemblerInsn "mov" for 0x401683>, <DisassemblerInsn "add" for 0x401686>, <DisassemblerInsn "add" for 0x401689>, <DisassemblerInsn "mov" for 0x401690>, <DisassemblerInsn "mov" for 0x401693>, <DisassemblerInsn "mov" for 0x40169a>, <DisassemblerInsn "imul" for 0x4016a1>, <DisassemblerInsn "add" for 0x4016a8>, <DisassemblerInsn "add" for 0x4016ab>, <DisassemblerInsn "mov" for 0x4016b1>, <DisassemblerInsn "lea" for 0x4016b4>, <DisassemblerInsn "mov" for 0x4016bb>, <DisassemblerInsn "mov" for 0x4016bf>, <DisassemblerInsn "mov" for 0x4016c4>, <DisassemblerInsn "call" for 0x4016c6>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401111>, <DisassemblerInsn "mov" for 0x401119>, <DisassemblerInsn "mov" for 0x401121>, <DisassemblerInsn "lea" for 0x401126>, <DisassemblerInsn "mov" for 0x40112d>, <DisassemblerInsn "call" for 0x40112f>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40138c>, <DisassemblerInsn "mov" for 0x401394>, <DisassemblerInsn "mov" for 0x40139c>, <DisassemblerInsn "mov" for 0x4013a4>, <DisassemblerInsn "mov" for 0x4013ab>, <DisassemblerInsn "mov" for 0x4013b2>, <DisassemblerInsn "mov" for 0x4013b9>, <DisassemblerInsn "add" for 0x4013c0>, <DisassemblerInsn "cmp" for 0x4013c4>, <DisassemblerInsn "mov" for 0x4013c7>, <DisassemblerInsn "mov" for 0x4013cf>, <DisassemblerInsn "mov" for 0x4013d2>, <DisassemblerInsn "mov" for 0x4013da>, <DisassemblerInsn "mov" for 0x4013dd>, <DisassemblerInsn "mov" for 0x4013e5>, <DisassemblerInsn "mov" for 0x4013e8>, <DisassemblerInsn "mov" for 0x4013f0>, <DisassemblerInsn "mov" for 0x4013f3>, <DisassemblerInsn "mov" for 0x4013fb>, <DisassemblerInsn "mov" for 0x4013fe>, <DisassemblerInsn "mov" for 0x401406>, <DisassemblerInsn "mov" for 0x40140d>, <DisassemblerInsn "mov" for 0x401414>, <DisassemblerInsn "mov" for 0x40141c>, <DisassemblerInsn "mov" for 0x401423>, <DisassemblerInsn "jne" for 0x40142a>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401cd0>, <DisassemblerInsn "mov" for 0x401cd4>, <DisassemblerInsn "mov" for 0x401cd9>, <DisassemblerInsn "add" for 0x401cde>, <DisassemblerInsn "mov" for 0x401ce2>, <DisassemblerInsn "sub" for 0x401ce4>, <DisassemblerInsn "mov" for 0x401ce6>, <DisassemblerInsn "cmp" for 0x401ce8>, <DisassemblerInsn "mov" for 0x401cea>, <DisassemblerInsn "jg" for 0x401cef>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4016eb>, <DisassemblerInsn "mov" for 0x4016f3>, <DisassemblerInsn "mov" for 0x4016fb>, <DisassemblerInsn "mov" for 0x401702>, <DisassemblerInsn "add" for 0x401709>, <DisassemblerInsn "mov" for 0x40170d>, <DisassemblerInsn "cmp" for 0x40170f>, <DisassemblerInsn "mov" for 0x401712>, <DisassemblerInsn "mov" for 0x40171a>, <DisassemblerInsn "mov" for 0x401721>, <DisassemblerInsn "mov" for 0x401723>, <DisassemblerInsn "mov" for 0x40172a>, <DisassemblerInsn "jb" for 0x401731>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4012e6>, <DisassemblerInsn "mov" for 0x4012ee>, <DisassemblerInsn "mov" for 0x4012f6>, <DisassemblerInsn "mov" for 0x4012fe>, <DisassemblerInsn "mov" for 0x401306>, <DisassemblerInsn "mov" for 0x40130a>, <DisassemblerInsn "cmp" for 0x40130e>, <DisassemblerInsn "jne" for 0x401312>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401737>, <DisassemblerInsn "mov" for 0x40173f>, <DisassemblerInsn "mov" for 0x401747>, <DisassemblerInsn "mov" for 0x40174e>, <DisassemblerInsn "mov" for 0x401752>, <DisassemblerInsn "movsxd" for 0x40175a>, <DisassemblerInsn "mov" for 0x40175d>, <DisassemblerInsn "mov" for 0x401765>, <DisassemblerInsn "mov" for 0x40176d>, <DisassemblerInsn "mov" for 0x401775>, <DisassemblerInsn "mov" for 0x401777>, <DisassemblerInsn "imul" for 0x40177e>, <DisassemblerInsn "add" for 0x401785>, <DisassemblerInsn "add" for 0x401788>, <DisassemblerInsn "mov" for 0x40178e>, <DisassemblerInsn "mov" for 0x401796>, <DisassemblerInsn "mov" for 0x401798>, <DisassemblerInsn "cmp" for 0x40179f>, <DisassemblerInsn "jl" for 0x4017a2>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4010d7>, <DisassemblerInsn "mov" for 0x4010df>, <DisassemblerInsn "add" for 0x4010e7>, <DisassemblerInsn "lea" for 0x4010ee>, <DisassemblerInsn "mov" for 0x4010f6>, <DisassemblerInsn "xor" for 0x4010fb>, <DisassemblerInsn "mov" for 0x4010fd>, <DisassemblerInsn "call" for 0x401100>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40194b>, <DisassemblerInsn "mov" for 0x401952>, <DisassemblerInsn "mov" for 0x401959>, <DisassemblerInsn "lea" for 0x401961>, <DisassemblerInsn "mov" for 0x401968>, <DisassemblerInsn "call" for 0x40196a>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401899>, <DisassemblerInsn "mov" for 0x4018a1>, <DisassemblerInsn "mov" for 0x4018a9>, <DisassemblerInsn "mov" for 0x4018b0>, <DisassemblerInsn "lea" for 0x4018b7>, <DisassemblerInsn "mov" for 0x4018be>, <DisassemblerInsn "call" for 0x4018c0>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401511>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40198c>, <DisassemblerInsn "mov" for 0x401994>, <DisassemblerInsn "add" for 0x40199c>, <DisassemblerInsn "mov" for 0x4019a0>, <DisassemblerInsn "add" for 0x4019a8>, <DisassemblerInsn "mov" for 0x4019ac>, <DisassemblerInsn "xor" for 0x4019b4>, <DisassemblerInsn "mov" for 0x4019b6>, <DisassemblerInsn "xor" for 0x4019b8>, <DisassemblerInsn "mov" for 0x4019ba>, <DisassemblerInsn "mov" for 0x4019bf>, <DisassemblerInsn "mov" for 0x4019c7>, <DisassemblerInsn "mov" for 0x4019ce>, <DisassemblerInsn "mov" for 0x4019d5>, <DisassemblerInsn "mov" for 0x4019dd>, <DisassemblerInsn "mov" for 0x4019e5>, <DisassemblerInsn "mov" for 0x4019ed>, <DisassemblerInsn "mov" for 0x4019f4>, <DisassemblerInsn "mov" for 0x4019fb>, <DisassemblerInsn "mov" for 0x401a02>, <DisassemblerInsn "mov" for 0x401a0a>, <DisassemblerInsn "mov" for 0x401a0d>, <DisassemblerInsn "mov" for 0x401a15>, <DisassemblerInsn "mov" for 0x401a18>, <DisassemblerInsn "mov" for 0x401a1c>, <DisassemblerInsn "mov" for 0x401a20>, <DisassemblerInsn "cmp" for 0x401a28>, <DisassemblerInsn "mov" for 0x401a2c>, <DisassemblerInsn "mov" for 0x401a33>, <DisassemblerInsn "jne" for 0x401a3a>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401923>, <DisassemblerInsn "lea" for 0x40192b>, <DisassemblerInsn "mov" for 0x401932>, <DisassemblerInsn "call" for 0x401934>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401af1>, <DisassemblerInsn "mov" for 0x401af9>, <DisassemblerInsn "add" for 0x401b00>, <DisassemblerInsn "mov" for 0x401b03>, <DisassemblerInsn "mov" for 0x401b0a>, <DisassemblerInsn "mov" for 0x401b11>, <DisassemblerInsn "mov" for 0x401b19>, <DisassemblerInsn "mov" for 0x401b21>, <DisassemblerInsn "mov" for 0x401b28>, <DisassemblerInsn "add" for 0x401b2f>, <DisassemblerInsn "mov" for 0x401b33>, <DisassemblerInsn "cmp" for 0x401b35>, <DisassemblerInsn "mov" for 0x401b38>, <DisassemblerInsn "mov" for 0x401b40>, <DisassemblerInsn "mov" for 0x401b47>, <DisassemblerInsn "mov" for 0x401b49>, <DisassemblerInsn "mov" for 0x401b50>, <DisassemblerInsn "jb" for 0x401b57>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401bbf>, <DisassemblerInsn "mov" for 0x401bc6>, <DisassemblerInsn "mov" for 0x401bca>, <DisassemblerInsn "mov" for 0x401bd2>, <DisassemblerInsn "mov" for 0x401bd7>, <DisassemblerInsn "mov" for 0x401bdc>, <DisassemblerInsn "mov" for 0x401be4>, <DisassemblerInsn "imul" for 0x401be7>, <DisassemblerInsn "add" for 0x401bee>, <DisassemblerInsn "add" for 0x401bf1>, <DisassemblerInsn "mov" for 0x401bf8>, <DisassemblerInsn "xor" for 0x401bfd>, <DisassemblerInsn "test" for 0x401bff>, <DisassemblerInsn "cmovne" for 0x401c03>, <DisassemblerInsn "mov" for 0x401c06>, <DisassemblerInsn "mov" for 0x401c0a>, <DisassemblerInsn "add" for 0x401c0c>, <DisassemblerInsn "mov" for 0x401c0e>, <DisassemblerInsn "sub" for 0x401c10>, <DisassemblerInsn "xor" for 0x401c12>, <DisassemblerInsn "cmp" for 0x401c14>, <DisassemblerInsn "cmovg" for 0x401c17>, <DisassemblerInsn "xor" for 0x401c1a>, <DisassemblerInsn "cmp" for 0x401c1c>, <DisassemblerInsn "cmove" for 0x401c1f>, <DisassemblerInsn "mov" for 0x401c22>, <DisassemblerInsn "sub" for 0x401c26>, <DisassemblerInsn "cmp" for 0x401c28>, <DisassemblerInsn "jge" for 0x401c2a>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4018c5>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d0b>, <DisassemblerInsn "lea" for 0x401d13>, <DisassemblerInsn "mov" for 0x401d1a>, <DisassemblerInsn "call" for 0x401d1c>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40129d>, <DisassemblerInsn "mov" for 0x4012a4>, <DisassemblerInsn "mov" for 0x4012ac>, <DisassemblerInsn "imul" for 0x4012b4>, <DisassemblerInsn "add" for 0x4012bb>, <DisassemblerInsn "add" for 0x4012be>, <DisassemblerInsn "mov" for 0x4012c4>, <DisassemblerInsn "add" for 0x4012c7>, <DisassemblerInsn "mov" for 0x4012ca>, <DisassemblerInsn "mov" for 0x4012cc>, <DisassemblerInsn "mov" for 0x4012d0>, <DisassemblerInsn "add" for 0x4012d7>, <DisassemblerInsn "mov" for 0x4012de>, <DisassemblerInsn "mov" for 0x4012e6>, <DisassemblerInsn "mov" for 0x4012ee>, <DisassemblerInsn "mov" for 0x4012f6>, <DisassemblerInsn "mov" for 0x4012fe>, <DisassemblerInsn "mov" for 0x401306>, <DisassemblerInsn "mov" for 0x40130a>, <DisassemblerInsn "cmp" for 0x40130e>, <DisassemblerInsn "jne" for 0x401312>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401c81>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401134>, <DisassemblerInsn "mov" for 0x40113b>, <DisassemblerInsn "jmp" for 0x401142>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011a6>, <DisassemblerInsn "mov" for 0x4011ad>, <DisassemblerInsn "mov" for 0x4011b5>, <DisassemblerInsn "mov" for 0x4011bd>, <DisassemblerInsn "mov" for 0x4011c1>, <DisassemblerInsn "mov" for 0x4011c9>, <DisassemblerInsn "mov" for 0x4011cd>, <DisassemblerInsn "mov" for 0x4011d5>, <DisassemblerInsn "mov" for 0x4011d7>, <DisassemblerInsn "xor" for 0x4011df>, <DisassemblerInsn "mov" for 0x4011e1>, <DisassemblerInsn "xor" for 0x4011e3>, <DisassemblerInsn "mov" for 0x4011e5>, <DisassemblerInsn "mov" for 0x4011e8>, <DisassemblerInsn "mov" for 0x4011f0>, <DisassemblerInsn "mov" for 0x4011f2>, <DisassemblerInsn "mov" for 0x4011f9>, <DisassemblerInsn "mov" for 0x4011fb>, <DisassemblerInsn "mov" for 0x401202>, <DisassemblerInsn "mov" for 0x40120a>, <DisassemblerInsn "mov" for 0x40120c>, <DisassemblerInsn "mov" for 0x401213>, <DisassemblerInsn "mov" for 0x40121a>, <DisassemblerInsn "mov" for 0x401222>, <DisassemblerInsn "mov" for 0x40122a>, <DisassemblerInsn "mov" for 0x401231>, <DisassemblerInsn "mov" for 0x401238>, <DisassemblerInsn "mov" for 0x401240>, <DisassemblerInsn "mov" for 0x401248>, <DisassemblerInsn "mov" for 0x401250>, <DisassemblerInsn "mov" for 0x401258>, <DisassemblerInsn "mov" for 0x401260>, <DisassemblerInsn "mov" for 0x401267>, <DisassemblerInsn "mov" for 0x40126e>, <DisassemblerInsn "imul" for 0x401276>, <DisassemblerInsn "add" for 0x40127d>, <DisassemblerInsn "add" for 0x401280>, <DisassemblerInsn "mov" for 0x401287>, <DisassemblerInsn "mov" for 0x401289>, <DisassemblerInsn "cmp" for 0x401290>, <DisassemblerInsn "mov" for 0x401293>, <DisassemblerInsn "jle" for 0x40129b>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401939>, <DisassemblerInsn "cmp" for 0x401941>, <DisassemblerInsn "je" for 0x401945>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401430>, <DisassemblerInsn "mov" for 0x401438>, <DisassemblerInsn "mov" for 0x40143f>, <DisassemblerInsn "mov" for 0x401447>, <DisassemblerInsn "mov" for 0x40144f>, <DisassemblerInsn "mov" for 0x401457>, <DisassemblerInsn "mov" for 0x40145f>, <DisassemblerInsn "mov" for 0x401467>, <DisassemblerInsn "mov" for 0x40146e>, <DisassemblerInsn "mov" for 0x401476>, <DisassemblerInsn "add" for 0x40147e>, <DisassemblerInsn "mov" for 0x401482>, <DisassemblerInsn "cmp" for 0x40148a>, <DisassemblerInsn "sete" for 0x40148d>, <DisassemblerInsn "mov" for 0x401491>, <DisassemblerInsn "xor" for 0x401499>, <DisassemblerInsn "cmp" for 0x40149b>, <DisassemblerInsn "cmove" for 0x40149e>, <DisassemblerInsn "xor" for 0x4014a2>, <DisassemblerInsn "cmp" for 0x4014a4>, <DisassemblerInsn "cmove" for 0x4014a7>, <DisassemblerInsn "xor" for 0x4014ab>, <DisassemblerInsn "cmp" for 0x4014ad>, <DisassemblerInsn "cmove" for 0x4014b0>, <DisassemblerInsn "mov" for 0x4014b3>, <DisassemblerInsn "add" for 0x4014b6>, <DisassemblerInsn "mov" for 0x4014ba>, <DisassemblerInsn "mov" for 0x4014c2>, <DisassemblerInsn "cmp" for 0x4014c5>, <DisassemblerInsn "mov" for 0x4014c7>, <DisassemblerInsn "cmovg" for 0x4014c9>, <DisassemblerInsn "cmp" for 0x4014cc>, <DisassemblerInsn "mov" for 0x4014cf>, <DisassemblerInsn "cmovg" for 0x4014d2>, <DisassemblerInsn "cmp" for 0x4014d5>, <DisassemblerInsn "cmove" for 0x4014d8>, <DisassemblerInsn "mov" for 0x4014dc>, <DisassemblerInsn "cmp" for 0x4014e3>, <DisassemblerInsn "cmove" for 0x4014e6>, <DisassemblerInsn "mov" for 0x4014e9>, <DisassemblerInsn "mov" for 0x4014f0>, <DisassemblerInsn "lea" for 0x4014f8>, <DisassemblerInsn "mov" for 0x4014ff>, <DisassemblerInsn "call" for 0x401501>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401ca9>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c5e>, <DisassemblerInsn "mov" for 0x401c62>, <DisassemblerInsn "mov" for 0x401c67>, <DisassemblerInsn "mov" for 0x401c6c>, <DisassemblerInsn "mov" for 0x401c71>, <DisassemblerInsn "mov" for 0x401c74>, <DisassemblerInsn "mov" for 0x401c78>, <DisassemblerInsn "test" for 0x401c7d>, <DisassemblerInsn "jne" for 0x401c7f>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401cf5>, <DisassemblerInsn "lea" for 0x401cfd>, <DisassemblerInsn "mov" for 0x401d04>, <DisassemblerInsn "call" for 0x401d06>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a40>, <DisassemblerInsn "mov" for 0x401a48>, <DisassemblerInsn "mov" for 0x401a4f>, <DisassemblerInsn "mov" for 0x401a57>, <DisassemblerInsn "mov" for 0x401a5f>, <DisassemblerInsn "mov" for 0x401a67>, <DisassemblerInsn "imul" for 0x401a6b>, <DisassemblerInsn "mov" for 0x401a72>, <DisassemblerInsn "add" for 0x401a75>, <DisassemblerInsn "add" for 0x401a78>, <DisassemblerInsn "mov" for 0x401a7f>, <DisassemblerInsn "mov" for 0x401a82>, <DisassemblerInsn "mov" for 0x401a89>, <DisassemblerInsn "imul" for 0x401a90>, <DisassemblerInsn "mov" for 0x401a97>, <DisassemblerInsn "add" for 0x401a9a>, <DisassemblerInsn "add" for 0x401a9d>, <DisassemblerInsn "mov" for 0x401aa4>, <DisassemblerInsn "imul" for 0x401aa7>, <DisassemblerInsn "mov" for 0x401aae>, <DisassemblerInsn "add" for 0x401ab1>, <DisassemblerInsn "add" for 0x401ab4>, <DisassemblerInsn "mov" for 0x401abb>, <DisassemblerInsn "imul" for 0x401abe>, <DisassemblerInsn "add" for 0x401ac5>, <DisassemblerInsn "add" for 0x401ac8>, <DisassemblerInsn "mov" for 0x401ace>, <DisassemblerInsn "lea" for 0x401ad1>, <DisassemblerInsn "mov" for 0x401ad8>, <DisassemblerInsn "mov" for 0x401adb>, <DisassemblerInsn "mov" for 0x401ae0>, <DisassemblerInsn "mov" for 0x401ae5>, <DisassemblerInsn "mov" for 0x401aea>, <DisassemblerInsn "call" for 0x401aec>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401534>, <DisassemblerInsn "lea" for 0x40153c>, <DisassemblerInsn "mov" for 0x401543>, <DisassemblerInsn "call" for 0x401545>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401105>, <DisassemblerInsn "cmp" for 0x40110c>, <DisassemblerInsn "jge" for 0x40110f>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40155c>, <DisassemblerInsn "mov" for 0x401563>, <DisassemblerInsn "mov" for 0x40156a>, <DisassemblerInsn "lea" for 0x401572>, <DisassemblerInsn "mov" for 0x401579>, <DisassemblerInsn "call" for 0x40157b>]'}], 'cfg_block_detailed_info': [{'block_Idx': 47, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x660]>', '<call~~0x5000d0>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x128]>', '<mov~~edi, dword ptr [rsp + 0x11c]>', '<mov~~sil, byte ptr [rsp + 0x19f]>', '<mov~~rdx, qword ptr [rsp + 0x100]>', '<mov~~r8, qword ptr [rsp + 0x108]>', '<mov~~rax, qword ptr [rsp + 0x240]>', '<mov~~eax, dword ptr [rax + 0x10]>', '<imul~~r8, r8, 0x8480>', '<add~~rdx, r8>', '<add~~rdx, 0x8460>', '<mov~~qword ptr [rsp + 0xf0], rdx>', '<xor~~edx, edx>', '<test~~sil, 1>', '<cmovne~~edx, eax>', '<mov~~dword ptr [rsp + 0xf8], edx>', '<mov~~eax, edi>', '<add~~eax, edx>', '<mov~~esi, ecx>', '<sub~~esi, eax>', '<xor~~eax, eax>', '<cmp~~esi, 0>', '<cmovg~~eax, esi>', '<xor~~esi, esi>', '<cmp~~edi, 0>', '<cmove~~eax, esi>', '<mov~~dword ptr [rsp + 0xfc], eax>', '<sub~~ecx, edx>', '<cmp~~eax, ecx>', '<jge~~0x401923>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0xf8]>', '<mov~~rcx, qword ptr [rsp + 0x120]>', '<mov~~rax, qword ptr [rsp + 0xd0]>', '<add~~rax, 1>', '<mov~~ecx, dword ptr [rcx]>', '<sub~~ecx, edx>', '<mov~~edx, eax>', '<cmp~~ecx, edx>', '<mov~~qword ptr [rsp + 0xe8], rax>', '<jg~~0x401865>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1c4]>', '<mov~~ecx, dword ptr [rsp + 0x1d4]>', '<mov~~esi, dword ptr [rsp + 0x1b8]>', '<mov~~edx, dword ptr [rsp + 0x1bc]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp + 0x1a0], esi>', '<mov~~dword ptr [rsp + 0x1a4], edx>', '<mov~~dword ptr [rsp + 0x1a8], ecx>', '<mov~~dword ptr [rsp + 0x1ac], eax>', '<mov~~rdx, qword ptr [rsp + 0x1b0]>', '<mov~~r9, qword ptr [rsp + 0x1f0]>', '<mov~~r8, qword ptr [rsp + 0x1c8]>', '<mov~~edi, dword ptr [rsp + 0x1a0]>', '<mov~~esi, dword ptr [rsp + 0x1a4]>', '<mov~~ecx, dword ptr [rsp + 0x1a8]>', '<mov~~eax, dword ptr [rsp + 0x1ac]>', '<add~~r8, 1>', '<cmp~~r8, r9>', '<mov~~qword ptr [rsp + 0x1f8], r8>', '<mov~~r8d, eax>', '<mov~~dword ptr [rsp + 0x200], r8d>', '<mov~~r8d, ecx>', '<mov~~dword ptr [rsp + 0x204], r8d>', '<mov~~r8, rdx>', '<mov~~qword ptr [rsp + 0x208], r8>', '<mov~~r8d, esi>', '<mov~~dword ptr [rsp + 0x214], r8d>', '<mov~~r8d, edi>', '<mov~~dword ptr [rsp + 0x218], r8d>', '<mov~~dword ptr [rsp + 0x220], edi>', '<mov~~dword ptr [rsp + 0x224], esi>', '<mov~~qword ptr [rsp + 0x228], rdx>', '<mov~~dword ptr [rsp + 0x230], ecx>', '<mov~~dword ptr [rsp + 0x234], eax>', '<jne~~0x40121a>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x248]>', '<mov~~rcx, qword ptr [rsp + 0x240]>', '<add~~rcx, 0x20>', '<mov~~qword ptr [rsp + 0x150], rcx>', '<add~~rax, 0x30>', '<mov~~qword ptr [rsp + 0x158], rax>', '<xor~~eax, eax>', '<mov~~edx, eax>', '<xor~~ecx, ecx>', '<mov~~eax, 0xffffffff>', '<mov~~qword ptr [rsp + 0x160], rdx>', '<mov~~dword ptr [rsp + 0x16c], ecx>', '<mov~~dword ptr [rsp + 0x170], eax>', '<mov~~rdx, qword ptr [rsp + 0x158]>', '<mov~~rdi, qword ptr [rsp + 0x150]>', '<mov~~rsi, qword ptr [rsp + 0x160]>', '<mov~~eax, dword ptr [rsp + 0x16c]>', '<mov~~ecx, dword ptr [rsp + 0x170]>', '<mov~~dword ptr [rsp + 0x12c], eax>', '<mov~~qword ptr [rsp + 0x130], rsi>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~qword ptr [rsp + 0x138], rdi>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdx, qword ptr [rdx + rsi*8]>', '<mov~~rdx, qword ptr [rdx + 8]>', '<mov~~qword ptr [rsp + 0x140], rdx>', '<cmp~~dword ptr [rdx + 0xc], 0>', '<mov~~dword ptr [rsp + 0x148], ecx>', '<mov~~dword ptr [rsp + 0x14c], eax>', '<jne~~0x4016eb>']}, {'block_Idx': 0, 'blockInsts': ['<push~~r14>', '<push~~rbx>', '<sub~~rsp, 0x668>', '<mov~~dword ptr [rsp + 0x23c], esi>', '<mov~~rcx, rdi>', '<mov~~qword ptr [rsp + 0x248], rcx>', '<mov~~rax, qword ptr [rcx + 0x18]>', '<mov~~qword ptr [rsp + 0x240], rax>', '<lea~~rax, [rsp + 0x660]>', '<lea~~rdi, [rsp + 0x260]>', '<mov~~qword ptr [rsp + 0x250], rdi>', '<add~~rcx, 0x38>', '<mov~~esi, 0x400>', '<lea~~rdx, [rip + 0x25cd]>', '<mov~~al, 0>', '<call~~0x500020>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x68]>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~rdx, qword ptr [rax + 0x800]>', '<mov~~rcx, qword ptr [rax + 0x808]>', '<lea~~rsi, [rip + 0x1cf6]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 53, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xfc]>', '<mov~~cl, byte ptr [rsp + 0x19f]>', '<mov~~rdx, qword ptr [rsp + 0xf0]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~edx, dword ptr [rdx + 0x810]>', '<test~~edx, edx>', '<setg~~dl>', '<or~~cl, dl>', '<mov~~byte ptr [rsp + 0xe7], cl>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0xe8], rax>', '<mov~~al, byte ptr [rsp + 0xe7]>', '<mov~~rcx, qword ptr [rsp + 0xf0]>', '<mov~~rdx, qword ptr [rsp + 0xe8]>', '<mov~~qword ptr [rsp + 0xd0], rdx>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~rcx, qword ptr [rcx + rdx*8]>', '<mov~~qword ptr [rsp + 0xd8], rcx>', '<test~~al, 1>', '<jne~~0x401899>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x158]>', '<mov~~rdi, qword ptr [rsp + 0x150]>', '<mov~~rsi, qword ptr [rsp + 0x160]>', '<mov~~eax, dword ptr [rsp + 0x16c]>', '<mov~~ecx, dword ptr [rsp + 0x170]>', '<mov~~dword ptr [rsp + 0x12c], eax>', '<mov~~qword ptr [rsp + 0x130], rsi>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~qword ptr [rsp + 0x138], rdi>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdx, qword ptr [rdx + rsi*8]>', '<mov~~rdx, qword ptr [rdx + 8]>', '<mov~~qword ptr [rsp + 0x140], rdx>', '<cmp~~dword ptr [rdx + 0xc], 0>', '<mov~~dword ptr [rsp + 0x148], ecx>', '<mov~~dword ptr [rsp + 0x14c], eax>', '<jne~~0x4016eb>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x660]>', '<lea~~rsi, [rip + 0x2572]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x180]>', '<mov~~eax, 0xffffffff>', '<cmp~~dword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0xcc], eax>', '<je~~0x401b5d>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x180]>', '<mov~~eax, 0xffffffff>', '<cmp~~dword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0x174], eax>', '<je~~0x401737>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x240]>', '<mov~~rdi, qword ptr [rsp + 0x660]>', '<mov~~edx, dword ptr [rax + 0x10]>', '<lea~~rsi, [rip + 0x220a]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 70, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x68]>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~edx, dword ptr [rax + 0x810]>', '<mov~~rcx, qword ptr [rax + 0x808]>', '<lea~~rsi, [rip + 0x1ce6]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x660]>', '<call~~0x500058>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x110]>', '<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~edx, dword ptr [rax + 0x810]>', '<mov~~rcx, qword ptr [rax + 0x808]>', '<lea~~rsi, [rip + 0x20c4]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x180]>', '<mov~~rdx, qword ptr [rsp + 0x88]>', '<mov~~eax, dword ptr [rsp + 0xa0]>', '<mov~~ecx, dword ptr [rsp + 0xa4]>', '<add~~rdx, 1>', '<mov~~esi, dword ptr [rsi]>', '<cmp~~rdx, rsi>', '<mov~~qword ptr [rsp + 0xb8], rdx>', '<mov~~dword ptr [rsp + 0xc4], ecx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0xc8], ecx>', '<mov~~dword ptr [rsp + 0xcc], eax>', '<jb~~0x4019d5>']}, {'block_Idx': 64, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x238], eax>', '<mov~~eax, dword ptr [rsp + 0x238]>', '<add~~rsp, 0x668>', '<pop~~rbx>', '<pop~~r14>', '<ret~~>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~cl, byte ptr [rsp + 0x19f]>', '<mov~~rdx, qword ptr [rsp + 0x48]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~edx, dword ptr [rdx + 0x810]>', '<test~~edx, edx>', '<setg~~dl>', '<or~~cl, dl>', '<mov~~byte ptr [rsp + 0x3f], cl>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x40], rax>', '<mov~~al, byte ptr [rsp + 0x3f]>', '<mov~~rcx, qword ptr [rsp + 0x48]>', '<mov~~rdx, qword ptr [rsp + 0x40]>', '<mov~~qword ptr [rsp + 0x28], rdx>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~rcx, qword ptr [rcx + rdx*8]>', '<mov~~qword ptr [rsp + 0x30], rcx>', '<test~~al, 1>', '<jne~~0x401c83>']}, {'block_Idx': 63, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x130]>', '<mov~~eax, dword ptr [rsp + 0x12c]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x148], ecx>', '<mov~~dword ptr [rsp + 0x14c], eax>', '<mov~~rsi, qword ptr [rsp + 0x180]>', '<mov~~rdx, qword ptr [rsp + 0x130]>', '<mov~~eax, dword ptr [rsp + 0x148]>', '<mov~~ecx, dword ptr [rsp + 0x14c]>', '<add~~rdx, 1>', '<mov~~esi, dword ptr [rsi]>', '<cmp~~rdx, rsi>', '<mov~~qword ptr [rsp + 0x160], rdx>', '<mov~~dword ptr [rsp + 0x16c], ecx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x170], ecx>', '<mov~~dword ptr [rsp + 0x174], eax>', '<jb~~0x4015e6>']}, {'block_Idx': 61, 'blockInsts': ['<jmp~~0x4018c7>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x238]>', '<add~~rsp, 0x668>', '<pop~~rbx>', '<pop~~r14>', '<ret~~>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x19f]>', '<test~~al, 1>', '<jne~~0x401513>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xb0]>', '<mov~~rdi, qword ptr [rsp + 0xa8]>', '<mov~~rsi, qword ptr [rsp + 0xb8]>', '<mov~~eax, dword ptr [rsp + 0xc4]>', '<mov~~ecx, dword ptr [rsp + 0xc8]>', '<mov~~dword ptr [rsp + 0x84], eax>', '<mov~~qword ptr [rsp + 0x88], rsi>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~qword ptr [rsp + 0x90], rdi>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdx, qword ptr [rdx + rsi*8]>', '<mov~~rdx, qword ptr [rdx + 8]>', '<mov~~qword ptr [rsp + 0x98], rdx>', '<cmp~~dword ptr [rdx + 0xc], 1>', '<mov~~dword ptr [rsp + 0xa0], ecx>', '<mov~~dword ptr [rsp + 0xa4], eax>', '<jne~~0x401b11>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x240]>', '<cmp~~dword ptr [rax + 0x28], 0>', '<je~~0x401939>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x248]>', '<mov~~edx, dword ptr [rax + 0x2c]>', '<mov~~dword ptr [rsp + 0x21c], edx>', '<xor~~eax, eax>', '<xor~~ecx, ecx>', '<cmp~~edx, 0>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x220], edx>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x224], edx>', '<mov~~qword ptr [rsp + 0x228], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x230], ecx>', '<mov~~dword ptr [rsp + 0x234], eax>', '<je~~0x401430>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0xe7]>', '<mov~~rcx, qword ptr [rsp + 0xf0]>', '<mov~~rdx, qword ptr [rsp + 0xe8]>', '<mov~~qword ptr [rsp + 0xd0], rdx>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~rcx, qword ptr [rcx + rdx*8]>', '<mov~~qword ptr [rsp + 0xd8], rcx>', '<test~~al, 1>', '<jne~~0x401899>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x188]>', '<mov~~rax, qword ptr [rsp + 0x240]>', '<mov~~ecx, dword ptr [rsp + 0xcc]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<mov~~qword ptr [rsp + 0x58], rax>', '<movsxd~~rcx, ecx>', '<mov~~qword ptr [rsp + 0x60], rcx>', '<mov~~rsi, qword ptr [rsp + 0x660]>', '<mov~~qword ptr [rsp + 0x68], rsi>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0x74], edx>', '<imul~~rcx, rcx, 0x8480>', '<add~~rax, rcx>', '<add~~rax, 0x8450>', '<mov~~qword ptr [rsp + 0x78], rax>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x80], eax>', '<cmp~~eax, 1>', '<jl~~0x401cf5>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x130]>', '<mov~~edx, dword ptr [rsp + 0x12c]>', '<mov~~rax, qword ptr [rsp + 0x138]>', '<mov~~r10, qword ptr [rsp + 0x140]>', '<mov~~rdi, qword ptr [rsp + 0x660]>', '<mov~~ecx, dword ptr [r10 + 0x60]>', '<imul~~r9, rsi, 0x8480>', '<mov~~r8, rax>', '<add~~r8, r9>', '<add~~r8, 0x8468>', '<mov~~r8, qword ptr [r8]>', '<mov~~r9d, dword ptr [r10 + 0x94]>', '<mov~~r10d, dword ptr [r10 + 0x98]>', '<imul~~rsi, rsi, 0x8480>', '<add~~rax, rsi>', '<add~~rax, 0x8470>', '<mov~~rax, qword ptr [rax]>', '<lea~~rsi, [rip + 0x2136]>', '<mov~~dword ptr [rsp], r10d>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x250]>', '<mov~~rdi, qword ptr [rsp + 0x248]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x257c]>', '<mov~~al, 0>', '<call~~0x500018>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x1b0]>', '<mov~~r9, qword ptr [rsp + 0x1f0]>', '<mov~~r8, qword ptr [rsp + 0x1c8]>', '<mov~~edi, dword ptr [rsp + 0x1a0]>', '<mov~~esi, dword ptr [rsp + 0x1a4]>', '<mov~~ecx, dword ptr [rsp + 0x1a8]>', '<mov~~eax, dword ptr [rsp + 0x1ac]>', '<add~~r8, 1>', '<cmp~~r8, r9>', '<mov~~qword ptr [rsp + 0x1f8], r8>', '<mov~~r8d, eax>', '<mov~~dword ptr [rsp + 0x200], r8d>', '<mov~~r8d, ecx>', '<mov~~dword ptr [rsp + 0x204], r8d>', '<mov~~r8, rdx>', '<mov~~qword ptr [rsp + 0x208], r8>', '<mov~~r8d, esi>', '<mov~~dword ptr [rsp + 0x214], r8d>', '<mov~~r8d, edi>', '<mov~~dword ptr [rsp + 0x218], r8d>', '<mov~~dword ptr [rsp + 0x220], edi>', '<mov~~dword ptr [rsp + 0x224], esi>', '<mov~~qword ptr [rsp + 0x228], rdx>', '<mov~~dword ptr [rsp + 0x230], ecx>', '<mov~~dword ptr [rsp + 0x234], eax>', '<jne~~0x40121a>']}, {'block_Idx': 77, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x50]>', '<mov~~rcx, qword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<add~~rax, 1>', '<mov~~ecx, dword ptr [rcx]>', '<sub~~ecx, edx>', '<mov~~edx, eax>', '<cmp~~ecx, edx>', '<mov~~qword ptr [rsp + 0x40], rax>', '<jg~~0x401c5e>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x180]>', '<mov~~rdx, qword ptr [rsp + 0x130]>', '<mov~~eax, dword ptr [rsp + 0x148]>', '<mov~~ecx, dword ptr [rsp + 0x14c]>', '<add~~rdx, 1>', '<mov~~esi, dword ptr [rsi]>', '<cmp~~rdx, rsi>', '<mov~~qword ptr [rsp + 0x160], rdx>', '<mov~~dword ptr [rsp + 0x16c], ecx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x170], ecx>', '<mov~~dword ptr [rsp + 0x174], eax>', '<jb~~0x4015e6>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1e8]>', '<mov~~rcx, qword ptr [rsp + 0x1c8]>', '<mov~~rdx, qword ptr [rsp + 0x1d8]>', '<mov~~qword ptr [rsp + 0x1b0], rdx>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0xc], 0>', '<jne~~0x401351>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x188]>', '<mov~~rax, qword ptr [rsp + 0x240]>', '<mov~~ecx, dword ptr [rsp + 0x174]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<mov~~qword ptr [rsp + 0x100], rax>', '<movsxd~~rcx, ecx>', '<mov~~qword ptr [rsp + 0x108], rcx>', '<mov~~rsi, qword ptr [rsp + 0x660]>', '<mov~~qword ptr [rsp + 0x110], rsi>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0x11c], edx>', '<imul~~rcx, rcx, 0x8480>', '<add~~rax, rcx>', '<add~~rax, 0x8450>', '<mov~~qword ptr [rsp + 0x120], rax>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x128], eax>', '<cmp~~eax, 1>', '<jl~~0x401923>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x248]>', '<mov~~rsi, qword ptr [rsp + 0x250]>', '<add~~rcx, 0x4b0>', '<lea~~rdi, [rsp + 0x660]>', '<mov~~edx, 2>', '<xor~~eax, eax>', '<mov~~r8d, eax>', '<call~~0x5000c0>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x194]>', '<mov~~edx, dword ptr [rsp + 0x178]>', '<mov~~rdi, qword ptr [rsp + 0x660]>', '<lea~~rsi, [rip + 0x1f02]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x110]>', '<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~rdx, qword ptr [rax + 0x800]>', '<mov~~rcx, qword ptr [rax + 0x808]>', '<lea~~rsi, [rip + 0x20da]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 20, 'blockInsts': ['<jmp~~0x401534>']}, {'block_Idx': 42, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x248]>', '<mov~~rcx, qword ptr [rsp + 0x240]>', '<add~~rcx, 0x20>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<add~~rax, 0x30>', '<mov~~qword ptr [rsp + 0xb0], rax>', '<xor~~eax, eax>', '<mov~~edx, eax>', '<xor~~ecx, ecx>', '<mov~~eax, 0xffffffff>', '<mov~~qword ptr [rsp + 0xb8], rdx>', '<mov~~dword ptr [rsp + 0xc4], ecx>', '<mov~~dword ptr [rsp + 0xc8], eax>', '<mov~~rdx, qword ptr [rsp + 0xb0]>', '<mov~~rdi, qword ptr [rsp + 0xa8]>', '<mov~~rsi, qword ptr [rsp + 0xb8]>', '<mov~~eax, dword ptr [rsp + 0xc4]>', '<mov~~ecx, dword ptr [rsp + 0xc8]>', '<mov~~dword ptr [rsp + 0x84], eax>', '<mov~~qword ptr [rsp + 0x88], rsi>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~qword ptr [rsp + 0x90], rdi>', '<mov~~rdx, qword ptr [rdx]>', '<mov~~rdx, qword ptr [rdx + rsi*8]>', '<mov~~rdx, qword ptr [rdx + 8]>', '<mov~~qword ptr [rsp + 0x98], rdx>', '<cmp~~dword ptr [rdx + 0xc], 1>', '<mov~~dword ptr [rsp + 0xa0], ecx>', '<mov~~dword ptr [rsp + 0xa4], eax>', '<jne~~0x401b11>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x660]>', '<lea~~rsi, [rip + 0x1f28]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x88]>', '<mov~~eax, dword ptr [rsp + 0x84]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0xa0], ecx>', '<mov~~dword ptr [rsp + 0xa4], eax>', '<mov~~rsi, qword ptr [rsp + 0x180]>', '<mov~~rdx, qword ptr [rsp + 0x88]>', '<mov~~eax, dword ptr [rsp + 0xa0]>', '<mov~~ecx, dword ptr [rsp + 0xa4]>', '<add~~rdx, 1>', '<mov~~esi, dword ptr [rsi]>', '<cmp~~rdx, rsi>', '<mov~~qword ptr [rsp + 0xb8], rdx>', '<mov~~dword ptr [rsp + 0xc4], ecx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0xc8], ecx>', '<mov~~dword ptr [rsp + 0xcc], eax>', '<jb~~0x4019d5>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x80]>', '<mov~~edi, dword ptr [rsp + 0x74]>', '<mov~~sil, byte ptr [rsp + 0x19f]>', '<mov~~rdx, qword ptr [rsp + 0x58]>', '<mov~~r8, qword ptr [rsp + 0x60]>', '<mov~~rax, qword ptr [rsp + 0x240]>', '<mov~~eax, dword ptr [rax + 0x10]>', '<imul~~r8, r8, 0x8480>', '<add~~rdx, r8>', '<add~~rdx, 0x8460>', '<mov~~qword ptr [rsp + 0x48], rdx>', '<xor~~edx, edx>', '<test~~sil, 1>', '<cmovne~~edx, eax>', '<mov~~dword ptr [rsp + 0x50], edx>', '<mov~~eax, edi>', '<add~~eax, edx>', '<mov~~esi, ecx>', '<sub~~esi, eax>', '<xor~~eax, eax>', '<cmp~~esi, 0>', '<cmovg~~eax, esi>', '<xor~~esi, esi>', '<cmp~~edi, 0>', '<cmove~~eax, esi>', '<mov~~dword ptr [rsp + 0x54], eax>', '<sub~~ecx, edx>', '<cmp~~eax, ecx>', '<jge~~0x401cf5>']}, {'block_Idx': 73, 'blockInsts': ['<jmp~~0x4018f2>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x660]>', '<lea~~rsi, [rip + 0x1c65]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x1d4]>', '<mov~~rax, qword ptr [rsp + 0x1e0]>', '<mov~~rdx, qword ptr [rsp + 0x1c8]>', '<imul~~rdx, rdx, 0x8480>', '<add~~rax, rdx>', '<add~~rax, 0x8460>', '<mov~~rax, qword ptr [rax]>', '<add~~ecx, -1>', '<mov~~ecx, ecx>', '<mov~~rcx, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rcx + 0x800]>', '<add~~rax, qword ptr [rcx + 0x808]>', '<mov~~qword ptr [rsp + 0x1d8], rax>', '<mov~~rax, qword ptr [rsp + 0x1e8]>', '<mov~~rcx, qword ptr [rsp + 0x1c8]>', '<mov~~rdx, qword ptr [rsp + 0x1d8]>', '<mov~~qword ptr [rsp + 0x1b0], rdx>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0xc], 0>', '<jne~~0x401351>']}, {'block_Idx': 65, 'blockInsts': ['<jmp~~0x401cab>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x25c]>', '<mov~~dword ptr [rsp + 0x238], eax>', '<jmp~~0x401d44>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x21c]>', '<mov~~rcx, qword ptr [rsp + 0x248]>', '<mov~~rdx, qword ptr [rsp + 0x240]>', '<mov~~rdx, qword ptr [rdx + 0x20]>', '<mov~~qword ptr [rsp + 0x1e0], rdx>', '<mov~~rcx, qword ptr [rcx + 0x30]>', '<mov~~qword ptr [rsp + 0x1e8], rcx>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x1f0], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~rdx, rcx>', '<mov~~qword ptr [rsp + 0x1f8], rdx>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x200], edx>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x204], edx>', '<mov~~qword ptr [rsp + 0x208], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x214], ecx>', '<mov~~dword ptr [rsp + 0x218], eax>', '<mov~~rcx, qword ptr [rsp + 0x1e0]>', '<mov~~rdx, qword ptr [rsp + 0x1f8]>', '<mov~~esi, dword ptr [rsp + 0x200]>', '<mov~~edi, dword ptr [rsp + 0x204]>', '<mov~~rax, qword ptr [rsp + 0x208]>', '<mov~~r8d, dword ptr [rsp + 0x214]>', '<mov~~r9d, dword ptr [rsp + 0x218]>', '<mov~~dword ptr [rsp + 0x1b8], r9d>', '<mov~~dword ptr [rsp + 0x1bc], r8d>', '<mov~~dword ptr [rsp + 0x1c0], edi>', '<mov~~dword ptr [rsp + 0x1c4], esi>', '<mov~~qword ptr [rsp + 0x1c8], rdx>', '<imul~~rdx, rdx, 0x8480>', '<add~~rcx, rdx>', '<add~~rcx, 0x8450>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x1d4], ecx>', '<cmp~~ecx, 0>', '<mov~~qword ptr [rsp + 0x1d8], rax>', '<jle~~0x4012e6>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x240]>', '<cmp~~dword ptr [rax + 0x2c], 0>', '<je~~0x401d0b>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x240]>', '<mov~~edi, dword ptr [rsp + 0x23c]>', '<mov~~rsi, qword ptr [rsp + 0x248]>', '<mov~~r9d, dword ptr [rsp + 0x220]>', '<mov~~r10d, dword ptr [rsp + 0x224]>', '<mov~~rdx, qword ptr [rsp + 0x228]>', '<mov~~r8d, dword ptr [rsp + 0x230]>', '<mov~~ecx, dword ptr [rsp + 0x234]>', '<mov~~dword ptr [rsp + 0x178], r10d>', '<mov~~dword ptr [rsp + 0x17c], r9d>', '<add~~rsi, 0x2c>', '<mov~~qword ptr [rsp + 0x180], rsi>', '<cmp~~edi, 0>', '<sete~~sil>', '<mov~~byte ptr [rsp + 0x19f], sil>', '<xor~~esi, esi>', '<cmp~~edi, 0>', '<cmove~~rdx, rsi>', '<xor~~esi, esi>', '<cmp~~edi, 0>', '<cmove~~r8d, esi>', '<xor~~esi, esi>', '<cmp~~edi, 0>', '<cmove~~ecx, esi>', '<mov~~rsi, rax>', '<add~~rsi, 8>', '<mov~~qword ptr [rsp + 0x188], rsi>', '<mov~~esi, dword ptr [rax + 8]>', '<cmp~~ecx, esi>', '<mov~~eax, ecx>', '<cmovg~~eax, esi>', '<cmp~~r8d, esi>', '<mov~~edi, r8d>', '<cmovg~~edi, esi>', '<cmp~~esi, 0>', '<cmove~~edi, r8d>', '<mov~~dword ptr [rsp + 0x194], edi>', '<cmp~~esi, 0>', '<cmove~~eax, ecx>', '<mov~~dword ptr [rsp + 0x198], eax>', '<mov~~rdi, qword ptr [rsp + 0x660]>', '<lea~~rsi, [rip + 0x21f1]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 75, 'blockInsts': ['<jmp~~0x401cd0>']}, {'block_Idx': 79, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x3f]>', '<mov~~rcx, qword ptr [rsp + 0x48]>', '<mov~~rdx, qword ptr [rsp + 0x40]>', '<mov~~qword ptr [rsp + 0x28], rdx>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~rcx, qword ptr [rcx + rdx*8]>', '<mov~~qword ptr [rsp + 0x30], rcx>', '<test~~al, 1>', '<jne~~0x401c83>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x660]>', '<lea~~rsi, [rip + 0x1b56]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~edx, dword ptr [rsp + 0x84]>', '<mov~~rax, qword ptr [rsp + 0x90]>', '<mov~~r10, qword ptr [rsp + 0x98]>', '<mov~~rdi, qword ptr [rsp + 0x660]>', '<mov~~ecx, dword ptr [r10 + 0x60]>', '<imul~~r9, rsi, 0x8480>', '<mov~~r8, rax>', '<add~~r8, r9>', '<add~~r8, 0x8468>', '<mov~~r8, qword ptr [r8]>', '<mov~~r9d, dword ptr [r10 + 0x1d0]>', '<mov~~ebx, dword ptr [r10 + 0x1d4]>', '<imul~~r11, rsi, 0x8480>', '<mov~~r10, rax>', '<add~~r10, r11>', '<add~~r10, 0x8478>', '<mov~~r11d, dword ptr [r10]>', '<imul~~r14, rsi, 0x8480>', '<mov~~r10, rax>', '<add~~r10, r14>', '<add~~r10, 0x847c>', '<mov~~r10d, dword ptr [r10]>', '<imul~~rsi, rsi, 0x8480>', '<add~~rax, rsi>', '<add~~rax, 0x8470>', '<mov~~rax, qword ptr [rax]>', '<lea~~rsi, [rip + 0x1e0a]>', '<mov~~dword ptr [rsp], ebx>', '<mov~~dword ptr [rsp + 8], r11d>', '<mov~~dword ptr [rsp + 0x10], r10d>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x660]>', '<lea~~rsi, [rip + 0x2233]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~dword ptr [rsp + 0x25c], eax>', '<cmp~~eax, 0>', '<jge~~0x401147>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x198]>', '<mov~~edx, dword ptr [rsp + 0x17c]>', '<mov~~rdi, qword ptr [rsp + 0x660]>', '<lea~~rsi, [rip + 0x2200]>', '<mov~~al, 0>', '<call~~0x5000c8>']}], 'cfg_edge_info': [(24, 27), (78, 62), (41, 49), (48, 30), (58, 65), (60, 50), (76, 43), (4, 6), (35, 39), (42, 51), (29, 35), (50, 67), (0, 2), (38, 44), (17, 21), (39, 45), (19, 12), (9, 11), (28, 30), (10, 12), (27, 28), (79, 66), (37, 42), (63, 55), (30, 36), (53, 62), (78, 61), (4, 5), (35, 38), (42, 50), (47, 64), (46, 38), (21, 24), (41, 48), (5, 9), (44, 53), (38, 43), (31, 37), (2, 4), (75, 77), (79, 65), (17, 20), (49, 58), (55, 46), (13, 16), (76, 78), (37, 41), (68, 76), (53, 61), (6, 10), (45, 63), (60, 51), (67, 60), (73, 76), (44, 43), (22, 12), (58, 66), (77, 79), (12, 17), (20, 24), (70, 77), (51, 60), (63, 38), (39, 46), (49, 48), (46, 55), (10, 13), (28, 31), (27, 29), (77, 48), (67, 41), (55, 45), (13, 15), (36, 47), (43, 28), (51, 41)], 'cdg_edge_info': [(60, 50), (4, 64), (41, 49), (4, 9), (4, 6), (4, 12), (35, 39), (38, 44), (4, 24), (17, 21), (39, 45), (4, 27), (4, 30), (4, 36), (37, 42), (76, 76), (27, 43), (27, 35), (49, 77), (28, 48), (42, 50), (4, 5), (77, 77), (4, 11), (44, 53), (4, 17), (17, 20), (49, 58), (76, 78), (4, 47), (28, 41), (77, 79), (4, 10), (4, 28), (10, 13), (44, 76), (28, 31), (27, 29), (55, 45), (28, 37), (27, 38)], 'ddg_edge_info': [(41, 49), (4, 9), (53, 78), (38, 44), (0, 5), (6, 48), (43, 30), (47, 64), (0, 44), (29, 43), (2, 4), (6, 41), (6, 50), (31, 49), (31, 58), (6, 13), (24, 28), (0, 64), (12, 29), (29, 45), (6, 43), (31, 42), (12, 38), (55, 45), (45, 53), (24, 30), (50, 49), (0, 39), (38, 41), (29, 38), (0, 2), (6, 36), (12, 31), (6, 45), (13, 60), (12, 49), (30, 36), (45, 55), (0, 41), (5, 64), (6, 29), (5, 9), (12, 79), (12, 24), (6, 38), (31, 37), (6, 47), (10, 35), (12, 17), (6, 31), (9, 64), (13, 55), (12, 35), (44, 76), (2, 6), (39, 55), (45, 50), (36, 47), (0, 27), (31, 60), (10, 37), (60, 50), (48, 30), (6, 24), (50, 58), (29, 35), (29, 44), (12, 37), (21, 49), (10, 12), (44, 78), (45, 43), (49, 77), (12, 58), (0, 38), (38, 77), (21, 24), (13, 41), (78, 76), (12, 21), (44, 53), (50, 60), (0, 4), (0, 13), (76, 78), (53, 58), (37, 41), (79, 77), (6, 10), (49, 79), (12, 60), (77, 79), (12, 78), (41, 77), (45, 38), (31, 48), (12, 44), (12, 53), (6, 12), (43, 31), (24, 27), (0, 42), (6, 21), (6, 30), (42, 60), (2, 5), (31, 41), (29, 53), (31, 50), (12, 55), (50, 48), (24, 29), (35, 38), (13, 38), (44, 50), (58, 79), (0, 10), (49, 58), (29, 55), (0, 28), (38, 76), (50, 41), (24, 31), (0, 49), (29, 39), (10, 13), (0, 12), (45, 44), (21, 44), (12, 41), (0, 21), (38, 60), (43, 28)]}]}
{'write_manifest': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%r14'}, {'instIndex': 1, 'instruction': 'pushq\t%rbx'}, {'instIndex': 2, 'instruction': 'subq\t$0x668, %rsp                     # imm = 0x0x29c'}, {'instIndex': 3, 'instruction': 'movl\t%esi, 0x23c(%rsp)                 # 4-byte Spill'}, {'instIndex': 4, 'instruction': 'movq\t%rdi, %rcx'}, {'instIndex': 5, 'instruction': 'movq\t%rcx, 0x248(%rsp)                 # 8-byte Spill'}, {'instIndex': 6, 'instruction': 'movq\t0x18(%rcx), %rax'}, {'instIndex': 7, 'instruction': 'movq\t%rax, 0x240(%rsp)                 # 8-byte Spill'}, {'instIndex': 8, 'instruction': 'leaq\t0x660(%rsp), %rax'}, {'instIndex': 9, 'instruction': 'leaq\t0x260(%rsp), %rdi'}, {'instIndex': 10, 'instruction': 'movq\t%rdi, 0x250(%rsp)                 # 8-byte Spill'}, {'instIndex': 11, 'instruction': 'addq\t$0x38, %rcx'}, {'instIndex': 12, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 13, 'instruction': 'leaq\t.L.str.0x20(%rip), %rdx'}, {'instIndex': 14, 'instruction': 'movb\t$0, %al'}, {'instIndex': 15, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 18, 'instruction': 'addq\t$0x4b0, %rcx                     # imm = 0x4B0'}, {'instIndex': 19, 'instruction': 'leaq\t0x660(%rsp), %rdi'}, {'instIndex': 20, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 21, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 22, 'instruction': 'movl\t%eax, %r8d'}, {'instIndex': 23, 'instruction': 'callq\tavio_open2@PLT'}, {'instIndex': 25, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 26, 'instruction': 'jge\t.LBB5_2'}, {'instIndex': 29, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 30, 'instruction': 'leaq\t.L.str.0x21(%rip), %rdx'}, {'instIndex': 31, 'instruction': 'movb\t$0, %al'}, {'instIndex': 32, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 35, 'instruction': 'jmp\t.LBB5_41'}, {'instIndex': 36, 'instruction': 'movq\t0x660(%rsp), %rdi'}, {'instIndex': 37, 'instruction': 'leaq\t.L.str.0x22(%rip), %rsi'}, {'instIndex': 38, 'instruction': 'movb\t$0, %al'}, {'instIndex': 39, 'instruction': 'callq\tavio_printf@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 599, 'instruction': 'movq\t0x660(%rsp), %rdi'}, {'instIndex': 600, 'instruction': 'leaq\t.L.str.0x2b(%rip), %rsi'}, {'instIndex': 601, 'instruction': 'movb\t$0, %al'}, {'instIndex': 602, 'instruction': 'callq\tavio_printf@PLT'}, {'instIndex': 603, 'instruction': 'movq\t0x660(%rsp), %rdi'}, {'instIndex': 604, 'instruction': 'callq\tavio_flush@PLT'}, {'instIndex': 605, 'instruction': 'movq\t0x660(%rsp), %rdi'}, {'instIndex': 606, 'instruction': 'callq\tavio_close@PLT'}, {'instIndex': 610, 'instruction': 'addq\t$0x668, %rsp                     # imm = 0x0x29c'}, {'instIndex': 611, 'instruction': 'popq\t%rbx'}, {'instIndex': 612, 'instruction': 'popq\t%r14'}, {'instIndex': 613, 'instruction': 'retq'}]}]}
The case of compiler clang with optimization O2.
Patched source code file: smoothstreamingenc.c
Patched function: 1---static int write_manifest 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_before/O2/smoothstreamingenc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_before/O2/smoothstreamingenc.s---write_manifest---before
function id: 5
function flag: True
There are 654 instructions for function: write_manifest in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '210', 'end': 224}, 'before': {'start': '210', 'end': 223}}}, {'modifyIndex': 2, 'line': {'after': {'start': '279', 'end': 285}, 'before': {'start': '278', 'end': 283}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%r14'}, {'instIndex': 1, 'instruction': 'pushq\t%rbx'}, {'instIndex': 2, 'instruction': 'subq\t$0x6c8, %rsp                     # imm = 0x6C8'}, {'instIndex': 3, 'instruction': 'movl\t%esi, 0x29c(%rsp)                 # 4-byte Spill'}, {'instIndex': 4, 'instruction': 'movq\t%rdi, %rcx'}, {'instIndex': 5, 'instruction': 'movq\t%rcx, 0x2a8(%rsp)                 # 8-byte Spill'}, {'instIndex': 6, 'instruction': 'movq\t0x18(%rcx), %rax'}, {'instIndex': 7, 'instruction': 'movq\t%rax, 0x2a0(%rsp)                 # 8-byte Spill'}, {'instIndex': 8, 'instruction': 'leaq\t0x6c0(%rsp), %rax'}, {'instIndex': 9, 'instruction': 'leaq\t0x2c0(%rsp), %rdi'}, {'instIndex': 10, 'instruction': 'movq\t%rdi, 0x2b0(%rsp)                 # 8-byte Spill'}, {'instIndex': 11, 'instruction': 'addq\t$0x38, %rcx'}, {'instIndex': 12, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 13, 'instruction': 'leaq\t.L.str.0x20(%rip), %rdx'}, {'instIndex': 14, 'instruction': 'movb\t$0, %al'}, {'instIndex': 15, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 18, 'instruction': 'addq\t$0x4b0, %rcx                     # imm = 0x4B0'}, {'instIndex': 19, 'instruction': 'leaq\t0x6c0(%rsp), %rdi'}, {'instIndex': 20, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 21, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 22, 'instruction': 'movl\t%eax, %r8d'}, {'instIndex': 23, 'instruction': 'callq\tavio_open2@PLT'}, {'instIndex': 25, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 26, 'instruction': 'jge\t.LBB5_2'}, {'instIndex': 29, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 30, 'instruction': 'leaq\t.L.str.0x21(%rip), %rdx'}, {'instIndex': 31, 'instruction': 'movb\t$0, %al'}, {'instIndex': 32, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 35, 'instruction': 'jmp\t.LBB5_45'}, {'instIndex': 36, 'instruction': 'movq\t0x6c0(%rsp), %rdi'}, {'instIndex': 37, 'instruction': 'leaq\t.L.str.0x22(%rip), %rsi'}, {'instIndex': 38, 'instruction': 'movb\t$0, %al'}, {'instIndex': 39, 'instruction': 'callq\tavio_printf@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 639, 'instruction': 'movq\t0x6c0(%rsp), %rdi'}, {'instIndex': 640, 'instruction': 'leaq\t.L.str.0x2b(%rip), %rsi'}, {'instIndex': 641, 'instruction': 'movb\t$0, %al'}, {'instIndex': 642, 'instruction': 'callq\tavio_printf@PLT'}, {'instIndex': 643, 'instruction': 'movq\t0x6c0(%rsp), %rdi'}, {'instIndex': 644, 'instruction': 'callq\tavio_flush@PLT'}, {'instIndex': 645, 'instruction': 'movq\t0x6c0(%rsp), %rdi'}, {'instIndex': 646, 'instruction': 'callq\tavio_close@PLT'}, {'instIndex': 650, 'instruction': 'addq\t$0x6c8, %rsp                     # imm = 0x6C8'}, {'instIndex': 651, 'instruction': 'popq\t%rbx'}, {'instIndex': 652, 'instruction': 'popq\t%r14'}, {'instIndex': 653, 'instruction': 'retq'}]}]
Patched function: 1---static int write_manifest 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_before/O2/smoothstreamingenc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_before/O2/smoothstreamingenc.s---write_manifest---before
function id: 5
function flag: True
There are 654 instructions for function: write_manifest in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '210', 'end': 224}, 'before': {'start': '210', 'end': 223}}}, {'modifyIndex': 2, 'line': {'after': {'start': '279', 'end': 285}, 'before': {'start': '278', 'end': 283}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%r14'}, {'instIndex': 1, 'instruction': 'pushq\t%rbx'}, {'instIndex': 2, 'instruction': 'subq\t$0x6c8, %rsp                     # imm = 0x6C8'}, {'instIndex': 3, 'instruction': 'movl\t%esi, 0x29c(%rsp)                 # 4-byte Spill'}, {'instIndex': 4, 'instruction': 'movq\t%rdi, %rcx'}, {'instIndex': 5, 'instruction': 'movq\t%rcx, 0x2a8(%rsp)                 # 8-byte Spill'}, {'instIndex': 6, 'instruction': 'movq\t0x18(%rcx), %rax'}, {'instIndex': 7, 'instruction': 'movq\t%rax, 0x2a0(%rsp)                 # 8-byte Spill'}, {'instIndex': 8, 'instruction': 'leaq\t0x6c0(%rsp), %rax'}, {'instIndex': 9, 'instruction': 'leaq\t0x2c0(%rsp), %rdi'}, {'instIndex': 10, 'instruction': 'movq\t%rdi, 0x2b0(%rsp)                 # 8-byte Spill'}, {'instIndex': 11, 'instruction': 'addq\t$0x38, %rcx'}, {'instIndex': 12, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 13, 'instruction': 'leaq\t.L.str.0x20(%rip), %rdx'}, {'instIndex': 14, 'instruction': 'movb\t$0, %al'}, {'instIndex': 15, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 18, 'instruction': 'addq\t$0x4b0, %rcx                     # imm = 0x4B0'}, {'instIndex': 19, 'instruction': 'leaq\t0x6c0(%rsp), %rdi'}, {'instIndex': 20, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 21, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 22, 'instruction': 'movl\t%eax, %r8d'}, {'instIndex': 23, 'instruction': 'callq\tavio_open2@PLT'}, {'instIndex': 25, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 26, 'instruction': 'jge\t.LBB5_2'}, {'instIndex': 29, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 30, 'instruction': 'leaq\t.L.str.0x21(%rip), %rdx'}, {'instIndex': 31, 'instruction': 'movb\t$0, %al'}, {'instIndex': 32, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 35, 'instruction': 'jmp\t.LBB5_45'}, {'instIndex': 36, 'instruction': 'movq\t0x6c0(%rsp), %rdi'}, {'instIndex': 37, 'instruction': 'leaq\t.L.str.0x22(%rip), %rsi'}, {'instIndex': 38, 'instruction': 'movb\t$0, %al'}, {'instIndex': 39, 'instruction': 'callq\tavio_printf@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 639, 'instruction': 'movq\t0x6c0(%rsp), %rdi'}, {'instIndex': 640, 'instruction': 'leaq\t.L.str.0x2b(%rip), %rsi'}, {'instIndex': 641, 'instruction': 'movb\t$0, %al'}, {'instIndex': 642, 'instruction': 'callq\tavio_printf@PLT'}, {'instIndex': 643, 'instruction': 'movq\t0x6c0(%rsp), %rdi'}, {'instIndex': 644, 'instruction': 'callq\tavio_flush@PLT'}, {'instIndex': 645, 'instruction': 'movq\t0x6c0(%rsp), %rdi'}, {'instIndex': 646, 'instruction': 'callq\tavio_close@PLT'}, {'instIndex': 650, 'instruction': 'addq\t$0x6c8, %rsp                     # imm = 0x6C8'}, {'instIndex': 651, 'instruction': 'popq\t%rbx'}, {'instIndex': 652, 'instruction': 'popq\t%r14'}, {'instIndex': 653, 'instruction': 'retq'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_before/O2/smoothstreamingenc.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_before/O2/smoothstreamingenc.o---before
The extraction of function: write_manifest
Analyzing the binaries to generate subCFGs from patched function ...
It has 359 nodes and 694 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 654 instructions in binary file.
[4198592, 4198679, 4198725, 4198737, 4198772, 4198791]
[4202080, 4202102, 4202115, 4202128, 4202137]
The execution time of patched subCFG information extraction via angr: 0:00:00.646404
{'write_manifest': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401187>, <DisassemblerInsn "lea" for 0x40118f>, <DisassemblerInsn "mov" for 0x401196>, <DisassemblerInsn "call" for 0x401198>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401174>, <DisassemblerInsn "mov" for 0x40117b>, <DisassemblerInsn "jmp" for 0x401182>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401117>, <DisassemblerInsn "mov" for 0x40111f>, <DisassemblerInsn "add" for 0x401127>, <DisassemblerInsn "lea" for 0x40112e>, <DisassemblerInsn "mov" for 0x401136>, <DisassemblerInsn "xor" for 0x40113b>, <DisassemblerInsn "mov" for 0x40113d>, <DisassemblerInsn "call" for 0x401140>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e99>, <DisassemblerInsn "add" for 0x401ea0>, <DisassemblerInsn "pop" for 0x401ea7>, <DisassemblerInsn "pop" for 0x401ea8>, <DisassemblerInsn "ret" for 0x401eaa>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x4010c0>, <DisassemblerInsn "push" for 0x4010c2>, <DisassemblerInsn "sub" for 0x4010c3>, <DisassemblerInsn "mov" for 0x4010ca>, <DisassemblerInsn "mov" for 0x4010d1>, <DisassemblerInsn "mov" for 0x4010d4>, <DisassemblerInsn "mov" for 0x4010dc>, <DisassemblerInsn "mov" for 0x4010e0>, <DisassemblerInsn "lea" for 0x4010e8>, <DisassemblerInsn "lea" for 0x4010f0>, <DisassemblerInsn "mov" for 0x4010f8>, <DisassemblerInsn "add" for 0x401100>, <DisassemblerInsn "mov" for 0x401104>, <DisassemblerInsn "lea" for 0x401109>, <DisassemblerInsn "mov" for 0x401110>, <DisassemblerInsn "call" for 0x401112>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401145>, <DisassemblerInsn "cmp" for 0x40114c>, <DisassemblerInsn "jge" for 0x40114f>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40119d>, <DisassemblerInsn "mov" for 0x4011a5>, <DisassemblerInsn "add" for 0x4011a8>, <DisassemblerInsn "mov" for 0x4011ac>, <DisassemblerInsn "mov" for 0x4011b4>, <DisassemblerInsn "mov" for 0x4011b7>, <DisassemblerInsn "xor" for 0x4011be>, <DisassemblerInsn "xor" for 0x4011c0>, <DisassemblerInsn "cmp" for 0x4011c2>, <DisassemblerInsn "mov" for 0x4011c5>, <DisassemblerInsn "mov" for 0x4011c7>, <DisassemblerInsn "mov" for 0x4011ce>, <DisassemblerInsn "mov" for 0x4011d0>, <DisassemblerInsn "mov" for 0x4011d7>, <DisassemblerInsn "mov" for 0x4011df>, <DisassemblerInsn "mov" for 0x4011e1>, <DisassemblerInsn "mov" for 0x4011e8>, <DisassemblerInsn "je" for 0x4011ef>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401151>, <DisassemblerInsn "mov" for 0x401159>, <DisassemblerInsn "mov" for 0x401161>, <DisassemblerInsn "lea" for 0x401166>, <DisassemblerInsn "mov" for 0x40116d>, <DisassemblerInsn "call" for 0x40116f>]'}], 'cfg_block_detailed_info': [{'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x6c0]>', '<lea~~rsi, [rip + 0x1ee2]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2bc]>', '<mov~~dword ptr [rsp + 0x298], eax>', '<jmp~~0x401e99>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x2a8]>', '<mov~~rsi, qword ptr [rsp + 0x2b0]>', '<add~~rcx, 0x4b0>', '<lea~~rdi, [rsp + 0x6c0]>', '<mov~~edx, 2>', '<xor~~eax, eax>', '<mov~~r8d, eax>', '<call~~0x5000c0>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x298]>', '<add~~rsp, 0x6c8>', '<pop~~rbx>', '<pop~~r14>', '<ret~~>']}, {'block_Idx': 0, 'blockInsts': ['<push~~r14>', '<push~~rbx>', '<sub~~rsp, 0x6c8>', '<mov~~dword ptr [rsp + 0x29c], esi>', '<mov~~rcx, rdi>', '<mov~~qword ptr [rsp + 0x2a8], rcx>', '<mov~~rax, qword ptr [rcx + 0x18]>', '<mov~~qword ptr [rsp + 0x2a0], rax>', '<lea~~rax, [rsp + 0x6c0]>', '<lea~~rdi, [rsp + 0x2c0]>', '<mov~~qword ptr [rsp + 0x2b0], rdi>', '<add~~rcx, 0x38>', '<mov~~esi, 0x400>', '<lea~~rdx, [rip + 0x1f3d]>', '<mov~~al, 0>', '<call~~0x500020>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2bc], eax>', '<cmp~~eax, 0>', '<jge~~0x401187>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x2a8]>', '<mov~~rcx, rax>', '<add~~rcx, 0x2c>', '<mov~~qword ptr [rsp + 0x270], rcx>', '<mov~~edx, dword ptr [rax + 0x2c]>', '<mov~~dword ptr [rsp + 0x27c], edx>', '<xor~~eax, eax>', '<xor~~ecx, ecx>', '<cmp~~edx, 0>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x280], edx>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x284], edx>', '<mov~~qword ptr [rsp + 0x288], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x290], ecx>', '<mov~~dword ptr [rsp + 0x294], eax>', '<je~~0x40147f>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x2b0]>', '<mov~~rdi, qword ptr [rsp + 0x2a8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x1eec]>', '<mov~~al, 0>', '<call~~0x500018>']}], 'cfg_edge_info': [(0, 1), (2, 4), (1, 2), (4, 6), (5, 7), (2, 3), (3, 5)]}, {'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e60>, <DisassemblerInsn "lea" for 0x401e68>, <DisassemblerInsn "mov" for 0x401e6f>, <DisassemblerInsn "call" for 0x401e71>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e4a>, <DisassemblerInsn "lea" for 0x401e52>, <DisassemblerInsn "mov" for 0x401e59>, <DisassemblerInsn "call" for 0x401e5b>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401174>, <DisassemblerInsn "mov" for 0x40117b>, <DisassemblerInsn "jmp" for 0x401182>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e99>, <DisassemblerInsn "add" for 0x401ea0>, <DisassemblerInsn "pop" for 0x401ea7>, <DisassemblerInsn "pop" for 0x401ea8>, <DisassemblerInsn "ret" for 0x401eaa>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e3a>, <DisassemblerInsn "mov" for 0x401e42>, <DisassemblerInsn "mov" for 0x401e4a>, <DisassemblerInsn "lea" for 0x401e52>, <DisassemblerInsn "mov" for 0x401e59>, <DisassemblerInsn "call" for 0x401e5b>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e83>, <DisassemblerInsn "call" for 0x401e8b>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a03>, <DisassemblerInsn "cmp" for 0x401a0b>, <DisassemblerInsn "je" for 0x401a0f>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "xor" for 0x401e90>, <DisassemblerInsn "mov" for 0x401e92>, <DisassemblerInsn "mov" for 0x401e99>, <DisassemblerInsn "add" for 0x401ea0>, <DisassemblerInsn "pop" for 0x401ea7>, <DisassemblerInsn "pop" for 0x401ea8>, <DisassemblerInsn "ret" for 0x401eaa>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e76>, <DisassemblerInsn "call" for 0x401e7e>]'}], 'cfg_block_detailed_info': [{'block_Idx': 23, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x6c0]>', '<lea~~rsi, [rip + 0x14c0]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x98]>', '<lea~~rsi, [rip + 0x13b1]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2bc]>', '<mov~~dword ptr [rsp + 0x298], eax>', '<jmp~~0x401e99>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x298]>', '<add~~rsp, 0x6c8>', '<pop~~rbx>', '<pop~~r14>', '<ret~~>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x6c0]>', '<mov~~qword ptr [rsp + 0x98], rax>', '<mov~~rdi, qword ptr [rsp + 0x98]>', '<lea~~rsi, [rip + 0x13b1]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x6c0]>', '<call~~0x5000d0>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x2a0]>', '<cmp~~dword ptr [rax + 0x2c], 0>', '<je~~0x401e60>']}, {'block_Idx': 37, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x298], eax>', '<mov~~eax, dword ptr [rsp + 0x298]>', '<add~~rsp, 0x6c8>', '<pop~~rbx>', '<pop~~r14>', '<ret~~>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x6c0]>', '<call~~0x500058>']}], 'cfg_edge_info': [(38, 23), (26, 30), (23, 26), (5, 7), (60, 23), (30, 37), (21, 23)]}]}
{'write_manifest': [4202080, 4202102, 4202115, 4202128, 4202137]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_before/O2/smoothstreamingenc.o---before
The extraction of function: write_manifest
[4202080, 4202102, 4202115, 4202128, 4202137]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 86 nodes and 137 edges in CFGEmulated.
It has 82 nodes and 115 edges in CDG.
It has 2621 nodes and 3300 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4202080, 4202102, 4202115, 4202128, 4202137]
{4200704, 4202115, 4199811, 4200963, 4198791, 4200842, 4201869, 4202128, 4199829, 4200981, 4198679, 4202137, 4198813, 4202014, 4200486, 4200233, 4200364, 4200111, 4201263, 4200753, 4201903, 4200885, 4199990, 4201142, 4199865, 4201017, 4202042, 4200636, 4199743, 4198592, 4198725, 4199754, 4199756, 4198737, 4201684, 4201943, 4201816, 4200925, 4200799, 4202080, 4199903, 4201055, 4201571, 4201440, 4199789, 4198772, 4198901, 4202102, 4201980, 4199551}
[53, 61, 11, 49, 6, 79, 46, 62, 21, 31, 0, 19, 38, 12, 30, 63, 42, 68, 77, 75, 48, 41, 67, 78, 4, 13, 2, 44, 55, 5, 17, 50, 70, 83, 45, 28, 43, 24, 47, 80, 10, 65, 9, 73, 36, 15, 85, 37, 64, 58, 81, 20, 29, 35, 51, 39, 16, 60, 76, 66, 22, 27]
The execution time of patched slicing information extraction via angr: 0:01:43.205288
{'write_manifest': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4018bc>, <DisassemblerInsn "mov" for 0x4018c3>, <DisassemblerInsn "mov" for 0x4018ca>, <DisassemblerInsn "mov" for 0x4018d2>, <DisassemblerInsn "mov" for 0x4018d5>, <DisassemblerInsn "mov" for 0x4018d8>, <DisassemblerInsn "test" for 0x4018de>, <DisassemblerInsn "setg" for 0x4018e0>, <DisassemblerInsn "or" for 0x4018e4>, <DisassemblerInsn "mov" for 0x4018e7>, <DisassemblerInsn "mov" for 0x4018ee>, <DisassemblerInsn "mov" for 0x4018f0>, <DisassemblerInsn "mov" for 0x4018f8>, <DisassemblerInsn "mov" for 0x401900>, <DisassemblerInsn "mov" for 0x401907>, <DisassemblerInsn "mov" for 0x40190f>, <DisassemblerInsn "mov" for 0x401917>, <DisassemblerInsn "mov" for 0x40191f>, <DisassemblerInsn "mov" for 0x401923>, <DisassemblerInsn "test" for 0x40192b>, <DisassemblerInsn "jne" for 0x40192d>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40192f>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e99>, <DisassemblerInsn "add" for 0x401ea0>, <DisassemblerInsn "pop" for 0x401ea7>, <DisassemblerInsn "pop" for 0x401ea8>, <DisassemblerInsn "ret" for 0x401eaa>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401cd4>, <DisassemblerInsn "mov" for 0x401cd9>, <DisassemblerInsn "mov" for 0x401ce0>, <DisassemblerInsn "mov" for 0x401ce8>, <DisassemblerInsn "mov" for 0x401cf0>, <DisassemblerInsn "mov" for 0x401cf5>, <DisassemblerInsn "mov" for 0x401cfa>, <DisassemblerInsn "mov" for 0x401d02>, <DisassemblerInsn "imul" for 0x401d05>, <DisassemblerInsn "add" for 0x401d0c>, <DisassemblerInsn "add" for 0x401d0f>, <DisassemblerInsn "mov" for 0x401d16>, <DisassemblerInsn "xor" for 0x401d1b>, <DisassemblerInsn "test" for 0x401d1d>, <DisassemblerInsn "cmovne" for 0x401d21>, <DisassemblerInsn "mov" for 0x401d24>, <DisassemblerInsn "mov" for 0x401d28>, <DisassemblerInsn "add" for 0x401d2b>, <DisassemblerInsn "mov" for 0x401d2d>, <DisassemblerInsn "sub" for 0x401d2f>, <DisassemblerInsn "xor" for 0x401d31>, <DisassemblerInsn "cmp" for 0x401d33>, <DisassemblerInsn "cmovg" for 0x401d36>, <DisassemblerInsn "xor" for 0x401d39>, <DisassemblerInsn "cmp" for 0x401d3b>, <DisassemblerInsn "cmove" for 0x401d3f>, <DisassemblerInsn "mov" for 0x401d42>, <DisassemblerInsn "sub" for 0x401d46>, <DisassemblerInsn "cmp" for 0x401d48>, <DisassemblerInsn "mov" for 0x401d4a>, <DisassemblerInsn "jge" for 0x401d52>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401187>, <DisassemblerInsn "lea" for 0x40118f>, <DisassemblerInsn "mov" for 0x401196>, <DisassemblerInsn "call" for 0x401198>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019b5>, <DisassemblerInsn "mov" for 0x4019bd>, <DisassemblerInsn "mov" for 0x4019c5>, <DisassemblerInsn "mov" for 0x4019c8>, <DisassemblerInsn "mov" for 0x4019d0>, <DisassemblerInsn "jmp" for 0x4019d8>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40175a>, <DisassemblerInsn "mov" for 0x401762>, <DisassemblerInsn "mov" for 0x401769>, <DisassemblerInsn "mov" for 0x401770>, <DisassemblerInsn "add" for 0x401777>, <DisassemblerInsn "mov" for 0x40177b>, <DisassemblerInsn "cmp" for 0x40177d>, <DisassemblerInsn "mov" for 0x401780>, <DisassemblerInsn "mov" for 0x401787>, <DisassemblerInsn "mov" for 0x40178f>, <DisassemblerInsn "mov" for 0x401796>, <DisassemblerInsn "mov" for 0x401798>, <DisassemblerInsn "mov" for 0x40179f>, <DisassemblerInsn "jb" for 0x4017a6>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401931>, <DisassemblerInsn "mov" for 0x401939>, <DisassemblerInsn "mov" for 0x401941>, <DisassemblerInsn "mov" for 0x401948>, <DisassemblerInsn "lea" for 0x40194f>, <DisassemblerInsn "mov" for 0x401956>, <DisassemblerInsn "call" for 0x401958>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40154c>, <DisassemblerInsn "mov" for 0x401554>, <DisassemblerInsn "mov" for 0x40155c>, <DisassemblerInsn "lea" for 0x40155f>, <DisassemblerInsn "mov" for 0x401566>, <DisassemblerInsn "call" for 0x401568>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a15>, <DisassemblerInsn "mov" for 0x401a1c>, <DisassemblerInsn "mov" for 0x401a23>, <DisassemblerInsn "lea" for 0x401a2b>, <DisassemblerInsn "mov" for 0x401a32>, <DisassemblerInsn "call" for 0x401a34>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x4010c0>, <DisassemblerInsn "push" for 0x4010c2>, <DisassemblerInsn "sub" for 0x4010c3>, <DisassemblerInsn "mov" for 0x4010ca>, <DisassemblerInsn "mov" for 0x4010d1>, <DisassemblerInsn "mov" for 0x4010d4>, <DisassemblerInsn "mov" for 0x4010dc>, <DisassemblerInsn "mov" for 0x4010e0>, <DisassemblerInsn "lea" for 0x4010e8>, <DisassemblerInsn "lea" for 0x4010f0>, <DisassemblerInsn "mov" for 0x4010f8>, <DisassemblerInsn "add" for 0x401100>, <DisassemblerInsn "mov" for 0x401104>, <DisassemblerInsn "lea" for 0x401109>, <DisassemblerInsn "mov" for 0x401110>, <DisassemblerInsn "call" for 0x401112>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4013a0>, <DisassemblerInsn "mov" for 0x4013a7>, <DisassemblerInsn "mov" for 0x4013ae>, <DisassemblerInsn "mov" for 0x4013b5>, <DisassemblerInsn "add" for 0x4013bc>, <DisassemblerInsn "mov" for 0x4013bf>, <DisassemblerInsn "mov" for 0x4013c6>, <DisassemblerInsn "mov" for 0x4013cd>, <DisassemblerInsn "mov" for 0x4013d4>, <DisassemblerInsn "mov" for 0x4013db>, <DisassemblerInsn "mov" for 0x4013e3>, <DisassemblerInsn "mov" for 0x4013eb>, <DisassemblerInsn "mov" for 0x4013f3>, <DisassemblerInsn "mov" for 0x4013fa>, <DisassemblerInsn "mov" for 0x401401>, <DisassemblerInsn "mov" for 0x401408>, <DisassemblerInsn "add" for 0x40140f>, <DisassemblerInsn "cmp" for 0x401413>, <DisassemblerInsn "mov" for 0x401416>, <DisassemblerInsn "mov" for 0x40141e>, <DisassemblerInsn "mov" for 0x401421>, <DisassemblerInsn "mov" for 0x401429>, <DisassemblerInsn "mov" for 0x40142c>, <DisassemblerInsn "mov" for 0x401434>, <DisassemblerInsn "mov" for 0x401437>, <DisassemblerInsn "mov" for 0x40143f>, <DisassemblerInsn "mov" for 0x401442>, <DisassemblerInsn "mov" for 0x40144a>, <DisassemblerInsn "mov" for 0x40144d>, <DisassemblerInsn "mov" for 0x401455>, <DisassemblerInsn "mov" for 0x40145c>, <DisassemblerInsn "mov" for 0x401463>, <DisassemblerInsn "mov" for 0x40146b>, <DisassemblerInsn "mov" for 0x401472>, <DisassemblerInsn "jne" for 0x401479>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4017ac>, <DisassemblerInsn "mov" for 0x4017b4>, <DisassemblerInsn "mov" for 0x4017bc>, <DisassemblerInsn "mov" for 0x4017c3>, <DisassemblerInsn "mov" for 0x4017c7>, <DisassemblerInsn "movsxd" for 0x4017cf>, <DisassemblerInsn "mov" for 0x4017d2>, <DisassemblerInsn "mov" for 0x4017da>, <DisassemblerInsn "mov" for 0x4017e2>, <DisassemblerInsn "mov" for 0x4017ea>, <DisassemblerInsn "mov" for 0x4017ec>, <DisassemblerInsn "imul" for 0x4017f3>, <DisassemblerInsn "add" for 0x4017fa>, <DisassemblerInsn "add" for 0x4017fd>, <DisassemblerInsn "mov" for 0x401804>, <DisassemblerInsn "mov" for 0x40180c>, <DisassemblerInsn "mov" for 0x40180e>, <DisassemblerInsn "cmp" for 0x401815>, <DisassemblerInsn "mov" for 0x401818>, <DisassemblerInsn "jl" for 0x401820>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40147f>, <DisassemblerInsn "mov" for 0x401487>, <DisassemblerInsn "mov" for 0x40148e>, <DisassemblerInsn "mov" for 0x401495>, <DisassemblerInsn "mov" for 0x40149d>, <DisassemblerInsn "mov" for 0x4014a5>, <DisassemblerInsn "mov" for 0x4014ad>, <DisassemblerInsn "mov" for 0x4014b4>, <DisassemblerInsn "mov" for 0x4014bc>, <DisassemblerInsn "cmp" for 0x4014c3>, <DisassemblerInsn "sete" for 0x4014c6>, <DisassemblerInsn "mov" for 0x4014ca>, <DisassemblerInsn "xor" for 0x4014d2>, <DisassemblerInsn "cmp" for 0x4014d4>, <DisassemblerInsn "cmove" for 0x4014d7>, <DisassemblerInsn "xor" for 0x4014db>, <DisassemblerInsn "cmp" for 0x4014dd>, <DisassemblerInsn "cmove" for 0x4014e0>, <DisassemblerInsn "xor" for 0x4014e4>, <DisassemblerInsn "cmp" for 0x4014e6>, <DisassemblerInsn "cmove" for 0x4014e9>, <DisassemblerInsn "mov" for 0x4014ec>, <DisassemblerInsn "add" for 0x4014ef>, <DisassemblerInsn "mov" for 0x4014f3>, <DisassemblerInsn "mov" for 0x4014fb>, <DisassemblerInsn "cmp" for 0x4014fe>, <DisassemblerInsn "mov" for 0x401500>, <DisassemblerInsn "cmovg" for 0x401502>, <DisassemblerInsn "cmp" for 0x401505>, <DisassemblerInsn "mov" for 0x401508>, <DisassemblerInsn "cmovg" for 0x40150b>, <DisassemblerInsn "cmp" for 0x40150e>, <DisassemblerInsn "cmove" for 0x401511>, <DisassemblerInsn "mov" for 0x401515>, <DisassemblerInsn "cmp" for 0x40151c>, <DisassemblerInsn "cmove" for 0x40151f>, <DisassemblerInsn "mov" for 0x401522>, <DisassemblerInsn "mov" for 0x401529>, <DisassemblerInsn "lea" for 0x401531>, <DisassemblerInsn "mov" for 0x401538>, <DisassemblerInsn "call" for 0x40153a>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e60>, <DisassemblerInsn "lea" for 0x401e68>, <DisassemblerInsn "mov" for 0x401e6f>, <DisassemblerInsn "call" for 0x401e71>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401729>, <DisassemblerInsn "mov" for 0x401731>, <DisassemblerInsn "mov" for 0x401739>, <DisassemblerInsn "add" for 0x401740>, <DisassemblerInsn "mov" for 0x401743>, <DisassemblerInsn "mov" for 0x401745>, <DisassemblerInsn "mov" for 0x40174c>, <DisassemblerInsn "mov" for 0x401753>, <DisassemblerInsn "mov" for 0x40175a>, <DisassemblerInsn "mov" for 0x401762>, <DisassemblerInsn "mov" for 0x401769>, <DisassemblerInsn "mov" for 0x401770>, <DisassemblerInsn "add" for 0x401777>, <DisassemblerInsn "mov" for 0x40177b>, <DisassemblerInsn "cmp" for 0x40177d>, <DisassemblerInsn "mov" for 0x401780>, <DisassemblerInsn "mov" for 0x401787>, <DisassemblerInsn "mov" for 0x40178f>, <DisassemblerInsn "mov" for 0x401796>, <DisassemblerInsn "mov" for 0x401798>, <DisassemblerInsn "mov" for 0x40179f>, <DisassemblerInsn "jb" for 0x4017a6>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a5f>, <DisassemblerInsn "mov" for 0x401a66>, <DisassemblerInsn "mov" for 0x401a6e>, <DisassemblerInsn "add" for 0x401a76>, <DisassemblerInsn "mov" for 0x401a7a>, <DisassemblerInsn "add" for 0x401a82>, <DisassemblerInsn "mov" for 0x401a86>, <DisassemblerInsn "xor" for 0x401a8e>, <DisassemblerInsn "mov" for 0x401a90>, <DisassemblerInsn "xor" for 0x401a92>, <DisassemblerInsn "mov" for 0x401a94>, <DisassemblerInsn "mov" for 0x401a99>, <DisassemblerInsn "mov" for 0x401aa0>, <DisassemblerInsn "mov" for 0x401aa8>, <DisassemblerInsn "mov" for 0x401aaf>, <DisassemblerInsn "mov" for 0x401ab6>, <DisassemblerInsn "mov" for 0x401abe>, <DisassemblerInsn "mov" for 0x401ac6>, <DisassemblerInsn "mov" for 0x401acd>, <DisassemblerInsn "mov" for 0x401ad5>, <DisassemblerInsn "mov" for 0x401adc>, <DisassemblerInsn "mov" for 0x401ae3>, <DisassemblerInsn "mov" for 0x401aea>, <DisassemblerInsn "mov" for 0x401af2>, <DisassemblerInsn "mov" for 0x401af5>, <DisassemblerInsn "mov" for 0x401afd>, <DisassemblerInsn "mov" for 0x401b00>, <DisassemblerInsn "mov" for 0x401b04>, <DisassemblerInsn "mov" for 0x401b08>, <DisassemblerInsn "cmp" for 0x401b10>, <DisassemblerInsn "mov" for 0x401b14>, <DisassemblerInsn "mov" for 0x401b1b>, <DisassemblerInsn "mov" for 0x401b22>, <DisassemblerInsn "jne" for 0x401b29>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40195f>, <DisassemblerInsn "mov" for 0x401967>, <DisassemblerInsn "mov" for 0x40196f>, <DisassemblerInsn "mov" for 0x401975>, <DisassemblerInsn "lea" for 0x40197c>, <DisassemblerInsn "mov" for 0x401983>, <DisassemblerInsn "call" for 0x401985>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401dfc>, <DisassemblerInsn "mov" for 0x401e00>, <DisassemblerInsn "mov" for 0x401e08>, <DisassemblerInsn "add" for 0x401e0d>, <DisassemblerInsn "mov" for 0x401e11>, <DisassemblerInsn "mov" for 0x401e16>, <DisassemblerInsn "sub" for 0x401e18>, <DisassemblerInsn "cmp" for 0x401e1a>, <DisassemblerInsn "jle" for 0x401e1c>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401dd5>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e4a>, <DisassemblerInsn "lea" for 0x401e52>, <DisassemblerInsn "mov" for 0x401e59>, <DisassemblerInsn "call" for 0x401e5b>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c63>, <DisassemblerInsn "mov" for 0x401c6b>, <DisassemblerInsn "mov" for 0x401c73>, <DisassemblerInsn "mov" for 0x401c7a>, <DisassemblerInsn "mov" for 0x401c7e>, <DisassemblerInsn "movsxd" for 0x401c83>, <DisassemblerInsn "mov" for 0x401c86>, <DisassemblerInsn "mov" for 0x401c8b>, <DisassemblerInsn "mov" for 0x401c93>, <DisassemblerInsn "mov" for 0x401c98>, <DisassemblerInsn "mov" for 0x401c9a>, <DisassemblerInsn "imul" for 0x401ca1>, <DisassemblerInsn "add" for 0x401ca8>, <DisassemblerInsn "add" for 0x401cab>, <DisassemblerInsn "mov" for 0x401cb2>, <DisassemblerInsn "mov" for 0x401cba>, <DisassemblerInsn "mov" for 0x401cbc>, <DisassemblerInsn "cmp" for 0x401cc3>, <DisassemblerInsn "mov" for 0x401cc6>, <DisassemblerInsn "jl" for 0x401cce>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401be0>, <DisassemblerInsn "mov" for 0x401be8>, <DisassemblerInsn "mov" for 0x401bf0>, <DisassemblerInsn "add" for 0x401bf7>, <DisassemblerInsn "mov" for 0x401bfa>, <DisassemblerInsn "mov" for 0x401bfc>, <DisassemblerInsn "mov" for 0x401c03>, <DisassemblerInsn "mov" for 0x401c0a>, <DisassemblerInsn "mov" for 0x401c11>, <DisassemblerInsn "mov" for 0x401c19>, <DisassemblerInsn "mov" for 0x401c20>, <DisassemblerInsn "mov" for 0x401c27>, <DisassemblerInsn "add" for 0x401c2e>, <DisassemblerInsn "mov" for 0x401c32>, <DisassemblerInsn "cmp" for 0x401c34>, <DisassemblerInsn "mov" for 0x401c37>, <DisassemblerInsn "mov" for 0x401c3e>, <DisassemblerInsn "mov" for 0x401c46>, <DisassemblerInsn "mov" for 0x401c4d>, <DisassemblerInsn "mov" for 0x401c4f>, <DisassemblerInsn "mov" for 0x401c56>, <DisassemblerInsn "jb" for 0x401c5d>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019dd>, <DisassemblerInsn "mov" for 0x4019e5>, <DisassemblerInsn "mov" for 0x4019ed>, <DisassemblerInsn "lea" for 0x4019f5>, <DisassemblerInsn "mov" for 0x4019fc>, <DisassemblerInsn "call" for 0x4019fe>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401145>, <DisassemblerInsn "cmp" for 0x40114c>, <DisassemblerInsn "jge" for 0x40114f>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011f5>, <DisassemblerInsn "mov" for 0x4011fc>, <DisassemblerInsn "mov" for 0x401204>, <DisassemblerInsn "mov" for 0x40120c>, <DisassemblerInsn "mov" for 0x401210>, <DisassemblerInsn "mov" for 0x401218>, <DisassemblerInsn "mov" for 0x40121c>, <DisassemblerInsn "mov" for 0x401224>, <DisassemblerInsn "mov" for 0x401226>, <DisassemblerInsn "xor" for 0x40122e>, <DisassemblerInsn "mov" for 0x401230>, <DisassemblerInsn "xor" for 0x401232>, <DisassemblerInsn "mov" for 0x401234>, <DisassemblerInsn "mov" for 0x401237>, <DisassemblerInsn "mov" for 0x40123f>, <DisassemblerInsn "mov" for 0x401241>, <DisassemblerInsn "mov" for 0x401248>, <DisassemblerInsn "mov" for 0x40124a>, <DisassemblerInsn "mov" for 0x401251>, <DisassemblerInsn "mov" for 0x401259>, <DisassemblerInsn "mov" for 0x40125b>, <DisassemblerInsn "mov" for 0x401262>, <DisassemblerInsn "mov" for 0x401269>, <DisassemblerInsn "mov" for 0x401271>, <DisassemblerInsn "mov" for 0x401279>, <DisassemblerInsn "mov" for 0x401280>, <DisassemblerInsn "mov" for 0x401287>, <DisassemblerInsn "mov" for 0x40128f>, <DisassemblerInsn "mov" for 0x401297>, <DisassemblerInsn "mov" for 0x40129f>, <DisassemblerInsn "mov" for 0x4012a7>, <DisassemblerInsn "mov" for 0x4012af>, <DisassemblerInsn "mov" for 0x4012b6>, <DisassemblerInsn "mov" for 0x4012bd>, <DisassemblerInsn "imul" for 0x4012c5>, <DisassemblerInsn "add" for 0x4012cc>, <DisassemblerInsn "add" for 0x4012cf>, <DisassemblerInsn "mov" for 0x4012d6>, <DisassemblerInsn "mov" for 0x4012d8>, <DisassemblerInsn "cmp" for 0x4012df>, <DisassemblerInsn "mov" for 0x4012e2>, <DisassemblerInsn "jle" for 0x4012ea>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401117>, <DisassemblerInsn "mov" for 0x40111f>, <DisassemblerInsn "add" for 0x401127>, <DisassemblerInsn "lea" for 0x40112e>, <DisassemblerInsn "mov" for 0x401136>, <DisassemblerInsn "xor" for 0x40113b>, <DisassemblerInsn "mov" for 0x40113d>, <DisassemblerInsn "call" for 0x401140>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401826>, <DisassemblerInsn "mov" for 0x40182e>, <DisassemblerInsn "mov" for 0x401835>, <DisassemblerInsn "mov" for 0x40183d>, <DisassemblerInsn "mov" for 0x401845>, <DisassemblerInsn "mov" for 0x40184d>, <DisassemblerInsn "mov" for 0x401855>, <DisassemblerInsn "mov" for 0x40185d>, <DisassemblerInsn "imul" for 0x401860>, <DisassemblerInsn "add" for 0x401867>, <DisassemblerInsn "add" for 0x40186a>, <DisassemblerInsn "mov" for 0x401871>, <DisassemblerInsn "xor" for 0x401879>, <DisassemblerInsn "test" for 0x40187b>, <DisassemblerInsn "cmovne" for 0x40187f>, <DisassemblerInsn "mov" for 0x401882>, <DisassemblerInsn "mov" for 0x401889>, <DisassemblerInsn "add" for 0x40188c>, <DisassemblerInsn "mov" for 0x40188e>, <DisassemblerInsn "sub" for 0x401890>, <DisassemblerInsn "xor" for 0x401892>, <DisassemblerInsn "cmp" for 0x401894>, <DisassemblerInsn "cmovg" for 0x401897>, <DisassemblerInsn "xor" for 0x40189a>, <DisassemblerInsn "cmp" for 0x40189c>, <DisassemblerInsn "cmove" for 0x4018a0>, <DisassemblerInsn "mov" for 0x4018a3>, <DisassemblerInsn "sub" for 0x4018aa>, <DisassemblerInsn "cmp" for 0x4018ac>, <DisassemblerInsn "mov" for 0x4018ae>, <DisassemblerInsn "jge" for 0x4018b6>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401636>, <DisassemblerInsn "mov" for 0x40163e>, <DisassemblerInsn "mov" for 0x401646>, <DisassemblerInsn "mov" for 0x40164d>, <DisassemblerInsn "mov" for 0x401655>, <DisassemblerInsn "mov" for 0x40165c>, <DisassemblerInsn "mov" for 0x401663>, <DisassemblerInsn "mov" for 0x40166a>, <DisassemblerInsn "mov" for 0x401672>, <DisassemblerInsn "mov" for 0x401675>, <DisassemblerInsn "mov" for 0x40167d>, <DisassemblerInsn "mov" for 0x401680>, <DisassemblerInsn "mov" for 0x401684>, <DisassemblerInsn "mov" for 0x401688>, <DisassemblerInsn "cmp" for 0x401690>, <DisassemblerInsn "mov" for 0x401694>, <DisassemblerInsn "mov" for 0x40169b>, <DisassemblerInsn "mov" for 0x4016a2>, <DisassemblerInsn "jne" for 0x4016a9>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401151>, <DisassemblerInsn "mov" for 0x401159>, <DisassemblerInsn "mov" for 0x401161>, <DisassemblerInsn "lea" for 0x401166>, <DisassemblerInsn "mov" for 0x40116d>, <DisassemblerInsn "call" for 0x40116f>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40153f>, <DisassemblerInsn "test" for 0x401546>, <DisassemblerInsn "jne" for 0x401548>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b2f>, <DisassemblerInsn "mov" for 0x401b37>, <DisassemblerInsn "mov" for 0x401b3e>, <DisassemblerInsn "mov" for 0x401b46>, <DisassemblerInsn "mov" for 0x401b4e>, <DisassemblerInsn "mov" for 0x401b56>, <DisassemblerInsn "imul" for 0x401b5a>, <DisassemblerInsn "mov" for 0x401b61>, <DisassemblerInsn "add" for 0x401b64>, <DisassemblerInsn "add" for 0x401b67>, <DisassemblerInsn "mov" for 0x401b6e>, <DisassemblerInsn "mov" for 0x401b71>, <DisassemblerInsn "mov" for 0x401b78>, <DisassemblerInsn "imul" for 0x401b7f>, <DisassemblerInsn "mov" for 0x401b86>, <DisassemblerInsn "add" for 0x401b89>, <DisassemblerInsn "add" for 0x401b8c>, <DisassemblerInsn "mov" for 0x401b93>, <DisassemblerInsn "imul" for 0x401b96>, <DisassemblerInsn "mov" for 0x401b9d>, <DisassemblerInsn "add" for 0x401ba0>, <DisassemblerInsn "add" for 0x401ba3>, <DisassemblerInsn "mov" for 0x401baa>, <DisassemblerInsn "imul" for 0x401bad>, <DisassemblerInsn "add" for 0x401bb4>, <DisassemblerInsn "add" for 0x401bb7>, <DisassemblerInsn "mov" for 0x401bbd>, <DisassemblerInsn "lea" for 0x401bc0>, <DisassemblerInsn "mov" for 0x401bc7>, <DisassemblerInsn "mov" for 0x401bca>, <DisassemblerInsn "mov" for 0x401bcf>, <DisassemblerInsn "mov" for 0x401bd4>, <DisassemblerInsn "mov" for 0x401bd9>, <DisassemblerInsn "call" for 0x401bdb>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401dd7>, <DisassemblerInsn "mov" for 0x401ddc>, <DisassemblerInsn "mov" for 0x401de1>, <DisassemblerInsn "mov" for 0x401de7>, <DisassemblerInsn "lea" for 0x401dee>, <DisassemblerInsn "mov" for 0x401df5>, <DisassemblerInsn "call" for 0x401df7>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401900>, <DisassemblerInsn "mov" for 0x401907>, <DisassemblerInsn "mov" for 0x40190f>, <DisassemblerInsn "mov" for 0x401917>, <DisassemblerInsn "mov" for 0x40191f>, <DisassemblerInsn "mov" for 0x401923>, <DisassemblerInsn "test" for 0x40192b>, <DisassemblerInsn "jne" for 0x40192d>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4016af>, <DisassemblerInsn "mov" for 0x4016b7>, <DisassemblerInsn "mov" for 0x4016be>, <DisassemblerInsn "mov" for 0x4016c6>, <DisassemblerInsn "mov" for 0x4016ce>, <DisassemblerInsn "mov" for 0x4016d6>, <DisassemblerInsn "imul" for 0x4016da>, <DisassemblerInsn "mov" for 0x4016e1>, <DisassemblerInsn "add" for 0x4016e4>, <DisassemblerInsn "add" for 0x4016e7>, <DisassemblerInsn "mov" for 0x4016ee>, <DisassemblerInsn "mov" for 0x4016f1>, <DisassemblerInsn "mov" for 0x4016f8>, <DisassemblerInsn "imul" for 0x4016ff>, <DisassemblerInsn "add" for 0x401706>, <DisassemblerInsn "add" for 0x401709>, <DisassemblerInsn "mov" for 0x40170f>, <DisassemblerInsn "lea" for 0x401712>, <DisassemblerInsn "mov" for 0x401719>, <DisassemblerInsn "mov" for 0x40171d>, <DisassemblerInsn "mov" for 0x401722>, <DisassemblerInsn "call" for 0x401724>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a03>, <DisassemblerInsn "cmp" for 0x401a0b>, <DisassemblerInsn "je" for 0x401a0f>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019ed>, <DisassemblerInsn "lea" for 0x4019f5>, <DisassemblerInsn "mov" for 0x4019fc>, <DisassemblerInsn "call" for 0x4019fe>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40156d>, <DisassemblerInsn "lea" for 0x401575>, <DisassemblerInsn "mov" for 0x40157c>, <DisassemblerInsn "call" for 0x40157e>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e83>, <DisassemblerInsn "call" for 0x401e8b>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e3a>, <DisassemblerInsn "mov" for 0x401e42>, <DisassemblerInsn "mov" for 0x401e4a>, <DisassemblerInsn "lea" for 0x401e52>, <DisassemblerInsn "mov" for 0x401e59>, <DisassemblerInsn "call" for 0x401e5b>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40119d>, <DisassemblerInsn "mov" for 0x4011a5>, <DisassemblerInsn "add" for 0x4011a8>, <DisassemblerInsn "mov" for 0x4011ac>, <DisassemblerInsn "mov" for 0x4011b4>, <DisassemblerInsn "mov" for 0x4011b7>, <DisassemblerInsn "xor" for 0x4011be>, <DisassemblerInsn "xor" for 0x4011c0>, <DisassemblerInsn "cmp" for 0x4011c2>, <DisassemblerInsn "mov" for 0x4011c5>, <DisassemblerInsn "mov" for 0x4011c7>, <DisassemblerInsn "mov" for 0x4011ce>, <DisassemblerInsn "mov" for 0x4011d0>, <DisassemblerInsn "mov" for 0x4011d7>, <DisassemblerInsn "mov" for 0x4011df>, <DisassemblerInsn "mov" for 0x4011e1>, <DisassemblerInsn "mov" for 0x4011e8>, <DisassemblerInsn "je" for 0x4011ef>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401dad>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401174>, <DisassemblerInsn "mov" for 0x40117b>, <DisassemblerInsn "jmp" for 0x401182>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40195d>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e76>, <DisassemblerInsn "call" for 0x401e7e>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401335>, <DisassemblerInsn "mov" for 0x40133d>, <DisassemblerInsn "mov" for 0x401345>, <DisassemblerInsn "mov" for 0x40134d>, <DisassemblerInsn "mov" for 0x401355>, <DisassemblerInsn "mov" for 0x401359>, <DisassemblerInsn "cmp" for 0x40135d>, <DisassemblerInsn "jne" for 0x401361>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d8d>, <DisassemblerInsn "mov" for 0x401d91>, <DisassemblerInsn "mov" for 0x401d96>, <DisassemblerInsn "mov" for 0x401d9b>, <DisassemblerInsn "mov" for 0x401da0>, <DisassemblerInsn "mov" for 0x401da4>, <DisassemblerInsn "test" for 0x401da9>, <DisassemblerInsn "jne" for 0x401dab>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a39>, <DisassemblerInsn "mov" for 0x401a41>, <DisassemblerInsn "mov" for 0x401a43>, <DisassemblerInsn "mov" for 0x401a4a>, <DisassemblerInsn "cmp" for 0x401a4f>, <DisassemblerInsn "mov" for 0x401a52>, <DisassemblerInsn "je" for 0x401a59>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "xor" for 0x401e90>, <DisassemblerInsn "mov" for 0x401e92>, <DisassemblerInsn "mov" for 0x401e99>, <DisassemblerInsn "add" for 0x401ea0>, <DisassemblerInsn "pop" for 0x401ea7>, <DisassemblerInsn "pop" for 0x401ea8>, <DisassemblerInsn "ret" for 0x401eaa>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d58>, <DisassemblerInsn "mov" for 0x401d5c>, <DisassemblerInsn "mov" for 0x401d63>, <DisassemblerInsn "mov" for 0x401d68>, <DisassemblerInsn "mov" for 0x401d6b>, <DisassemblerInsn "mov" for 0x401d6e>, <DisassemblerInsn "test" for 0x401d74>, <DisassemblerInsn "setg" for 0x401d76>, <DisassemblerInsn "or" for 0x401d7a>, <DisassemblerInsn "mov" for 0x401d7d>, <DisassemblerInsn "mov" for 0x401d81>, <DisassemblerInsn "mov" for 0x401d83>, <DisassemblerInsn "mov" for 0x401d88>, <DisassemblerInsn "mov" for 0x401d8d>, <DisassemblerInsn "mov" for 0x401d91>, <DisassemblerInsn "mov" for 0x401d96>, <DisassemblerInsn "mov" for 0x401d9b>, <DisassemblerInsn "mov" for 0x401da0>, <DisassemblerInsn "mov" for 0x401da4>, <DisassemblerInsn "test" for 0x401da9>, <DisassemblerInsn "jne" for 0x401dab>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e1e>, <DisassemblerInsn "mov" for 0x401e23>, <DisassemblerInsn "mov" for 0x401e28>, <DisassemblerInsn "mov" for 0x401e2b>, <DisassemblerInsn "mov" for 0x401e30>, <DisassemblerInsn "jmp" for 0x401e35>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40154a>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401595>, <DisassemblerInsn "mov" for 0x40159c>, <DisassemblerInsn "mov" for 0x4015a3>, <DisassemblerInsn "lea" for 0x4015ab>, <DisassemblerInsn "mov" for 0x4015b2>, <DisassemblerInsn "call" for 0x4015b4>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4015b9>, <DisassemblerInsn "mov" for 0x4015c1>, <DisassemblerInsn "mov" for 0x4015c3>, <DisassemblerInsn "mov" for 0x4015ca>, <DisassemblerInsn "cmp" for 0x4015cf>, <DisassemblerInsn "mov" for 0x4015d2>, <DisassemblerInsn "je" for 0x4015d9>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c11>, <DisassemblerInsn "mov" for 0x401c19>, <DisassemblerInsn "mov" for 0x401c20>, <DisassemblerInsn "mov" for 0x401c27>, <DisassemblerInsn "add" for 0x401c2e>, <DisassemblerInsn "mov" for 0x401c32>, <DisassemblerInsn "cmp" for 0x401c34>, <DisassemblerInsn "mov" for 0x401c37>, <DisassemblerInsn "mov" for 0x401c3e>, <DisassemblerInsn "mov" for 0x401c46>, <DisassemblerInsn "mov" for 0x401c4d>, <DisassemblerInsn "mov" for 0x401c4f>, <DisassemblerInsn "mov" for 0x401c56>, <DisassemblerInsn "jb" for 0x401c5d>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4015df>, <DisassemblerInsn "mov" for 0x4015e6>, <DisassemblerInsn "mov" for 0x4015ee>, <DisassemblerInsn "add" for 0x4015f6>, <DisassemblerInsn "mov" for 0x4015fa>, <DisassemblerInsn "add" for 0x401602>, <DisassemblerInsn "mov" for 0x401606>, <DisassemblerInsn "xor" for 0x40160e>, <DisassemblerInsn "mov" for 0x401610>, <DisassemblerInsn "xor" for 0x401612>, <DisassemblerInsn "mov" for 0x401614>, <DisassemblerInsn "mov" for 0x401619>, <DisassemblerInsn "mov" for 0x401620>, <DisassemblerInsn "mov" for 0x401628>, <DisassemblerInsn "mov" for 0x40162f>, <DisassemblerInsn "mov" for 0x401636>, <DisassemblerInsn "mov" for 0x40163e>, <DisassemblerInsn "mov" for 0x401646>, <DisassemblerInsn "mov" for 0x40164d>, <DisassemblerInsn "mov" for 0x401655>, <DisassemblerInsn "mov" for 0x40165c>, <DisassemblerInsn "mov" for 0x401663>, <DisassemblerInsn "mov" for 0x40166a>, <DisassemblerInsn "mov" for 0x401672>, <DisassemblerInsn "mov" for 0x401675>, <DisassemblerInsn "mov" for 0x40167d>, <DisassemblerInsn "mov" for 0x401680>, <DisassemblerInsn "mov" for 0x401684>, <DisassemblerInsn "mov" for 0x401688>, <DisassemblerInsn "cmp" for 0x401690>, <DisassemblerInsn "mov" for 0x401694>, <DisassemblerInsn "mov" for 0x40169b>, <DisassemblerInsn "mov" for 0x4016a2>, <DisassemblerInsn "jne" for 0x4016a9>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4012ec>, <DisassemblerInsn "mov" for 0x4012f3>, <DisassemblerInsn "mov" for 0x4012fb>, <DisassemblerInsn "imul" for 0x401303>, <DisassemblerInsn "add" for 0x40130a>, <DisassemblerInsn "add" for 0x40130d>, <DisassemblerInsn "mov" for 0x401313>, <DisassemblerInsn "add" for 0x401316>, <DisassemblerInsn "mov" for 0x401319>, <DisassemblerInsn "mov" for 0x40131b>, <DisassemblerInsn "mov" for 0x40131f>, <DisassemblerInsn "add" for 0x401326>, <DisassemblerInsn "mov" for 0x40132d>, <DisassemblerInsn "mov" for 0x401335>, <DisassemblerInsn "mov" for 0x40133d>, <DisassemblerInsn "mov" for 0x401345>, <DisassemblerInsn "mov" for 0x40134d>, <DisassemblerInsn "mov" for 0x401355>, <DisassemblerInsn "mov" for 0x401359>, <DisassemblerInsn "cmp" for 0x40135d>, <DisassemblerInsn "jne" for 0x401361>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ab6>, <DisassemblerInsn "mov" for 0x401abe>, <DisassemblerInsn "mov" for 0x401ac6>, <DisassemblerInsn "mov" for 0x401acd>, <DisassemblerInsn "mov" for 0x401ad5>, <DisassemblerInsn "mov" for 0x401adc>, <DisassemblerInsn "mov" for 0x401ae3>, <DisassemblerInsn "mov" for 0x401aea>, <DisassemblerInsn "mov" for 0x401af2>, <DisassemblerInsn "mov" for 0x401af5>, <DisassemblerInsn "mov" for 0x401afd>, <DisassemblerInsn "mov" for 0x401b00>, <DisassemblerInsn "mov" for 0x401b04>, <DisassemblerInsn "mov" for 0x401b08>, <DisassemblerInsn "cmp" for 0x401b10>, <DisassemblerInsn "mov" for 0x401b14>, <DisassemblerInsn "mov" for 0x401b1b>, <DisassemblerInsn "mov" for 0x401b22>, <DisassemblerInsn "jne" for 0x401b29>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40198a>, <DisassemblerInsn "mov" for 0x401991>, <DisassemblerInsn "mov" for 0x401999>, <DisassemblerInsn "add" for 0x4019a1>, <DisassemblerInsn "mov" for 0x4019a5>, <DisassemblerInsn "mov" for 0x4019ad>, <DisassemblerInsn "sub" for 0x4019af>, <DisassemblerInsn "cmp" for 0x4019b1>, <DisassemblerInsn "jle" for 0x4019b3>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401daf>, <DisassemblerInsn "mov" for 0x401db4>, <DisassemblerInsn "mov" for 0x401db9>, <DisassemblerInsn "mov" for 0x401dc0>, <DisassemblerInsn "lea" for 0x401dc7>, <DisassemblerInsn "mov" for 0x401dce>, <DisassemblerInsn "call" for 0x401dd0>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4013db>, <DisassemblerInsn "mov" for 0x4013e3>, <DisassemblerInsn "mov" for 0x4013eb>, <DisassemblerInsn "mov" for 0x4013f3>, <DisassemblerInsn "mov" for 0x4013fa>, <DisassemblerInsn "mov" for 0x401401>, <DisassemblerInsn "mov" for 0x401408>, <DisassemblerInsn "add" for 0x40140f>, <DisassemblerInsn "cmp" for 0x401413>, <DisassemblerInsn "mov" for 0x401416>, <DisassemblerInsn "mov" for 0x40141e>, <DisassemblerInsn "mov" for 0x401421>, <DisassemblerInsn "mov" for 0x401429>, <DisassemblerInsn "mov" for 0x40142c>, <DisassemblerInsn "mov" for 0x401434>, <DisassemblerInsn "mov" for 0x401437>, <DisassemblerInsn "mov" for 0x40143f>, <DisassemblerInsn "mov" for 0x401442>, <DisassemblerInsn "mov" for 0x40144a>, <DisassemblerInsn "mov" for 0x40144d>, <DisassemblerInsn "mov" for 0x401455>, <DisassemblerInsn "mov" for 0x40145c>, <DisassemblerInsn "mov" for 0x401463>, <DisassemblerInsn "mov" for 0x40146b>, <DisassemblerInsn "mov" for 0x401472>, <DisassemblerInsn "jne" for 0x401479>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401583>, <DisassemblerInsn "cmp" for 0x40158b>, <DisassemblerInsn "je" for 0x40158f>]'}], 'cfg_block_detailed_info': [{'block_Idx': 53, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x13c]>', '<mov~~dl, byte ptr [rsp + 0x1f7]>', '<mov~~rcx, qword ptr [rsp + 0x130]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~rsi, qword ptr [rcx]>', '<mov~~esi, dword ptr [rsi + 0x810]>', '<test~~esi, esi>', '<setg~~sil>', '<or~~dl, sil>', '<mov~~byte ptr [rsp + 0x11f], dl>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x120], rcx>', '<mov~~qword ptr [rsp + 0x128], rax>', '<mov~~al, byte ptr [rsp + 0x11f]>', '<mov~~rcx, qword ptr [rsp + 0x120]>', '<mov~~rdx, qword ptr [rsp + 0x128]>', '<mov~~qword ptr [rsp + 0x108], rdx>', '<mov~~rcx, qword ptr [rcx + rdx*8]>', '<mov~~qword ptr [rsp + 0x110], rcx>', '<test~~al, 1>', '<jne~~0x401931>']}, {'block_Idx': 61, 'blockInsts': ['<jmp~~0x40195f>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x298]>', '<add~~rsp, 0x6c8>', '<pop~~rbx>', '<pop~~r14>', '<ret~~>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x78]>', '<mov~~edx, dword ptr [rsp + 0x94]>', '<mov~~r8d, dword ptr [rsp + 0x84]>', '<mov~~dil, byte ptr [rsp + 0x1f7]>', '<mov~~rsi, qword ptr [rsp + 0x68]>', '<mov~~r9, qword ptr [rsp + 0x70]>', '<mov~~rcx, qword ptr [rsp + 0x2a0]>', '<mov~~ecx, dword ptr [rcx + 0x10]>', '<imul~~r9, r9, 0x8480>', '<add~~rsi, r9>', '<add~~rsi, 0x8460>', '<mov~~qword ptr [rsp + 0x58], rsi>', '<xor~~esi, esi>', '<test~~dil, 1>', '<cmovne~~esi, ecx>', '<mov~~dword ptr [rsp + 0x60], esi>', '<mov~~ecx, r8d>', '<add~~ecx, esi>', '<mov~~edi, edx>', '<sub~~edi, ecx>', '<xor~~ecx, ecx>', '<cmp~~edi, 0>', '<cmovg~~ecx, edi>', '<xor~~edi, edi>', '<cmp~~r8d, 0>', '<cmove~~ecx, edi>', '<mov~~dword ptr [rsp + 0x64], ecx>', '<sub~~edx, esi>', '<cmp~~ecx, edx>', '<mov~~qword ptr [rsp + 0x98], rax>', '<jge~~0x401e4a>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x6c0]>', '<lea~~rsi, [rip + 0x1ee2]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 79, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x100]>', '<mov~~rcx, qword ptr [rsp + 0x130]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~qword ptr [rsp + 0x120], rcx>', '<mov~~qword ptr [rsp + 0x128], rax>', '<jmp~~0x401900>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x180]>', '<mov~~esi, dword ptr [rsp + 0x19c]>', '<mov~~eax, dword ptr [rsp + 0x1a0]>', '<mov~~ecx, dword ptr [rsp + 0x1a4]>', '<add~~rdx, 1>', '<mov~~edi, esi>', '<cmp~~rdx, rdi>', '<mov~~dword ptr [rsp + 0x1bc], esi>', '<mov~~qword ptr [rsp + 0x1c0], rdx>', '<mov~~dword ptr [rsp + 0x1c8], ecx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x1cc], ecx>', '<mov~~dword ptr [rsp + 0x1d4], eax>', '<jb~~0x401636>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x150]>', '<mov~~rax, qword ptr [rsp + 0x110]>', '<mov~~rdx, qword ptr [rax + 0x800]>', '<mov~~rcx, qword ptr [rax + 0x808]>', '<lea~~rsi, [rip + 0x19f2]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x2a0]>', '<mov~~rdi, qword ptr [rsp + 0x6c0]>', '<mov~~edx, dword ptr [rax + 0x10]>', '<lea~~rsi, [rip + 0x1b81]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x1ec]>', '<mov~~edx, dword ptr [rsp + 0x1d8]>', '<mov~~rdi, qword ptr [rsp + 0x6c0]>', '<lea~~rsi, [rip + 0x17e8]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 0, 'blockInsts': ['<push~~r14>', '<push~~rbx>', '<sub~~rsp, 0x6c8>', '<mov~~dword ptr [rsp + 0x29c], esi>', '<mov~~rcx, rdi>', '<mov~~qword ptr [rsp + 0x2a8], rcx>', '<mov~~rax, qword ptr [rcx + 0x18]>', '<mov~~qword ptr [rsp + 0x2a0], rax>', '<lea~~rax, [rsp + 0x6c0]>', '<lea~~rdi, [rsp + 0x2c0]>', '<mov~~qword ptr [rsp + 0x2b0], rdi>', '<add~~rcx, 0x38>', '<mov~~esi, 0x400>', '<lea~~rdx, [rip + 0x1f3d]>', '<mov~~al, 0>', '<call~~0x500020>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x21c]>', '<mov~~ecx, dword ptr [rsp + 0x22c]>', '<mov~~esi, dword ptr [rsp + 0x210]>', '<mov~~edx, dword ptr [rsp + 0x214]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp + 0x1f8], esi>', '<mov~~dword ptr [rsp + 0x1fc], edx>', '<mov~~dword ptr [rsp + 0x200], ecx>', '<mov~~dword ptr [rsp + 0x204], eax>', '<mov~~rdx, qword ptr [rsp + 0x208]>', '<mov~~r9, qword ptr [rsp + 0x248]>', '<mov~~r8, qword ptr [rsp + 0x220]>', '<mov~~edi, dword ptr [rsp + 0x1f8]>', '<mov~~esi, dword ptr [rsp + 0x1fc]>', '<mov~~ecx, dword ptr [rsp + 0x200]>', '<mov~~eax, dword ptr [rsp + 0x204]>', '<add~~r8, 1>', '<cmp~~r8, r9>', '<mov~~qword ptr [rsp + 0x250], r8>', '<mov~~r8d, eax>', '<mov~~dword ptr [rsp + 0x258], r8d>', '<mov~~r8d, ecx>', '<mov~~dword ptr [rsp + 0x25c], r8d>', '<mov~~r8, rdx>', '<mov~~qword ptr [rsp + 0x260], r8>', '<mov~~r8d, esi>', '<mov~~dword ptr [rsp + 0x268], r8d>', '<mov~~r8d, edi>', '<mov~~dword ptr [rsp + 0x26c], r8d>', '<mov~~dword ptr [rsp + 0x280], edi>', '<mov~~dword ptr [rsp + 0x284], esi>', '<mov~~qword ptr [rsp + 0x288], rdx>', '<mov~~dword ptr [rsp + 0x290], ecx>', '<mov~~dword ptr [rsp + 0x294], eax>', '<jne~~0x401269>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x1e0]>', '<mov~~rcx, qword ptr [rsp + 0x2a0]>', '<mov~~eax, dword ptr [rsp + 0x1d4]>', '<mov~~rcx, qword ptr [rcx + 0x20]>', '<mov~~qword ptr [rsp + 0x140], rcx>', '<movsxd~~rdx, eax>', '<mov~~qword ptr [rsp + 0x148], rdx>', '<mov~~rax, qword ptr [rsp + 0x6c0]>', '<mov~~qword ptr [rsp + 0x150], rax>', '<mov~~esi, dword ptr [rsi]>', '<mov~~dword ptr [rsp + 0x15c], esi>', '<imul~~rdx, rdx, 0x8480>', '<add~~rcx, rdx>', '<add~~rcx, 0x8450>', '<mov~~qword ptr [rsp + 0x160], rcx>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x16c], ecx>', '<cmp~~ecx, 1>', '<mov~~qword ptr [rsp + 0x170], rax>', '<jl~~0x4019ed>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x2a0]>', '<mov~~edi, dword ptr [rsp + 0x29c]>', '<mov~~esi, dword ptr [rsp + 0x280]>', '<mov~~r9d, dword ptr [rsp + 0x284]>', '<mov~~rdx, qword ptr [rsp + 0x288]>', '<mov~~r8d, dword ptr [rsp + 0x290]>', '<mov~~ecx, dword ptr [rsp + 0x294]>', '<mov~~dword ptr [rsp + 0x1d8], r9d>', '<mov~~dword ptr [rsp + 0x1dc], esi>', '<cmp~~edi, 0>', '<sete~~sil>', '<mov~~byte ptr [rsp + 0x1f7], sil>', '<xor~~esi, esi>', '<cmp~~edi, 0>', '<cmove~~rdx, rsi>', '<xor~~esi, esi>', '<cmp~~edi, 0>', '<cmove~~r8d, esi>', '<xor~~esi, esi>', '<cmp~~edi, 0>', '<cmove~~ecx, esi>', '<mov~~rsi, rax>', '<add~~rsi, 8>', '<mov~~qword ptr [rsp + 0x1e0], rsi>', '<mov~~esi, dword ptr [rax + 8]>', '<cmp~~ecx, esi>', '<mov~~eax, ecx>', '<cmovg~~eax, esi>', '<cmp~~r8d, esi>', '<mov~~edi, r8d>', '<cmovg~~edi, esi>', '<cmp~~esi, 0>', '<cmove~~edi, r8d>', '<mov~~dword ptr [rsp + 0x1ec], edi>', '<cmp~~esi, 0>', '<cmove~~eax, ecx>', '<mov~~dword ptr [rsp + 0x1f0], eax>', '<mov~~rdi, qword ptr [rsp + 0x6c0]>', '<lea~~rsi, [rip + 0x1b68]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x6c0]>', '<lea~~rsi, [rip + 0x14c0]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 63, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x180]>', '<mov~~rdx, qword ptr [rsp + 0x270]>', '<mov~~eax, dword ptr [rsp + 0x17c]>', '<add~~eax, 1>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0x19c], edx>', '<mov~~dword ptr [rsp + 0x1a0], ecx>', '<mov~~dword ptr [rsp + 0x1a4], eax>', '<mov~~rdx, qword ptr [rsp + 0x180]>', '<mov~~esi, dword ptr [rsp + 0x19c]>', '<mov~~eax, dword ptr [rsp + 0x1a0]>', '<mov~~ecx, dword ptr [rsp + 0x1a4]>', '<add~~rdx, 1>', '<mov~~edi, esi>', '<cmp~~rdx, rdi>', '<mov~~dword ptr [rsp + 0x1bc], esi>', '<mov~~qword ptr [rsp + 0x1c0], rdx>', '<mov~~dword ptr [rsp + 0x1c8], ecx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x1cc], ecx>', '<mov~~dword ptr [rsp + 0x1d4], eax>', '<jb~~0x401636>']}, {'block_Idx': 42, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0xf8]>', '<mov~~rax, qword ptr [rsp + 0x2a8]>', '<mov~~rcx, qword ptr [rsp + 0x2a0]>', '<add~~rcx, 0x20>', '<mov~~qword ptr [rsp + 0xd0], rcx>', '<add~~rax, 0x30>', '<mov~~qword ptr [rsp + 0xd8], rax>', '<xor~~eax, eax>', '<mov~~edx, eax>', '<xor~~ecx, ecx>', '<mov~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0xe4], esi>', '<mov~~qword ptr [rsp + 0xe8], rdx>', '<mov~~dword ptr [rsp + 0xf0], ecx>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<mov~~rsi, qword ptr [rsp + 0xd8]>', '<mov~~r8, qword ptr [rsp + 0xd0]>', '<mov~~edx, dword ptr [rsp + 0xe4]>', '<mov~~rdi, qword ptr [rsp + 0xe8]>', '<mov~~eax, dword ptr [rsp + 0xf0]>', '<mov~~ecx, dword ptr [rsp + 0xf4]>', '<mov~~dword ptr [rsp + 0xa4], eax>', '<mov~~qword ptr [rsp + 0xa8], rdi>', '<mov~~r8, qword ptr [r8]>', '<mov~~qword ptr [rsp + 0xb0], r8>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rsi + rdi*8]>', '<mov~~rsi, qword ptr [rsi + 8]>', '<mov~~qword ptr [rsp + 0xb8], rsi>', '<cmp~~dword ptr [rsi + 0xc], 1>', '<mov~~dword ptr [rsp + 0xc4], edx>', '<mov~~dword ptr [rsp + 0xc8], ecx>', '<mov~~dword ptr [rsp + 0xcc], eax>', '<jne~~0x401c11>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x150]>', '<mov~~rax, qword ptr [rsp + 0x110]>', '<mov~~edx, dword ptr [rax + 0x810]>', '<mov~~rcx, qword ptr [rax + 0x808]>', '<lea~~rsi, [rip + 0x19dc]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 77, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x60]>', '<mov~~rax, qword ptr [rsp + 0x88]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x28], rcx>', '<mov~~eax, dword ptr [rax]>', '<sub~~eax, edx>', '<cmp~~eax, ecx>', '<jle~~0x401e3a>']}, {'block_Idx': 75, 'blockInsts': ['<jmp~~0x401dfc>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x98]>', '<lea~~rsi, [rip + 0x13b1]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x1e0]>', '<mov~~rcx, qword ptr [rsp + 0x2a0]>', '<mov~~eax, dword ptr [rsp + 0xfc]>', '<mov~~rcx, qword ptr [rcx + 0x20]>', '<mov~~qword ptr [rsp + 0x68], rcx>', '<movsxd~~rdx, eax>', '<mov~~qword ptr [rsp + 0x70], rdx>', '<mov~~rax, qword ptr [rsp + 0x6c0]>', '<mov~~qword ptr [rsp + 0x78], rax>', '<mov~~esi, dword ptr [rsi]>', '<mov~~dword ptr [rsp + 0x84], esi>', '<imul~~rdx, rdx, 0x8480>', '<add~~rcx, rdx>', '<add~~rcx, 0x8450>', '<mov~~qword ptr [rsp + 0x88], rcx>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x94], ecx>', '<cmp~~ecx, 1>', '<mov~~qword ptr [rsp + 0x98], rax>', '<jl~~0x401e4a>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xa8]>', '<mov~~rdx, qword ptr [rsp + 0x270]>', '<mov~~eax, dword ptr [rsp + 0xa4]>', '<add~~eax, 1>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0xc4], edx>', '<mov~~dword ptr [rsp + 0xc8], ecx>', '<mov~~dword ptr [rsp + 0xcc], eax>', '<mov~~rdx, qword ptr [rsp + 0xa8]>', '<mov~~esi, dword ptr [rsp + 0xc4]>', '<mov~~eax, dword ptr [rsp + 0xc8]>', '<mov~~ecx, dword ptr [rsp + 0xcc]>', '<add~~rdx, 1>', '<mov~~edi, esi>', '<cmp~~rdx, rdi>', '<mov~~dword ptr [rsp + 0xe4], esi>', '<mov~~qword ptr [rsp + 0xe8], rdx>', '<mov~~dword ptr [rsp + 0xf0], ecx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0xf4], ecx>', '<mov~~dword ptr [rsp + 0xfc], eax>', '<jb~~0x401ab6>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x6c0]>', '<mov~~qword ptr [rsp + 0x170], rax>', '<mov~~rdi, qword ptr [rsp + 0x170]>', '<lea~~rsi, [rip + 0x180e]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2bc], eax>', '<cmp~~eax, 0>', '<jge~~0x401187>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x27c]>', '<mov~~rcx, qword ptr [rsp + 0x2a8]>', '<mov~~rdx, qword ptr [rsp + 0x2a0]>', '<mov~~rdx, qword ptr [rdx + 0x20]>', '<mov~~qword ptr [rsp + 0x238], rdx>', '<mov~~rcx, qword ptr [rcx + 0x30]>', '<mov~~qword ptr [rsp + 0x240], rcx>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x248], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~rdx, rcx>', '<mov~~qword ptr [rsp + 0x250], rdx>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x258], edx>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x25c], edx>', '<mov~~qword ptr [rsp + 0x260], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x268], ecx>', '<mov~~dword ptr [rsp + 0x26c], eax>', '<mov~~rcx, qword ptr [rsp + 0x238]>', '<mov~~rdx, qword ptr [rsp + 0x250]>', '<mov~~esi, dword ptr [rsp + 0x258]>', '<mov~~edi, dword ptr [rsp + 0x25c]>', '<mov~~rax, qword ptr [rsp + 0x260]>', '<mov~~r8d, dword ptr [rsp + 0x268]>', '<mov~~r9d, dword ptr [rsp + 0x26c]>', '<mov~~dword ptr [rsp + 0x210], r9d>', '<mov~~dword ptr [rsp + 0x214], r8d>', '<mov~~dword ptr [rsp + 0x218], edi>', '<mov~~dword ptr [rsp + 0x21c], esi>', '<mov~~qword ptr [rsp + 0x220], rdx>', '<imul~~rdx, rdx, 0x8480>', '<add~~rcx, rdx>', '<add~~rcx, 0x8450>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x22c], ecx>', '<cmp~~ecx, 0>', '<mov~~qword ptr [rsp + 0x230], rax>', '<jle~~0x401335>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x2a8]>', '<mov~~rsi, qword ptr [rsp + 0x2b0]>', '<add~~rcx, 0x4b0>', '<lea~~rdi, [rsp + 0x6c0]>', '<mov~~edx, 2>', '<xor~~eax, eax>', '<mov~~r8d, eax>', '<call~~0x5000c0>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~edx, dword ptr [rsp + 0x16c]>', '<mov~~r8d, dword ptr [rsp + 0x15c]>', '<mov~~dil, byte ptr [rsp + 0x1f7]>', '<mov~~rsi, qword ptr [rsp + 0x140]>', '<mov~~r9, qword ptr [rsp + 0x148]>', '<mov~~rcx, qword ptr [rsp + 0x2a0]>', '<mov~~ecx, dword ptr [rcx + 0x10]>', '<imul~~r9, r9, 0x8480>', '<add~~rsi, r9>', '<add~~rsi, 0x8460>', '<mov~~qword ptr [rsp + 0x130], rsi>', '<xor~~esi, esi>', '<test~~dil, 1>', '<cmovne~~esi, ecx>', '<mov~~dword ptr [rsp + 0x138], esi>', '<mov~~ecx, r8d>', '<add~~ecx, esi>', '<mov~~edi, edx>', '<sub~~edi, ecx>', '<xor~~ecx, ecx>', '<cmp~~edi, 0>', '<cmovg~~ecx, edi>', '<xor~~edi, edi>', '<cmp~~r8d, 0>', '<cmove~~ecx, edi>', '<mov~~dword ptr [rsp + 0x13c], ecx>', '<sub~~edx, esi>', '<cmp~~ecx, edx>', '<mov~~qword ptr [rsp + 0x170], rax>', '<jge~~0x4019ed>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x1b0]>', '<mov~~r8, qword ptr [rsp + 0x1a8]>', '<mov~~edx, dword ptr [rsp + 0x1bc]>', '<mov~~rdi, qword ptr [rsp + 0x1c0]>', '<mov~~eax, dword ptr [rsp + 0x1c8]>', '<mov~~ecx, dword ptr [rsp + 0x1cc]>', '<mov~~dword ptr [rsp + 0x17c], eax>', '<mov~~qword ptr [rsp + 0x180], rdi>', '<mov~~r8, qword ptr [r8]>', '<mov~~qword ptr [rsp + 0x188], r8>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rsi + rdi*8]>', '<mov~~rsi, qword ptr [rsi + 8]>', '<mov~~qword ptr [rsp + 0x190], rsi>', '<cmp~~dword ptr [rsi + 0xc], 0>', '<mov~~dword ptr [rsp + 0x19c], edx>', '<mov~~dword ptr [rsp + 0x1a0], ecx>', '<mov~~dword ptr [rsp + 0x1a4], eax>', '<jne~~0x40175a>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x2b0]>', '<mov~~rdi, qword ptr [rsp + 0x2a8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x1eec]>', '<mov~~al, 0>', '<call~~0x500018>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x1f7]>', '<test~~al, 1>', '<jne~~0x40154c>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0xa8]>', '<mov~~edx, dword ptr [rsp + 0xa4]>', '<mov~~rax, qword ptr [rsp + 0xb0]>', '<mov~~r10, qword ptr [rsp + 0xb8]>', '<mov~~rdi, qword ptr [rsp + 0x6c0]>', '<mov~~ecx, dword ptr [r10 + 0x60]>', '<imul~~r9, rsi, 0x8480>', '<mov~~r8, rax>', '<add~~r8, r9>', '<add~~r8, 0x8468>', '<mov~~r8, qword ptr [r8]>', '<mov~~r9d, dword ptr [r10 + 0x1d0]>', '<mov~~ebx, dword ptr [r10 + 0x1d4]>', '<imul~~r11, rsi, 0x8480>', '<mov~~r10, rax>', '<add~~r10, r11>', '<add~~r10, 0x8478>', '<mov~~r11d, dword ptr [r10]>', '<imul~~r14, rsi, 0x8480>', '<mov~~r10, rax>', '<add~~r10, r14>', '<add~~r10, 0x847c>', '<mov~~r10d, dword ptr [r10]>', '<imul~~rsi, rsi, 0x8480>', '<add~~rax, rsi>', '<add~~rax, 0x8470>', '<mov~~rax, qword ptr [rax]>', '<lea~~rsi, [rip + 0x16cb]>', '<mov~~dword ptr [rsp], ebx>', '<mov~~dword ptr [rsp + 8], r11d>', '<mov~~dword ptr [rsp + 0x10], r10d>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 70, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edx, dword ptr [rax + 0x810]>', '<mov~~rcx, qword ptr [rax + 0x808]>', '<lea~~rsi, [rip + 0x156a]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 83, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x11f]>', '<mov~~rcx, qword ptr [rsp + 0x120]>', '<mov~~rdx, qword ptr [rsp + 0x128]>', '<mov~~qword ptr [rsp + 0x108], rdx>', '<mov~~rcx, qword ptr [rcx + rdx*8]>', '<mov~~qword ptr [rsp + 0x110], rcx>', '<test~~al, 1>', '<jne~~0x401931>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x180]>', '<mov~~edx, dword ptr [rsp + 0x17c]>', '<mov~~rax, qword ptr [rsp + 0x188]>', '<mov~~r10, qword ptr [rsp + 0x190]>', '<mov~~rdi, qword ptr [rsp + 0x6c0]>', '<mov~~ecx, dword ptr [r10 + 0x60]>', '<imul~~r9, rsi, 0x8480>', '<mov~~r8, rax>', '<add~~r8, r9>', '<add~~r8, 0x8468>', '<mov~~r8, qword ptr [r8]>', '<mov~~r9d, dword ptr [r10 + 0x94]>', '<mov~~r10d, dword ptr [r10 + 0x98]>', '<imul~~rsi, rsi, 0x8480>', '<add~~rax, rsi>', '<add~~rax, 0x8470>', '<mov~~rax, qword ptr [rax]>', '<lea~~rsi, [rip + 0x1a88]>', '<mov~~dword ptr [rsp], r10d>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x2a0]>', '<cmp~~dword ptr [rax + 0x2c], 0>', '<je~~0x401e60>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x170]>', '<lea~~rsi, [rip + 0x180e]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x6c0]>', '<lea~~rsi, [rip + 0x1baa]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x6c0]>', '<call~~0x5000d0>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x6c0]>', '<mov~~qword ptr [rsp + 0x98], rax>', '<mov~~rdi, qword ptr [rsp + 0x98]>', '<lea~~rsi, [rip + 0x13b1]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x2a8]>', '<mov~~rcx, rax>', '<add~~rcx, 0x2c>', '<mov~~qword ptr [rsp + 0x270], rcx>', '<mov~~edx, dword ptr [rax + 0x2c]>', '<mov~~dword ptr [rsp + 0x27c], edx>', '<xor~~eax, eax>', '<xor~~ecx, ecx>', '<cmp~~edx, 0>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x280], edx>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x284], edx>', '<mov~~qword ptr [rsp + 0x288], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x290], ecx>', '<mov~~dword ptr [rsp + 0x294], eax>', '<je~~0x40147f>']}, {'block_Idx': 65, 'blockInsts': ['<jmp~~0x401dd7>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2bc]>', '<mov~~dword ptr [rsp + 0x298], eax>', '<jmp~~0x401e99>']}, {'block_Idx': 73, 'blockInsts': ['<jmp~~0x40198a>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x6c0]>', '<call~~0x500058>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x240]>', '<mov~~rcx, qword ptr [rsp + 0x220]>', '<mov~~rdx, qword ptr [rsp + 0x230]>', '<mov~~qword ptr [rsp + 0x208], rdx>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0xc], 0>', '<jne~~0x4013a0>']}, {'block_Idx': 85, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x47]>', '<mov~~rcx, qword ptr [rsp + 0x48]>', '<mov~~rdx, qword ptr [rsp + 0x50]>', '<mov~~qword ptr [rsp + 0x30], rdx>', '<mov~~rcx, qword ptr [rcx + rdx*8]>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<test~~al, 1>', '<jne~~0x401daf>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x270]>', '<mov~~ecx, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0xf8], ecx>', '<mov~~eax, 0xffffffff>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0xfc], eax>', '<je~~0x401c63>']}, {'block_Idx': 64, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x298], eax>', '<mov~~eax, dword ptr [rsp + 0x298]>', '<add~~rsp, 0x6c8>', '<pop~~rbx>', '<pop~~r14>', '<ret~~>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x64]>', '<mov~~dl, byte ptr [rsp + 0x1f7]>', '<mov~~rcx, qword ptr [rsp + 0x58]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~rsi, qword ptr [rcx]>', '<mov~~esi, dword ptr [rsi + 0x810]>', '<test~~esi, esi>', '<setg~~sil>', '<or~~dl, sil>', '<mov~~byte ptr [rsp + 0x47], dl>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x48], rcx>', '<mov~~qword ptr [rsp + 0x50], rax>', '<mov~~al, byte ptr [rsp + 0x47]>', '<mov~~rcx, qword ptr [rsp + 0x48]>', '<mov~~rdx, qword ptr [rsp + 0x50]>', '<mov~~qword ptr [rsp + 0x30], rdx>', '<mov~~rcx, qword ptr [rcx + rdx*8]>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<test~~al, 1>', '<jne~~0x401daf>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rcx, qword ptr [rsp + 0x58]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~qword ptr [rsp + 0x48], rcx>', '<mov~~qword ptr [rsp + 0x50], rax>', '<jmp~~0x401d8d>']}, {'block_Idx': 20, 'blockInsts': ['<jmp~~0x40156d>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x1f0]>', '<mov~~edx, dword ptr [rsp + 0x1dc]>', '<mov~~rdi, qword ptr [rsp + 0x6c0]>', '<lea~~rsi, [rip + 0x1b77]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x270]>', '<mov~~ecx, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x1d0], ecx>', '<mov~~eax, 0xffffffff>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x1d4], eax>', '<je~~0x4017ac>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xa8]>', '<mov~~esi, dword ptr [rsp + 0xc4]>', '<mov~~eax, dword ptr [rsp + 0xc8]>', '<mov~~ecx, dword ptr [rsp + 0xcc]>', '<add~~rdx, 1>', '<mov~~edi, esi>', '<cmp~~rdx, rdi>', '<mov~~dword ptr [rsp + 0xe4], esi>', '<mov~~qword ptr [rsp + 0xe8], rdx>', '<mov~~dword ptr [rsp + 0xf0], ecx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0xf4], ecx>', '<mov~~dword ptr [rsp + 0xfc], eax>', '<jb~~0x401ab6>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x1d0]>', '<mov~~rax, qword ptr [rsp + 0x2a8]>', '<mov~~rcx, qword ptr [rsp + 0x2a0]>', '<add~~rcx, 0x20>', '<mov~~qword ptr [rsp + 0x1a8], rcx>', '<add~~rax, 0x30>', '<mov~~qword ptr [rsp + 0x1b0], rax>', '<xor~~eax, eax>', '<mov~~edx, eax>', '<xor~~ecx, ecx>', '<mov~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x1bc], esi>', '<mov~~qword ptr [rsp + 0x1c0], rdx>', '<mov~~dword ptr [rsp + 0x1c8], ecx>', '<mov~~dword ptr [rsp + 0x1cc], eax>', '<mov~~rsi, qword ptr [rsp + 0x1b0]>', '<mov~~r8, qword ptr [rsp + 0x1a8]>', '<mov~~edx, dword ptr [rsp + 0x1bc]>', '<mov~~rdi, qword ptr [rsp + 0x1c0]>', '<mov~~eax, dword ptr [rsp + 0x1c8]>', '<mov~~ecx, dword ptr [rsp + 0x1cc]>', '<mov~~dword ptr [rsp + 0x17c], eax>', '<mov~~qword ptr [rsp + 0x180], rdi>', '<mov~~r8, qword ptr [r8]>', '<mov~~qword ptr [rsp + 0x188], r8>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rsi + rdi*8]>', '<mov~~rsi, qword ptr [rsi + 8]>', '<mov~~qword ptr [rsp + 0x190], rsi>', '<cmp~~dword ptr [rsi + 0xc], 0>', '<mov~~dword ptr [rsp + 0x19c], edx>', '<mov~~dword ptr [rsp + 0x1a0], ecx>', '<mov~~dword ptr [rsp + 0x1a4], eax>', '<jne~~0x40175a>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x22c]>', '<mov~~rax, qword ptr [rsp + 0x238]>', '<mov~~rdx, qword ptr [rsp + 0x220]>', '<imul~~rdx, rdx, 0x8480>', '<add~~rax, rdx>', '<add~~rax, 0x8460>', '<mov~~rax, qword ptr [rax]>', '<add~~ecx, -1>', '<mov~~ecx, ecx>', '<mov~~rcx, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rcx + 0x800]>', '<add~~rax, qword ptr [rcx + 0x808]>', '<mov~~qword ptr [rsp + 0x230], rax>', '<mov~~rax, qword ptr [rsp + 0x240]>', '<mov~~rcx, qword ptr [rsp + 0x220]>', '<mov~~rdx, qword ptr [rsp + 0x230]>', '<mov~~qword ptr [rsp + 0x208], rdx>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0xc], 0>', '<jne~~0x4013a0>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0xd8]>', '<mov~~r8, qword ptr [rsp + 0xd0]>', '<mov~~edx, dword ptr [rsp + 0xe4]>', '<mov~~rdi, qword ptr [rsp + 0xe8]>', '<mov~~eax, dword ptr [rsp + 0xf0]>', '<mov~~ecx, dword ptr [rsp + 0xf4]>', '<mov~~dword ptr [rsp + 0xa4], eax>', '<mov~~qword ptr [rsp + 0xa8], rdi>', '<mov~~r8, qword ptr [r8]>', '<mov~~qword ptr [rsp + 0xb0], r8>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rsi + rdi*8]>', '<mov~~rsi, qword ptr [rsi + 8]>', '<mov~~qword ptr [rsp + 0xb8], rsi>', '<cmp~~dword ptr [rsi + 0xc], 1>', '<mov~~dword ptr [rsp + 0xc4], edx>', '<mov~~dword ptr [rsp + 0xc8], ecx>', '<mov~~dword ptr [rsp + 0xcc], eax>', '<jne~~0x401c11>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x138]>', '<mov~~rax, qword ptr [rsp + 0x160]>', '<mov~~rcx, qword ptr [rsp + 0x108]>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x100], rcx>', '<mov~~eax, dword ptr [rax]>', '<sub~~eax, edx>', '<cmp~~eax, ecx>', '<jle~~0x4019dd>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x78]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rdx, qword ptr [rax + 0x800]>', '<mov~~rcx, qword ptr [rax + 0x808]>', '<lea~~rsi, [rip + 0x157a]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x208]>', '<mov~~r9, qword ptr [rsp + 0x248]>', '<mov~~r8, qword ptr [rsp + 0x220]>', '<mov~~edi, dword ptr [rsp + 0x1f8]>', '<mov~~esi, dword ptr [rsp + 0x1fc]>', '<mov~~ecx, dword ptr [rsp + 0x200]>', '<mov~~eax, dword ptr [rsp + 0x204]>', '<add~~r8, 1>', '<cmp~~r8, r9>', '<mov~~qword ptr [rsp + 0x250], r8>', '<mov~~r8d, eax>', '<mov~~dword ptr [rsp + 0x258], r8d>', '<mov~~r8d, ecx>', '<mov~~dword ptr [rsp + 0x25c], r8d>', '<mov~~r8, rdx>', '<mov~~qword ptr [rsp + 0x260], r8>', '<mov~~r8d, esi>', '<mov~~dword ptr [rsp + 0x268], r8d>', '<mov~~r8d, edi>', '<mov~~dword ptr [rsp + 0x26c], r8d>', '<mov~~dword ptr [rsp + 0x280], edi>', '<mov~~dword ptr [rsp + 0x284], esi>', '<mov~~qword ptr [rsp + 0x288], rdx>', '<mov~~dword ptr [rsp + 0x290], ecx>', '<mov~~dword ptr [rsp + 0x294], eax>', '<jne~~0x401269>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x2a0]>', '<cmp~~dword ptr [rax + 0x28], 0>', '<je~~0x401a03>']}], 'cfg_edge_info': [(81, 85), (41, 49), (58, 65), (38, 44), (17, 21), (65, 70), (28, 30), (76, 79), (37, 42), (53, 62), (42, 50), (47, 64), (85, 66), (2, 4), (79, 83), (73, 76), (22, 12), (83, 62), (20, 24), (70, 77), (63, 38), (39, 46), (49, 48), (27, 29), (55, 45), (0, 2), (66, 75), (30, 36), (46, 38), (5, 9), (77, 80), (38, 43), (31, 37), (80, 30), (13, 16), (53, 61), (62, 73), (12, 17), (85, 65), (36, 47), (60, 50), (48, 30), (83, 61), (4, 6), (35, 39), (29, 35), (50, 67), (78, 28), (10, 12), (27, 28), (41, 48), (21, 24), (44, 53), (75, 77), (17, 20), (55, 46), (76, 78), (37, 41), (6, 10), (45, 63), (67, 60), (58, 66), (51, 60), (28, 31), (68, 76), (24, 27), (42, 51), (77, 81), (19, 12), (39, 45), (9, 11), (63, 55), (4, 5), (35, 38), (49, 58), (60, 51), (44, 43), (61, 68), (46, 55), (10, 13), (67, 41), (13, 15), (43, 28), (51, 41)], 'cdg_edge_info': [(55, 63), (60, 50), (4, 64), (41, 49), (4, 9), (4, 6), (4, 12), (77, 81), (35, 39), (85, 70), (4, 24), (38, 44), (17, 21), (39, 45), (4, 27), (4, 30), (76, 79), (63, 55), (37, 42), (76, 76), (39, 63), (44, 78), (4, 36), (49, 80), (53, 62), (53, 68), (49, 77), (76, 83), (4, 5), (42, 50), (58, 70), (77, 77), (60, 67), (4, 11), (44, 53), (4, 17), (85, 66), (17, 20), (49, 58), (4, 47), (28, 41), (67, 60), (58, 66), (4, 10), (83, 62), (83, 68), (77, 85), (42, 67), (4, 28), (10, 13), (44, 76), (28, 31), (28, 37), (27, 35), (27, 29), (55, 45), (27, 38)], 'ddg_edge_info': [(41, 49), (81, 85), (4, 9), (50, 70), (38, 44), (0, 5), (83, 76), (68, 66), (76, 79), (38, 62), (37, 42), (29, 68), (49, 80), (47, 64), (70, 66), (0, 44), (62, 83), (10, 63), (85, 66), (6, 41), (2, 4), (6, 50), (31, 49), (66, 80), (31, 58), (6, 13), (24, 28), (79, 83), (62, 76), (45, 78), (83, 62), (70, 77), (63, 38), (0, 64), (12, 29), (58, 81), (31, 42), (85, 77), (29, 45), (12, 38), (68, 70), (29, 63), (68, 79), (55, 45), (45, 53), (50, 49), (55, 63), (24, 30), (45, 62), (62, 78), (0, 39), (38, 41), (29, 38), (0, 2), (85, 70), (6, 36), (12, 31), (6, 45), (78, 31), (13, 60), (12, 49), (38, 68), (45, 55), (30, 36), (53, 68), (0, 41), (5, 64), (6, 29), (5, 9), (12, 24), (6, 38), (31, 37), (6, 47), (58, 85), (80, 30), (66, 77), (10, 35), (53, 70), (31, 67), (53, 79), (12, 17), (6, 31), (83, 68), (9, 64), (13, 55), (66, 70), (41, 80), (2, 6), (44, 76), (39, 55), (45, 50), (62, 66), (36, 47), (0, 27), (31, 60), (10, 37), (45, 68), (60, 50), (6, 24), (50, 58), (35, 39), (29, 35), (50, 67), (29, 44), (78, 28), (10, 67), (21, 49), (10, 12), (44, 78), (62, 68), (49, 77), (12, 58), (0, 38), (38, 77), (31, 80), (50, 60), (21, 24), (12, 21), (13, 41), (44, 53), (41, 66), (78, 30), (70, 81), (0, 4), (0, 13), (53, 58), (37, 41), (62, 70), (68, 83), (45, 63), (6, 10), (12, 60), (67, 60), (50, 80), (41, 77), (45, 38), (12, 44), (68, 76), (12, 53), (31, 66), (6, 12), (0, 42), (24, 27), (6, 21), (29, 78), (6, 30), (77, 81), (42, 60), (41, 70), (70, 85), (2, 5), (31, 41), (29, 53), (31, 50), (63, 55), (29, 62), (66, 81), (68, 78), (12, 55), (24, 29), (6, 78), (35, 38), (13, 38), (58, 70), (60, 67), (50, 66), (53, 83), (0, 10), (68, 62), (49, 58), (29, 55), (0, 28), (38, 76), (50, 41), (31, 70), (6, 80), (24, 31), (62, 79), (0, 49), (70, 80), (29, 39), (10, 13), (0, 12), (45, 44), (21, 44), (12, 41), (38, 60), (67, 41), (0, 21), (66, 85), (38, 78)]}]}
{'write_manifest': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%r14'}, {'instIndex': 1, 'instruction': 'pushq\t%rbx'}, {'instIndex': 2, 'instruction': 'subq\t$0x6c8, %rsp                     # imm = 0x6C8'}, {'instIndex': 3, 'instruction': 'movl\t%esi, 0x29c(%rsp)                 # 4-byte Spill'}, {'instIndex': 4, 'instruction': 'movq\t%rdi, %rcx'}, {'instIndex': 5, 'instruction': 'movq\t%rcx, 0x2a8(%rsp)                 # 8-byte Spill'}, {'instIndex': 6, 'instruction': 'movq\t0x18(%rcx), %rax'}, {'instIndex': 7, 'instruction': 'movq\t%rax, 0x2a0(%rsp)                 # 8-byte Spill'}, {'instIndex': 8, 'instruction': 'leaq\t0x6c0(%rsp), %rax'}, {'instIndex': 9, 'instruction': 'leaq\t0x2c0(%rsp), %rdi'}, {'instIndex': 10, 'instruction': 'movq\t%rdi, 0x2b0(%rsp)                 # 8-byte Spill'}, {'instIndex': 11, 'instruction': 'addq\t$0x38, %rcx'}, {'instIndex': 12, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 13, 'instruction': 'leaq\t.L.str.0x20(%rip), %rdx'}, {'instIndex': 14, 'instruction': 'movb\t$0, %al'}, {'instIndex': 15, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 18, 'instruction': 'addq\t$0x4b0, %rcx                     # imm = 0x4B0'}, {'instIndex': 19, 'instruction': 'leaq\t0x6c0(%rsp), %rdi'}, {'instIndex': 20, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 21, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 22, 'instruction': 'movl\t%eax, %r8d'}, {'instIndex': 23, 'instruction': 'callq\tavio_open2@PLT'}, {'instIndex': 25, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 26, 'instruction': 'jge\t.LBB5_2'}, {'instIndex': 29, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 30, 'instruction': 'leaq\t.L.str.0x21(%rip), %rdx'}, {'instIndex': 31, 'instruction': 'movb\t$0, %al'}, {'instIndex': 32, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 35, 'instruction': 'jmp\t.LBB5_45'}, {'instIndex': 36, 'instruction': 'movq\t0x6c0(%rsp), %rdi'}, {'instIndex': 37, 'instruction': 'leaq\t.L.str.0x22(%rip), %rsi'}, {'instIndex': 38, 'instruction': 'movb\t$0, %al'}, {'instIndex': 39, 'instruction': 'callq\tavio_printf@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 639, 'instruction': 'movq\t0x6c0(%rsp), %rdi'}, {'instIndex': 640, 'instruction': 'leaq\t.L.str.0x2b(%rip), %rsi'}, {'instIndex': 641, 'instruction': 'movb\t$0, %al'}, {'instIndex': 642, 'instruction': 'callq\tavio_printf@PLT'}, {'instIndex': 643, 'instruction': 'movq\t0x6c0(%rsp), %rdi'}, {'instIndex': 644, 'instruction': 'callq\tavio_flush@PLT'}, {'instIndex': 645, 'instruction': 'movq\t0x6c0(%rsp), %rdi'}, {'instIndex': 646, 'instruction': 'callq\tavio_close@PLT'}, {'instIndex': 650, 'instruction': 'addq\t$0x6c8, %rsp                     # imm = 0x6C8'}, {'instIndex': 651, 'instruction': 'popq\t%rbx'}, {'instIndex': 652, 'instruction': 'popq\t%r14'}, {'instIndex': 653, 'instruction': 'retq'}]}]}
The case of compiler clang with optimization O3.
Patched source code file: smoothstreamingenc.c
Patched function: 1---static int write_manifest 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_before/O3/smoothstreamingenc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_before/O3/smoothstreamingenc.s---write_manifest---before
function id: 5
function flag: True
There are 734 instructions for function: write_manifest in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '210', 'end': 224}, 'before': {'start': '210', 'end': 223}}}, {'modifyIndex': 2, 'line': {'after': {'start': '279', 'end': 285}, 'before': {'start': '278', 'end': 283}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%r14'}, {'instIndex': 1, 'instruction': 'pushq\t%rbx'}, {'instIndex': 2, 'instruction': 'subq\t$0x6e8, %rsp                     # imm = 0x6E8'}, {'instIndex': 3, 'instruction': 'movl\t%esi, 0x2bc(%rsp)                 # 4-byte Spill'}, {'instIndex': 4, 'instruction': 'movq\t%rdi, %rcx'}, {'instIndex': 5, 'instruction': 'movq\t%rcx, 0x2c8(%rsp)                 # 8-byte Spill'}, {'instIndex': 6, 'instruction': 'movq\t0x18(%rcx), %rax'}, {'instIndex': 7, 'instruction': 'movq\t%rax, 0x2c0(%rsp)                 # 8-byte Spill'}, {'instIndex': 8, 'instruction': 'leaq\t0x6e0(%rsp), %rax'}, {'instIndex': 9, 'instruction': 'leaq\t0x2e0(%rsp), %rdi'}, {'instIndex': 10, 'instruction': 'movq\t%rdi, 0x2d0(%rsp)                 # 8-byte Spill'}, {'instIndex': 11, 'instruction': 'addq\t$0x38, %rcx'}, {'instIndex': 12, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 13, 'instruction': 'leaq\t.L.str.0x20(%rip), %rdx'}, {'instIndex': 14, 'instruction': 'movb\t$0, %al'}, {'instIndex': 15, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 18, 'instruction': 'addq\t$0x4b0, %rcx                     # imm = 0x4B0'}, {'instIndex': 19, 'instruction': 'leaq\t0x6e0(%rsp), %rdi'}, {'instIndex': 20, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 21, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 22, 'instruction': 'movl\t%eax, %r8d'}, {'instIndex': 23, 'instruction': 'callq\tavio_open2@PLT'}, {'instIndex': 25, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 26, 'instruction': 'jge\t.LBB5_2'}, {'instIndex': 29, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 30, 'instruction': 'leaq\t.L.str.0x21(%rip), %rdx'}, {'instIndex': 31, 'instruction': 'movb\t$0, %al'}, {'instIndex': 32, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 35, 'instruction': 'jmp\t.LBB5_41'}, {'instIndex': 36, 'instruction': 'movq\t0x6e0(%rsp), %rdi'}, {'instIndex': 37, 'instruction': 'leaq\t.L.str.0x22(%rip), %rsi'}, {'instIndex': 38, 'instruction': 'movb\t$0, %al'}, {'instIndex': 39, 'instruction': 'callq\tavio_printf@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 719, 'instruction': 'movq\t0x6e0(%rsp), %rdi'}, {'instIndex': 720, 'instruction': 'leaq\t.L.str.0x2b(%rip), %rsi'}, {'instIndex': 721, 'instruction': 'movb\t$0, %al'}, {'instIndex': 722, 'instruction': 'callq\tavio_printf@PLT'}, {'instIndex': 723, 'instruction': 'movq\t0x6e0(%rsp), %rdi'}, {'instIndex': 724, 'instruction': 'callq\tavio_flush@PLT'}, {'instIndex': 725, 'instruction': 'movq\t0x6e0(%rsp), %rdi'}, {'instIndex': 726, 'instruction': 'callq\tavio_close@PLT'}, {'instIndex': 730, 'instruction': 'addq\t$0x6e8, %rsp                     # imm = 0x6E8'}, {'instIndex': 731, 'instruction': 'popq\t%rbx'}, {'instIndex': 732, 'instruction': 'popq\t%r14'}, {'instIndex': 733, 'instruction': 'retq'}]}]
Patched function: 1---static int write_manifest 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_before/O3/smoothstreamingenc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_before/O3/smoothstreamingenc.s---write_manifest---before
function id: 5
function flag: True
There are 734 instructions for function: write_manifest in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '210', 'end': 224}, 'before': {'start': '210', 'end': 223}}}, {'modifyIndex': 2, 'line': {'after': {'start': '279', 'end': 285}, 'before': {'start': '278', 'end': 283}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%r14'}, {'instIndex': 1, 'instruction': 'pushq\t%rbx'}, {'instIndex': 2, 'instruction': 'subq\t$0x6e8, %rsp                     # imm = 0x6E8'}, {'instIndex': 3, 'instruction': 'movl\t%esi, 0x2bc(%rsp)                 # 4-byte Spill'}, {'instIndex': 4, 'instruction': 'movq\t%rdi, %rcx'}, {'instIndex': 5, 'instruction': 'movq\t%rcx, 0x2c8(%rsp)                 # 8-byte Spill'}, {'instIndex': 6, 'instruction': 'movq\t0x18(%rcx), %rax'}, {'instIndex': 7, 'instruction': 'movq\t%rax, 0x2c0(%rsp)                 # 8-byte Spill'}, {'instIndex': 8, 'instruction': 'leaq\t0x6e0(%rsp), %rax'}, {'instIndex': 9, 'instruction': 'leaq\t0x2e0(%rsp), %rdi'}, {'instIndex': 10, 'instruction': 'movq\t%rdi, 0x2d0(%rsp)                 # 8-byte Spill'}, {'instIndex': 11, 'instruction': 'addq\t$0x38, %rcx'}, {'instIndex': 12, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 13, 'instruction': 'leaq\t.L.str.0x20(%rip), %rdx'}, {'instIndex': 14, 'instruction': 'movb\t$0, %al'}, {'instIndex': 15, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 18, 'instruction': 'addq\t$0x4b0, %rcx                     # imm = 0x4B0'}, {'instIndex': 19, 'instruction': 'leaq\t0x6e0(%rsp), %rdi'}, {'instIndex': 20, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 21, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 22, 'instruction': 'movl\t%eax, %r8d'}, {'instIndex': 23, 'instruction': 'callq\tavio_open2@PLT'}, {'instIndex': 25, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 26, 'instruction': 'jge\t.LBB5_2'}, {'instIndex': 29, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 30, 'instruction': 'leaq\t.L.str.0x21(%rip), %rdx'}, {'instIndex': 31, 'instruction': 'movb\t$0, %al'}, {'instIndex': 32, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 35, 'instruction': 'jmp\t.LBB5_41'}, {'instIndex': 36, 'instruction': 'movq\t0x6e0(%rsp), %rdi'}, {'instIndex': 37, 'instruction': 'leaq\t.L.str.0x22(%rip), %rsi'}, {'instIndex': 38, 'instruction': 'movb\t$0, %al'}, {'instIndex': 39, 'instruction': 'callq\tavio_printf@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 719, 'instruction': 'movq\t0x6e0(%rsp), %rdi'}, {'instIndex': 720, 'instruction': 'leaq\t.L.str.0x2b(%rip), %rsi'}, {'instIndex': 721, 'instruction': 'movb\t$0, %al'}, {'instIndex': 722, 'instruction': 'callq\tavio_printf@PLT'}, {'instIndex': 723, 'instruction': 'movq\t0x6e0(%rsp), %rdi'}, {'instIndex': 724, 'instruction': 'callq\tavio_flush@PLT'}, {'instIndex': 725, 'instruction': 'movq\t0x6e0(%rsp), %rdi'}, {'instIndex': 726, 'instruction': 'callq\tavio_close@PLT'}, {'instIndex': 730, 'instruction': 'addq\t$0x6e8, %rsp                     # imm = 0x6E8'}, {'instIndex': 731, 'instruction': 'popq\t%rbx'}, {'instIndex': 732, 'instruction': 'popq\t%r14'}, {'instIndex': 733, 'instruction': 'retq'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_before/O3/smoothstreamingenc.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_before/O3/smoothstreamingenc.o---before
The extraction of function: write_manifest
Analyzing the binaries to generate subCFGs from patched function ...
It has 363 nodes and 708 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 734 instructions in binary file.
[4198592, 4198679, 4198725, 4198737, 4198772, 4198791]
[4202460, 4202482, 4202495, 4202508, 4202517]
The execution time of patched subCFG information extraction via angr: 0:00:00.649120
{'write_manifest': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x4010c0>, <DisassemblerInsn "push" for 0x4010c2>, <DisassemblerInsn "sub" for 0x4010c3>, <DisassemblerInsn "mov" for 0x4010ca>, <DisassemblerInsn "mov" for 0x4010d1>, <DisassemblerInsn "mov" for 0x4010d4>, <DisassemblerInsn "mov" for 0x4010dc>, <DisassemblerInsn "mov" for 0x4010e0>, <DisassemblerInsn "lea" for 0x4010e8>, <DisassemblerInsn "lea" for 0x4010f0>, <DisassemblerInsn "mov" for 0x4010f8>, <DisassemblerInsn "add" for 0x401100>, <DisassemblerInsn "mov" for 0x401104>, <DisassemblerInsn "lea" for 0x401109>, <DisassemblerInsn "mov" for 0x401110>, <DisassemblerInsn "call" for 0x401112>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402015>, <DisassemblerInsn "add" for 0x40201c>, <DisassemblerInsn "pop" for 0x402023>, <DisassemblerInsn "pop" for 0x402024>, <DisassemblerInsn "ret" for 0x402026>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401145>, <DisassemblerInsn "cmp" for 0x40114c>, <DisassemblerInsn "jge" for 0x40114f>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40119d>, <DisassemblerInsn "mov" for 0x4011a5>, <DisassemblerInsn "add" for 0x4011a8>, <DisassemblerInsn "mov" for 0x4011ac>, <DisassemblerInsn "mov" for 0x4011b4>, <DisassemblerInsn "mov" for 0x4011b7>, <DisassemblerInsn "xor" for 0x4011be>, <DisassemblerInsn "xor" for 0x4011c0>, <DisassemblerInsn "cmp" for 0x4011c2>, <DisassemblerInsn "mov" for 0x4011c5>, <DisassemblerInsn "mov" for 0x4011c7>, <DisassemblerInsn "mov" for 0x4011ce>, <DisassemblerInsn "mov" for 0x4011d0>, <DisassemblerInsn "mov" for 0x4011d7>, <DisassemblerInsn "mov" for 0x4011df>, <DisassemblerInsn "mov" for 0x4011e1>, <DisassemblerInsn "mov" for 0x4011e8>, <DisassemblerInsn "je" for 0x4011ef>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401117>, <DisassemblerInsn "mov" for 0x40111f>, <DisassemblerInsn "add" for 0x401127>, <DisassemblerInsn "lea" for 0x40112e>, <DisassemblerInsn "mov" for 0x401136>, <DisassemblerInsn "xor" for 0x40113b>, <DisassemblerInsn "mov" for 0x40113d>, <DisassemblerInsn "call" for 0x401140>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401187>, <DisassemblerInsn "lea" for 0x40118f>, <DisassemblerInsn "mov" for 0x401196>, <DisassemblerInsn "call" for 0x401198>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401151>, <DisassemblerInsn "mov" for 0x401159>, <DisassemblerInsn "mov" for 0x401161>, <DisassemblerInsn "lea" for 0x401166>, <DisassemblerInsn "mov" for 0x40116d>, <DisassemblerInsn "call" for 0x40116f>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401174>, <DisassemblerInsn "mov" for 0x40117b>, <DisassemblerInsn "jmp" for 0x401182>]'}], 'cfg_block_detailed_info': [{'block_Idx': 0, 'blockInsts': ['<push~~r14>', '<push~~rbx>', '<sub~~rsp, 0x6e8>', '<mov~~dword ptr [rsp + 0x2bc], esi>', '<mov~~rcx, rdi>', '<mov~~qword ptr [rsp + 0x2c8], rcx>', '<mov~~rax, qword ptr [rcx + 0x18]>', '<mov~~qword ptr [rsp + 0x2c0], rax>', '<lea~~rax, [rsp + 0x6e0]>', '<lea~~rdi, [rsp + 0x2e0]>', '<mov~~qword ptr [rsp + 0x2d0], rdi>', '<add~~rcx, 0x38>', '<mov~~esi, 0x400>', '<lea~~rdx, [rip + 0x20bd]>', '<mov~~al, 0>', '<call~~0x500020>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2b8]>', '<add~~rsp, 0x6e8>', '<pop~~rbx>', '<pop~~r14>', '<ret~~>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2dc], eax>', '<cmp~~eax, 0>', '<jge~~0x401187>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x2c8]>', '<mov~~rcx, rax>', '<add~~rcx, 0x2c>', '<mov~~qword ptr [rsp + 0x290], rcx>', '<mov~~edx, dword ptr [rax + 0x2c]>', '<mov~~dword ptr [rsp + 0x29c], edx>', '<xor~~eax, eax>', '<xor~~ecx, ecx>', '<cmp~~edx, 0>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x2a0], edx>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x2a4], edx>', '<mov~~qword ptr [rsp + 0x2a8], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x2b0], ecx>', '<mov~~dword ptr [rsp + 0x2b4], eax>', '<je~~0x40147f>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x2c8]>', '<mov~~rsi, qword ptr [rsp + 0x2d0]>', '<add~~rcx, 0x4b0>', '<lea~~rdi, [rsp + 0x6e0]>', '<mov~~edx, 2>', '<xor~~eax, eax>', '<mov~~r8d, eax>', '<call~~0x5000c0>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x6e0]>', '<lea~~rsi, [rip + 0x2062]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x2d0]>', '<mov~~rdi, qword ptr [rsp + 0x2c8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x206c]>', '<mov~~al, 0>', '<call~~0x500018>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2dc]>', '<mov~~dword ptr [rsp + 0x2b8], eax>', '<jmp~~0x402015>']}], 'cfg_edge_info': [(0, 1), (2, 4), (1, 2), (4, 6), (5, 7), (2, 3), (3, 5)]}, {'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401174>, <DisassemblerInsn "mov" for 0x40117b>, <DisassemblerInsn "jmp" for 0x401182>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fc6>, <DisassemblerInsn "lea" for 0x401fce>, <DisassemblerInsn "mov" for 0x401fd5>, <DisassemblerInsn "call" for 0x401fd7>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fff>, <DisassemblerInsn "call" for 0x402007>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "xor" for 0x40200c>, <DisassemblerInsn "mov" for 0x40200e>, <DisassemblerInsn "mov" for 0x402015>, <DisassemblerInsn "add" for 0x40201c>, <DisassemblerInsn "pop" for 0x402023>, <DisassemblerInsn "pop" for 0x402024>, <DisassemblerInsn "ret" for 0x402026>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402015>, <DisassemblerInsn "add" for 0x40201c>, <DisassemblerInsn "pop" for 0x402023>, <DisassemblerInsn "pop" for 0x402024>, <DisassemblerInsn "ret" for 0x402026>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ab8>, <DisassemblerInsn "cmp" for 0x401ac0>, <DisassemblerInsn "je" for 0x401ac4>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fdc>, <DisassemblerInsn "lea" for 0x401fe4>, <DisassemblerInsn "mov" for 0x401feb>, <DisassemblerInsn "call" for 0x401fed>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ff2>, <DisassemblerInsn "call" for 0x401ffa>]'}], 'cfg_block_detailed_info': [{'block_Idx': 5, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2dc]>', '<mov~~dword ptr [rsp + 0x2b8], eax>', '<jmp~~0x402015>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x6e0]>', '<lea~~rsi, [rip + 0x13b5]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x6e0]>', '<call~~0x5000d0>']}, {'block_Idx': 37, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x2b8], eax>', '<mov~~eax, dword ptr [rsp + 0x2b8]>', '<add~~rsp, 0x6e8>', '<pop~~rbx>', '<pop~~r14>', '<ret~~>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2b8]>', '<add~~rsp, 0x6e8>', '<pop~~rbx>', '<pop~~r14>', '<ret~~>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x2c0]>', '<cmp~~dword ptr [rax + 0x2c], 0>', '<je~~0x401fdc>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x6e0]>', '<lea~~rsi, [rip + 0x14c4]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x6e0]>', '<call~~0x500058>']}], 'cfg_edge_info': [(38, 23), (26, 30), (23, 26), (5, 7), (30, 37), (21, 23)]}]}
{'write_manifest': [4202460, 4202482, 4202495, 4202508, 4202517]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_before/O3/smoothstreamingenc.o---before
The extraction of function: write_manifest
[4202460, 4202482, 4202495, 4202508, 4202517]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 92 nodes and 149 edges in CFGEmulated.
It has 88 nodes and 115 edges in CDG.
It has 2889 nodes and 3594 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4202460, 4202482, 4202495, 4202508, 4202517]
{4199811, 4198791, 4201865, 4201993, 4202508, 4200720, 4201236, 4202517, 4199829, 4198679, 4201752, 4202390, 4198813, 4200477, 4200608, 4201122, 4202283, 4200364, 4200111, 4199990, 4201144, 4199865, 4199743, 4198592, 4198725, 4202438, 4202182, 4199754, 4201162, 4199756, 4198737, 4202460, 4199903, 4201444, 4200934, 4201062, 4201323, 4199789, 4201198, 4202093, 4202482, 4200818, 4198772, 4198901, 4202495, 4199551}
[36, 74, 50, 87, 49, 48, 77, 43, 6, 90, 61, 58, 81, 89, 46, 21, 78, 0, 79, 88, 73, 38, 64, 12, 11, 63, 19, 31, 91, 4, 13, 55, 2, 5, 17, 45, 67, 24, 41, 30, 72, 75, 28, 10, 9, 66, 15, 27, 53, 20, 29, 35, 51, 47, 44, 39, 16, 86, 37, 65, 80, 22, 62, 42, 76, 60]
The execution time of patched slicing information extraction via angr: 0:01:42.747909
{'write_manifest': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ff2>, <DisassemblerInsn "call" for 0x401ffa>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e6d>, <DisassemblerInsn "mov" for 0x401e75>, <DisassemblerInsn "mov" for 0x401e7c>, <DisassemblerInsn "add" for 0x401e81>, <DisassemblerInsn "mov" for 0x401e85>, <DisassemblerInsn "sub" for 0x401e87>, <DisassemblerInsn "mov" for 0x401e89>, <DisassemblerInsn "cmp" for 0x401e8b>, <DisassemblerInsn "mov" for 0x401e8d>, <DisassemblerInsn "jg" for 0x401e92>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401be4>, <DisassemblerInsn "mov" for 0x401bec>, <DisassemblerInsn "mov" for 0x401bf3>, <DisassemblerInsn "mov" for 0x401bfb>, <DisassemblerInsn "mov" for 0x401c03>, <DisassemblerInsn "mov" for 0x401c0b>, <DisassemblerInsn "imul" for 0x401c0f>, <DisassemblerInsn "mov" for 0x401c16>, <DisassemblerInsn "add" for 0x401c19>, <DisassemblerInsn "add" for 0x401c1c>, <DisassemblerInsn "mov" for 0x401c23>, <DisassemblerInsn "mov" for 0x401c26>, <DisassemblerInsn "mov" for 0x401c2d>, <DisassemblerInsn "imul" for 0x401c34>, <DisassemblerInsn "mov" for 0x401c3b>, <DisassemblerInsn "add" for 0x401c3e>, <DisassemblerInsn "add" for 0x401c41>, <DisassemblerInsn "mov" for 0x401c48>, <DisassemblerInsn "imul" for 0x401c4b>, <DisassemblerInsn "mov" for 0x401c52>, <DisassemblerInsn "add" for 0x401c55>, <DisassemblerInsn "add" for 0x401c58>, <DisassemblerInsn "mov" for 0x401c5f>, <DisassemblerInsn "imul" for 0x401c62>, <DisassemblerInsn "add" for 0x401c69>, <DisassemblerInsn "add" for 0x401c6c>, <DisassemblerInsn "mov" for 0x401c72>, <DisassemblerInsn "lea" for 0x401c75>, <DisassemblerInsn "mov" for 0x401c7c>, <DisassemblerInsn "mov" for 0x401c7f>, <DisassemblerInsn "mov" for 0x401c84>, <DisassemblerInsn "mov" for 0x401c89>, <DisassemblerInsn "mov" for 0x401c8e>, <DisassemblerInsn "call" for 0x401c90>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019e6>, <DisassemblerInsn "mov" for 0x4019ee>, <DisassemblerInsn "mov" for 0x4019f5>, <DisassemblerInsn "add" for 0x4019fd>, <DisassemblerInsn "mov" for 0x401a01>, <DisassemblerInsn "mov" for 0x401a09>, <DisassemblerInsn "sub" for 0x401a0b>, <DisassemblerInsn "mov" for 0x401a0d>, <DisassemblerInsn "mov" for 0x401a14>, <DisassemblerInsn "cmp" for 0x401a16>, <DisassemblerInsn "mov" for 0x401a18>, <DisassemblerInsn "jg" for 0x401a20>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d89>, <DisassemblerInsn "mov" for 0x401d90>, <DisassemblerInsn "mov" for 0x401d97>, <DisassemblerInsn "mov" for 0x401d9f>, <DisassemblerInsn "mov" for 0x401da7>, <DisassemblerInsn "mov" for 0x401daf>, <DisassemblerInsn "mov" for 0x401db7>, <DisassemblerInsn "imul" for 0x401dba>, <DisassemblerInsn "add" for 0x401dc1>, <DisassemblerInsn "add" for 0x401dc4>, <DisassemblerInsn "mov" for 0x401dcb>, <DisassemblerInsn "xor" for 0x401dd0>, <DisassemblerInsn "test" for 0x401dd2>, <DisassemblerInsn "cmovne" for 0x401dd6>, <DisassemblerInsn "mov" for 0x401dd9>, <DisassemblerInsn "mov" for 0x401de0>, <DisassemblerInsn "add" for 0x401de2>, <DisassemblerInsn "mov" for 0x401de4>, <DisassemblerInsn "sub" for 0x401de6>, <DisassemblerInsn "xor" for 0x401de8>, <DisassemblerInsn "cmp" for 0x401dea>, <DisassemblerInsn "cmovg" for 0x401ded>, <DisassemblerInsn "xor" for 0x401df0>, <DisassemblerInsn "cmp" for 0x401df2>, <DisassemblerInsn "cmove" for 0x401df5>, <DisassemblerInsn "mov" for 0x401df8>, <DisassemblerInsn "sub" for 0x401dff>, <DisassemblerInsn "cmp" for 0x401e01>, <DisassemblerInsn "jge" for 0x401e03>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fc6>, <DisassemblerInsn "lea" for 0x401fce>, <DisassemblerInsn "mov" for 0x401fd5>, <DisassemblerInsn "call" for 0x401fd7>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a24>, <DisassemblerInsn "mov" for 0x401a2c>, <DisassemblerInsn "mov" for 0x401a34>, <DisassemblerInsn "mov" for 0x401a3c>, <DisassemblerInsn "mov" for 0x401a44>, <DisassemblerInsn "mov" for 0x401a47>, <DisassemblerInsn "mov" for 0x401a4b>, <DisassemblerInsn "mov" for 0x401a51>, <DisassemblerInsn "lea" for 0x401a58>, <DisassemblerInsn "mov" for 0x401a5f>, <DisassemblerInsn "call" for 0x401a61>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401aa2>, <DisassemblerInsn "lea" for 0x401aaa>, <DisassemblerInsn "mov" for 0x401ab1>, <DisassemblerInsn "call" for 0x401ab3>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401187>, <DisassemblerInsn "lea" for 0x40118f>, <DisassemblerInsn "mov" for 0x401196>, <DisassemblerInsn "call" for 0x401198>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401a22>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4018e5>, <DisassemblerInsn "mov" for 0x4018ed>, <DisassemblerInsn "mov" for 0x4018f5>, <DisassemblerInsn "mov" for 0x4018fb>, <DisassemblerInsn "lea" for 0x401902>, <DisassemblerInsn "mov" for 0x401909>, <DisassemblerInsn "call" for 0x40190b>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e09>, <DisassemblerInsn "mov" for 0x401e10>, <DisassemblerInsn "mov" for 0x401e17>, <DisassemblerInsn "mov" for 0x401e1c>, <DisassemblerInsn "mov" for 0x401e1f>, <DisassemblerInsn "mov" for 0x401e22>, <DisassemblerInsn "test" for 0x401e28>, <DisassemblerInsn "setg" for 0x401e2a>, <DisassemblerInsn "or" for 0x401e2e>, <DisassemblerInsn "mov" for 0x401e31>, <DisassemblerInsn "mov" for 0x401e33>, <DisassemblerInsn "mov" for 0x401e38>, <DisassemblerInsn "mov" for 0x401e3c>, <DisassemblerInsn "test" for 0x401e41>, <DisassemblerInsn "jne" for 0x401e43>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ef1>, <DisassemblerInsn "mov" for 0x401ef6>, <DisassemblerInsn "mov" for 0x401efe>, <DisassemblerInsn "mov" for 0x401f03>, <DisassemblerInsn "mov" for 0x401f08>, <DisassemblerInsn "mov" for 0x401f0b>, <DisassemblerInsn "mov" for 0x401f0f>, <DisassemblerInsn "mov" for 0x401f16>, <DisassemblerInsn "lea" for 0x401f1d>, <DisassemblerInsn "mov" for 0x401f24>, <DisassemblerInsn "call" for 0x401f26>]'}, {'block_Idx': 89, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f2b>, <DisassemblerInsn "mov" for 0x401f33>, <DisassemblerInsn "mov" for 0x401f3a>, <DisassemblerInsn "add" for 0x401f3f>, <DisassemblerInsn "mov" for 0x401f43>, <DisassemblerInsn "mov" for 0x401f48>, <DisassemblerInsn "sub" for 0x401f4a>, <DisassemblerInsn "mov" for 0x401f4c>, <DisassemblerInsn "mov" for 0x401f50>, <DisassemblerInsn "cmp" for 0x401f52>, <DisassemblerInsn "mov" for 0x401f54>, <DisassemblerInsn "jg" for 0x401f59>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40175a>, <DisassemblerInsn "mov" for 0x401762>, <DisassemblerInsn "mov" for 0x401769>, <DisassemblerInsn "mov" for 0x401770>, <DisassemblerInsn "add" for 0x401777>, <DisassemblerInsn "mov" for 0x40177b>, <DisassemblerInsn "cmp" for 0x40177d>, <DisassemblerInsn "mov" for 0x401780>, <DisassemblerInsn "mov" for 0x401787>, <DisassemblerInsn "mov" for 0x40178f>, <DisassemblerInsn "mov" for 0x401796>, <DisassemblerInsn "mov" for 0x401798>, <DisassemblerInsn "mov" for 0x40179f>, <DisassemblerInsn "jb" for 0x4017a6>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40154c>, <DisassemblerInsn "mov" for 0x401554>, <DisassemblerInsn "mov" for 0x40155c>, <DisassemblerInsn "lea" for 0x40155f>, <DisassemblerInsn "mov" for 0x401566>, <DisassemblerInsn "call" for 0x401568>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019a3>, <DisassemblerInsn "mov" for 0x4019ab>, <DisassemblerInsn "mov" for 0x4019b3>, <DisassemblerInsn "mov" for 0x4019bb>, <DisassemblerInsn "mov" for 0x4019c3>, <DisassemblerInsn "mov" for 0x4019c6>, <DisassemblerInsn "mov" for 0x4019ca>, <DisassemblerInsn "mov" for 0x4019d1>, <DisassemblerInsn "lea" for 0x4019d8>, <DisassemblerInsn "mov" for 0x4019df>, <DisassemblerInsn "call" for 0x4019e1>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x4010c0>, <DisassemblerInsn "push" for 0x4010c2>, <DisassemblerInsn "sub" for 0x4010c3>, <DisassemblerInsn "mov" for 0x4010ca>, <DisassemblerInsn "mov" for 0x4010d1>, <DisassemblerInsn "mov" for 0x4010d4>, <DisassemblerInsn "mov" for 0x4010dc>, <DisassemblerInsn "mov" for 0x4010e0>, <DisassemblerInsn "lea" for 0x4010e8>, <DisassemblerInsn "lea" for 0x4010f0>, <DisassemblerInsn "mov" for 0x4010f8>, <DisassemblerInsn "add" for 0x401100>, <DisassemblerInsn "mov" for 0x401104>, <DisassemblerInsn "lea" for 0x401109>, <DisassemblerInsn "mov" for 0x401110>, <DisassemblerInsn "call" for 0x401112>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401e98>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f96>, <DisassemblerInsn "mov" for 0x401f9e>, <DisassemblerInsn "mov" for 0x401fa5>, <DisassemblerInsn "add" for 0x401faa>, <DisassemblerInsn "mov" for 0x401fae>, <DisassemblerInsn "mov" for 0x401fb3>, <DisassemblerInsn "sub" for 0x401fb5>, <DisassemblerInsn "mov" for 0x401fb7>, <DisassemblerInsn "mov" for 0x401fbb>, <DisassemblerInsn "cmp" for 0x401fbd>, <DisassemblerInsn "mov" for 0x401fbf>, <DisassemblerInsn "jg" for 0x401fc4>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401972>, <DisassemblerInsn "mov" for 0x40197a>, <DisassemblerInsn "mov" for 0x401981>, <DisassemblerInsn "add" for 0x401989>, <DisassemblerInsn "mov" for 0x40198d>, <DisassemblerInsn "sub" for 0x40198f>, <DisassemblerInsn "mov" for 0x401991>, <DisassemblerInsn "cmp" for 0x401993>, <DisassemblerInsn "mov" for 0x401995>, <DisassemblerInsn "jle" for 0x40199d>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4017ac>, <DisassemblerInsn "mov" for 0x4017b4>, <DisassemblerInsn "mov" for 0x4017bc>, <DisassemblerInsn "mov" for 0x4017c3>, <DisassemblerInsn "mov" for 0x4017c7>, <DisassemblerInsn "movsxd" for 0x4017cf>, <DisassemblerInsn "mov" for 0x4017d2>, <DisassemblerInsn "mov" for 0x4017da>, <DisassemblerInsn "mov" for 0x4017e2>, <DisassemblerInsn "mov" for 0x4017ea>, <DisassemblerInsn "mov" for 0x4017ec>, <DisassemblerInsn "imul" for 0x4017f3>, <DisassemblerInsn "add" for 0x4017fa>, <DisassemblerInsn "add" for 0x4017fd>, <DisassemblerInsn "mov" for 0x401803>, <DisassemblerInsn "mov" for 0x40180b>, <DisassemblerInsn "mov" for 0x40180d>, <DisassemblerInsn "cmp" for 0x401814>, <DisassemblerInsn "jl" for 0x401817>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "xor" for 0x40200c>, <DisassemblerInsn "mov" for 0x40200e>, <DisassemblerInsn "mov" for 0x402015>, <DisassemblerInsn "add" for 0x40201c>, <DisassemblerInsn "pop" for 0x402023>, <DisassemblerInsn "pop" for 0x402024>, <DisassemblerInsn "ret" for 0x402026>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40147f>, <DisassemblerInsn "mov" for 0x401487>, <DisassemblerInsn "mov" for 0x40148e>, <DisassemblerInsn "mov" for 0x401495>, <DisassemblerInsn "mov" for 0x40149d>, <DisassemblerInsn "mov" for 0x4014a5>, <DisassemblerInsn "mov" for 0x4014ad>, <DisassemblerInsn "mov" for 0x4014b4>, <DisassemblerInsn "mov" for 0x4014bc>, <DisassemblerInsn "cmp" for 0x4014c3>, <DisassemblerInsn "sete" for 0x4014c6>, <DisassemblerInsn "mov" for 0x4014ca>, <DisassemblerInsn "xor" for 0x4014d2>, <DisassemblerInsn "cmp" for 0x4014d4>, <DisassemblerInsn "cmove" for 0x4014d7>, <DisassemblerInsn "xor" for 0x4014db>, <DisassemblerInsn "cmp" for 0x4014dd>, <DisassemblerInsn "cmove" for 0x4014e0>, <DisassemblerInsn "xor" for 0x4014e4>, <DisassemblerInsn "cmp" for 0x4014e6>, <DisassemblerInsn "cmove" for 0x4014e9>, <DisassemblerInsn "mov" for 0x4014ec>, <DisassemblerInsn "add" for 0x4014ef>, <DisassemblerInsn "mov" for 0x4014f3>, <DisassemblerInsn "mov" for 0x4014fb>, <DisassemblerInsn "cmp" for 0x4014fe>, <DisassemblerInsn "mov" for 0x401500>, <DisassemblerInsn "cmovg" for 0x401502>, <DisassemblerInsn "cmp" for 0x401505>, <DisassemblerInsn "mov" for 0x401508>, <DisassemblerInsn "cmovg" for 0x40150b>, <DisassemblerInsn "cmp" for 0x40150e>, <DisassemblerInsn "cmove" for 0x401511>, <DisassemblerInsn "mov" for 0x401515>, <DisassemblerInsn "cmp" for 0x40151c>, <DisassemblerInsn "cmove" for 0x40151f>, <DisassemblerInsn "mov" for 0x401522>, <DisassemblerInsn "mov" for 0x401529>, <DisassemblerInsn "lea" for 0x401531>, <DisassemblerInsn "mov" for 0x401538>, <DisassemblerInsn "call" for 0x40153a>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x402015>, <DisassemblerInsn "add" for 0x40201c>, <DisassemblerInsn "pop" for 0x402023>, <DisassemblerInsn "pop" for 0x402024>, <DisassemblerInsn "ret" for 0x402026>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401729>, <DisassemblerInsn "mov" for 0x401731>, <DisassemblerInsn "mov" for 0x401739>, <DisassemblerInsn "add" for 0x401740>, <DisassemblerInsn "mov" for 0x401743>, <DisassemblerInsn "mov" for 0x401745>, <DisassemblerInsn "mov" for 0x40174c>, <DisassemblerInsn "mov" for 0x401753>, <DisassemblerInsn "mov" for 0x40175a>, <DisassemblerInsn "mov" for 0x401762>, <DisassemblerInsn "mov" for 0x401769>, <DisassemblerInsn "mov" for 0x401770>, <DisassemblerInsn "add" for 0x401777>, <DisassemblerInsn "mov" for 0x40177b>, <DisassemblerInsn "cmp" for 0x40177d>, <DisassemblerInsn "mov" for 0x401780>, <DisassemblerInsn "mov" for 0x401787>, <DisassemblerInsn "mov" for 0x40178f>, <DisassemblerInsn "mov" for 0x401796>, <DisassemblerInsn "mov" for 0x401798>, <DisassemblerInsn "mov" for 0x40179f>, <DisassemblerInsn "jb" for 0x4017a6>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4013a0>, <DisassemblerInsn "mov" for 0x4013a7>, <DisassemblerInsn "mov" for 0x4013ae>, <DisassemblerInsn "mov" for 0x4013b5>, <DisassemblerInsn "add" for 0x4013bc>, <DisassemblerInsn "mov" for 0x4013bf>, <DisassemblerInsn "mov" for 0x4013c6>, <DisassemblerInsn "mov" for 0x4013cd>, <DisassemblerInsn "mov" for 0x4013d4>, <DisassemblerInsn "mov" for 0x4013db>, <DisassemblerInsn "mov" for 0x4013e3>, <DisassemblerInsn "mov" for 0x4013eb>, <DisassemblerInsn "mov" for 0x4013f3>, <DisassemblerInsn "mov" for 0x4013fa>, <DisassemblerInsn "mov" for 0x401401>, <DisassemblerInsn "mov" for 0x401408>, <DisassemblerInsn "add" for 0x40140f>, <DisassemblerInsn "cmp" for 0x401413>, <DisassemblerInsn "mov" for 0x401416>, <DisassemblerInsn "mov" for 0x40141e>, <DisassemblerInsn "mov" for 0x401421>, <DisassemblerInsn "mov" for 0x401429>, <DisassemblerInsn "mov" for 0x40142c>, <DisassemblerInsn "mov" for 0x401434>, <DisassemblerInsn "mov" for 0x401437>, <DisassemblerInsn "mov" for 0x40143f>, <DisassemblerInsn "mov" for 0x401442>, <DisassemblerInsn "mov" for 0x40144a>, <DisassemblerInsn "mov" for 0x40144d>, <DisassemblerInsn "mov" for 0x401455>, <DisassemblerInsn "mov" for 0x40145c>, <DisassemblerInsn "mov" for 0x401463>, <DisassemblerInsn "mov" for 0x40146b>, <DisassemblerInsn "mov" for 0x401472>, <DisassemblerInsn "jne" for 0x401479>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401aca>, <DisassemblerInsn "mov" for 0x401ad1>, <DisassemblerInsn "mov" for 0x401ad8>, <DisassemblerInsn "lea" for 0x401ae0>, <DisassemblerInsn "mov" for 0x401ae7>, <DisassemblerInsn "call" for 0x401ae9>]'}, {'block_Idx': 91, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401f5b>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401145>, <DisassemblerInsn "cmp" for 0x40114c>, <DisassemblerInsn "jge" for 0x40114f>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011f5>, <DisassemblerInsn "mov" for 0x4011fc>, <DisassemblerInsn "mov" for 0x401204>, <DisassemblerInsn "mov" for 0x40120c>, <DisassemblerInsn "mov" for 0x401210>, <DisassemblerInsn "mov" for 0x401218>, <DisassemblerInsn "mov" for 0x40121c>, <DisassemblerInsn "mov" for 0x401224>, <DisassemblerInsn "mov" for 0x401226>, <DisassemblerInsn "xor" for 0x40122e>, <DisassemblerInsn "mov" for 0x401230>, <DisassemblerInsn "xor" for 0x401232>, <DisassemblerInsn "mov" for 0x401234>, <DisassemblerInsn "mov" for 0x401237>, <DisassemblerInsn "mov" for 0x40123f>, <DisassemblerInsn "mov" for 0x401241>, <DisassemblerInsn "mov" for 0x401248>, <DisassemblerInsn "mov" for 0x40124a>, <DisassemblerInsn "mov" for 0x401251>, <DisassemblerInsn "mov" for 0x401259>, <DisassemblerInsn "mov" for 0x40125b>, <DisassemblerInsn "mov" for 0x401262>, <DisassemblerInsn "mov" for 0x401269>, <DisassemblerInsn "mov" for 0x401271>, <DisassemblerInsn "mov" for 0x401279>, <DisassemblerInsn "mov" for 0x401280>, <DisassemblerInsn "mov" for 0x401287>, <DisassemblerInsn "mov" for 0x40128f>, <DisassemblerInsn "mov" for 0x401297>, <DisassemblerInsn "mov" for 0x40129f>, <DisassemblerInsn "mov" for 0x4012a7>, <DisassemblerInsn "mov" for 0x4012af>, <DisassemblerInsn "mov" for 0x4012b6>, <DisassemblerInsn "mov" for 0x4012bd>, <DisassemblerInsn "imul" for 0x4012c5>, <DisassemblerInsn "add" for 0x4012cc>, <DisassemblerInsn "add" for 0x4012cf>, <DisassemblerInsn "mov" for 0x4012d6>, <DisassemblerInsn "mov" for 0x4012d8>, <DisassemblerInsn "cmp" for 0x4012df>, <DisassemblerInsn "mov" for 0x4012e2>, <DisassemblerInsn "jle" for 0x4012ea>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401636>, <DisassemblerInsn "mov" for 0x40163e>, <DisassemblerInsn "mov" for 0x401646>, <DisassemblerInsn "mov" for 0x40164d>, <DisassemblerInsn "mov" for 0x401655>, <DisassemblerInsn "mov" for 0x40165c>, <DisassemblerInsn "mov" for 0x401663>, <DisassemblerInsn "mov" for 0x40166a>, <DisassemblerInsn "mov" for 0x401672>, <DisassemblerInsn "mov" for 0x401675>, <DisassemblerInsn "mov" for 0x40167d>, <DisassemblerInsn "mov" for 0x401680>, <DisassemblerInsn "mov" for 0x401684>, <DisassemblerInsn "mov" for 0x401688>, <DisassemblerInsn "cmp" for 0x401690>, <DisassemblerInsn "mov" for 0x401694>, <DisassemblerInsn "mov" for 0x40169b>, <DisassemblerInsn "mov" for 0x4016a2>, <DisassemblerInsn "jne" for 0x4016a9>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401117>, <DisassemblerInsn "mov" for 0x40111f>, <DisassemblerInsn "add" for 0x401127>, <DisassemblerInsn "lea" for 0x40112e>, <DisassemblerInsn "mov" for 0x401136>, <DisassemblerInsn "xor" for 0x40113b>, <DisassemblerInsn "mov" for 0x40113d>, <DisassemblerInsn "call" for 0x401140>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401151>, <DisassemblerInsn "mov" for 0x401159>, <DisassemblerInsn "mov" for 0x401161>, <DisassemblerInsn "lea" for 0x401166>, <DisassemblerInsn "mov" for 0x40116d>, <DisassemblerInsn "call" for 0x40116f>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40153f>, <DisassemblerInsn "test" for 0x401546>, <DisassemblerInsn "jne" for 0x401548>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4016af>, <DisassemblerInsn "mov" for 0x4016b7>, <DisassemblerInsn "mov" for 0x4016be>, <DisassemblerInsn "mov" for 0x4016c6>, <DisassemblerInsn "mov" for 0x4016ce>, <DisassemblerInsn "mov" for 0x4016d6>, <DisassemblerInsn "imul" for 0x4016da>, <DisassemblerInsn "mov" for 0x4016e1>, <DisassemblerInsn "add" for 0x4016e4>, <DisassemblerInsn "add" for 0x4016e7>, <DisassemblerInsn "mov" for 0x4016ee>, <DisassemblerInsn "mov" for 0x4016f1>, <DisassemblerInsn "mov" for 0x4016f8>, <DisassemblerInsn "imul" for 0x4016ff>, <DisassemblerInsn "add" for 0x401706>, <DisassemblerInsn "add" for 0x401709>, <DisassemblerInsn "mov" for 0x40170f>, <DisassemblerInsn "lea" for 0x401712>, <DisassemblerInsn "mov" for 0x401719>, <DisassemblerInsn "mov" for 0x40171d>, <DisassemblerInsn "mov" for 0x401722>, <DisassemblerInsn "call" for 0x401724>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401c95>, <DisassemblerInsn "mov" for 0x401c9d>, <DisassemblerInsn "mov" for 0x401ca5>, <DisassemblerInsn "add" for 0x401cac>, <DisassemblerInsn "mov" for 0x401caf>, <DisassemblerInsn "mov" for 0x401cb1>, <DisassemblerInsn "mov" for 0x401cb8>, <DisassemblerInsn "mov" for 0x401cbf>, <DisassemblerInsn "mov" for 0x401cc6>, <DisassemblerInsn "mov" for 0x401cce>, <DisassemblerInsn "mov" for 0x401cd5>, <DisassemblerInsn "mov" for 0x401cdc>, <DisassemblerInsn "add" for 0x401ce3>, <DisassemblerInsn "mov" for 0x401ce7>, <DisassemblerInsn "cmp" for 0x401ce9>, <DisassemblerInsn "mov" for 0x401cec>, <DisassemblerInsn "mov" for 0x401cf3>, <DisassemblerInsn "mov" for 0x401cfb>, <DisassemblerInsn "mov" for 0x401d02>, <DisassemblerInsn "mov" for 0x401d04>, <DisassemblerInsn "mov" for 0x401d0b>, <DisassemblerInsn "jb" for 0x401d12>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40156d>, <DisassemblerInsn "lea" for 0x401575>, <DisassemblerInsn "mov" for 0x40157c>, <DisassemblerInsn "call" for 0x40157e>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401d18>, <DisassemblerInsn "mov" for 0x401d20>, <DisassemblerInsn "mov" for 0x401d28>, <DisassemblerInsn "mov" for 0x401d2f>, <DisassemblerInsn "mov" for 0x401d33>, <DisassemblerInsn "movsxd" for 0x401d3b>, <DisassemblerInsn "mov" for 0x401d3e>, <DisassemblerInsn "mov" for 0x401d46>, <DisassemblerInsn "mov" for 0x401d4e>, <DisassemblerInsn "mov" for 0x401d56>, <DisassemblerInsn "mov" for 0x401d58>, <DisassemblerInsn "imul" for 0x401d5f>, <DisassemblerInsn "add" for 0x401d66>, <DisassemblerInsn "add" for 0x401d69>, <DisassemblerInsn "mov" for 0x401d6f>, <DisassemblerInsn "mov" for 0x401d77>, <DisassemblerInsn "mov" for 0x401d79>, <DisassemblerInsn "cmp" for 0x401d80>, <DisassemblerInsn "jl" for 0x401d83>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fdc>, <DisassemblerInsn "lea" for 0x401fe4>, <DisassemblerInsn "mov" for 0x401feb>, <DisassemblerInsn "call" for 0x401fed>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401910>, <DisassemblerInsn "mov" for 0x401918>, <DisassemblerInsn "mov" for 0x40191f>, <DisassemblerInsn "add" for 0x401927>, <DisassemblerInsn "mov" for 0x40192b>, <DisassemblerInsn "sub" for 0x40192d>, <DisassemblerInsn "mov" for 0x40192f>, <DisassemblerInsn "cmp" for 0x401931>, <DisassemblerInsn "mov" for 0x401933>, <DisassemblerInsn "jg" for 0x40193b>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ec6>, <DisassemblerInsn "mov" for 0x401ece>, <DisassemblerInsn "mov" for 0x401ed5>, <DisassemblerInsn "add" for 0x401eda>, <DisassemblerInsn "mov" for 0x401ede>, <DisassemblerInsn "sub" for 0x401ee0>, <DisassemblerInsn "mov" for 0x401ee2>, <DisassemblerInsn "cmp" for 0x401ee4>, <DisassemblerInsn "mov" for 0x401ee6>, <DisassemblerInsn "jle" for 0x401eeb>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401ab8>, <DisassemblerInsn "cmp" for 0x401ac0>, <DisassemblerInsn "je" for 0x401ac4>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40119d>, <DisassemblerInsn "mov" for 0x4011a5>, <DisassemblerInsn "add" for 0x4011a8>, <DisassemblerInsn "mov" for 0x4011ac>, <DisassemblerInsn "mov" for 0x4011b4>, <DisassemblerInsn "mov" for 0x4011b7>, <DisassemblerInsn "xor" for 0x4011be>, <DisassemblerInsn "xor" for 0x4011c0>, <DisassemblerInsn "cmp" for 0x4011c2>, <DisassemblerInsn "mov" for 0x4011c5>, <DisassemblerInsn "mov" for 0x4011c7>, <DisassemblerInsn "mov" for 0x4011ce>, <DisassemblerInsn "mov" for 0x4011d0>, <DisassemblerInsn "mov" for 0x4011d7>, <DisassemblerInsn "mov" for 0x4011df>, <DisassemblerInsn "mov" for 0x4011e1>, <DisassemblerInsn "mov" for 0x4011e8>, <DisassemblerInsn "je" for 0x4011ef>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401174>, <DisassemblerInsn "mov" for 0x40117b>, <DisassemblerInsn "jmp" for 0x401182>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e9d>, <DisassemblerInsn "mov" for 0x401ea5>, <DisassemblerInsn "mov" for 0x401eaa>, <DisassemblerInsn "mov" for 0x401eb1>, <DisassemblerInsn "lea" for 0x401eb8>, <DisassemblerInsn "mov" for 0x401ebf>, <DisassemblerInsn "call" for 0x401ec1>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401335>, <DisassemblerInsn "mov" for 0x40133d>, <DisassemblerInsn "mov" for 0x401345>, <DisassemblerInsn "mov" for 0x40134d>, <DisassemblerInsn "mov" for 0x401355>, <DisassemblerInsn "mov" for 0x401359>, <DisassemblerInsn "cmp" for 0x40135d>, <DisassemblerInsn "jne" for 0x401361>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401583>, <DisassemblerInsn "cmp" for 0x40158b>, <DisassemblerInsn "je" for 0x40158f>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4018a0>, <DisassemblerInsn "mov" for 0x4018a7>, <DisassemblerInsn "mov" for 0x4018ae>, <DisassemblerInsn "mov" for 0x4018b6>, <DisassemblerInsn "mov" for 0x4018b9>, <DisassemblerInsn "mov" for 0x4018bc>, <DisassemblerInsn "test" for 0x4018c2>, <DisassemblerInsn "setg" for 0x4018c4>, <DisassemblerInsn "or" for 0x4018c8>, <DisassemblerInsn "mov" for 0x4018cb>, <DisassemblerInsn "mov" for 0x4018cd>, <DisassemblerInsn "mov" for 0x4018d5>, <DisassemblerInsn "mov" for 0x4018d9>, <DisassemblerInsn "test" for 0x4018e1>, <DisassemblerInsn "jne" for 0x4018e3>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40154a>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401595>, <DisassemblerInsn "mov" for 0x40159c>, <DisassemblerInsn "mov" for 0x4015a3>, <DisassemblerInsn "lea" for 0x4015ab>, <DisassemblerInsn "mov" for 0x4015b2>, <DisassemblerInsn "call" for 0x4015b4>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4015b9>, <DisassemblerInsn "mov" for 0x4015c1>, <DisassemblerInsn "mov" for 0x4015c3>, <DisassemblerInsn "mov" for 0x4015ca>, <DisassemblerInsn "cmp" for 0x4015cf>, <DisassemblerInsn "mov" for 0x4015d2>, <DisassemblerInsn "je" for 0x4015d9>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401cc6>, <DisassemblerInsn "mov" for 0x401cce>, <DisassemblerInsn "mov" for 0x401cd5>, <DisassemblerInsn "mov" for 0x401cdc>, <DisassemblerInsn "add" for 0x401ce3>, <DisassemblerInsn "mov" for 0x401ce7>, <DisassemblerInsn "cmp" for 0x401ce9>, <DisassemblerInsn "mov" for 0x401cec>, <DisassemblerInsn "mov" for 0x401cf3>, <DisassemblerInsn "mov" for 0x401cfb>, <DisassemblerInsn "mov" for 0x401d02>, <DisassemblerInsn "mov" for 0x401d04>, <DisassemblerInsn "mov" for 0x401d0b>, <DisassemblerInsn "jb" for 0x401d12>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401fff>, <DisassemblerInsn "call" for 0x402007>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40181d>, <DisassemblerInsn "mov" for 0x401824>, <DisassemblerInsn "mov" for 0x40182b>, <DisassemblerInsn "mov" for 0x401833>, <DisassemblerInsn "mov" for 0x40183b>, <DisassemblerInsn "mov" for 0x401843>, <DisassemblerInsn "mov" for 0x40184b>, <DisassemblerInsn "imul" for 0x40184e>, <DisassemblerInsn "add" for 0x401855>, <DisassemblerInsn "add" for 0x401858>, <DisassemblerInsn "mov" for 0x40185f>, <DisassemblerInsn "xor" for 0x401867>, <DisassemblerInsn "test" for 0x401869>, <DisassemblerInsn "cmovne" for 0x40186d>, <DisassemblerInsn "mov" for 0x401870>, <DisassemblerInsn "mov" for 0x401877>, <DisassemblerInsn "add" for 0x401879>, <DisassemblerInsn "mov" for 0x40187b>, <DisassemblerInsn "sub" for 0x40187d>, <DisassemblerInsn "xor" for 0x40187f>, <DisassemblerInsn "cmp" for 0x401881>, <DisassemblerInsn "cmovg" for 0x401884>, <DisassemblerInsn "xor" for 0x401887>, <DisassemblerInsn "cmp" for 0x401889>, <DisassemblerInsn "cmove" for 0x40188c>, <DisassemblerInsn "mov" for 0x40188f>, <DisassemblerInsn "sub" for 0x401896>, <DisassemblerInsn "cmp" for 0x401898>, <DisassemblerInsn "jge" for 0x40189a>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4015df>, <DisassemblerInsn "mov" for 0x4015e6>, <DisassemblerInsn "mov" for 0x4015ee>, <DisassemblerInsn "add" for 0x4015f6>, <DisassemblerInsn "mov" for 0x4015fa>, <DisassemblerInsn "add" for 0x401602>, <DisassemblerInsn "mov" for 0x401606>, <DisassemblerInsn "xor" for 0x40160e>, <DisassemblerInsn "mov" for 0x401610>, <DisassemblerInsn "xor" for 0x401612>, <DisassemblerInsn "mov" for 0x401614>, <DisassemblerInsn "mov" for 0x401619>, <DisassemblerInsn "mov" for 0x401620>, <DisassemblerInsn "mov" for 0x401628>, <DisassemblerInsn "mov" for 0x40162f>, <DisassemblerInsn "mov" for 0x401636>, <DisassemblerInsn "mov" for 0x40163e>, <DisassemblerInsn "mov" for 0x401646>, <DisassemblerInsn "mov" for 0x40164d>, <DisassemblerInsn "mov" for 0x401655>, <DisassemblerInsn "mov" for 0x40165c>, <DisassemblerInsn "mov" for 0x401663>, <DisassemblerInsn "mov" for 0x40166a>, <DisassemblerInsn "mov" for 0x401672>, <DisassemblerInsn "mov" for 0x401675>, <DisassemblerInsn "mov" for 0x40167d>, <DisassemblerInsn "mov" for 0x401680>, <DisassemblerInsn "mov" for 0x401684>, <DisassemblerInsn "mov" for 0x401688>, <DisassemblerInsn "cmp" for 0x401690>, <DisassemblerInsn "mov" for 0x401694>, <DisassemblerInsn "mov" for 0x40169b>, <DisassemblerInsn "mov" for 0x4016a2>, <DisassemblerInsn "jne" for 0x4016a9>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4012ec>, <DisassemblerInsn "mov" for 0x4012f3>, <DisassemblerInsn "mov" for 0x4012fb>, <DisassemblerInsn "imul" for 0x401303>, <DisassemblerInsn "add" for 0x40130a>, <DisassemblerInsn "add" for 0x40130d>, <DisassemblerInsn "mov" for 0x401313>, <DisassemblerInsn "add" for 0x401316>, <DisassemblerInsn "mov" for 0x401319>, <DisassemblerInsn "mov" for 0x40131b>, <DisassemblerInsn "mov" for 0x40131f>, <DisassemblerInsn "add" for 0x401326>, <DisassemblerInsn "mov" for 0x40132d>, <DisassemblerInsn "mov" for 0x401335>, <DisassemblerInsn "mov" for 0x40133d>, <DisassemblerInsn "mov" for 0x401345>, <DisassemblerInsn "mov" for 0x40134d>, <DisassemblerInsn "mov" for 0x401355>, <DisassemblerInsn "mov" for 0x401359>, <DisassemblerInsn "cmp" for 0x40135d>, <DisassemblerInsn "jne" for 0x401361>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a66>, <DisassemblerInsn "mov" for 0x401a6e>, <DisassemblerInsn "mov" for 0x401a75>, <DisassemblerInsn "add" for 0x401a7d>, <DisassemblerInsn "mov" for 0x401a81>, <DisassemblerInsn "mov" for 0x401a89>, <DisassemblerInsn "sub" for 0x401a8b>, <DisassemblerInsn "mov" for 0x401a8d>, <DisassemblerInsn "mov" for 0x401a94>, <DisassemblerInsn "cmp" for 0x401a96>, <DisassemblerInsn "mov" for 0x401a98>, <DisassemblerInsn "jg" for 0x401aa0>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401aee>, <DisassemblerInsn "mov" for 0x401af6>, <DisassemblerInsn "mov" for 0x401af8>, <DisassemblerInsn "mov" for 0x401aff>, <DisassemblerInsn "cmp" for 0x401b04>, <DisassemblerInsn "mov" for 0x401b07>, <DisassemblerInsn "je" for 0x401b0e>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401e45>, <DisassemblerInsn "mov" for 0x401e4d>, <DisassemblerInsn "mov" for 0x401e52>, <DisassemblerInsn "mov" for 0x401e58>, <DisassemblerInsn "lea" for 0x401e5f>, <DisassemblerInsn "mov" for 0x401e66>, <DisassemblerInsn "call" for 0x401e68>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401f5d>, <DisassemblerInsn "mov" for 0x401f62>, <DisassemblerInsn "mov" for 0x401f6a>, <DisassemblerInsn "mov" for 0x401f6f>, <DisassemblerInsn "mov" for 0x401f74>, <DisassemblerInsn "mov" for 0x401f77>, <DisassemblerInsn "mov" for 0x401f7b>, <DisassemblerInsn "mov" for 0x401f81>, <DisassemblerInsn "lea" for 0x401f88>, <DisassemblerInsn "mov" for 0x401f8f>, <DisassemblerInsn "call" for 0x401f91>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4013db>, <DisassemblerInsn "mov" for 0x4013e3>, <DisassemblerInsn "mov" for 0x4013eb>, <DisassemblerInsn "mov" for 0x4013f3>, <DisassemblerInsn "mov" for 0x4013fa>, <DisassemblerInsn "mov" for 0x401401>, <DisassemblerInsn "mov" for 0x401408>, <DisassemblerInsn "add" for 0x40140f>, <DisassemblerInsn "cmp" for 0x401413>, <DisassemblerInsn "mov" for 0x401416>, <DisassemblerInsn "mov" for 0x40141e>, <DisassemblerInsn "mov" for 0x401421>, <DisassemblerInsn "mov" for 0x401429>, <DisassemblerInsn "mov" for 0x40142c>, <DisassemblerInsn "mov" for 0x401434>, <DisassemblerInsn "mov" for 0x401437>, <DisassemblerInsn "mov" for 0x40143f>, <DisassemblerInsn "mov" for 0x401442>, <DisassemblerInsn "mov" for 0x40144a>, <DisassemblerInsn "mov" for 0x40144d>, <DisassemblerInsn "mov" for 0x401455>, <DisassemblerInsn "mov" for 0x40145c>, <DisassemblerInsn "mov" for 0x401463>, <DisassemblerInsn "mov" for 0x40146b>, <DisassemblerInsn "mov" for 0x401472>, <DisassemblerInsn "jne" for 0x401479>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401946>, <DisassemblerInsn "mov" for 0x40194e>, <DisassemblerInsn "mov" for 0x401956>, <DisassemblerInsn "mov" for 0x40195d>, <DisassemblerInsn "lea" for 0x401964>, <DisassemblerInsn "mov" for 0x40196b>, <DisassemblerInsn "call" for 0x40196d>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b14>, <DisassemblerInsn "mov" for 0x401b1b>, <DisassemblerInsn "mov" for 0x401b23>, <DisassemblerInsn "add" for 0x401b2b>, <DisassemblerInsn "mov" for 0x401b2f>, <DisassemblerInsn "add" for 0x401b37>, <DisassemblerInsn "mov" for 0x401b3b>, <DisassemblerInsn "xor" for 0x401b43>, <DisassemblerInsn "mov" for 0x401b45>, <DisassemblerInsn "xor" for 0x401b47>, <DisassemblerInsn "mov" for 0x401b49>, <DisassemblerInsn "mov" for 0x401b4e>, <DisassemblerInsn "mov" for 0x401b55>, <DisassemblerInsn "mov" for 0x401b5d>, <DisassemblerInsn "mov" for 0x401b64>, <DisassemblerInsn "mov" for 0x401b6b>, <DisassemblerInsn "mov" for 0x401b73>, <DisassemblerInsn "mov" for 0x401b7b>, <DisassemblerInsn "mov" for 0x401b82>, <DisassemblerInsn "mov" for 0x401b8a>, <DisassemblerInsn "mov" for 0x401b91>, <DisassemblerInsn "mov" for 0x401b98>, <DisassemblerInsn "mov" for 0x401b9f>, <DisassemblerInsn "mov" for 0x401ba7>, <DisassemblerInsn "mov" for 0x401baa>, <DisassemblerInsn "mov" for 0x401bb2>, <DisassemblerInsn "mov" for 0x401bb5>, <DisassemblerInsn "mov" for 0x401bb9>, <DisassemblerInsn "mov" for 0x401bbd>, <DisassemblerInsn "cmp" for 0x401bc5>, <DisassemblerInsn "mov" for 0x401bc9>, <DisassemblerInsn "mov" for 0x401bd0>, <DisassemblerInsn "mov" for 0x401bd7>, <DisassemblerInsn "jne" for 0x401bde>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x401941>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401b6b>, <DisassemblerInsn "mov" for 0x401b73>, <DisassemblerInsn "mov" for 0x401b7b>, <DisassemblerInsn "mov" for 0x401b82>, <DisassemblerInsn "mov" for 0x401b8a>, <DisassemblerInsn "mov" for 0x401b91>, <DisassemblerInsn "mov" for 0x401b98>, <DisassemblerInsn "mov" for 0x401b9f>, <DisassemblerInsn "mov" for 0x401ba7>, <DisassemblerInsn "mov" for 0x401baa>, <DisassemblerInsn "mov" for 0x401bb2>, <DisassemblerInsn "mov" for 0x401bb5>, <DisassemblerInsn "mov" for 0x401bb9>, <DisassemblerInsn "mov" for 0x401bbd>, <DisassemblerInsn "cmp" for 0x401bc5>, <DisassemblerInsn "mov" for 0x401bc9>, <DisassemblerInsn "mov" for 0x401bd0>, <DisassemblerInsn "mov" for 0x401bd7>, <DisassemblerInsn "jne" for 0x401bde>]'}], 'cfg_block_detailed_info': [{'block_Idx': 36, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x6e0]>', '<call~~0x500058>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xa8]>', '<mov~~edx, dword ptr [rsp + 0x80]>', '<mov~~rax, qword ptr [rsp + 0x68]>', '<add~~rax, 1>', '<mov~~ecx, dword ptr [rcx]>', '<sub~~ecx, edx>', '<mov~~edx, eax>', '<cmp~~ecx, edx>', '<mov~~qword ptr [rsp + 0x60], rax>', '<jg~~0x401f5d>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0xb8]>', '<mov~~edx, dword ptr [rsp + 0xb4]>', '<mov~~rax, qword ptr [rsp + 0xc0]>', '<mov~~r10, qword ptr [rsp + 0xc8]>', '<mov~~rdi, qword ptr [rsp + 0x6e0]>', '<mov~~ecx, dword ptr [r10 + 0x60]>', '<imul~~r9, rsi, 0x8480>', '<mov~~r8, rax>', '<add~~r8, r9>', '<add~~r8, 0x8468>', '<mov~~r8, qword ptr [r8]>', '<mov~~r9d, dword ptr [r10 + 0x1d0]>', '<mov~~ebx, dword ptr [r10 + 0x1d4]>', '<imul~~r11, rsi, 0x8480>', '<mov~~r10, rax>', '<add~~r10, r11>', '<add~~r10, 0x8478>', '<mov~~r11d, dword ptr [r10]>', '<imul~~r14, rsi, 0x8480>', '<mov~~r10, rax>', '<add~~r10, r14>', '<add~~r10, 0x847c>', '<mov~~r10d, dword ptr [r10]>', '<imul~~rsi, rsi, 0x8480>', '<add~~rax, rsi>', '<add~~rax, 0x8470>', '<mov~~rax, qword ptr [rax]>', '<lea~~rsi, [rip + 0x1796]>', '<mov~~dword ptr [rsp], ebx>', '<mov~~dword ptr [rsp + 8], r11d>', '<mov~~dword ptr [rsp + 0x10], r10d>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 87, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x190]>', '<mov~~edx, dword ptr [rsp + 0x168]>', '<mov~~rax, qword ptr [rsp + 0x128]>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x130], rax>', '<mov~~ecx, dword ptr [rcx]>', '<sub~~ecx, edx>', '<mov~~dword ptr [rsp + 0x13c], ecx>', '<mov~~edx, eax>', '<cmp~~ecx, edx>', '<mov~~qword ptr [rsp + 0x140], rax>', '<jg~~0x4019a3>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xb0]>', '<mov~~edi, dword ptr [rsp + 0xa4]>', '<mov~~sil, byte ptr [rsp + 0x217]>', '<mov~~rdx, qword ptr [rsp + 0x88]>', '<mov~~r8, qword ptr [rsp + 0x90]>', '<mov~~rax, qword ptr [rsp + 0x2c0]>', '<mov~~eax, dword ptr [rax + 0x10]>', '<imul~~r8, r8, 0x8480>', '<add~~rdx, r8>', '<add~~rdx, 0x8460>', '<mov~~qword ptr [rsp + 0x78], rdx>', '<xor~~edx, edx>', '<test~~sil, 1>', '<cmovne~~edx, eax>', '<mov~~dword ptr [rsp + 0x80], edx>', '<mov~~eax, edi>', '<add~~eax, edx>', '<mov~~esi, ecx>', '<sub~~esi, eax>', '<xor~~eax, eax>', '<cmp~~esi, 0>', '<cmovg~~eax, esi>', '<xor~~esi, esi>', '<cmp~~edi, 0>', '<cmove~~eax, esi>', '<mov~~dword ptr [rsp + 0x84], eax>', '<sub~~ecx, edx>', '<cmp~~eax, ecx>', '<jge~~0x401fc6>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x6e0]>', '<lea~~rsi, [rip + 0x13b5]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 77, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x148]>', '<mov~~rdi, qword ptr [rsp + 0x180]>', '<mov~~rax, qword ptr [rsp + 0x160]>', '<mov~~qword ptr [rsp + 0x110], rcx>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~edx, dword ptr [rax + 0x810]>', '<mov~~rcx, qword ptr [rax + 0x808]>', '<lea~~rsi, [rip + 0x1a80]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x6e0]>', '<lea~~rsi, [rip + 0x18d9]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x6e0]>', '<lea~~rsi, [rip + 0x2062]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 90, 'blockInsts': ['<jmp~~0x401aa2>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x180]>', '<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~edx, dword ptr [rax + 0x810]>', '<mov~~rcx, qword ptr [rax + 0x808]>', '<lea~~rsi, [rip + 0x1bd6]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x84]>', '<mov~~al, byte ptr [rsp + 0x217]>', '<mov~~rcx, qword ptr [rsp + 0x78]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~rsi, qword ptr [rcx]>', '<mov~~esi, dword ptr [rsi + 0x810]>', '<test~~esi, esi>', '<setg~~sil>', '<or~~al, sil>', '<mov~~edx, edx>', '<mov~~qword ptr [rsp + 0x68], rdx>', '<mov~~rcx, qword ptr [rcx + rdx*8]>', '<mov~~qword ptr [rsp + 0x70], rcx>', '<test~~al, 1>', '<jne~~0x401e9d>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x58]>', '<mov~~rdi, qword ptr [rsp + 0x98]>', '<mov~~rax, qword ptr [rsp + 0x78]>', '<mov~~qword ptr [rsp + 0x40], rcx>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~rdx, qword ptr [rax + 0x800]>', '<mov~~rcx, qword ptr [rax + 0x808]>', '<lea~~rsi, [rip + 0x15a4]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 89, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xa8]>', '<mov~~edx, dword ptr [rsp + 0x80]>', '<mov~~rax, qword ptr [rsp + 0x40]>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x48], rax>', '<mov~~ecx, dword ptr [rcx]>', '<sub~~ecx, edx>', '<mov~~dword ptr [rsp + 0x54], ecx>', '<mov~~edx, eax>', '<cmp~~ecx, edx>', '<mov~~qword ptr [rsp + 0x58], rax>', '<jg~~0x401ef1>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x1a0]>', '<mov~~esi, dword ptr [rsp + 0x1bc]>', '<mov~~eax, dword ptr [rsp + 0x1c0]>', '<mov~~ecx, dword ptr [rsp + 0x1c4]>', '<add~~rdx, 1>', '<mov~~edi, esi>', '<cmp~~rdx, rdi>', '<mov~~dword ptr [rsp + 0x1dc], esi>', '<mov~~qword ptr [rsp + 0x1e0], rdx>', '<mov~~dword ptr [rsp + 0x1e8], ecx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x1ec], ecx>', '<mov~~dword ptr [rsp + 0x1f4], eax>', '<jb~~0x401636>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x2c0]>', '<mov~~rdi, qword ptr [rsp + 0x6e0]>', '<mov~~edx, dword ptr [rax + 0x10]>', '<lea~~rsi, [rip + 0x1d01]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x140]>', '<mov~~rdi, qword ptr [rsp + 0x180]>', '<mov~~rax, qword ptr [rsp + 0x160]>', '<mov~~qword ptr [rsp + 0x128], rcx>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~rdx, qword ptr [rax + 0x800]>', '<mov~~rcx, qword ptr [rax + 0x808]>', '<lea~~rsi, [rip + 0x1ae9]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 0, 'blockInsts': ['<push~~r14>', '<push~~rbx>', '<sub~~rsp, 0x6e8>', '<mov~~dword ptr [rsp + 0x2bc], esi>', '<mov~~rcx, rdi>', '<mov~~qword ptr [rsp + 0x2c8], rcx>', '<mov~~rax, qword ptr [rcx + 0x18]>', '<mov~~qword ptr [rsp + 0x2c0], rax>', '<lea~~rax, [rsp + 0x6e0]>', '<lea~~rdi, [rsp + 0x2e0]>', '<mov~~qword ptr [rsp + 0x2d0], rdi>', '<add~~rcx, 0x38>', '<mov~~esi, 0x400>', '<lea~~rdx, [rip + 0x20bd]>', '<mov~~al, 0>', '<call~~0x500020>']}, {'block_Idx': 79, 'blockInsts': ['<jmp~~0x401fc6>']}, {'block_Idx': 88, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xa8]>', '<mov~~edx, dword ptr [rsp + 0x80]>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x30], rax>', '<mov~~ecx, dword ptr [rcx]>', '<sub~~ecx, edx>', '<mov~~dword ptr [rsp + 0x3c], ecx>', '<mov~~edx, eax>', '<cmp~~ecx, edx>', '<mov~~qword ptr [rsp + 0x60], rax>', '<jg~~0x401f5d>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x190]>', '<mov~~edx, dword ptr [rsp + 0x168]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<add~~rax, 1>', '<mov~~ecx, dword ptr [rcx]>', '<sub~~ecx, edx>', '<mov~~edx, eax>', '<cmp~~ecx, edx>', '<mov~~qword ptr [rsp + 0x140], rax>', '<jle~~0x401aa2>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x200]>', '<mov~~rax, qword ptr [rsp + 0x2c0]>', '<mov~~ecx, dword ptr [rsp + 0x1f4]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<mov~~qword ptr [rsp + 0x170], rax>', '<movsxd~~rcx, ecx>', '<mov~~qword ptr [rsp + 0x178], rcx>', '<mov~~rsi, qword ptr [rsp + 0x6e0]>', '<mov~~qword ptr [rsp + 0x180], rsi>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0x18c], edx>', '<imul~~rcx, rcx, 0x8480>', '<add~~rax, rcx>', '<add~~rax, 0x8450>', '<mov~~qword ptr [rsp + 0x190], rax>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x198], eax>', '<cmp~~eax, 1>', '<jl~~0x401aa2>']}, {'block_Idx': 64, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x2b8], eax>', '<mov~~eax, dword ptr [rsp + 0x2b8]>', '<add~~rsp, 0x6e8>', '<pop~~rbx>', '<pop~~r14>', '<ret~~>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x2c0]>', '<mov~~edi, dword ptr [rsp + 0x2bc]>', '<mov~~esi, dword ptr [rsp + 0x2a0]>', '<mov~~r9d, dword ptr [rsp + 0x2a4]>', '<mov~~rdx, qword ptr [rsp + 0x2a8]>', '<mov~~r8d, dword ptr [rsp + 0x2b0]>', '<mov~~ecx, dword ptr [rsp + 0x2b4]>', '<mov~~dword ptr [rsp + 0x1f8], r9d>', '<mov~~dword ptr [rsp + 0x1fc], esi>', '<cmp~~edi, 0>', '<sete~~sil>', '<mov~~byte ptr [rsp + 0x217], sil>', '<xor~~esi, esi>', '<cmp~~edi, 0>', '<cmove~~rdx, rsi>', '<xor~~esi, esi>', '<cmp~~edi, 0>', '<cmove~~r8d, esi>', '<xor~~esi, esi>', '<cmp~~edi, 0>', '<cmove~~ecx, esi>', '<mov~~rsi, rax>', '<add~~rsi, 8>', '<mov~~qword ptr [rsp + 0x200], rsi>', '<mov~~esi, dword ptr [rax + 8]>', '<cmp~~ecx, esi>', '<mov~~eax, ecx>', '<cmovg~~eax, esi>', '<cmp~~r8d, esi>', '<mov~~edi, r8d>', '<cmovg~~edi, esi>', '<cmp~~esi, 0>', '<cmove~~edi, r8d>', '<mov~~dword ptr [rsp + 0x20c], edi>', '<cmp~~esi, 0>', '<cmove~~eax, ecx>', '<mov~~dword ptr [rsp + 0x210], eax>', '<mov~~rdi, qword ptr [rsp + 0x6e0]>', '<lea~~rsi, [rip + 0x1ce8]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2b8]>', '<add~~rsp, 0x6e8>', '<pop~~rbx>', '<pop~~r14>', '<ret~~>']}, {'block_Idx': 63, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1a0]>', '<mov~~rdx, qword ptr [rsp + 0x290]>', '<mov~~eax, dword ptr [rsp + 0x19c]>', '<add~~eax, 1>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0x1bc], edx>', '<mov~~dword ptr [rsp + 0x1c0], ecx>', '<mov~~dword ptr [rsp + 0x1c4], eax>', '<mov~~rdx, qword ptr [rsp + 0x1a0]>', '<mov~~esi, dword ptr [rsp + 0x1bc]>', '<mov~~eax, dword ptr [rsp + 0x1c0]>', '<mov~~ecx, dword ptr [rsp + 0x1c4]>', '<add~~rdx, 1>', '<mov~~edi, esi>', '<cmp~~rdx, rdi>', '<mov~~dword ptr [rsp + 0x1dc], esi>', '<mov~~qword ptr [rsp + 0x1e0], rdx>', '<mov~~dword ptr [rsp + 0x1e8], ecx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x1ec], ecx>', '<mov~~dword ptr [rsp + 0x1f4], eax>', '<jb~~0x401636>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x23c]>', '<mov~~ecx, dword ptr [rsp + 0x24c]>', '<mov~~esi, dword ptr [rsp + 0x230]>', '<mov~~edx, dword ptr [rsp + 0x234]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp + 0x218], esi>', '<mov~~dword ptr [rsp + 0x21c], edx>', '<mov~~dword ptr [rsp + 0x220], ecx>', '<mov~~dword ptr [rsp + 0x224], eax>', '<mov~~rdx, qword ptr [rsp + 0x228]>', '<mov~~r9, qword ptr [rsp + 0x268]>', '<mov~~r8, qword ptr [rsp + 0x240]>', '<mov~~edi, dword ptr [rsp + 0x218]>', '<mov~~esi, dword ptr [rsp + 0x21c]>', '<mov~~ecx, dword ptr [rsp + 0x220]>', '<mov~~eax, dword ptr [rsp + 0x224]>', '<add~~r8, 1>', '<cmp~~r8, r9>', '<mov~~qword ptr [rsp + 0x270], r8>', '<mov~~r8d, eax>', '<mov~~dword ptr [rsp + 0x278], r8d>', '<mov~~r8d, ecx>', '<mov~~dword ptr [rsp + 0x27c], r8d>', '<mov~~r8, rdx>', '<mov~~qword ptr [rsp + 0x280], r8>', '<mov~~r8d, esi>', '<mov~~dword ptr [rsp + 0x288], r8d>', '<mov~~r8d, edi>', '<mov~~dword ptr [rsp + 0x28c], r8d>', '<mov~~dword ptr [rsp + 0x2a0], edi>', '<mov~~dword ptr [rsp + 0x2a4], esi>', '<mov~~qword ptr [rsp + 0x2a8], rdx>', '<mov~~dword ptr [rsp + 0x2b0], ecx>', '<mov~~dword ptr [rsp + 0x2b4], eax>', '<jne~~0x401269>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x20c]>', '<mov~~edx, dword ptr [rsp + 0x1f8]>', '<mov~~rdi, qword ptr [rsp + 0x6e0]>', '<lea~~rsi, [rip + 0x18b3]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 91, 'blockInsts': ['<jmp~~0x401fc6>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2dc], eax>', '<cmp~~eax, 0>', '<jge~~0x401187>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x29c]>', '<mov~~rcx, qword ptr [rsp + 0x2c8]>', '<mov~~rdx, qword ptr [rsp + 0x2c0]>', '<mov~~rdx, qword ptr [rdx + 0x20]>', '<mov~~qword ptr [rsp + 0x258], rdx>', '<mov~~rcx, qword ptr [rcx + 0x30]>', '<mov~~qword ptr [rsp + 0x260], rcx>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x268], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~rdx, rcx>', '<mov~~qword ptr [rsp + 0x270], rdx>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x278], edx>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x27c], edx>', '<mov~~qword ptr [rsp + 0x280], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x288], ecx>', '<mov~~dword ptr [rsp + 0x28c], eax>', '<mov~~rcx, qword ptr [rsp + 0x258]>', '<mov~~rdx, qword ptr [rsp + 0x270]>', '<mov~~esi, dword ptr [rsp + 0x278]>', '<mov~~edi, dword ptr [rsp + 0x27c]>', '<mov~~rax, qword ptr [rsp + 0x280]>', '<mov~~r8d, dword ptr [rsp + 0x288]>', '<mov~~r9d, dword ptr [rsp + 0x28c]>', '<mov~~dword ptr [rsp + 0x230], r9d>', '<mov~~dword ptr [rsp + 0x234], r8d>', '<mov~~dword ptr [rsp + 0x238], edi>', '<mov~~dword ptr [rsp + 0x23c], esi>', '<mov~~qword ptr [rsp + 0x240], rdx>', '<imul~~rdx, rdx, 0x8480>', '<add~~rcx, rdx>', '<add~~rcx, 0x8450>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x24c], ecx>', '<cmp~~ecx, 0>', '<mov~~qword ptr [rsp + 0x250], rax>', '<jle~~0x401335>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x1d0]>', '<mov~~r8, qword ptr [rsp + 0x1c8]>', '<mov~~edx, dword ptr [rsp + 0x1dc]>', '<mov~~rdi, qword ptr [rsp + 0x1e0]>', '<mov~~eax, dword ptr [rsp + 0x1e8]>', '<mov~~ecx, dword ptr [rsp + 0x1ec]>', '<mov~~dword ptr [rsp + 0x19c], eax>', '<mov~~qword ptr [rsp + 0x1a0], rdi>', '<mov~~r8, qword ptr [r8]>', '<mov~~qword ptr [rsp + 0x1a8], r8>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rsi + rdi*8]>', '<mov~~rsi, qword ptr [rsi + 8]>', '<mov~~qword ptr [rsp + 0x1b0], rsi>', '<cmp~~dword ptr [rsi + 0xc], 0>', '<mov~~dword ptr [rsp + 0x1bc], edx>', '<mov~~dword ptr [rsp + 0x1c0], ecx>', '<mov~~dword ptr [rsp + 0x1c4], eax>', '<jne~~0x40175a>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x2c8]>', '<mov~~rsi, qword ptr [rsp + 0x2d0]>', '<add~~rcx, 0x4b0>', '<lea~~rdi, [rsp + 0x6e0]>', '<mov~~edx, 2>', '<xor~~eax, eax>', '<mov~~r8d, eax>', '<call~~0x5000c0>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x2d0]>', '<mov~~rdi, qword ptr [rsp + 0x2c8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x206c]>', '<mov~~al, 0>', '<call~~0x500018>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x217]>', '<test~~al, 1>', '<jne~~0x40154c>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x1a0]>', '<mov~~edx, dword ptr [rsp + 0x19c]>', '<mov~~rax, qword ptr [rsp + 0x1a8]>', '<mov~~r10, qword ptr [rsp + 0x1b0]>', '<mov~~rdi, qword ptr [rsp + 0x6e0]>', '<mov~~ecx, dword ptr [r10 + 0x60]>', '<imul~~r9, rsi, 0x8480>', '<mov~~r8, rax>', '<add~~r8, r9>', '<add~~r8, 0x8468>', '<mov~~r8, qword ptr [r8]>', '<mov~~r9d, dword ptr [r10 + 0x94]>', '<mov~~r10d, dword ptr [r10 + 0x98]>', '<imul~~rsi, rsi, 0x8480>', '<add~~rax, rsi>', '<add~~rax, 0x8470>', '<mov~~rax, qword ptr [rax]>', '<lea~~rsi, [rip + 0x1c08]>', '<mov~~dword ptr [rsp], r10d>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xb8]>', '<mov~~rdx, qword ptr [rsp + 0x290]>', '<mov~~eax, dword ptr [rsp + 0xb4]>', '<add~~eax, 1>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0xd4], edx>', '<mov~~dword ptr [rsp + 0xd8], ecx>', '<mov~~dword ptr [rsp + 0xdc], eax>', '<mov~~rdx, qword ptr [rsp + 0xb8]>', '<mov~~esi, dword ptr [rsp + 0xd4]>', '<mov~~eax, dword ptr [rsp + 0xd8]>', '<mov~~ecx, dword ptr [rsp + 0xdc]>', '<add~~rdx, 1>', '<mov~~edi, esi>', '<cmp~~rdx, rdi>', '<mov~~dword ptr [rsp + 0xf4], esi>', '<mov~~qword ptr [rsp + 0xf8], rdx>', '<mov~~dword ptr [rsp + 0x100], ecx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x104], ecx>', '<mov~~dword ptr [rsp + 0x10c], eax>', '<jb~~0x401b6b>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x6e0]>', '<lea~~rsi, [rip + 0x1d2a]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x200]>', '<mov~~rax, qword ptr [rsp + 0x2c0]>', '<mov~~ecx, dword ptr [rsp + 0x10c]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<mov~~qword ptr [rsp + 0x88], rax>', '<movsxd~~rcx, ecx>', '<mov~~qword ptr [rsp + 0x90], rcx>', '<mov~~rsi, qword ptr [rsp + 0x6e0]>', '<mov~~qword ptr [rsp + 0x98], rsi>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0xa4], edx>', '<imul~~rcx, rcx, 0x8480>', '<add~~rax, rcx>', '<add~~rax, 0x8450>', '<mov~~qword ptr [rsp + 0xa8], rax>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0xb0], eax>', '<cmp~~eax, 1>', '<jl~~0x401fc6>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x6e0]>', '<lea~~rsi, [rip + 0x14c4]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x190]>', '<mov~~edx, dword ptr [rsp + 0x168]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<add~~rax, 1>', '<mov~~ecx, dword ptr [rcx]>', '<sub~~ecx, edx>', '<mov~~edx, eax>', '<cmp~~ecx, edx>', '<mov~~qword ptr [rsp + 0x148], rax>', '<jg~~0x401a24>']}, {'block_Idx': 75, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xa8]>', '<mov~~edx, dword ptr [rsp + 0x80]>', '<mov~~rax, qword ptr [rsp + 0x68]>', '<add~~rax, 1>', '<mov~~ecx, dword ptr [rcx]>', '<sub~~ecx, edx>', '<mov~~edx, eax>', '<cmp~~ecx, edx>', '<mov~~qword ptr [rsp + 0x58], rax>', '<jle~~0x401fc6>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x2c0]>', '<cmp~~dword ptr [rax + 0x2c], 0>', '<je~~0x401fdc>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x2c8]>', '<mov~~rcx, rax>', '<add~~rcx, 0x2c>', '<mov~~qword ptr [rsp + 0x290], rcx>', '<mov~~edx, dword ptr [rax + 0x2c]>', '<mov~~dword ptr [rsp + 0x29c], edx>', '<xor~~eax, eax>', '<xor~~ecx, ecx>', '<cmp~~edx, 0>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x2a0], edx>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x2a4], edx>', '<mov~~qword ptr [rsp + 0x2a8], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x2b0], ecx>', '<mov~~dword ptr [rsp + 0x2b4], eax>', '<je~~0x40147f>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2dc]>', '<mov~~dword ptr [rsp + 0x2b8], eax>', '<jmp~~0x402015>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x98]>', '<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~rdx, qword ptr [rax + 0x800]>', '<mov~~rcx, qword ptr [rax + 0x808]>', '<lea~~rsi, [rip + 0x1609]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x260]>', '<mov~~rcx, qword ptr [rsp + 0x240]>', '<mov~~rdx, qword ptr [rsp + 0x250]>', '<mov~~qword ptr [rsp + 0x228], rdx>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0xc], 0>', '<jne~~0x4013a0>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x2c0]>', '<cmp~~dword ptr [rax + 0x28], 0>', '<je~~0x401ab8>']}, {'block_Idx': 53, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x16c]>', '<mov~~al, byte ptr [rsp + 0x217]>', '<mov~~rcx, qword ptr [rsp + 0x160]>', '<mov~~rcx, qword ptr [rcx]>', '<mov~~rsi, qword ptr [rcx]>', '<mov~~esi, dword ptr [rsi + 0x810]>', '<test~~esi, esi>', '<setg~~sil>', '<or~~al, sil>', '<mov~~edx, edx>', '<mov~~qword ptr [rsp + 0x150], rdx>', '<mov~~rcx, qword ptr [rcx + rdx*8]>', '<mov~~qword ptr [rsp + 0x158], rcx>', '<test~~al, 1>', '<jne~~0x401946>']}, {'block_Idx': 20, 'blockInsts': ['<jmp~~0x40156d>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x210]>', '<mov~~edx, dword ptr [rsp + 0x1fc]>', '<mov~~rdi, qword ptr [rsp + 0x6e0]>', '<lea~~rsi, [rip + 0x1cf7]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x290]>', '<mov~~ecx, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x1f0], ecx>', '<mov~~eax, 0xffffffff>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x1f4], eax>', '<je~~0x4017ac>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xb8]>', '<mov~~esi, dword ptr [rsp + 0xd4]>', '<mov~~eax, dword ptr [rsp + 0xd8]>', '<mov~~ecx, dword ptr [rsp + 0xdc]>', '<add~~rdx, 1>', '<mov~~edi, esi>', '<cmp~~rdx, rdi>', '<mov~~dword ptr [rsp + 0xf4], esi>', '<mov~~qword ptr [rsp + 0xf8], rdx>', '<mov~~dword ptr [rsp + 0x100], ecx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x104], ecx>', '<mov~~dword ptr [rsp + 0x10c], eax>', '<jb~~0x401b6b>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x6e0]>', '<call~~0x5000d0>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x198]>', '<mov~~edi, dword ptr [rsp + 0x18c]>', '<mov~~sil, byte ptr [rsp + 0x217]>', '<mov~~rdx, qword ptr [rsp + 0x170]>', '<mov~~r8, qword ptr [rsp + 0x178]>', '<mov~~rax, qword ptr [rsp + 0x2c0]>', '<mov~~eax, dword ptr [rax + 0x10]>', '<imul~~r8, r8, 0x8480>', '<add~~rdx, r8>', '<add~~rdx, 0x8460>', '<mov~~qword ptr [rsp + 0x160], rdx>', '<xor~~edx, edx>', '<test~~sil, 1>', '<cmovne~~edx, eax>', '<mov~~dword ptr [rsp + 0x168], edx>', '<mov~~eax, edi>', '<add~~eax, edx>', '<mov~~esi, ecx>', '<sub~~esi, eax>', '<xor~~eax, eax>', '<cmp~~esi, 0>', '<cmovg~~eax, esi>', '<xor~~esi, esi>', '<cmp~~edi, 0>', '<cmove~~eax, esi>', '<mov~~dword ptr [rsp + 0x16c], eax>', '<sub~~ecx, edx>', '<cmp~~eax, ecx>', '<jge~~0x401aa2>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x1f0]>', '<mov~~rax, qword ptr [rsp + 0x2c8]>', '<mov~~rcx, qword ptr [rsp + 0x2c0]>', '<add~~rcx, 0x20>', '<mov~~qword ptr [rsp + 0x1c8], rcx>', '<add~~rax, 0x30>', '<mov~~qword ptr [rsp + 0x1d0], rax>', '<xor~~eax, eax>', '<mov~~edx, eax>', '<xor~~ecx, ecx>', '<mov~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x1dc], esi>', '<mov~~qword ptr [rsp + 0x1e0], rdx>', '<mov~~dword ptr [rsp + 0x1e8], ecx>', '<mov~~dword ptr [rsp + 0x1ec], eax>', '<mov~~rsi, qword ptr [rsp + 0x1d0]>', '<mov~~r8, qword ptr [rsp + 0x1c8]>', '<mov~~edx, dword ptr [rsp + 0x1dc]>', '<mov~~rdi, qword ptr [rsp + 0x1e0]>', '<mov~~eax, dword ptr [rsp + 0x1e8]>', '<mov~~ecx, dword ptr [rsp + 0x1ec]>', '<mov~~dword ptr [rsp + 0x19c], eax>', '<mov~~qword ptr [rsp + 0x1a0], rdi>', '<mov~~r8, qword ptr [r8]>', '<mov~~qword ptr [rsp + 0x1a8], r8>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rsi + rdi*8]>', '<mov~~rsi, qword ptr [rsi + 8]>', '<mov~~qword ptr [rsp + 0x1b0], rsi>', '<cmp~~dword ptr [rsi + 0xc], 0>', '<mov~~dword ptr [rsp + 0x1bc], edx>', '<mov~~dword ptr [rsp + 0x1c0], ecx>', '<mov~~dword ptr [rsp + 0x1c4], eax>', '<jne~~0x40175a>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x24c]>', '<mov~~rax, qword ptr [rsp + 0x258]>', '<mov~~rdx, qword ptr [rsp + 0x240]>', '<imul~~rdx, rdx, 0x8480>', '<add~~rax, rdx>', '<add~~rax, 0x8460>', '<mov~~rax, qword ptr [rax]>', '<add~~ecx, -1>', '<mov~~ecx, ecx>', '<mov~~rcx, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rcx + 0x800]>', '<add~~rax, qword ptr [rcx + 0x808]>', '<mov~~qword ptr [rsp + 0x250], rax>', '<mov~~rax, qword ptr [rsp + 0x260]>', '<mov~~rcx, qword ptr [rsp + 0x240]>', '<mov~~rdx, qword ptr [rsp + 0x250]>', '<mov~~qword ptr [rsp + 0x228], rdx>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0xc], 0>', '<jne~~0x4013a0>']}, {'block_Idx': 86, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x190]>', '<mov~~edx, dword ptr [rsp + 0x168]>', '<mov~~rax, qword ptr [rsp + 0x110]>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x118], rax>', '<mov~~ecx, dword ptr [rcx]>', '<sub~~ecx, edx>', '<mov~~dword ptr [rsp + 0x124], ecx>', '<mov~~edx, eax>', '<cmp~~ecx, edx>', '<mov~~qword ptr [rsp + 0x148], rax>', '<jg~~0x401a24>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x290]>', '<mov~~ecx, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x108], ecx>', '<mov~~eax, 0xffffffff>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x10c], eax>', '<je~~0x401d18>']}, {'block_Idx': 65, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x98]>', '<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~edx, dword ptr [rax + 0x810]>', '<mov~~rcx, qword ptr [rax + 0x808]>', '<lea~~rsi, [rip + 0x1679]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x60]>', '<mov~~rdi, qword ptr [rsp + 0x98]>', '<mov~~rax, qword ptr [rsp + 0x78]>', '<mov~~qword ptr [rsp + 0x28], rcx>', '<mov~~rax, qword ptr [rax]>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~edx, dword ptr [rax + 0x810]>', '<mov~~rcx, qword ptr [rax + 0x808]>', '<lea~~rsi, [rip + 0x1550]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x228]>', '<mov~~r9, qword ptr [rsp + 0x268]>', '<mov~~r8, qword ptr [rsp + 0x240]>', '<mov~~edi, dword ptr [rsp + 0x218]>', '<mov~~esi, dword ptr [rsp + 0x21c]>', '<mov~~ecx, dword ptr [rsp + 0x220]>', '<mov~~eax, dword ptr [rsp + 0x224]>', '<add~~r8, 1>', '<cmp~~r8, r9>', '<mov~~qword ptr [rsp + 0x270], r8>', '<mov~~r8d, eax>', '<mov~~dword ptr [rsp + 0x278], r8d>', '<mov~~r8d, ecx>', '<mov~~dword ptr [rsp + 0x27c], r8d>', '<mov~~r8, rdx>', '<mov~~qword ptr [rsp + 0x280], r8>', '<mov~~r8d, esi>', '<mov~~dword ptr [rsp + 0x288], r8d>', '<mov~~r8d, edi>', '<mov~~dword ptr [rsp + 0x28c], r8d>', '<mov~~dword ptr [rsp + 0x2a0], edi>', '<mov~~dword ptr [rsp + 0x2a4], esi>', '<mov~~qword ptr [rsp + 0x2a8], rdx>', '<mov~~dword ptr [rsp + 0x2b0], ecx>', '<mov~~dword ptr [rsp + 0x2b4], eax>', '<jne~~0x401269>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x180]>', '<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~rdx, qword ptr [rax + 0x800]>', '<mov~~rcx, qword ptr [rax + 0x808]>', '<lea~~rsi, [rip + 0x1b5d]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 42, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x108]>', '<mov~~rax, qword ptr [rsp + 0x2c8]>', '<mov~~rcx, qword ptr [rsp + 0x2c0]>', '<add~~rcx, 0x20>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<add~~rax, 0x30>', '<mov~~qword ptr [rsp + 0xe8], rax>', '<xor~~eax, eax>', '<mov~~edx, eax>', '<xor~~ecx, ecx>', '<mov~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0xf4], esi>', '<mov~~qword ptr [rsp + 0xf8], rdx>', '<mov~~dword ptr [rsp + 0x100], ecx>', '<mov~~dword ptr [rsp + 0x104], eax>', '<mov~~rsi, qword ptr [rsp + 0xe8]>', '<mov~~r8, qword ptr [rsp + 0xe0]>', '<mov~~edx, dword ptr [rsp + 0xf4]>', '<mov~~rdi, qword ptr [rsp + 0xf8]>', '<mov~~eax, dword ptr [rsp + 0x100]>', '<mov~~ecx, dword ptr [rsp + 0x104]>', '<mov~~dword ptr [rsp + 0xb4], eax>', '<mov~~qword ptr [rsp + 0xb8], rdi>', '<mov~~r8, qword ptr [r8]>', '<mov~~qword ptr [rsp + 0xc0], r8>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rsi + rdi*8]>', '<mov~~rsi, qword ptr [rsi + 8]>', '<mov~~qword ptr [rsp + 0xc8], rsi>', '<cmp~~dword ptr [rsi + 0xc], 1>', '<mov~~dword ptr [rsp + 0xd4], edx>', '<mov~~dword ptr [rsp + 0xd8], ecx>', '<mov~~dword ptr [rsp + 0xdc], eax>', '<jne~~0x401cc6>']}, {'block_Idx': 76, 'blockInsts': ['<jmp~~0x401aa2>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0xe8]>', '<mov~~r8, qword ptr [rsp + 0xe0]>', '<mov~~edx, dword ptr [rsp + 0xf4]>', '<mov~~rdi, qword ptr [rsp + 0xf8]>', '<mov~~eax, dword ptr [rsp + 0x100]>', '<mov~~ecx, dword ptr [rsp + 0x104]>', '<mov~~dword ptr [rsp + 0xb4], eax>', '<mov~~qword ptr [rsp + 0xb8], rdi>', '<mov~~r8, qword ptr [r8]>', '<mov~~qword ptr [rsp + 0xc0], r8>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rsi + rdi*8]>', '<mov~~rsi, qword ptr [rsi + 8]>', '<mov~~qword ptr [rsp + 0xc8], rsi>', '<cmp~~dword ptr [rsi + 0xc], 1>', '<mov~~dword ptr [rsp + 0xd4], edx>', '<mov~~dword ptr [rsp + 0xd8], ecx>', '<mov~~dword ptr [rsp + 0xdc], eax>', '<jne~~0x401cc6>']}], 'cfg_edge_info': [(41, 49), (58, 65), (76, 43), (38, 44), (17, 21), (28, 30), (75, 81), (37, 42), (53, 62), (42, 50), (47, 64), (2, 4), (80, 88), (72, 77), (81, 89), (22, 12), (20, 24), (63, 38), (39, 46), (49, 48), (27, 29), (55, 45), (73, 78), (0, 2), (74, 79), (66, 75), (30, 36), (46, 38), (5, 9), (38, 43), (31, 37), (61, 72), (13, 16), (53, 61), (62, 73), (12, 17), (89, 81), (65, 74), (36, 47), (60, 50), (48, 30), (75, 48), (4, 6), (35, 39), (29, 35), (50, 67), (79, 48), (10, 12), (27, 28), (41, 48), (21, 24), (44, 53), (77, 86), (73, 43), (17, 20), (55, 46), (88, 80), (37, 41), (6, 10), (45, 63), (67, 60), (58, 66), (51, 60), (90, 43), (87, 90), (78, 87), (28, 31), (24, 27), (72, 76), (42, 51), (88, 48), (19, 12), (39, 45), (9, 11), (63, 55), (86, 77), (4, 5), (35, 38), (89, 91), (86, 43), (49, 58), (91, 48), (60, 51), (44, 43), (87, 78), (46, 55), (10, 13), (74, 80), (67, 41), (13, 15), (43, 28), (51, 41)], 'cdg_edge_info': [(53, 72), (60, 50), (4, 64), (41, 49), (4, 9), (73, 87), (4, 6), (4, 12), (35, 39), (58, 74), (89, 89), (4, 24), (38, 44), (17, 21), (39, 45), (4, 27), (4, 30), (4, 36), (37, 42), (74, 88), (27, 43), (28, 48), (42, 50), (4, 5), (86, 86), (4, 11), (44, 53), (4, 17), (17, 20), (49, 58), (75, 89), (4, 47), (28, 41), (53, 73), (72, 86), (4, 10), (87, 87), (58, 75), (4, 28), (10, 13), (28, 31), (28, 37), (27, 35), (27, 29), (55, 45), (27, 38), (88, 88)], 'ddg_edge_info': [(38, 87), (41, 49), (4, 9), (38, 44), (0, 5), (6, 48), (37, 42), (41, 88), (43, 30), (49, 89), (47, 64), (0, 44), (6, 41), (29, 43), (2, 4), (6, 50), (31, 49), (31, 58), (38, 73), (6, 13), (44, 86), (24, 28), (53, 73), (0, 64), (12, 29), (6, 43), (31, 42), (29, 45), (12, 38), (41, 74), (55, 45), (38, 75), (49, 75), (45, 53), (50, 49), (24, 30), (0, 39), (38, 41), (29, 38), (6, 36), (0, 2), (58, 74), (12, 31), (6, 45), (13, 60), (44, 72), (12, 49), (30, 36), (45, 55), (0, 41), (38, 89), (5, 64), (6, 29), (5, 9), (12, 24), (6, 38), (31, 37), (6, 47), (10, 35), (12, 17), (6, 31), (9, 64), (13, 55), (2, 6), (39, 55), (41, 89), (45, 50), (36, 47), (10, 28), (0, 27), (31, 60), (10, 37), (53, 72), (60, 50), (48, 30), (6, 24), (50, 58), (35, 39), (29, 35), (29, 44), (21, 49), (10, 12), (45, 43), (44, 87), (12, 58), (0, 38), (38, 86), (13, 41), (21, 24), (12, 21), (50, 60), (44, 53), (41, 75), (0, 4), (0, 13), (53, 58), (37, 41), (6, 10), (12, 60), (49, 88), (38, 88), (58, 75), (44, 73), (45, 38), (31, 48), (12, 44), (38, 72), (12, 53), (6, 12), (43, 31), (0, 42), (24, 27), (6, 21), (6, 30), (42, 60), (2, 5), (31, 41), (29, 53), (31, 50), (49, 74), (12, 55), (38, 74), (24, 29), (50, 48), (35, 38), (13, 38), (0, 10), (49, 58), (29, 55), (0, 28), (50, 41), (24, 31), (0, 49), (29, 39), (10, 13), (0, 12), (45, 44), (21, 44), (38, 60), (12, 41), (0, 21), (43, 28)]}]}
{'write_manifest': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%r14'}, {'instIndex': 1, 'instruction': 'pushq\t%rbx'}, {'instIndex': 2, 'instruction': 'subq\t$0x6e8, %rsp                     # imm = 0x6E8'}, {'instIndex': 3, 'instruction': 'movl\t%esi, 0x2bc(%rsp)                 # 4-byte Spill'}, {'instIndex': 4, 'instruction': 'movq\t%rdi, %rcx'}, {'instIndex': 5, 'instruction': 'movq\t%rcx, 0x2c8(%rsp)                 # 8-byte Spill'}, {'instIndex': 6, 'instruction': 'movq\t0x18(%rcx), %rax'}, {'instIndex': 7, 'instruction': 'movq\t%rax, 0x2c0(%rsp)                 # 8-byte Spill'}, {'instIndex': 8, 'instruction': 'leaq\t0x6e0(%rsp), %rax'}, {'instIndex': 9, 'instruction': 'leaq\t0x2e0(%rsp), %rdi'}, {'instIndex': 10, 'instruction': 'movq\t%rdi, 0x2d0(%rsp)                 # 8-byte Spill'}, {'instIndex': 11, 'instruction': 'addq\t$0x38, %rcx'}, {'instIndex': 12, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 13, 'instruction': 'leaq\t.L.str.0x20(%rip), %rdx'}, {'instIndex': 14, 'instruction': 'movb\t$0, %al'}, {'instIndex': 15, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 18, 'instruction': 'addq\t$0x4b0, %rcx                     # imm = 0x4B0'}, {'instIndex': 19, 'instruction': 'leaq\t0x6e0(%rsp), %rdi'}, {'instIndex': 20, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 21, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 22, 'instruction': 'movl\t%eax, %r8d'}, {'instIndex': 23, 'instruction': 'callq\tavio_open2@PLT'}, {'instIndex': 25, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 26, 'instruction': 'jge\t.LBB5_2'}, {'instIndex': 29, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 30, 'instruction': 'leaq\t.L.str.0x21(%rip), %rdx'}, {'instIndex': 31, 'instruction': 'movb\t$0, %al'}, {'instIndex': 32, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 35, 'instruction': 'jmp\t.LBB5_41'}, {'instIndex': 36, 'instruction': 'movq\t0x6e0(%rsp), %rdi'}, {'instIndex': 37, 'instruction': 'leaq\t.L.str.0x22(%rip), %rsi'}, {'instIndex': 38, 'instruction': 'movb\t$0, %al'}, {'instIndex': 39, 'instruction': 'callq\tavio_printf@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 719, 'instruction': 'movq\t0x6e0(%rsp), %rdi'}, {'instIndex': 720, 'instruction': 'leaq\t.L.str.0x2b(%rip), %rsi'}, {'instIndex': 721, 'instruction': 'movb\t$0, %al'}, {'instIndex': 722, 'instruction': 'callq\tavio_printf@PLT'}, {'instIndex': 723, 'instruction': 'movq\t0x6e0(%rsp), %rdi'}, {'instIndex': 724, 'instruction': 'callq\tavio_flush@PLT'}, {'instIndex': 725, 'instruction': 'movq\t0x6e0(%rsp), %rdi'}, {'instIndex': 726, 'instruction': 'callq\tavio_close@PLT'}, {'instIndex': 730, 'instruction': 'addq\t$0x6e8, %rsp                     # imm = 0x6E8'}, {'instIndex': 731, 'instruction': 'popq\t%rbx'}, {'instIndex': 732, 'instruction': 'popq\t%r14'}, {'instIndex': 733, 'instruction': 'retq'}]}]}
The case of compiler clang with optimization Os.
Patched source code file: smoothstreamingenc.c
Patched function: 1---static int write_manifest 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_before/Os/smoothstreamingenc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_before/Os/smoothstreamingenc.s---write_manifest---before
function id: 5
function flag: True
There are 468 instructions for function: write_manifest in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '210', 'end': 224}, 'before': {'start': '210', 'end': 223}}}, {'modifyIndex': 2, 'line': {'after': {'start': '279', 'end': 285}, 'before': {'start': '278', 'end': 283}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%r14'}, {'instIndex': 1, 'instruction': 'pushq\t%rbx'}, {'instIndex': 2, 'instruction': 'subq\t$0x5d8, %rsp                     # imm = 0x5D8'}, {'instIndex': 3, 'instruction': 'movl\t%esi, 0x1ac(%rsp)                 # 4-byte Spill'}, {'instIndex': 4, 'instruction': 'movq\t%rdi, %rcx'}, {'instIndex': 5, 'instruction': 'movq\t%rcx, 0x1b8(%rsp)                 # 8-byte Spill'}, {'instIndex': 6, 'instruction': 'movq\t0x18(%rcx), %rax'}, {'instIndex': 7, 'instruction': 'movq\t%rax, 0x1b0(%rsp)                 # 8-byte Spill'}, {'instIndex': 8, 'instruction': 'leaq\t0x5d0(%rsp), %rax'}, {'instIndex': 9, 'instruction': 'leaq\t0x1d0(%rsp), %rdi'}, {'instIndex': 10, 'instruction': 'movq\t%rdi, 0x1c0(%rsp)                 # 8-byte Spill'}, {'instIndex': 11, 'instruction': 'addq\t$0x38, %rcx'}, {'instIndex': 12, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 13, 'instruction': 'leaq\t.L.str.0x20(%rip), %rdx'}, {'instIndex': 14, 'instruction': 'movb\t$0, %al'}, {'instIndex': 15, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 18, 'instruction': 'addq\t$0x4b0, %rcx                     # imm = 0x4B0'}, {'instIndex': 19, 'instruction': 'leaq\t0x5d0(%rsp), %rdi'}, {'instIndex': 20, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 21, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 22, 'instruction': 'movl\t%eax, %r8d'}, {'instIndex': 23, 'instruction': 'callq\tavio_open2@PLT'}, {'instIndex': 25, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 26, 'instruction': 'jge\t.LBB5_2'}, {'instIndex': 29, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 30, 'instruction': 'leaq\t.L.str.0x21(%rip), %rdx'}, {'instIndex': 31, 'instruction': 'movb\t$0, %al'}, {'instIndex': 32, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 35, 'instruction': 'jmp\t.LBB5_27'}, {'instIndex': 36, 'instruction': 'movq\t0x5d0(%rsp), %rdi'}, {'instIndex': 37, 'instruction': 'leaq\t.L.str.0x22(%rip), %rsi'}, {'instIndex': 38, 'instruction': 'movb\t$0, %al'}, {'instIndex': 39, 'instruction': 'callq\tavio_printf@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 453, 'instruction': 'movq\t0x5d0(%rsp), %rdi'}, {'instIndex': 454, 'instruction': 'leaq\t.L.str.0x2b(%rip), %rsi'}, {'instIndex': 455, 'instruction': 'movb\t$0, %al'}, {'instIndex': 456, 'instruction': 'callq\tavio_printf@PLT'}, {'instIndex': 457, 'instruction': 'movq\t0x5d0(%rsp), %rdi'}, {'instIndex': 458, 'instruction': 'callq\tavio_flush@PLT'}, {'instIndex': 459, 'instruction': 'movq\t0x5d0(%rsp), %rdi'}, {'instIndex': 460, 'instruction': 'callq\tavio_close@PLT'}, {'instIndex': 464, 'instruction': 'addq\t$0x5d8, %rsp                     # imm = 0x5D8'}, {'instIndex': 465, 'instruction': 'popq\t%rbx'}, {'instIndex': 466, 'instruction': 'popq\t%r14'}, {'instIndex': 467, 'instruction': 'retq'}]}]
Patched function: 1---static int write_manifest 
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_before/Os/smoothstreamingenc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_before/Os/smoothstreamingenc.s---write_manifest---before
function id: 5
function flag: True
There are 468 instructions for function: write_manifest in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '210', 'end': 224}, 'before': {'start': '210', 'end': 223}}}, {'modifyIndex': 2, 'line': {'after': {'start': '279', 'end': 285}, 'before': {'start': '278', 'end': 283}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%r14'}, {'instIndex': 1, 'instruction': 'pushq\t%rbx'}, {'instIndex': 2, 'instruction': 'subq\t$0x5d8, %rsp                     # imm = 0x5D8'}, {'instIndex': 3, 'instruction': 'movl\t%esi, 0x1ac(%rsp)                 # 4-byte Spill'}, {'instIndex': 4, 'instruction': 'movq\t%rdi, %rcx'}, {'instIndex': 5, 'instruction': 'movq\t%rcx, 0x1b8(%rsp)                 # 8-byte Spill'}, {'instIndex': 6, 'instruction': 'movq\t0x18(%rcx), %rax'}, {'instIndex': 7, 'instruction': 'movq\t%rax, 0x1b0(%rsp)                 # 8-byte Spill'}, {'instIndex': 8, 'instruction': 'leaq\t0x5d0(%rsp), %rax'}, {'instIndex': 9, 'instruction': 'leaq\t0x1d0(%rsp), %rdi'}, {'instIndex': 10, 'instruction': 'movq\t%rdi, 0x1c0(%rsp)                 # 8-byte Spill'}, {'instIndex': 11, 'instruction': 'addq\t$0x38, %rcx'}, {'instIndex': 12, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 13, 'instruction': 'leaq\t.L.str.0x20(%rip), %rdx'}, {'instIndex': 14, 'instruction': 'movb\t$0, %al'}, {'instIndex': 15, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 18, 'instruction': 'addq\t$0x4b0, %rcx                     # imm = 0x4B0'}, {'instIndex': 19, 'instruction': 'leaq\t0x5d0(%rsp), %rdi'}, {'instIndex': 20, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 21, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 22, 'instruction': 'movl\t%eax, %r8d'}, {'instIndex': 23, 'instruction': 'callq\tavio_open2@PLT'}, {'instIndex': 25, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 26, 'instruction': 'jge\t.LBB5_2'}, {'instIndex': 29, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 30, 'instruction': 'leaq\t.L.str.0x21(%rip), %rdx'}, {'instIndex': 31, 'instruction': 'movb\t$0, %al'}, {'instIndex': 32, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 35, 'instruction': 'jmp\t.LBB5_27'}, {'instIndex': 36, 'instruction': 'movq\t0x5d0(%rsp), %rdi'}, {'instIndex': 37, 'instruction': 'leaq\t.L.str.0x22(%rip), %rsi'}, {'instIndex': 38, 'instruction': 'movb\t$0, %al'}, {'instIndex': 39, 'instruction': 'callq\tavio_printf@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 453, 'instruction': 'movq\t0x5d0(%rsp), %rdi'}, {'instIndex': 454, 'instruction': 'leaq\t.L.str.0x2b(%rip), %rsi'}, {'instIndex': 455, 'instruction': 'movb\t$0, %al'}, {'instIndex': 456, 'instruction': 'callq\tavio_printf@PLT'}, {'instIndex': 457, 'instruction': 'movq\t0x5d0(%rsp), %rdi'}, {'instIndex': 458, 'instruction': 'callq\tavio_flush@PLT'}, {'instIndex': 459, 'instruction': 'movq\t0x5d0(%rsp), %rdi'}, {'instIndex': 460, 'instruction': 'callq\tavio_close@PLT'}, {'instIndex': 464, 'instruction': 'addq\t$0x5d8, %rsp                     # imm = 0x5D8'}, {'instIndex': 465, 'instruction': 'popq\t%rbx'}, {'instIndex': 466, 'instruction': 'popq\t%r14'}, {'instIndex': 467, 'instruction': 'retq'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_before/Os/smoothstreamingenc.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_before/Os/smoothstreamingenc.o---before
The extraction of function: write_manifest
Analyzing the binaries to generate subCFGs from patched function ...
It has 343 nodes and 670 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 468 instructions in binary file.
[4198563, 4198650, 4198696, 4198708, 4198743, 4198762]
[4201020, 4201042, 4201055, 4201068, 4201077]
The execution time of patched subCFG information extraction via angr: 0:00:00.642793
{'write_manifest': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401134>, <DisassemblerInsn "mov" for 0x40113c>, <DisassemblerInsn "mov" for 0x401144>, <DisassemblerInsn "lea" for 0x401149>, <DisassemblerInsn "mov" for 0x401150>, <DisassemblerInsn "call" for 0x401152>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x4010a3>, <DisassemblerInsn "push" for 0x4010a5>, <DisassemblerInsn "sub" for 0x4010a6>, <DisassemblerInsn "mov" for 0x4010ad>, <DisassemblerInsn "mov" for 0x4010b4>, <DisassemblerInsn "mov" for 0x4010b7>, <DisassemblerInsn "mov" for 0x4010bf>, <DisassemblerInsn "mov" for 0x4010c3>, <DisassemblerInsn "lea" for 0x4010cb>, <DisassemblerInsn "lea" for 0x4010d3>, <DisassemblerInsn "mov" for 0x4010db>, <DisassemblerInsn "add" for 0x4010e3>, <DisassemblerInsn "mov" for 0x4010e7>, <DisassemblerInsn "lea" for 0x4010ec>, <DisassemblerInsn "mov" for 0x4010f3>, <DisassemblerInsn "call" for 0x4010f5>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40116a>, <DisassemblerInsn "lea" for 0x401172>, <DisassemblerInsn "mov" for 0x401179>, <DisassemblerInsn "call" for 0x40117b>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4010fa>, <DisassemblerInsn "mov" for 0x401102>, <DisassemblerInsn "add" for 0x40110a>, <DisassemblerInsn "lea" for 0x401111>, <DisassemblerInsn "mov" for 0x401119>, <DisassemblerInsn "xor" for 0x40111e>, <DisassemblerInsn "mov" for 0x401120>, <DisassemblerInsn "call" for 0x401123>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401128>, <DisassemblerInsn "cmp" for 0x40112f>, <DisassemblerInsn "jge" for 0x401132>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401157>, <DisassemblerInsn "mov" for 0x40115e>, <DisassemblerInsn "jmp" for 0x401165>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a75>, <DisassemblerInsn "add" for 0x401a7c>, <DisassemblerInsn "pop" for 0x401a83>, <DisassemblerInsn "pop" for 0x401a84>, <DisassemblerInsn "ret" for 0x401a86>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401180>, <DisassemblerInsn "mov" for 0x401188>, <DisassemblerInsn "add" for 0x40118b>, <DisassemblerInsn "mov" for 0x40118f>, <DisassemblerInsn "mov" for 0x401197>, <DisassemblerInsn "mov" for 0x40119a>, <DisassemblerInsn "xor" for 0x4011a1>, <DisassemblerInsn "xor" for 0x4011a3>, <DisassemblerInsn "cmp" for 0x4011a5>, <DisassemblerInsn "mov" for 0x4011a8>, <DisassemblerInsn "mov" for 0x4011aa>, <DisassemblerInsn "mov" for 0x4011b1>, <DisassemblerInsn "mov" for 0x4011b3>, <DisassemblerInsn "mov" for 0x4011ba>, <DisassemblerInsn "mov" for 0x4011c2>, <DisassemblerInsn "mov" for 0x4011c4>, <DisassemblerInsn "mov" for 0x4011cb>, <DisassemblerInsn "je" for 0x4011d2>]'}], 'cfg_block_detailed_info': [{'block_Idx': 3, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1c0]>', '<mov~~rdi, qword ptr [rsp + 0x1b8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x1c59]>', '<mov~~al, 0>', '<call~~0x500018>']}, {'block_Idx': 0, 'blockInsts': ['<push~~r14>', '<push~~rbx>', '<sub~~rsp, 0x5d8>', '<mov~~dword ptr [rsp + 0x1ac], esi>', '<mov~~rcx, rdi>', '<mov~~qword ptr [rsp + 0x1b8], rcx>', '<mov~~rax, qword ptr [rcx + 0x18]>', '<mov~~qword ptr [rsp + 0x1b0], rax>', '<lea~~rax, [rsp + 0x5d0]>', '<lea~~rdi, [rsp + 0x1d0]>', '<mov~~qword ptr [rsp + 0x1c0], rdi>', '<add~~rcx, 0x38>', '<mov~~esi, 0x400>', '<lea~~rdx, [rip + 0x1caa]>', '<mov~~al, 0>', '<call~~0x500020>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x5d0]>', '<lea~~rsi, [rip + 0x1c4f]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1b8]>', '<mov~~rsi, qword ptr [rsp + 0x1c0]>', '<add~~rcx, 0x4b0>', '<lea~~rdi, [rsp + 0x5d0]>', '<mov~~edx, 2>', '<xor~~eax, eax>', '<mov~~r8d, eax>', '<call~~0x5000c0>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~dword ptr [rsp + 0x1cc], eax>', '<cmp~~eax, 0>', '<jge~~0x40116a>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1cc]>', '<mov~~dword ptr [rsp + 0x1a8], eax>', '<jmp~~0x401a75>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1a8]>', '<add~~rsp, 0x5d8>', '<pop~~rbx>', '<pop~~r14>', '<ret~~>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b8]>', '<mov~~rcx, rax>', '<add~~rcx, 0x2c>', '<mov~~qword ptr [rsp + 0x180], rcx>', '<mov~~edx, dword ptr [rax + 0x2c]>', '<mov~~dword ptr [rsp + 0x18c], edx>', '<xor~~eax, eax>', '<xor~~ecx, ecx>', '<cmp~~edx, 0>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x190], edx>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x194], edx>', '<mov~~qword ptr [rsp + 0x198], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x1a0], ecx>', '<mov~~dword ptr [rsp + 0x1a4], eax>', '<je~~0x401462>']}], 'cfg_edge_info': [(0, 1), (2, 4), (1, 2), (4, 6), (5, 7), (2, 3), (3, 5)]}, {'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a26>, <DisassemblerInsn "lea" for 0x401a2e>, <DisassemblerInsn "mov" for 0x401a35>, <DisassemblerInsn "call" for 0x401a37>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a5f>, <DisassemblerInsn "call" for 0x401a67>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a3c>, <DisassemblerInsn "lea" for 0x401a44>, <DisassemblerInsn "mov" for 0x401a4b>, <DisassemblerInsn "call" for 0x401a4d>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401157>, <DisassemblerInsn "mov" for 0x40115e>, <DisassemblerInsn "jmp" for 0x401165>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "xor" for 0x401a6c>, <DisassemblerInsn "mov" for 0x401a6e>, <DisassemblerInsn "mov" for 0x401a75>, <DisassemblerInsn "add" for 0x401a7c>, <DisassemblerInsn "pop" for 0x401a83>, <DisassemblerInsn "pop" for 0x401a84>, <DisassemblerInsn "ret" for 0x401a86>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4017e7>, <DisassemblerInsn "cmp" for 0x4017ef>, <DisassemblerInsn "je" for 0x4017f3>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a52>, <DisassemblerInsn "call" for 0x401a5a>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a75>, <DisassemblerInsn "add" for 0x401a7c>, <DisassemblerInsn "pop" for 0x401a83>, <DisassemblerInsn "pop" for 0x401a84>, <DisassemblerInsn "ret" for 0x401a86>]'}], 'cfg_block_detailed_info': [{'block_Idx': 37, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x5d0]>', '<lea~~rsi, [rip + 0x1525]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x5d0]>', '<call~~0x5000d0>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x5d0]>', '<lea~~rsi, [rip + 0x1634]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1cc]>', '<mov~~dword ptr [rsp + 0x1a8], eax>', '<jmp~~0x401a75>']}, {'block_Idx': 36, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x1a8], eax>', '<mov~~eax, dword ptr [rsp + 0x1a8]>', '<add~~rsp, 0x5d8>', '<pop~~rbx>', '<pop~~r14>', '<ret~~>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<cmp~~dword ptr [rax + 0x2c], 0>', '<je~~0x401a3c>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x5d0]>', '<call~~0x500058>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1a8]>', '<add~~rsp, 0x5d8>', '<pop~~rbx>', '<pop~~r14>', '<ret~~>']}], 'cfg_edge_info': [(26, 30), (23, 26), (30, 36), (5, 7), (37, 23), (21, 23)]}]}
{'write_manifest': [4201020, 4201042, 4201055, 4201068, 4201077]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/3/libav.libav/310cc4bf82824f09bdd0b9147ed725cdbeaf9bdd/clang_before/Os/smoothstreamingenc.o---before
The extraction of function: write_manifest
[4201020, 4201042, 4201055, 4201068, 4201077]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 86 nodes and 137 edges in CFGEmulated.
It has 82 nodes and 111 edges in CDG.
It has 2283 nodes and 2879 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4201020, 4201042, 4201055, 4201068, 4201077]
{4198784, 4200587, 4200335, 4199961, 4199836, 4200477, 4199714, 4198563, 4200998, 4198696, 4199725, 4199727, 4198708, 4201020, 4199874, 4200515, 4199760, 4200401, 4201042, 4198743, 4198872, 4201055, 4199522, 4200932, 4199782, 4200423, 4198762, 4201068, 4201077, 4199800, 4200441, 4198650}
[13, 53, 5, 17, 65, 44, 39, 10, 9, 29, 61, 48, 30, 15, 20, 35, 55, 31, 16, 0, 41, 42, 46, 22, 27, 58, 28, 24, 49, 45, 6, 59, 12, 38, 36, 63, 47, 21, 19, 2, 37, 62, 11, 4]
The execution time of patched slicing information extraction via angr: 0:01:39.988780
{'write_manifest': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011d8>, <DisassemblerInsn "mov" for 0x4011df>, <DisassemblerInsn "mov" for 0x4011e7>, <DisassemblerInsn "mov" for 0x4011ef>, <DisassemblerInsn "mov" for 0x4011f3>, <DisassemblerInsn "mov" for 0x4011fb>, <DisassemblerInsn "mov" for 0x4011ff>, <DisassemblerInsn "mov" for 0x401207>, <DisassemblerInsn "mov" for 0x401209>, <DisassemblerInsn "xor" for 0x401211>, <DisassemblerInsn "mov" for 0x401213>, <DisassemblerInsn "xor" for 0x401215>, <DisassemblerInsn "mov" for 0x401217>, <DisassemblerInsn "mov" for 0x40121a>, <DisassemblerInsn "mov" for 0x401222>, <DisassemblerInsn "mov" for 0x401224>, <DisassemblerInsn "mov" for 0x40122b>, <DisassemblerInsn "mov" for 0x40122d>, <DisassemblerInsn "mov" for 0x401234>, <DisassemblerInsn "mov" for 0x40123c>, <DisassemblerInsn "mov" for 0x40123e>, <DisassemblerInsn "mov" for 0x401245>, <DisassemblerInsn "mov" for 0x40124c>, <DisassemblerInsn "mov" for 0x401254>, <DisassemblerInsn "mov" for 0x40125c>, <DisassemblerInsn "mov" for 0x401263>, <DisassemblerInsn "mov" for 0x40126a>, <DisassemblerInsn "mov" for 0x401272>, <DisassemblerInsn "mov" for 0x40127a>, <DisassemblerInsn "mov" for 0x401282>, <DisassemblerInsn "mov" for 0x40128a>, <DisassemblerInsn "mov" for 0x401292>, <DisassemblerInsn "mov" for 0x401299>, <DisassemblerInsn "mov" for 0x4012a0>, <DisassemblerInsn "imul" for 0x4012a8>, <DisassemblerInsn "add" for 0x4012af>, <DisassemblerInsn "add" for 0x4012b2>, <DisassemblerInsn "mov" for 0x4012b9>, <DisassemblerInsn "mov" for 0x4012bb>, <DisassemblerInsn "cmp" for 0x4012c2>, <DisassemblerInsn "mov" for 0x4012c5>, <DisassemblerInsn "jle" for 0x4012cd>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401619>, <DisassemblerInsn "mov" for 0x401621>, <DisassemblerInsn "mov" for 0x401629>, <DisassemblerInsn "mov" for 0x401630>, <DisassemblerInsn "mov" for 0x401638>, <DisassemblerInsn "mov" for 0x40163f>, <DisassemblerInsn "mov" for 0x401646>, <DisassemblerInsn "mov" for 0x40164d>, <DisassemblerInsn "mov" for 0x401655>, <DisassemblerInsn "mov" for 0x401658>, <DisassemblerInsn "mov" for 0x401660>, <DisassemblerInsn "mov" for 0x401663>, <DisassemblerInsn "mov" for 0x401667>, <DisassemblerInsn "mov" for 0x40166b>, <DisassemblerInsn "cmp" for 0x401673>, <DisassemblerInsn "mov" for 0x401677>, <DisassemblerInsn "mov" for 0x40167e>, <DisassemblerInsn "mov" for 0x401685>, <DisassemblerInsn "jne" for 0x40168c>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401134>, <DisassemblerInsn "mov" for 0x40113c>, <DisassemblerInsn "mov" for 0x401144>, <DisassemblerInsn "lea" for 0x401149>, <DisassemblerInsn "mov" for 0x401150>, <DisassemblerInsn "call" for 0x401152>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401522>, <DisassemblerInsn "test" for 0x401529>, <DisassemblerInsn "jne" for 0x40152b>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401985>, <DisassemblerInsn "mov" for 0x40198a>, <DisassemblerInsn "mov" for 0x401992>, <DisassemblerInsn "add" for 0x401996>, <DisassemblerInsn "mov" for 0x401999>, <DisassemblerInsn "mov" for 0x40199b>, <DisassemblerInsn "mov" for 0x40199f>, <DisassemblerInsn "mov" for 0x4019a3>, <DisassemblerInsn "mov" for 0x4019a7>, <DisassemblerInsn "mov" for 0x4019ac>, <DisassemblerInsn "mov" for 0x4019b0>, <DisassemblerInsn "mov" for 0x4019b4>, <DisassemblerInsn "add" for 0x4019b8>, <DisassemblerInsn "mov" for 0x4019bc>, <DisassemblerInsn "cmp" for 0x4019be>, <DisassemblerInsn "mov" for 0x4019c1>, <DisassemblerInsn "mov" for 0x4019c5>, <DisassemblerInsn "mov" for 0x4019ca>, <DisassemblerInsn "mov" for 0x4019ce>, <DisassemblerInsn "mov" for 0x4019d0>, <DisassemblerInsn "mov" for 0x4019d7>, <DisassemblerInsn "jb" for 0x4019de>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401692>, <DisassemblerInsn "mov" for 0x40169a>, <DisassemblerInsn "mov" for 0x4016a1>, <DisassemblerInsn "mov" for 0x4016a9>, <DisassemblerInsn "mov" for 0x4016b1>, <DisassemblerInsn "mov" for 0x4016b9>, <DisassemblerInsn "imul" for 0x4016bd>, <DisassemblerInsn "mov" for 0x4016c4>, <DisassemblerInsn "add" for 0x4016c7>, <DisassemblerInsn "add" for 0x4016ca>, <DisassemblerInsn "mov" for 0x4016d1>, <DisassemblerInsn "mov" for 0x4016d4>, <DisassemblerInsn "mov" for 0x4016db>, <DisassemblerInsn "imul" for 0x4016e2>, <DisassemblerInsn "add" for 0x4016e9>, <DisassemblerInsn "add" for 0x4016ec>, <DisassemblerInsn "mov" for 0x4016f2>, <DisassemblerInsn "lea" for 0x4016f5>, <DisassemblerInsn "mov" for 0x4016fc>, <DisassemblerInsn "mov" for 0x401700>, <DisassemblerInsn "mov" for 0x401705>, <DisassemblerInsn "call" for 0x401707>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4015c2>, <DisassemblerInsn "mov" for 0x4015c9>, <DisassemblerInsn "mov" for 0x4015d1>, <DisassemblerInsn "add" for 0x4015d9>, <DisassemblerInsn "mov" for 0x4015dd>, <DisassemblerInsn "add" for 0x4015e5>, <DisassemblerInsn "mov" for 0x4015e9>, <DisassemblerInsn "xor" for 0x4015f1>, <DisassemblerInsn "mov" for 0x4015f3>, <DisassemblerInsn "xor" for 0x4015f5>, <DisassemblerInsn "mov" for 0x4015f7>, <DisassemblerInsn "mov" for 0x4015fc>, <DisassemblerInsn "mov" for 0x401603>, <DisassemblerInsn "mov" for 0x40160b>, <DisassemblerInsn "mov" for 0x401612>, <DisassemblerInsn "mov" for 0x401619>, <DisassemblerInsn "mov" for 0x401621>, <DisassemblerInsn "mov" for 0x401629>, <DisassemblerInsn "mov" for 0x401630>, <DisassemblerInsn "mov" for 0x401638>, <DisassemblerInsn "mov" for 0x40163f>, <DisassemblerInsn "mov" for 0x401646>, <DisassemblerInsn "mov" for 0x40164d>, <DisassemblerInsn "mov" for 0x401655>, <DisassemblerInsn "mov" for 0x401658>, <DisassemblerInsn "mov" for 0x401660>, <DisassemblerInsn "mov" for 0x401663>, <DisassemblerInsn "mov" for 0x401667>, <DisassemblerInsn "mov" for 0x40166b>, <DisassemblerInsn "cmp" for 0x401673>, <DisassemblerInsn "mov" for 0x401677>, <DisassemblerInsn "mov" for 0x40167e>, <DisassemblerInsn "mov" for 0x401685>, <DisassemblerInsn "jne" for 0x40168c>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401180>, <DisassemblerInsn "mov" for 0x401188>, <DisassemblerInsn "add" for 0x40118b>, <DisassemblerInsn "mov" for 0x40118f>, <DisassemblerInsn "mov" for 0x401197>, <DisassemblerInsn "mov" for 0x40119a>, <DisassemblerInsn "xor" for 0x4011a1>, <DisassemblerInsn "xor" for 0x4011a3>, <DisassemblerInsn "cmp" for 0x4011a5>, <DisassemblerInsn "mov" for 0x4011a8>, <DisassemblerInsn "mov" for 0x4011aa>, <DisassemblerInsn "mov" for 0x4011b1>, <DisassemblerInsn "mov" for 0x4011b3>, <DisassemblerInsn "mov" for 0x4011ba>, <DisassemblerInsn "mov" for 0x4011c2>, <DisassemblerInsn "mov" for 0x4011c4>, <DisassemblerInsn "mov" for 0x4011cb>, <DisassemblerInsn "je" for 0x4011d2>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401157>, <DisassemblerInsn "mov" for 0x40115e>, <DisassemblerInsn "jmp" for 0x401165>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401578>, <DisassemblerInsn "mov" for 0x40157f>, <DisassemblerInsn "mov" for 0x401586>, <DisassemblerInsn "lea" for 0x40158e>, <DisassemblerInsn "mov" for 0x401595>, <DisassemblerInsn "call" for 0x401597>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40170c>, <DisassemblerInsn "mov" for 0x401714>, <DisassemblerInsn "mov" for 0x40171c>, <DisassemblerInsn "add" for 0x401723>, <DisassemblerInsn "mov" for 0x401726>, <DisassemblerInsn "mov" for 0x401728>, <DisassemblerInsn "mov" for 0x40172f>, <DisassemblerInsn "mov" for 0x401736>, <DisassemblerInsn "mov" for 0x40173d>, <DisassemblerInsn "mov" for 0x401745>, <DisassemblerInsn "mov" for 0x40174c>, <DisassemblerInsn "mov" for 0x401753>, <DisassemblerInsn "add" for 0x40175a>, <DisassemblerInsn "mov" for 0x40175e>, <DisassemblerInsn "cmp" for 0x401760>, <DisassemblerInsn "mov" for 0x401763>, <DisassemblerInsn "mov" for 0x40176a>, <DisassemblerInsn "mov" for 0x401772>, <DisassemblerInsn "mov" for 0x401779>, <DisassemblerInsn "mov" for 0x40177b>, <DisassemblerInsn "mov" for 0x401782>, <DisassemblerInsn "jb" for 0x401789>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4018e0>, <DisassemblerInsn "mov" for 0x4018e5>, <DisassemblerInsn "mov" for 0x4018e9>, <DisassemblerInsn "mov" for 0x4018ee>, <DisassemblerInsn "mov" for 0x4018f3>, <DisassemblerInsn "mov" for 0x4018fb>, <DisassemblerInsn "imul" for 0x4018ff>, <DisassemblerInsn "mov" for 0x401906>, <DisassemblerInsn "add" for 0x401909>, <DisassemblerInsn "add" for 0x40190c>, <DisassemblerInsn "mov" for 0x401913>, <DisassemblerInsn "mov" for 0x401916>, <DisassemblerInsn "mov" for 0x40191d>, <DisassemblerInsn "imul" for 0x401924>, <DisassemblerInsn "mov" for 0x40192b>, <DisassemblerInsn "add" for 0x40192e>, <DisassemblerInsn "add" for 0x401931>, <DisassemblerInsn "mov" for 0x401938>, <DisassemblerInsn "imul" for 0x40193b>, <DisassemblerInsn "mov" for 0x401942>, <DisassemblerInsn "add" for 0x401945>, <DisassemblerInsn "add" for 0x401948>, <DisassemblerInsn "mov" for 0x40194f>, <DisassemblerInsn "imul" for 0x401952>, <DisassemblerInsn "add" for 0x401959>, <DisassemblerInsn "add" for 0x40195c>, <DisassemblerInsn "mov" for 0x401962>, <DisassemblerInsn "lea" for 0x401965>, <DisassemblerInsn "mov" for 0x40196c>, <DisassemblerInsn "mov" for 0x40196f>, <DisassemblerInsn "mov" for 0x401974>, <DisassemblerInsn "mov" for 0x401979>, <DisassemblerInsn "mov" for 0x40197e>, <DisassemblerInsn "call" for 0x401980>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a3c>, <DisassemblerInsn "lea" for 0x401a44>, <DisassemblerInsn "mov" for 0x401a4b>, <DisassemblerInsn "call" for 0x401a4d>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401318>, <DisassemblerInsn "mov" for 0x401320>, <DisassemblerInsn "mov" for 0x401328>, <DisassemblerInsn "mov" for 0x401330>, <DisassemblerInsn "mov" for 0x401338>, <DisassemblerInsn "mov" for 0x40133c>, <DisassemblerInsn "cmp" for 0x401340>, <DisassemblerInsn "jne" for 0x401344>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40152d>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40159c>, <DisassemblerInsn "mov" for 0x4015a4>, <DisassemblerInsn "mov" for 0x4015a6>, <DisassemblerInsn "mov" for 0x4015ad>, <DisassemblerInsn "cmp" for 0x4015b2>, <DisassemblerInsn "mov" for 0x4015b5>, <DisassemblerInsn "je" for 0x4015bc>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "add" for 0x401ec9>, <DisassemblerInsn "ret" for 0x401ecd>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4017f9>, <DisassemblerInsn "mov" for 0x401800>, <DisassemblerInsn "mov" for 0x401807>, <DisassemblerInsn "lea" for 0x40180f>, <DisassemblerInsn "mov" for 0x401816>, <DisassemblerInsn "call" for 0x401818>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4012cf>, <DisassemblerInsn "mov" for 0x4012d6>, <DisassemblerInsn "mov" for 0x4012de>, <DisassemblerInsn "imul" for 0x4012e6>, <DisassemblerInsn "add" for 0x4012ed>, <DisassemblerInsn "add" for 0x4012f0>, <DisassemblerInsn "mov" for 0x4012f6>, <DisassemblerInsn "add" for 0x4012f9>, <DisassemblerInsn "mov" for 0x4012fc>, <DisassemblerInsn "mov" for 0x4012fe>, <DisassemblerInsn "mov" for 0x401302>, <DisassemblerInsn "add" for 0x401309>, <DisassemblerInsn "mov" for 0x401310>, <DisassemblerInsn "mov" for 0x401318>, <DisassemblerInsn "mov" for 0x401320>, <DisassemblerInsn "mov" for 0x401328>, <DisassemblerInsn "mov" for 0x401330>, <DisassemblerInsn "mov" for 0x401338>, <DisassemblerInsn "mov" for 0x40133c>, <DisassemblerInsn "cmp" for 0x401340>, <DisassemblerInsn "jne" for 0x401344>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "push" for 0x4010a3>, <DisassemblerInsn "push" for 0x4010a5>, <DisassemblerInsn "sub" for 0x4010a6>, <DisassemblerInsn "mov" for 0x4010ad>, <DisassemblerInsn "mov" for 0x4010b4>, <DisassemblerInsn "mov" for 0x4010b7>, <DisassemblerInsn "mov" for 0x4010bf>, <DisassemblerInsn "mov" for 0x4010c3>, <DisassemblerInsn "lea" for 0x4010cb>, <DisassemblerInsn "lea" for 0x4010d3>, <DisassemblerInsn "mov" for 0x4010db>, <DisassemblerInsn "add" for 0x4010e3>, <DisassemblerInsn "mov" for 0x4010e7>, <DisassemblerInsn "lea" for 0x4010ec>, <DisassemblerInsn "mov" for 0x4010f3>, <DisassemblerInsn "call" for 0x4010f5>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019e4>, <DisassemblerInsn "mov" for 0x4019eb>, <DisassemblerInsn "mov" for 0x4019f3>, <DisassemblerInsn "mov" for 0x4019fb>, <DisassemblerInsn "mov" for 0x401a02>, <DisassemblerInsn "movsxd" for 0x401a06>, <DisassemblerInsn "imul" for 0x401a09>, <DisassemblerInsn "add" for 0x401a10>, <DisassemblerInsn "mov" for 0x401a13>, <DisassemblerInsn "mov" for 0x401a1b>, <DisassemblerInsn "mov" for 0x401a1e>, <DisassemblerInsn "call" for 0x401a21>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401843>, <DisassemblerInsn "mov" for 0x40184a>, <DisassemblerInsn "mov" for 0x401852>, <DisassemblerInsn "add" for 0x40185a>, <DisassemblerInsn "mov" for 0x40185e>, <DisassemblerInsn "add" for 0x401863>, <DisassemblerInsn "mov" for 0x401867>, <DisassemblerInsn "xor" for 0x40186c>, <DisassemblerInsn "mov" for 0x40186e>, <DisassemblerInsn "xor" for 0x401870>, <DisassemblerInsn "mov" for 0x401872>, <DisassemblerInsn "mov" for 0x401877>, <DisassemblerInsn "mov" for 0x40187b>, <DisassemblerInsn "mov" for 0x401880>, <DisassemblerInsn "mov" for 0x401884>, <DisassemblerInsn "mov" for 0x40188b>, <DisassemblerInsn "mov" for 0x401890>, <DisassemblerInsn "mov" for 0x401895>, <DisassemblerInsn "mov" for 0x401899>, <DisassemblerInsn "mov" for 0x40189e>, <DisassemblerInsn "mov" for 0x4018a2>, <DisassemblerInsn "mov" for 0x4018a9>, <DisassemblerInsn "mov" for 0x4018ad>, <DisassemblerInsn "mov" for 0x4018b2>, <DisassemblerInsn "mov" for 0x4018b5>, <DisassemblerInsn "mov" for 0x4018ba>, <DisassemblerInsn "mov" for 0x4018bd>, <DisassemblerInsn "mov" for 0x4018c1>, <DisassemblerInsn "mov" for 0x4018c5>, <DisassemblerInsn "cmp" for 0x4018ca>, <DisassemblerInsn "mov" for 0x4018ce>, <DisassemblerInsn "mov" for 0x4018d2>, <DisassemblerInsn "mov" for 0x4018d6>, <DisassemblerInsn "jne" for 0x4018da>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a5f>, <DisassemblerInsn "call" for 0x401a67>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4013be>, <DisassemblerInsn "mov" for 0x4013c6>, <DisassemblerInsn "mov" for 0x4013ce>, <DisassemblerInsn "mov" for 0x4013d6>, <DisassemblerInsn "mov" for 0x4013dd>, <DisassemblerInsn "mov" for 0x4013e4>, <DisassemblerInsn "mov" for 0x4013eb>, <DisassemblerInsn "add" for 0x4013f2>, <DisassemblerInsn "cmp" for 0x4013f6>, <DisassemblerInsn "mov" for 0x4013f9>, <DisassemblerInsn "mov" for 0x401401>, <DisassemblerInsn "mov" for 0x401404>, <DisassemblerInsn "mov" for 0x40140c>, <DisassemblerInsn "mov" for 0x40140f>, <DisassemblerInsn "mov" for 0x401417>, <DisassemblerInsn "mov" for 0x40141a>, <DisassemblerInsn "mov" for 0x401422>, <DisassemblerInsn "mov" for 0x401425>, <DisassemblerInsn "mov" for 0x40142d>, <DisassemblerInsn "mov" for 0x401430>, <DisassemblerInsn "mov" for 0x401438>, <DisassemblerInsn "mov" for 0x40143f>, <DisassemblerInsn "mov" for 0x401446>, <DisassemblerInsn "mov" for 0x40144e>, <DisassemblerInsn "mov" for 0x401455>, <DisassemblerInsn "jne" for 0x40145c>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401566>, <DisassemblerInsn "cmp" for 0x40156e>, <DisassemblerInsn "je" for 0x401572>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40188b>, <DisassemblerInsn "mov" for 0x401890>, <DisassemblerInsn "mov" for 0x401895>, <DisassemblerInsn "mov" for 0x401899>, <DisassemblerInsn "mov" for 0x40189e>, <DisassemblerInsn "mov" for 0x4018a2>, <DisassemblerInsn "mov" for 0x4018a9>, <DisassemblerInsn "mov" for 0x4018ad>, <DisassemblerInsn "mov" for 0x4018b2>, <DisassemblerInsn "mov" for 0x4018b5>, <DisassemblerInsn "mov" for 0x4018ba>, <DisassemblerInsn "mov" for 0x4018bd>, <DisassemblerInsn "mov" for 0x4018c1>, <DisassemblerInsn "mov" for 0x4018c5>, <DisassemblerInsn "cmp" for 0x4018ca>, <DisassemblerInsn "mov" for 0x4018ce>, <DisassemblerInsn "mov" for 0x4018d2>, <DisassemblerInsn "mov" for 0x4018d6>, <DisassemblerInsn "jne" for 0x4018da>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4017e7>, <DisassemblerInsn "cmp" for 0x4017ef>, <DisassemblerInsn "je" for 0x4017f3>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401550>, <DisassemblerInsn "lea" for 0x401558>, <DisassemblerInsn "mov" for 0x40155f>, <DisassemblerInsn "call" for 0x401561>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4019a7>, <DisassemblerInsn "mov" for 0x4019ac>, <DisassemblerInsn "mov" for 0x4019b0>, <DisassemblerInsn "mov" for 0x4019b4>, <DisassemblerInsn "add" for 0x4019b8>, <DisassemblerInsn "mov" for 0x4019bc>, <DisassemblerInsn "cmp" for 0x4019be>, <DisassemblerInsn "mov" for 0x4019c1>, <DisassemblerInsn "mov" for 0x4019c5>, <DisassemblerInsn "mov" for 0x4019ca>, <DisassemblerInsn "mov" for 0x4019ce>, <DisassemblerInsn "mov" for 0x4019d0>, <DisassemblerInsn "mov" for 0x4019d7>, <DisassemblerInsn "jb" for 0x4019de>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40173d>, <DisassemblerInsn "mov" for 0x401745>, <DisassemblerInsn "mov" for 0x40174c>, <DisassemblerInsn "mov" for 0x401753>, <DisassemblerInsn "add" for 0x40175a>, <DisassemblerInsn "mov" for 0x40175e>, <DisassemblerInsn "cmp" for 0x401760>, <DisassemblerInsn "mov" for 0x401763>, <DisassemblerInsn "mov" for 0x40176a>, <DisassemblerInsn "mov" for 0x401772>, <DisassemblerInsn "mov" for 0x401779>, <DisassemblerInsn "mov" for 0x40177b>, <DisassemblerInsn "mov" for 0x401782>, <DisassemblerInsn "jb" for 0x401789>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40116a>, <DisassemblerInsn "lea" for 0x401172>, <DisassemblerInsn "mov" for 0x401179>, <DisassemblerInsn "call" for 0x40117b>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4017d1>, <DisassemblerInsn "lea" for 0x4017d9>, <DisassemblerInsn "mov" for 0x4017e0>, <DisassemblerInsn "call" for 0x4017e2>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401462>, <DisassemblerInsn "mov" for 0x40146a>, <DisassemblerInsn "mov" for 0x401471>, <DisassemblerInsn "mov" for 0x401478>, <DisassemblerInsn "mov" for 0x401480>, <DisassemblerInsn "mov" for 0x401488>, <DisassemblerInsn "mov" for 0x401490>, <DisassemblerInsn "mov" for 0x401497>, <DisassemblerInsn "mov" for 0x40149f>, <DisassemblerInsn "cmp" for 0x4014a6>, <DisassemblerInsn "sete" for 0x4014a9>, <DisassemblerInsn "mov" for 0x4014ad>, <DisassemblerInsn "xor" for 0x4014b5>, <DisassemblerInsn "cmp" for 0x4014b7>, <DisassemblerInsn "cmove" for 0x4014ba>, <DisassemblerInsn "xor" for 0x4014be>, <DisassemblerInsn "cmp" for 0x4014c0>, <DisassemblerInsn "cmove" for 0x4014c3>, <DisassemblerInsn "xor" for 0x4014c7>, <DisassemblerInsn "cmp" for 0x4014c9>, <DisassemblerInsn "cmove" for 0x4014cc>, <DisassemblerInsn "mov" for 0x4014cf>, <DisassemblerInsn "add" for 0x4014d2>, <DisassemblerInsn "mov" for 0x4014d6>, <DisassemblerInsn "mov" for 0x4014de>, <DisassemblerInsn "cmp" for 0x4014e1>, <DisassemblerInsn "mov" for 0x4014e3>, <DisassemblerInsn "cmovg" for 0x4014e5>, <DisassemblerInsn "cmp" for 0x4014e8>, <DisassemblerInsn "mov" for 0x4014eb>, <DisassemblerInsn "cmovg" for 0x4014ee>, <DisassemblerInsn "cmp" for 0x4014f1>, <DisassemblerInsn "cmove" for 0x4014f4>, <DisassemblerInsn "mov" for 0x4014f8>, <DisassemblerInsn "cmp" for 0x4014ff>, <DisassemblerInsn "cmove" for 0x401502>, <DisassemblerInsn "mov" for 0x401505>, <DisassemblerInsn "mov" for 0x40150c>, <DisassemblerInsn "lea" for 0x401514>, <DisassemblerInsn "mov" for 0x40151b>, <DisassemblerInsn "call" for 0x40151d>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40178f>, <DisassemblerInsn "mov" for 0x401796>, <DisassemblerInsn "mov" for 0x40179e>, <DisassemblerInsn "mov" for 0x4017a6>, <DisassemblerInsn "mov" for 0x4017ad>, <DisassemblerInsn "movsxd" for 0x4017b1>, <DisassemblerInsn "imul" for 0x4017b4>, <DisassemblerInsn "add" for 0x4017bb>, <DisassemblerInsn "mov" for 0x4017be>, <DisassemblerInsn "mov" for 0x4017c6>, <DisassemblerInsn "mov" for 0x4017c9>, <DisassemblerInsn "call" for 0x4017cc>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a52>, <DisassemblerInsn "call" for 0x401a5a>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a26>, <DisassemblerInsn "lea" for 0x401a2e>, <DisassemblerInsn "mov" for 0x401a35>, <DisassemblerInsn "call" for 0x401a37>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "sub" for 0x401d54>, <DisassemblerInsn "mov" for 0x401d58>, <DisassemblerInsn "mov" for 0x401d5d>, <DisassemblerInsn "mov" for 0x401d61>, <DisassemblerInsn "mov" for 0x401d65>, <DisassemblerInsn "mov" for 0x401d6a>, <DisassemblerInsn "mov" for 0x401d6f>, <DisassemblerInsn "add" for 0x401d72>, <DisassemblerInsn "mov" for 0x401d78>, <DisassemblerInsn "mov" for 0x401d7d>, <DisassemblerInsn "mov" for 0x401d83>, <DisassemblerInsn "cmp" for 0x401d87>, <DisassemblerInsn "jl" for 0x401d8a>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40152f>, <DisassemblerInsn "mov" for 0x401537>, <DisassemblerInsn "mov" for 0x40153f>, <DisassemblerInsn "lea" for 0x401542>, <DisassemblerInsn "mov" for 0x401549>, <DisassemblerInsn "call" for 0x40154b>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401383>, <DisassemblerInsn "mov" for 0x40138a>, <DisassemblerInsn "mov" for 0x401391>, <DisassemblerInsn "mov" for 0x401398>, <DisassemblerInsn "add" for 0x40139f>, <DisassemblerInsn "mov" for 0x4013a2>, <DisassemblerInsn "mov" for 0x4013a9>, <DisassemblerInsn "mov" for 0x4013b0>, <DisassemblerInsn "mov" for 0x4013b7>, <DisassemblerInsn "mov" for 0x4013be>, <DisassemblerInsn "mov" for 0x4013c6>, <DisassemblerInsn "mov" for 0x4013ce>, <DisassemblerInsn "mov" for 0x4013d6>, <DisassemblerInsn "mov" for 0x4013dd>, <DisassemblerInsn "mov" for 0x4013e4>, <DisassemblerInsn "mov" for 0x4013eb>, <DisassemblerInsn "add" for 0x4013f2>, <DisassemblerInsn "cmp" for 0x4013f6>, <DisassemblerInsn "mov" for 0x4013f9>, <DisassemblerInsn "mov" for 0x401401>, <DisassemblerInsn "mov" for 0x401404>, <DisassemblerInsn "mov" for 0x40140c>, <DisassemblerInsn "mov" for 0x40140f>, <DisassemblerInsn "mov" for 0x401417>, <DisassemblerInsn "mov" for 0x40141a>, <DisassemblerInsn "mov" for 0x401422>, <DisassemblerInsn "mov" for 0x401425>, <DisassemblerInsn "mov" for 0x40142d>, <DisassemblerInsn "mov" for 0x401430>, <DisassemblerInsn "mov" for 0x401438>, <DisassemblerInsn "mov" for 0x40143f>, <DisassemblerInsn "mov" for 0x401446>, <DisassemblerInsn "mov" for 0x40144e>, <DisassemblerInsn "mov" for 0x401455>, <DisassemblerInsn "jne" for 0x40145c>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4010fa>, <DisassemblerInsn "mov" for 0x401102>, <DisassemblerInsn "add" for 0x40110a>, <DisassemblerInsn "lea" for 0x401111>, <DisassemblerInsn "mov" for 0x401119>, <DisassemblerInsn "xor" for 0x40111e>, <DisassemblerInsn "mov" for 0x401120>, <DisassemblerInsn "call" for 0x401123>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40181d>, <DisassemblerInsn "mov" for 0x401825>, <DisassemblerInsn "mov" for 0x401827>, <DisassemblerInsn "mov" for 0x40182e>, <DisassemblerInsn "cmp" for 0x401833>, <DisassemblerInsn "mov" for 0x401836>, <DisassemblerInsn "je" for 0x40183d>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "xor" for 0x401a6c>, <DisassemblerInsn "mov" for 0x401a6e>, <DisassemblerInsn "mov" for 0x401a75>, <DisassemblerInsn "add" for 0x401a7c>, <DisassemblerInsn "pop" for 0x401a83>, <DisassemblerInsn "pop" for 0x401a84>, <DisassemblerInsn "ret" for 0x401a86>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401a75>, <DisassemblerInsn "add" for 0x401a7c>, <DisassemblerInsn "pop" for 0x401a83>, <DisassemblerInsn "pop" for 0x401a84>, <DisassemblerInsn "ret" for 0x401a86>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401128>, <DisassemblerInsn "cmp" for 0x40112f>, <DisassemblerInsn "jge" for 0x401132>]'}], 'cfg_block_detailed_info': [{'block_Idx': 13, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x18c]>', '<mov~~rcx, qword ptr [rsp + 0x1b8]>', '<mov~~rdx, qword ptr [rsp + 0x1b0]>', '<mov~~rdx, qword ptr [rdx + 0x20]>', '<mov~~qword ptr [rsp + 0x148], rdx>', '<mov~~rcx, qword ptr [rcx + 0x30]>', '<mov~~qword ptr [rsp + 0x150], rcx>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0x158], rax>', '<xor~~eax, eax>', '<mov~~ecx, eax>', '<xor~~eax, eax>', '<mov~~rdx, rcx>', '<mov~~qword ptr [rsp + 0x160], rdx>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x168], edx>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x16c], edx>', '<mov~~qword ptr [rsp + 0x170], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x178], ecx>', '<mov~~dword ptr [rsp + 0x17c], eax>', '<mov~~rcx, qword ptr [rsp + 0x148]>', '<mov~~rdx, qword ptr [rsp + 0x160]>', '<mov~~esi, dword ptr [rsp + 0x168]>', '<mov~~edi, dword ptr [rsp + 0x16c]>', '<mov~~rax, qword ptr [rsp + 0x170]>', '<mov~~r8d, dword ptr [rsp + 0x178]>', '<mov~~r9d, dword ptr [rsp + 0x17c]>', '<mov~~dword ptr [rsp + 0x120], r9d>', '<mov~~dword ptr [rsp + 0x124], r8d>', '<mov~~dword ptr [rsp + 0x128], edi>', '<mov~~dword ptr [rsp + 0x12c], esi>', '<mov~~qword ptr [rsp + 0x130], rdx>', '<imul~~rdx, rdx, 0x8480>', '<add~~rcx, rdx>', '<add~~rcx, 0x8450>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x13c], ecx>', '<cmp~~ecx, 0>', '<mov~~qword ptr [rsp + 0x140], rax>', '<jle~~0x401318>']}, {'block_Idx': 53, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0xc0]>', '<mov~~r8, qword ptr [rsp + 0xb8]>', '<mov~~edx, dword ptr [rsp + 0xcc]>', '<mov~~rdi, qword ptr [rsp + 0xd0]>', '<mov~~eax, dword ptr [rsp + 0xd8]>', '<mov~~ecx, dword ptr [rsp + 0xdc]>', '<mov~~dword ptr [rsp + 0x8c], eax>', '<mov~~qword ptr [rsp + 0x90], rdi>', '<mov~~r8, qword ptr [r8]>', '<mov~~qword ptr [rsp + 0x98], r8>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rsi + rdi*8]>', '<mov~~rsi, qword ptr [rsi + 8]>', '<mov~~qword ptr [rsp + 0xa0], rsi>', '<cmp~~dword ptr [rsi + 0xc], 0>', '<mov~~dword ptr [rsp + 0xac], edx>', '<mov~~dword ptr [rsp + 0xb0], ecx>', '<mov~~dword ptr [rsp + 0xb4], eax>', '<jne~~0x40173d>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1c0]>', '<mov~~rdi, qword ptr [rsp + 0x1b8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x1c59]>', '<mov~~al, 0>', '<call~~0x500018>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x107]>', '<test~~al, 1>', '<jne~~0x40152f>']}, {'block_Idx': 65, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x30]>', '<mov~~rdx, qword ptr [rsp + 0x180]>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<add~~eax, 1>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0x4c], edx>', '<mov~~dword ptr [rsp + 0x50], ecx>', '<mov~~dword ptr [rsp + 0x54], eax>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<mov~~esi, dword ptr [rsp + 0x4c]>', '<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~ecx, dword ptr [rsp + 0x54]>', '<add~~rdx, 1>', '<mov~~edi, esi>', '<cmp~~rdx, rdi>', '<mov~~dword ptr [rsp + 0x6c], esi>', '<mov~~qword ptr [rsp + 0x70], rdx>', '<mov~~dword ptr [rsp + 0x7c], ecx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x80], ecx>', '<mov~~dword ptr [rsp + 0x88], eax>', '<jb~~0x40188b>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x90]>', '<mov~~edx, dword ptr [rsp + 0x8c]>', '<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~r10, qword ptr [rsp + 0xa0]>', '<mov~~rdi, qword ptr [rsp + 0x5d0]>', '<mov~~ecx, dword ptr [r10 + 0x60]>', '<imul~~r9, rsi, 0x8480>', '<mov~~r8, rax>', '<add~~r8, r9>', '<add~~r8, 0x8468>', '<mov~~r8, qword ptr [r8]>', '<mov~~r9d, dword ptr [r10 + 0x94]>', '<mov~~r10d, dword ptr [r10 + 0x98]>', '<imul~~rsi, rsi, 0x8480>', '<add~~rax, rsi>', '<add~~rax, 0x8470>', '<mov~~rax, qword ptr [rax]>', '<lea~~rsi, [rip + 0x17f5]>', '<mov~~dword ptr [rsp], r10d>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0xe0]>', '<mov~~rax, qword ptr [rsp + 0x1b8]>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<add~~rcx, 0x20>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<add~~rax, 0x30>', '<mov~~qword ptr [rsp + 0xc0], rax>', '<xor~~eax, eax>', '<mov~~edx, eax>', '<xor~~ecx, ecx>', '<mov~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0xcc], esi>', '<mov~~qword ptr [rsp + 0xd0], rdx>', '<mov~~dword ptr [rsp + 0xd8], ecx>', '<mov~~dword ptr [rsp + 0xdc], eax>', '<mov~~rsi, qword ptr [rsp + 0xc0]>', '<mov~~r8, qword ptr [rsp + 0xb8]>', '<mov~~edx, dword ptr [rsp + 0xcc]>', '<mov~~rdi, qword ptr [rsp + 0xd0]>', '<mov~~eax, dword ptr [rsp + 0xd8]>', '<mov~~ecx, dword ptr [rsp + 0xdc]>', '<mov~~dword ptr [rsp + 0x8c], eax>', '<mov~~qword ptr [rsp + 0x90], rdi>', '<mov~~r8, qword ptr [r8]>', '<mov~~qword ptr [rsp + 0x98], r8>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rsi + rdi*8]>', '<mov~~rsi, qword ptr [rsi + 8]>', '<mov~~qword ptr [rsp + 0xa0], rsi>', '<cmp~~dword ptr [rsi + 0xc], 0>', '<mov~~dword ptr [rsp + 0xac], edx>', '<mov~~dword ptr [rsp + 0xb0], ecx>', '<mov~~dword ptr [rsp + 0xb4], eax>', '<jne~~0x40173d>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b8]>', '<mov~~rcx, rax>', '<add~~rcx, 0x2c>', '<mov~~qword ptr [rsp + 0x180], rcx>', '<mov~~edx, dword ptr [rax + 0x2c]>', '<mov~~dword ptr [rsp + 0x18c], edx>', '<xor~~eax, eax>', '<xor~~ecx, ecx>', '<cmp~~edx, 0>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x190], edx>', '<mov~~edx, eax>', '<mov~~dword ptr [rsp + 0x194], edx>', '<mov~~qword ptr [rsp + 0x198], rcx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x1a0], ecx>', '<mov~~dword ptr [rsp + 0x1a4], eax>', '<je~~0x401462>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1cc]>', '<mov~~dword ptr [rsp + 0x1a8], eax>', '<jmp~~0x401a75>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x100]>', '<mov~~edx, dword ptr [rsp + 0xec]>', '<mov~~rdi, qword ptr [rsp + 0x5d0]>', '<lea~~rsi, [rip + 0x18e4]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x90]>', '<mov~~rdx, qword ptr [rsp + 0x180]>', '<mov~~eax, dword ptr [rsp + 0x8c]>', '<add~~eax, 1>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0xac], edx>', '<mov~~dword ptr [rsp + 0xb0], ecx>', '<mov~~dword ptr [rsp + 0xb4], eax>', '<mov~~rdx, qword ptr [rsp + 0x90]>', '<mov~~esi, dword ptr [rsp + 0xac]>', '<mov~~eax, dword ptr [rsp + 0xb0]>', '<mov~~ecx, dword ptr [rsp + 0xb4]>', '<add~~rdx, 1>', '<mov~~edi, esi>', '<cmp~~rdx, rdi>', '<mov~~dword ptr [rsp + 0xcc], esi>', '<mov~~qword ptr [rsp + 0xd0], rdx>', '<mov~~dword ptr [rsp + 0xd8], ecx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0xdc], ecx>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<jb~~0x401619>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x30]>', '<mov~~edx, dword ptr [rsp + 0x2c]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~r10, qword ptr [rsp + 0x40]>', '<mov~~rdi, qword ptr [rsp + 0x5d0]>', '<mov~~ecx, dword ptr [r10 + 0x60]>', '<imul~~r9, rsi, 0x8480>', '<mov~~r8, rax>', '<add~~r8, r9>', '<add~~r8, 0x8468>', '<mov~~r8, qword ptr [r8]>', '<mov~~r9d, dword ptr [r10 + 0x1d0]>', '<mov~~ebx, dword ptr [r10 + 0x1d4]>', '<imul~~r11, rsi, 0x8480>', '<mov~~r10, rax>', '<add~~r10, r11>', '<add~~r10, 0x8478>', '<mov~~r11d, dword ptr [r10]>', '<imul~~r14, rsi, 0x8480>', '<mov~~r10, rax>', '<add~~r10, r14>', '<add~~r10, 0x847c>', '<mov~~r10d, dword ptr [r10]>', '<imul~~rsi, rsi, 0x8480>', '<add~~rax, rsi>', '<add~~rax, 0x8470>', '<mov~~rax, qword ptr [rax]>', '<lea~~rsi, [rip + 0x1676]>', '<mov~~dword ptr [rsp], ebx>', '<mov~~dword ptr [rsp + 8], r11d>', '<mov~~dword ptr [rsp + 0x10], r10d>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x5d0]>', '<lea~~rsi, [rip + 0x1634]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~rcx, qword ptr [rsp + 0x130]>', '<mov~~rdx, qword ptr [rsp + 0x140]>', '<mov~~qword ptr [rsp + 0x118], rdx>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0xc], 0>', '<jne~~0x401383>']}, {'block_Idx': 20, 'blockInsts': ['<jmp~~0x401550>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x180]>', '<mov~~ecx, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0xe0], ecx>', '<mov~~eax, 0xffffffff>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<je~~0x40178f>']}, {'block_Idx': 55, 'blockInsts': ['<add~~rsp, 0x78>', '<ret~~>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xfc]>', '<mov~~edx, dword ptr [rsp + 0xe8]>', '<mov~~rdi, qword ptr [rsp + 0x5d0]>', '<lea~~rsi, [rip + 0x1754]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x13c]>', '<mov~~rax, qword ptr [rsp + 0x148]>', '<mov~~rdx, qword ptr [rsp + 0x130]>', '<imul~~rdx, rdx, 0x8480>', '<add~~rax, rdx>', '<add~~rax, 0x8460>', '<mov~~rax, qword ptr [rax]>', '<add~~ecx, -1>', '<mov~~ecx, ecx>', '<mov~~rcx, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rcx + 0x800]>', '<add~~rax, qword ptr [rcx + 0x808]>', '<mov~~qword ptr [rsp + 0x140], rax>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~rcx, qword ptr [rsp + 0x130]>', '<mov~~rdx, qword ptr [rsp + 0x140]>', '<mov~~qword ptr [rsp + 0x118], rdx>', '<mov~~rax, qword ptr [rax + rcx*8]>', '<mov~~rax, qword ptr [rax + 8]>', '<cmp~~dword ptr [rax + 0xc], 0>', '<jne~~0x401383>']}, {'block_Idx': 0, 'blockInsts': ['<push~~r14>', '<push~~rbx>', '<sub~~rsp, 0x5d8>', '<mov~~dword ptr [rsp + 0x1ac], esi>', '<mov~~rcx, rdi>', '<mov~~qword ptr [rsp + 0x1b8], rcx>', '<mov~~rax, qword ptr [rcx + 0x18]>', '<mov~~qword ptr [rsp + 0x1b0], rax>', '<lea~~rax, [rsp + 0x5d0]>', '<lea~~rdi, [rsp + 0x1d0]>', '<mov~~qword ptr [rsp + 0x1c0], rdi>', '<add~~rcx, 0x38>', '<mov~~esi, 0x400>', '<lea~~rdx, [rip + 0x1caa]>', '<mov~~al, 0>', '<call~~0x500020>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x1ac]>', '<mov~~rax, qword ptr [rsp + 0xf0]>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~esi, dword ptr [rsp + 0x88]>', '<mov~~rdi, qword ptr [rcx + 0x20]>', '<movsxd~~rsi, esi>', '<imul~~rsi, rsi, 0x8480>', '<add~~rdi, rsi>', '<mov~~rsi, qword ptr [rsp + 0x5d0]>', '<mov~~ecx, dword ptr [rcx + 0x10]>', '<mov~~r8d, dword ptr [rax]>', '<call~~0x401d54>']}, {'block_Idx': 42, 'blockInsts': ['<mov~~esi, dword ptr [rsp + 0x84]>', '<mov~~rax, qword ptr [rsp + 0x1b8]>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<add~~rcx, 0x20>', '<mov~~qword ptr [rsp + 0x58], rcx>', '<add~~rax, 0x30>', '<mov~~qword ptr [rsp + 0x60], rax>', '<xor~~eax, eax>', '<mov~~edx, eax>', '<xor~~ecx, ecx>', '<mov~~eax, 0xffffffff>', '<mov~~dword ptr [rsp + 0x6c], esi>', '<mov~~qword ptr [rsp + 0x70], rdx>', '<mov~~dword ptr [rsp + 0x7c], ecx>', '<mov~~dword ptr [rsp + 0x80], eax>', '<mov~~rsi, qword ptr [rsp + 0x60]>', '<mov~~r8, qword ptr [rsp + 0x58]>', '<mov~~edx, dword ptr [rsp + 0x6c]>', '<mov~~rdi, qword ptr [rsp + 0x70]>', '<mov~~eax, dword ptr [rsp + 0x7c]>', '<mov~~ecx, dword ptr [rsp + 0x80]>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<mov~~qword ptr [rsp + 0x30], rdi>', '<mov~~r8, qword ptr [r8]>', '<mov~~qword ptr [rsp + 0x38], r8>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rsi + rdi*8]>', '<mov~~rsi, qword ptr [rsi + 8]>', '<mov~~qword ptr [rsp + 0x40], rsi>', '<cmp~~dword ptr [rsi + 0xc], 1>', '<mov~~dword ptr [rsp + 0x4c], edx>', '<mov~~dword ptr [rsp + 0x50], ecx>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jne~~0x4019a7>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x5d0]>', '<call~~0x5000d0>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x118]>', '<mov~~r9, qword ptr [rsp + 0x158]>', '<mov~~r8, qword ptr [rsp + 0x130]>', '<mov~~edi, dword ptr [rsp + 0x108]>', '<mov~~esi, dword ptr [rsp + 0x10c]>', '<mov~~ecx, dword ptr [rsp + 0x110]>', '<mov~~eax, dword ptr [rsp + 0x114]>', '<add~~r8, 1>', '<cmp~~r8, r9>', '<mov~~qword ptr [rsp + 0x160], r8>', '<mov~~r8d, eax>', '<mov~~dword ptr [rsp + 0x168], r8d>', '<mov~~r8d, ecx>', '<mov~~dword ptr [rsp + 0x16c], r8d>', '<mov~~r8, rdx>', '<mov~~qword ptr [rsp + 0x170], r8>', '<mov~~r8d, esi>', '<mov~~dword ptr [rsp + 0x178], r8d>', '<mov~~r8d, edi>', '<mov~~dword ptr [rsp + 0x17c], r8d>', '<mov~~dword ptr [rsp + 0x190], edi>', '<mov~~dword ptr [rsp + 0x194], esi>', '<mov~~qword ptr [rsp + 0x198], rdx>', '<mov~~dword ptr [rsp + 0x1a0], ecx>', '<mov~~dword ptr [rsp + 0x1a4], eax>', '<jne~~0x40124c>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<cmp~~dword ptr [rax + 0x28], 0>', '<je~~0x4017e7>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x60]>', '<mov~~r8, qword ptr [rsp + 0x58]>', '<mov~~edx, dword ptr [rsp + 0x6c]>', '<mov~~rdi, qword ptr [rsp + 0x70]>', '<mov~~eax, dword ptr [rsp + 0x7c]>', '<mov~~ecx, dword ptr [rsp + 0x80]>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<mov~~qword ptr [rsp + 0x30], rdi>', '<mov~~r8, qword ptr [r8]>', '<mov~~qword ptr [rsp + 0x38], r8>', '<mov~~rsi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rsi + rdi*8]>', '<mov~~rsi, qword ptr [rsi + 8]>', '<mov~~qword ptr [rsp + 0x40], rsi>', '<cmp~~dword ptr [rsi + 0xc], 1>', '<mov~~dword ptr [rsp + 0x4c], edx>', '<mov~~dword ptr [rsp + 0x50], ecx>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jne~~0x4019a7>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<cmp~~dword ptr [rax + 0x2c], 0>', '<je~~0x401a3c>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x5d0]>', '<lea~~rsi, [rip + 0x1917]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x30]>', '<mov~~esi, dword ptr [rsp + 0x4c]>', '<mov~~eax, dword ptr [rsp + 0x50]>', '<mov~~ecx, dword ptr [rsp + 0x54]>', '<add~~rdx, 1>', '<mov~~edi, esi>', '<cmp~~rdx, rdi>', '<mov~~dword ptr [rsp + 0x6c], esi>', '<mov~~qword ptr [rsp + 0x70], rdx>', '<mov~~dword ptr [rsp + 0x7c], ecx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x80], ecx>', '<mov~~dword ptr [rsp + 0x88], eax>', '<jb~~0x40188b>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x90]>', '<mov~~esi, dword ptr [rsp + 0xac]>', '<mov~~eax, dword ptr [rsp + 0xb0]>', '<mov~~ecx, dword ptr [rsp + 0xb4]>', '<add~~rdx, 1>', '<mov~~edi, esi>', '<cmp~~rdx, rdi>', '<mov~~dword ptr [rsp + 0xcc], esi>', '<mov~~qword ptr [rsp + 0xd0], rdx>', '<mov~~dword ptr [rsp + 0xd8], ecx>', '<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0xdc], ecx>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<jb~~0x401619>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x5d0]>', '<lea~~rsi, [rip + 0x1c4f]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 59, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x5d0]>', '<lea~~rsi, [rip + 0x177a]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~edi, dword ptr [rsp + 0x1ac]>', '<mov~~esi, dword ptr [rsp + 0x190]>', '<mov~~r9d, dword ptr [rsp + 0x194]>', '<mov~~rdx, qword ptr [rsp + 0x198]>', '<mov~~r8d, dword ptr [rsp + 0x1a0]>', '<mov~~ecx, dword ptr [rsp + 0x1a4]>', '<mov~~dword ptr [rsp + 0xe8], r9d>', '<mov~~dword ptr [rsp + 0xec], esi>', '<cmp~~edi, 0>', '<sete~~sil>', '<mov~~byte ptr [rsp + 0x107], sil>', '<xor~~esi, esi>', '<cmp~~edi, 0>', '<cmove~~rdx, rsi>', '<xor~~esi, esi>', '<cmp~~edi, 0>', '<cmove~~r8d, esi>', '<xor~~esi, esi>', '<cmp~~edi, 0>', '<cmove~~ecx, esi>', '<mov~~rsi, rax>', '<add~~rsi, 8>', '<mov~~qword ptr [rsp + 0xf0], rsi>', '<mov~~esi, dword ptr [rax + 8]>', '<cmp~~ecx, esi>', '<mov~~eax, ecx>', '<cmovg~~eax, esi>', '<cmp~~r8d, esi>', '<mov~~edi, r8d>', '<cmovg~~edi, esi>', '<cmp~~esi, 0>', '<cmove~~edi, r8d>', '<mov~~dword ptr [rsp + 0xfc], edi>', '<cmp~~esi, 0>', '<cmove~~eax, ecx>', '<mov~~dword ptr [rsp + 0x100], eax>', '<mov~~rdi, qword ptr [rsp + 0x5d0]>', '<lea~~rsi, [rip + 0x18d5]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x1ac]>', '<mov~~rax, qword ptr [rsp + 0xf0]>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~esi, dword ptr [rsp + 0xe4]>', '<mov~~rdi, qword ptr [rcx + 0x20]>', '<movsxd~~rsi, esi>', '<imul~~rsi, rsi, 0x8480>', '<add~~rdi, rsi>', '<mov~~rsi, qword ptr [rsp + 0x5d0]>', '<mov~~ecx, dword ptr [rcx + 0x10]>', '<mov~~r8d, dword ptr [rax]>', '<call~~0x401d54>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x5d0]>', '<call~~0x500058>']}, {'block_Idx': 63, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x5d0]>', '<lea~~rsi, [rip + 0x1525]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 47, 'blockInsts': ['<sub~~rsp, 0x78>', '<mov~~dword ptr [rsp + 0x4c], r8d>', '<mov~~dword ptr [rsp + 0x50], ecx>', '<mov~~dword ptr [rsp + 0x54], edx>', '<mov~~qword ptr [rsp + 0x58], rsi>', '<mov~~qword ptr [rsp + 0x60], rdi>', '<mov~~rax, rdi>', '<add~~rax, 0x8450>', '<mov~~qword ptr [rsp + 0x68], rax>', '<mov~~eax, dword ptr [rdi + 0x8450]>', '<mov~~dword ptr [rsp + 0x74], eax>', '<cmp~~eax, 1>', '<jl~~0x401ec9>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rdi, qword ptr [rsp + 0x5d0]>', '<mov~~edx, dword ptr [rax + 0x10]>', '<lea~~rsi, [rip + 0x18ee]>', '<mov~~al, 0>', '<call~~0x5000c8>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x12c]>', '<mov~~ecx, dword ptr [rsp + 0x13c]>', '<mov~~esi, dword ptr [rsp + 0x120]>', '<mov~~edx, dword ptr [rsp + 0x124]>', '<add~~edx, 1>', '<mov~~dword ptr [rsp + 0x108], esi>', '<mov~~dword ptr [rsp + 0x10c], edx>', '<mov~~dword ptr [rsp + 0x110], ecx>', '<mov~~dword ptr [rsp + 0x114], eax>', '<mov~~rdx, qword ptr [rsp + 0x118]>', '<mov~~r9, qword ptr [rsp + 0x158]>', '<mov~~r8, qword ptr [rsp + 0x130]>', '<mov~~edi, dword ptr [rsp + 0x108]>', '<mov~~esi, dword ptr [rsp + 0x10c]>', '<mov~~ecx, dword ptr [rsp + 0x110]>', '<mov~~eax, dword ptr [rsp + 0x114]>', '<add~~r8, 1>', '<cmp~~r8, r9>', '<mov~~qword ptr [rsp + 0x160], r8>', '<mov~~r8d, eax>', '<mov~~dword ptr [rsp + 0x168], r8d>', '<mov~~r8d, ecx>', '<mov~~dword ptr [rsp + 0x16c], r8d>', '<mov~~r8, rdx>', '<mov~~qword ptr [rsp + 0x170], r8>', '<mov~~r8d, esi>', '<mov~~dword ptr [rsp + 0x178], r8d>', '<mov~~r8d, edi>', '<mov~~dword ptr [rsp + 0x17c], r8d>', '<mov~~dword ptr [rsp + 0x190], edi>', '<mov~~dword ptr [rsp + 0x194], esi>', '<mov~~qword ptr [rsp + 0x198], rdx>', '<mov~~dword ptr [rsp + 0x1a0], ecx>', '<mov~~dword ptr [rsp + 0x1a4], eax>', '<jne~~0x40124c>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x1b8]>', '<mov~~rsi, qword ptr [rsp + 0x1c0]>', '<add~~rcx, 0x4b0>', '<lea~~rdi, [rsp + 0x5d0]>', '<mov~~edx, 2>', '<xor~~eax, eax>', '<mov~~r8d, eax>', '<call~~0x5000c0>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x180]>', '<mov~~ecx, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x84], ecx>', '<mov~~eax, 0xffffffff>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x88], eax>', '<je~~0x4019e4>']}, {'block_Idx': 62, 'blockInsts': ['<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x1a8], eax>', '<mov~~eax, dword ptr [rsp + 0x1a8]>', '<add~~rsp, 0x5d8>', '<pop~~rbx>', '<pop~~r14>', '<ret~~>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x1a8]>', '<add~~rsp, 0x5d8>', '<pop~~rbx>', '<pop~~r14>', '<ret~~>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~dword ptr [rsp + 0x1cc], eax>', '<cmp~~eax, 0>', '<jge~~0x40116a>']}], 'cfg_edge_info': [(55, 63), (24, 27), (42, 48), (4, 6), (35, 39), (29, 35), (65, 58), (49, 41), (38, 47), (0, 2), (17, 21), (39, 45), (53, 44), (9, 11), (38, 59), (10, 12), (28, 30), (19, 12), (27, 28), (37, 42), (58, 49), (30, 36), (36, 46), (55, 59), (4, 5), (35, 38), (63, 30), (21, 24), (41, 63), (5, 9), (31, 37), (39, 44), (2, 4), (17, 20), (46, 62), (49, 58), (13, 16), (37, 41), (61, 38), (6, 10), (58, 48), (65, 41), (42, 49), (41, 47), (61, 53), (22, 12), (12, 17), (20, 24), (59, 28), (10, 13), (45, 38), (53, 45), (28, 31), (27, 29), (13, 15), (45, 53)], 'cdg_edge_info': [(4, 9), (27, 59), (4, 6), (35, 39), (4, 12), (4, 24), (17, 21), (4, 27), (4, 30), (4, 36), (37, 42), (4, 5), (28, 63), (4, 11), (4, 17), (17, 20), (28, 41), (4, 62), (4, 10), (4, 28), (10, 13), (28, 31), (27, 29), (27, 35), (28, 37), (27, 38), (4, 46)], 'ddg_edge_info': [(4, 9), (0, 5), (37, 42), (36, 46), (63, 36), (0, 62), (6, 41), (2, 4), (39, 53), (6, 59), (31, 58), (59, 41), (6, 13), (24, 28), (12, 29), (31, 42), (21, 41), (12, 38), (13, 58), (24, 30), (0, 39), (5, 62), (38, 41), (29, 38), (6, 36), (0, 2), (12, 31), (59, 36), (6, 63), (30, 36), (59, 63), (0, 41), (6, 29), (5, 9), (9, 62), (12, 24), (6, 38), (31, 37), (13, 53), (10, 35), (12, 17), (6, 31), (21, 38), (59, 31), (2, 6), (0, 27), (10, 37), (6, 24), (35, 39), (29, 35), (10, 12), (12, 58), (0, 38), (63, 30), (21, 24), (12, 21), (13, 41), (0, 4), (0, 13), (37, 41), (6, 10), (42, 58), (6, 46), (59, 28), (12, 53), (6, 12), (24, 27), (0, 42), (6, 21), (6, 30), (59, 30), (63, 46), (31, 41), (2, 5), (29, 53), (24, 29), (35, 38), (13, 38), (0, 10), (46, 62), (38, 58), (0, 28), (24, 31), (29, 39), (10, 13), (0, 12), (12, 41), (0, 21), (59, 46)]}]}
{'write_manifest': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'pushq\t%r14'}, {'instIndex': 1, 'instruction': 'pushq\t%rbx'}, {'instIndex': 2, 'instruction': 'subq\t$0x5d8, %rsp                     # imm = 0x5D8'}, {'instIndex': 3, 'instruction': 'movl\t%esi, 0x1ac(%rsp)                 # 4-byte Spill'}, {'instIndex': 4, 'instruction': 'movq\t%rdi, %rcx'}, {'instIndex': 5, 'instruction': 'movq\t%rcx, 0x1b8(%rsp)                 # 8-byte Spill'}, {'instIndex': 6, 'instruction': 'movq\t0x18(%rcx), %rax'}, {'instIndex': 7, 'instruction': 'movq\t%rax, 0x1b0(%rsp)                 # 8-byte Spill'}, {'instIndex': 8, 'instruction': 'leaq\t0x5d0(%rsp), %rax'}, {'instIndex': 9, 'instruction': 'leaq\t0x1d0(%rsp), %rdi'}, {'instIndex': 10, 'instruction': 'movq\t%rdi, 0x1c0(%rsp)                 # 8-byte Spill'}, {'instIndex': 11, 'instruction': 'addq\t$0x38, %rcx'}, {'instIndex': 12, 'instruction': 'movl\t$0x400, %esi                     # imm = 0x0x190'}, {'instIndex': 13, 'instruction': 'leaq\t.L.str.0x20(%rip), %rdx'}, {'instIndex': 14, 'instruction': 'movb\t$0, %al'}, {'instIndex': 15, 'instruction': 'callq\tsnprintf@PLT'}, {'instIndex': 18, 'instruction': 'addq\t$0x4b0, %rcx                     # imm = 0x4B0'}, {'instIndex': 19, 'instruction': 'leaq\t0x5d0(%rsp), %rdi'}, {'instIndex': 20, 'instruction': 'movl\t$2, %edx'}, {'instIndex': 21, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 22, 'instruction': 'movl\t%eax, %r8d'}, {'instIndex': 23, 'instruction': 'callq\tavio_open2@PLT'}, {'instIndex': 25, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 26, 'instruction': 'jge\t.LBB5_2'}, {'instIndex': 29, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 30, 'instruction': 'leaq\t.L.str.0x21(%rip), %rdx'}, {'instIndex': 31, 'instruction': 'movb\t$0, %al'}, {'instIndex': 32, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 35, 'instruction': 'jmp\t.LBB5_27'}, {'instIndex': 36, 'instruction': 'movq\t0x5d0(%rsp), %rdi'}, {'instIndex': 37, 'instruction': 'leaq\t.L.str.0x22(%rip), %rsi'}, {'instIndex': 38, 'instruction': 'movb\t$0, %al'}, {'instIndex': 39, 'instruction': 'callq\tavio_printf@PLT'}]}, {'modifyIndex': 2, 'patched_tag': 'before', 'insts_info': [{'instIndex': 453, 'instruction': 'movq\t0x5d0(%rsp), %rdi'}, {'instIndex': 454, 'instruction': 'leaq\t.L.str.0x2b(%rip), %rsi'}, {'instIndex': 455, 'instruction': 'movb\t$0, %al'}, {'instIndex': 456, 'instruction': 'callq\tavio_printf@PLT'}, {'instIndex': 457, 'instruction': 'movq\t0x5d0(%rsp), %rdi'}, {'instIndex': 458, 'instruction': 'callq\tavio_flush@PLT'}, {'instIndex': 459, 'instruction': 'movq\t0x5d0(%rsp), %rdi'}, {'instIndex': 460, 'instruction': 'callq\tavio_close@PLT'}, {'instIndex': 464, 'instruction': 'addq\t$0x5d8, %rsp                     # imm = 0x5D8'}, {'instIndex': 465, 'instruction': 'popq\t%rbx'}, {'instIndex': 466, 'instruction': 'popq\t%r14'}, {'instIndex': 467, 'instruction': 'retq'}]}]}

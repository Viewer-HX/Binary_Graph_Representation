The analysis of 1 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1cf18de982a0a62fa9214a6c4a5becc1a32d9caf/patch_info.txt
{'1': {'before': 'a/libavformat/wav.c', 'after': 'b/libavformat/wav.c'}}
{'1': [{'before': '-318,6', 'after': '+318,12', 'function': 'static int wav_read_header'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1cf18de982a0a62fa9214a6c4a5becc1a32d9caf---b/libavformat/wav.c
The case of compiler gcc with optimization no.
Patched source code file: wav.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1cf18de982a0a62fa9214a6c4a5becc1a32d9caf/gcc_after/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: wav.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1cf18de982a0a62fa9214a6c4a5becc1a32d9caf/gcc_after/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: wav.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1cf18de982a0a62fa9214a6c4a5becc1a32d9caf/gcc_after/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: wav.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1cf18de982a0a62fa9214a6c4a5becc1a32d9caf/gcc_after/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: wav.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1cf18de982a0a62fa9214a6c4a5becc1a32d9caf/gcc_after/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: wav.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1cf18de982a0a62fa9214a6c4a5becc1a32d9caf/gcc_after/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: wav.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1cf18de982a0a62fa9214a6c4a5becc1a32d9caf/clang_after/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: wav.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1cf18de982a0a62fa9214a6c4a5becc1a32d9caf/clang_after/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: wav.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1cf18de982a0a62fa9214a6c4a5becc1a32d9caf/clang_after/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: wav.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1cf18de982a0a62fa9214a6c4a5becc1a32d9caf/clang_after/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: wav.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1cf18de982a0a62fa9214a6c4a5becc1a32d9caf/clang_after/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: wav.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1cf18de982a0a62fa9214a6c4a5becc1a32d9caf/clang_after/Os: directory not exists.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1cf18de982a0a62fa9214a6c4a5becc1a32d9caf---a/libavformat/wav.c
The case of compiler gcc with optimization no.
Patched source code file: wav.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1cf18de982a0a62fa9214a6c4a5becc1a32d9caf/gcc_before/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: wav.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1cf18de982a0a62fa9214a6c4a5becc1a32d9caf/gcc_before/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: wav.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1cf18de982a0a62fa9214a6c4a5becc1a32d9caf/gcc_before/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: wav.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1cf18de982a0a62fa9214a6c4a5becc1a32d9caf/gcc_before/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: wav.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1cf18de982a0a62fa9214a6c4a5becc1a32d9caf/gcc_before/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: wav.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1cf18de982a0a62fa9214a6c4a5becc1a32d9caf/gcc_before/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: wav.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1cf18de982a0a62fa9214a6c4a5becc1a32d9caf/clang_before/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: wav.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1cf18de982a0a62fa9214a6c4a5becc1a32d9caf/clang_before/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: wav.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1cf18de982a0a62fa9214a6c4a5becc1a32d9caf/clang_before/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: wav.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1cf18de982a0a62fa9214a6c4a5becc1a32d9caf/clang_before/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: wav.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1cf18de982a0a62fa9214a6c4a5becc1a32d9caf/clang_before/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: wav.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1cf18de982a0a62fa9214a6c4a5becc1a32d9caf/clang_before/Os: directory not exists.
The analysis of 2 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1ec075cfecac01f9a289965db06f76365b0b1737/patch_info.txt
{'1': {'before': 'a/libavcodec/wmaenc.c', 'after': 'b/libavcodec/wmaenc.c'}}
{'1': [{'before': '-39,6', 'after': '+39,12', 'function': 'static int encode_init'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1ec075cfecac01f9a289965db06f76365b0b1737---b/libavcodec/wmaenc.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1ec075cfecac01f9a289965db06f76365b0b1737---a/libavcodec/wmaenc.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 3 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/187a537904ef2193a4b5e0312349f95223ff8610/patch_info.txt
{'1': {'before': 'a/libavcodec/aacdec.c', 'after': 'b/libavcodec/aacdec.c'}, '2': {'before': 'a/libavcodec/dsputil.c', 'after': 'b/libavcodec/dsputil.c'}, '3': {'before': 'a/libavcodec/fraps.c', 'after': 'b/libavcodec/fraps.c'}, '4': {'before': 'a/libavcodec/ppc/fft_altivec.c', 'after': 'b/libavcodec/ppc/fft_altivec.c'}, '5': {'before': 'a/libavcodec/vorbis_enc.c', 'after': 'b/libavcodec/vorbis_enc.c'}}
{'1': [{'before': '-964,19', 'after': '+964,19', 'function': 'static inline float *VMUL4S'}, {'before': '-1169,11', 'after': '+1169,11', 'function': 'static int decode_spectrum_and_dequant'}], '2': [{'before': '-3827,7', 'after': '+3827,7', 'function': 'static inline uint32_t clipf_c_one'}, {'before': '-3835,7', 'after': '+3835,7', 'function': 'static void vector_clipf_c_opposite_sign'}], '3': [{'before': '-180,7', 'after': '+180,7', 'function': 'static int decode_frame'}, {'before': '-223,7', 'after': '+223,7', 'function': 'static int decode_frame'}], '4': [{'before': '-122,7', 'after': '+122,7', 'function': 'static void ff_imdct_calc_altivec'}], '5': [{'before': '-394,7', 'after': '+394,7', 'function': 'static void put_float'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/187a537904ef2193a4b5e0312349f95223ff8610---b/libavcodec/aacdec.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/187a537904ef2193a4b5e0312349f95223ff8610---a/libavcodec/aacdec.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/187a537904ef2193a4b5e0312349f95223ff8610---b/libavcodec/dsputil.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/187a537904ef2193a4b5e0312349f95223ff8610---a/libavcodec/dsputil.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/187a537904ef2193a4b5e0312349f95223ff8610---b/libavcodec/fraps.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/187a537904ef2193a4b5e0312349f95223ff8610---a/libavcodec/fraps.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/187a537904ef2193a4b5e0312349f95223ff8610---b/libavcodec/ppc/fft_altivec.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/187a537904ef2193a4b5e0312349f95223ff8610---a/libavcodec/ppc/fft_altivec.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/187a537904ef2193a4b5e0312349f95223ff8610---b/libavcodec/vorbis_enc.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/187a537904ef2193a4b5e0312349f95223ff8610---a/libavcodec/vorbis_enc.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 4 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf/patch_info.txt
{'1': {'before': 'a/libavcodec/nellymoserdec.c', 'after': 'b/libavcodec/nellymoserdec.c'}}
{'1': [{'before': '-121,8', 'after': '+121,8', 'function': 'static void overlap_and_window'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf---b/libavcodec/nellymoserdec.c
The case of compiler gcc with optimization no.
Patched source code file: nellymoserdec.c
Patched function: 1---static void overlap_and_window 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf/gcc_after/no/nellymoserdec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf/gcc_after/no/nellymoserdec.o
Binary file does not exist.
{'overlap_and_window': []}
The case of compiler gcc with optimization O0.
Patched source code file: nellymoserdec.c
Patched function: 1---static void overlap_and_window 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf/gcc_after/O0/nellymoserdec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf/gcc_after/O0/nellymoserdec.o
Binary file does not exist.
{'overlap_and_window': []}
The case of compiler gcc with optimization O1.
Patched source code file: nellymoserdec.c
Patched function: 1---static void overlap_and_window 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf/gcc_after/O1/nellymoserdec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf/gcc_after/O1/nellymoserdec.o
Binary file does not exist.
{'overlap_and_window': []}
The case of compiler gcc with optimization O2.
Patched source code file: nellymoserdec.c
Patched function: 1---static void overlap_and_window 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf/gcc_after/O2/nellymoserdec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf/gcc_after/O2/nellymoserdec.o
Binary file does not exist.
{'overlap_and_window': []}
The case of compiler gcc with optimization O3.
Patched source code file: nellymoserdec.c
Patched function: 1---static void overlap_and_window 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf/gcc_after/O3/nellymoserdec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf/gcc_after/O3/nellymoserdec.o
Binary file does not exist.
{'overlap_and_window': []}
The case of compiler gcc with optimization Os.
Patched source code file: nellymoserdec.c
Patched function: 1---static void overlap_and_window 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf/gcc_after/Os/nellymoserdec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf/gcc_after/Os/nellymoserdec.o
Binary file does not exist.
{'overlap_and_window': []}
The case of compiler clang with optimization no.
Patched source code file: nellymoserdec.c
Patched function: 1---static void overlap_and_window 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf/clang_after/no/nellymoserdec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf/clang_after/no/nellymoserdec.o
Binary file does not exist.
{'overlap_and_window': []}
The case of compiler clang with optimization O0.
Patched source code file: nellymoserdec.c
Patched function: 1---static void overlap_and_window 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf/clang_after/O0/nellymoserdec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf/clang_after/O0/nellymoserdec.o
Binary file does not exist.
{'overlap_and_window': []}
The case of compiler clang with optimization O1.
Patched source code file: nellymoserdec.c
Patched function: 1---static void overlap_and_window 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf/clang_after/O1/nellymoserdec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf/clang_after/O1/nellymoserdec.o
Binary file does not exist.
{'overlap_and_window': []}
The case of compiler clang with optimization O2.
Patched source code file: nellymoserdec.c
Patched function: 1---static void overlap_and_window 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf/clang_after/O2/nellymoserdec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf/clang_after/O2/nellymoserdec.o
Binary file does not exist.
{'overlap_and_window': []}
The case of compiler clang with optimization O3.
Patched source code file: nellymoserdec.c
Patched function: 1---static void overlap_and_window 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf/clang_after/O3/nellymoserdec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf/clang_after/O3/nellymoserdec.o
Binary file does not exist.
{'overlap_and_window': []}
The case of compiler clang with optimization Os.
Patched source code file: nellymoserdec.c
Patched function: 1---static void overlap_and_window 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf/clang_after/Os/nellymoserdec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf/clang_after/Os/nellymoserdec.o
Binary file does not exist.
{'overlap_and_window': []}
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf---a/libavcodec/nellymoserdec.c
The case of compiler gcc with optimization no.
Patched source code file: nellymoserdec.c
Patched function: 1---static void overlap_and_window 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf/gcc_before/no/nellymoserdec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf/gcc_before/no/nellymoserdec.o
Binary file does not exist.
{'overlap_and_window': []}
The case of compiler gcc with optimization O0.
Patched source code file: nellymoserdec.c
Patched function: 1---static void overlap_and_window 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf/gcc_before/O0/nellymoserdec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf/gcc_before/O0/nellymoserdec.o
Binary file does not exist.
{'overlap_and_window': []}
The case of compiler gcc with optimization O1.
Patched source code file: nellymoserdec.c
Patched function: 1---static void overlap_and_window 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf/gcc_before/O1/nellymoserdec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf/gcc_before/O1/nellymoserdec.o
Binary file does not exist.
{'overlap_and_window': []}
The case of compiler gcc with optimization O2.
Patched source code file: nellymoserdec.c
Patched function: 1---static void overlap_and_window 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf/gcc_before/O2/nellymoserdec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf/gcc_before/O2/nellymoserdec.o
Binary file does not exist.
{'overlap_and_window': []}
The case of compiler gcc with optimization O3.
Patched source code file: nellymoserdec.c
Patched function: 1---static void overlap_and_window 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf/gcc_before/O3/nellymoserdec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf/gcc_before/O3/nellymoserdec.o
Binary file does not exist.
{'overlap_and_window': []}
The case of compiler gcc with optimization Os.
Patched source code file: nellymoserdec.c
Patched function: 1---static void overlap_and_window 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf/gcc_before/Os/nellymoserdec_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf/gcc_before/Os/nellymoserdec.o
Binary file does not exist.
{'overlap_and_window': []}
The case of compiler clang with optimization no.
Patched source code file: nellymoserdec.c
Patched function: 1---static void overlap_and_window 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf/clang_before/no/nellymoserdec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf/clang_before/no/nellymoserdec.o
Binary file does not exist.
{'overlap_and_window': []}
The case of compiler clang with optimization O0.
Patched source code file: nellymoserdec.c
Patched function: 1---static void overlap_and_window 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf/clang_before/O0/nellymoserdec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf/clang_before/O0/nellymoserdec.o
Binary file does not exist.
{'overlap_and_window': []}
The case of compiler clang with optimization O1.
Patched source code file: nellymoserdec.c
Patched function: 1---static void overlap_and_window 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf/clang_before/O1/nellymoserdec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf/clang_before/O1/nellymoserdec.o
Binary file does not exist.
{'overlap_and_window': []}
The case of compiler clang with optimization O2.
Patched source code file: nellymoserdec.c
Patched function: 1---static void overlap_and_window 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf/clang_before/O2/nellymoserdec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf/clang_before/O2/nellymoserdec.o
Binary file does not exist.
{'overlap_and_window': []}
The case of compiler clang with optimization O3.
Patched source code file: nellymoserdec.c
Patched function: 1---static void overlap_and_window 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf/clang_before/O3/nellymoserdec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf/clang_before/O3/nellymoserdec.o
Binary file does not exist.
{'overlap_and_window': []}
The case of compiler clang with optimization Os.
Patched source code file: nellymoserdec.c
Patched function: 1---static void overlap_and_window 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf/clang_before/Os/nellymoserdec.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/115682e5985dfb84977c3be8c086c0b645cb1caf/clang_before/Os/nellymoserdec.o
Binary file does not exist.
{'overlap_and_window': []}
The analysis of 5 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502/patch_info.txt
{'1': {'before': 'a/libavutil/tree.c', 'after': 'b/libavutil/tree.c'}}
{'1': [{'before': '-35,6', 'after': '+35,10', 'function': 'void *av_tree_find'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502---b/libavutil/tree.c
The case of compiler gcc with optimization no.
Patched source code file: tree.c
Patched function: 1---void *av_tree_find 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502/gcc_after/no/tree_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502/gcc_after/no/tree.o
Binary file does not exist.
{'av_tree_find': []}
The case of compiler gcc with optimization O0.
Patched source code file: tree.c
Patched function: 1---void *av_tree_find 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502/gcc_after/O0/tree_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502/gcc_after/O0/tree.o
Binary file does not exist.
{'av_tree_find': []}
The case of compiler gcc with optimization O1.
Patched source code file: tree.c
Patched function: 1---void *av_tree_find 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502/gcc_after/O1/tree_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502/gcc_after/O1/tree.o
Binary file does not exist.
{'av_tree_find': []}
The case of compiler gcc with optimization O2.
Patched source code file: tree.c
Patched function: 1---void *av_tree_find 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502/gcc_after/O2/tree_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502/gcc_after/O2/tree.o
Binary file does not exist.
{'av_tree_find': []}
The case of compiler gcc with optimization O3.
Patched source code file: tree.c
Patched function: 1---void *av_tree_find 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502/gcc_after/O3/tree_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502/gcc_after/O3/tree.o
Binary file does not exist.
{'av_tree_find': []}
The case of compiler gcc with optimization Os.
Patched source code file: tree.c
Patched function: 1---void *av_tree_find 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502/gcc_after/Os/tree_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502/gcc_after/Os/tree.o
Binary file does not exist.
{'av_tree_find': []}
The case of compiler clang with optimization no.
Patched source code file: tree.c
Patched function: 1---void *av_tree_find 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502/clang_after/no/tree.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502/clang_after/no/tree.o
Binary file does not exist.
{'av_tree_find': []}
The case of compiler clang with optimization O0.
Patched source code file: tree.c
Patched function: 1---void *av_tree_find 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502/clang_after/O0/tree.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502/clang_after/O0/tree.o
Binary file does not exist.
{'av_tree_find': []}
The case of compiler clang with optimization O1.
Patched source code file: tree.c
Patched function: 1---void *av_tree_find 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502/clang_after/O1/tree.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502/clang_after/O1/tree.o
Binary file does not exist.
{'av_tree_find': []}
The case of compiler clang with optimization O2.
Patched source code file: tree.c
Patched function: 1---void *av_tree_find 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502/clang_after/O2/tree.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502/clang_after/O2/tree.o
Binary file does not exist.
{'av_tree_find': []}
The case of compiler clang with optimization O3.
Patched source code file: tree.c
Patched function: 1---void *av_tree_find 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502/clang_after/O3/tree.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502/clang_after/O3/tree.o
Binary file does not exist.
{'av_tree_find': []}
The case of compiler clang with optimization Os.
Patched source code file: tree.c
Patched function: 1---void *av_tree_find 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502/clang_after/Os/tree.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502/clang_after/Os/tree.o
Binary file does not exist.
{'av_tree_find': []}
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502---a/libavutil/tree.c
The case of compiler gcc with optimization no.
Patched source code file: tree.c
Patched function: 1---void *av_tree_find 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502/gcc_before/no/tree_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502/gcc_before/no/tree.o
Binary file does not exist.
{'av_tree_find': []}
The case of compiler gcc with optimization O0.
Patched source code file: tree.c
Patched function: 1---void *av_tree_find 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502/gcc_before/O0/tree_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502/gcc_before/O0/tree.o
Binary file does not exist.
{'av_tree_find': []}
The case of compiler gcc with optimization O1.
Patched source code file: tree.c
Patched function: 1---void *av_tree_find 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502/gcc_before/O1/tree_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502/gcc_before/O1/tree.o
Binary file does not exist.
{'av_tree_find': []}
The case of compiler gcc with optimization O2.
Patched source code file: tree.c
Patched function: 1---void *av_tree_find 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502/gcc_before/O2/tree_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502/gcc_before/O2/tree.o
Binary file does not exist.
{'av_tree_find': []}
The case of compiler gcc with optimization O3.
Patched source code file: tree.c
Patched function: 1---void *av_tree_find 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502/gcc_before/O3/tree_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502/gcc_before/O3/tree.o
Binary file does not exist.
{'av_tree_find': []}
The case of compiler gcc with optimization Os.
Patched source code file: tree.c
Patched function: 1---void *av_tree_find 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502/gcc_before/Os/tree_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502/gcc_before/Os/tree.o
Binary file does not exist.
{'av_tree_find': []}
The case of compiler clang with optimization no.
Patched source code file: tree.c
Patched function: 1---void *av_tree_find 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502/clang_before/no/tree.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502/clang_before/no/tree.o
Binary file does not exist.
{'av_tree_find': []}
The case of compiler clang with optimization O0.
Patched source code file: tree.c
Patched function: 1---void *av_tree_find 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502/clang_before/O0/tree.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502/clang_before/O0/tree.o
Binary file does not exist.
{'av_tree_find': []}
The case of compiler clang with optimization O1.
Patched source code file: tree.c
Patched function: 1---void *av_tree_find 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502/clang_before/O1/tree.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502/clang_before/O1/tree.o
Binary file does not exist.
{'av_tree_find': []}
The case of compiler clang with optimization O2.
Patched source code file: tree.c
Patched function: 1---void *av_tree_find 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502/clang_before/O2/tree.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502/clang_before/O2/tree.o
Binary file does not exist.
{'av_tree_find': []}
The case of compiler clang with optimization O3.
Patched source code file: tree.c
Patched function: 1---void *av_tree_find 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502/clang_before/O3/tree.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502/clang_before/O3/tree.o
Binary file does not exist.
{'av_tree_find': []}
The case of compiler clang with optimization Os.
Patched source code file: tree.c
Patched function: 1---void *av_tree_find 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502/clang_before/Os/tree.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/116d15ccf19813bedf5f1bb1f47a74e247963502/clang_before/Os/tree.o
Binary file does not exist.
{'av_tree_find': []}
The analysis of 6 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/145023f57262d21474e35b4a6069cf95136339d4/patch_info.txt
{'1': {'before': 'a/libavcodec/4xm.c', 'after': 'b/libavcodec/4xm.c'}}
{'1': [{'before': '-837,6', 'after': '+837,9', 'function': 'static int decode_frame'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/145023f57262d21474e35b4a6069cf95136339d4---b/libavcodec/4xm.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/145023f57262d21474e35b4a6069cf95136339d4---a/libavcodec/4xm.c
The case of compiler gcc with optimization no.
This program has been analyzed.
The case of compiler gcc with optimization O0.
This program has been analyzed.
The case of compiler gcc with optimization O1.
This program has been analyzed.
The case of compiler gcc with optimization O2.
This program has been analyzed.
The case of compiler gcc with optimization O3.
This program has been analyzed.
The case of compiler gcc with optimization Os.
This program has been analyzed.
The case of compiler clang with optimization no.
This program has been analyzed.
The case of compiler clang with optimization O0.
This program has been analyzed.
The case of compiler clang with optimization O1.
This program has been analyzed.
The case of compiler clang with optimization O2.
This program has been analyzed.
The case of compiler clang with optimization O3.
This program has been analyzed.
The case of compiler clang with optimization Os.
This program has been analyzed.
The analysis of 7 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/184fcc60b7ce5b5c240ba9e0511912d9911dca3b/patch_info.txt
{}
{}
The analysis of 8 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/patch_info.txt
{'1': {'before': 'a/libavcodec/h264_cabac.c', 'after': 'b/libavcodec/h264_cabac.c'}}
{'1': []}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15---b/libavcodec/h264_cabac.c
The case of compiler gcc with optimization no.
Patched source code file: h264_cabac.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/gcc_after/no/h264_cabac.o
Binary file does not exist.
{}
The case of compiler gcc with optimization O0.
Patched source code file: h264_cabac.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/gcc_after/O0/h264_cabac.o
Binary file does not exist.
{}
The case of compiler gcc with optimization O1.
Patched source code file: h264_cabac.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/gcc_after/O1/h264_cabac.o
Binary file does not exist.
{}
The case of compiler gcc with optimization O2.
Patched source code file: h264_cabac.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/gcc_after/O2/h264_cabac.o
Binary file does not exist.
{}
The case of compiler gcc with optimization O3.
Patched source code file: h264_cabac.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/gcc_after/O3/h264_cabac.o
Binary file does not exist.
{}
The case of compiler gcc with optimization Os.
Patched source code file: h264_cabac.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/gcc_after/Os/h264_cabac.o
Binary file does not exist.
{}
The case of compiler clang with optimization no.
Patched source code file: h264_cabac.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_after/no/h264_cabac.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_after/no/h264_cabac.o---after
The execution time of patched subCFG information extraction via angr: 0:00:00.106449
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_after/no/h264_cabac.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_after/no/h264_cabac.o---after
The execution time of patched slicing information extraction via angr: 0:00:00.104652
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_after/no/h264_cabac.o.
{}
The case of compiler clang with optimization O0.
Patched source code file: h264_cabac.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_after/O0/h264_cabac.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_after/O0/h264_cabac.o---after
The execution time of patched subCFG information extraction via angr: 0:00:00.109610
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_after/O0/h264_cabac.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_after/O0/h264_cabac.o---after
The execution time of patched slicing information extraction via angr: 0:00:00.102156
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_after/O0/h264_cabac.o.
{}
The case of compiler clang with optimization O1.
Patched source code file: h264_cabac.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_after/O1/h264_cabac.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_after/O1/h264_cabac.o---after
The execution time of patched subCFG information extraction via angr: 0:00:00.086595
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_after/O1/h264_cabac.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_after/O1/h264_cabac.o---after
The execution time of patched slicing information extraction via angr: 0:00:00.087887
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_after/O1/h264_cabac.o.
{}
The case of compiler clang with optimization O2.
Patched source code file: h264_cabac.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_after/O2/h264_cabac.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_after/O2/h264_cabac.o---after
The execution time of patched subCFG information extraction via angr: 0:00:00.089461
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_after/O2/h264_cabac.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_after/O2/h264_cabac.o---after
The execution time of patched slicing information extraction via angr: 0:00:00.090791
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_after/O2/h264_cabac.o.
{}
The case of compiler clang with optimization O3.
Patched source code file: h264_cabac.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_after/O3/h264_cabac.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_after/O3/h264_cabac.o---after
The execution time of patched subCFG information extraction via angr: 0:00:00.104170
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_after/O3/h264_cabac.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_after/O3/h264_cabac.o---after
The execution time of patched slicing information extraction via angr: 0:00:00.103109
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_after/O3/h264_cabac.o.
{}
The case of compiler clang with optimization Os.
Patched source code file: h264_cabac.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_after/Os/h264_cabac.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_after/Os/h264_cabac.o---after
The execution time of patched subCFG information extraction via angr: 0:00:00.085356
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_after/Os/h264_cabac.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_after/Os/h264_cabac.o---after
The execution time of patched slicing information extraction via angr: 0:00:00.089226
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_after/Os/h264_cabac.o.
{}
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15---a/libavcodec/h264_cabac.c
The case of compiler gcc with optimization no.
Patched source code file: h264_cabac.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/gcc_before/no/h264_cabac.o
Binary file does not exist.
{}
The case of compiler gcc with optimization O0.
Patched source code file: h264_cabac.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/gcc_before/O0/h264_cabac.o
Binary file does not exist.
{}
The case of compiler gcc with optimization O1.
Patched source code file: h264_cabac.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/gcc_before/O1/h264_cabac.o
Binary file does not exist.
{}
The case of compiler gcc with optimization O2.
Patched source code file: h264_cabac.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/gcc_before/O2/h264_cabac.o
Binary file does not exist.
{}
The case of compiler gcc with optimization O3.
Patched source code file: h264_cabac.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/gcc_before/O3/h264_cabac.o
Binary file does not exist.
{}
The case of compiler gcc with optimization Os.
Patched source code file: h264_cabac.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/gcc_before/Os/h264_cabac.o
Binary file does not exist.
{}
The case of compiler clang with optimization no.
Patched source code file: h264_cabac.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_before/no/h264_cabac.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_before/no/h264_cabac.o---before
The execution time of patched subCFG information extraction via angr: 0:00:00.106760
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_before/no/h264_cabac.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_before/no/h264_cabac.o---before
The execution time of patched slicing information extraction via angr: 0:00:00.102164
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_before/no/h264_cabac.o.
{}
The case of compiler clang with optimization O0.
Patched source code file: h264_cabac.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_before/O0/h264_cabac.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_before/O0/h264_cabac.o---before
The execution time of patched subCFG information extraction via angr: 0:00:00.102794
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_before/O0/h264_cabac.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_before/O0/h264_cabac.o---before
The execution time of patched slicing information extraction via angr: 0:00:00.102269
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_before/O0/h264_cabac.o.
{}
The case of compiler clang with optimization O1.
Patched source code file: h264_cabac.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_before/O1/h264_cabac.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_before/O1/h264_cabac.o---before
The execution time of patched subCFG information extraction via angr: 0:00:00.087686
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_before/O1/h264_cabac.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_before/O1/h264_cabac.o---before
The execution time of patched slicing information extraction via angr: 0:00:00.085533
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_before/O1/h264_cabac.o.
{}
The case of compiler clang with optimization O2.
Patched source code file: h264_cabac.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_before/O2/h264_cabac.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_before/O2/h264_cabac.o---before
The execution time of patched subCFG information extraction via angr: 0:00:00.089467
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_before/O2/h264_cabac.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_before/O2/h264_cabac.o---before
The execution time of patched slicing information extraction via angr: 0:00:00.089623
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_before/O2/h264_cabac.o.
{}
The case of compiler clang with optimization O3.
Patched source code file: h264_cabac.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_before/O3/h264_cabac.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_before/O3/h264_cabac.o---before
The execution time of patched subCFG information extraction via angr: 0:00:00.102460
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_before/O3/h264_cabac.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_before/O3/h264_cabac.o---before
The execution time of patched slicing information extraction via angr: 0:00:00.101928
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_before/O3/h264_cabac.o.
{}
The case of compiler clang with optimization Os.
Patched source code file: h264_cabac.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_before/Os/h264_cabac.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_before/Os/h264_cabac.o---before
The execution time of patched subCFG information extraction via angr: 0:00:00.085862
Empty patched sub graph information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_before/Os/h264_cabac.o.
{}
{}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_before/Os/h264_cabac.o---before
The execution time of patched slicing information extraction via angr: 0:00:00.085565
{}
Empty patched slicing information from binary file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10aa6f9db44e96977e7155fdc3e62619e0e00a15/clang_before/Os/h264_cabac.o.
{}
The analysis of 9 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/19a9846f3d882e52b8642787a1e96570116af031/patch_info.txt
{'1': {'before': 'a/libavcodec/dxva2_h264.c', 'after': 'b/libavcodec/dxva2_h264.c'}}
{'1': [{'before': '-220,11', 'after': '+220,11', 'function': 'static void fill_slice_long'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/19a9846f3d882e52b8642787a1e96570116af031---b/libavcodec/dxva2_h264.c
The case of compiler gcc with optimization no.
Patched source code file: dxva2_h264.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/19a9846f3d882e52b8642787a1e96570116af031/gcc_after/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: dxva2_h264.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/19a9846f3d882e52b8642787a1e96570116af031/gcc_after/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: dxva2_h264.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/19a9846f3d882e52b8642787a1e96570116af031/gcc_after/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: dxva2_h264.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/19a9846f3d882e52b8642787a1e96570116af031/gcc_after/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: dxva2_h264.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/19a9846f3d882e52b8642787a1e96570116af031/gcc_after/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: dxva2_h264.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/19a9846f3d882e52b8642787a1e96570116af031/gcc_after/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: dxva2_h264.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/19a9846f3d882e52b8642787a1e96570116af031/clang_after/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: dxva2_h264.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/19a9846f3d882e52b8642787a1e96570116af031/clang_after/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: dxva2_h264.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/19a9846f3d882e52b8642787a1e96570116af031/clang_after/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: dxva2_h264.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/19a9846f3d882e52b8642787a1e96570116af031/clang_after/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: dxva2_h264.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/19a9846f3d882e52b8642787a1e96570116af031/clang_after/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: dxva2_h264.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/19a9846f3d882e52b8642787a1e96570116af031/clang_after/Os: directory not exists.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/19a9846f3d882e52b8642787a1e96570116af031---a/libavcodec/dxva2_h264.c
The case of compiler gcc with optimization no.
Patched source code file: dxva2_h264.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/19a9846f3d882e52b8642787a1e96570116af031/gcc_before/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: dxva2_h264.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/19a9846f3d882e52b8642787a1e96570116af031/gcc_before/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: dxva2_h264.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/19a9846f3d882e52b8642787a1e96570116af031/gcc_before/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: dxva2_h264.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/19a9846f3d882e52b8642787a1e96570116af031/gcc_before/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: dxva2_h264.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/19a9846f3d882e52b8642787a1e96570116af031/gcc_before/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: dxva2_h264.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/19a9846f3d882e52b8642787a1e96570116af031/gcc_before/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: dxva2_h264.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/19a9846f3d882e52b8642787a1e96570116af031/clang_before/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: dxva2_h264.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/19a9846f3d882e52b8642787a1e96570116af031/clang_before/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: dxva2_h264.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/19a9846f3d882e52b8642787a1e96570116af031/clang_before/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: dxva2_h264.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/19a9846f3d882e52b8642787a1e96570116af031/clang_before/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: dxva2_h264.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/19a9846f3d882e52b8642787a1e96570116af031/clang_before/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: dxva2_h264.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/19a9846f3d882e52b8642787a1e96570116af031/clang_before/Os: directory not exists.
The analysis of 10 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/patch_info.txt
{'1': {'before': 'a/libavformat/ape.c', 'after': 'b/libavformat/ape.c'}}
{'1': [{'before': '-361,7', 'after': '+361,8', 'function': 'static int ape_read_packet'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac---b/libavformat/ape.c
The case of compiler gcc with optimization no.
Patched source code file: ape.c
Patched function: 1---static int ape_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/gcc_after/no/ape_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/gcc_after/no/ape_gcc.s---ape_read_packet---after
function id: 28
function flag: True
There are 137 instructions for function: ape_read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '361', 'end': 368}, 'before': {'start': '361', 'end': 367}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 15, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 16, 'instruction': 'movl\t12(%rax), %eax'}, {'instIndex': 17, 'instruction': 'movl\t%eax, %edx'}, {'instIndex': 18, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 19, 'instruction': 'movl\t0x58(%rax), %eax'}, {'instIndex': 20, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 21, 'instruction': 'jbe\t.L50'}, {'instIndex': 22, 'instruction': 'movl\t$-5, %eax'}, {'instIndex': 23, 'instruction': 'jmp\t.L49'}, {'instIndex': 24, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'movq\t0x10(%rax), %rdx'}, {'instIndex': 26, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 27, 'instruction': 'movl\t12(%rax), %eax'}, {'instIndex': 28, 'instruction': 'cltq'}, {'instIndex': 29, 'instruction': 'salq\t$5, %rax'}, {'instIndex': 30, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 31, 'instruction': 'movq\t(%rax), %rcx'}, {'instIndex': 32, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 33, 'instruction': 'movq\t0x20(%rax), %rax'}, {'instIndex': 34, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 35, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 36, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 37, 'instruction': 'call\tavio_seek@PLT'}, {'instIndex': 38, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 39, 'instruction': 'jns\t.L51'}, {'instIndex': 40, 'instruction': 'movl\t$-5, %eax'}, {'instIndex': 41, 'instruction': 'jmp\t.L49'}, {'instIndex': 42, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 43, 'instruction': 'movl\t12(%rax), %eax'}, {'instIndex': 44, 'instruction': 'movl\t%eax, %edx'}, {'instIndex': 45, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 46, 'instruction': 'movl\t0x58(%rax), %eax'}, {'instIndex': 47, 'instruction': 'subl\t$1, %eax'}, {'instIndex': 48, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 49, 'instruction': 'jne\t.L52'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/gcc_after/no/ape.o
Binary file does not exist.
{'ape_read_packet': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 15, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 16, 'instruction': 'movl\t12(%rax), %eax'}, {'instIndex': 17, 'instruction': 'movl\t%eax, %edx'}, {'instIndex': 18, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 19, 'instruction': 'movl\t0x58(%rax), %eax'}, {'instIndex': 20, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 21, 'instruction': 'jbe\t.L50'}, {'instIndex': 22, 'instruction': 'movl\t$-5, %eax'}, {'instIndex': 23, 'instruction': 'jmp\t.L49'}, {'instIndex': 24, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'movq\t0x10(%rax), %rdx'}, {'instIndex': 26, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 27, 'instruction': 'movl\t12(%rax), %eax'}, {'instIndex': 28, 'instruction': 'cltq'}, {'instIndex': 29, 'instruction': 'salq\t$5, %rax'}, {'instIndex': 30, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 31, 'instruction': 'movq\t(%rax), %rcx'}, {'instIndex': 32, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 33, 'instruction': 'movq\t0x20(%rax), %rax'}, {'instIndex': 34, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 35, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 36, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 37, 'instruction': 'call\tavio_seek@PLT'}, {'instIndex': 38, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 39, 'instruction': 'jns\t.L51'}, {'instIndex': 40, 'instruction': 'movl\t$-5, %eax'}, {'instIndex': 41, 'instruction': 'jmp\t.L49'}, {'instIndex': 42, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 43, 'instruction': 'movl\t12(%rax), %eax'}, {'instIndex': 44, 'instruction': 'movl\t%eax, %edx'}, {'instIndex': 45, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 46, 'instruction': 'movl\t0x58(%rax), %eax'}, {'instIndex': 47, 'instruction': 'subl\t$1, %eax'}, {'instIndex': 48, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 49, 'instruction': 'jne\t.L52'}]}]}
The case of compiler gcc with optimization O0.
Patched source code file: ape.c
Patched function: 1---static int ape_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/gcc_after/O0/ape_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/gcc_after/O0/ape_gcc.s---ape_read_packet---after
function id: 28
function flag: True
There are 137 instructions for function: ape_read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '361', 'end': 368}, 'before': {'start': '361', 'end': 367}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 15, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 16, 'instruction': 'movl\t12(%rax), %eax'}, {'instIndex': 17, 'instruction': 'movl\t%eax, %edx'}, {'instIndex': 18, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 19, 'instruction': 'movl\t0x58(%rax), %eax'}, {'instIndex': 20, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 21, 'instruction': 'jbe\t.L50'}, {'instIndex': 22, 'instruction': 'movl\t$-5, %eax'}, {'instIndex': 23, 'instruction': 'jmp\t.L49'}, {'instIndex': 24, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'movq\t0x10(%rax), %rdx'}, {'instIndex': 26, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 27, 'instruction': 'movl\t12(%rax), %eax'}, {'instIndex': 28, 'instruction': 'cltq'}, {'instIndex': 29, 'instruction': 'salq\t$5, %rax'}, {'instIndex': 30, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 31, 'instruction': 'movq\t(%rax), %rcx'}, {'instIndex': 32, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 33, 'instruction': 'movq\t0x20(%rax), %rax'}, {'instIndex': 34, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 35, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 36, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 37, 'instruction': 'call\tavio_seek@PLT'}, {'instIndex': 38, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 39, 'instruction': 'jns\t.L51'}, {'instIndex': 40, 'instruction': 'movl\t$-5, %eax'}, {'instIndex': 41, 'instruction': 'jmp\t.L49'}, {'instIndex': 42, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 43, 'instruction': 'movl\t12(%rax), %eax'}, {'instIndex': 44, 'instruction': 'movl\t%eax, %edx'}, {'instIndex': 45, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 46, 'instruction': 'movl\t0x58(%rax), %eax'}, {'instIndex': 47, 'instruction': 'subl\t$1, %eax'}, {'instIndex': 48, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 49, 'instruction': 'jne\t.L52'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/gcc_after/O0/ape.o
Binary file does not exist.
{'ape_read_packet': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 15, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 16, 'instruction': 'movl\t12(%rax), %eax'}, {'instIndex': 17, 'instruction': 'movl\t%eax, %edx'}, {'instIndex': 18, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 19, 'instruction': 'movl\t0x58(%rax), %eax'}, {'instIndex': 20, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 21, 'instruction': 'jbe\t.L50'}, {'instIndex': 22, 'instruction': 'movl\t$-5, %eax'}, {'instIndex': 23, 'instruction': 'jmp\t.L49'}, {'instIndex': 24, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'movq\t0x10(%rax), %rdx'}, {'instIndex': 26, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 27, 'instruction': 'movl\t12(%rax), %eax'}, {'instIndex': 28, 'instruction': 'cltq'}, {'instIndex': 29, 'instruction': 'salq\t$5, %rax'}, {'instIndex': 30, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 31, 'instruction': 'movq\t(%rax), %rcx'}, {'instIndex': 32, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 33, 'instruction': 'movq\t0x20(%rax), %rax'}, {'instIndex': 34, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 35, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 36, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 37, 'instruction': 'call\tavio_seek@PLT'}, {'instIndex': 38, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 39, 'instruction': 'jns\t.L51'}, {'instIndex': 40, 'instruction': 'movl\t$-5, %eax'}, {'instIndex': 41, 'instruction': 'jmp\t.L49'}, {'instIndex': 42, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 43, 'instruction': 'movl\t12(%rax), %eax'}, {'instIndex': 44, 'instruction': 'movl\t%eax, %edx'}, {'instIndex': 45, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 46, 'instruction': 'movl\t0x58(%rax), %eax'}, {'instIndex': 47, 'instruction': 'subl\t$1, %eax'}, {'instIndex': 48, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 49, 'instruction': 'jne\t.L52'}]}]}
The case of compiler gcc with optimization O1.
Patched source code file: ape.c
Patched function: 1---static int ape_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/gcc_after/O1/ape_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/gcc_after/O1/ape_gcc.s---ape_read_packet---after
function id: 24
function flag: True
There are 570 instructions for function: ape_read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '361', 'end': 368}, 'before': {'start': '361', 'end': 367}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 13, 'instruction': 'movl\t12(%rbx), %eax'}, {'instIndex': 14, 'instruction': 'cmpl\t0x58(%rbx), %eax'}, {'instIndex': 15, 'instruction': 'ja\t.L20'}, {'instIndex': 16, 'instruction': 'cltq'}, {'instIndex': 17, 'instruction': 'salq\t$5, %rax'}, {'instIndex': 18, 'instruction': 'addq\t0x10(%rbx), %rax'}, {'instIndex': 19, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 20, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 21, 'instruction': 'call\tavio_seek@PLT'}, {'instIndex': 22, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 23, 'instruction': 'js\t.L21'}, {'instIndex': 24, 'instruction': 'movl\t12(%rbx), %eax'}, {'instIndex': 25, 'instruction': 'movl\t0x58(%rbx), %ecx'}, {'instIndex': 26, 'instruction': 'leal\t-1(%rcx), %edx'}, {'instIndex': 27, 'instruction': 'cmpl\t%edx, %eax'}, {'instIndex': 28, 'instruction': 'je\t.L24'}, {'instIndex': 76, 'instruction': 'movl\t$-5, %r13d'}, {'instIndex': 77, 'instruction': 'jmp\t.L15'}, {'instIndex': 78, 'instruction': 'movl\t$-5, %r13d'}, {'instIndex': 79, 'instruction': 'jmp\t.L15'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/gcc_after/O1/ape.o
Binary file does not exist.
{'ape_read_packet': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 13, 'instruction': 'movl\t12(%rbx), %eax'}, {'instIndex': 14, 'instruction': 'cmpl\t0x58(%rbx), %eax'}, {'instIndex': 15, 'instruction': 'ja\t.L20'}, {'instIndex': 16, 'instruction': 'cltq'}, {'instIndex': 17, 'instruction': 'salq\t$5, %rax'}, {'instIndex': 18, 'instruction': 'addq\t0x10(%rbx), %rax'}, {'instIndex': 19, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 20, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 21, 'instruction': 'call\tavio_seek@PLT'}, {'instIndex': 22, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 23, 'instruction': 'js\t.L21'}, {'instIndex': 24, 'instruction': 'movl\t12(%rbx), %eax'}, {'instIndex': 25, 'instruction': 'movl\t0x58(%rbx), %ecx'}, {'instIndex': 26, 'instruction': 'leal\t-1(%rcx), %edx'}, {'instIndex': 27, 'instruction': 'cmpl\t%edx, %eax'}, {'instIndex': 28, 'instruction': 'je\t.L24'}, {'instIndex': 76, 'instruction': 'movl\t$-5, %r13d'}, {'instIndex': 77, 'instruction': 'jmp\t.L15'}, {'instIndex': 78, 'instruction': 'movl\t$-5, %r13d'}, {'instIndex': 79, 'instruction': 'jmp\t.L15'}]}]}
The case of compiler gcc with optimization O2.
Patched source code file: ape.c
Patched function: 1---static int ape_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/gcc_after/O2/ape_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/gcc_after/O2/ape_gcc.s---ape_read_packet---after
function id: 20
function flag: True
There are 537 instructions for function: ape_read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '361', 'end': 368}, 'before': {'start': '361', 'end': 367}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 12, 'instruction': 'movslq\t12(%rbx), %rax'}, {'instIndex': 13, 'instruction': 'cmpl\t0x58(%rbx), %eax'}, {'instIndex': 14, 'instruction': 'ja\t.L19'}, {'instIndex': 15, 'instruction': 'salq\t$5, %rax'}, {'instIndex': 16, 'instruction': 'addq\t0x10(%rbx), %rax'}, {'instIndex': 17, 'instruction': 'movq\t%rsi, %rbp'}, {'instIndex': 18, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 19, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 20, 'instruction': 'call\tavio_seek@PLT'}, {'instIndex': 21, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 22, 'instruction': 'js\t.L19'}, {'instIndex': 23, 'instruction': 'movl\t0x58(%rbx), %ecx'}, {'instIndex': 24, 'instruction': 'movslq\t12(%rbx), %rax'}, {'instIndex': 25, 'instruction': 'leal\t-1(%rcx), %edx'}, {'instIndex': 26, 'instruction': 'cmpl\t%edx, %eax'}, {'instIndex': 27, 'instruction': 'je\t.L24'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/gcc_after/O2/ape.o
Binary file does not exist.
{'ape_read_packet': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 12, 'instruction': 'movslq\t12(%rbx), %rax'}, {'instIndex': 13, 'instruction': 'cmpl\t0x58(%rbx), %eax'}, {'instIndex': 14, 'instruction': 'ja\t.L19'}, {'instIndex': 15, 'instruction': 'salq\t$5, %rax'}, {'instIndex': 16, 'instruction': 'addq\t0x10(%rbx), %rax'}, {'instIndex': 17, 'instruction': 'movq\t%rsi, %rbp'}, {'instIndex': 18, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 19, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 20, 'instruction': 'call\tavio_seek@PLT'}, {'instIndex': 21, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 22, 'instruction': 'js\t.L19'}, {'instIndex': 23, 'instruction': 'movl\t0x58(%rbx), %ecx'}, {'instIndex': 24, 'instruction': 'movslq\t12(%rbx), %rax'}, {'instIndex': 25, 'instruction': 'leal\t-1(%rcx), %edx'}, {'instIndex': 26, 'instruction': 'cmpl\t%edx, %eax'}, {'instIndex': 27, 'instruction': 'je\t.L24'}]}]}
The case of compiler gcc with optimization O3.
Patched source code file: ape.c
Patched function: 1---static int ape_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/gcc_after/O3/ape_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/gcc_after/O3/ape_gcc.s---ape_read_packet---after
function id: 20
function flag: True
There are 655 instructions for function: ape_read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '361', 'end': 368}, 'before': {'start': '361', 'end': 367}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 12, 'instruction': 'movslq\t12(%rbx), %rax'}, {'instIndex': 13, 'instruction': 'cmpl\t0x58(%rbx), %eax'}, {'instIndex': 14, 'instruction': 'ja\t.L19'}, {'instIndex': 15, 'instruction': 'salq\t$5, %rax'}, {'instIndex': 16, 'instruction': 'addq\t0x10(%rbx), %rax'}, {'instIndex': 17, 'instruction': 'movq\t%rsi, %rbp'}, {'instIndex': 18, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 19, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 20, 'instruction': 'call\tavio_seek@PLT'}, {'instIndex': 21, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 22, 'instruction': 'js\t.L19'}, {'instIndex': 23, 'instruction': 'movl\t0x58(%rbx), %ecx'}, {'instIndex': 24, 'instruction': 'movslq\t12(%rbx), %rax'}, {'instIndex': 27, 'instruction': 'leal\t-1(%rcx), %edx'}, {'instIndex': 28, 'instruction': 'cmpl\t%edx, %eax'}, {'instIndex': 29, 'instruction': 'cmovne\t0x50(%rbx), %r14d'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/gcc_after/O3/ape.o
Binary file does not exist.
{'ape_read_packet': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 12, 'instruction': 'movslq\t12(%rbx), %rax'}, {'instIndex': 13, 'instruction': 'cmpl\t0x58(%rbx), %eax'}, {'instIndex': 14, 'instruction': 'ja\t.L19'}, {'instIndex': 15, 'instruction': 'salq\t$5, %rax'}, {'instIndex': 16, 'instruction': 'addq\t0x10(%rbx), %rax'}, {'instIndex': 17, 'instruction': 'movq\t%rsi, %rbp'}, {'instIndex': 18, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 19, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 20, 'instruction': 'call\tavio_seek@PLT'}, {'instIndex': 21, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 22, 'instruction': 'js\t.L19'}, {'instIndex': 23, 'instruction': 'movl\t0x58(%rbx), %ecx'}, {'instIndex': 24, 'instruction': 'movslq\t12(%rbx), %rax'}, {'instIndex': 27, 'instruction': 'leal\t-1(%rcx), %edx'}, {'instIndex': 28, 'instruction': 'cmpl\t%edx, %eax'}, {'instIndex': 29, 'instruction': 'cmovne\t0x50(%rbx), %r14d'}]}]}
The case of compiler gcc with optimization Os.
Patched source code file: ape.c
Patched function: 1---static int ape_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/gcc_after/Os/ape_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/gcc_after/Os/ape_gcc.s---ape_read_packet---after
function id: 21
function flag: True
There are 495 instructions for function: ape_read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '361', 'end': 368}, 'before': {'start': '361', 'end': 367}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 14, 'instruction': 'movslq\t12(%rbx), %rax'}, {'instIndex': 15, 'instruction': 'cmpl\t0x58(%rbx), %eax'}, {'instIndex': 16, 'instruction': 'ja\t.L18'}, {'instIndex': 17, 'instruction': 'salq\t$5, %rax'}, {'instIndex': 18, 'instruction': 'addq\t0x10(%rbx), %rax'}, {'instIndex': 19, 'instruction': 'movq\t%rsi, %rbp'}, {'instIndex': 20, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 21, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 22, 'instruction': 'call\tavio_seek@PLT'}, {'instIndex': 23, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 24, 'instruction': 'js\t.L18'}, {'instIndex': 25, 'instruction': 'movl\t0x58(%rbx), %ecx'}, {'instIndex': 26, 'instruction': 'movslq\t12(%rbx), %rax'}, {'instIndex': 27, 'instruction': 'leal\t-1(%rcx), %edx'}, {'instIndex': 28, 'instruction': 'cmpl\t%edx, %eax'}, {'instIndex': 29, 'instruction': 'jne\t.L19'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/gcc_after/Os/ape.o
Binary file does not exist.
{'ape_read_packet': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 14, 'instruction': 'movslq\t12(%rbx), %rax'}, {'instIndex': 15, 'instruction': 'cmpl\t0x58(%rbx), %eax'}, {'instIndex': 16, 'instruction': 'ja\t.L18'}, {'instIndex': 17, 'instruction': 'salq\t$5, %rax'}, {'instIndex': 18, 'instruction': 'addq\t0x10(%rbx), %rax'}, {'instIndex': 19, 'instruction': 'movq\t%rsi, %rbp'}, {'instIndex': 20, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 21, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 22, 'instruction': 'call\tavio_seek@PLT'}, {'instIndex': 23, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 24, 'instruction': 'js\t.L18'}, {'instIndex': 25, 'instruction': 'movl\t0x58(%rbx), %ecx'}, {'instIndex': 26, 'instruction': 'movslq\t12(%rbx), %rax'}, {'instIndex': 27, 'instruction': 'leal\t-1(%rcx), %edx'}, {'instIndex': 28, 'instruction': 'cmpl\t%edx, %eax'}, {'instIndex': 29, 'instruction': 'jne\t.L19'}]}]}
The case of compiler clang with optimization no.
Patched source code file: ape.c
Patched function: 1---static int ape_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_after/no/ape.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_after/no/ape.s---ape_read_packet---after
function id: 2
function flag: True
There are 115 instructions for function: ape_read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '361', 'end': 368}, 'before': {'start': '361', 'end': 367}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 13, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 14, 'instruction': 'movl\t12(%rax), %eax'}, {'instIndex': 15, 'instruction': 'movq\t0x10(%rsp), %rcx'}, {'instIndex': 16, 'instruction': 'cmpl\t0x58(%rcx), %eax'}, {'instIndex': 17, 'instruction': 'jbe\t.LBB2_4'}, {'instIndex': 18, 'instruction': 'movl\t$-5, 0x34(%rsp)'}, {'instIndex': 19, 'instruction': 'jmp\t.LBB2_12'}, {'instIndex': 20, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 21, 'instruction': 'movq\t0x20(%rax), %rdi'}, {'instIndex': 22, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 23, 'instruction': 'movq\t0x10(%rax), %rax'}, {'instIndex': 24, 'instruction': 'movq\t0x10(%rsp), %rcx'}, {'instIndex': 25, 'instruction': 'movslq\t12(%rcx), %rcx'}, {'instIndex': 26, 'instruction': 'shlq\t$5, %rcx'}, {'instIndex': 27, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 28, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 29, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 30, 'instruction': 'callq\tavio_seek@PLT'}, {'instIndex': 31, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 32, 'instruction': 'jge\t.LBB2_6'}, {'instIndex': 33, 'instruction': 'movl\t$-5, 0x34(%rsp)'}, {'instIndex': 34, 'instruction': 'jmp\t.LBB2_12'}, {'instIndex': 35, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 36, 'instruction': 'movl\t12(%rax), %eax'}, {'instIndex': 37, 'instruction': 'movq\t0x10(%rsp), %rcx'}, {'instIndex': 38, 'instruction': 'movl\t0x58(%rcx), %ecx'}, {'instIndex': 39, 'instruction': 'subl\t$1, %ecx'}, {'instIndex': 40, 'instruction': 'cmpl\t%ecx, %eax'}, {'instIndex': 41, 'instruction': 'jne\t.LBB2_8'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_after/no/ape.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_after/no/ape.o---after
The extraction of function: ape_read_packet
Analyzing the binaries to generate subCFGs from patched function ...
It has 164 nodes and 299 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 115 instructions in binary file.
[4197712, 4197730, 4197743, 4197787, 4197793, 4197806]
The execution time of patched subCFG information extraction via angr: 0:00:00.200449
{'ape_read_packet': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d6f>, <DisassemblerInsn "mov" for 0x400d74>, <DisassemblerInsn "mov" for 0x400d78>, <DisassemblerInsn "mov" for 0x400d7d>, <DisassemblerInsn "mov" for 0x400d81>, <DisassemblerInsn "movsxd" for 0x400d86>, <DisassemblerInsn "shl" for 0x400d8a>, <DisassemblerInsn "add" for 0x400d8e>, <DisassemblerInsn "mov" for 0x400d91>, <DisassemblerInsn "xor" for 0x400d94>, <DisassemblerInsn "call" for 0x400d96>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dae>, <DisassemblerInsn "mov" for 0x400db3>, <DisassemblerInsn "mov" for 0x400db6>, <DisassemblerInsn "mov" for 0x400dbb>, <DisassemblerInsn "sub" for 0x400dbe>, <DisassemblerInsn "cmp" for 0x400dc1>, <DisassemblerInsn "jne" for 0x400dc3>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d62>, <DisassemblerInsn "jmp" for 0x400d6a>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400da1>, <DisassemblerInsn "jmp" for 0x400da9>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dd3>, <DisassemblerInsn "mov" for 0x400dd8>, <DisassemblerInsn "mov" for 0x400ddb>, <DisassemblerInsn "mov" for 0x400ddf>, <DisassemblerInsn "mov" for 0x400de4>, <DisassemblerInsn "mov" for 0x400de9>, <DisassemblerInsn "mov" for 0x400ded>, <DisassemblerInsn "movsxd" for 0x400df2>, <DisassemblerInsn "shl" for 0x400df6>, <DisassemblerInsn "add" for 0x400dfa>, <DisassemblerInsn "mov" for 0x400dfd>, <DisassemblerInsn "add" for 0x400e00>, <DisassemblerInsn "call" for 0x400e04>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d50>, <DisassemblerInsn "mov" for 0x400d55>, <DisassemblerInsn "mov" for 0x400d58>, <DisassemblerInsn "cmp" for 0x400d5d>, <DisassemblerInsn "jbe" for 0x400d60>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400d9b>, <DisassemblerInsn "jge" for 0x400d9f>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dc5>, <DisassemblerInsn "mov" for 0x400dca>, <DisassemblerInsn "mov" for 0x400dcd>, <DisassemblerInsn "jmp" for 0x400dd1>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400d10>, <DisassemblerInsn "mov" for 0x400d14>, <DisassemblerInsn "mov" for 0x400d19>, <DisassemblerInsn "mov" for 0x400d1e>, <DisassemblerInsn "mov" for 0x400d23>, <DisassemblerInsn "mov" for 0x400d27>, <DisassemblerInsn "mov" for 0x400d2c>, <DisassemblerInsn "mov" for 0x400d34>, <DisassemblerInsn "mov" for 0x400d39>, <DisassemblerInsn "cmp" for 0x400d3d>, <DisassemblerInsn "je" for 0x400d41>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ee7>, <DisassemblerInsn "add" for 0x400eeb>, <DisassemblerInsn "ret" for 0x400eef>]'}], 'cfg_block_detailed_info': [{'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rdi, qword ptr [rax + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<movsxd~~rcx, dword ptr [rcx + 0xc]>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<mov~~rsi, qword ptr [rax]>', '<xor~~edx, edx>', '<call~~0x500000>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~eax, dword ptr [rax + 0xc]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<mov~~ecx, dword ptr [rcx + 0x58]>', '<sub~~ecx, 1>', '<cmp~~eax, ecx>', '<jne~~0x400dd3>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xfffffffb>', '<jmp~~0x400ee7>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xfffffffb>', '<jmp~~0x400ee7>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~eax, dword ptr [rax + 0x50]>', '<mov~~dword ptr [rsp + 0x18], eax>', '<mov~~rdi, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<movsxd~~rcx, dword ptr [rcx + 0xc]>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<mov~~esi, dword ptr [rax + 0xc]>', '<add~~esi, dword ptr [rsp + 0xc]>', '<call~~0x500050>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~eax, dword ptr [rax + 0xc]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<cmp~~eax, dword ptr [rcx + 0x58]>', '<jbe~~0x400d6f>']}, {'block_Idx': 6, 'blockInsts': ['<cmp~~rax, 0>', '<jge~~0x400dae>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~eax, dword ptr [rax + 0x54]>', '<mov~~dword ptr [rsp + 0x18], eax>', '<jmp~~0x400ddf>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x38>', '<mov~~qword ptr [rsp + 0x28], rdi>', '<mov~~qword ptr [rsp + 0x20], rsi>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 0x10], rax>', '<mov~~dword ptr [rsp + 0xc], 8>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<cmp~~dword ptr [rax + 0x54], 0>', '<je~~0x400d50>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x38>', '<ret~~>']}], 'cfg_edge_info': [(0, 1), (6, 8), (8, 10), (1, 4), (6, 7), (4, 5), (8, 9), (3, 6), (7, 5), (1, 3)]}]}
{'ape_read_packet': [4197712, 4197730, 4197743, 4197787, 4197793, 4197806]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_after/no/ape.o---after
The extraction of function: ape_read_packet
[4197712, 4197730, 4197743, 4197787, 4197793, 4197806]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 20 nodes and 27 edges in CFGEmulated.
It has 20 nodes and 22 edges in CDG.
It has 392 nodes and 484 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4197712, 4197730, 4197743, 4197787, 4197793, 4197806]
{4197793, 4197730, 4197699, 4197829, 4198119, 4197897, 4198028, 4197806, 4197743, 4197712, 4197648, 4197902, 4197843, 4197915, 4197787, 4197855}
[19, 15, 7, 11, 1, 2, 10, 5, 0, 9, 17, 12, 3, 8, 16, 4]
The execution time of patched slicing information extraction via angr: 0:00:01.974606
{'ape_read_packet': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e8c>, <DisassemblerInsn "mov" for 0x400e90>, <DisassemblerInsn "mov" for 0x400e95>, <DisassemblerInsn "mov" for 0x400e99>, <DisassemblerInsn "movsxd" for 0x400e9e>, <DisassemblerInsn "shl" for 0x400ea2>, <DisassemblerInsn "add" for 0x400ea6>, <DisassemblerInsn "mov" for 0x400ea9>, <DisassemblerInsn "mov" for 0x400ead>, <DisassemblerInsn "mov" for 0x400eb2>, <DisassemblerInsn "mov" for 0x400eb5>, <DisassemblerInsn "mov" for 0x400eba>, <DisassemblerInsn "mov" for 0x400ec1>, <DisassemblerInsn "add" for 0x400ec5>, <DisassemblerInsn "mov" for 0x400ec9>, <DisassemblerInsn "mov" for 0x400ece>, <DisassemblerInsn "mov" for 0x400ed1>, <DisassemblerInsn "mov" for 0x400ed6>, <DisassemblerInsn "add" for 0x400ed9>, <DisassemblerInsn "mov" for 0x400edc>, <DisassemblerInsn "mov" for 0x400edf>, <DisassemblerInsn "mov" for 0x400ee7>, <DisassemblerInsn "add" for 0x400eeb>, <DisassemblerInsn "ret" for 0x400eef>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400e09>, <DisassemblerInsn "jge" for 0x400e0c>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400d9b>, <DisassemblerInsn "jge" for 0x400d9f>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dd3>, <DisassemblerInsn "mov" for 0x400dd8>, <DisassemblerInsn "mov" for 0x400ddb>, <DisassemblerInsn "mov" for 0x400ddf>, <DisassemblerInsn "mov" for 0x400de4>, <DisassemblerInsn "mov" for 0x400de9>, <DisassemblerInsn "mov" for 0x400ded>, <DisassemblerInsn "movsxd" for 0x400df2>, <DisassemblerInsn "shl" for 0x400df6>, <DisassemblerInsn "add" for 0x400dfa>, <DisassemblerInsn "mov" for 0x400dfd>, <DisassemblerInsn "add" for 0x400e00>, <DisassemblerInsn "call" for 0x400e04>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d50>, <DisassemblerInsn "mov" for 0x400d55>, <DisassemblerInsn "mov" for 0x400d58>, <DisassemblerInsn "cmp" for 0x400d5d>, <DisassemblerInsn "jbe" for 0x400d60>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d43>, <DisassemblerInsn "jmp" for 0x400d4b>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dc5>, <DisassemblerInsn "mov" for 0x400dca>, <DisassemblerInsn "mov" for 0x400dcd>, <DisassemblerInsn "jmp" for 0x400dd1>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ee7>, <DisassemblerInsn "add" for 0x400eeb>, <DisassemblerInsn "ret" for 0x400eef>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400d10>, <DisassemblerInsn "mov" for 0x400d14>, <DisassemblerInsn "mov" for 0x400d19>, <DisassemblerInsn "mov" for 0x400d1e>, <DisassemblerInsn "mov" for 0x400d23>, <DisassemblerInsn "mov" for 0x400d27>, <DisassemblerInsn "mov" for 0x400d2c>, <DisassemblerInsn "mov" for 0x400d34>, <DisassemblerInsn "mov" for 0x400d39>, <DisassemblerInsn "cmp" for 0x400d3d>, <DisassemblerInsn "je" for 0x400d41>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dae>, <DisassemblerInsn "mov" for 0x400db3>, <DisassemblerInsn "mov" for 0x400db6>, <DisassemblerInsn "mov" for 0x400dbb>, <DisassemblerInsn "sub" for 0x400dbe>, <DisassemblerInsn "cmp" for 0x400dc1>, <DisassemblerInsn "jne" for 0x400dc3>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e1b>, <DisassemblerInsn "mov" for 0x400e1f>, <DisassemblerInsn "mov" for 0x400e24>, <DisassemblerInsn "mov" for 0x400e28>, <DisassemblerInsn "mov" for 0x400e2a>, <DisassemblerInsn "mov" for 0x400e2f>, <DisassemblerInsn "mov" for 0x400e33>, <DisassemblerInsn "movsxd" for 0x400e38>, <DisassemblerInsn "shl" for 0x400e3c>, <DisassemblerInsn "add" for 0x400e40>, <DisassemblerInsn "mov" for 0x400e43>, <DisassemblerInsn "mov" for 0x400e46>, <DisassemblerInsn "mov" for 0x400e4b>, <DisassemblerInsn "mov" for 0x400e4f>, <DisassemblerInsn "mov" for 0x400e52>, <DisassemblerInsn "mov" for 0x400e57>, <DisassemblerInsn "mov" for 0x400e5b>, <DisassemblerInsn "mov" for 0x400e60>, <DisassemblerInsn "mov" for 0x400e64>, <DisassemblerInsn "add" for 0x400e68>, <DisassemblerInsn "mov" for 0x400e6b>, <DisassemblerInsn "mov" for 0x400e70>, <DisassemblerInsn "mov" for 0x400e74>, <DisassemblerInsn "movsxd" for 0x400e79>, <DisassemblerInsn "shl" for 0x400e7d>, <DisassemblerInsn "add" for 0x400e81>, <DisassemblerInsn "mov" for 0x400e84>, <DisassemblerInsn "call" for 0x400e87>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ddf>, <DisassemblerInsn "mov" for 0x400de4>, <DisassemblerInsn "mov" for 0x400de9>, <DisassemblerInsn "mov" for 0x400ded>, <DisassemblerInsn "movsxd" for 0x400df2>, <DisassemblerInsn "shl" for 0x400df6>, <DisassemblerInsn "add" for 0x400dfa>, <DisassemblerInsn "mov" for 0x400dfd>, <DisassemblerInsn "add" for 0x400e00>, <DisassemblerInsn "call" for 0x400e04>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d6f>, <DisassemblerInsn "mov" for 0x400d74>, <DisassemblerInsn "mov" for 0x400d78>, <DisassemblerInsn "mov" for 0x400d7d>, <DisassemblerInsn "mov" for 0x400d81>, <DisassemblerInsn "movsxd" for 0x400d86>, <DisassemblerInsn "shl" for 0x400d8a>, <DisassemblerInsn "add" for 0x400d8e>, <DisassemblerInsn "mov" for 0x400d91>, <DisassemblerInsn "xor" for 0x400d94>, <DisassemblerInsn "call" for 0x400d96>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400da1>, <DisassemblerInsn "jmp" for 0x400da9>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e0e>, <DisassemblerInsn "jmp" for 0x400e16>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d62>, <DisassemblerInsn "jmp" for 0x400d6a>]'}], 'cfg_block_detailed_info': [{'block_Idx': 19, 'blockInsts': ['<mov~~dword ptr [rsp + 0x1c], eax>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<movsxd~~rcx, dword ptr [rcx + 0xc]>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<mov~~rcx, qword ptr [rax + 0x18]>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~qword ptr [rax], rcx>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~dword ptr [rax + 0x1c], 0>', '<mov~~ecx, dword ptr [rsp + 0x1c]>', '<add~~ecx, dword ptr [rsp + 0xc]>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~dword ptr [rax + 0x18], ecx>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~ecx, dword ptr [rax + 0xc]>', '<add~~ecx, 1>', '<mov~~dword ptr [rax + 0xc], ecx>', '<mov~~dword ptr [rsp + 0x34], 0>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 15, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x400e1b>']}, {'block_Idx': 7, 'blockInsts': ['<cmp~~rax, 0>', '<jge~~0x400dae>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~eax, dword ptr [rax + 0x50]>', '<mov~~dword ptr [rsp + 0x18], eax>', '<mov~~rdi, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<movsxd~~rcx, dword ptr [rcx + 0xc]>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<mov~~esi, dword ptr [rax + 0xc]>', '<add~~esi, dword ptr [rsp + 0xc]>', '<call~~0x500050>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~eax, dword ptr [rax + 0xc]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<cmp~~eax, dword ptr [rcx + 0x58]>', '<jbe~~0x400d6f>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xfffffffb>', '<jmp~~0x400ee7>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~eax, dword ptr [rax + 0x54]>', '<mov~~dword ptr [rsp + 0x18], eax>', '<jmp~~0x400ddf>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x38>', '<mov~~qword ptr [rsp + 0x28], rdi>', '<mov~~qword ptr [rsp + 0x20], rsi>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 0x10], rax>', '<mov~~dword ptr [rsp + 0xc], 8>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<cmp~~dword ptr [rax + 0x54], 0>', '<je~~0x400d50>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~eax, dword ptr [rax + 0xc]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<mov~~ecx, dword ptr [rcx + 0x58]>', '<sub~~ecx, 1>', '<cmp~~eax, ecx>', '<jne~~0x400dd3>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<mov~~dword ptr [rax], ecx>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<movsxd~~rcx, dword ptr [rcx + 0xc]>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<mov~~ecx, dword ptr [rax + 0x10]>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<mov~~dword ptr [rax + 4], ecx>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rdi, qword ptr [rax + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rsi, qword ptr [rax + 0x10]>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<add~~rsi, rax>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<movsxd~~rcx, dword ptr [rcx + 0xc]>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<mov~~edx, dword ptr [rax + 0xc]>', '<call~~0x500020>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<movsxd~~rcx, dword ptr [rcx + 0xc]>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<mov~~esi, dword ptr [rax + 0xc]>', '<add~~esi, dword ptr [rsp + 0xc]>', '<call~~0x500050>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rdi, qword ptr [rax + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<movsxd~~rcx, dword ptr [rcx + 0xc]>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<mov~~rsi, qword ptr [rax]>', '<xor~~edx, edx>', '<call~~0x500000>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xfffffffb>', '<jmp~~0x400ee7>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xfffffff4>', '<jmp~~0x400ee7>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xfffffffb>', '<jmp~~0x400ee7>']}], 'cfg_edge_info': [(3, 7), (0, 2), (9, 11), (2, 5), (1, 3), (10, 12), (15, 17), (4, 5), (12, 15), (8, 5), (9, 10), (0, 1), (7, 9), (15, 16), (17, 19), (1, 4), (11, 15), (16, 5), (7, 8)], 'cdg_edge_info': [(0, 1), (15, 5), (9, 10), (1, 5), (15, 17), (9, 12), (1, 4), (7, 9), (15, 16), (0, 2), (1, 7), (15, 19), (0, 5), (7, 15), (9, 11), (7, 5), (1, 3), (7, 8)], 'ddg_edge_info': [(3, 7), (12, 16), (12, 19), (3, 10), (0, 2), (3, 19), (1, 3), (1, 9), (0, 11), (11, 17), (0, 17), (1, 12), (16, 19), (3, 9), (12, 15), (3, 12), (0, 1), (0, 4), (0, 10), (0, 19), (10, 17), (2, 19), (1, 17), (3, 11), (3, 8), (12, 17), (4, 19), (3, 17), (0, 3), (0, 9), (17, 19), (0, 12), (11, 12), (8, 19), (1, 19)]}]}
{'ape_read_packet': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 13, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 14, 'instruction': 'movl\t12(%rax), %eax'}, {'instIndex': 15, 'instruction': 'movq\t0x10(%rsp), %rcx'}, {'instIndex': 16, 'instruction': 'cmpl\t0x58(%rcx), %eax'}, {'instIndex': 17, 'instruction': 'jbe\t.LBB2_4'}, {'instIndex': 18, 'instruction': 'movl\t$-5, 0x34(%rsp)'}, {'instIndex': 19, 'instruction': 'jmp\t.LBB2_12'}, {'instIndex': 20, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 21, 'instruction': 'movq\t0x20(%rax), %rdi'}, {'instIndex': 22, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 23, 'instruction': 'movq\t0x10(%rax), %rax'}, {'instIndex': 24, 'instruction': 'movq\t0x10(%rsp), %rcx'}, {'instIndex': 25, 'instruction': 'movslq\t12(%rcx), %rcx'}, {'instIndex': 26, 'instruction': 'shlq\t$5, %rcx'}, {'instIndex': 27, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 28, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 29, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 30, 'instruction': 'callq\tavio_seek@PLT'}, {'instIndex': 31, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 32, 'instruction': 'jge\t.LBB2_6'}, {'instIndex': 33, 'instruction': 'movl\t$-5, 0x34(%rsp)'}, {'instIndex': 34, 'instruction': 'jmp\t.LBB2_12'}, {'instIndex': 35, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 36, 'instruction': 'movl\t12(%rax), %eax'}, {'instIndex': 37, 'instruction': 'movq\t0x10(%rsp), %rcx'}, {'instIndex': 38, 'instruction': 'movl\t0x58(%rcx), %ecx'}, {'instIndex': 39, 'instruction': 'subl\t$1, %ecx'}, {'instIndex': 40, 'instruction': 'cmpl\t%ecx, %eax'}, {'instIndex': 41, 'instruction': 'jne\t.LBB2_8'}]}]}
The case of compiler clang with optimization O0.
Patched source code file: ape.c
Patched function: 1---static int ape_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_after/O0/ape.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_after/O0/ape.s---ape_read_packet---after
function id: 2
function flag: True
There are 115 instructions for function: ape_read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '361', 'end': 368}, 'before': {'start': '361', 'end': 367}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 13, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 14, 'instruction': 'movl\t12(%rax), %eax'}, {'instIndex': 15, 'instruction': 'movq\t0x10(%rsp), %rcx'}, {'instIndex': 16, 'instruction': 'cmpl\t0x58(%rcx), %eax'}, {'instIndex': 17, 'instruction': 'jbe\t.LBB2_4'}, {'instIndex': 18, 'instruction': 'movl\t$-5, 0x34(%rsp)'}, {'instIndex': 19, 'instruction': 'jmp\t.LBB2_12'}, {'instIndex': 20, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 21, 'instruction': 'movq\t0x20(%rax), %rdi'}, {'instIndex': 22, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 23, 'instruction': 'movq\t0x10(%rax), %rax'}, {'instIndex': 24, 'instruction': 'movq\t0x10(%rsp), %rcx'}, {'instIndex': 25, 'instruction': 'movslq\t12(%rcx), %rcx'}, {'instIndex': 26, 'instruction': 'shlq\t$5, %rcx'}, {'instIndex': 27, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 28, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 29, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 30, 'instruction': 'callq\tavio_seek@PLT'}, {'instIndex': 31, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 32, 'instruction': 'jge\t.LBB2_6'}, {'instIndex': 33, 'instruction': 'movl\t$-5, 0x34(%rsp)'}, {'instIndex': 34, 'instruction': 'jmp\t.LBB2_12'}, {'instIndex': 35, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 36, 'instruction': 'movl\t12(%rax), %eax'}, {'instIndex': 37, 'instruction': 'movq\t0x10(%rsp), %rcx'}, {'instIndex': 38, 'instruction': 'movl\t0x58(%rcx), %ecx'}, {'instIndex': 39, 'instruction': 'subl\t$1, %ecx'}, {'instIndex': 40, 'instruction': 'cmpl\t%ecx, %eax'}, {'instIndex': 41, 'instruction': 'jne\t.LBB2_8'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_after/O0/ape.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_after/O0/ape.o---after
The extraction of function: ape_read_packet
Analyzing the binaries to generate subCFGs from patched function ...
It has 164 nodes and 299 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 115 instructions in binary file.
[4197712, 4197730, 4197743, 4197787, 4197793, 4197806]
The execution time of patched subCFG information extraction via angr: 0:00:00.213515
{'ape_read_packet': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d6f>, <DisassemblerInsn "mov" for 0x400d74>, <DisassemblerInsn "mov" for 0x400d78>, <DisassemblerInsn "mov" for 0x400d7d>, <DisassemblerInsn "mov" for 0x400d81>, <DisassemblerInsn "movsxd" for 0x400d86>, <DisassemblerInsn "shl" for 0x400d8a>, <DisassemblerInsn "add" for 0x400d8e>, <DisassemblerInsn "mov" for 0x400d91>, <DisassemblerInsn "xor" for 0x400d94>, <DisassemblerInsn "call" for 0x400d96>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dae>, <DisassemblerInsn "mov" for 0x400db3>, <DisassemblerInsn "mov" for 0x400db6>, <DisassemblerInsn "mov" for 0x400dbb>, <DisassemblerInsn "sub" for 0x400dbe>, <DisassemblerInsn "cmp" for 0x400dc1>, <DisassemblerInsn "jne" for 0x400dc3>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d62>, <DisassemblerInsn "jmp" for 0x400d6a>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400da1>, <DisassemblerInsn "jmp" for 0x400da9>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dd3>, <DisassemblerInsn "mov" for 0x400dd8>, <DisassemblerInsn "mov" for 0x400ddb>, <DisassemblerInsn "mov" for 0x400ddf>, <DisassemblerInsn "mov" for 0x400de4>, <DisassemblerInsn "mov" for 0x400de9>, <DisassemblerInsn "mov" for 0x400ded>, <DisassemblerInsn "movsxd" for 0x400df2>, <DisassemblerInsn "shl" for 0x400df6>, <DisassemblerInsn "add" for 0x400dfa>, <DisassemblerInsn "mov" for 0x400dfd>, <DisassemblerInsn "add" for 0x400e00>, <DisassemblerInsn "call" for 0x400e04>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d50>, <DisassemblerInsn "mov" for 0x400d55>, <DisassemblerInsn "mov" for 0x400d58>, <DisassemblerInsn "cmp" for 0x400d5d>, <DisassemblerInsn "jbe" for 0x400d60>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400d9b>, <DisassemblerInsn "jge" for 0x400d9f>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dc5>, <DisassemblerInsn "mov" for 0x400dca>, <DisassemblerInsn "mov" for 0x400dcd>, <DisassemblerInsn "jmp" for 0x400dd1>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400d10>, <DisassemblerInsn "mov" for 0x400d14>, <DisassemblerInsn "mov" for 0x400d19>, <DisassemblerInsn "mov" for 0x400d1e>, <DisassemblerInsn "mov" for 0x400d23>, <DisassemblerInsn "mov" for 0x400d27>, <DisassemblerInsn "mov" for 0x400d2c>, <DisassemblerInsn "mov" for 0x400d34>, <DisassemblerInsn "mov" for 0x400d39>, <DisassemblerInsn "cmp" for 0x400d3d>, <DisassemblerInsn "je" for 0x400d41>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ee7>, <DisassemblerInsn "add" for 0x400eeb>, <DisassemblerInsn "ret" for 0x400eef>]'}], 'cfg_block_detailed_info': [{'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rdi, qword ptr [rax + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<movsxd~~rcx, dword ptr [rcx + 0xc]>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<mov~~rsi, qword ptr [rax]>', '<xor~~edx, edx>', '<call~~0x500000>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~eax, dword ptr [rax + 0xc]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<mov~~ecx, dword ptr [rcx + 0x58]>', '<sub~~ecx, 1>', '<cmp~~eax, ecx>', '<jne~~0x400dd3>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xfffffffb>', '<jmp~~0x400ee7>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xfffffffb>', '<jmp~~0x400ee7>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~eax, dword ptr [rax + 0x50]>', '<mov~~dword ptr [rsp + 0x18], eax>', '<mov~~rdi, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<movsxd~~rcx, dword ptr [rcx + 0xc]>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<mov~~esi, dword ptr [rax + 0xc]>', '<add~~esi, dword ptr [rsp + 0xc]>', '<call~~0x500050>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~eax, dword ptr [rax + 0xc]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<cmp~~eax, dword ptr [rcx + 0x58]>', '<jbe~~0x400d6f>']}, {'block_Idx': 6, 'blockInsts': ['<cmp~~rax, 0>', '<jge~~0x400dae>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~eax, dword ptr [rax + 0x54]>', '<mov~~dword ptr [rsp + 0x18], eax>', '<jmp~~0x400ddf>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x38>', '<mov~~qword ptr [rsp + 0x28], rdi>', '<mov~~qword ptr [rsp + 0x20], rsi>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 0x10], rax>', '<mov~~dword ptr [rsp + 0xc], 8>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<cmp~~dword ptr [rax + 0x54], 0>', '<je~~0x400d50>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x38>', '<ret~~>']}], 'cfg_edge_info': [(0, 1), (6, 8), (8, 10), (1, 4), (6, 7), (4, 5), (8, 9), (3, 6), (7, 5), (1, 3)]}]}
{'ape_read_packet': [4197712, 4197730, 4197743, 4197787, 4197793, 4197806]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_after/O0/ape.o---after
The extraction of function: ape_read_packet
[4197712, 4197730, 4197743, 4197787, 4197793, 4197806]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 20 nodes and 27 edges in CFGEmulated.
It has 20 nodes and 22 edges in CDG.
It has 392 nodes and 484 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4197712, 4197730, 4197743, 4197787, 4197793, 4197806]
{4197793, 4197730, 4197699, 4197829, 4198119, 4197897, 4198028, 4197806, 4197743, 4197712, 4197648, 4197902, 4197843, 4197915, 4197787, 4197855}
[19, 15, 7, 11, 1, 2, 10, 5, 0, 9, 17, 12, 3, 8, 16, 4]
The execution time of patched slicing information extraction via angr: 0:00:01.946972
{'ape_read_packet': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e8c>, <DisassemblerInsn "mov" for 0x400e90>, <DisassemblerInsn "mov" for 0x400e95>, <DisassemblerInsn "mov" for 0x400e99>, <DisassemblerInsn "movsxd" for 0x400e9e>, <DisassemblerInsn "shl" for 0x400ea2>, <DisassemblerInsn "add" for 0x400ea6>, <DisassemblerInsn "mov" for 0x400ea9>, <DisassemblerInsn "mov" for 0x400ead>, <DisassemblerInsn "mov" for 0x400eb2>, <DisassemblerInsn "mov" for 0x400eb5>, <DisassemblerInsn "mov" for 0x400eba>, <DisassemblerInsn "mov" for 0x400ec1>, <DisassemblerInsn "add" for 0x400ec5>, <DisassemblerInsn "mov" for 0x400ec9>, <DisassemblerInsn "mov" for 0x400ece>, <DisassemblerInsn "mov" for 0x400ed1>, <DisassemblerInsn "mov" for 0x400ed6>, <DisassemblerInsn "add" for 0x400ed9>, <DisassemblerInsn "mov" for 0x400edc>, <DisassemblerInsn "mov" for 0x400edf>, <DisassemblerInsn "mov" for 0x400ee7>, <DisassemblerInsn "add" for 0x400eeb>, <DisassemblerInsn "ret" for 0x400eef>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400e09>, <DisassemblerInsn "jge" for 0x400e0c>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400d9b>, <DisassemblerInsn "jge" for 0x400d9f>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dd3>, <DisassemblerInsn "mov" for 0x400dd8>, <DisassemblerInsn "mov" for 0x400ddb>, <DisassemblerInsn "mov" for 0x400ddf>, <DisassemblerInsn "mov" for 0x400de4>, <DisassemblerInsn "mov" for 0x400de9>, <DisassemblerInsn "mov" for 0x400ded>, <DisassemblerInsn "movsxd" for 0x400df2>, <DisassemblerInsn "shl" for 0x400df6>, <DisassemblerInsn "add" for 0x400dfa>, <DisassemblerInsn "mov" for 0x400dfd>, <DisassemblerInsn "add" for 0x400e00>, <DisassemblerInsn "call" for 0x400e04>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d50>, <DisassemblerInsn "mov" for 0x400d55>, <DisassemblerInsn "mov" for 0x400d58>, <DisassemblerInsn "cmp" for 0x400d5d>, <DisassemblerInsn "jbe" for 0x400d60>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d43>, <DisassemblerInsn "jmp" for 0x400d4b>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dc5>, <DisassemblerInsn "mov" for 0x400dca>, <DisassemblerInsn "mov" for 0x400dcd>, <DisassemblerInsn "jmp" for 0x400dd1>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ee7>, <DisassemblerInsn "add" for 0x400eeb>, <DisassemblerInsn "ret" for 0x400eef>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400d10>, <DisassemblerInsn "mov" for 0x400d14>, <DisassemblerInsn "mov" for 0x400d19>, <DisassemblerInsn "mov" for 0x400d1e>, <DisassemblerInsn "mov" for 0x400d23>, <DisassemblerInsn "mov" for 0x400d27>, <DisassemblerInsn "mov" for 0x400d2c>, <DisassemblerInsn "mov" for 0x400d34>, <DisassemblerInsn "mov" for 0x400d39>, <DisassemblerInsn "cmp" for 0x400d3d>, <DisassemblerInsn "je" for 0x400d41>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dae>, <DisassemblerInsn "mov" for 0x400db3>, <DisassemblerInsn "mov" for 0x400db6>, <DisassemblerInsn "mov" for 0x400dbb>, <DisassemblerInsn "sub" for 0x400dbe>, <DisassemblerInsn "cmp" for 0x400dc1>, <DisassemblerInsn "jne" for 0x400dc3>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e1b>, <DisassemblerInsn "mov" for 0x400e1f>, <DisassemblerInsn "mov" for 0x400e24>, <DisassemblerInsn "mov" for 0x400e28>, <DisassemblerInsn "mov" for 0x400e2a>, <DisassemblerInsn "mov" for 0x400e2f>, <DisassemblerInsn "mov" for 0x400e33>, <DisassemblerInsn "movsxd" for 0x400e38>, <DisassemblerInsn "shl" for 0x400e3c>, <DisassemblerInsn "add" for 0x400e40>, <DisassemblerInsn "mov" for 0x400e43>, <DisassemblerInsn "mov" for 0x400e46>, <DisassemblerInsn "mov" for 0x400e4b>, <DisassemblerInsn "mov" for 0x400e4f>, <DisassemblerInsn "mov" for 0x400e52>, <DisassemblerInsn "mov" for 0x400e57>, <DisassemblerInsn "mov" for 0x400e5b>, <DisassemblerInsn "mov" for 0x400e60>, <DisassemblerInsn "mov" for 0x400e64>, <DisassemblerInsn "add" for 0x400e68>, <DisassemblerInsn "mov" for 0x400e6b>, <DisassemblerInsn "mov" for 0x400e70>, <DisassemblerInsn "mov" for 0x400e74>, <DisassemblerInsn "movsxd" for 0x400e79>, <DisassemblerInsn "shl" for 0x400e7d>, <DisassemblerInsn "add" for 0x400e81>, <DisassemblerInsn "mov" for 0x400e84>, <DisassemblerInsn "call" for 0x400e87>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ddf>, <DisassemblerInsn "mov" for 0x400de4>, <DisassemblerInsn "mov" for 0x400de9>, <DisassemblerInsn "mov" for 0x400ded>, <DisassemblerInsn "movsxd" for 0x400df2>, <DisassemblerInsn "shl" for 0x400df6>, <DisassemblerInsn "add" for 0x400dfa>, <DisassemblerInsn "mov" for 0x400dfd>, <DisassemblerInsn "add" for 0x400e00>, <DisassemblerInsn "call" for 0x400e04>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d6f>, <DisassemblerInsn "mov" for 0x400d74>, <DisassemblerInsn "mov" for 0x400d78>, <DisassemblerInsn "mov" for 0x400d7d>, <DisassemblerInsn "mov" for 0x400d81>, <DisassemblerInsn "movsxd" for 0x400d86>, <DisassemblerInsn "shl" for 0x400d8a>, <DisassemblerInsn "add" for 0x400d8e>, <DisassemblerInsn "mov" for 0x400d91>, <DisassemblerInsn "xor" for 0x400d94>, <DisassemblerInsn "call" for 0x400d96>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400da1>, <DisassemblerInsn "jmp" for 0x400da9>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e0e>, <DisassemblerInsn "jmp" for 0x400e16>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d62>, <DisassemblerInsn "jmp" for 0x400d6a>]'}], 'cfg_block_detailed_info': [{'block_Idx': 19, 'blockInsts': ['<mov~~dword ptr [rsp + 0x1c], eax>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<movsxd~~rcx, dword ptr [rcx + 0xc]>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<mov~~rcx, qword ptr [rax + 0x18]>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~qword ptr [rax], rcx>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~dword ptr [rax + 0x1c], 0>', '<mov~~ecx, dword ptr [rsp + 0x1c]>', '<add~~ecx, dword ptr [rsp + 0xc]>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~dword ptr [rax + 0x18], ecx>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~ecx, dword ptr [rax + 0xc]>', '<add~~ecx, 1>', '<mov~~dword ptr [rax + 0xc], ecx>', '<mov~~dword ptr [rsp + 0x34], 0>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 15, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x400e1b>']}, {'block_Idx': 7, 'blockInsts': ['<cmp~~rax, 0>', '<jge~~0x400dae>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~eax, dword ptr [rax + 0x50]>', '<mov~~dword ptr [rsp + 0x18], eax>', '<mov~~rdi, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<movsxd~~rcx, dword ptr [rcx + 0xc]>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<mov~~esi, dword ptr [rax + 0xc]>', '<add~~esi, dword ptr [rsp + 0xc]>', '<call~~0x500050>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~eax, dword ptr [rax + 0xc]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<cmp~~eax, dword ptr [rcx + 0x58]>', '<jbe~~0x400d6f>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xfffffffb>', '<jmp~~0x400ee7>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~eax, dword ptr [rax + 0x54]>', '<mov~~dword ptr [rsp + 0x18], eax>', '<jmp~~0x400ddf>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x38>', '<mov~~qword ptr [rsp + 0x28], rdi>', '<mov~~qword ptr [rsp + 0x20], rsi>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 0x10], rax>', '<mov~~dword ptr [rsp + 0xc], 8>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<cmp~~dword ptr [rax + 0x54], 0>', '<je~~0x400d50>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~eax, dword ptr [rax + 0xc]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<mov~~ecx, dword ptr [rcx + 0x58]>', '<sub~~ecx, 1>', '<cmp~~eax, ecx>', '<jne~~0x400dd3>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<mov~~dword ptr [rax], ecx>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<movsxd~~rcx, dword ptr [rcx + 0xc]>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<mov~~ecx, dword ptr [rax + 0x10]>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<mov~~dword ptr [rax + 4], ecx>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rdi, qword ptr [rax + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rsi, qword ptr [rax + 0x10]>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<add~~rsi, rax>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<movsxd~~rcx, dword ptr [rcx + 0xc]>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<mov~~edx, dword ptr [rax + 0xc]>', '<call~~0x500020>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<movsxd~~rcx, dword ptr [rcx + 0xc]>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<mov~~esi, dword ptr [rax + 0xc]>', '<add~~esi, dword ptr [rsp + 0xc]>', '<call~~0x500050>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rdi, qword ptr [rax + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<movsxd~~rcx, dword ptr [rcx + 0xc]>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<mov~~rsi, qword ptr [rax]>', '<xor~~edx, edx>', '<call~~0x500000>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xfffffffb>', '<jmp~~0x400ee7>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xfffffff4>', '<jmp~~0x400ee7>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xfffffffb>', '<jmp~~0x400ee7>']}], 'cfg_edge_info': [(3, 7), (0, 2), (9, 11), (2, 5), (1, 3), (10, 12), (15, 17), (4, 5), (12, 15), (8, 5), (9, 10), (0, 1), (7, 9), (15, 16), (17, 19), (1, 4), (11, 15), (16, 5), (7, 8)], 'cdg_edge_info': [(0, 1), (15, 5), (9, 10), (1, 5), (15, 17), (9, 12), (1, 4), (7, 9), (15, 16), (0, 2), (1, 7), (15, 19), (0, 5), (7, 15), (9, 11), (7, 5), (1, 3), (7, 8)], 'ddg_edge_info': [(3, 7), (12, 16), (12, 19), (3, 10), (0, 2), (3, 19), (1, 3), (1, 9), (0, 11), (11, 17), (0, 17), (1, 12), (16, 19), (3, 9), (12, 15), (3, 12), (0, 1), (0, 4), (0, 10), (0, 19), (10, 17), (2, 19), (1, 17), (3, 11), (3, 8), (12, 17), (4, 19), (3, 17), (0, 3), (0, 9), (17, 19), (0, 12), (11, 12), (8, 19), (1, 19)]}]}
{'ape_read_packet': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 13, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 14, 'instruction': 'movl\t12(%rax), %eax'}, {'instIndex': 15, 'instruction': 'movq\t0x10(%rsp), %rcx'}, {'instIndex': 16, 'instruction': 'cmpl\t0x58(%rcx), %eax'}, {'instIndex': 17, 'instruction': 'jbe\t.LBB2_4'}, {'instIndex': 18, 'instruction': 'movl\t$-5, 0x34(%rsp)'}, {'instIndex': 19, 'instruction': 'jmp\t.LBB2_12'}, {'instIndex': 20, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 21, 'instruction': 'movq\t0x20(%rax), %rdi'}, {'instIndex': 22, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 23, 'instruction': 'movq\t0x10(%rax), %rax'}, {'instIndex': 24, 'instruction': 'movq\t0x10(%rsp), %rcx'}, {'instIndex': 25, 'instruction': 'movslq\t12(%rcx), %rcx'}, {'instIndex': 26, 'instruction': 'shlq\t$5, %rcx'}, {'instIndex': 27, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 28, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 29, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 30, 'instruction': 'callq\tavio_seek@PLT'}, {'instIndex': 31, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 32, 'instruction': 'jge\t.LBB2_6'}, {'instIndex': 33, 'instruction': 'movl\t$-5, 0x34(%rsp)'}, {'instIndex': 34, 'instruction': 'jmp\t.LBB2_12'}, {'instIndex': 35, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 36, 'instruction': 'movl\t12(%rax), %eax'}, {'instIndex': 37, 'instruction': 'movq\t0x10(%rsp), %rcx'}, {'instIndex': 38, 'instruction': 'movl\t0x58(%rcx), %ecx'}, {'instIndex': 39, 'instruction': 'subl\t$1, %ecx'}, {'instIndex': 40, 'instruction': 'cmpl\t%ecx, %eax'}, {'instIndex': 41, 'instruction': 'jne\t.LBB2_8'}]}]}
The case of compiler clang with optimization O1.
Patched source code file: ape.c
Patched function: 1---static int ape_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_after/O1/ape.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_after/O1/ape.s---ape_read_packet---after
function id: 2
function flag: True
There are 119 instructions for function: ape_read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '361', 'end': 368}, 'before': {'start': '361', 'end': 367}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 14, 'instruction': 'movq\t%rdx, %rax'}, {'instIndex': 15, 'instruction': 'addq\t$12, %rax'}, {'instIndex': 16, 'instruction': 'movq\t%rax, 0x18(%rsp)                  # 8-byte Spill'}, {'instIndex': 17, 'instruction': 'movl\t12(%rdx), %ecx'}, {'instIndex': 18, 'instruction': 'movl\t%ecx, 0x24(%rsp)                  # 4-byte Spill'}, {'instIndex': 19, 'instruction': 'movq\t%rdx, %rax'}, {'instIndex': 20, 'instruction': 'addq\t$0x58, %rax'}, {'instIndex': 21, 'instruction': 'movq\t%rax, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 22, 'instruction': 'movl\t$0xfffffffb, %eax               # imm = 0xFFFFFFFB'}, {'instIndex': 23, 'instruction': 'cmpl\t0x58(%rdx), %ecx'}, {'instIndex': 24, 'instruction': 'movl\t%eax, 0x54(%rsp)                  # 4-byte Spill'}, {'instIndex': 25, 'instruction': 'ja\t.LBB2_5'}, {'instIndex': 29, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 30, 'instruction': 'addq\t$0x10, %rdx'}, {'instIndex': 31, 'instruction': 'movq\t%rdx, 0x10(%rsp)                  # 8-byte Spill'}, {'instIndex': 32, 'instruction': 'movq\t0x10(%rax), %rax'}, {'instIndex': 33, 'instruction': 'movslq\t%ecx, %rcx'}, {'instIndex': 34, 'instruction': 'shlq\t$5, %rcx'}, {'instIndex': 35, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 36, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 37, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 38, 'instruction': 'callq\tavio_seek@PLT'}, {'instIndex': 39, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 40, 'instruction': 'movl\t$0xfffffffb, %eax               # imm = 0xFFFFFFFB'}, {'instIndex': 41, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 42, 'instruction': 'movl\t%eax, 0x54(%rsp)                  # 4-byte Spill'}, {'instIndex': 43, 'instruction': 'jl\t.LBB2_5'}, {'instIndex': 49, 'instruction': 'movl\t(%rcx), %ecx'}, {'instIndex': 50, 'instruction': 'movl\t(%rsi), %r8d'}, {'instIndex': 51, 'instruction': 'addl\t$-1, %r8d'}, {'instIndex': 52, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 53, 'instruction': 'addq\t$0x54, %rsi'}, {'instIndex': 54, 'instruction': 'addq\t$0x50, %rdx'}, {'instIndex': 55, 'instruction': 'cmpl\t%r8d, %ecx'}, {'instIndex': 56, 'instruction': 'cmoveq\t%rsi, %rdx'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_after/O1/ape.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_after/O1/ape.o---after
The extraction of function: ape_read_packet
Analyzing the binaries to generate subCFGs from patched function ...
It has 138 nodes and 275 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 119 instructions in binary file.
[4198266, 4198320, 4198370, 4198392]
The execution time of patched subCFG information extraction via angr: 0:00:00.201061
{'ape_read_packet': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400fb0>, <DisassemblerInsn "mov" for 0x400fb5>, <DisassemblerInsn "mov" for 0x400fb9>, <DisassemblerInsn "mov" for 0x400fbe>, <DisassemblerInsn "add" for 0x400fc1>, <DisassemblerInsn "mov" for 0x400fc5>, <DisassemblerInsn "mov" for 0x400fca>, <DisassemblerInsn "movsxd" for 0x400fce>, <DisassemblerInsn "shl" for 0x400fd1>, <DisassemblerInsn "add" for 0x400fd5>, <DisassemblerInsn "mov" for 0x400fd8>, <DisassemblerInsn "xor" for 0x400fdb>, <DisassemblerInsn "call" for 0x400fdd>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400f7a>, <DisassemblerInsn "mov" for 0x400f7f>, <DisassemblerInsn "add" for 0x400f82>, <DisassemblerInsn "mov" for 0x400f86>, <DisassemblerInsn "mov" for 0x400f8b>, <DisassemblerInsn "mov" for 0x400f8e>, <DisassemblerInsn "mov" for 0x400f92>, <DisassemblerInsn "add" for 0x400f95>, <DisassemblerInsn "mov" for 0x400f99>, <DisassemblerInsn "mov" for 0x400f9e>, <DisassemblerInsn "cmp" for 0x400fa3>, <DisassemblerInsn "mov" for 0x400fa6>, <DisassemblerInsn "ja" for 0x400faa>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ff8>, <DisassemblerInsn "mov" for 0x400ffd>, <DisassemblerInsn "mov" for 0x401002>, <DisassemblerInsn "mov" for 0x401007>, <DisassemblerInsn "mov" for 0x40100c>, <DisassemblerInsn "mov" for 0x401011>, <DisassemblerInsn "mov" for 0x401013>, <DisassemblerInsn "add" for 0x401016>, <DisassemblerInsn "mov" for 0x40101a>, <DisassemblerInsn "add" for 0x40101d>, <DisassemblerInsn "add" for 0x401021>, <DisassemblerInsn "cmp" for 0x401025>, <DisassemblerInsn "cmove" for 0x401028>, <DisassemblerInsn "mov" for 0x40102c>, <DisassemblerInsn "mov" for 0x40102e>, <DisassemblerInsn "mov" for 0x401032>, <DisassemblerInsn "movsxd" for 0x401035>, <DisassemblerInsn "shl" for 0x401038>, <DisassemblerInsn "add" for 0x40103c>, <DisassemblerInsn "add" for 0x40103f>, <DisassemblerInsn "mov" for 0x401043>, <DisassemblerInsn "add" for 0x401045>, <DisassemblerInsn "call" for 0x401048>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400f40>, <DisassemblerInsn "mov" for 0x400f44>, <DisassemblerInsn "mov" for 0x400f49>, <DisassemblerInsn "mov" for 0x400f4d>, <DisassemblerInsn "mov" for 0x400f52>, <DisassemblerInsn "add" for 0x400f55>, <DisassemblerInsn "mov" for 0x400f59>, <DisassemblerInsn "mov" for 0x400f5e>, <DisassemblerInsn "mov" for 0x400f62>, <DisassemblerInsn "mov" for 0x400f67>, <DisassemblerInsn "cmp" for 0x400f6c>, <DisassemblerInsn "mov" for 0x400f70>, <DisassemblerInsn "jne" for 0x400f74>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40104d>, <DisassemblerInsn "mov" for 0x40104f>, <DisassemblerInsn "cmp" for 0x401054>, <DisassemblerInsn "mov" for 0x401057>, <DisassemblerInsn "jl" for 0x40105b>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401102>, <DisassemblerInsn "add" for 0x401106>, <DisassemblerInsn "ret" for 0x40110a>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400fe2>, <DisassemblerInsn "mov" for 0x400fe5>, <DisassemblerInsn "cmp" for 0x400fea>, <DisassemblerInsn "mov" for 0x400fee>, <DisassemblerInsn "jl" for 0x400ff2>]'}], 'cfg_block_detailed_info': [{'block_Idx': 3, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~ecx, dword ptr [rsp + 0x24]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rdx, rax>', '<add~~rdx, 0x10>', '<mov~~qword ptr [rsp + 0x10], rdx>', '<mov~~rax, qword ptr [rax + 0x10]>', '<movsxd~~rcx, ecx>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<mov~~rsi, qword ptr [rax]>', '<xor~~edx, edx>', '<call~~0x500000>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~rax, rdx>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~ecx, dword ptr [rdx + 0xc]>', '<mov~~dword ptr [rsp + 0x24], ecx>', '<mov~~rax, rdx>', '<add~~rax, 0x58>', '<mov~~qword ptr [rsp + 0x28], rax>', '<mov~~eax, 0xfffffffb>', '<cmp~~ecx, dword ptr [rdx + 0x58]>', '<mov~~dword ptr [rsp + 0x54], eax>', '<ja~~0x401102>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~rsi, qword ptr [rsp + 0x28]>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~r8d, dword ptr [rsi]>', '<add~~r8d, -1>', '<mov~~rsi, rdx>', '<add~~rsi, 0x54>', '<add~~rdx, 0x50>', '<cmp~~ecx, r8d>', '<cmove~~rdx, rsi>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0xc], edx>', '<mov~~rax, qword ptr [rax]>', '<movsxd~~rcx, ecx>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<add~~rax, 0xc>', '<mov~~esi, dword ptr [rax]>', '<add~~esi, 8>', '<call~~0x500050>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x58>', '<mov~~qword ptr [rsp + 0x30], rsi>', '<mov~~rax, qword ptr [rdi + 0x18]>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x20>', '<mov~~qword ptr [rsp + 0x40], rax>', '<mov~~rcx, qword ptr [rdi + 0x20]>', '<mov~~qword ptr [rsp + 0x48], rcx>', '<mov~~eax, 0xfffffffb>', '<cmp~~dword ptr [rcx + 0x54], 0>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jne~~0x401102>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~eax, 0xfffffff4>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jl~~0x401102>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~eax, 0xfffffffb>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jl~~0x401102>']}], 'cfg_edge_info': [(0, 1), (1, 2), (3, 4), (4, 2), (4, 5), (5, 6), (1, 3)]}]}
{'ape_read_packet': [4198266, 4198320, 4198370, 4198392]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_after/O1/ape.o---after
The extraction of function: ape_read_packet
[4198266, 4198320, 4198370, 4198392]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 12 nodes and 17 edges in CFGEmulated.
It has 12 nodes and 14 edges in CDG.
It has 327 nodes and 382 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4198266, 4198320, 4198370, 4198392]
{4198208, 4198497, 4198658, 4198370, 4198592, 4198477, 4198320, 4198392, 4198266}
[0, 8, 1, 6, 11, 9, 5, 2, 3]
The execution time of patched slicing information extraction via angr: 0:00:01.336293
{'ape_read_packet': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400f40>, <DisassemblerInsn "mov" for 0x400f44>, <DisassemblerInsn "mov" for 0x400f49>, <DisassemblerInsn "mov" for 0x400f4d>, <DisassemblerInsn "mov" for 0x400f52>, <DisassemblerInsn "add" for 0x400f55>, <DisassemblerInsn "mov" for 0x400f59>, <DisassemblerInsn "mov" for 0x400f5e>, <DisassemblerInsn "mov" for 0x400f62>, <DisassemblerInsn "mov" for 0x400f67>, <DisassemblerInsn "cmp" for 0x400f6c>, <DisassemblerInsn "mov" for 0x400f70>, <DisassemblerInsn "jne" for 0x400f74>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40104d>, <DisassemblerInsn "mov" for 0x40104f>, <DisassemblerInsn "cmp" for 0x401054>, <DisassemblerInsn "mov" for 0x401057>, <DisassemblerInsn "jl" for 0x40105b>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400f7a>, <DisassemblerInsn "mov" for 0x400f7f>, <DisassemblerInsn "add" for 0x400f82>, <DisassemblerInsn "mov" for 0x400f86>, <DisassemblerInsn "mov" for 0x400f8b>, <DisassemblerInsn "mov" for 0x400f8e>, <DisassemblerInsn "mov" for 0x400f92>, <DisassemblerInsn "add" for 0x400f95>, <DisassemblerInsn "mov" for 0x400f99>, <DisassemblerInsn "mov" for 0x400f9e>, <DisassemblerInsn "cmp" for 0x400fa3>, <DisassemblerInsn "mov" for 0x400fa6>, <DisassemblerInsn "ja" for 0x400faa>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ff8>, <DisassemblerInsn "mov" for 0x400ffd>, <DisassemblerInsn "mov" for 0x401002>, <DisassemblerInsn "mov" for 0x401007>, <DisassemblerInsn "mov" for 0x40100c>, <DisassemblerInsn "mov" for 0x401011>, <DisassemblerInsn "mov" for 0x401013>, <DisassemblerInsn "add" for 0x401016>, <DisassemblerInsn "mov" for 0x40101a>, <DisassemblerInsn "add" for 0x40101d>, <DisassemblerInsn "add" for 0x401021>, <DisassemblerInsn "cmp" for 0x401025>, <DisassemblerInsn "cmove" for 0x401028>, <DisassemblerInsn "mov" for 0x40102c>, <DisassemblerInsn "mov" for 0x40102e>, <DisassemblerInsn "mov" for 0x401032>, <DisassemblerInsn "movsxd" for 0x401035>, <DisassemblerInsn "shl" for 0x401038>, <DisassemblerInsn "add" for 0x40103c>, <DisassemblerInsn "add" for 0x40103f>, <DisassemblerInsn "mov" for 0x401043>, <DisassemblerInsn "add" for 0x401045>, <DisassemblerInsn "call" for 0x401048>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4010c0>, <DisassemblerInsn "mov" for 0x4010c5>, <DisassemblerInsn "mov" for 0x4010ca>, <DisassemblerInsn "mov" for 0x4010cc>, <DisassemblerInsn "mov" for 0x4010d1>, <DisassemblerInsn "mov" for 0x4010d4>, <DisassemblerInsn "movsxd" for 0x4010d6>, <DisassemblerInsn "shl" for 0x4010d9>, <DisassemblerInsn "add" for 0x4010dd>, <DisassemblerInsn "add" for 0x4010e0>, <DisassemblerInsn "mov" for 0x4010e4>, <DisassemblerInsn "mov" for 0x4010e7>, <DisassemblerInsn "mov" for 0x4010ea>, <DisassemblerInsn "add" for 0x4010f1>, <DisassemblerInsn "mov" for 0x4010f4>, <DisassemblerInsn "add" for 0x4010f7>, <DisassemblerInsn "mov" for 0x4010fa>, <DisassemblerInsn "xor" for 0x4010fc>, <DisassemblerInsn "mov" for 0x4010fe>, <DisassemblerInsn "mov" for 0x401102>, <DisassemblerInsn "add" for 0x401106>, <DisassemblerInsn "ret" for 0x40110a>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401061>, <DisassemblerInsn "mov" for 0x401066>, <DisassemblerInsn "mov" for 0x40106b>, <DisassemblerInsn "mov" for 0x401070>, <DisassemblerInsn "mov" for 0x401075>, <DisassemblerInsn "mov" for 0x40107a>, <DisassemblerInsn "mov" for 0x40107e>, <DisassemblerInsn "mov" for 0x401081>, <DisassemblerInsn "movsxd" for 0x401084>, <DisassemblerInsn "shl" for 0x401087>, <DisassemblerInsn "add" for 0x40108b>, <DisassemblerInsn "add" for 0x40108e>, <DisassemblerInsn "mov" for 0x401092>, <DisassemblerInsn "mov" for 0x401095>, <DisassemblerInsn "mov" for 0x401099>, <DisassemblerInsn "mov" for 0x40109d>, <DisassemblerInsn "mov" for 0x4010a0>, <DisassemblerInsn "add" for 0x4010a4>, <DisassemblerInsn "mov" for 0x4010a8>, <DisassemblerInsn "movsxd" for 0x4010ab>, <DisassemblerInsn "shl" for 0x4010ae>, <DisassemblerInsn "add" for 0x4010b2>, <DisassemblerInsn "add" for 0x4010b5>, <DisassemblerInsn "mov" for 0x4010b9>, <DisassemblerInsn "call" for 0x4010bb>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400fe2>, <DisassemblerInsn "mov" for 0x400fe5>, <DisassemblerInsn "cmp" for 0x400fea>, <DisassemblerInsn "mov" for 0x400fee>, <DisassemblerInsn "jl" for 0x400ff2>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401102>, <DisassemblerInsn "add" for 0x401106>, <DisassemblerInsn "ret" for 0x40110a>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400fb0>, <DisassemblerInsn "mov" for 0x400fb5>, <DisassemblerInsn "mov" for 0x400fb9>, <DisassemblerInsn "mov" for 0x400fbe>, <DisassemblerInsn "add" for 0x400fc1>, <DisassemblerInsn "mov" for 0x400fc5>, <DisassemblerInsn "mov" for 0x400fca>, <DisassemblerInsn "movsxd" for 0x400fce>, <DisassemblerInsn "shl" for 0x400fd1>, <DisassemblerInsn "add" for 0x400fd5>, <DisassemblerInsn "mov" for 0x400fd8>, <DisassemblerInsn "xor" for 0x400fdb>, <DisassemblerInsn "call" for 0x400fdd>]'}], 'cfg_block_detailed_info': [{'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x58>', '<mov~~qword ptr [rsp + 0x30], rsi>', '<mov~~rax, qword ptr [rdi + 0x18]>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x20>', '<mov~~qword ptr [rsp + 0x40], rax>', '<mov~~rcx, qword ptr [rdi + 0x20]>', '<mov~~qword ptr [rsp + 0x48], rcx>', '<mov~~eax, 0xfffffffb>', '<cmp~~dword ptr [rcx + 0x54], 0>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jne~~0x401102>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~eax, 0xfffffff4>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jl~~0x401102>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~rax, rdx>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~ecx, dword ptr [rdx + 0xc]>', '<mov~~dword ptr [rsp + 0x24], ecx>', '<mov~~rax, rdx>', '<add~~rax, 0x58>', '<mov~~qword ptr [rsp + 0x28], rax>', '<mov~~eax, 0xfffffffb>', '<cmp~~ecx, dword ptr [rdx + 0x58]>', '<mov~~dword ptr [rsp + 0x54], eax>', '<ja~~0x401102>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~rsi, qword ptr [rsp + 0x28]>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~r8d, dword ptr [rsi]>', '<add~~r8d, -1>', '<mov~~rsi, rdx>', '<add~~rsi, 0x54>', '<add~~rdx, 0x50>', '<cmp~~ecx, r8d>', '<cmove~~rdx, rsi>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0xc], edx>', '<mov~~rax, qword ptr [rax]>', '<movsxd~~rcx, ecx>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<add~~rax, 0xc>', '<mov~~esi, dword ptr [rax]>', '<add~~esi, 8>', '<call~~0x500050>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x10]>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<mov~~esi, eax>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rdi, qword ptr [rcx]>', '<mov~~ecx, dword ptr [rax]>', '<movsxd~~r8, ecx>', '<shl~~r8, 5>', '<add~~rdi, r8>', '<add~~rdi, 0x18>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~qword ptr [rdx], rdi>', '<mov~~dword ptr [rdx + 0x1c], 0>', '<add~~esi, 8>', '<mov~~dword ptr [rdx + 0x18], esi>', '<add~~ecx, 1>', '<mov~~dword ptr [rax], ecx>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x54], eax>', '<mov~~eax, dword ptr [rsp + 0x54]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x18]>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rsi, qword ptr [rsp + 0x40]>', '<mov~~r8d, dword ptr [rsp + 0xc]>', '<mov~~rdi, qword ptr [rdx + 0x10]>', '<mov~~dword ptr [rdi], r8d>', '<mov~~rdi, qword ptr [rax]>', '<movsxd~~r8, dword ptr [rcx]>', '<shl~~r8, 5>', '<add~~rdi, r8>', '<add~~rdi, 0x10>', '<mov~~r8d, dword ptr [rdi]>', '<mov~~rdi, qword ptr [rdx + 0x10]>', '<mov~~dword ptr [rdi + 4], r8d>', '<mov~~rdi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rdx + 0x10]>', '<add~~rsi, 8>', '<mov~~rax, qword ptr [rax]>', '<movsxd~~rcx, dword ptr [rcx]>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<add~~rax, 0xc>', '<mov~~edx, dword ptr [rax]>', '<call~~0x500020>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~eax, 0xfffffffb>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jl~~0x401102>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~ecx, dword ptr [rsp + 0x24]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rdx, rax>', '<add~~rdx, 0x10>', '<mov~~qword ptr [rsp + 0x10], rdx>', '<mov~~rax, qword ptr [rax + 0x10]>', '<movsxd~~rcx, ecx>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<mov~~rsi, qword ptr [rax]>', '<xor~~edx, edx>', '<call~~0x500000>']}], 'cfg_edge_info': [(0, 1), (1, 2), (6, 8), (0, 2), (8, 9), (5, 6), (8, 2), (9, 11), (1, 3), (3, 5), (5, 2)], 'cdg_edge_info': [(0, 1), (1, 2), (1, 5), (5, 8), (0, 2), (8, 9), (5, 6), (8, 2), (1, 3), (8, 11), (5, 2)], 'ddg_edge_info': [(9, 11), (1, 6), (1, 3), (1, 9), (0, 11), (6, 11), (6, 8), (3, 9), (3, 6), (8, 11), (0, 1), (1, 11), (3, 5), (3, 11), (5, 11), (0, 3), (0, 9), (0, 6), (6, 9)]}]}
{'ape_read_packet': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 14, 'instruction': 'movq\t%rdx, %rax'}, {'instIndex': 15, 'instruction': 'addq\t$12, %rax'}, {'instIndex': 16, 'instruction': 'movq\t%rax, 0x18(%rsp)                  # 8-byte Spill'}, {'instIndex': 17, 'instruction': 'movl\t12(%rdx), %ecx'}, {'instIndex': 18, 'instruction': 'movl\t%ecx, 0x24(%rsp)                  # 4-byte Spill'}, {'instIndex': 19, 'instruction': 'movq\t%rdx, %rax'}, {'instIndex': 20, 'instruction': 'addq\t$0x58, %rax'}, {'instIndex': 21, 'instruction': 'movq\t%rax, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 22, 'instruction': 'movl\t$0xfffffffb, %eax               # imm = 0xFFFFFFFB'}, {'instIndex': 23, 'instruction': 'cmpl\t0x58(%rdx), %ecx'}, {'instIndex': 24, 'instruction': 'movl\t%eax, 0x54(%rsp)                  # 4-byte Spill'}, {'instIndex': 25, 'instruction': 'ja\t.LBB2_5'}, {'instIndex': 29, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 30, 'instruction': 'addq\t$0x10, %rdx'}, {'instIndex': 31, 'instruction': 'movq\t%rdx, 0x10(%rsp)                  # 8-byte Spill'}, {'instIndex': 32, 'instruction': 'movq\t0x10(%rax), %rax'}, {'instIndex': 33, 'instruction': 'movslq\t%ecx, %rcx'}, {'instIndex': 34, 'instruction': 'shlq\t$5, %rcx'}, {'instIndex': 35, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 36, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 37, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 38, 'instruction': 'callq\tavio_seek@PLT'}, {'instIndex': 39, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 40, 'instruction': 'movl\t$0xfffffffb, %eax               # imm = 0xFFFFFFFB'}, {'instIndex': 41, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 42, 'instruction': 'movl\t%eax, 0x54(%rsp)                  # 4-byte Spill'}, {'instIndex': 43, 'instruction': 'jl\t.LBB2_5'}, {'instIndex': 49, 'instruction': 'movl\t(%rcx), %ecx'}, {'instIndex': 50, 'instruction': 'movl\t(%rsi), %r8d'}, {'instIndex': 51, 'instruction': 'addl\t$-1, %r8d'}, {'instIndex': 52, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 53, 'instruction': 'addq\t$0x54, %rsi'}, {'instIndex': 54, 'instruction': 'addq\t$0x50, %rdx'}, {'instIndex': 55, 'instruction': 'cmpl\t%r8d, %ecx'}, {'instIndex': 56, 'instruction': 'cmoveq\t%rsi, %rdx'}]}]}
The case of compiler clang with optimization O2.
Patched source code file: ape.c
Patched function: 1---static int ape_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_after/O2/ape.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_after/O2/ape.s---ape_read_packet---after
function id: 2
function flag: True
There are 119 instructions for function: ape_read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '361', 'end': 368}, 'before': {'start': '361', 'end': 367}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 14, 'instruction': 'movq\t%rdx, %rax'}, {'instIndex': 15, 'instruction': 'addq\t$12, %rax'}, {'instIndex': 16, 'instruction': 'movq\t%rax, 0x18(%rsp)                  # 8-byte Spill'}, {'instIndex': 17, 'instruction': 'movl\t12(%rdx), %ecx'}, {'instIndex': 18, 'instruction': 'movl\t%ecx, 0x24(%rsp)                  # 4-byte Spill'}, {'instIndex': 19, 'instruction': 'movq\t%rdx, %rax'}, {'instIndex': 20, 'instruction': 'addq\t$0x58, %rax'}, {'instIndex': 21, 'instruction': 'movq\t%rax, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 22, 'instruction': 'movl\t$0xfffffffb, %eax               # imm = 0xFFFFFFFB'}, {'instIndex': 23, 'instruction': 'cmpl\t0x58(%rdx), %ecx'}, {'instIndex': 24, 'instruction': 'movl\t%eax, 0x54(%rsp)                  # 4-byte Spill'}, {'instIndex': 25, 'instruction': 'ja\t.LBB2_5'}, {'instIndex': 29, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 30, 'instruction': 'addq\t$0x10, %rdx'}, {'instIndex': 31, 'instruction': 'movq\t%rdx, 0x10(%rsp)                  # 8-byte Spill'}, {'instIndex': 32, 'instruction': 'movq\t0x10(%rax), %rax'}, {'instIndex': 33, 'instruction': 'movslq\t%ecx, %rcx'}, {'instIndex': 34, 'instruction': 'shlq\t$5, %rcx'}, {'instIndex': 35, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 36, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 37, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 38, 'instruction': 'callq\tavio_seek@PLT'}, {'instIndex': 39, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 40, 'instruction': 'movl\t$0xfffffffb, %eax               # imm = 0xFFFFFFFB'}, {'instIndex': 41, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 42, 'instruction': 'movl\t%eax, 0x54(%rsp)                  # 4-byte Spill'}, {'instIndex': 43, 'instruction': 'jl\t.LBB2_5'}, {'instIndex': 49, 'instruction': 'movl\t(%rcx), %ecx'}, {'instIndex': 50, 'instruction': 'movl\t(%rsi), %r8d'}, {'instIndex': 51, 'instruction': 'addl\t$-1, %r8d'}, {'instIndex': 52, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 53, 'instruction': 'addq\t$0x54, %rsi'}, {'instIndex': 54, 'instruction': 'addq\t$0x50, %rdx'}, {'instIndex': 55, 'instruction': 'cmpl\t%r8d, %ecx'}, {'instIndex': 56, 'instruction': 'cmoveq\t%rsi, %rdx'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_after/O2/ape.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_after/O2/ape.o---after
The extraction of function: ape_read_packet
Analyzing the binaries to generate subCFGs from patched function ...
It has 140 nodes and 277 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 119 instructions in binary file.
[4198442, 4198496, 4198546, 4198568]
The execution time of patched subCFG information extraction via angr: 0:00:00.206080
{'ape_read_packet': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4010fd>, <DisassemblerInsn "mov" for 0x4010ff>, <DisassemblerInsn "cmp" for 0x401104>, <DisassemblerInsn "mov" for 0x401107>, <DisassemblerInsn "jl" for 0x40110b>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011b2>, <DisassemblerInsn "add" for 0x4011b6>, <DisassemblerInsn "ret" for 0x4011ba>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401092>, <DisassemblerInsn "mov" for 0x401095>, <DisassemblerInsn "cmp" for 0x40109a>, <DisassemblerInsn "mov" for 0x40109e>, <DisassemblerInsn "jl" for 0x4010a2>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4010a8>, <DisassemblerInsn "mov" for 0x4010ad>, <DisassemblerInsn "mov" for 0x4010b2>, <DisassemblerInsn "mov" for 0x4010b7>, <DisassemblerInsn "mov" for 0x4010bc>, <DisassemblerInsn "mov" for 0x4010c1>, <DisassemblerInsn "mov" for 0x4010c3>, <DisassemblerInsn "add" for 0x4010c6>, <DisassemblerInsn "mov" for 0x4010ca>, <DisassemblerInsn "add" for 0x4010cd>, <DisassemblerInsn "add" for 0x4010d1>, <DisassemblerInsn "cmp" for 0x4010d5>, <DisassemblerInsn "cmove" for 0x4010d8>, <DisassemblerInsn "mov" for 0x4010dc>, <DisassemblerInsn "mov" for 0x4010de>, <DisassemblerInsn "mov" for 0x4010e2>, <DisassemblerInsn "movsxd" for 0x4010e5>, <DisassemblerInsn "shl" for 0x4010e8>, <DisassemblerInsn "add" for 0x4010ec>, <DisassemblerInsn "add" for 0x4010ef>, <DisassemblerInsn "mov" for 0x4010f3>, <DisassemblerInsn "add" for 0x4010f5>, <DisassemblerInsn "call" for 0x4010f8>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401060>, <DisassemblerInsn "mov" for 0x401065>, <DisassemblerInsn "mov" for 0x401069>, <DisassemblerInsn "mov" for 0x40106e>, <DisassemblerInsn "add" for 0x401071>, <DisassemblerInsn "mov" for 0x401075>, <DisassemblerInsn "mov" for 0x40107a>, <DisassemblerInsn "movsxd" for 0x40107e>, <DisassemblerInsn "shl" for 0x401081>, <DisassemblerInsn "add" for 0x401085>, <DisassemblerInsn "mov" for 0x401088>, <DisassemblerInsn "xor" for 0x40108b>, <DisassemblerInsn "call" for 0x40108d>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400ff0>, <DisassemblerInsn "mov" for 0x400ff4>, <DisassemblerInsn "mov" for 0x400ff9>, <DisassemblerInsn "mov" for 0x400ffd>, <DisassemblerInsn "mov" for 0x401002>, <DisassemblerInsn "add" for 0x401005>, <DisassemblerInsn "mov" for 0x401009>, <DisassemblerInsn "mov" for 0x40100e>, <DisassemblerInsn "mov" for 0x401012>, <DisassemblerInsn "mov" for 0x401017>, <DisassemblerInsn "cmp" for 0x40101c>, <DisassemblerInsn "mov" for 0x401020>, <DisassemblerInsn "jne" for 0x401024>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40102a>, <DisassemblerInsn "mov" for 0x40102f>, <DisassemblerInsn "add" for 0x401032>, <DisassemblerInsn "mov" for 0x401036>, <DisassemblerInsn "mov" for 0x40103b>, <DisassemblerInsn "mov" for 0x40103e>, <DisassemblerInsn "mov" for 0x401042>, <DisassemblerInsn "add" for 0x401045>, <DisassemblerInsn "mov" for 0x401049>, <DisassemblerInsn "mov" for 0x40104e>, <DisassemblerInsn "cmp" for 0x401053>, <DisassemblerInsn "mov" for 0x401056>, <DisassemblerInsn "ja" for 0x40105a>]'}], 'cfg_block_detailed_info': [{'block_Idx': 6, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~eax, 0xfffffff4>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jl~~0x4011b2>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~eax, 0xfffffffb>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jl~~0x4011b2>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~rsi, qword ptr [rsp + 0x28]>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~r8d, dword ptr [rsi]>', '<add~~r8d, -1>', '<mov~~rsi, rdx>', '<add~~rsi, 0x54>', '<add~~rdx, 0x50>', '<cmp~~ecx, r8d>', '<cmove~~rdx, rsi>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0xc], edx>', '<mov~~rax, qword ptr [rax]>', '<movsxd~~rcx, ecx>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<add~~rax, 0xc>', '<mov~~esi, dword ptr [rax]>', '<add~~esi, 8>', '<call~~0x500050>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~ecx, dword ptr [rsp + 0x24]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rdx, rax>', '<add~~rdx, 0x10>', '<mov~~qword ptr [rsp + 0x10], rdx>', '<mov~~rax, qword ptr [rax + 0x10]>', '<movsxd~~rcx, ecx>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<mov~~rsi, qword ptr [rax]>', '<xor~~edx, edx>', '<call~~0x500000>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x58>', '<mov~~qword ptr [rsp + 0x30], rsi>', '<mov~~rax, qword ptr [rdi + 0x18]>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x20>', '<mov~~qword ptr [rsp + 0x40], rax>', '<mov~~rcx, qword ptr [rdi + 0x20]>', '<mov~~qword ptr [rsp + 0x48], rcx>', '<mov~~eax, 0xfffffffb>', '<cmp~~dword ptr [rcx + 0x54], 0>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jne~~0x4011b2>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~rax, rdx>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~ecx, dword ptr [rdx + 0xc]>', '<mov~~dword ptr [rsp + 0x24], ecx>', '<mov~~rax, rdx>', '<add~~rax, 0x58>', '<mov~~qword ptr [rsp + 0x28], rax>', '<mov~~eax, 0xfffffffb>', '<cmp~~ecx, dword ptr [rdx + 0x58]>', '<mov~~dword ptr [rsp + 0x54], eax>', '<ja~~0x4011b2>']}], 'cfg_edge_info': [(0, 1), (1, 2), (3, 4), (4, 2), (4, 5), (5, 6), (1, 3)]}]}
{'ape_read_packet': [4198442, 4198496, 4198546, 4198568]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_after/O2/ape.o---after
The extraction of function: ape_read_packet
[4198442, 4198496, 4198546, 4198568]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 12 nodes and 17 edges in CFGEmulated.
It has 12 nodes and 14 edges in CDG.
It has 327 nodes and 382 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4198442, 4198496, 4198546, 4198568]
{4198496, 4198568, 4198442, 4198384, 4198673, 4198834, 4198546, 4198768, 4198653}
[5, 3, 1, 2, 8, 9, 11, 6, 0]
The execution time of patched slicing information extraction via angr: 0:00:01.347429
{'ape_read_packet': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401092>, <DisassemblerInsn "mov" for 0x401095>, <DisassemblerInsn "cmp" for 0x40109a>, <DisassemblerInsn "mov" for 0x40109e>, <DisassemblerInsn "jl" for 0x4010a2>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401060>, <DisassemblerInsn "mov" for 0x401065>, <DisassemblerInsn "mov" for 0x401069>, <DisassemblerInsn "mov" for 0x40106e>, <DisassemblerInsn "add" for 0x401071>, <DisassemblerInsn "mov" for 0x401075>, <DisassemblerInsn "mov" for 0x40107a>, <DisassemblerInsn "movsxd" for 0x40107e>, <DisassemblerInsn "shl" for 0x401081>, <DisassemblerInsn "add" for 0x401085>, <DisassemblerInsn "mov" for 0x401088>, <DisassemblerInsn "xor" for 0x40108b>, <DisassemblerInsn "call" for 0x40108d>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40102a>, <DisassemblerInsn "mov" for 0x40102f>, <DisassemblerInsn "add" for 0x401032>, <DisassemblerInsn "mov" for 0x401036>, <DisassemblerInsn "mov" for 0x40103b>, <DisassemblerInsn "mov" for 0x40103e>, <DisassemblerInsn "mov" for 0x401042>, <DisassemblerInsn "add" for 0x401045>, <DisassemblerInsn "mov" for 0x401049>, <DisassemblerInsn "mov" for 0x40104e>, <DisassemblerInsn "cmp" for 0x401053>, <DisassemblerInsn "mov" for 0x401056>, <DisassemblerInsn "ja" for 0x40105a>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011b2>, <DisassemblerInsn "add" for 0x4011b6>, <DisassemblerInsn "ret" for 0x4011ba>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4010fd>, <DisassemblerInsn "mov" for 0x4010ff>, <DisassemblerInsn "cmp" for 0x401104>, <DisassemblerInsn "mov" for 0x401107>, <DisassemblerInsn "jl" for 0x40110b>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401111>, <DisassemblerInsn "mov" for 0x401116>, <DisassemblerInsn "mov" for 0x40111b>, <DisassemblerInsn "mov" for 0x401120>, <DisassemblerInsn "mov" for 0x401125>, <DisassemblerInsn "mov" for 0x40112a>, <DisassemblerInsn "mov" for 0x40112e>, <DisassemblerInsn "mov" for 0x401131>, <DisassemblerInsn "movsxd" for 0x401134>, <DisassemblerInsn "shl" for 0x401137>, <DisassemblerInsn "add" for 0x40113b>, <DisassemblerInsn "add" for 0x40113e>, <DisassemblerInsn "mov" for 0x401142>, <DisassemblerInsn "mov" for 0x401145>, <DisassemblerInsn "mov" for 0x401149>, <DisassemblerInsn "mov" for 0x40114d>, <DisassemblerInsn "mov" for 0x401150>, <DisassemblerInsn "add" for 0x401154>, <DisassemblerInsn "mov" for 0x401158>, <DisassemblerInsn "movsxd" for 0x40115b>, <DisassemblerInsn "shl" for 0x40115e>, <DisassemblerInsn "add" for 0x401162>, <DisassemblerInsn "add" for 0x401165>, <DisassemblerInsn "mov" for 0x401169>, <DisassemblerInsn "call" for 0x40116b>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401170>, <DisassemblerInsn "mov" for 0x401175>, <DisassemblerInsn "mov" for 0x40117a>, <DisassemblerInsn "mov" for 0x40117c>, <DisassemblerInsn "mov" for 0x401181>, <DisassemblerInsn "mov" for 0x401184>, <DisassemblerInsn "movsxd" for 0x401186>, <DisassemblerInsn "shl" for 0x401189>, <DisassemblerInsn "add" for 0x40118d>, <DisassemblerInsn "add" for 0x401190>, <DisassemblerInsn "mov" for 0x401194>, <DisassemblerInsn "mov" for 0x401197>, <DisassemblerInsn "mov" for 0x40119a>, <DisassemblerInsn "add" for 0x4011a1>, <DisassemblerInsn "mov" for 0x4011a4>, <DisassemblerInsn "add" for 0x4011a7>, <DisassemblerInsn "mov" for 0x4011aa>, <DisassemblerInsn "xor" for 0x4011ac>, <DisassemblerInsn "mov" for 0x4011ae>, <DisassemblerInsn "mov" for 0x4011b2>, <DisassemblerInsn "add" for 0x4011b6>, <DisassemblerInsn "ret" for 0x4011ba>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4010a8>, <DisassemblerInsn "mov" for 0x4010ad>, <DisassemblerInsn "mov" for 0x4010b2>, <DisassemblerInsn "mov" for 0x4010b7>, <DisassemblerInsn "mov" for 0x4010bc>, <DisassemblerInsn "mov" for 0x4010c1>, <DisassemblerInsn "mov" for 0x4010c3>, <DisassemblerInsn "add" for 0x4010c6>, <DisassemblerInsn "mov" for 0x4010ca>, <DisassemblerInsn "add" for 0x4010cd>, <DisassemblerInsn "add" for 0x4010d1>, <DisassemblerInsn "cmp" for 0x4010d5>, <DisassemblerInsn "cmove" for 0x4010d8>, <DisassemblerInsn "mov" for 0x4010dc>, <DisassemblerInsn "mov" for 0x4010de>, <DisassemblerInsn "mov" for 0x4010e2>, <DisassemblerInsn "movsxd" for 0x4010e5>, <DisassemblerInsn "shl" for 0x4010e8>, <DisassemblerInsn "add" for 0x4010ec>, <DisassemblerInsn "add" for 0x4010ef>, <DisassemblerInsn "mov" for 0x4010f3>, <DisassemblerInsn "add" for 0x4010f5>, <DisassemblerInsn "call" for 0x4010f8>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400ff0>, <DisassemblerInsn "mov" for 0x400ff4>, <DisassemblerInsn "mov" for 0x400ff9>, <DisassemblerInsn "mov" for 0x400ffd>, <DisassemblerInsn "mov" for 0x401002>, <DisassemblerInsn "add" for 0x401005>, <DisassemblerInsn "mov" for 0x401009>, <DisassemblerInsn "mov" for 0x40100e>, <DisassemblerInsn "mov" for 0x401012>, <DisassemblerInsn "mov" for 0x401017>, <DisassemblerInsn "cmp" for 0x40101c>, <DisassemblerInsn "mov" for 0x401020>, <DisassemblerInsn "jne" for 0x401024>]'}], 'cfg_block_detailed_info': [{'block_Idx': 5, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~eax, 0xfffffffb>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jl~~0x4011b2>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~ecx, dword ptr [rsp + 0x24]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rdx, rax>', '<add~~rdx, 0x10>', '<mov~~qword ptr [rsp + 0x10], rdx>', '<mov~~rax, qword ptr [rax + 0x10]>', '<movsxd~~rcx, ecx>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<mov~~rsi, qword ptr [rax]>', '<xor~~edx, edx>', '<call~~0x500000>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~rax, rdx>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~ecx, dword ptr [rdx + 0xc]>', '<mov~~dword ptr [rsp + 0x24], ecx>', '<mov~~rax, rdx>', '<add~~rax, 0x58>', '<mov~~qword ptr [rsp + 0x28], rax>', '<mov~~eax, 0xfffffffb>', '<cmp~~ecx, dword ptr [rdx + 0x58]>', '<mov~~dword ptr [rsp + 0x54], eax>', '<ja~~0x4011b2>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~eax, 0xfffffff4>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jl~~0x4011b2>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x18]>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rsi, qword ptr [rsp + 0x40]>', '<mov~~r8d, dword ptr [rsp + 0xc]>', '<mov~~rdi, qword ptr [rdx + 0x10]>', '<mov~~dword ptr [rdi], r8d>', '<mov~~rdi, qword ptr [rax]>', '<movsxd~~r8, dword ptr [rcx]>', '<shl~~r8, 5>', '<add~~rdi, r8>', '<add~~rdi, 0x10>', '<mov~~r8d, dword ptr [rdi]>', '<mov~~rdi, qword ptr [rdx + 0x10]>', '<mov~~dword ptr [rdi + 4], r8d>', '<mov~~rdi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rdx + 0x10]>', '<add~~rsi, 8>', '<mov~~rax, qword ptr [rax]>', '<movsxd~~rcx, dword ptr [rcx]>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<add~~rax, 0xc>', '<mov~~edx, dword ptr [rax]>', '<call~~0x500020>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x10]>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<mov~~esi, eax>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rdi, qword ptr [rcx]>', '<mov~~ecx, dword ptr [rax]>', '<movsxd~~r8, ecx>', '<shl~~r8, 5>', '<add~~rdi, r8>', '<add~~rdi, 0x18>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~qword ptr [rdx], rdi>', '<mov~~dword ptr [rdx + 0x1c], 0>', '<add~~esi, 8>', '<mov~~dword ptr [rdx + 0x18], esi>', '<add~~ecx, 1>', '<mov~~dword ptr [rax], ecx>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x54], eax>', '<mov~~eax, dword ptr [rsp + 0x54]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~rsi, qword ptr [rsp + 0x28]>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~r8d, dword ptr [rsi]>', '<add~~r8d, -1>', '<mov~~rsi, rdx>', '<add~~rsi, 0x54>', '<add~~rdx, 0x50>', '<cmp~~ecx, r8d>', '<cmove~~rdx, rsi>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0xc], edx>', '<mov~~rax, qword ptr [rax]>', '<movsxd~~rcx, ecx>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<add~~rax, 0xc>', '<mov~~esi, dword ptr [rax]>', '<add~~esi, 8>', '<call~~0x500050>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x58>', '<mov~~qword ptr [rsp + 0x30], rsi>', '<mov~~rax, qword ptr [rdi + 0x18]>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x20>', '<mov~~qword ptr [rsp + 0x40], rax>', '<mov~~rcx, qword ptr [rdi + 0x20]>', '<mov~~qword ptr [rsp + 0x48], rcx>', '<mov~~eax, 0xfffffffb>', '<cmp~~dword ptr [rcx + 0x54], 0>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jne~~0x4011b2>']}], 'cfg_edge_info': [(0, 1), (1, 2), (6, 8), (0, 2), (8, 9), (5, 2), (5, 6), (9, 11), (1, 3), (3, 5), (8, 2)], 'cdg_edge_info': [(0, 1), (1, 2), (5, 8), (1, 5), (0, 2), (8, 9), (5, 6), (8, 2), (1, 3), (8, 11), (5, 2)], 'ddg_edge_info': [(9, 11), (1, 6), (1, 3), (1, 9), (0, 11), (6, 11), (6, 8), (3, 9), (3, 6), (8, 11), (0, 1), (1, 11), (3, 5), (3, 11), (5, 11), (0, 3), (0, 9), (0, 6), (6, 9)]}]}
{'ape_read_packet': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 14, 'instruction': 'movq\t%rdx, %rax'}, {'instIndex': 15, 'instruction': 'addq\t$12, %rax'}, {'instIndex': 16, 'instruction': 'movq\t%rax, 0x18(%rsp)                  # 8-byte Spill'}, {'instIndex': 17, 'instruction': 'movl\t12(%rdx), %ecx'}, {'instIndex': 18, 'instruction': 'movl\t%ecx, 0x24(%rsp)                  # 4-byte Spill'}, {'instIndex': 19, 'instruction': 'movq\t%rdx, %rax'}, {'instIndex': 20, 'instruction': 'addq\t$0x58, %rax'}, {'instIndex': 21, 'instruction': 'movq\t%rax, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 22, 'instruction': 'movl\t$0xfffffffb, %eax               # imm = 0xFFFFFFFB'}, {'instIndex': 23, 'instruction': 'cmpl\t0x58(%rdx), %ecx'}, {'instIndex': 24, 'instruction': 'movl\t%eax, 0x54(%rsp)                  # 4-byte Spill'}, {'instIndex': 25, 'instruction': 'ja\t.LBB2_5'}, {'instIndex': 29, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 30, 'instruction': 'addq\t$0x10, %rdx'}, {'instIndex': 31, 'instruction': 'movq\t%rdx, 0x10(%rsp)                  # 8-byte Spill'}, {'instIndex': 32, 'instruction': 'movq\t0x10(%rax), %rax'}, {'instIndex': 33, 'instruction': 'movslq\t%ecx, %rcx'}, {'instIndex': 34, 'instruction': 'shlq\t$5, %rcx'}, {'instIndex': 35, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 36, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 37, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 38, 'instruction': 'callq\tavio_seek@PLT'}, {'instIndex': 39, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 40, 'instruction': 'movl\t$0xfffffffb, %eax               # imm = 0xFFFFFFFB'}, {'instIndex': 41, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 42, 'instruction': 'movl\t%eax, 0x54(%rsp)                  # 4-byte Spill'}, {'instIndex': 43, 'instruction': 'jl\t.LBB2_5'}, {'instIndex': 49, 'instruction': 'movl\t(%rcx), %ecx'}, {'instIndex': 50, 'instruction': 'movl\t(%rsi), %r8d'}, {'instIndex': 51, 'instruction': 'addl\t$-1, %r8d'}, {'instIndex': 52, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 53, 'instruction': 'addq\t$0x54, %rsi'}, {'instIndex': 54, 'instruction': 'addq\t$0x50, %rdx'}, {'instIndex': 55, 'instruction': 'cmpl\t%r8d, %ecx'}, {'instIndex': 56, 'instruction': 'cmoveq\t%rsi, %rdx'}]}]}
The case of compiler clang with optimization O3.
Patched source code file: ape.c
Patched function: 1---static int ape_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_after/O3/ape.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_after/O3/ape.s---ape_read_packet---after
function id: 2
function flag: True
There are 119 instructions for function: ape_read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '361', 'end': 368}, 'before': {'start': '361', 'end': 367}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 14, 'instruction': 'movq\t%rdx, %rax'}, {'instIndex': 15, 'instruction': 'addq\t$12, %rax'}, {'instIndex': 16, 'instruction': 'movq\t%rax, 0x18(%rsp)                  # 8-byte Spill'}, {'instIndex': 17, 'instruction': 'movl\t12(%rdx), %ecx'}, {'instIndex': 18, 'instruction': 'movl\t%ecx, 0x24(%rsp)                  # 4-byte Spill'}, {'instIndex': 19, 'instruction': 'movq\t%rdx, %rax'}, {'instIndex': 20, 'instruction': 'addq\t$0x58, %rax'}, {'instIndex': 21, 'instruction': 'movq\t%rax, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 22, 'instruction': 'movl\t$0xfffffffb, %eax               # imm = 0xFFFFFFFB'}, {'instIndex': 23, 'instruction': 'cmpl\t0x58(%rdx), %ecx'}, {'instIndex': 24, 'instruction': 'movl\t%eax, 0x54(%rsp)                  # 4-byte Spill'}, {'instIndex': 25, 'instruction': 'ja\t.LBB2_5'}, {'instIndex': 29, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 30, 'instruction': 'addq\t$0x10, %rdx'}, {'instIndex': 31, 'instruction': 'movq\t%rdx, 0x10(%rsp)                  # 8-byte Spill'}, {'instIndex': 32, 'instruction': 'movq\t0x10(%rax), %rax'}, {'instIndex': 33, 'instruction': 'movslq\t%ecx, %rcx'}, {'instIndex': 34, 'instruction': 'shlq\t$5, %rcx'}, {'instIndex': 35, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 36, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 37, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 38, 'instruction': 'callq\tavio_seek@PLT'}, {'instIndex': 39, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 40, 'instruction': 'movl\t$0xfffffffb, %eax               # imm = 0xFFFFFFFB'}, {'instIndex': 41, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 42, 'instruction': 'movl\t%eax, 0x54(%rsp)                  # 4-byte Spill'}, {'instIndex': 43, 'instruction': 'jl\t.LBB2_5'}, {'instIndex': 49, 'instruction': 'movl\t(%rcx), %ecx'}, {'instIndex': 50, 'instruction': 'movl\t(%rsi), %r8d'}, {'instIndex': 51, 'instruction': 'addl\t$-1, %r8d'}, {'instIndex': 52, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 53, 'instruction': 'addq\t$0x54, %rsi'}, {'instIndex': 54, 'instruction': 'addq\t$0x50, %rdx'}, {'instIndex': 55, 'instruction': 'cmpl\t%r8d, %ecx'}, {'instIndex': 56, 'instruction': 'cmoveq\t%rsi, %rdx'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_after/O3/ape.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_after/O3/ape.o---after
The extraction of function: ape_read_packet
Analyzing the binaries to generate subCFGs from patched function ...
It has 140 nodes and 277 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 119 instructions in binary file.
[4198442, 4198496, 4198546, 4198568]
The execution time of patched subCFG information extraction via angr: 0:00:00.202293
{'ape_read_packet': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4010fd>, <DisassemblerInsn "mov" for 0x4010ff>, <DisassemblerInsn "cmp" for 0x401104>, <DisassemblerInsn "mov" for 0x401107>, <DisassemblerInsn "jl" for 0x40110b>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011b2>, <DisassemblerInsn "add" for 0x4011b6>, <DisassemblerInsn "ret" for 0x4011ba>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401092>, <DisassemblerInsn "mov" for 0x401095>, <DisassemblerInsn "cmp" for 0x40109a>, <DisassemblerInsn "mov" for 0x40109e>, <DisassemblerInsn "jl" for 0x4010a2>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4010a8>, <DisassemblerInsn "mov" for 0x4010ad>, <DisassemblerInsn "mov" for 0x4010b2>, <DisassemblerInsn "mov" for 0x4010b7>, <DisassemblerInsn "mov" for 0x4010bc>, <DisassemblerInsn "mov" for 0x4010c1>, <DisassemblerInsn "mov" for 0x4010c3>, <DisassemblerInsn "add" for 0x4010c6>, <DisassemblerInsn "mov" for 0x4010ca>, <DisassemblerInsn "add" for 0x4010cd>, <DisassemblerInsn "add" for 0x4010d1>, <DisassemblerInsn "cmp" for 0x4010d5>, <DisassemblerInsn "cmove" for 0x4010d8>, <DisassemblerInsn "mov" for 0x4010dc>, <DisassemblerInsn "mov" for 0x4010de>, <DisassemblerInsn "mov" for 0x4010e2>, <DisassemblerInsn "movsxd" for 0x4010e5>, <DisassemblerInsn "shl" for 0x4010e8>, <DisassemblerInsn "add" for 0x4010ec>, <DisassemblerInsn "add" for 0x4010ef>, <DisassemblerInsn "mov" for 0x4010f3>, <DisassemblerInsn "add" for 0x4010f5>, <DisassemblerInsn "call" for 0x4010f8>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401060>, <DisassemblerInsn "mov" for 0x401065>, <DisassemblerInsn "mov" for 0x401069>, <DisassemblerInsn "mov" for 0x40106e>, <DisassemblerInsn "add" for 0x401071>, <DisassemblerInsn "mov" for 0x401075>, <DisassemblerInsn "mov" for 0x40107a>, <DisassemblerInsn "movsxd" for 0x40107e>, <DisassemblerInsn "shl" for 0x401081>, <DisassemblerInsn "add" for 0x401085>, <DisassemblerInsn "mov" for 0x401088>, <DisassemblerInsn "xor" for 0x40108b>, <DisassemblerInsn "call" for 0x40108d>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400ff0>, <DisassemblerInsn "mov" for 0x400ff4>, <DisassemblerInsn "mov" for 0x400ff9>, <DisassemblerInsn "mov" for 0x400ffd>, <DisassemblerInsn "mov" for 0x401002>, <DisassemblerInsn "add" for 0x401005>, <DisassemblerInsn "mov" for 0x401009>, <DisassemblerInsn "mov" for 0x40100e>, <DisassemblerInsn "mov" for 0x401012>, <DisassemblerInsn "mov" for 0x401017>, <DisassemblerInsn "cmp" for 0x40101c>, <DisassemblerInsn "mov" for 0x401020>, <DisassemblerInsn "jne" for 0x401024>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40102a>, <DisassemblerInsn "mov" for 0x40102f>, <DisassemblerInsn "add" for 0x401032>, <DisassemblerInsn "mov" for 0x401036>, <DisassemblerInsn "mov" for 0x40103b>, <DisassemblerInsn "mov" for 0x40103e>, <DisassemblerInsn "mov" for 0x401042>, <DisassemblerInsn "add" for 0x401045>, <DisassemblerInsn "mov" for 0x401049>, <DisassemblerInsn "mov" for 0x40104e>, <DisassemblerInsn "cmp" for 0x401053>, <DisassemblerInsn "mov" for 0x401056>, <DisassemblerInsn "ja" for 0x40105a>]'}], 'cfg_block_detailed_info': [{'block_Idx': 6, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~eax, 0xfffffff4>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jl~~0x4011b2>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~eax, 0xfffffffb>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jl~~0x4011b2>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~rsi, qword ptr [rsp + 0x28]>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~r8d, dword ptr [rsi]>', '<add~~r8d, -1>', '<mov~~rsi, rdx>', '<add~~rsi, 0x54>', '<add~~rdx, 0x50>', '<cmp~~ecx, r8d>', '<cmove~~rdx, rsi>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0xc], edx>', '<mov~~rax, qword ptr [rax]>', '<movsxd~~rcx, ecx>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<add~~rax, 0xc>', '<mov~~esi, dword ptr [rax]>', '<add~~esi, 8>', '<call~~0x500050>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~ecx, dword ptr [rsp + 0x24]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rdx, rax>', '<add~~rdx, 0x10>', '<mov~~qword ptr [rsp + 0x10], rdx>', '<mov~~rax, qword ptr [rax + 0x10]>', '<movsxd~~rcx, ecx>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<mov~~rsi, qword ptr [rax]>', '<xor~~edx, edx>', '<call~~0x500000>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x58>', '<mov~~qword ptr [rsp + 0x30], rsi>', '<mov~~rax, qword ptr [rdi + 0x18]>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x20>', '<mov~~qword ptr [rsp + 0x40], rax>', '<mov~~rcx, qword ptr [rdi + 0x20]>', '<mov~~qword ptr [rsp + 0x48], rcx>', '<mov~~eax, 0xfffffffb>', '<cmp~~dword ptr [rcx + 0x54], 0>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jne~~0x4011b2>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~rax, rdx>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~ecx, dword ptr [rdx + 0xc]>', '<mov~~dword ptr [rsp + 0x24], ecx>', '<mov~~rax, rdx>', '<add~~rax, 0x58>', '<mov~~qword ptr [rsp + 0x28], rax>', '<mov~~eax, 0xfffffffb>', '<cmp~~ecx, dword ptr [rdx + 0x58]>', '<mov~~dword ptr [rsp + 0x54], eax>', '<ja~~0x4011b2>']}], 'cfg_edge_info': [(0, 1), (1, 2), (3, 4), (4, 2), (4, 5), (5, 6), (1, 3)]}]}
{'ape_read_packet': [4198442, 4198496, 4198546, 4198568]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_after/O3/ape.o---after
The extraction of function: ape_read_packet
[4198442, 4198496, 4198546, 4198568]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 12 nodes and 17 edges in CFGEmulated.
It has 12 nodes and 14 edges in CDG.
It has 327 nodes and 382 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4198442, 4198496, 4198546, 4198568]
{4198496, 4198568, 4198442, 4198384, 4198673, 4198834, 4198546, 4198768, 4198653}
[5, 3, 1, 2, 8, 9, 11, 6, 0]
The execution time of patched slicing information extraction via angr: 0:00:01.362157
{'ape_read_packet': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401092>, <DisassemblerInsn "mov" for 0x401095>, <DisassemblerInsn "cmp" for 0x40109a>, <DisassemblerInsn "mov" for 0x40109e>, <DisassemblerInsn "jl" for 0x4010a2>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401060>, <DisassemblerInsn "mov" for 0x401065>, <DisassemblerInsn "mov" for 0x401069>, <DisassemblerInsn "mov" for 0x40106e>, <DisassemblerInsn "add" for 0x401071>, <DisassemblerInsn "mov" for 0x401075>, <DisassemblerInsn "mov" for 0x40107a>, <DisassemblerInsn "movsxd" for 0x40107e>, <DisassemblerInsn "shl" for 0x401081>, <DisassemblerInsn "add" for 0x401085>, <DisassemblerInsn "mov" for 0x401088>, <DisassemblerInsn "xor" for 0x40108b>, <DisassemblerInsn "call" for 0x40108d>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40102a>, <DisassemblerInsn "mov" for 0x40102f>, <DisassemblerInsn "add" for 0x401032>, <DisassemblerInsn "mov" for 0x401036>, <DisassemblerInsn "mov" for 0x40103b>, <DisassemblerInsn "mov" for 0x40103e>, <DisassemblerInsn "mov" for 0x401042>, <DisassemblerInsn "add" for 0x401045>, <DisassemblerInsn "mov" for 0x401049>, <DisassemblerInsn "mov" for 0x40104e>, <DisassemblerInsn "cmp" for 0x401053>, <DisassemblerInsn "mov" for 0x401056>, <DisassemblerInsn "ja" for 0x40105a>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4011b2>, <DisassemblerInsn "add" for 0x4011b6>, <DisassemblerInsn "ret" for 0x4011ba>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4010fd>, <DisassemblerInsn "mov" for 0x4010ff>, <DisassemblerInsn "cmp" for 0x401104>, <DisassemblerInsn "mov" for 0x401107>, <DisassemblerInsn "jl" for 0x40110b>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401111>, <DisassemblerInsn "mov" for 0x401116>, <DisassemblerInsn "mov" for 0x40111b>, <DisassemblerInsn "mov" for 0x401120>, <DisassemblerInsn "mov" for 0x401125>, <DisassemblerInsn "mov" for 0x40112a>, <DisassemblerInsn "mov" for 0x40112e>, <DisassemblerInsn "mov" for 0x401131>, <DisassemblerInsn "movsxd" for 0x401134>, <DisassemblerInsn "shl" for 0x401137>, <DisassemblerInsn "add" for 0x40113b>, <DisassemblerInsn "add" for 0x40113e>, <DisassemblerInsn "mov" for 0x401142>, <DisassemblerInsn "mov" for 0x401145>, <DisassemblerInsn "mov" for 0x401149>, <DisassemblerInsn "mov" for 0x40114d>, <DisassemblerInsn "mov" for 0x401150>, <DisassemblerInsn "add" for 0x401154>, <DisassemblerInsn "mov" for 0x401158>, <DisassemblerInsn "movsxd" for 0x40115b>, <DisassemblerInsn "shl" for 0x40115e>, <DisassemblerInsn "add" for 0x401162>, <DisassemblerInsn "add" for 0x401165>, <DisassemblerInsn "mov" for 0x401169>, <DisassemblerInsn "call" for 0x40116b>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401170>, <DisassemblerInsn "mov" for 0x401175>, <DisassemblerInsn "mov" for 0x40117a>, <DisassemblerInsn "mov" for 0x40117c>, <DisassemblerInsn "mov" for 0x401181>, <DisassemblerInsn "mov" for 0x401184>, <DisassemblerInsn "movsxd" for 0x401186>, <DisassemblerInsn "shl" for 0x401189>, <DisassemblerInsn "add" for 0x40118d>, <DisassemblerInsn "add" for 0x401190>, <DisassemblerInsn "mov" for 0x401194>, <DisassemblerInsn "mov" for 0x401197>, <DisassemblerInsn "mov" for 0x40119a>, <DisassemblerInsn "add" for 0x4011a1>, <DisassemblerInsn "mov" for 0x4011a4>, <DisassemblerInsn "add" for 0x4011a7>, <DisassemblerInsn "mov" for 0x4011aa>, <DisassemblerInsn "xor" for 0x4011ac>, <DisassemblerInsn "mov" for 0x4011ae>, <DisassemblerInsn "mov" for 0x4011b2>, <DisassemblerInsn "add" for 0x4011b6>, <DisassemblerInsn "ret" for 0x4011ba>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4010a8>, <DisassemblerInsn "mov" for 0x4010ad>, <DisassemblerInsn "mov" for 0x4010b2>, <DisassemblerInsn "mov" for 0x4010b7>, <DisassemblerInsn "mov" for 0x4010bc>, <DisassemblerInsn "mov" for 0x4010c1>, <DisassemblerInsn "mov" for 0x4010c3>, <DisassemblerInsn "add" for 0x4010c6>, <DisassemblerInsn "mov" for 0x4010ca>, <DisassemblerInsn "add" for 0x4010cd>, <DisassemblerInsn "add" for 0x4010d1>, <DisassemblerInsn "cmp" for 0x4010d5>, <DisassemblerInsn "cmove" for 0x4010d8>, <DisassemblerInsn "mov" for 0x4010dc>, <DisassemblerInsn "mov" for 0x4010de>, <DisassemblerInsn "mov" for 0x4010e2>, <DisassemblerInsn "movsxd" for 0x4010e5>, <DisassemblerInsn "shl" for 0x4010e8>, <DisassemblerInsn "add" for 0x4010ec>, <DisassemblerInsn "add" for 0x4010ef>, <DisassemblerInsn "mov" for 0x4010f3>, <DisassemblerInsn "add" for 0x4010f5>, <DisassemblerInsn "call" for 0x4010f8>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400ff0>, <DisassemblerInsn "mov" for 0x400ff4>, <DisassemblerInsn "mov" for 0x400ff9>, <DisassemblerInsn "mov" for 0x400ffd>, <DisassemblerInsn "mov" for 0x401002>, <DisassemblerInsn "add" for 0x401005>, <DisassemblerInsn "mov" for 0x401009>, <DisassemblerInsn "mov" for 0x40100e>, <DisassemblerInsn "mov" for 0x401012>, <DisassemblerInsn "mov" for 0x401017>, <DisassemblerInsn "cmp" for 0x40101c>, <DisassemblerInsn "mov" for 0x401020>, <DisassemblerInsn "jne" for 0x401024>]'}], 'cfg_block_detailed_info': [{'block_Idx': 5, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~eax, 0xfffffffb>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jl~~0x4011b2>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~ecx, dword ptr [rsp + 0x24]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rdx, rax>', '<add~~rdx, 0x10>', '<mov~~qword ptr [rsp + 0x10], rdx>', '<mov~~rax, qword ptr [rax + 0x10]>', '<movsxd~~rcx, ecx>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<mov~~rsi, qword ptr [rax]>', '<xor~~edx, edx>', '<call~~0x500000>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~rax, rdx>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~ecx, dword ptr [rdx + 0xc]>', '<mov~~dword ptr [rsp + 0x24], ecx>', '<mov~~rax, rdx>', '<add~~rax, 0x58>', '<mov~~qword ptr [rsp + 0x28], rax>', '<mov~~eax, 0xfffffffb>', '<cmp~~ecx, dword ptr [rdx + 0x58]>', '<mov~~dword ptr [rsp + 0x54], eax>', '<ja~~0x4011b2>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~eax, 0xfffffff4>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jl~~0x4011b2>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x18]>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rsi, qword ptr [rsp + 0x40]>', '<mov~~r8d, dword ptr [rsp + 0xc]>', '<mov~~rdi, qword ptr [rdx + 0x10]>', '<mov~~dword ptr [rdi], r8d>', '<mov~~rdi, qword ptr [rax]>', '<movsxd~~r8, dword ptr [rcx]>', '<shl~~r8, 5>', '<add~~rdi, r8>', '<add~~rdi, 0x10>', '<mov~~r8d, dword ptr [rdi]>', '<mov~~rdi, qword ptr [rdx + 0x10]>', '<mov~~dword ptr [rdi + 4], r8d>', '<mov~~rdi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rdx + 0x10]>', '<add~~rsi, 8>', '<mov~~rax, qword ptr [rax]>', '<movsxd~~rcx, dword ptr [rcx]>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<add~~rax, 0xc>', '<mov~~edx, dword ptr [rax]>', '<call~~0x500020>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x10]>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<mov~~esi, eax>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rdi, qword ptr [rcx]>', '<mov~~ecx, dword ptr [rax]>', '<movsxd~~r8, ecx>', '<shl~~r8, 5>', '<add~~rdi, r8>', '<add~~rdi, 0x18>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~qword ptr [rdx], rdi>', '<mov~~dword ptr [rdx + 0x1c], 0>', '<add~~esi, 8>', '<mov~~dword ptr [rdx + 0x18], esi>', '<add~~ecx, 1>', '<mov~~dword ptr [rax], ecx>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x54], eax>', '<mov~~eax, dword ptr [rsp + 0x54]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~rsi, qword ptr [rsp + 0x28]>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~r8d, dword ptr [rsi]>', '<add~~r8d, -1>', '<mov~~rsi, rdx>', '<add~~rsi, 0x54>', '<add~~rdx, 0x50>', '<cmp~~ecx, r8d>', '<cmove~~rdx, rsi>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0xc], edx>', '<mov~~rax, qword ptr [rax]>', '<movsxd~~rcx, ecx>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<add~~rax, 0xc>', '<mov~~esi, dword ptr [rax]>', '<add~~esi, 8>', '<call~~0x500050>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x58>', '<mov~~qword ptr [rsp + 0x30], rsi>', '<mov~~rax, qword ptr [rdi + 0x18]>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x20>', '<mov~~qword ptr [rsp + 0x40], rax>', '<mov~~rcx, qword ptr [rdi + 0x20]>', '<mov~~qword ptr [rsp + 0x48], rcx>', '<mov~~eax, 0xfffffffb>', '<cmp~~dword ptr [rcx + 0x54], 0>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jne~~0x4011b2>']}], 'cfg_edge_info': [(0, 1), (1, 2), (6, 8), (0, 2), (8, 9), (5, 2), (5, 6), (9, 11), (1, 3), (3, 5), (8, 2)], 'cdg_edge_info': [(0, 1), (1, 2), (5, 8), (1, 5), (0, 2), (8, 9), (5, 6), (8, 2), (1, 3), (8, 11), (5, 2)], 'ddg_edge_info': [(9, 11), (1, 6), (1, 3), (1, 9), (0, 11), (6, 11), (6, 8), (3, 9), (3, 6), (8, 11), (0, 1), (1, 11), (3, 5), (3, 11), (5, 11), (0, 3), (0, 9), (0, 6), (6, 9)]}]}
{'ape_read_packet': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 14, 'instruction': 'movq\t%rdx, %rax'}, {'instIndex': 15, 'instruction': 'addq\t$12, %rax'}, {'instIndex': 16, 'instruction': 'movq\t%rax, 0x18(%rsp)                  # 8-byte Spill'}, {'instIndex': 17, 'instruction': 'movl\t12(%rdx), %ecx'}, {'instIndex': 18, 'instruction': 'movl\t%ecx, 0x24(%rsp)                  # 4-byte Spill'}, {'instIndex': 19, 'instruction': 'movq\t%rdx, %rax'}, {'instIndex': 20, 'instruction': 'addq\t$0x58, %rax'}, {'instIndex': 21, 'instruction': 'movq\t%rax, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 22, 'instruction': 'movl\t$0xfffffffb, %eax               # imm = 0xFFFFFFFB'}, {'instIndex': 23, 'instruction': 'cmpl\t0x58(%rdx), %ecx'}, {'instIndex': 24, 'instruction': 'movl\t%eax, 0x54(%rsp)                  # 4-byte Spill'}, {'instIndex': 25, 'instruction': 'ja\t.LBB2_5'}, {'instIndex': 29, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 30, 'instruction': 'addq\t$0x10, %rdx'}, {'instIndex': 31, 'instruction': 'movq\t%rdx, 0x10(%rsp)                  # 8-byte Spill'}, {'instIndex': 32, 'instruction': 'movq\t0x10(%rax), %rax'}, {'instIndex': 33, 'instruction': 'movslq\t%ecx, %rcx'}, {'instIndex': 34, 'instruction': 'shlq\t$5, %rcx'}, {'instIndex': 35, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 36, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 37, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 38, 'instruction': 'callq\tavio_seek@PLT'}, {'instIndex': 39, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 40, 'instruction': 'movl\t$0xfffffffb, %eax               # imm = 0xFFFFFFFB'}, {'instIndex': 41, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 42, 'instruction': 'movl\t%eax, 0x54(%rsp)                  # 4-byte Spill'}, {'instIndex': 43, 'instruction': 'jl\t.LBB2_5'}, {'instIndex': 49, 'instruction': 'movl\t(%rcx), %ecx'}, {'instIndex': 50, 'instruction': 'movl\t(%rsi), %r8d'}, {'instIndex': 51, 'instruction': 'addl\t$-1, %r8d'}, {'instIndex': 52, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 53, 'instruction': 'addq\t$0x54, %rsi'}, {'instIndex': 54, 'instruction': 'addq\t$0x50, %rdx'}, {'instIndex': 55, 'instruction': 'cmpl\t%r8d, %ecx'}, {'instIndex': 56, 'instruction': 'cmoveq\t%rsi, %rdx'}]}]}
The case of compiler clang with optimization Os.
Patched source code file: ape.c
Patched function: 1---static int ape_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_after/Os/ape.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_after/Os/ape.s---ape_read_packet---after
function id: 2
function flag: True
There are 119 instructions for function: ape_read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '361', 'end': 368}, 'before': {'start': '361', 'end': 367}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 14, 'instruction': 'movq\t%rdx, %rax'}, {'instIndex': 15, 'instruction': 'addq\t$12, %rax'}, {'instIndex': 16, 'instruction': 'movq\t%rax, 0x18(%rsp)                  # 8-byte Spill'}, {'instIndex': 17, 'instruction': 'movl\t12(%rdx), %ecx'}, {'instIndex': 18, 'instruction': 'movl\t%ecx, 0x24(%rsp)                  # 4-byte Spill'}, {'instIndex': 19, 'instruction': 'movq\t%rdx, %rax'}, {'instIndex': 20, 'instruction': 'addq\t$0x58, %rax'}, {'instIndex': 21, 'instruction': 'movq\t%rax, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 22, 'instruction': 'movl\t$0xfffffffb, %eax               # imm = 0xFFFFFFFB'}, {'instIndex': 23, 'instruction': 'cmpl\t0x58(%rdx), %ecx'}, {'instIndex': 24, 'instruction': 'movl\t%eax, 0x54(%rsp)                  # 4-byte Spill'}, {'instIndex': 25, 'instruction': 'ja\t.LBB2_5'}, {'instIndex': 29, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 30, 'instruction': 'addq\t$0x10, %rdx'}, {'instIndex': 31, 'instruction': 'movq\t%rdx, 0x10(%rsp)                  # 8-byte Spill'}, {'instIndex': 32, 'instruction': 'movq\t0x10(%rax), %rax'}, {'instIndex': 33, 'instruction': 'movslq\t%ecx, %rcx'}, {'instIndex': 34, 'instruction': 'shlq\t$5, %rcx'}, {'instIndex': 35, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 36, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 37, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 38, 'instruction': 'callq\tavio_seek@PLT'}, {'instIndex': 39, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 40, 'instruction': 'movl\t$0xfffffffb, %eax               # imm = 0xFFFFFFFB'}, {'instIndex': 41, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 42, 'instruction': 'movl\t%eax, 0x54(%rsp)                  # 4-byte Spill'}, {'instIndex': 43, 'instruction': 'jl\t.LBB2_5'}, {'instIndex': 49, 'instruction': 'movl\t(%rcx), %ecx'}, {'instIndex': 50, 'instruction': 'movl\t(%rsi), %r8d'}, {'instIndex': 51, 'instruction': 'addl\t$-1, %r8d'}, {'instIndex': 52, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 53, 'instruction': 'addq\t$0x54, %rsi'}, {'instIndex': 54, 'instruction': 'addq\t$0x50, %rdx'}, {'instIndex': 55, 'instruction': 'cmpl\t%r8d, %ecx'}, {'instIndex': 56, 'instruction': 'cmoveq\t%rsi, %rdx'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_after/Os/ape.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_after/Os/ape.o---after
The extraction of function: ape_read_packet
Analyzing the binaries to generate subCFGs from patched function ...
It has 136 nodes and 273 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 119 instructions in binary file.
[4198416, 4198470, 4198520, 4198542]
The execution time of patched subCFG information extraction via angr: 0:00:00.198057
{'ape_read_packet': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40108e>, <DisassemblerInsn "mov" for 0x401093>, <DisassemblerInsn "mov" for 0x401098>, <DisassemblerInsn "mov" for 0x40109d>, <DisassemblerInsn "mov" for 0x4010a2>, <DisassemblerInsn "mov" for 0x4010a7>, <DisassemblerInsn "mov" for 0x4010a9>, <DisassemblerInsn "add" for 0x4010ac>, <DisassemblerInsn "mov" for 0x4010b0>, <DisassemblerInsn "add" for 0x4010b3>, <DisassemblerInsn "add" for 0x4010b7>, <DisassemblerInsn "cmp" for 0x4010bb>, <DisassemblerInsn "cmove" for 0x4010be>, <DisassemblerInsn "mov" for 0x4010c2>, <DisassemblerInsn "mov" for 0x4010c4>, <DisassemblerInsn "mov" for 0x4010c8>, <DisassemblerInsn "movsxd" for 0x4010cb>, <DisassemblerInsn "shl" for 0x4010ce>, <DisassemblerInsn "add" for 0x4010d2>, <DisassemblerInsn "add" for 0x4010d5>, <DisassemblerInsn "mov" for 0x4010d9>, <DisassemblerInsn "add" for 0x4010db>, <DisassemblerInsn "call" for 0x4010de>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4010e3>, <DisassemblerInsn "mov" for 0x4010e5>, <DisassemblerInsn "cmp" for 0x4010ea>, <DisassemblerInsn "mov" for 0x4010ed>, <DisassemblerInsn "jl" for 0x4010f1>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401078>, <DisassemblerInsn "mov" for 0x40107b>, <DisassemblerInsn "cmp" for 0x401080>, <DisassemblerInsn "mov" for 0x401084>, <DisassemblerInsn "jl" for 0x401088>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401198>, <DisassemblerInsn "add" for 0x40119c>, <DisassemblerInsn "ret" for 0x4011a0>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400fd6>, <DisassemblerInsn "mov" for 0x400fda>, <DisassemblerInsn "mov" for 0x400fdf>, <DisassemblerInsn "mov" for 0x400fe3>, <DisassemblerInsn "mov" for 0x400fe8>, <DisassemblerInsn "add" for 0x400feb>, <DisassemblerInsn "mov" for 0x400fef>, <DisassemblerInsn "mov" for 0x400ff4>, <DisassemblerInsn "mov" for 0x400ff8>, <DisassemblerInsn "mov" for 0x400ffd>, <DisassemblerInsn "cmp" for 0x401002>, <DisassemblerInsn "mov" for 0x401006>, <DisassemblerInsn "jne" for 0x40100a>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401046>, <DisassemblerInsn "mov" for 0x40104b>, <DisassemblerInsn "mov" for 0x40104f>, <DisassemblerInsn "mov" for 0x401054>, <DisassemblerInsn "add" for 0x401057>, <DisassemblerInsn "mov" for 0x40105b>, <DisassemblerInsn "mov" for 0x401060>, <DisassemblerInsn "movsxd" for 0x401064>, <DisassemblerInsn "shl" for 0x401067>, <DisassemblerInsn "add" for 0x40106b>, <DisassemblerInsn "mov" for 0x40106e>, <DisassemblerInsn "xor" for 0x401071>, <DisassemblerInsn "call" for 0x401073>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401010>, <DisassemblerInsn "mov" for 0x401015>, <DisassemblerInsn "add" for 0x401018>, <DisassemblerInsn "mov" for 0x40101c>, <DisassemblerInsn "mov" for 0x401021>, <DisassemblerInsn "mov" for 0x401024>, <DisassemblerInsn "mov" for 0x401028>, <DisassemblerInsn "add" for 0x40102b>, <DisassemblerInsn "mov" for 0x40102f>, <DisassemblerInsn "mov" for 0x401034>, <DisassemblerInsn "cmp" for 0x401039>, <DisassemblerInsn "mov" for 0x40103c>, <DisassemblerInsn "ja" for 0x401040>]'}], 'cfg_block_detailed_info': [{'block_Idx': 5, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~rsi, qword ptr [rsp + 0x28]>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~r8d, dword ptr [rsi]>', '<add~~r8d, -1>', '<mov~~rsi, rdx>', '<add~~rsi, 0x54>', '<add~~rdx, 0x50>', '<cmp~~ecx, r8d>', '<cmove~~rdx, rsi>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0xc], edx>', '<mov~~rax, qword ptr [rax]>', '<movsxd~~rcx, ecx>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<add~~rax, 0xc>', '<mov~~esi, dword ptr [rax]>', '<add~~esi, 8>', '<call~~0x500050>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~eax, 0xfffffff4>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jl~~0x401198>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~eax, 0xfffffffb>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jl~~0x401198>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x58>', '<mov~~qword ptr [rsp + 0x30], rsi>', '<mov~~rax, qword ptr [rdi + 0x18]>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x20>', '<mov~~qword ptr [rsp + 0x40], rax>', '<mov~~rcx, qword ptr [rdi + 0x20]>', '<mov~~qword ptr [rsp + 0x48], rcx>', '<mov~~eax, 0xfffffffb>', '<cmp~~dword ptr [rcx + 0x54], 0>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jne~~0x401198>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~ecx, dword ptr [rsp + 0x24]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rdx, rax>', '<add~~rdx, 0x10>', '<mov~~qword ptr [rsp + 0x10], rdx>', '<mov~~rax, qword ptr [rax + 0x10]>', '<movsxd~~rcx, ecx>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<mov~~rsi, qword ptr [rax]>', '<xor~~edx, edx>', '<call~~0x500000>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~rax, rdx>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~ecx, dword ptr [rdx + 0xc]>', '<mov~~dword ptr [rsp + 0x24], ecx>', '<mov~~rax, rdx>', '<add~~rax, 0x58>', '<mov~~qword ptr [rsp + 0x28], rax>', '<mov~~eax, 0xfffffffb>', '<cmp~~ecx, dword ptr [rdx + 0x58]>', '<mov~~dword ptr [rsp + 0x54], eax>', '<ja~~0x401198>']}], 'cfg_edge_info': [(0, 1), (1, 2), (3, 4), (4, 2), (4, 5), (5, 6), (1, 3)]}]}
{'ape_read_packet': [4198416, 4198470, 4198520, 4198542]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_after/Os/ape.o---after
The extraction of function: ape_read_packet
[4198416, 4198470, 4198520, 4198542]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 12 nodes and 17 edges in CFGEmulated.
It has 12 nodes and 14 edges in CDG.
It has 327 nodes and 382 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4198416, 4198470, 4198520, 4198542]
{4198627, 4198808, 4198470, 4198542, 4198416, 4198358, 4198647, 4198520, 4198742}
[8, 2, 0, 3, 6, 1, 11, 5, 9]
The execution time of patched slicing information extraction via angr: 0:00:01.356219
{'ape_read_packet': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4010e3>, <DisassemblerInsn "mov" for 0x4010e5>, <DisassemblerInsn "cmp" for 0x4010ea>, <DisassemblerInsn "mov" for 0x4010ed>, <DisassemblerInsn "jl" for 0x4010f1>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401198>, <DisassemblerInsn "add" for 0x40119c>, <DisassemblerInsn "ret" for 0x4011a0>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400fd6>, <DisassemblerInsn "mov" for 0x400fda>, <DisassemblerInsn "mov" for 0x400fdf>, <DisassemblerInsn "mov" for 0x400fe3>, <DisassemblerInsn "mov" for 0x400fe8>, <DisassemblerInsn "add" for 0x400feb>, <DisassemblerInsn "mov" for 0x400fef>, <DisassemblerInsn "mov" for 0x400ff4>, <DisassemblerInsn "mov" for 0x400ff8>, <DisassemblerInsn "mov" for 0x400ffd>, <DisassemblerInsn "cmp" for 0x401002>, <DisassemblerInsn "mov" for 0x401006>, <DisassemblerInsn "jne" for 0x40100a>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401046>, <DisassemblerInsn "mov" for 0x40104b>, <DisassemblerInsn "mov" for 0x40104f>, <DisassemblerInsn "mov" for 0x401054>, <DisassemblerInsn "add" for 0x401057>, <DisassemblerInsn "mov" for 0x40105b>, <DisassemblerInsn "mov" for 0x401060>, <DisassemblerInsn "movsxd" for 0x401064>, <DisassemblerInsn "shl" for 0x401067>, <DisassemblerInsn "add" for 0x40106b>, <DisassemblerInsn "mov" for 0x40106e>, <DisassemblerInsn "xor" for 0x401071>, <DisassemblerInsn "call" for 0x401073>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40108e>, <DisassemblerInsn "mov" for 0x401093>, <DisassemblerInsn "mov" for 0x401098>, <DisassemblerInsn "mov" for 0x40109d>, <DisassemblerInsn "mov" for 0x4010a2>, <DisassemblerInsn "mov" for 0x4010a7>, <DisassemblerInsn "mov" for 0x4010a9>, <DisassemblerInsn "add" for 0x4010ac>, <DisassemblerInsn "mov" for 0x4010b0>, <DisassemblerInsn "add" for 0x4010b3>, <DisassemblerInsn "add" for 0x4010b7>, <DisassemblerInsn "cmp" for 0x4010bb>, <DisassemblerInsn "cmove" for 0x4010be>, <DisassemblerInsn "mov" for 0x4010c2>, <DisassemblerInsn "mov" for 0x4010c4>, <DisassemblerInsn "mov" for 0x4010c8>, <DisassemblerInsn "movsxd" for 0x4010cb>, <DisassemblerInsn "shl" for 0x4010ce>, <DisassemblerInsn "add" for 0x4010d2>, <DisassemblerInsn "add" for 0x4010d5>, <DisassemblerInsn "mov" for 0x4010d9>, <DisassemblerInsn "add" for 0x4010db>, <DisassemblerInsn "call" for 0x4010de>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401010>, <DisassemblerInsn "mov" for 0x401015>, <DisassemblerInsn "add" for 0x401018>, <DisassemblerInsn "mov" for 0x40101c>, <DisassemblerInsn "mov" for 0x401021>, <DisassemblerInsn "mov" for 0x401024>, <DisassemblerInsn "mov" for 0x401028>, <DisassemblerInsn "add" for 0x40102b>, <DisassemblerInsn "mov" for 0x40102f>, <DisassemblerInsn "mov" for 0x401034>, <DisassemblerInsn "cmp" for 0x401039>, <DisassemblerInsn "mov" for 0x40103c>, <DisassemblerInsn "ja" for 0x401040>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401156>, <DisassemblerInsn "mov" for 0x40115b>, <DisassemblerInsn "mov" for 0x401160>, <DisassemblerInsn "mov" for 0x401162>, <DisassemblerInsn "mov" for 0x401167>, <DisassemblerInsn "mov" for 0x40116a>, <DisassemblerInsn "movsxd" for 0x40116c>, <DisassemblerInsn "shl" for 0x40116f>, <DisassemblerInsn "add" for 0x401173>, <DisassemblerInsn "add" for 0x401176>, <DisassemblerInsn "mov" for 0x40117a>, <DisassemblerInsn "mov" for 0x40117d>, <DisassemblerInsn "mov" for 0x401180>, <DisassemblerInsn "add" for 0x401187>, <DisassemblerInsn "mov" for 0x40118a>, <DisassemblerInsn "add" for 0x40118d>, <DisassemblerInsn "mov" for 0x401190>, <DisassemblerInsn "xor" for 0x401192>, <DisassemblerInsn "mov" for 0x401194>, <DisassemblerInsn "mov" for 0x401198>, <DisassemblerInsn "add" for 0x40119c>, <DisassemblerInsn "ret" for 0x4011a0>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401078>, <DisassemblerInsn "mov" for 0x40107b>, <DisassemblerInsn "cmp" for 0x401080>, <DisassemblerInsn "mov" for 0x401084>, <DisassemblerInsn "jl" for 0x401088>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4010f7>, <DisassemblerInsn "mov" for 0x4010fc>, <DisassemblerInsn "mov" for 0x401101>, <DisassemblerInsn "mov" for 0x401106>, <DisassemblerInsn "mov" for 0x40110b>, <DisassemblerInsn "mov" for 0x401110>, <DisassemblerInsn "mov" for 0x401114>, <DisassemblerInsn "mov" for 0x401117>, <DisassemblerInsn "movsxd" for 0x40111a>, <DisassemblerInsn "shl" for 0x40111d>, <DisassemblerInsn "add" for 0x401121>, <DisassemblerInsn "add" for 0x401124>, <DisassemblerInsn "mov" for 0x401128>, <DisassemblerInsn "mov" for 0x40112b>, <DisassemblerInsn "mov" for 0x40112f>, <DisassemblerInsn "mov" for 0x401133>, <DisassemblerInsn "mov" for 0x401136>, <DisassemblerInsn "add" for 0x40113a>, <DisassemblerInsn "mov" for 0x40113e>, <DisassemblerInsn "movsxd" for 0x401141>, <DisassemblerInsn "shl" for 0x401144>, <DisassemblerInsn "add" for 0x401148>, <DisassemblerInsn "add" for 0x40114b>, <DisassemblerInsn "mov" for 0x40114f>, <DisassemblerInsn "call" for 0x401151>]'}], 'cfg_block_detailed_info': [{'block_Idx': 8, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~eax, 0xfffffff4>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jl~~0x401198>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x58>', '<mov~~qword ptr [rsp + 0x30], rsi>', '<mov~~rax, qword ptr [rdi + 0x18]>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x20>', '<mov~~qword ptr [rsp + 0x40], rax>', '<mov~~rcx, qword ptr [rdi + 0x20]>', '<mov~~qword ptr [rsp + 0x48], rcx>', '<mov~~eax, 0xfffffffb>', '<cmp~~dword ptr [rcx + 0x54], 0>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jne~~0x401198>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~ecx, dword ptr [rsp + 0x24]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rdx, rax>', '<add~~rdx, 0x10>', '<mov~~qword ptr [rsp + 0x10], rdx>', '<mov~~rax, qword ptr [rax + 0x10]>', '<movsxd~~rcx, ecx>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<mov~~rsi, qword ptr [rax]>', '<xor~~edx, edx>', '<call~~0x500000>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~rsi, qword ptr [rsp + 0x28]>', '<mov~~rcx, qword ptr [rsp + 0x18]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~r8d, dword ptr [rsi]>', '<add~~r8d, -1>', '<mov~~rsi, rdx>', '<add~~rsi, 0x54>', '<add~~rdx, 0x50>', '<cmp~~ecx, r8d>', '<cmove~~rdx, rsi>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0xc], edx>', '<mov~~rax, qword ptr [rax]>', '<movsxd~~rcx, ecx>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<add~~rax, 0xc>', '<mov~~esi, dword ptr [rax]>', '<add~~esi, 8>', '<call~~0x500050>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~rax, rdx>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~ecx, dword ptr [rdx + 0xc]>', '<mov~~dword ptr [rsp + 0x24], ecx>', '<mov~~rax, rdx>', '<add~~rax, 0x58>', '<mov~~qword ptr [rsp + 0x28], rax>', '<mov~~eax, 0xfffffffb>', '<cmp~~ecx, dword ptr [rdx + 0x58]>', '<mov~~dword ptr [rsp + 0x54], eax>', '<ja~~0x401198>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x10]>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<mov~~esi, eax>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rdi, qword ptr [rcx]>', '<mov~~ecx, dword ptr [rax]>', '<movsxd~~r8, ecx>', '<shl~~r8, 5>', '<add~~rdi, r8>', '<add~~rdi, 0x18>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~qword ptr [rdx], rdi>', '<mov~~dword ptr [rdx + 0x1c], 0>', '<add~~esi, 8>', '<mov~~dword ptr [rdx + 0x18], esi>', '<add~~ecx, 1>', '<mov~~dword ptr [rax], ecx>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x54], eax>', '<mov~~eax, dword ptr [rsp + 0x54]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~eax, 0xfffffffb>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jl~~0x401198>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x18]>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rsi, qword ptr [rsp + 0x40]>', '<mov~~r8d, dword ptr [rsp + 0xc]>', '<mov~~rdi, qword ptr [rdx + 0x10]>', '<mov~~dword ptr [rdi], r8d>', '<mov~~rdi, qword ptr [rax]>', '<movsxd~~r8, dword ptr [rcx]>', '<shl~~r8, 5>', '<add~~rdi, r8>', '<add~~rdi, 0x10>', '<mov~~r8d, dword ptr [rdi]>', '<mov~~rdi, qword ptr [rdx + 0x10]>', '<mov~~dword ptr [rdi + 4], r8d>', '<mov~~rdi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rdx + 0x10]>', '<add~~rsi, 8>', '<mov~~rax, qword ptr [rax]>', '<movsxd~~rcx, dword ptr [rcx]>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<add~~rax, 0xc>', '<mov~~edx, dword ptr [rax]>', '<call~~0x500020>']}], 'cfg_edge_info': [(0, 1), (1, 2), (6, 8), (9, 11), (0, 2), (8, 9), (5, 6), (8, 2), (1, 3), (3, 5), (5, 2)], 'cdg_edge_info': [(0, 1), (1, 2), (5, 8), (1, 5), (0, 2), (8, 9), (5, 6), (8, 2), (1, 3), (8, 11), (5, 2)], 'ddg_edge_info': [(9, 11), (1, 6), (1, 3), (1, 9), (0, 11), (6, 11), (6, 8), (3, 9), (3, 6), (8, 11), (0, 1), (1, 11), (3, 5), (3, 11), (5, 11), (0, 3), (0, 9), (0, 6), (6, 9)]}]}
{'ape_read_packet': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 14, 'instruction': 'movq\t%rdx, %rax'}, {'instIndex': 15, 'instruction': 'addq\t$12, %rax'}, {'instIndex': 16, 'instruction': 'movq\t%rax, 0x18(%rsp)                  # 8-byte Spill'}, {'instIndex': 17, 'instruction': 'movl\t12(%rdx), %ecx'}, {'instIndex': 18, 'instruction': 'movl\t%ecx, 0x24(%rsp)                  # 4-byte Spill'}, {'instIndex': 19, 'instruction': 'movq\t%rdx, %rax'}, {'instIndex': 20, 'instruction': 'addq\t$0x58, %rax'}, {'instIndex': 21, 'instruction': 'movq\t%rax, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 22, 'instruction': 'movl\t$0xfffffffb, %eax               # imm = 0xFFFFFFFB'}, {'instIndex': 23, 'instruction': 'cmpl\t0x58(%rdx), %ecx'}, {'instIndex': 24, 'instruction': 'movl\t%eax, 0x54(%rsp)                  # 4-byte Spill'}, {'instIndex': 25, 'instruction': 'ja\t.LBB2_5'}, {'instIndex': 29, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 30, 'instruction': 'addq\t$0x10, %rdx'}, {'instIndex': 31, 'instruction': 'movq\t%rdx, 0x10(%rsp)                  # 8-byte Spill'}, {'instIndex': 32, 'instruction': 'movq\t0x10(%rax), %rax'}, {'instIndex': 33, 'instruction': 'movslq\t%ecx, %rcx'}, {'instIndex': 34, 'instruction': 'shlq\t$5, %rcx'}, {'instIndex': 35, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 36, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 37, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 38, 'instruction': 'callq\tavio_seek@PLT'}, {'instIndex': 39, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 40, 'instruction': 'movl\t$0xfffffffb, %eax               # imm = 0xFFFFFFFB'}, {'instIndex': 41, 'instruction': 'cmpq\t$0, %rcx'}, {'instIndex': 42, 'instruction': 'movl\t%eax, 0x54(%rsp)                  # 4-byte Spill'}, {'instIndex': 43, 'instruction': 'jl\t.LBB2_5'}, {'instIndex': 49, 'instruction': 'movl\t(%rcx), %ecx'}, {'instIndex': 50, 'instruction': 'movl\t(%rsi), %r8d'}, {'instIndex': 51, 'instruction': 'addl\t$-1, %r8d'}, {'instIndex': 52, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 53, 'instruction': 'addq\t$0x54, %rsi'}, {'instIndex': 54, 'instruction': 'addq\t$0x50, %rdx'}, {'instIndex': 55, 'instruction': 'cmpl\t%r8d, %ecx'}, {'instIndex': 56, 'instruction': 'cmoveq\t%rsi, %rdx'}]}]}
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac---a/libavformat/ape.c
The case of compiler gcc with optimization no.
Patched source code file: ape.c
Patched function: 1---static int ape_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/gcc_before/no/ape_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/gcc_before/no/ape_gcc.s---ape_read_packet---before
function id: 28
function flag: True
There are 133 instructions for function: ape_read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '361', 'end': 368}, 'before': {'start': '361', 'end': 367}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 15, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 16, 'instruction': 'movl\t12(%rax), %eax'}, {'instIndex': 17, 'instruction': 'movl\t%eax, %edx'}, {'instIndex': 18, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 19, 'instruction': 'movl\t0x58(%rax), %eax'}, {'instIndex': 20, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 21, 'instruction': 'jbe\t.L50'}, {'instIndex': 22, 'instruction': 'movl\t$-5, %eax'}, {'instIndex': 23, 'instruction': 'jmp\t.L49'}, {'instIndex': 24, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'movq\t0x10(%rax), %rdx'}, {'instIndex': 26, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 27, 'instruction': 'movl\t12(%rax), %eax'}, {'instIndex': 28, 'instruction': 'cltq'}, {'instIndex': 29, 'instruction': 'salq\t$5, %rax'}, {'instIndex': 30, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 31, 'instruction': 'movq\t(%rax), %rcx'}, {'instIndex': 32, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 33, 'instruction': 'movq\t0x20(%rax), %rax'}, {'instIndex': 34, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 35, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 36, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 37, 'instruction': 'call\tavio_seek@PLT'}, {'instIndex': 38, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 39, 'instruction': 'movl\t12(%rax), %eax'}, {'instIndex': 40, 'instruction': 'movl\t%eax, %edx'}, {'instIndex': 41, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 42, 'instruction': 'movl\t0x58(%rax), %eax'}, {'instIndex': 43, 'instruction': 'subl\t$1, %eax'}, {'instIndex': 44, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 45, 'instruction': 'jne\t.L51'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/gcc_before/no/ape.o
Binary file does not exist.
{'ape_read_packet': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 15, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 16, 'instruction': 'movl\t12(%rax), %eax'}, {'instIndex': 17, 'instruction': 'movl\t%eax, %edx'}, {'instIndex': 18, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 19, 'instruction': 'movl\t0x58(%rax), %eax'}, {'instIndex': 20, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 21, 'instruction': 'jbe\t.L50'}, {'instIndex': 22, 'instruction': 'movl\t$-5, %eax'}, {'instIndex': 23, 'instruction': 'jmp\t.L49'}, {'instIndex': 24, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'movq\t0x10(%rax), %rdx'}, {'instIndex': 26, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 27, 'instruction': 'movl\t12(%rax), %eax'}, {'instIndex': 28, 'instruction': 'cltq'}, {'instIndex': 29, 'instruction': 'salq\t$5, %rax'}, {'instIndex': 30, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 31, 'instruction': 'movq\t(%rax), %rcx'}, {'instIndex': 32, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 33, 'instruction': 'movq\t0x20(%rax), %rax'}, {'instIndex': 34, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 35, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 36, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 37, 'instruction': 'call\tavio_seek@PLT'}, {'instIndex': 38, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 39, 'instruction': 'movl\t12(%rax), %eax'}, {'instIndex': 40, 'instruction': 'movl\t%eax, %edx'}, {'instIndex': 41, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 42, 'instruction': 'movl\t0x58(%rax), %eax'}, {'instIndex': 43, 'instruction': 'subl\t$1, %eax'}, {'instIndex': 44, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 45, 'instruction': 'jne\t.L51'}]}]}
The case of compiler gcc with optimization O0.
Patched source code file: ape.c
Patched function: 1---static int ape_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/gcc_before/O0/ape_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/gcc_before/O0/ape_gcc.s---ape_read_packet---before
function id: 28
function flag: True
There are 133 instructions for function: ape_read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '361', 'end': 368}, 'before': {'start': '361', 'end': 367}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 15, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 16, 'instruction': 'movl\t12(%rax), %eax'}, {'instIndex': 17, 'instruction': 'movl\t%eax, %edx'}, {'instIndex': 18, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 19, 'instruction': 'movl\t0x58(%rax), %eax'}, {'instIndex': 20, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 21, 'instruction': 'jbe\t.L50'}, {'instIndex': 22, 'instruction': 'movl\t$-5, %eax'}, {'instIndex': 23, 'instruction': 'jmp\t.L49'}, {'instIndex': 24, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'movq\t0x10(%rax), %rdx'}, {'instIndex': 26, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 27, 'instruction': 'movl\t12(%rax), %eax'}, {'instIndex': 28, 'instruction': 'cltq'}, {'instIndex': 29, 'instruction': 'salq\t$5, %rax'}, {'instIndex': 30, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 31, 'instruction': 'movq\t(%rax), %rcx'}, {'instIndex': 32, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 33, 'instruction': 'movq\t0x20(%rax), %rax'}, {'instIndex': 34, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 35, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 36, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 37, 'instruction': 'call\tavio_seek@PLT'}, {'instIndex': 38, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 39, 'instruction': 'movl\t12(%rax), %eax'}, {'instIndex': 40, 'instruction': 'movl\t%eax, %edx'}, {'instIndex': 41, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 42, 'instruction': 'movl\t0x58(%rax), %eax'}, {'instIndex': 43, 'instruction': 'subl\t$1, %eax'}, {'instIndex': 44, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 45, 'instruction': 'jne\t.L51'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/gcc_before/O0/ape.o
Binary file does not exist.
{'ape_read_packet': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 15, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 16, 'instruction': 'movl\t12(%rax), %eax'}, {'instIndex': 17, 'instruction': 'movl\t%eax, %edx'}, {'instIndex': 18, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 19, 'instruction': 'movl\t0x58(%rax), %eax'}, {'instIndex': 20, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 21, 'instruction': 'jbe\t.L50'}, {'instIndex': 22, 'instruction': 'movl\t$-5, %eax'}, {'instIndex': 23, 'instruction': 'jmp\t.L49'}, {'instIndex': 24, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 25, 'instruction': 'movq\t0x10(%rax), %rdx'}, {'instIndex': 26, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 27, 'instruction': 'movl\t12(%rax), %eax'}, {'instIndex': 28, 'instruction': 'cltq'}, {'instIndex': 29, 'instruction': 'salq\t$5, %rax'}, {'instIndex': 30, 'instruction': 'addq\t%rdx, %rax'}, {'instIndex': 31, 'instruction': 'movq\t(%rax), %rcx'}, {'instIndex': 32, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 33, 'instruction': 'movq\t0x20(%rax), %rax'}, {'instIndex': 34, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 35, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 36, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 37, 'instruction': 'call\tavio_seek@PLT'}, {'instIndex': 38, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 39, 'instruction': 'movl\t12(%rax), %eax'}, {'instIndex': 40, 'instruction': 'movl\t%eax, %edx'}, {'instIndex': 41, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 42, 'instruction': 'movl\t0x58(%rax), %eax'}, {'instIndex': 43, 'instruction': 'subl\t$1, %eax'}, {'instIndex': 44, 'instruction': 'cmpl\t%eax, %edx'}, {'instIndex': 45, 'instruction': 'jne\t.L51'}]}]}
The case of compiler gcc with optimization O1.
Patched source code file: ape.c
Patched function: 1---static int ape_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/gcc_before/O1/ape_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/gcc_before/O1/ape_gcc.s---ape_read_packet---before
function id: 24
function flag: True
There are 566 instructions for function: ape_read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '361', 'end': 368}, 'before': {'start': '361', 'end': 367}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 13, 'instruction': 'movl\t12(%rbx), %eax'}, {'instIndex': 14, 'instruction': 'cmpl\t0x58(%rbx), %eax'}, {'instIndex': 15, 'instruction': 'ja\t.L20'}, {'instIndex': 16, 'instruction': 'cltq'}, {'instIndex': 17, 'instruction': 'salq\t$5, %rax'}, {'instIndex': 18, 'instruction': 'addq\t0x10(%rbx), %rax'}, {'instIndex': 19, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 20, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 21, 'instruction': 'call\tavio_seek@PLT'}, {'instIndex': 22, 'instruction': 'movl\t12(%rbx), %eax'}, {'instIndex': 23, 'instruction': 'movl\t0x58(%rbx), %ecx'}, {'instIndex': 24, 'instruction': 'leal\t-1(%rcx), %edx'}, {'instIndex': 25, 'instruction': 'cmpl\t%edx, %eax'}, {'instIndex': 26, 'instruction': 'je\t.L23'}, {'instIndex': 74, 'instruction': 'movl\t$-5, %r13d'}, {'instIndex': 75, 'instruction': 'jmp\t.L15'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/gcc_before/O1/ape.o
Binary file does not exist.
{'ape_read_packet': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 13, 'instruction': 'movl\t12(%rbx), %eax'}, {'instIndex': 14, 'instruction': 'cmpl\t0x58(%rbx), %eax'}, {'instIndex': 15, 'instruction': 'ja\t.L20'}, {'instIndex': 16, 'instruction': 'cltq'}, {'instIndex': 17, 'instruction': 'salq\t$5, %rax'}, {'instIndex': 18, 'instruction': 'addq\t0x10(%rbx), %rax'}, {'instIndex': 19, 'instruction': 'movl\t$0, %edx'}, {'instIndex': 20, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 21, 'instruction': 'call\tavio_seek@PLT'}, {'instIndex': 22, 'instruction': 'movl\t12(%rbx), %eax'}, {'instIndex': 23, 'instruction': 'movl\t0x58(%rbx), %ecx'}, {'instIndex': 24, 'instruction': 'leal\t-1(%rcx), %edx'}, {'instIndex': 25, 'instruction': 'cmpl\t%edx, %eax'}, {'instIndex': 26, 'instruction': 'je\t.L23'}, {'instIndex': 74, 'instruction': 'movl\t$-5, %r13d'}, {'instIndex': 75, 'instruction': 'jmp\t.L15'}]}]}
The case of compiler gcc with optimization O2.
Patched source code file: ape.c
Patched function: 1---static int ape_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/gcc_before/O2/ape_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/gcc_before/O2/ape_gcc.s---ape_read_packet---before
function id: 20
function flag: True
There are 535 instructions for function: ape_read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '361', 'end': 368}, 'before': {'start': '361', 'end': 367}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 12, 'instruction': 'movslq\t12(%rbx), %rax'}, {'instIndex': 13, 'instruction': 'cmpl\t0x58(%rbx), %eax'}, {'instIndex': 14, 'instruction': 'ja\t.L21'}, {'instIndex': 15, 'instruction': 'salq\t$5, %rax'}, {'instIndex': 16, 'instruction': 'addq\t0x10(%rbx), %rax'}, {'instIndex': 17, 'instruction': 'movq\t%rsi, %rbp'}, {'instIndex': 18, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 19, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 20, 'instruction': 'call\tavio_seek@PLT'}, {'instIndex': 21, 'instruction': 'movl\t0x58(%rbx), %ecx'}, {'instIndex': 22, 'instruction': 'movslq\t12(%rbx), %rax'}, {'instIndex': 23, 'instruction': 'leal\t-1(%rcx), %edx'}, {'instIndex': 24, 'instruction': 'cmpl\t%edx, %eax'}, {'instIndex': 25, 'instruction': 'je\t.L24'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/gcc_before/O2/ape.o
Binary file does not exist.
{'ape_read_packet': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 12, 'instruction': 'movslq\t12(%rbx), %rax'}, {'instIndex': 13, 'instruction': 'cmpl\t0x58(%rbx), %eax'}, {'instIndex': 14, 'instruction': 'ja\t.L21'}, {'instIndex': 15, 'instruction': 'salq\t$5, %rax'}, {'instIndex': 16, 'instruction': 'addq\t0x10(%rbx), %rax'}, {'instIndex': 17, 'instruction': 'movq\t%rsi, %rbp'}, {'instIndex': 18, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 19, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 20, 'instruction': 'call\tavio_seek@PLT'}, {'instIndex': 21, 'instruction': 'movl\t0x58(%rbx), %ecx'}, {'instIndex': 22, 'instruction': 'movslq\t12(%rbx), %rax'}, {'instIndex': 23, 'instruction': 'leal\t-1(%rcx), %edx'}, {'instIndex': 24, 'instruction': 'cmpl\t%edx, %eax'}, {'instIndex': 25, 'instruction': 'je\t.L24'}]}]}
The case of compiler gcc with optimization O3.
Patched source code file: ape.c
Patched function: 1---static int ape_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/gcc_before/O3/ape_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/gcc_before/O3/ape_gcc.s---ape_read_packet---before
function id: 20
function flag: True
There are 653 instructions for function: ape_read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '361', 'end': 368}, 'before': {'start': '361', 'end': 367}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 12, 'instruction': 'movslq\t12(%rbx), %rax'}, {'instIndex': 13, 'instruction': 'cmpl\t0x58(%rbx), %eax'}, {'instIndex': 14, 'instruction': 'ja\t.L20'}, {'instIndex': 15, 'instruction': 'salq\t$5, %rax'}, {'instIndex': 16, 'instruction': 'addq\t0x10(%rbx), %rax'}, {'instIndex': 17, 'instruction': 'movq\t%rsi, %rbp'}, {'instIndex': 18, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 19, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 20, 'instruction': 'call\tavio_seek@PLT'}, {'instIndex': 21, 'instruction': 'movl\t0x58(%rbx), %ecx'}, {'instIndex': 22, 'instruction': 'movslq\t12(%rbx), %rax'}, {'instIndex': 25, 'instruction': 'leal\t-1(%rcx), %edx'}, {'instIndex': 26, 'instruction': 'cmpl\t%edx, %eax'}, {'instIndex': 27, 'instruction': 'cmovne\t0x50(%rbx), %r14d'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/gcc_before/O3/ape.o
Binary file does not exist.
{'ape_read_packet': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 12, 'instruction': 'movslq\t12(%rbx), %rax'}, {'instIndex': 13, 'instruction': 'cmpl\t0x58(%rbx), %eax'}, {'instIndex': 14, 'instruction': 'ja\t.L20'}, {'instIndex': 15, 'instruction': 'salq\t$5, %rax'}, {'instIndex': 16, 'instruction': 'addq\t0x10(%rbx), %rax'}, {'instIndex': 17, 'instruction': 'movq\t%rsi, %rbp'}, {'instIndex': 18, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 19, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 20, 'instruction': 'call\tavio_seek@PLT'}, {'instIndex': 21, 'instruction': 'movl\t0x58(%rbx), %ecx'}, {'instIndex': 22, 'instruction': 'movslq\t12(%rbx), %rax'}, {'instIndex': 25, 'instruction': 'leal\t-1(%rcx), %edx'}, {'instIndex': 26, 'instruction': 'cmpl\t%edx, %eax'}, {'instIndex': 27, 'instruction': 'cmovne\t0x50(%rbx), %r14d'}]}]}
The case of compiler gcc with optimization Os.
Patched source code file: ape.c
Patched function: 1---static int ape_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/gcc_before/Os/ape_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/gcc_before/Os/ape_gcc.s---ape_read_packet---before
function id: 21
function flag: True
There are 493 instructions for function: ape_read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '361', 'end': 368}, 'before': {'start': '361', 'end': 367}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 12, 'instruction': 'movslq\t12(%rbx), %rax'}, {'instIndex': 13, 'instruction': 'cmpl\t0x58(%rbx), %eax'}, {'instIndex': 14, 'instruction': 'ja\t.L20'}, {'instIndex': 15, 'instruction': 'salq\t$5, %rax'}, {'instIndex': 16, 'instruction': 'addq\t0x10(%rbx), %rax'}, {'instIndex': 17, 'instruction': 'movq\t%rsi, %rbp'}, {'instIndex': 18, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 19, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 20, 'instruction': 'call\tavio_seek@PLT'}, {'instIndex': 21, 'instruction': 'movl\t0x58(%rbx), %ecx'}, {'instIndex': 22, 'instruction': 'movslq\t12(%rbx), %rax'}, {'instIndex': 23, 'instruction': 'leal\t-1(%rcx), %edx'}, {'instIndex': 24, 'instruction': 'cmpl\t%edx, %eax'}, {'instIndex': 25, 'instruction': 'jne\t.L17'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/gcc_before/Os/ape.o
Binary file does not exist.
{'ape_read_packet': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 12, 'instruction': 'movslq\t12(%rbx), %rax'}, {'instIndex': 13, 'instruction': 'cmpl\t0x58(%rbx), %eax'}, {'instIndex': 14, 'instruction': 'ja\t.L20'}, {'instIndex': 15, 'instruction': 'salq\t$5, %rax'}, {'instIndex': 16, 'instruction': 'addq\t0x10(%rbx), %rax'}, {'instIndex': 17, 'instruction': 'movq\t%rsi, %rbp'}, {'instIndex': 18, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 19, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 20, 'instruction': 'call\tavio_seek@PLT'}, {'instIndex': 21, 'instruction': 'movl\t0x58(%rbx), %ecx'}, {'instIndex': 22, 'instruction': 'movslq\t12(%rbx), %rax'}, {'instIndex': 23, 'instruction': 'leal\t-1(%rcx), %edx'}, {'instIndex': 24, 'instruction': 'cmpl\t%edx, %eax'}, {'instIndex': 25, 'instruction': 'jne\t.L17'}]}]}
The case of compiler clang with optimization no.
Patched source code file: ape.c
Patched function: 1---static int ape_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_before/no/ape.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_before/no/ape.s---ape_read_packet---before
function id: 2
function flag: True
There are 111 instructions for function: ape_read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '361', 'end': 368}, 'before': {'start': '361', 'end': 367}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 13, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 14, 'instruction': 'movl\t12(%rax), %eax'}, {'instIndex': 15, 'instruction': 'movq\t0x10(%rsp), %rcx'}, {'instIndex': 16, 'instruction': 'cmpl\t0x58(%rcx), %eax'}, {'instIndex': 17, 'instruction': 'jbe\t.LBB2_4'}, {'instIndex': 18, 'instruction': 'movl\t$-5, 0x34(%rsp)'}, {'instIndex': 19, 'instruction': 'jmp\t.LBB2_10'}, {'instIndex': 20, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 21, 'instruction': 'movq\t0x20(%rax), %rdi'}, {'instIndex': 22, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 23, 'instruction': 'movq\t0x10(%rax), %rax'}, {'instIndex': 24, 'instruction': 'movq\t0x10(%rsp), %rcx'}, {'instIndex': 25, 'instruction': 'movslq\t12(%rcx), %rcx'}, {'instIndex': 26, 'instruction': 'shlq\t$5, %rcx'}, {'instIndex': 27, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 28, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 29, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 30, 'instruction': 'callq\tavio_seek@PLT'}, {'instIndex': 31, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 32, 'instruction': 'movl\t12(%rax), %eax'}, {'instIndex': 33, 'instruction': 'movq\t0x10(%rsp), %rcx'}, {'instIndex': 34, 'instruction': 'movl\t0x58(%rcx), %ecx'}, {'instIndex': 35, 'instruction': 'subl\t$1, %ecx'}, {'instIndex': 36, 'instruction': 'cmpl\t%ecx, %eax'}, {'instIndex': 37, 'instruction': 'jne\t.LBB2_6'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_before/no/ape.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_before/no/ape.o---before
The extraction of function: ape_read_packet
Analyzing the binaries to generate subCFGs from patched function ...
It has 163 nodes and 297 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 111 instructions in binary file.
[4197712, 4197730, 4197743, 4197787]
The execution time of patched subCFG information extraction via angr: 0:00:00.209539
{'ape_read_packet': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d6f>, <DisassemblerInsn "mov" for 0x400d74>, <DisassemblerInsn "mov" for 0x400d78>, <DisassemblerInsn "mov" for 0x400d7d>, <DisassemblerInsn "mov" for 0x400d81>, <DisassemblerInsn "movsxd" for 0x400d86>, <DisassemblerInsn "shl" for 0x400d8a>, <DisassemblerInsn "add" for 0x400d8e>, <DisassemblerInsn "mov" for 0x400d91>, <DisassemblerInsn "xor" for 0x400d94>, <DisassemblerInsn "call" for 0x400d96>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ed4>, <DisassemblerInsn "add" for 0x400ed8>, <DisassemblerInsn "ret" for 0x400edc>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400db2>, <DisassemblerInsn "mov" for 0x400db7>, <DisassemblerInsn "mov" for 0x400dba>, <DisassemblerInsn "jmp" for 0x400dbe>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d9b>, <DisassemblerInsn "mov" for 0x400da0>, <DisassemblerInsn "mov" for 0x400da3>, <DisassemblerInsn "mov" for 0x400da8>, <DisassemblerInsn "sub" for 0x400dab>, <DisassemblerInsn "cmp" for 0x400dae>, <DisassemblerInsn "jne" for 0x400db0>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dc0>, <DisassemblerInsn "mov" for 0x400dc5>, <DisassemblerInsn "mov" for 0x400dc8>, <DisassemblerInsn "mov" for 0x400dcc>, <DisassemblerInsn "mov" for 0x400dd1>, <DisassemblerInsn "mov" for 0x400dd6>, <DisassemblerInsn "mov" for 0x400dda>, <DisassemblerInsn "movsxd" for 0x400ddf>, <DisassemblerInsn "shl" for 0x400de3>, <DisassemblerInsn "add" for 0x400de7>, <DisassemblerInsn "mov" for 0x400dea>, <DisassemblerInsn "add" for 0x400ded>, <DisassemblerInsn "call" for 0x400df1>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d50>, <DisassemblerInsn "mov" for 0x400d55>, <DisassemblerInsn "mov" for 0x400d58>, <DisassemblerInsn "cmp" for 0x400d5d>, <DisassemblerInsn "jbe" for 0x400d60>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d62>, <DisassemblerInsn "jmp" for 0x400d6a>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400d10>, <DisassemblerInsn "mov" for 0x400d14>, <DisassemblerInsn "mov" for 0x400d19>, <DisassemblerInsn "mov" for 0x400d1e>, <DisassemblerInsn "mov" for 0x400d23>, <DisassemblerInsn "mov" for 0x400d27>, <DisassemblerInsn "mov" for 0x400d2c>, <DisassemblerInsn "mov" for 0x400d34>, <DisassemblerInsn "mov" for 0x400d39>, <DisassemblerInsn "cmp" for 0x400d3d>, <DisassemblerInsn "je" for 0x400d41>]'}], 'cfg_block_detailed_info': [{'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rdi, qword ptr [rax + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<movsxd~~rcx, dword ptr [rcx + 0xc]>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<mov~~rsi, qword ptr [rax]>', '<xor~~edx, edx>', '<call~~0x500000>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~eax, dword ptr [rax + 0x54]>', '<mov~~dword ptr [rsp + 0x18], eax>', '<jmp~~0x400dcc>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~eax, dword ptr [rax + 0xc]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<mov~~ecx, dword ptr [rcx + 0x58]>', '<sub~~ecx, 1>', '<cmp~~eax, ecx>', '<jne~~0x400dc0>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~eax, dword ptr [rax + 0x50]>', '<mov~~dword ptr [rsp + 0x18], eax>', '<mov~~rdi, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<movsxd~~rcx, dword ptr [rcx + 0xc]>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<mov~~esi, dword ptr [rax + 0xc]>', '<add~~esi, dword ptr [rsp + 0xc]>', '<call~~0x500050>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~eax, dword ptr [rax + 0xc]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<cmp~~eax, dword ptr [rcx + 0x58]>', '<jbe~~0x400d6f>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xfffffffb>', '<jmp~~0x400ed4>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x38>', '<mov~~qword ptr [rsp + 0x28], rdi>', '<mov~~qword ptr [rsp + 0x20], rsi>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 0x10], rax>', '<mov~~dword ptr [rsp + 0xc], 8>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<cmp~~dword ptr [rax + 0x54], 0>', '<je~~0x400d50>']}], 'cfg_edge_info': [(0, 1), (6, 8), (1, 4), (6, 7), (4, 5), (3, 6), (1, 3)]}]}
{'ape_read_packet': [4197712, 4197730, 4197743, 4197787]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_before/no/ape.o---before
The extraction of function: ape_read_packet
[4197712, 4197730, 4197743, 4197787]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 18 nodes and 24 edges in CFGEmulated.
It has 18 nodes and 19 edges in CDG.
It has 381 nodes and 471 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4197712, 4197730, 4197743, 4197787]
{4197824, 4197730, 4197699, 4197896, 4197836, 4197743, 4197712, 4197648, 4197810, 4198100, 4197878, 4197883, 4198009, 4197787}
[7, 15, 8, 1, 13, 2, 9, 5, 0, 10, 17, 14, 3, 4]
The execution time of patched slicing information extraction via angr: 0:00:01.949510
{'ape_read_packet': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d9b>, <DisassemblerInsn "mov" for 0x400da0>, <DisassemblerInsn "mov" for 0x400da3>, <DisassemblerInsn "mov" for 0x400da8>, <DisassemblerInsn "sub" for 0x400dab>, <DisassemblerInsn "cmp" for 0x400dae>, <DisassemblerInsn "jne" for 0x400db0>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e08>, <DisassemblerInsn "mov" for 0x400e0c>, <DisassemblerInsn "mov" for 0x400e11>, <DisassemblerInsn "mov" for 0x400e15>, <DisassemblerInsn "mov" for 0x400e17>, <DisassemblerInsn "mov" for 0x400e1c>, <DisassemblerInsn "mov" for 0x400e20>, <DisassemblerInsn "movsxd" for 0x400e25>, <DisassemblerInsn "shl" for 0x400e29>, <DisassemblerInsn "add" for 0x400e2d>, <DisassemblerInsn "mov" for 0x400e30>, <DisassemblerInsn "mov" for 0x400e33>, <DisassemblerInsn "mov" for 0x400e38>, <DisassemblerInsn "mov" for 0x400e3c>, <DisassemblerInsn "mov" for 0x400e3f>, <DisassemblerInsn "mov" for 0x400e44>, <DisassemblerInsn "mov" for 0x400e48>, <DisassemblerInsn "mov" for 0x400e4d>, <DisassemblerInsn "mov" for 0x400e51>, <DisassemblerInsn "add" for 0x400e55>, <DisassemblerInsn "mov" for 0x400e58>, <DisassemblerInsn "mov" for 0x400e5d>, <DisassemblerInsn "mov" for 0x400e61>, <DisassemblerInsn "movsxd" for 0x400e66>, <DisassemblerInsn "shl" for 0x400e6a>, <DisassemblerInsn "add" for 0x400e6e>, <DisassemblerInsn "mov" for 0x400e71>, <DisassemblerInsn "call" for 0x400e74>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400db2>, <DisassemblerInsn "mov" for 0x400db7>, <DisassemblerInsn "mov" for 0x400dba>, <DisassemblerInsn "jmp" for 0x400dbe>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d50>, <DisassemblerInsn "mov" for 0x400d55>, <DisassemblerInsn "mov" for 0x400d58>, <DisassemblerInsn "cmp" for 0x400d5d>, <DisassemblerInsn "jbe" for 0x400d60>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400df6>, <DisassemblerInsn "jge" for 0x400df9>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d43>, <DisassemblerInsn "jmp" for 0x400d4b>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dc0>, <DisassemblerInsn "mov" for 0x400dc5>, <DisassemblerInsn "mov" for 0x400dc8>, <DisassemblerInsn "mov" for 0x400dcc>, <DisassemblerInsn "mov" for 0x400dd1>, <DisassemblerInsn "mov" for 0x400dd6>, <DisassemblerInsn "mov" for 0x400dda>, <DisassemblerInsn "movsxd" for 0x400ddf>, <DisassemblerInsn "shl" for 0x400de3>, <DisassemblerInsn "add" for 0x400de7>, <DisassemblerInsn "mov" for 0x400dea>, <DisassemblerInsn "add" for 0x400ded>, <DisassemblerInsn "call" for 0x400df1>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ed4>, <DisassemblerInsn "add" for 0x400ed8>, <DisassemblerInsn "ret" for 0x400edc>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400d10>, <DisassemblerInsn "mov" for 0x400d14>, <DisassemblerInsn "mov" for 0x400d19>, <DisassemblerInsn "mov" for 0x400d1e>, <DisassemblerInsn "mov" for 0x400d23>, <DisassemblerInsn "mov" for 0x400d27>, <DisassemblerInsn "mov" for 0x400d2c>, <DisassemblerInsn "mov" for 0x400d34>, <DisassemblerInsn "mov" for 0x400d39>, <DisassemblerInsn "cmp" for 0x400d3d>, <DisassemblerInsn "je" for 0x400d41>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dcc>, <DisassemblerInsn "mov" for 0x400dd1>, <DisassemblerInsn "mov" for 0x400dd6>, <DisassemblerInsn "mov" for 0x400dda>, <DisassemblerInsn "movsxd" for 0x400ddf>, <DisassemblerInsn "shl" for 0x400de3>, <DisassemblerInsn "add" for 0x400de7>, <DisassemblerInsn "mov" for 0x400dea>, <DisassemblerInsn "add" for 0x400ded>, <DisassemblerInsn "call" for 0x400df1>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e79>, <DisassemblerInsn "mov" for 0x400e7d>, <DisassemblerInsn "mov" for 0x400e82>, <DisassemblerInsn "mov" for 0x400e86>, <DisassemblerInsn "movsxd" for 0x400e8b>, <DisassemblerInsn "shl" for 0x400e8f>, <DisassemblerInsn "add" for 0x400e93>, <DisassemblerInsn "mov" for 0x400e96>, <DisassemblerInsn "mov" for 0x400e9a>, <DisassemblerInsn "mov" for 0x400e9f>, <DisassemblerInsn "mov" for 0x400ea2>, <DisassemblerInsn "mov" for 0x400ea7>, <DisassemblerInsn "mov" for 0x400eae>, <DisassemblerInsn "add" for 0x400eb2>, <DisassemblerInsn "mov" for 0x400eb6>, <DisassemblerInsn "mov" for 0x400ebb>, <DisassemblerInsn "mov" for 0x400ebe>, <DisassemblerInsn "mov" for 0x400ec3>, <DisassemblerInsn "add" for 0x400ec6>, <DisassemblerInsn "mov" for 0x400ec9>, <DisassemblerInsn "mov" for 0x400ecc>, <DisassemblerInsn "mov" for 0x400ed4>, <DisassemblerInsn "add" for 0x400ed8>, <DisassemblerInsn "ret" for 0x400edc>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dfb>, <DisassemblerInsn "jmp" for 0x400e03>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d6f>, <DisassemblerInsn "mov" for 0x400d74>, <DisassemblerInsn "mov" for 0x400d78>, <DisassemblerInsn "mov" for 0x400d7d>, <DisassemblerInsn "mov" for 0x400d81>, <DisassemblerInsn "movsxd" for 0x400d86>, <DisassemblerInsn "shl" for 0x400d8a>, <DisassemblerInsn "add" for 0x400d8e>, <DisassemblerInsn "mov" for 0x400d91>, <DisassemblerInsn "xor" for 0x400d94>, <DisassemblerInsn "call" for 0x400d96>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d62>, <DisassemblerInsn "jmp" for 0x400d6a>]'}], 'cfg_block_detailed_info': [{'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~eax, dword ptr [rax + 0xc]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<mov~~ecx, dword ptr [rcx + 0x58]>', '<sub~~ecx, 1>', '<cmp~~eax, ecx>', '<jne~~0x400dc0>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<mov~~dword ptr [rax], ecx>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<movsxd~~rcx, dword ptr [rcx + 0xc]>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<mov~~ecx, dword ptr [rax + 0x10]>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<mov~~dword ptr [rax + 4], ecx>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rdi, qword ptr [rax + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rsi, qword ptr [rax + 0x10]>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<add~~rsi, rax>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<movsxd~~rcx, dword ptr [rcx + 0xc]>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<mov~~edx, dword ptr [rax + 0xc]>', '<call~~0x500020>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~eax, dword ptr [rax + 0x54]>', '<mov~~dword ptr [rsp + 0x18], eax>', '<jmp~~0x400dcc>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~eax, dword ptr [rax + 0xc]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<cmp~~eax, dword ptr [rcx + 0x58]>', '<jbe~~0x400d6f>']}, {'block_Idx': 13, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x400e08>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xfffffffb>', '<jmp~~0x400ed4>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~eax, dword ptr [rax + 0x50]>', '<mov~~dword ptr [rsp + 0x18], eax>', '<mov~~rdi, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<movsxd~~rcx, dword ptr [rcx + 0xc]>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<mov~~esi, dword ptr [rax + 0xc]>', '<add~~esi, dword ptr [rsp + 0xc]>', '<call~~0x500050>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x38>', '<mov~~qword ptr [rsp + 0x28], rdi>', '<mov~~qword ptr [rsp + 0x20], rsi>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 0x10], rax>', '<mov~~dword ptr [rsp + 0xc], 8>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<cmp~~dword ptr [rax + 0x54], 0>', '<je~~0x400d50>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<movsxd~~rcx, dword ptr [rcx + 0xc]>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<mov~~esi, dword ptr [rax + 0xc]>', '<add~~esi, dword ptr [rsp + 0xc]>', '<call~~0x500050>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~dword ptr [rsp + 0x1c], eax>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<movsxd~~rcx, dword ptr [rcx + 0xc]>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<mov~~rcx, qword ptr [rax + 0x18]>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~qword ptr [rax], rcx>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~dword ptr [rax + 0x1c], 0>', '<mov~~ecx, dword ptr [rsp + 0x1c]>', '<add~~ecx, dword ptr [rsp + 0xc]>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~dword ptr [rax + 0x18], ecx>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~ecx, dword ptr [rax + 0xc]>', '<add~~ecx, 1>', '<mov~~dword ptr [rax + 0xc], ecx>', '<mov~~dword ptr [rsp + 0x34], 0>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xfffffff4>', '<jmp~~0x400ed4>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rdi, qword ptr [rax + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<movsxd~~rcx, dword ptr [rcx + 0xc]>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<mov~~rsi, qword ptr [rax]>', '<xor~~edx, edx>', '<call~~0x500000>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xfffffffb>', '<jmp~~0x400ed4>']}], 'cfg_edge_info': [(0, 1), (13, 14), (9, 13), (3, 7), (15, 17), (8, 10), (1, 4), (10, 13), (7, 9), (4, 5), (0, 2), (13, 15), (2, 5), (1, 3), (14, 5), (7, 8)], 'cdg_edge_info': [(0, 1), (13, 5), (13, 14), (13, 17), (1, 5), (7, 10), (1, 4), (7, 9), (0, 2), (1, 13), (1, 7), (0, 5), (13, 15), (1, 3), (7, 8)], 'ddg_edge_info': [(3, 7), (3, 10), (0, 2), (0, 8), (8, 15), (1, 3), (0, 17), (10, 15), (2, 17), (1, 15), (15, 17), (3, 9), (4, 17), (3, 15), (9, 10), (0, 7), (0, 1), (0, 4), (0, 10), (10, 14), (10, 17), (1, 17), (3, 8), (14, 17), (3, 17), (0, 3), (0, 9), (10, 13), (9, 15), (1, 7), (0, 15), (1, 10)]}]}
{'ape_read_packet': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 13, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 14, 'instruction': 'movl\t12(%rax), %eax'}, {'instIndex': 15, 'instruction': 'movq\t0x10(%rsp), %rcx'}, {'instIndex': 16, 'instruction': 'cmpl\t0x58(%rcx), %eax'}, {'instIndex': 17, 'instruction': 'jbe\t.LBB2_4'}, {'instIndex': 18, 'instruction': 'movl\t$-5, 0x34(%rsp)'}, {'instIndex': 19, 'instruction': 'jmp\t.LBB2_10'}, {'instIndex': 20, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 21, 'instruction': 'movq\t0x20(%rax), %rdi'}, {'instIndex': 22, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 23, 'instruction': 'movq\t0x10(%rax), %rax'}, {'instIndex': 24, 'instruction': 'movq\t0x10(%rsp), %rcx'}, {'instIndex': 25, 'instruction': 'movslq\t12(%rcx), %rcx'}, {'instIndex': 26, 'instruction': 'shlq\t$5, %rcx'}, {'instIndex': 27, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 28, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 29, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 30, 'instruction': 'callq\tavio_seek@PLT'}, {'instIndex': 31, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 32, 'instruction': 'movl\t12(%rax), %eax'}, {'instIndex': 33, 'instruction': 'movq\t0x10(%rsp), %rcx'}, {'instIndex': 34, 'instruction': 'movl\t0x58(%rcx), %ecx'}, {'instIndex': 35, 'instruction': 'subl\t$1, %ecx'}, {'instIndex': 36, 'instruction': 'cmpl\t%ecx, %eax'}, {'instIndex': 37, 'instruction': 'jne\t.LBB2_6'}]}]}
The case of compiler clang with optimization O0.
Patched source code file: ape.c
Patched function: 1---static int ape_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_before/O0/ape.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_before/O0/ape.s---ape_read_packet---before
function id: 2
function flag: True
There are 111 instructions for function: ape_read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '361', 'end': 368}, 'before': {'start': '361', 'end': 367}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 13, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 14, 'instruction': 'movl\t12(%rax), %eax'}, {'instIndex': 15, 'instruction': 'movq\t0x10(%rsp), %rcx'}, {'instIndex': 16, 'instruction': 'cmpl\t0x58(%rcx), %eax'}, {'instIndex': 17, 'instruction': 'jbe\t.LBB2_4'}, {'instIndex': 18, 'instruction': 'movl\t$-5, 0x34(%rsp)'}, {'instIndex': 19, 'instruction': 'jmp\t.LBB2_10'}, {'instIndex': 20, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 21, 'instruction': 'movq\t0x20(%rax), %rdi'}, {'instIndex': 22, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 23, 'instruction': 'movq\t0x10(%rax), %rax'}, {'instIndex': 24, 'instruction': 'movq\t0x10(%rsp), %rcx'}, {'instIndex': 25, 'instruction': 'movslq\t12(%rcx), %rcx'}, {'instIndex': 26, 'instruction': 'shlq\t$5, %rcx'}, {'instIndex': 27, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 28, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 29, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 30, 'instruction': 'callq\tavio_seek@PLT'}, {'instIndex': 31, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 32, 'instruction': 'movl\t12(%rax), %eax'}, {'instIndex': 33, 'instruction': 'movq\t0x10(%rsp), %rcx'}, {'instIndex': 34, 'instruction': 'movl\t0x58(%rcx), %ecx'}, {'instIndex': 35, 'instruction': 'subl\t$1, %ecx'}, {'instIndex': 36, 'instruction': 'cmpl\t%ecx, %eax'}, {'instIndex': 37, 'instruction': 'jne\t.LBB2_6'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_before/O0/ape.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_before/O0/ape.o---before
The extraction of function: ape_read_packet
Analyzing the binaries to generate subCFGs from patched function ...
It has 163 nodes and 297 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 111 instructions in binary file.
[4197712, 4197730, 4197743, 4197787]
The execution time of patched subCFG information extraction via angr: 0:00:00.214351
{'ape_read_packet': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d6f>, <DisassemblerInsn "mov" for 0x400d74>, <DisassemblerInsn "mov" for 0x400d78>, <DisassemblerInsn "mov" for 0x400d7d>, <DisassemblerInsn "mov" for 0x400d81>, <DisassemblerInsn "movsxd" for 0x400d86>, <DisassemblerInsn "shl" for 0x400d8a>, <DisassemblerInsn "add" for 0x400d8e>, <DisassemblerInsn "mov" for 0x400d91>, <DisassemblerInsn "xor" for 0x400d94>, <DisassemblerInsn "call" for 0x400d96>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ed4>, <DisassemblerInsn "add" for 0x400ed8>, <DisassemblerInsn "ret" for 0x400edc>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400db2>, <DisassemblerInsn "mov" for 0x400db7>, <DisassemblerInsn "mov" for 0x400dba>, <DisassemblerInsn "jmp" for 0x400dbe>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d9b>, <DisassemblerInsn "mov" for 0x400da0>, <DisassemblerInsn "mov" for 0x400da3>, <DisassemblerInsn "mov" for 0x400da8>, <DisassemblerInsn "sub" for 0x400dab>, <DisassemblerInsn "cmp" for 0x400dae>, <DisassemblerInsn "jne" for 0x400db0>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dc0>, <DisassemblerInsn "mov" for 0x400dc5>, <DisassemblerInsn "mov" for 0x400dc8>, <DisassemblerInsn "mov" for 0x400dcc>, <DisassemblerInsn "mov" for 0x400dd1>, <DisassemblerInsn "mov" for 0x400dd6>, <DisassemblerInsn "mov" for 0x400dda>, <DisassemblerInsn "movsxd" for 0x400ddf>, <DisassemblerInsn "shl" for 0x400de3>, <DisassemblerInsn "add" for 0x400de7>, <DisassemblerInsn "mov" for 0x400dea>, <DisassemblerInsn "add" for 0x400ded>, <DisassemblerInsn "call" for 0x400df1>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d50>, <DisassemblerInsn "mov" for 0x400d55>, <DisassemblerInsn "mov" for 0x400d58>, <DisassemblerInsn "cmp" for 0x400d5d>, <DisassemblerInsn "jbe" for 0x400d60>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d62>, <DisassemblerInsn "jmp" for 0x400d6a>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400d10>, <DisassemblerInsn "mov" for 0x400d14>, <DisassemblerInsn "mov" for 0x400d19>, <DisassemblerInsn "mov" for 0x400d1e>, <DisassemblerInsn "mov" for 0x400d23>, <DisassemblerInsn "mov" for 0x400d27>, <DisassemblerInsn "mov" for 0x400d2c>, <DisassemblerInsn "mov" for 0x400d34>, <DisassemblerInsn "mov" for 0x400d39>, <DisassemblerInsn "cmp" for 0x400d3d>, <DisassemblerInsn "je" for 0x400d41>]'}], 'cfg_block_detailed_info': [{'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rdi, qword ptr [rax + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<movsxd~~rcx, dword ptr [rcx + 0xc]>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<mov~~rsi, qword ptr [rax]>', '<xor~~edx, edx>', '<call~~0x500000>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~eax, dword ptr [rax + 0x54]>', '<mov~~dword ptr [rsp + 0x18], eax>', '<jmp~~0x400dcc>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~eax, dword ptr [rax + 0xc]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<mov~~ecx, dword ptr [rcx + 0x58]>', '<sub~~ecx, 1>', '<cmp~~eax, ecx>', '<jne~~0x400dc0>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~eax, dword ptr [rax + 0x50]>', '<mov~~dword ptr [rsp + 0x18], eax>', '<mov~~rdi, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<movsxd~~rcx, dword ptr [rcx + 0xc]>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<mov~~esi, dword ptr [rax + 0xc]>', '<add~~esi, dword ptr [rsp + 0xc]>', '<call~~0x500050>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~eax, dword ptr [rax + 0xc]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<cmp~~eax, dword ptr [rcx + 0x58]>', '<jbe~~0x400d6f>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xfffffffb>', '<jmp~~0x400ed4>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x38>', '<mov~~qword ptr [rsp + 0x28], rdi>', '<mov~~qword ptr [rsp + 0x20], rsi>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 0x10], rax>', '<mov~~dword ptr [rsp + 0xc], 8>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<cmp~~dword ptr [rax + 0x54], 0>', '<je~~0x400d50>']}], 'cfg_edge_info': [(0, 1), (6, 8), (1, 4), (6, 7), (4, 5), (3, 6), (1, 3)]}]}
{'ape_read_packet': [4197712, 4197730, 4197743, 4197787]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_before/O0/ape.o---before
The extraction of function: ape_read_packet
[4197712, 4197730, 4197743, 4197787]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 18 nodes and 24 edges in CFGEmulated.
It has 18 nodes and 19 edges in CDG.
It has 381 nodes and 471 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4197712, 4197730, 4197743, 4197787]
{4197824, 4197730, 4197699, 4197896, 4197836, 4197743, 4197712, 4197648, 4197810, 4198100, 4197878, 4197883, 4198009, 4197787}
[7, 15, 8, 1, 13, 2, 9, 5, 0, 10, 17, 14, 3, 4]
The execution time of patched slicing information extraction via angr: 0:00:01.998943
{'ape_read_packet': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d9b>, <DisassemblerInsn "mov" for 0x400da0>, <DisassemblerInsn "mov" for 0x400da3>, <DisassemblerInsn "mov" for 0x400da8>, <DisassemblerInsn "sub" for 0x400dab>, <DisassemblerInsn "cmp" for 0x400dae>, <DisassemblerInsn "jne" for 0x400db0>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e08>, <DisassemblerInsn "mov" for 0x400e0c>, <DisassemblerInsn "mov" for 0x400e11>, <DisassemblerInsn "mov" for 0x400e15>, <DisassemblerInsn "mov" for 0x400e17>, <DisassemblerInsn "mov" for 0x400e1c>, <DisassemblerInsn "mov" for 0x400e20>, <DisassemblerInsn "movsxd" for 0x400e25>, <DisassemblerInsn "shl" for 0x400e29>, <DisassemblerInsn "add" for 0x400e2d>, <DisassemblerInsn "mov" for 0x400e30>, <DisassemblerInsn "mov" for 0x400e33>, <DisassemblerInsn "mov" for 0x400e38>, <DisassemblerInsn "mov" for 0x400e3c>, <DisassemblerInsn "mov" for 0x400e3f>, <DisassemblerInsn "mov" for 0x400e44>, <DisassemblerInsn "mov" for 0x400e48>, <DisassemblerInsn "mov" for 0x400e4d>, <DisassemblerInsn "mov" for 0x400e51>, <DisassemblerInsn "add" for 0x400e55>, <DisassemblerInsn "mov" for 0x400e58>, <DisassemblerInsn "mov" for 0x400e5d>, <DisassemblerInsn "mov" for 0x400e61>, <DisassemblerInsn "movsxd" for 0x400e66>, <DisassemblerInsn "shl" for 0x400e6a>, <DisassemblerInsn "add" for 0x400e6e>, <DisassemblerInsn "mov" for 0x400e71>, <DisassemblerInsn "call" for 0x400e74>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400db2>, <DisassemblerInsn "mov" for 0x400db7>, <DisassemblerInsn "mov" for 0x400dba>, <DisassemblerInsn "jmp" for 0x400dbe>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d50>, <DisassemblerInsn "mov" for 0x400d55>, <DisassemblerInsn "mov" for 0x400d58>, <DisassemblerInsn "cmp" for 0x400d5d>, <DisassemblerInsn "jbe" for 0x400d60>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400df6>, <DisassemblerInsn "jge" for 0x400df9>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d43>, <DisassemblerInsn "jmp" for 0x400d4b>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dc0>, <DisassemblerInsn "mov" for 0x400dc5>, <DisassemblerInsn "mov" for 0x400dc8>, <DisassemblerInsn "mov" for 0x400dcc>, <DisassemblerInsn "mov" for 0x400dd1>, <DisassemblerInsn "mov" for 0x400dd6>, <DisassemblerInsn "mov" for 0x400dda>, <DisassemblerInsn "movsxd" for 0x400ddf>, <DisassemblerInsn "shl" for 0x400de3>, <DisassemblerInsn "add" for 0x400de7>, <DisassemblerInsn "mov" for 0x400dea>, <DisassemblerInsn "add" for 0x400ded>, <DisassemblerInsn "call" for 0x400df1>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ed4>, <DisassemblerInsn "add" for 0x400ed8>, <DisassemblerInsn "ret" for 0x400edc>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400d10>, <DisassemblerInsn "mov" for 0x400d14>, <DisassemblerInsn "mov" for 0x400d19>, <DisassemblerInsn "mov" for 0x400d1e>, <DisassemblerInsn "mov" for 0x400d23>, <DisassemblerInsn "mov" for 0x400d27>, <DisassemblerInsn "mov" for 0x400d2c>, <DisassemblerInsn "mov" for 0x400d34>, <DisassemblerInsn "mov" for 0x400d39>, <DisassemblerInsn "cmp" for 0x400d3d>, <DisassemblerInsn "je" for 0x400d41>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dcc>, <DisassemblerInsn "mov" for 0x400dd1>, <DisassemblerInsn "mov" for 0x400dd6>, <DisassemblerInsn "mov" for 0x400dda>, <DisassemblerInsn "movsxd" for 0x400ddf>, <DisassemblerInsn "shl" for 0x400de3>, <DisassemblerInsn "add" for 0x400de7>, <DisassemblerInsn "mov" for 0x400dea>, <DisassemblerInsn "add" for 0x400ded>, <DisassemblerInsn "call" for 0x400df1>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400e79>, <DisassemblerInsn "mov" for 0x400e7d>, <DisassemblerInsn "mov" for 0x400e82>, <DisassemblerInsn "mov" for 0x400e86>, <DisassemblerInsn "movsxd" for 0x400e8b>, <DisassemblerInsn "shl" for 0x400e8f>, <DisassemblerInsn "add" for 0x400e93>, <DisassemblerInsn "mov" for 0x400e96>, <DisassemblerInsn "mov" for 0x400e9a>, <DisassemblerInsn "mov" for 0x400e9f>, <DisassemblerInsn "mov" for 0x400ea2>, <DisassemblerInsn "mov" for 0x400ea7>, <DisassemblerInsn "mov" for 0x400eae>, <DisassemblerInsn "add" for 0x400eb2>, <DisassemblerInsn "mov" for 0x400eb6>, <DisassemblerInsn "mov" for 0x400ebb>, <DisassemblerInsn "mov" for 0x400ebe>, <DisassemblerInsn "mov" for 0x400ec3>, <DisassemblerInsn "add" for 0x400ec6>, <DisassemblerInsn "mov" for 0x400ec9>, <DisassemblerInsn "mov" for 0x400ecc>, <DisassemblerInsn "mov" for 0x400ed4>, <DisassemblerInsn "add" for 0x400ed8>, <DisassemblerInsn "ret" for 0x400edc>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400dfb>, <DisassemblerInsn "jmp" for 0x400e03>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d6f>, <DisassemblerInsn "mov" for 0x400d74>, <DisassemblerInsn "mov" for 0x400d78>, <DisassemblerInsn "mov" for 0x400d7d>, <DisassemblerInsn "mov" for 0x400d81>, <DisassemblerInsn "movsxd" for 0x400d86>, <DisassemblerInsn "shl" for 0x400d8a>, <DisassemblerInsn "add" for 0x400d8e>, <DisassemblerInsn "mov" for 0x400d91>, <DisassemblerInsn "xor" for 0x400d94>, <DisassemblerInsn "call" for 0x400d96>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d62>, <DisassemblerInsn "jmp" for 0x400d6a>]'}], 'cfg_block_detailed_info': [{'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~eax, dword ptr [rax + 0xc]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<mov~~ecx, dword ptr [rcx + 0x58]>', '<sub~~ecx, 1>', '<cmp~~eax, ecx>', '<jne~~0x400dc0>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x18]>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<mov~~dword ptr [rax], ecx>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<movsxd~~rcx, dword ptr [rcx + 0xc]>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<mov~~ecx, dword ptr [rax + 0x10]>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<mov~~dword ptr [rax + 4], ecx>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rdi, qword ptr [rax + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~rsi, qword ptr [rax + 0x10]>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<add~~rsi, rax>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<movsxd~~rcx, dword ptr [rcx + 0xc]>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<mov~~edx, dword ptr [rax + 0xc]>', '<call~~0x500020>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~eax, dword ptr [rax + 0x54]>', '<mov~~dword ptr [rsp + 0x18], eax>', '<jmp~~0x400dcc>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~eax, dword ptr [rax + 0xc]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<cmp~~eax, dword ptr [rcx + 0x58]>', '<jbe~~0x400d6f>']}, {'block_Idx': 13, 'blockInsts': ['<cmp~~eax, 0>', '<jge~~0x400e08>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xfffffffb>', '<jmp~~0x400ed4>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~eax, dword ptr [rax + 0x50]>', '<mov~~dword ptr [rsp + 0x18], eax>', '<mov~~rdi, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<movsxd~~rcx, dword ptr [rcx + 0xc]>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<mov~~esi, dword ptr [rax + 0xc]>', '<add~~esi, dword ptr [rsp + 0xc]>', '<call~~0x500050>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x38>', '<mov~~qword ptr [rsp + 0x28], rdi>', '<mov~~qword ptr [rsp + 0x20], rsi>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 0x10], rax>', '<mov~~dword ptr [rsp + 0xc], 8>', '<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rax + 0x20]>', '<cmp~~dword ptr [rax + 0x54], 0>', '<je~~0x400d50>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<movsxd~~rcx, dword ptr [rcx + 0xc]>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<mov~~esi, dword ptr [rax + 0xc]>', '<add~~esi, dword ptr [rsp + 0xc]>', '<call~~0x500050>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~dword ptr [rsp + 0x1c], eax>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<movsxd~~rcx, dword ptr [rcx + 0xc]>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<mov~~rcx, qword ptr [rax + 0x18]>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~qword ptr [rax], rcx>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~dword ptr [rax + 0x1c], 0>', '<mov~~ecx, dword ptr [rsp + 0x1c]>', '<add~~ecx, dword ptr [rsp + 0xc]>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~dword ptr [rax + 0x18], ecx>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~ecx, dword ptr [rax + 0xc]>', '<add~~ecx, 1>', '<mov~~dword ptr [rax + 0xc], ecx>', '<mov~~dword ptr [rsp + 0x34], 0>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xfffffff4>', '<jmp~~0x400ed4>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~rdi, qword ptr [rax + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rax, qword ptr [rax + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x10]>', '<movsxd~~rcx, dword ptr [rcx + 0xc]>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<mov~~rsi, qword ptr [rax]>', '<xor~~edx, edx>', '<call~~0x500000>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xfffffffb>', '<jmp~~0x400ed4>']}], 'cfg_edge_info': [(0, 1), (13, 14), (9, 13), (3, 7), (15, 17), (8, 10), (1, 4), (10, 13), (7, 9), (4, 5), (0, 2), (13, 15), (2, 5), (1, 3), (14, 5), (7, 8)], 'cdg_edge_info': [(0, 1), (13, 5), (13, 14), (13, 17), (1, 5), (7, 10), (1, 4), (7, 9), (0, 2), (1, 13), (1, 7), (0, 5), (13, 15), (1, 3), (7, 8)], 'ddg_edge_info': [(3, 7), (3, 10), (0, 2), (0, 8), (8, 15), (1, 3), (0, 17), (10, 15), (2, 17), (1, 15), (15, 17), (3, 9), (4, 17), (3, 15), (9, 10), (0, 7), (0, 1), (0, 4), (0, 10), (10, 14), (10, 17), (1, 17), (3, 8), (14, 17), (3, 17), (0, 3), (0, 9), (10, 13), (9, 15), (1, 7), (0, 15), (1, 10)]}]}
{'ape_read_packet': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 13, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 14, 'instruction': 'movl\t12(%rax), %eax'}, {'instIndex': 15, 'instruction': 'movq\t0x10(%rsp), %rcx'}, {'instIndex': 16, 'instruction': 'cmpl\t0x58(%rcx), %eax'}, {'instIndex': 17, 'instruction': 'jbe\t.LBB2_4'}, {'instIndex': 18, 'instruction': 'movl\t$-5, 0x34(%rsp)'}, {'instIndex': 19, 'instruction': 'jmp\t.LBB2_10'}, {'instIndex': 20, 'instruction': 'movq\t0x28(%rsp), %rax'}, {'instIndex': 21, 'instruction': 'movq\t0x20(%rax), %rdi'}, {'instIndex': 22, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 23, 'instruction': 'movq\t0x10(%rax), %rax'}, {'instIndex': 24, 'instruction': 'movq\t0x10(%rsp), %rcx'}, {'instIndex': 25, 'instruction': 'movslq\t12(%rcx), %rcx'}, {'instIndex': 26, 'instruction': 'shlq\t$5, %rcx'}, {'instIndex': 27, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 28, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 29, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 30, 'instruction': 'callq\tavio_seek@PLT'}, {'instIndex': 31, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 32, 'instruction': 'movl\t12(%rax), %eax'}, {'instIndex': 33, 'instruction': 'movq\t0x10(%rsp), %rcx'}, {'instIndex': 34, 'instruction': 'movl\t0x58(%rcx), %ecx'}, {'instIndex': 35, 'instruction': 'subl\t$1, %ecx'}, {'instIndex': 36, 'instruction': 'cmpl\t%ecx, %eax'}, {'instIndex': 37, 'instruction': 'jne\t.LBB2_6'}]}]}
The case of compiler clang with optimization O1.
Patched source code file: ape.c
Patched function: 1---static int ape_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_before/O1/ape.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_before/O1/ape.s---ape_read_packet---before
function id: 2
function flag: True
There are 114 instructions for function: ape_read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '361', 'end': 368}, 'before': {'start': '361', 'end': 367}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 14, 'instruction': 'movq\t%rdx, %rax'}, {'instIndex': 15, 'instruction': 'addq\t$12, %rax'}, {'instIndex': 16, 'instruction': 'movq\t%rax, 0x18(%rsp)                  # 8-byte Spill'}, {'instIndex': 17, 'instruction': 'movl\t12(%rdx), %ecx'}, {'instIndex': 18, 'instruction': 'movl\t%ecx, 0x24(%rsp)                  # 4-byte Spill'}, {'instIndex': 19, 'instruction': 'movq\t%rdx, %rax'}, {'instIndex': 20, 'instruction': 'addq\t$0x58, %rax'}, {'instIndex': 21, 'instruction': 'movq\t%rax, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 22, 'instruction': 'movl\t$0xfffffffb, %eax               # imm = 0xFFFFFFFB'}, {'instIndex': 23, 'instruction': 'cmpl\t0x58(%rdx), %ecx'}, {'instIndex': 24, 'instruction': 'movl\t%eax, 0x54(%rsp)                  # 4-byte Spill'}, {'instIndex': 25, 'instruction': 'ja\t.LBB2_4'}, {'instIndex': 29, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 30, 'instruction': 'addq\t$0x10, %rdx'}, {'instIndex': 31, 'instruction': 'movq\t%rdx, 8(%rsp)                   # 8-byte Spill'}, {'instIndex': 32, 'instruction': 'movq\t0x10(%rax), %rax'}, {'instIndex': 33, 'instruction': 'movslq\t%ecx, %rcx'}, {'instIndex': 34, 'instruction': 'shlq\t$5, %rcx'}, {'instIndex': 35, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 36, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 37, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 38, 'instruction': 'callq\tavio_seek@PLT'}, {'instIndex': 43, 'instruction': 'movl\t(%rcx), %ecx'}, {'instIndex': 44, 'instruction': 'movl\t(%rdx), %r8d'}, {'instIndex': 45, 'instruction': 'addl\t$-1, %r8d'}, {'instIndex': 46, 'instruction': 'movq\t%rax, %rsi'}, {'instIndex': 47, 'instruction': 'addq\t$0x54, %rsi'}, {'instIndex': 48, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 49, 'instruction': 'addq\t$0x50, %rdx'}, {'instIndex': 50, 'instruction': 'cmpl\t%r8d, %ecx'}, {'instIndex': 51, 'instruction': 'cmoveq\t%rsi, %rdx'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_before/O1/ape.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_before/O1/ape.o---before
The extraction of function: ape_read_packet
Analyzing the binaries to generate subCFGs from patched function ...
It has 137 nodes and 273 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 114 instructions in binary file.
[4198266, 4198320, 4198370]
The execution time of patched subCFG information extraction via angr: 0:00:00.200348
{'ape_read_packet': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400fe2>, <DisassemblerInsn "mov" for 0x400fe7>, <DisassemblerInsn "mov" for 0x400fec>, <DisassemblerInsn "mov" for 0x400ff1>, <DisassemblerInsn "mov" for 0x400ff6>, <DisassemblerInsn "mov" for 0x400ff8>, <DisassemblerInsn "add" for 0x400ffb>, <DisassemblerInsn "mov" for 0x400fff>, <DisassemblerInsn "add" for 0x401002>, <DisassemblerInsn "mov" for 0x401006>, <DisassemblerInsn "add" for 0x401009>, <DisassemblerInsn "cmp" for 0x40100d>, <DisassemblerInsn "cmove" for 0x401010>, <DisassemblerInsn "mov" for 0x401014>, <DisassemblerInsn "mov" for 0x401016>, <DisassemblerInsn "mov" for 0x40101a>, <DisassemblerInsn "movsxd" for 0x40101e>, <DisassemblerInsn "shl" for 0x401021>, <DisassemblerInsn "add" for 0x401025>, <DisassemblerInsn "add" for 0x401028>, <DisassemblerInsn "mov" for 0x40102c>, <DisassemblerInsn "add" for 0x40102e>, <DisassemblerInsn "call" for 0x401031>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400fb0>, <DisassemblerInsn "mov" for 0x400fb5>, <DisassemblerInsn "mov" for 0x400fba>, <DisassemblerInsn "mov" for 0x400fbe>, <DisassemblerInsn "add" for 0x400fc1>, <DisassemblerInsn "mov" for 0x400fc5>, <DisassemblerInsn "mov" for 0x400fca>, <DisassemblerInsn "movsxd" for 0x400fce>, <DisassemblerInsn "shl" for 0x400fd1>, <DisassemblerInsn "add" for 0x400fd5>, <DisassemblerInsn "mov" for 0x400fd8>, <DisassemblerInsn "xor" for 0x400fdb>, <DisassemblerInsn "call" for 0x400fdd>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401036>, <DisassemblerInsn "mov" for 0x401038>, <DisassemblerInsn "cmp" for 0x40103d>, <DisassemblerInsn "mov" for 0x401040>, <DisassemblerInsn "jl" for 0x401044>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400f40>, <DisassemblerInsn "mov" for 0x400f44>, <DisassemblerInsn "mov" for 0x400f49>, <DisassemblerInsn "mov" for 0x400f4d>, <DisassemblerInsn "mov" for 0x400f52>, <DisassemblerInsn "add" for 0x400f55>, <DisassemblerInsn "mov" for 0x400f59>, <DisassemblerInsn "mov" for 0x400f5e>, <DisassemblerInsn "mov" for 0x400f62>, <DisassemblerInsn "mov" for 0x400f67>, <DisassemblerInsn "cmp" for 0x400f6c>, <DisassemblerInsn "mov" for 0x400f70>, <DisassemblerInsn "jne" for 0x400f74>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400f7a>, <DisassemblerInsn "mov" for 0x400f7f>, <DisassemblerInsn "add" for 0x400f82>, <DisassemblerInsn "mov" for 0x400f86>, <DisassemblerInsn "mov" for 0x400f8b>, <DisassemblerInsn "mov" for 0x400f8e>, <DisassemblerInsn "mov" for 0x400f92>, <DisassemblerInsn "add" for 0x400f95>, <DisassemblerInsn "mov" for 0x400f99>, <DisassemblerInsn "mov" for 0x400f9e>, <DisassemblerInsn "cmp" for 0x400fa3>, <DisassemblerInsn "mov" for 0x400fa6>, <DisassemblerInsn "ja" for 0x400faa>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4010eb>, <DisassemblerInsn "add" for 0x4010ef>, <DisassemblerInsn "ret" for 0x4010f3>]'}], 'cfg_block_detailed_info': [{'block_Idx': 4, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x18]>', '<mov~~rdx, qword ptr [rsp + 0x28]>', '<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~r8d, dword ptr [rdx]>', '<add~~r8d, -1>', '<mov~~rsi, rax>', '<add~~rsi, 0x54>', '<mov~~rdx, rax>', '<add~~rdx, 0x50>', '<cmp~~ecx, r8d>', '<cmove~~rdx, rsi>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0x14], edx>', '<mov~~rax, qword ptr [rax + 0x10]>', '<movsxd~~rcx, ecx>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<add~~rax, 0xc>', '<mov~~esi, dword ptr [rax]>', '<add~~esi, 8>', '<call~~0x500050>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~ecx, dword ptr [rsp + 0x24]>', '<mov~~rdx, rax>', '<add~~rdx, 0x10>', '<mov~~qword ptr [rsp + 8], rdx>', '<mov~~rax, qword ptr [rax + 0x10]>', '<movsxd~~rcx, ecx>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<mov~~rsi, qword ptr [rax]>', '<xor~~edx, edx>', '<call~~0x500000>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~eax, 0xfffffff4>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jl~~0x4010eb>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x58>', '<mov~~qword ptr [rsp + 0x30], rsi>', '<mov~~rax, qword ptr [rdi + 0x18]>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x20>', '<mov~~qword ptr [rsp + 0x40], rax>', '<mov~~rcx, qword ptr [rdi + 0x20]>', '<mov~~qword ptr [rsp + 0x48], rcx>', '<mov~~eax, 0xfffffffb>', '<cmp~~dword ptr [rcx + 0x54], 0>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jne~~0x4010eb>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~rax, rdx>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~ecx, dword ptr [rdx + 0xc]>', '<mov~~dword ptr [rsp + 0x24], ecx>', '<mov~~rax, rdx>', '<add~~rax, 0x58>', '<mov~~qword ptr [rsp + 0x28], rax>', '<mov~~eax, 0xfffffffb>', '<cmp~~ecx, dword ptr [rdx + 0x58]>', '<mov~~dword ptr [rsp + 0x54], eax>', '<ja~~0x4010eb>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<add~~rsp, 0x58>', '<ret~~>']}], 'cfg_edge_info': [(0, 1), (1, 2), (3, 4), (4, 5), (1, 3)]}]}
{'ape_read_packet': [4198266, 4198320, 4198370]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_before/O1/ape.o---before
The extraction of function: ape_read_packet
[4198266, 4198320, 4198370]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 11 nodes and 15 edges in CFGEmulated.
It has 11 nodes and 12 edges in CDG.
It has 314 nodes and 367 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4198266, 4198320, 4198370]
{4198208, 4198370, 4198569, 4198474, 4198635, 4198320, 4198454, 4198266}
[0, 7, 10, 8, 1, 2, 5, 3]
The execution time of patched slicing information extraction via angr: 0:00:01.318501
{'ape_read_packet': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400f40>, <DisassemblerInsn "mov" for 0x400f44>, <DisassemblerInsn "mov" for 0x400f49>, <DisassemblerInsn "mov" for 0x400f4d>, <DisassemblerInsn "mov" for 0x400f52>, <DisassemblerInsn "add" for 0x400f55>, <DisassemblerInsn "mov" for 0x400f59>, <DisassemblerInsn "mov" for 0x400f5e>, <DisassemblerInsn "mov" for 0x400f62>, <DisassemblerInsn "mov" for 0x400f67>, <DisassemblerInsn "cmp" for 0x400f6c>, <DisassemblerInsn "mov" for 0x400f70>, <DisassemblerInsn "jne" for 0x400f74>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401036>, <DisassemblerInsn "mov" for 0x401038>, <DisassemblerInsn "cmp" for 0x40103d>, <DisassemblerInsn "mov" for 0x401040>, <DisassemblerInsn "jl" for 0x401044>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4010a9>, <DisassemblerInsn "mov" for 0x4010ae>, <DisassemblerInsn "mov" for 0x4010b3>, <DisassemblerInsn "mov" for 0x4010b5>, <DisassemblerInsn "mov" for 0x4010ba>, <DisassemblerInsn "mov" for 0x4010bd>, <DisassemblerInsn "movsxd" for 0x4010bf>, <DisassemblerInsn "shl" for 0x4010c2>, <DisassemblerInsn "add" for 0x4010c6>, <DisassemblerInsn "add" for 0x4010c9>, <DisassemblerInsn "mov" for 0x4010cd>, <DisassemblerInsn "mov" for 0x4010d0>, <DisassemblerInsn "mov" for 0x4010d3>, <DisassemblerInsn "add" for 0x4010da>, <DisassemblerInsn "mov" for 0x4010dd>, <DisassemblerInsn "add" for 0x4010e0>, <DisassemblerInsn "mov" for 0x4010e3>, <DisassemblerInsn "xor" for 0x4010e5>, <DisassemblerInsn "mov" for 0x4010e7>, <DisassemblerInsn "mov" for 0x4010eb>, <DisassemblerInsn "add" for 0x4010ef>, <DisassemblerInsn "ret" for 0x4010f3>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40104a>, <DisassemblerInsn "mov" for 0x40104f>, <DisassemblerInsn "mov" for 0x401054>, <DisassemblerInsn "mov" for 0x401059>, <DisassemblerInsn "mov" for 0x40105e>, <DisassemblerInsn "mov" for 0x401063>, <DisassemblerInsn "mov" for 0x401067>, <DisassemblerInsn "mov" for 0x40106a>, <DisassemblerInsn "movsxd" for 0x40106d>, <DisassemblerInsn "shl" for 0x401070>, <DisassemblerInsn "add" for 0x401074>, <DisassemblerInsn "add" for 0x401077>, <DisassemblerInsn "mov" for 0x40107b>, <DisassemblerInsn "mov" for 0x40107e>, <DisassemblerInsn "mov" for 0x401082>, <DisassemblerInsn "mov" for 0x401086>, <DisassemblerInsn "mov" for 0x401089>, <DisassemblerInsn "add" for 0x40108d>, <DisassemblerInsn "mov" for 0x401091>, <DisassemblerInsn "movsxd" for 0x401094>, <DisassemblerInsn "shl" for 0x401097>, <DisassemblerInsn "add" for 0x40109b>, <DisassemblerInsn "add" for 0x40109e>, <DisassemblerInsn "mov" for 0x4010a2>, <DisassemblerInsn "call" for 0x4010a4>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400f7a>, <DisassemblerInsn "mov" for 0x400f7f>, <DisassemblerInsn "add" for 0x400f82>, <DisassemblerInsn "mov" for 0x400f86>, <DisassemblerInsn "mov" for 0x400f8b>, <DisassemblerInsn "mov" for 0x400f8e>, <DisassemblerInsn "mov" for 0x400f92>, <DisassemblerInsn "add" for 0x400f95>, <DisassemblerInsn "mov" for 0x400f99>, <DisassemblerInsn "mov" for 0x400f9e>, <DisassemblerInsn "cmp" for 0x400fa3>, <DisassemblerInsn "mov" for 0x400fa6>, <DisassemblerInsn "ja" for 0x400faa>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4010eb>, <DisassemblerInsn "add" for 0x4010ef>, <DisassemblerInsn "ret" for 0x4010f3>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400fe2>, <DisassemblerInsn "mov" for 0x400fe7>, <DisassemblerInsn "mov" for 0x400fec>, <DisassemblerInsn "mov" for 0x400ff1>, <DisassemblerInsn "mov" for 0x400ff6>, <DisassemblerInsn "mov" for 0x400ff8>, <DisassemblerInsn "add" for 0x400ffb>, <DisassemblerInsn "mov" for 0x400fff>, <DisassemblerInsn "add" for 0x401002>, <DisassemblerInsn "mov" for 0x401006>, <DisassemblerInsn "add" for 0x401009>, <DisassemblerInsn "cmp" for 0x40100d>, <DisassemblerInsn "cmove" for 0x401010>, <DisassemblerInsn "mov" for 0x401014>, <DisassemblerInsn "mov" for 0x401016>, <DisassemblerInsn "mov" for 0x40101a>, <DisassemblerInsn "movsxd" for 0x40101e>, <DisassemblerInsn "shl" for 0x401021>, <DisassemblerInsn "add" for 0x401025>, <DisassemblerInsn "add" for 0x401028>, <DisassemblerInsn "mov" for 0x40102c>, <DisassemblerInsn "add" for 0x40102e>, <DisassemblerInsn "call" for 0x401031>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400fb0>, <DisassemblerInsn "mov" for 0x400fb5>, <DisassemblerInsn "mov" for 0x400fba>, <DisassemblerInsn "mov" for 0x400fbe>, <DisassemblerInsn "add" for 0x400fc1>, <DisassemblerInsn "mov" for 0x400fc5>, <DisassemblerInsn "mov" for 0x400fca>, <DisassemblerInsn "movsxd" for 0x400fce>, <DisassemblerInsn "shl" for 0x400fd1>, <DisassemblerInsn "add" for 0x400fd5>, <DisassemblerInsn "mov" for 0x400fd8>, <DisassemblerInsn "xor" for 0x400fdb>, <DisassemblerInsn "call" for 0x400fdd>]'}], 'cfg_block_detailed_info': [{'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x58>', '<mov~~qword ptr [rsp + 0x30], rsi>', '<mov~~rax, qword ptr [rdi + 0x18]>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x20>', '<mov~~qword ptr [rsp + 0x40], rax>', '<mov~~rcx, qword ptr [rdi + 0x20]>', '<mov~~qword ptr [rsp + 0x48], rcx>', '<mov~~eax, 0xfffffffb>', '<cmp~~dword ptr [rcx + 0x54], 0>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jne~~0x4010eb>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~eax, 0xfffffff4>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jl~~0x4010eb>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<mov~~esi, eax>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rdi, qword ptr [rcx]>', '<mov~~ecx, dword ptr [rax]>', '<movsxd~~r8, ecx>', '<shl~~r8, 5>', '<add~~rdi, r8>', '<add~~rdi, 0x18>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~qword ptr [rdx], rdi>', '<mov~~dword ptr [rdx + 0x1c], 0>', '<add~~esi, 8>', '<mov~~dword ptr [rdx + 0x18], esi>', '<add~~ecx, 1>', '<mov~~dword ptr [rax], ecx>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x54], eax>', '<mov~~eax, dword ptr [rsp + 0x54]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x18]>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rsp + 8]>', '<mov~~rsi, qword ptr [rsp + 0x40]>', '<mov~~r8d, dword ptr [rsp + 0x14]>', '<mov~~rdi, qword ptr [rdx + 0x10]>', '<mov~~dword ptr [rdi], r8d>', '<mov~~rdi, qword ptr [rax]>', '<movsxd~~r8, dword ptr [rcx]>', '<shl~~r8, 5>', '<add~~rdi, r8>', '<add~~rdi, 0x10>', '<mov~~r8d, dword ptr [rdi]>', '<mov~~rdi, qword ptr [rdx + 0x10]>', '<mov~~dword ptr [rdi + 4], r8d>', '<mov~~rdi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rdx + 0x10]>', '<add~~rsi, 8>', '<mov~~rax, qword ptr [rax]>', '<movsxd~~rcx, dword ptr [rcx]>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<add~~rax, 0xc>', '<mov~~edx, dword ptr [rax]>', '<call~~0x500020>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~rax, rdx>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~ecx, dword ptr [rdx + 0xc]>', '<mov~~dword ptr [rsp + 0x24], ecx>', '<mov~~rax, rdx>', '<add~~rax, 0x58>', '<mov~~qword ptr [rsp + 0x28], rax>', '<mov~~eax, 0xfffffffb>', '<cmp~~ecx, dword ptr [rdx + 0x58]>', '<mov~~dword ptr [rsp + 0x54], eax>', '<ja~~0x4010eb>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x18]>', '<mov~~rdx, qword ptr [rsp + 0x28]>', '<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~r8d, dword ptr [rdx]>', '<add~~r8d, -1>', '<mov~~rsi, rax>', '<add~~rsi, 0x54>', '<mov~~rdx, rax>', '<add~~rdx, 0x50>', '<cmp~~ecx, r8d>', '<cmove~~rdx, rsi>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0x14], edx>', '<mov~~rax, qword ptr [rax + 0x10]>', '<movsxd~~rcx, ecx>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<add~~rax, 0xc>', '<mov~~esi, dword ptr [rax]>', '<add~~esi, 8>', '<call~~0x500050>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~ecx, dword ptr [rsp + 0x24]>', '<mov~~rdx, rax>', '<add~~rdx, 0x10>', '<mov~~qword ptr [rsp + 8], rdx>', '<mov~~rax, qword ptr [rax + 0x10]>', '<movsxd~~rcx, ecx>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<mov~~rsi, qword ptr [rax]>', '<xor~~edx, edx>', '<call~~0x500000>']}], 'cfg_edge_info': [(0, 1), (1, 2), (8, 10), (5, 7), (0, 2), (7, 8), (7, 2), (1, 3), (3, 5)], 'cdg_edge_info': [(0, 1), (1, 2), (1, 5), (7, 10), (0, 2), (1, 7), (7, 2), (1, 3), (7, 8)], 'ddg_edge_info': [(0, 1), (3, 8), (0, 10), (5, 8), (1, 5), (7, 10), (0, 3), (1, 8), (8, 10), (5, 7), (5, 10), (1, 10), (0, 5), (0, 8), (1, 3), (3, 5)]}]}
{'ape_read_packet': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 14, 'instruction': 'movq\t%rdx, %rax'}, {'instIndex': 15, 'instruction': 'addq\t$12, %rax'}, {'instIndex': 16, 'instruction': 'movq\t%rax, 0x18(%rsp)                  # 8-byte Spill'}, {'instIndex': 17, 'instruction': 'movl\t12(%rdx), %ecx'}, {'instIndex': 18, 'instruction': 'movl\t%ecx, 0x24(%rsp)                  # 4-byte Spill'}, {'instIndex': 19, 'instruction': 'movq\t%rdx, %rax'}, {'instIndex': 20, 'instruction': 'addq\t$0x58, %rax'}, {'instIndex': 21, 'instruction': 'movq\t%rax, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 22, 'instruction': 'movl\t$0xfffffffb, %eax               # imm = 0xFFFFFFFB'}, {'instIndex': 23, 'instruction': 'cmpl\t0x58(%rdx), %ecx'}, {'instIndex': 24, 'instruction': 'movl\t%eax, 0x54(%rsp)                  # 4-byte Spill'}, {'instIndex': 25, 'instruction': 'ja\t.LBB2_4'}, {'instIndex': 29, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 30, 'instruction': 'addq\t$0x10, %rdx'}, {'instIndex': 31, 'instruction': 'movq\t%rdx, 8(%rsp)                   # 8-byte Spill'}, {'instIndex': 32, 'instruction': 'movq\t0x10(%rax), %rax'}, {'instIndex': 33, 'instruction': 'movslq\t%ecx, %rcx'}, {'instIndex': 34, 'instruction': 'shlq\t$5, %rcx'}, {'instIndex': 35, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 36, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 37, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 38, 'instruction': 'callq\tavio_seek@PLT'}, {'instIndex': 43, 'instruction': 'movl\t(%rcx), %ecx'}, {'instIndex': 44, 'instruction': 'movl\t(%rdx), %r8d'}, {'instIndex': 45, 'instruction': 'addl\t$-1, %r8d'}, {'instIndex': 46, 'instruction': 'movq\t%rax, %rsi'}, {'instIndex': 47, 'instruction': 'addq\t$0x54, %rsi'}, {'instIndex': 48, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 49, 'instruction': 'addq\t$0x50, %rdx'}, {'instIndex': 50, 'instruction': 'cmpl\t%r8d, %ecx'}, {'instIndex': 51, 'instruction': 'cmoveq\t%rsi, %rdx'}]}]}
The case of compiler clang with optimization O2.
Patched source code file: ape.c
Patched function: 1---static int ape_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_before/O2/ape.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_before/O2/ape.s---ape_read_packet---before
function id: 2
function flag: True
There are 114 instructions for function: ape_read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '361', 'end': 368}, 'before': {'start': '361', 'end': 367}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 14, 'instruction': 'movq\t%rdx, %rax'}, {'instIndex': 15, 'instruction': 'addq\t$12, %rax'}, {'instIndex': 16, 'instruction': 'movq\t%rax, 0x18(%rsp)                  # 8-byte Spill'}, {'instIndex': 17, 'instruction': 'movl\t12(%rdx), %ecx'}, {'instIndex': 18, 'instruction': 'movl\t%ecx, 0x24(%rsp)                  # 4-byte Spill'}, {'instIndex': 19, 'instruction': 'movq\t%rdx, %rax'}, {'instIndex': 20, 'instruction': 'addq\t$0x58, %rax'}, {'instIndex': 21, 'instruction': 'movq\t%rax, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 22, 'instruction': 'movl\t$0xfffffffb, %eax               # imm = 0xFFFFFFFB'}, {'instIndex': 23, 'instruction': 'cmpl\t0x58(%rdx), %ecx'}, {'instIndex': 24, 'instruction': 'movl\t%eax, 0x54(%rsp)                  # 4-byte Spill'}, {'instIndex': 25, 'instruction': 'ja\t.LBB2_4'}, {'instIndex': 29, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 30, 'instruction': 'addq\t$0x10, %rdx'}, {'instIndex': 31, 'instruction': 'movq\t%rdx, 8(%rsp)                   # 8-byte Spill'}, {'instIndex': 32, 'instruction': 'movq\t0x10(%rax), %rax'}, {'instIndex': 33, 'instruction': 'movslq\t%ecx, %rcx'}, {'instIndex': 34, 'instruction': 'shlq\t$5, %rcx'}, {'instIndex': 35, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 36, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 37, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 38, 'instruction': 'callq\tavio_seek@PLT'}, {'instIndex': 43, 'instruction': 'movl\t(%rcx), %ecx'}, {'instIndex': 44, 'instruction': 'movl\t(%rdx), %r8d'}, {'instIndex': 45, 'instruction': 'addl\t$-1, %r8d'}, {'instIndex': 46, 'instruction': 'movq\t%rax, %rsi'}, {'instIndex': 47, 'instruction': 'addq\t$0x54, %rsi'}, {'instIndex': 48, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 49, 'instruction': 'addq\t$0x50, %rdx'}, {'instIndex': 50, 'instruction': 'cmpl\t%r8d, %ecx'}, {'instIndex': 51, 'instruction': 'cmoveq\t%rsi, %rdx'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_before/O2/ape.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_before/O2/ape.o---before
The extraction of function: ape_read_packet
Analyzing the binaries to generate subCFGs from patched function ...
It has 139 nodes and 275 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 114 instructions in binary file.
[4198442, 4198496, 4198546]
The execution time of patched subCFG information extraction via angr: 0:00:00.202461
{'ape_read_packet': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401060>, <DisassemblerInsn "mov" for 0x401065>, <DisassemblerInsn "mov" for 0x40106a>, <DisassemblerInsn "mov" for 0x40106e>, <DisassemblerInsn "add" for 0x401071>, <DisassemblerInsn "mov" for 0x401075>, <DisassemblerInsn "mov" for 0x40107a>, <DisassemblerInsn "movsxd" for 0x40107e>, <DisassemblerInsn "shl" for 0x401081>, <DisassemblerInsn "add" for 0x401085>, <DisassemblerInsn "mov" for 0x401088>, <DisassemblerInsn "xor" for 0x40108b>, <DisassemblerInsn "call" for 0x40108d>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40102a>, <DisassemblerInsn "mov" for 0x40102f>, <DisassemblerInsn "add" for 0x401032>, <DisassemblerInsn "mov" for 0x401036>, <DisassemblerInsn "mov" for 0x40103b>, <DisassemblerInsn "mov" for 0x40103e>, <DisassemblerInsn "mov" for 0x401042>, <DisassemblerInsn "add" for 0x401045>, <DisassemblerInsn "mov" for 0x401049>, <DisassemblerInsn "mov" for 0x40104e>, <DisassemblerInsn "cmp" for 0x401053>, <DisassemblerInsn "mov" for 0x401056>, <DisassemblerInsn "ja" for 0x40105a>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400ff0>, <DisassemblerInsn "mov" for 0x400ff4>, <DisassemblerInsn "mov" for 0x400ff9>, <DisassemblerInsn "mov" for 0x400ffd>, <DisassemblerInsn "mov" for 0x401002>, <DisassemblerInsn "add" for 0x401005>, <DisassemblerInsn "mov" for 0x401009>, <DisassemblerInsn "mov" for 0x40100e>, <DisassemblerInsn "mov" for 0x401012>, <DisassemblerInsn "mov" for 0x401017>, <DisassemblerInsn "cmp" for 0x40101c>, <DisassemblerInsn "mov" for 0x401020>, <DisassemblerInsn "jne" for 0x401024>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4010e6>, <DisassemblerInsn "mov" for 0x4010e8>, <DisassemblerInsn "cmp" for 0x4010ed>, <DisassemblerInsn "mov" for 0x4010f0>, <DisassemblerInsn "jl" for 0x4010f4>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401092>, <DisassemblerInsn "mov" for 0x401097>, <DisassemblerInsn "mov" for 0x40109c>, <DisassemblerInsn "mov" for 0x4010a1>, <DisassemblerInsn "mov" for 0x4010a6>, <DisassemblerInsn "mov" for 0x4010a8>, <DisassemblerInsn "add" for 0x4010ab>, <DisassemblerInsn "mov" for 0x4010af>, <DisassemblerInsn "add" for 0x4010b2>, <DisassemblerInsn "mov" for 0x4010b6>, <DisassemblerInsn "add" for 0x4010b9>, <DisassemblerInsn "cmp" for 0x4010bd>, <DisassemblerInsn "cmove" for 0x4010c0>, <DisassemblerInsn "mov" for 0x4010c4>, <DisassemblerInsn "mov" for 0x4010c6>, <DisassemblerInsn "mov" for 0x4010ca>, <DisassemblerInsn "movsxd" for 0x4010ce>, <DisassemblerInsn "shl" for 0x4010d1>, <DisassemblerInsn "add" for 0x4010d5>, <DisassemblerInsn "add" for 0x4010d8>, <DisassemblerInsn "mov" for 0x4010dc>, <DisassemblerInsn "add" for 0x4010de>, <DisassemblerInsn "call" for 0x4010e1>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40119b>, <DisassemblerInsn "add" for 0x40119f>, <DisassemblerInsn "ret" for 0x4011a3>]'}], 'cfg_block_detailed_info': [{'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~ecx, dword ptr [rsp + 0x24]>', '<mov~~rdx, rax>', '<add~~rdx, 0x10>', '<mov~~qword ptr [rsp + 8], rdx>', '<mov~~rax, qword ptr [rax + 0x10]>', '<movsxd~~rcx, ecx>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<mov~~rsi, qword ptr [rax]>', '<xor~~edx, edx>', '<call~~0x500000>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~rax, rdx>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~ecx, dword ptr [rdx + 0xc]>', '<mov~~dword ptr [rsp + 0x24], ecx>', '<mov~~rax, rdx>', '<add~~rax, 0x58>', '<mov~~qword ptr [rsp + 0x28], rax>', '<mov~~eax, 0xfffffffb>', '<cmp~~ecx, dword ptr [rdx + 0x58]>', '<mov~~dword ptr [rsp + 0x54], eax>', '<ja~~0x40119b>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x58>', '<mov~~qword ptr [rsp + 0x30], rsi>', '<mov~~rax, qword ptr [rdi + 0x18]>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x20>', '<mov~~qword ptr [rsp + 0x40], rax>', '<mov~~rcx, qword ptr [rdi + 0x20]>', '<mov~~qword ptr [rsp + 0x48], rcx>', '<mov~~eax, 0xfffffffb>', '<cmp~~dword ptr [rcx + 0x54], 0>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jne~~0x40119b>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~eax, 0xfffffff4>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jl~~0x40119b>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x18]>', '<mov~~rdx, qword ptr [rsp + 0x28]>', '<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~r8d, dword ptr [rdx]>', '<add~~r8d, -1>', '<mov~~rsi, rax>', '<add~~rsi, 0x54>', '<mov~~rdx, rax>', '<add~~rdx, 0x50>', '<cmp~~ecx, r8d>', '<cmove~~rdx, rsi>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0x14], edx>', '<mov~~rax, qword ptr [rax + 0x10]>', '<movsxd~~rcx, ecx>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<add~~rax, 0xc>', '<mov~~esi, dword ptr [rax]>', '<add~~esi, 8>', '<call~~0x500050>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<add~~rsp, 0x58>', '<ret~~>']}], 'cfg_edge_info': [(0, 1), (1, 2), (3, 4), (4, 5), (1, 3)]}]}
{'ape_read_packet': [4198442, 4198496, 4198546]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_before/O2/ape.o---before
The extraction of function: ape_read_packet
[4198442, 4198496, 4198546]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 11 nodes and 15 edges in CFGEmulated.
It has 11 nodes and 12 edges in CDG.
It has 314 nodes and 367 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4198442, 4198496, 4198546]
{4198496, 4198630, 4198442, 4198384, 4198546, 4198745, 4198650, 4198811}
[5, 3, 1, 10, 8, 2, 0, 7]
The execution time of patched slicing information extraction via angr: 0:00:01.295131
{'ape_read_packet': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401092>, <DisassemblerInsn "mov" for 0x401097>, <DisassemblerInsn "mov" for 0x40109c>, <DisassemblerInsn "mov" for 0x4010a1>, <DisassemblerInsn "mov" for 0x4010a6>, <DisassemblerInsn "mov" for 0x4010a8>, <DisassemblerInsn "add" for 0x4010ab>, <DisassemblerInsn "mov" for 0x4010af>, <DisassemblerInsn "add" for 0x4010b2>, <DisassemblerInsn "mov" for 0x4010b6>, <DisassemblerInsn "add" for 0x4010b9>, <DisassemblerInsn "cmp" for 0x4010bd>, <DisassemblerInsn "cmove" for 0x4010c0>, <DisassemblerInsn "mov" for 0x4010c4>, <DisassemblerInsn "mov" for 0x4010c6>, <DisassemblerInsn "mov" for 0x4010ca>, <DisassemblerInsn "movsxd" for 0x4010ce>, <DisassemblerInsn "shl" for 0x4010d1>, <DisassemblerInsn "add" for 0x4010d5>, <DisassemblerInsn "add" for 0x4010d8>, <DisassemblerInsn "mov" for 0x4010dc>, <DisassemblerInsn "add" for 0x4010de>, <DisassemblerInsn "call" for 0x4010e1>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401060>, <DisassemblerInsn "mov" for 0x401065>, <DisassemblerInsn "mov" for 0x40106a>, <DisassemblerInsn "mov" for 0x40106e>, <DisassemblerInsn "add" for 0x401071>, <DisassemblerInsn "mov" for 0x401075>, <DisassemblerInsn "mov" for 0x40107a>, <DisassemblerInsn "movsxd" for 0x40107e>, <DisassemblerInsn "shl" for 0x401081>, <DisassemblerInsn "add" for 0x401085>, <DisassemblerInsn "mov" for 0x401088>, <DisassemblerInsn "xor" for 0x40108b>, <DisassemblerInsn "call" for 0x40108d>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40102a>, <DisassemblerInsn "mov" for 0x40102f>, <DisassemblerInsn "add" for 0x401032>, <DisassemblerInsn "mov" for 0x401036>, <DisassemblerInsn "mov" for 0x40103b>, <DisassemblerInsn "mov" for 0x40103e>, <DisassemblerInsn "mov" for 0x401042>, <DisassemblerInsn "add" for 0x401045>, <DisassemblerInsn "mov" for 0x401049>, <DisassemblerInsn "mov" for 0x40104e>, <DisassemblerInsn "cmp" for 0x401053>, <DisassemblerInsn "mov" for 0x401056>, <DisassemblerInsn "ja" for 0x40105a>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401159>, <DisassemblerInsn "mov" for 0x40115e>, <DisassemblerInsn "mov" for 0x401163>, <DisassemblerInsn "mov" for 0x401165>, <DisassemblerInsn "mov" for 0x40116a>, <DisassemblerInsn "mov" for 0x40116d>, <DisassemblerInsn "movsxd" for 0x40116f>, <DisassemblerInsn "shl" for 0x401172>, <DisassemblerInsn "add" for 0x401176>, <DisassemblerInsn "add" for 0x401179>, <DisassemblerInsn "mov" for 0x40117d>, <DisassemblerInsn "mov" for 0x401180>, <DisassemblerInsn "mov" for 0x401183>, <DisassemblerInsn "add" for 0x40118a>, <DisassemblerInsn "mov" for 0x40118d>, <DisassemblerInsn "add" for 0x401190>, <DisassemblerInsn "mov" for 0x401193>, <DisassemblerInsn "xor" for 0x401195>, <DisassemblerInsn "mov" for 0x401197>, <DisassemblerInsn "mov" for 0x40119b>, <DisassemblerInsn "add" for 0x40119f>, <DisassemblerInsn "ret" for 0x4011a3>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4010fa>, <DisassemblerInsn "mov" for 0x4010ff>, <DisassemblerInsn "mov" for 0x401104>, <DisassemblerInsn "mov" for 0x401109>, <DisassemblerInsn "mov" for 0x40110e>, <DisassemblerInsn "mov" for 0x401113>, <DisassemblerInsn "mov" for 0x401117>, <DisassemblerInsn "mov" for 0x40111a>, <DisassemblerInsn "movsxd" for 0x40111d>, <DisassemblerInsn "shl" for 0x401120>, <DisassemblerInsn "add" for 0x401124>, <DisassemblerInsn "add" for 0x401127>, <DisassemblerInsn "mov" for 0x40112b>, <DisassemblerInsn "mov" for 0x40112e>, <DisassemblerInsn "mov" for 0x401132>, <DisassemblerInsn "mov" for 0x401136>, <DisassemblerInsn "mov" for 0x401139>, <DisassemblerInsn "add" for 0x40113d>, <DisassemblerInsn "mov" for 0x401141>, <DisassemblerInsn "movsxd" for 0x401144>, <DisassemblerInsn "shl" for 0x401147>, <DisassemblerInsn "add" for 0x40114b>, <DisassemblerInsn "add" for 0x40114e>, <DisassemblerInsn "mov" for 0x401152>, <DisassemblerInsn "call" for 0x401154>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40119b>, <DisassemblerInsn "add" for 0x40119f>, <DisassemblerInsn "ret" for 0x4011a3>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400ff0>, <DisassemblerInsn "mov" for 0x400ff4>, <DisassemblerInsn "mov" for 0x400ff9>, <DisassemblerInsn "mov" for 0x400ffd>, <DisassemblerInsn "mov" for 0x401002>, <DisassemblerInsn "add" for 0x401005>, <DisassemblerInsn "mov" for 0x401009>, <DisassemblerInsn "mov" for 0x40100e>, <DisassemblerInsn "mov" for 0x401012>, <DisassemblerInsn "mov" for 0x401017>, <DisassemblerInsn "cmp" for 0x40101c>, <DisassemblerInsn "mov" for 0x401020>, <DisassemblerInsn "jne" for 0x401024>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4010e6>, <DisassemblerInsn "mov" for 0x4010e8>, <DisassemblerInsn "cmp" for 0x4010ed>, <DisassemblerInsn "mov" for 0x4010f0>, <DisassemblerInsn "jl" for 0x4010f4>]'}], 'cfg_block_detailed_info': [{'block_Idx': 5, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x18]>', '<mov~~rdx, qword ptr [rsp + 0x28]>', '<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~r8d, dword ptr [rdx]>', '<add~~r8d, -1>', '<mov~~rsi, rax>', '<add~~rsi, 0x54>', '<mov~~rdx, rax>', '<add~~rdx, 0x50>', '<cmp~~ecx, r8d>', '<cmove~~rdx, rsi>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0x14], edx>', '<mov~~rax, qword ptr [rax + 0x10]>', '<movsxd~~rcx, ecx>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<add~~rax, 0xc>', '<mov~~esi, dword ptr [rax]>', '<add~~esi, 8>', '<call~~0x500050>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~ecx, dword ptr [rsp + 0x24]>', '<mov~~rdx, rax>', '<add~~rdx, 0x10>', '<mov~~qword ptr [rsp + 8], rdx>', '<mov~~rax, qword ptr [rax + 0x10]>', '<movsxd~~rcx, ecx>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<mov~~rsi, qword ptr [rax]>', '<xor~~edx, edx>', '<call~~0x500000>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~rax, rdx>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~ecx, dword ptr [rdx + 0xc]>', '<mov~~dword ptr [rsp + 0x24], ecx>', '<mov~~rax, rdx>', '<add~~rax, 0x58>', '<mov~~qword ptr [rsp + 0x28], rax>', '<mov~~eax, 0xfffffffb>', '<cmp~~ecx, dword ptr [rdx + 0x58]>', '<mov~~dword ptr [rsp + 0x54], eax>', '<ja~~0x40119b>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<mov~~esi, eax>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rdi, qword ptr [rcx]>', '<mov~~ecx, dword ptr [rax]>', '<movsxd~~r8, ecx>', '<shl~~r8, 5>', '<add~~rdi, r8>', '<add~~rdi, 0x18>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~qword ptr [rdx], rdi>', '<mov~~dword ptr [rdx + 0x1c], 0>', '<add~~esi, 8>', '<mov~~dword ptr [rdx + 0x18], esi>', '<add~~ecx, 1>', '<mov~~dword ptr [rax], ecx>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x54], eax>', '<mov~~eax, dword ptr [rsp + 0x54]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x18]>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rsp + 8]>', '<mov~~rsi, qword ptr [rsp + 0x40]>', '<mov~~r8d, dword ptr [rsp + 0x14]>', '<mov~~rdi, qword ptr [rdx + 0x10]>', '<mov~~dword ptr [rdi], r8d>', '<mov~~rdi, qword ptr [rax]>', '<movsxd~~r8, dword ptr [rcx]>', '<shl~~r8, 5>', '<add~~rdi, r8>', '<add~~rdi, 0x10>', '<mov~~r8d, dword ptr [rdi]>', '<mov~~rdi, qword ptr [rdx + 0x10]>', '<mov~~dword ptr [rdi + 4], r8d>', '<mov~~rdi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rdx + 0x10]>', '<add~~rsi, 8>', '<mov~~rax, qword ptr [rax]>', '<movsxd~~rcx, dword ptr [rcx]>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<add~~rax, 0xc>', '<mov~~edx, dword ptr [rax]>', '<call~~0x500020>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x58>', '<mov~~qword ptr [rsp + 0x30], rsi>', '<mov~~rax, qword ptr [rdi + 0x18]>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x20>', '<mov~~qword ptr [rsp + 0x40], rax>', '<mov~~rcx, qword ptr [rdi + 0x20]>', '<mov~~qword ptr [rsp + 0x48], rcx>', '<mov~~eax, 0xfffffffb>', '<cmp~~dword ptr [rcx + 0x54], 0>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jne~~0x40119b>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~eax, 0xfffffff4>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jl~~0x40119b>']}], 'cfg_edge_info': [(0, 1), (1, 2), (8, 10), (5, 7), (0, 2), (7, 2), (1, 3), (3, 5), (7, 8)], 'cdg_edge_info': [(0, 1), (1, 2), (1, 5), (7, 10), (0, 2), (1, 7), (7, 2), (1, 3), (7, 8)], 'ddg_edge_info': [(0, 1), (3, 8), (0, 10), (5, 8), (1, 5), (7, 10), (0, 3), (8, 10), (1, 8), (5, 7), (5, 10), (0, 5), (1, 10), (0, 8), (1, 3), (3, 5)]}]}
{'ape_read_packet': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 14, 'instruction': 'movq\t%rdx, %rax'}, {'instIndex': 15, 'instruction': 'addq\t$12, %rax'}, {'instIndex': 16, 'instruction': 'movq\t%rax, 0x18(%rsp)                  # 8-byte Spill'}, {'instIndex': 17, 'instruction': 'movl\t12(%rdx), %ecx'}, {'instIndex': 18, 'instruction': 'movl\t%ecx, 0x24(%rsp)                  # 4-byte Spill'}, {'instIndex': 19, 'instruction': 'movq\t%rdx, %rax'}, {'instIndex': 20, 'instruction': 'addq\t$0x58, %rax'}, {'instIndex': 21, 'instruction': 'movq\t%rax, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 22, 'instruction': 'movl\t$0xfffffffb, %eax               # imm = 0xFFFFFFFB'}, {'instIndex': 23, 'instruction': 'cmpl\t0x58(%rdx), %ecx'}, {'instIndex': 24, 'instruction': 'movl\t%eax, 0x54(%rsp)                  # 4-byte Spill'}, {'instIndex': 25, 'instruction': 'ja\t.LBB2_4'}, {'instIndex': 29, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 30, 'instruction': 'addq\t$0x10, %rdx'}, {'instIndex': 31, 'instruction': 'movq\t%rdx, 8(%rsp)                   # 8-byte Spill'}, {'instIndex': 32, 'instruction': 'movq\t0x10(%rax), %rax'}, {'instIndex': 33, 'instruction': 'movslq\t%ecx, %rcx'}, {'instIndex': 34, 'instruction': 'shlq\t$5, %rcx'}, {'instIndex': 35, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 36, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 37, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 38, 'instruction': 'callq\tavio_seek@PLT'}, {'instIndex': 43, 'instruction': 'movl\t(%rcx), %ecx'}, {'instIndex': 44, 'instruction': 'movl\t(%rdx), %r8d'}, {'instIndex': 45, 'instruction': 'addl\t$-1, %r8d'}, {'instIndex': 46, 'instruction': 'movq\t%rax, %rsi'}, {'instIndex': 47, 'instruction': 'addq\t$0x54, %rsi'}, {'instIndex': 48, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 49, 'instruction': 'addq\t$0x50, %rdx'}, {'instIndex': 50, 'instruction': 'cmpl\t%r8d, %ecx'}, {'instIndex': 51, 'instruction': 'cmoveq\t%rsi, %rdx'}]}]}
The case of compiler clang with optimization O3.
Patched source code file: ape.c
Patched function: 1---static int ape_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_before/O3/ape.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_before/O3/ape.s---ape_read_packet---before
function id: 2
function flag: True
There are 114 instructions for function: ape_read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '361', 'end': 368}, 'before': {'start': '361', 'end': 367}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 14, 'instruction': 'movq\t%rdx, %rax'}, {'instIndex': 15, 'instruction': 'addq\t$12, %rax'}, {'instIndex': 16, 'instruction': 'movq\t%rax, 0x18(%rsp)                  # 8-byte Spill'}, {'instIndex': 17, 'instruction': 'movl\t12(%rdx), %ecx'}, {'instIndex': 18, 'instruction': 'movl\t%ecx, 0x24(%rsp)                  # 4-byte Spill'}, {'instIndex': 19, 'instruction': 'movq\t%rdx, %rax'}, {'instIndex': 20, 'instruction': 'addq\t$0x58, %rax'}, {'instIndex': 21, 'instruction': 'movq\t%rax, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 22, 'instruction': 'movl\t$0xfffffffb, %eax               # imm = 0xFFFFFFFB'}, {'instIndex': 23, 'instruction': 'cmpl\t0x58(%rdx), %ecx'}, {'instIndex': 24, 'instruction': 'movl\t%eax, 0x54(%rsp)                  # 4-byte Spill'}, {'instIndex': 25, 'instruction': 'ja\t.LBB2_4'}, {'instIndex': 29, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 30, 'instruction': 'addq\t$0x10, %rdx'}, {'instIndex': 31, 'instruction': 'movq\t%rdx, 8(%rsp)                   # 8-byte Spill'}, {'instIndex': 32, 'instruction': 'movq\t0x10(%rax), %rax'}, {'instIndex': 33, 'instruction': 'movslq\t%ecx, %rcx'}, {'instIndex': 34, 'instruction': 'shlq\t$5, %rcx'}, {'instIndex': 35, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 36, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 37, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 38, 'instruction': 'callq\tavio_seek@PLT'}, {'instIndex': 43, 'instruction': 'movl\t(%rcx), %ecx'}, {'instIndex': 44, 'instruction': 'movl\t(%rdx), %r8d'}, {'instIndex': 45, 'instruction': 'addl\t$-1, %r8d'}, {'instIndex': 46, 'instruction': 'movq\t%rax, %rsi'}, {'instIndex': 47, 'instruction': 'addq\t$0x54, %rsi'}, {'instIndex': 48, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 49, 'instruction': 'addq\t$0x50, %rdx'}, {'instIndex': 50, 'instruction': 'cmpl\t%r8d, %ecx'}, {'instIndex': 51, 'instruction': 'cmoveq\t%rsi, %rdx'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_before/O3/ape.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_before/O3/ape.o---before
The extraction of function: ape_read_packet
Analyzing the binaries to generate subCFGs from patched function ...
It has 139 nodes and 275 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 114 instructions in binary file.
[4198442, 4198496, 4198546]
The execution time of patched subCFG information extraction via angr: 0:00:00.199262
{'ape_read_packet': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401060>, <DisassemblerInsn "mov" for 0x401065>, <DisassemblerInsn "mov" for 0x40106a>, <DisassemblerInsn "mov" for 0x40106e>, <DisassemblerInsn "add" for 0x401071>, <DisassemblerInsn "mov" for 0x401075>, <DisassemblerInsn "mov" for 0x40107a>, <DisassemblerInsn "movsxd" for 0x40107e>, <DisassemblerInsn "shl" for 0x401081>, <DisassemblerInsn "add" for 0x401085>, <DisassemblerInsn "mov" for 0x401088>, <DisassemblerInsn "xor" for 0x40108b>, <DisassemblerInsn "call" for 0x40108d>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40102a>, <DisassemblerInsn "mov" for 0x40102f>, <DisassemblerInsn "add" for 0x401032>, <DisassemblerInsn "mov" for 0x401036>, <DisassemblerInsn "mov" for 0x40103b>, <DisassemblerInsn "mov" for 0x40103e>, <DisassemblerInsn "mov" for 0x401042>, <DisassemblerInsn "add" for 0x401045>, <DisassemblerInsn "mov" for 0x401049>, <DisassemblerInsn "mov" for 0x40104e>, <DisassemblerInsn "cmp" for 0x401053>, <DisassemblerInsn "mov" for 0x401056>, <DisassemblerInsn "ja" for 0x40105a>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400ff0>, <DisassemblerInsn "mov" for 0x400ff4>, <DisassemblerInsn "mov" for 0x400ff9>, <DisassemblerInsn "mov" for 0x400ffd>, <DisassemblerInsn "mov" for 0x401002>, <DisassemblerInsn "add" for 0x401005>, <DisassemblerInsn "mov" for 0x401009>, <DisassemblerInsn "mov" for 0x40100e>, <DisassemblerInsn "mov" for 0x401012>, <DisassemblerInsn "mov" for 0x401017>, <DisassemblerInsn "cmp" for 0x40101c>, <DisassemblerInsn "mov" for 0x401020>, <DisassemblerInsn "jne" for 0x401024>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4010e6>, <DisassemblerInsn "mov" for 0x4010e8>, <DisassemblerInsn "cmp" for 0x4010ed>, <DisassemblerInsn "mov" for 0x4010f0>, <DisassemblerInsn "jl" for 0x4010f4>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401092>, <DisassemblerInsn "mov" for 0x401097>, <DisassemblerInsn "mov" for 0x40109c>, <DisassemblerInsn "mov" for 0x4010a1>, <DisassemblerInsn "mov" for 0x4010a6>, <DisassemblerInsn "mov" for 0x4010a8>, <DisassemblerInsn "add" for 0x4010ab>, <DisassemblerInsn "mov" for 0x4010af>, <DisassemblerInsn "add" for 0x4010b2>, <DisassemblerInsn "mov" for 0x4010b6>, <DisassemblerInsn "add" for 0x4010b9>, <DisassemblerInsn "cmp" for 0x4010bd>, <DisassemblerInsn "cmove" for 0x4010c0>, <DisassemblerInsn "mov" for 0x4010c4>, <DisassemblerInsn "mov" for 0x4010c6>, <DisassemblerInsn "mov" for 0x4010ca>, <DisassemblerInsn "movsxd" for 0x4010ce>, <DisassemblerInsn "shl" for 0x4010d1>, <DisassemblerInsn "add" for 0x4010d5>, <DisassemblerInsn "add" for 0x4010d8>, <DisassemblerInsn "mov" for 0x4010dc>, <DisassemblerInsn "add" for 0x4010de>, <DisassemblerInsn "call" for 0x4010e1>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40119b>, <DisassemblerInsn "add" for 0x40119f>, <DisassemblerInsn "ret" for 0x4011a3>]'}], 'cfg_block_detailed_info': [{'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~ecx, dword ptr [rsp + 0x24]>', '<mov~~rdx, rax>', '<add~~rdx, 0x10>', '<mov~~qword ptr [rsp + 8], rdx>', '<mov~~rax, qword ptr [rax + 0x10]>', '<movsxd~~rcx, ecx>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<mov~~rsi, qword ptr [rax]>', '<xor~~edx, edx>', '<call~~0x500000>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~rax, rdx>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~ecx, dword ptr [rdx + 0xc]>', '<mov~~dword ptr [rsp + 0x24], ecx>', '<mov~~rax, rdx>', '<add~~rax, 0x58>', '<mov~~qword ptr [rsp + 0x28], rax>', '<mov~~eax, 0xfffffffb>', '<cmp~~ecx, dword ptr [rdx + 0x58]>', '<mov~~dword ptr [rsp + 0x54], eax>', '<ja~~0x40119b>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x58>', '<mov~~qword ptr [rsp + 0x30], rsi>', '<mov~~rax, qword ptr [rdi + 0x18]>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x20>', '<mov~~qword ptr [rsp + 0x40], rax>', '<mov~~rcx, qword ptr [rdi + 0x20]>', '<mov~~qword ptr [rsp + 0x48], rcx>', '<mov~~eax, 0xfffffffb>', '<cmp~~dword ptr [rcx + 0x54], 0>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jne~~0x40119b>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~eax, 0xfffffff4>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jl~~0x40119b>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x18]>', '<mov~~rdx, qword ptr [rsp + 0x28]>', '<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~r8d, dword ptr [rdx]>', '<add~~r8d, -1>', '<mov~~rsi, rax>', '<add~~rsi, 0x54>', '<mov~~rdx, rax>', '<add~~rdx, 0x50>', '<cmp~~ecx, r8d>', '<cmove~~rdx, rsi>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0x14], edx>', '<mov~~rax, qword ptr [rax + 0x10]>', '<movsxd~~rcx, ecx>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<add~~rax, 0xc>', '<mov~~esi, dword ptr [rax]>', '<add~~esi, 8>', '<call~~0x500050>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<add~~rsp, 0x58>', '<ret~~>']}], 'cfg_edge_info': [(0, 1), (1, 2), (3, 4), (4, 5), (1, 3)]}]}
{'ape_read_packet': [4198442, 4198496, 4198546]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_before/O3/ape.o---before
The extraction of function: ape_read_packet
[4198442, 4198496, 4198546]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 11 nodes and 15 edges in CFGEmulated.
It has 11 nodes and 12 edges in CDG.
It has 314 nodes and 367 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4198442, 4198496, 4198546]
{4198496, 4198630, 4198442, 4198384, 4198546, 4198745, 4198650, 4198811}
[5, 3, 1, 10, 8, 2, 0, 7]
The execution time of patched slicing information extraction via angr: 0:00:01.330770
{'ape_read_packet': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401092>, <DisassemblerInsn "mov" for 0x401097>, <DisassemblerInsn "mov" for 0x40109c>, <DisassemblerInsn "mov" for 0x4010a1>, <DisassemblerInsn "mov" for 0x4010a6>, <DisassemblerInsn "mov" for 0x4010a8>, <DisassemblerInsn "add" for 0x4010ab>, <DisassemblerInsn "mov" for 0x4010af>, <DisassemblerInsn "add" for 0x4010b2>, <DisassemblerInsn "mov" for 0x4010b6>, <DisassemblerInsn "add" for 0x4010b9>, <DisassemblerInsn "cmp" for 0x4010bd>, <DisassemblerInsn "cmove" for 0x4010c0>, <DisassemblerInsn "mov" for 0x4010c4>, <DisassemblerInsn "mov" for 0x4010c6>, <DisassemblerInsn "mov" for 0x4010ca>, <DisassemblerInsn "movsxd" for 0x4010ce>, <DisassemblerInsn "shl" for 0x4010d1>, <DisassemblerInsn "add" for 0x4010d5>, <DisassemblerInsn "add" for 0x4010d8>, <DisassemblerInsn "mov" for 0x4010dc>, <DisassemblerInsn "add" for 0x4010de>, <DisassemblerInsn "call" for 0x4010e1>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401060>, <DisassemblerInsn "mov" for 0x401065>, <DisassemblerInsn "mov" for 0x40106a>, <DisassemblerInsn "mov" for 0x40106e>, <DisassemblerInsn "add" for 0x401071>, <DisassemblerInsn "mov" for 0x401075>, <DisassemblerInsn "mov" for 0x40107a>, <DisassemblerInsn "movsxd" for 0x40107e>, <DisassemblerInsn "shl" for 0x401081>, <DisassemblerInsn "add" for 0x401085>, <DisassemblerInsn "mov" for 0x401088>, <DisassemblerInsn "xor" for 0x40108b>, <DisassemblerInsn "call" for 0x40108d>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40102a>, <DisassemblerInsn "mov" for 0x40102f>, <DisassemblerInsn "add" for 0x401032>, <DisassemblerInsn "mov" for 0x401036>, <DisassemblerInsn "mov" for 0x40103b>, <DisassemblerInsn "mov" for 0x40103e>, <DisassemblerInsn "mov" for 0x401042>, <DisassemblerInsn "add" for 0x401045>, <DisassemblerInsn "mov" for 0x401049>, <DisassemblerInsn "mov" for 0x40104e>, <DisassemblerInsn "cmp" for 0x401053>, <DisassemblerInsn "mov" for 0x401056>, <DisassemblerInsn "ja" for 0x40105a>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401159>, <DisassemblerInsn "mov" for 0x40115e>, <DisassemblerInsn "mov" for 0x401163>, <DisassemblerInsn "mov" for 0x401165>, <DisassemblerInsn "mov" for 0x40116a>, <DisassemblerInsn "mov" for 0x40116d>, <DisassemblerInsn "movsxd" for 0x40116f>, <DisassemblerInsn "shl" for 0x401172>, <DisassemblerInsn "add" for 0x401176>, <DisassemblerInsn "add" for 0x401179>, <DisassemblerInsn "mov" for 0x40117d>, <DisassemblerInsn "mov" for 0x401180>, <DisassemblerInsn "mov" for 0x401183>, <DisassemblerInsn "add" for 0x40118a>, <DisassemblerInsn "mov" for 0x40118d>, <DisassemblerInsn "add" for 0x401190>, <DisassemblerInsn "mov" for 0x401193>, <DisassemblerInsn "xor" for 0x401195>, <DisassemblerInsn "mov" for 0x401197>, <DisassemblerInsn "mov" for 0x40119b>, <DisassemblerInsn "add" for 0x40119f>, <DisassemblerInsn "ret" for 0x4011a3>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4010fa>, <DisassemblerInsn "mov" for 0x4010ff>, <DisassemblerInsn "mov" for 0x401104>, <DisassemblerInsn "mov" for 0x401109>, <DisassemblerInsn "mov" for 0x40110e>, <DisassemblerInsn "mov" for 0x401113>, <DisassemblerInsn "mov" for 0x401117>, <DisassemblerInsn "mov" for 0x40111a>, <DisassemblerInsn "movsxd" for 0x40111d>, <DisassemblerInsn "shl" for 0x401120>, <DisassemblerInsn "add" for 0x401124>, <DisassemblerInsn "add" for 0x401127>, <DisassemblerInsn "mov" for 0x40112b>, <DisassemblerInsn "mov" for 0x40112e>, <DisassemblerInsn "mov" for 0x401132>, <DisassemblerInsn "mov" for 0x401136>, <DisassemblerInsn "mov" for 0x401139>, <DisassemblerInsn "add" for 0x40113d>, <DisassemblerInsn "mov" for 0x401141>, <DisassemblerInsn "movsxd" for 0x401144>, <DisassemblerInsn "shl" for 0x401147>, <DisassemblerInsn "add" for 0x40114b>, <DisassemblerInsn "add" for 0x40114e>, <DisassemblerInsn "mov" for 0x401152>, <DisassemblerInsn "call" for 0x401154>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40119b>, <DisassemblerInsn "add" for 0x40119f>, <DisassemblerInsn "ret" for 0x4011a3>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400ff0>, <DisassemblerInsn "mov" for 0x400ff4>, <DisassemblerInsn "mov" for 0x400ff9>, <DisassemblerInsn "mov" for 0x400ffd>, <DisassemblerInsn "mov" for 0x401002>, <DisassemblerInsn "add" for 0x401005>, <DisassemblerInsn "mov" for 0x401009>, <DisassemblerInsn "mov" for 0x40100e>, <DisassemblerInsn "mov" for 0x401012>, <DisassemblerInsn "mov" for 0x401017>, <DisassemblerInsn "cmp" for 0x40101c>, <DisassemblerInsn "mov" for 0x401020>, <DisassemblerInsn "jne" for 0x401024>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4010e6>, <DisassemblerInsn "mov" for 0x4010e8>, <DisassemblerInsn "cmp" for 0x4010ed>, <DisassemblerInsn "mov" for 0x4010f0>, <DisassemblerInsn "jl" for 0x4010f4>]'}], 'cfg_block_detailed_info': [{'block_Idx': 5, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x18]>', '<mov~~rdx, qword ptr [rsp + 0x28]>', '<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~r8d, dword ptr [rdx]>', '<add~~r8d, -1>', '<mov~~rsi, rax>', '<add~~rsi, 0x54>', '<mov~~rdx, rax>', '<add~~rdx, 0x50>', '<cmp~~ecx, r8d>', '<cmove~~rdx, rsi>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0x14], edx>', '<mov~~rax, qword ptr [rax + 0x10]>', '<movsxd~~rcx, ecx>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<add~~rax, 0xc>', '<mov~~esi, dword ptr [rax]>', '<add~~esi, 8>', '<call~~0x500050>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~ecx, dword ptr [rsp + 0x24]>', '<mov~~rdx, rax>', '<add~~rdx, 0x10>', '<mov~~qword ptr [rsp + 8], rdx>', '<mov~~rax, qword ptr [rax + 0x10]>', '<movsxd~~rcx, ecx>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<mov~~rsi, qword ptr [rax]>', '<xor~~edx, edx>', '<call~~0x500000>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~rax, rdx>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~ecx, dword ptr [rdx + 0xc]>', '<mov~~dword ptr [rsp + 0x24], ecx>', '<mov~~rax, rdx>', '<add~~rax, 0x58>', '<mov~~qword ptr [rsp + 0x28], rax>', '<mov~~eax, 0xfffffffb>', '<cmp~~ecx, dword ptr [rdx + 0x58]>', '<mov~~dword ptr [rsp + 0x54], eax>', '<ja~~0x40119b>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<mov~~esi, eax>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rdi, qword ptr [rcx]>', '<mov~~ecx, dword ptr [rax]>', '<movsxd~~r8, ecx>', '<shl~~r8, 5>', '<add~~rdi, r8>', '<add~~rdi, 0x18>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~qword ptr [rdx], rdi>', '<mov~~dword ptr [rdx + 0x1c], 0>', '<add~~esi, 8>', '<mov~~dword ptr [rdx + 0x18], esi>', '<add~~ecx, 1>', '<mov~~dword ptr [rax], ecx>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x54], eax>', '<mov~~eax, dword ptr [rsp + 0x54]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x18]>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rsp + 8]>', '<mov~~rsi, qword ptr [rsp + 0x40]>', '<mov~~r8d, dword ptr [rsp + 0x14]>', '<mov~~rdi, qword ptr [rdx + 0x10]>', '<mov~~dword ptr [rdi], r8d>', '<mov~~rdi, qword ptr [rax]>', '<movsxd~~r8, dword ptr [rcx]>', '<shl~~r8, 5>', '<add~~rdi, r8>', '<add~~rdi, 0x10>', '<mov~~r8d, dword ptr [rdi]>', '<mov~~rdi, qword ptr [rdx + 0x10]>', '<mov~~dword ptr [rdi + 4], r8d>', '<mov~~rdi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rdx + 0x10]>', '<add~~rsi, 8>', '<mov~~rax, qword ptr [rax]>', '<movsxd~~rcx, dword ptr [rcx]>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<add~~rax, 0xc>', '<mov~~edx, dword ptr [rax]>', '<call~~0x500020>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x58>', '<mov~~qword ptr [rsp + 0x30], rsi>', '<mov~~rax, qword ptr [rdi + 0x18]>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x20>', '<mov~~qword ptr [rsp + 0x40], rax>', '<mov~~rcx, qword ptr [rdi + 0x20]>', '<mov~~qword ptr [rsp + 0x48], rcx>', '<mov~~eax, 0xfffffffb>', '<cmp~~dword ptr [rcx + 0x54], 0>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jne~~0x40119b>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~eax, 0xfffffff4>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jl~~0x40119b>']}], 'cfg_edge_info': [(0, 1), (1, 2), (8, 10), (5, 7), (0, 2), (7, 2), (1, 3), (3, 5), (7, 8)], 'cdg_edge_info': [(0, 1), (1, 2), (1, 5), (7, 10), (0, 2), (1, 7), (7, 2), (1, 3), (7, 8)], 'ddg_edge_info': [(0, 1), (3, 8), (0, 10), (5, 8), (1, 5), (7, 10), (0, 3), (8, 10), (1, 8), (5, 7), (5, 10), (0, 5), (1, 10), (0, 8), (1, 3), (3, 5)]}]}
{'ape_read_packet': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 14, 'instruction': 'movq\t%rdx, %rax'}, {'instIndex': 15, 'instruction': 'addq\t$12, %rax'}, {'instIndex': 16, 'instruction': 'movq\t%rax, 0x18(%rsp)                  # 8-byte Spill'}, {'instIndex': 17, 'instruction': 'movl\t12(%rdx), %ecx'}, {'instIndex': 18, 'instruction': 'movl\t%ecx, 0x24(%rsp)                  # 4-byte Spill'}, {'instIndex': 19, 'instruction': 'movq\t%rdx, %rax'}, {'instIndex': 20, 'instruction': 'addq\t$0x58, %rax'}, {'instIndex': 21, 'instruction': 'movq\t%rax, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 22, 'instruction': 'movl\t$0xfffffffb, %eax               # imm = 0xFFFFFFFB'}, {'instIndex': 23, 'instruction': 'cmpl\t0x58(%rdx), %ecx'}, {'instIndex': 24, 'instruction': 'movl\t%eax, 0x54(%rsp)                  # 4-byte Spill'}, {'instIndex': 25, 'instruction': 'ja\t.LBB2_4'}, {'instIndex': 29, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 30, 'instruction': 'addq\t$0x10, %rdx'}, {'instIndex': 31, 'instruction': 'movq\t%rdx, 8(%rsp)                   # 8-byte Spill'}, {'instIndex': 32, 'instruction': 'movq\t0x10(%rax), %rax'}, {'instIndex': 33, 'instruction': 'movslq\t%ecx, %rcx'}, {'instIndex': 34, 'instruction': 'shlq\t$5, %rcx'}, {'instIndex': 35, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 36, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 37, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 38, 'instruction': 'callq\tavio_seek@PLT'}, {'instIndex': 43, 'instruction': 'movl\t(%rcx), %ecx'}, {'instIndex': 44, 'instruction': 'movl\t(%rdx), %r8d'}, {'instIndex': 45, 'instruction': 'addl\t$-1, %r8d'}, {'instIndex': 46, 'instruction': 'movq\t%rax, %rsi'}, {'instIndex': 47, 'instruction': 'addq\t$0x54, %rsi'}, {'instIndex': 48, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 49, 'instruction': 'addq\t$0x50, %rdx'}, {'instIndex': 50, 'instruction': 'cmpl\t%r8d, %ecx'}, {'instIndex': 51, 'instruction': 'cmoveq\t%rsi, %rdx'}]}]}
The case of compiler clang with optimization Os.
Patched source code file: ape.c
Patched function: 1---static int ape_read_packet 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_before/Os/ape.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_before/Os/ape.s---ape_read_packet---before
function id: 2
function flag: True
There are 114 instructions for function: ape_read_packet in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '361', 'end': 368}, 'before': {'start': '361', 'end': 367}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 14, 'instruction': 'movq\t%rdx, %rax'}, {'instIndex': 15, 'instruction': 'addq\t$12, %rax'}, {'instIndex': 16, 'instruction': 'movq\t%rax, 0x18(%rsp)                  # 8-byte Spill'}, {'instIndex': 17, 'instruction': 'movl\t12(%rdx), %ecx'}, {'instIndex': 18, 'instruction': 'movl\t%ecx, 0x24(%rsp)                  # 4-byte Spill'}, {'instIndex': 19, 'instruction': 'movq\t%rdx, %rax'}, {'instIndex': 20, 'instruction': 'addq\t$0x58, %rax'}, {'instIndex': 21, 'instruction': 'movq\t%rax, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 22, 'instruction': 'movl\t$0xfffffffb, %eax               # imm = 0xFFFFFFFB'}, {'instIndex': 23, 'instruction': 'cmpl\t0x58(%rdx), %ecx'}, {'instIndex': 24, 'instruction': 'movl\t%eax, 0x54(%rsp)                  # 4-byte Spill'}, {'instIndex': 25, 'instruction': 'ja\t.LBB2_4'}, {'instIndex': 29, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 30, 'instruction': 'addq\t$0x10, %rdx'}, {'instIndex': 31, 'instruction': 'movq\t%rdx, 8(%rsp)                   # 8-byte Spill'}, {'instIndex': 32, 'instruction': 'movq\t0x10(%rax), %rax'}, {'instIndex': 33, 'instruction': 'movslq\t%ecx, %rcx'}, {'instIndex': 34, 'instruction': 'shlq\t$5, %rcx'}, {'instIndex': 35, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 36, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 37, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 38, 'instruction': 'callq\tavio_seek@PLT'}, {'instIndex': 43, 'instruction': 'movl\t(%rcx), %ecx'}, {'instIndex': 44, 'instruction': 'movl\t(%rdx), %r8d'}, {'instIndex': 45, 'instruction': 'addl\t$-1, %r8d'}, {'instIndex': 46, 'instruction': 'movq\t%rax, %rsi'}, {'instIndex': 47, 'instruction': 'addq\t$0x54, %rsi'}, {'instIndex': 48, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 49, 'instruction': 'addq\t$0x50, %rdx'}, {'instIndex': 50, 'instruction': 'cmpl\t%r8d, %ecx'}, {'instIndex': 51, 'instruction': 'cmoveq\t%rsi, %rdx'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_before/Os/ape.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_before/Os/ape.o---before
The extraction of function: ape_read_packet
Analyzing the binaries to generate subCFGs from patched function ...
It has 135 nodes and 271 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 114 instructions in binary file.
[4198416, 4198470, 4198520]
The execution time of patched subCFG information extraction via angr: 0:00:00.197373
{'ape_read_packet': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401046>, <DisassemblerInsn "mov" for 0x40104b>, <DisassemblerInsn "mov" for 0x401050>, <DisassemblerInsn "mov" for 0x401054>, <DisassemblerInsn "add" for 0x401057>, <DisassemblerInsn "mov" for 0x40105b>, <DisassemblerInsn "mov" for 0x401060>, <DisassemblerInsn "movsxd" for 0x401064>, <DisassemblerInsn "shl" for 0x401067>, <DisassemblerInsn "add" for 0x40106b>, <DisassemblerInsn "mov" for 0x40106e>, <DisassemblerInsn "xor" for 0x401071>, <DisassemblerInsn "call" for 0x401073>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401010>, <DisassemblerInsn "mov" for 0x401015>, <DisassemblerInsn "add" for 0x401018>, <DisassemblerInsn "mov" for 0x40101c>, <DisassemblerInsn "mov" for 0x401021>, <DisassemblerInsn "mov" for 0x401024>, <DisassemblerInsn "mov" for 0x401028>, <DisassemblerInsn "add" for 0x40102b>, <DisassemblerInsn "mov" for 0x40102f>, <DisassemblerInsn "mov" for 0x401034>, <DisassemblerInsn "cmp" for 0x401039>, <DisassemblerInsn "mov" for 0x40103c>, <DisassemblerInsn "ja" for 0x401040>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400fd6>, <DisassemblerInsn "mov" for 0x400fda>, <DisassemblerInsn "mov" for 0x400fdf>, <DisassemblerInsn "mov" for 0x400fe3>, <DisassemblerInsn "mov" for 0x400fe8>, <DisassemblerInsn "add" for 0x400feb>, <DisassemblerInsn "mov" for 0x400fef>, <DisassemblerInsn "mov" for 0x400ff4>, <DisassemblerInsn "mov" for 0x400ff8>, <DisassemblerInsn "mov" for 0x400ffd>, <DisassemblerInsn "cmp" for 0x401002>, <DisassemblerInsn "mov" for 0x401006>, <DisassemblerInsn "jne" for 0x40100a>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4010cc>, <DisassemblerInsn "mov" for 0x4010ce>, <DisassemblerInsn "cmp" for 0x4010d3>, <DisassemblerInsn "mov" for 0x4010d6>, <DisassemblerInsn "jl" for 0x4010da>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401181>, <DisassemblerInsn "add" for 0x401185>, <DisassemblerInsn "ret" for 0x401189>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401078>, <DisassemblerInsn "mov" for 0x40107d>, <DisassemblerInsn "mov" for 0x401082>, <DisassemblerInsn "mov" for 0x401087>, <DisassemblerInsn "mov" for 0x40108c>, <DisassemblerInsn "mov" for 0x40108e>, <DisassemblerInsn "add" for 0x401091>, <DisassemblerInsn "mov" for 0x401095>, <DisassemblerInsn "add" for 0x401098>, <DisassemblerInsn "mov" for 0x40109c>, <DisassemblerInsn "add" for 0x40109f>, <DisassemblerInsn "cmp" for 0x4010a3>, <DisassemblerInsn "cmove" for 0x4010a6>, <DisassemblerInsn "mov" for 0x4010aa>, <DisassemblerInsn "mov" for 0x4010ac>, <DisassemblerInsn "mov" for 0x4010b0>, <DisassemblerInsn "movsxd" for 0x4010b4>, <DisassemblerInsn "shl" for 0x4010b7>, <DisassemblerInsn "add" for 0x4010bb>, <DisassemblerInsn "add" for 0x4010be>, <DisassemblerInsn "mov" for 0x4010c2>, <DisassemblerInsn "add" for 0x4010c4>, <DisassemblerInsn "call" for 0x4010c7>]'}], 'cfg_block_detailed_info': [{'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~ecx, dword ptr [rsp + 0x24]>', '<mov~~rdx, rax>', '<add~~rdx, 0x10>', '<mov~~qword ptr [rsp + 8], rdx>', '<mov~~rax, qword ptr [rax + 0x10]>', '<movsxd~~rcx, ecx>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<mov~~rsi, qword ptr [rax]>', '<xor~~edx, edx>', '<call~~0x500000>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~rax, rdx>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~ecx, dword ptr [rdx + 0xc]>', '<mov~~dword ptr [rsp + 0x24], ecx>', '<mov~~rax, rdx>', '<add~~rax, 0x58>', '<mov~~qword ptr [rsp + 0x28], rax>', '<mov~~eax, 0xfffffffb>', '<cmp~~ecx, dword ptr [rdx + 0x58]>', '<mov~~dword ptr [rsp + 0x54], eax>', '<ja~~0x401181>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x58>', '<mov~~qword ptr [rsp + 0x30], rsi>', '<mov~~rax, qword ptr [rdi + 0x18]>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x20>', '<mov~~qword ptr [rsp + 0x40], rax>', '<mov~~rcx, qword ptr [rdi + 0x20]>', '<mov~~qword ptr [rsp + 0x48], rcx>', '<mov~~eax, 0xfffffffb>', '<cmp~~dword ptr [rcx + 0x54], 0>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jne~~0x401181>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~eax, 0xfffffff4>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jl~~0x401181>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x18]>', '<mov~~rdx, qword ptr [rsp + 0x28]>', '<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~r8d, dword ptr [rdx]>', '<add~~r8d, -1>', '<mov~~rsi, rax>', '<add~~rsi, 0x54>', '<mov~~rdx, rax>', '<add~~rdx, 0x50>', '<cmp~~ecx, r8d>', '<cmove~~rdx, rsi>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0x14], edx>', '<mov~~rax, qword ptr [rax + 0x10]>', '<movsxd~~rcx, ecx>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<add~~rax, 0xc>', '<mov~~esi, dword ptr [rax]>', '<add~~esi, 8>', '<call~~0x500050>']}], 'cfg_edge_info': [(0, 1), (1, 2), (3, 4), (4, 5), (1, 3)]}]}
{'ape_read_packet': [4198416, 4198470, 4198520]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1bc035bc03542c0b2215effc0e53c5c9d2e786ac/clang_before/Os/ape.o---before
The extraction of function: ape_read_packet
[4198416, 4198470, 4198520]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 11 nodes and 15 edges in CFGEmulated.
It has 11 nodes and 12 edges in CDG.
It has 314 nodes and 367 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4198416, 4198470, 4198520]
{4198624, 4198785, 4198470, 4198604, 4198416, 4198358, 4198520, 4198719}
[7, 0, 3, 8, 1, 5, 10, 2]
The execution time of patched slicing information extraction via angr: 0:00:01.328689
{'ape_read_packet': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4010cc>, <DisassemblerInsn "mov" for 0x4010ce>, <DisassemblerInsn "cmp" for 0x4010d3>, <DisassemblerInsn "mov" for 0x4010d6>, <DisassemblerInsn "jl" for 0x4010da>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400fd6>, <DisassemblerInsn "mov" for 0x400fda>, <DisassemblerInsn "mov" for 0x400fdf>, <DisassemblerInsn "mov" for 0x400fe3>, <DisassemblerInsn "mov" for 0x400fe8>, <DisassemblerInsn "add" for 0x400feb>, <DisassemblerInsn "mov" for 0x400fef>, <DisassemblerInsn "mov" for 0x400ff4>, <DisassemblerInsn "mov" for 0x400ff8>, <DisassemblerInsn "mov" for 0x400ffd>, <DisassemblerInsn "cmp" for 0x401002>, <DisassemblerInsn "mov" for 0x401006>, <DisassemblerInsn "jne" for 0x40100a>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401046>, <DisassemblerInsn "mov" for 0x40104b>, <DisassemblerInsn "mov" for 0x401050>, <DisassemblerInsn "mov" for 0x401054>, <DisassemblerInsn "add" for 0x401057>, <DisassemblerInsn "mov" for 0x40105b>, <DisassemblerInsn "mov" for 0x401060>, <DisassemblerInsn "movsxd" for 0x401064>, <DisassemblerInsn "shl" for 0x401067>, <DisassemblerInsn "add" for 0x40106b>, <DisassemblerInsn "mov" for 0x40106e>, <DisassemblerInsn "xor" for 0x401071>, <DisassemblerInsn "call" for 0x401073>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4010e0>, <DisassemblerInsn "mov" for 0x4010e5>, <DisassemblerInsn "mov" for 0x4010ea>, <DisassemblerInsn "mov" for 0x4010ef>, <DisassemblerInsn "mov" for 0x4010f4>, <DisassemblerInsn "mov" for 0x4010f9>, <DisassemblerInsn "mov" for 0x4010fd>, <DisassemblerInsn "mov" for 0x401100>, <DisassemblerInsn "movsxd" for 0x401103>, <DisassemblerInsn "shl" for 0x401106>, <DisassemblerInsn "add" for 0x40110a>, <DisassemblerInsn "add" for 0x40110d>, <DisassemblerInsn "mov" for 0x401111>, <DisassemblerInsn "mov" for 0x401114>, <DisassemblerInsn "mov" for 0x401118>, <DisassemblerInsn "mov" for 0x40111c>, <DisassemblerInsn "mov" for 0x40111f>, <DisassemblerInsn "add" for 0x401123>, <DisassemblerInsn "mov" for 0x401127>, <DisassemblerInsn "movsxd" for 0x40112a>, <DisassemblerInsn "shl" for 0x40112d>, <DisassemblerInsn "add" for 0x401131>, <DisassemblerInsn "add" for 0x401134>, <DisassemblerInsn "mov" for 0x401138>, <DisassemblerInsn "call" for 0x40113a>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401010>, <DisassemblerInsn "mov" for 0x401015>, <DisassemblerInsn "add" for 0x401018>, <DisassemblerInsn "mov" for 0x40101c>, <DisassemblerInsn "mov" for 0x401021>, <DisassemblerInsn "mov" for 0x401024>, <DisassemblerInsn "mov" for 0x401028>, <DisassemblerInsn "add" for 0x40102b>, <DisassemblerInsn "mov" for 0x40102f>, <DisassemblerInsn "mov" for 0x401034>, <DisassemblerInsn "cmp" for 0x401039>, <DisassemblerInsn "mov" for 0x40103c>, <DisassemblerInsn "ja" for 0x401040>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401078>, <DisassemblerInsn "mov" for 0x40107d>, <DisassemblerInsn "mov" for 0x401082>, <DisassemblerInsn "mov" for 0x401087>, <DisassemblerInsn "mov" for 0x40108c>, <DisassemblerInsn "mov" for 0x40108e>, <DisassemblerInsn "add" for 0x401091>, <DisassemblerInsn "mov" for 0x401095>, <DisassemblerInsn "add" for 0x401098>, <DisassemblerInsn "mov" for 0x40109c>, <DisassemblerInsn "add" for 0x40109f>, <DisassemblerInsn "cmp" for 0x4010a3>, <DisassemblerInsn "cmove" for 0x4010a6>, <DisassemblerInsn "mov" for 0x4010aa>, <DisassemblerInsn "mov" for 0x4010ac>, <DisassemblerInsn "mov" for 0x4010b0>, <DisassemblerInsn "movsxd" for 0x4010b4>, <DisassemblerInsn "shl" for 0x4010b7>, <DisassemblerInsn "add" for 0x4010bb>, <DisassemblerInsn "add" for 0x4010be>, <DisassemblerInsn "mov" for 0x4010c2>, <DisassemblerInsn "add" for 0x4010c4>, <DisassemblerInsn "call" for 0x4010c7>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40113f>, <DisassemblerInsn "mov" for 0x401144>, <DisassemblerInsn "mov" for 0x401149>, <DisassemblerInsn "mov" for 0x40114b>, <DisassemblerInsn "mov" for 0x401150>, <DisassemblerInsn "mov" for 0x401153>, <DisassemblerInsn "movsxd" for 0x401155>, <DisassemblerInsn "shl" for 0x401158>, <DisassemblerInsn "add" for 0x40115c>, <DisassemblerInsn "add" for 0x40115f>, <DisassemblerInsn "mov" for 0x401163>, <DisassemblerInsn "mov" for 0x401166>, <DisassemblerInsn "mov" for 0x401169>, <DisassemblerInsn "add" for 0x401170>, <DisassemblerInsn "mov" for 0x401173>, <DisassemblerInsn "add" for 0x401176>, <DisassemblerInsn "mov" for 0x401179>, <DisassemblerInsn "xor" for 0x40117b>, <DisassemblerInsn "mov" for 0x40117d>, <DisassemblerInsn "mov" for 0x401181>, <DisassemblerInsn "add" for 0x401185>, <DisassemblerInsn "ret" for 0x401189>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x401181>, <DisassemblerInsn "add" for 0x401185>, <DisassemblerInsn "ret" for 0x401189>]'}], 'cfg_block_detailed_info': [{'block_Idx': 7, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~eax, 0xfffffff4>', '<cmp~~ecx, 0>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jl~~0x401181>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x58>', '<mov~~qword ptr [rsp + 0x30], rsi>', '<mov~~rax, qword ptr [rdi + 0x18]>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, rdi>', '<add~~rax, 0x20>', '<mov~~qword ptr [rsp + 0x40], rax>', '<mov~~rcx, qword ptr [rdi + 0x20]>', '<mov~~qword ptr [rsp + 0x48], rcx>', '<mov~~eax, 0xfffffffb>', '<cmp~~dword ptr [rcx + 0x54], 0>', '<mov~~dword ptr [rsp + 0x54], eax>', '<jne~~0x401181>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rdi, qword ptr [rsp + 0x48]>', '<mov~~ecx, dword ptr [rsp + 0x24]>', '<mov~~rdx, rax>', '<add~~rdx, 0x10>', '<mov~~qword ptr [rsp + 8], rdx>', '<mov~~rax, qword ptr [rax + 0x10]>', '<movsxd~~rcx, ecx>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<mov~~rsi, qword ptr [rax]>', '<xor~~edx, edx>', '<call~~0x500000>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x18]>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rsp + 8]>', '<mov~~rsi, qword ptr [rsp + 0x40]>', '<mov~~r8d, dword ptr [rsp + 0x14]>', '<mov~~rdi, qword ptr [rdx + 0x10]>', '<mov~~dword ptr [rdi], r8d>', '<mov~~rdi, qword ptr [rax]>', '<movsxd~~r8, dword ptr [rcx]>', '<shl~~r8, 5>', '<add~~rdi, r8>', '<add~~rdi, 0x10>', '<mov~~r8d, dword ptr [rdi]>', '<mov~~rdi, qword ptr [rdx + 0x10]>', '<mov~~dword ptr [rdi + 4], r8d>', '<mov~~rdi, qword ptr [rsi]>', '<mov~~rsi, qword ptr [rdx + 0x10]>', '<add~~rsi, 8>', '<mov~~rax, qword ptr [rax]>', '<movsxd~~rcx, dword ptr [rcx]>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<add~~rax, 0xc>', '<mov~~edx, dword ptr [rax]>', '<call~~0x500020>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~rax, rdx>', '<add~~rax, 0xc>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~ecx, dword ptr [rdx + 0xc]>', '<mov~~dword ptr [rsp + 0x24], ecx>', '<mov~~rax, rdx>', '<add~~rax, 0x58>', '<mov~~qword ptr [rsp + 0x28], rax>', '<mov~~eax, 0xfffffffb>', '<cmp~~ecx, dword ptr [rdx + 0x58]>', '<mov~~dword ptr [rsp + 0x54], eax>', '<ja~~0x401181>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x18]>', '<mov~~rdx, qword ptr [rsp + 0x28]>', '<mov~~rdi, qword ptr [rsp + 0x30]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~r8d, dword ptr [rdx]>', '<add~~r8d, -1>', '<mov~~rsi, rax>', '<add~~rsi, 0x54>', '<mov~~rdx, rax>', '<add~~rdx, 0x50>', '<cmp~~ecx, r8d>', '<cmove~~rdx, rsi>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0x14], edx>', '<mov~~rax, qword ptr [rax + 0x10]>', '<movsxd~~rcx, ecx>', '<shl~~rcx, 5>', '<add~~rax, rcx>', '<add~~rax, 0xc>', '<mov~~esi, dword ptr [rax]>', '<add~~esi, 8>', '<call~~0x500050>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 8]>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<mov~~esi, eax>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~rdi, qword ptr [rcx]>', '<mov~~ecx, dword ptr [rax]>', '<movsxd~~r8, ecx>', '<shl~~r8, 5>', '<add~~rdi, r8>', '<add~~rdi, 0x18>', '<mov~~rdi, qword ptr [rdi]>', '<mov~~qword ptr [rdx], rdi>', '<mov~~dword ptr [rdx + 0x1c], 0>', '<add~~esi, 8>', '<mov~~dword ptr [rdx + 0x18], esi>', '<add~~ecx, 1>', '<mov~~dword ptr [rax], ecx>', '<xor~~eax, eax>', '<mov~~dword ptr [rsp + 0x54], eax>', '<mov~~eax, dword ptr [rsp + 0x54]>', '<add~~rsp, 0x58>', '<ret~~>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x54]>', '<add~~rsp, 0x58>', '<ret~~>']}], 'cfg_edge_info': [(0, 1), (1, 2), (8, 10), (5, 7), (0, 2), (7, 2), (1, 3), (3, 5), (7, 8)], 'cdg_edge_info': [(0, 1), (1, 2), (1, 5), (7, 10), (1, 7), (0, 2), (7, 2), (1, 3), (7, 8)], 'ddg_edge_info': [(0, 1), (3, 8), (0, 10), (1, 5), (5, 8), (7, 10), (1, 8), (8, 10), (0, 3), (5, 7), (5, 10), (1, 10), (0, 5), (0, 8), (1, 3), (3, 5)]}]}
{'ape_read_packet': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 14, 'instruction': 'movq\t%rdx, %rax'}, {'instIndex': 15, 'instruction': 'addq\t$12, %rax'}, {'instIndex': 16, 'instruction': 'movq\t%rax, 0x18(%rsp)                  # 8-byte Spill'}, {'instIndex': 17, 'instruction': 'movl\t12(%rdx), %ecx'}, {'instIndex': 18, 'instruction': 'movl\t%ecx, 0x24(%rsp)                  # 4-byte Spill'}, {'instIndex': 19, 'instruction': 'movq\t%rdx, %rax'}, {'instIndex': 20, 'instruction': 'addq\t$0x58, %rax'}, {'instIndex': 21, 'instruction': 'movq\t%rax, 0x28(%rsp)                  # 8-byte Spill'}, {'instIndex': 22, 'instruction': 'movl\t$0xfffffffb, %eax               # imm = 0xFFFFFFFB'}, {'instIndex': 23, 'instruction': 'cmpl\t0x58(%rdx), %ecx'}, {'instIndex': 24, 'instruction': 'movl\t%eax, 0x54(%rsp)                  # 4-byte Spill'}, {'instIndex': 25, 'instruction': 'ja\t.LBB2_4'}, {'instIndex': 29, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 30, 'instruction': 'addq\t$0x10, %rdx'}, {'instIndex': 31, 'instruction': 'movq\t%rdx, 8(%rsp)                   # 8-byte Spill'}, {'instIndex': 32, 'instruction': 'movq\t0x10(%rax), %rax'}, {'instIndex': 33, 'instruction': 'movslq\t%ecx, %rcx'}, {'instIndex': 34, 'instruction': 'shlq\t$5, %rcx'}, {'instIndex': 35, 'instruction': 'addq\t%rcx, %rax'}, {'instIndex': 36, 'instruction': 'movq\t(%rax), %rsi'}, {'instIndex': 37, 'instruction': 'xorl\t%edx, %edx'}, {'instIndex': 38, 'instruction': 'callq\tavio_seek@PLT'}, {'instIndex': 43, 'instruction': 'movl\t(%rcx), %ecx'}, {'instIndex': 44, 'instruction': 'movl\t(%rdx), %r8d'}, {'instIndex': 45, 'instruction': 'addl\t$-1, %r8d'}, {'instIndex': 46, 'instruction': 'movq\t%rax, %rsi'}, {'instIndex': 47, 'instruction': 'addq\t$0x54, %rsi'}, {'instIndex': 48, 'instruction': 'movq\t%rax, %rdx'}, {'instIndex': 49, 'instruction': 'addq\t$0x50, %rdx'}, {'instIndex': 50, 'instruction': 'cmpl\t%r8d, %ecx'}, {'instIndex': 51, 'instruction': 'cmoveq\t%rsi, %rdx'}]}]}
The analysis of 11 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/patch_info.txt
{'1': {'before': 'a/libavcodec/parser.c', 'after': 'b/libavcodec/parser.c'}}
{'1': [{'before': '-224,7', 'after': '+224,7', 'function': 'void av_parser_close'}, {'before': '-249,8', 'after': '+249,11', 'function': 'int ff_combine_frame'}, {'before': '-261,8', 'after': '+264,11', 'function': 'int ff_combine_frame'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc---b/libavcodec/parser.c
The case of compiler gcc with optimization no.
Patched source code file: parser.c
Patched function: 1---void av_parser_close 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/gcc_after/no/parser_gcc.s
Assembly file does not exist.
Patched function: 1---int ff_combine_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/gcc_after/no/parser_gcc.s
Assembly file does not exist.
Patched function: 1---int ff_combine_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/gcc_after/no/parser_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/gcc_after/no/parser.o
Binary file does not exist.
{'av_parser_close': [], 'ff_combine_frame': []}
The case of compiler gcc with optimization O0.
Patched source code file: parser.c
Patched function: 1---void av_parser_close 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/gcc_after/O0/parser_gcc.s
Assembly file does not exist.
Patched function: 1---int ff_combine_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/gcc_after/O0/parser_gcc.s
Assembly file does not exist.
Patched function: 1---int ff_combine_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/gcc_after/O0/parser_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/gcc_after/O0/parser.o
Binary file does not exist.
{'av_parser_close': [], 'ff_combine_frame': []}
The case of compiler gcc with optimization O1.
Patched source code file: parser.c
Patched function: 1---void av_parser_close 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/gcc_after/O1/parser_gcc.s
Assembly file does not exist.
Patched function: 1---int ff_combine_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/gcc_after/O1/parser_gcc.s
Assembly file does not exist.
Patched function: 1---int ff_combine_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/gcc_after/O1/parser_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/gcc_after/O1/parser.o
Binary file does not exist.
{'av_parser_close': [], 'ff_combine_frame': []}
The case of compiler gcc with optimization O2.
Patched source code file: parser.c
Patched function: 1---void av_parser_close 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/gcc_after/O2/parser_gcc.s
Assembly file does not exist.
Patched function: 1---int ff_combine_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/gcc_after/O2/parser_gcc.s
Assembly file does not exist.
Patched function: 1---int ff_combine_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/gcc_after/O2/parser_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/gcc_after/O2/parser.o
Binary file does not exist.
{'av_parser_close': [], 'ff_combine_frame': []}
The case of compiler gcc with optimization O3.
Patched source code file: parser.c
Patched function: 1---void av_parser_close 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/gcc_after/O3/parser_gcc.s
Assembly file does not exist.
Patched function: 1---int ff_combine_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/gcc_after/O3/parser_gcc.s
Assembly file does not exist.
Patched function: 1---int ff_combine_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/gcc_after/O3/parser_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/gcc_after/O3/parser.o
Binary file does not exist.
{'av_parser_close': [], 'ff_combine_frame': []}
The case of compiler gcc with optimization Os.
Patched source code file: parser.c
Patched function: 1---void av_parser_close 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/gcc_after/Os/parser_gcc.s
Assembly file does not exist.
Patched function: 1---int ff_combine_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/gcc_after/Os/parser_gcc.s
Assembly file does not exist.
Patched function: 1---int ff_combine_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/gcc_after/Os/parser_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/gcc_after/Os/parser.o
Binary file does not exist.
{'av_parser_close': [], 'ff_combine_frame': []}
The case of compiler clang with optimization no.
Patched source code file: parser.c
Patched function: 1---void av_parser_close 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/clang_after/no/parser.s
Assembly file does not exist.
Patched function: 1---int ff_combine_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/clang_after/no/parser.s
Assembly file does not exist.
Patched function: 1---int ff_combine_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/clang_after/no/parser.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/clang_after/no/parser.o
Binary file does not exist.
{'av_parser_close': [], 'ff_combine_frame': []}
The case of compiler clang with optimization O0.
Patched source code file: parser.c
Patched function: 1---void av_parser_close 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/clang_after/O0/parser.s
Assembly file does not exist.
Patched function: 1---int ff_combine_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/clang_after/O0/parser.s
Assembly file does not exist.
Patched function: 1---int ff_combine_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/clang_after/O0/parser.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/clang_after/O0/parser.o
Binary file does not exist.
{'av_parser_close': [], 'ff_combine_frame': []}
The case of compiler clang with optimization O1.
Patched source code file: parser.c
Patched function: 1---void av_parser_close 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/clang_after/O1/parser.s
Assembly file does not exist.
Patched function: 1---int ff_combine_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/clang_after/O1/parser.s
Assembly file does not exist.
Patched function: 1---int ff_combine_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/clang_after/O1/parser.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/clang_after/O1/parser.o
Binary file does not exist.
{'av_parser_close': [], 'ff_combine_frame': []}
The case of compiler clang with optimization O2.
Patched source code file: parser.c
Patched function: 1---void av_parser_close 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/clang_after/O2/parser.s
Assembly file does not exist.
Patched function: 1---int ff_combine_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/clang_after/O2/parser.s
Assembly file does not exist.
Patched function: 1---int ff_combine_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/clang_after/O2/parser.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/clang_after/O2/parser.o
Binary file does not exist.
{'av_parser_close': [], 'ff_combine_frame': []}
The case of compiler clang with optimization O3.
Patched source code file: parser.c
Patched function: 1---void av_parser_close 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/clang_after/O3/parser.s
Assembly file does not exist.
Patched function: 1---int ff_combine_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/clang_after/O3/parser.s
Assembly file does not exist.
Patched function: 1---int ff_combine_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/clang_after/O3/parser.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/clang_after/O3/parser.o
Binary file does not exist.
{'av_parser_close': [], 'ff_combine_frame': []}
The case of compiler clang with optimization Os.
Patched source code file: parser.c
Patched function: 1---void av_parser_close 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/clang_after/Os/parser.s
Assembly file does not exist.
Patched function: 1---int ff_combine_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/clang_after/Os/parser.s
Assembly file does not exist.
Patched function: 1---int ff_combine_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/clang_after/Os/parser.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/clang_after/Os/parser.o
Binary file does not exist.
{'av_parser_close': [], 'ff_combine_frame': []}
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc---a/libavcodec/parser.c
The case of compiler gcc with optimization no.
Patched source code file: parser.c
Patched function: 1---void av_parser_close 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/gcc_before/no/parser_gcc.s
Assembly file does not exist.
Patched function: 1---int ff_combine_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/gcc_before/no/parser_gcc.s
Assembly file does not exist.
Patched function: 1---int ff_combine_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/gcc_before/no/parser_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/gcc_before/no/parser.o
Binary file does not exist.
{'av_parser_close': [], 'ff_combine_frame': []}
The case of compiler gcc with optimization O0.
Patched source code file: parser.c
Patched function: 1---void av_parser_close 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/gcc_before/O0/parser_gcc.s
Assembly file does not exist.
Patched function: 1---int ff_combine_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/gcc_before/O0/parser_gcc.s
Assembly file does not exist.
Patched function: 1---int ff_combine_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/gcc_before/O0/parser_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/gcc_before/O0/parser.o
Binary file does not exist.
{'av_parser_close': [], 'ff_combine_frame': []}
The case of compiler gcc with optimization O1.
Patched source code file: parser.c
Patched function: 1---void av_parser_close 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/gcc_before/O1/parser_gcc.s
Assembly file does not exist.
Patched function: 1---int ff_combine_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/gcc_before/O1/parser_gcc.s
Assembly file does not exist.
Patched function: 1---int ff_combine_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/gcc_before/O1/parser_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/gcc_before/O1/parser.o
Binary file does not exist.
{'av_parser_close': [], 'ff_combine_frame': []}
The case of compiler gcc with optimization O2.
Patched source code file: parser.c
Patched function: 1---void av_parser_close 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/gcc_before/O2/parser_gcc.s
Assembly file does not exist.
Patched function: 1---int ff_combine_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/gcc_before/O2/parser_gcc.s
Assembly file does not exist.
Patched function: 1---int ff_combine_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/gcc_before/O2/parser_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/gcc_before/O2/parser.o
Binary file does not exist.
{'av_parser_close': [], 'ff_combine_frame': []}
The case of compiler gcc with optimization O3.
Patched source code file: parser.c
Patched function: 1---void av_parser_close 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/gcc_before/O3/parser_gcc.s
Assembly file does not exist.
Patched function: 1---int ff_combine_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/gcc_before/O3/parser_gcc.s
Assembly file does not exist.
Patched function: 1---int ff_combine_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/gcc_before/O3/parser_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/gcc_before/O3/parser.o
Binary file does not exist.
{'av_parser_close': [], 'ff_combine_frame': []}
The case of compiler gcc with optimization Os.
Patched source code file: parser.c
Patched function: 1---void av_parser_close 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/gcc_before/Os/parser_gcc.s
Assembly file does not exist.
Patched function: 1---int ff_combine_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/gcc_before/Os/parser_gcc.s
Assembly file does not exist.
Patched function: 1---int ff_combine_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/gcc_before/Os/parser_gcc.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/gcc_before/Os/parser.o
Binary file does not exist.
{'av_parser_close': [], 'ff_combine_frame': []}
The case of compiler clang with optimization no.
Patched source code file: parser.c
Patched function: 1---void av_parser_close 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/clang_before/no/parser.s
Assembly file does not exist.
Patched function: 1---int ff_combine_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/clang_before/no/parser.s
Assembly file does not exist.
Patched function: 1---int ff_combine_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/clang_before/no/parser.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/clang_before/no/parser.o
Binary file does not exist.
{'av_parser_close': [], 'ff_combine_frame': []}
The case of compiler clang with optimization O0.
Patched source code file: parser.c
Patched function: 1---void av_parser_close 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/clang_before/O0/parser.s
Assembly file does not exist.
Patched function: 1---int ff_combine_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/clang_before/O0/parser.s
Assembly file does not exist.
Patched function: 1---int ff_combine_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/clang_before/O0/parser.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/clang_before/O0/parser.o
Binary file does not exist.
{'av_parser_close': [], 'ff_combine_frame': []}
The case of compiler clang with optimization O1.
Patched source code file: parser.c
Patched function: 1---void av_parser_close 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/clang_before/O1/parser.s
Assembly file does not exist.
Patched function: 1---int ff_combine_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/clang_before/O1/parser.s
Assembly file does not exist.
Patched function: 1---int ff_combine_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/clang_before/O1/parser.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/clang_before/O1/parser.o
Binary file does not exist.
{'av_parser_close': [], 'ff_combine_frame': []}
The case of compiler clang with optimization O2.
Patched source code file: parser.c
Patched function: 1---void av_parser_close 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/clang_before/O2/parser.s
Assembly file does not exist.
Patched function: 1---int ff_combine_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/clang_before/O2/parser.s
Assembly file does not exist.
Patched function: 1---int ff_combine_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/clang_before/O2/parser.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/clang_before/O2/parser.o
Binary file does not exist.
{'av_parser_close': [], 'ff_combine_frame': []}
The case of compiler clang with optimization O3.
Patched source code file: parser.c
Patched function: 1---void av_parser_close 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/clang_before/O3/parser.s
Assembly file does not exist.
Patched function: 1---int ff_combine_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/clang_before/O3/parser.s
Assembly file does not exist.
Patched function: 1---int ff_combine_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/clang_before/O3/parser.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/clang_before/O3/parser.o
Binary file does not exist.
{'av_parser_close': [], 'ff_combine_frame': []}
The case of compiler clang with optimization Os.
Patched source code file: parser.c
Patched function: 1---void av_parser_close 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/clang_before/Os/parser.s
Assembly file does not exist.
Patched function: 1---int ff_combine_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/clang_before/Os/parser.s
Assembly file does not exist.
Patched function: 1---int ff_combine_frame 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/clang_before/Os/parser.s
Assembly file does not exist.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1f96bafb27a1a201dc0bfd299bea7c0a2d8370dc/clang_before/Os/parser.o
Binary file does not exist.
{'av_parser_close': [], 'ff_combine_frame': []}
The analysis of 12 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/patch_info.txt
{'1': {'before': 'a/libavcodec/aacsbr.c', 'after': 'b/libavcodec/aacsbr.c'}}
{'1': [{'before': '-174,7', 'after': '+174,7', 'function': 'static void sbr_make_f_tablelim'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9---b/libavcodec/aacsbr.c
The case of compiler gcc with optimization no.
Patched source code file: aacsbr.c
Patched function: 1---static void sbr_make_f_tablelim 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/gcc_after/no/aacsbr_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/gcc_after/no/aacsbr_gcc.s---sbr_make_f_tablelim---after
function id: 76
function flag: True
There are 216 instructions for function: sbr_make_f_tablelim in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '174', 'end': 180}, 'before': {'start': '174', 'end': 180}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 10, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 11, 'instruction': 'movl\t0x18(%rax), %eax'}, {'instIndex': 12, 'instruction': 'subl\t$1, %eax'}, {'instIndex': 13, 'instruction': 'movl\t%eax, %eax'}, {'instIndex': 14, 'instruction': 'leaq\t0(,%rax,4), %rdx'}, {'instIndex': 15, 'instruction': 'leaq\tbands_warped.4(%rip), %rax'}, {'instIndex': 16, 'instruction': 'movss\t(%rdx,%rax), %xmm0'}, {'instIndex': 17, 'instruction': 'movss\t%xmm0, 0x14(%rsp)'}, {'instIndex': 18, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 19, 'instruction': 'addq\t$0x2ae12, %rax'}, {'instIndex': 20, 'instruction': 'addq\t$2, %rax'}, {'instIndex': 21, 'instruction': 'movq\t%rax, 0x18(%rsp)'}, {'instIndex': 22, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 23, 'instruction': 'addq\t$0x2ae12, %rax'}, {'instIndex': 24, 'instruction': 'movq\t%rax, 0x20(%rsp)'}, {'instIndex': 25, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 26, 'instruction': 'movl\t0x44(%rax), %eax'}, {'instIndex': 27, 'instruction': 'movw\t%ax, 0x2a(%rsp)'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/gcc_after/no/aacsbr.o
Binary file does not exist.
{'sbr_make_f_tablelim': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 10, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 11, 'instruction': 'movl\t0x18(%rax), %eax'}, {'instIndex': 12, 'instruction': 'subl\t$1, %eax'}, {'instIndex': 13, 'instruction': 'movl\t%eax, %eax'}, {'instIndex': 14, 'instruction': 'leaq\t0(,%rax,4), %rdx'}, {'instIndex': 15, 'instruction': 'leaq\tbands_warped.4(%rip), %rax'}, {'instIndex': 16, 'instruction': 'movss\t(%rdx,%rax), %xmm0'}, {'instIndex': 17, 'instruction': 'movss\t%xmm0, 0x14(%rsp)'}, {'instIndex': 18, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 19, 'instruction': 'addq\t$0x2ae12, %rax'}, {'instIndex': 20, 'instruction': 'addq\t$2, %rax'}, {'instIndex': 21, 'instruction': 'movq\t%rax, 0x18(%rsp)'}, {'instIndex': 22, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 23, 'instruction': 'addq\t$0x2ae12, %rax'}, {'instIndex': 24, 'instruction': 'movq\t%rax, 0x20(%rsp)'}, {'instIndex': 25, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 26, 'instruction': 'movl\t0x44(%rax), %eax'}, {'instIndex': 27, 'instruction': 'movw\t%ax, 0x2a(%rsp)'}]}]}
The case of compiler gcc with optimization O0.
Patched source code file: aacsbr.c
Patched function: 1---static void sbr_make_f_tablelim 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/gcc_after/O0/aacsbr_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/gcc_after/O0/aacsbr_gcc.s---sbr_make_f_tablelim---after
function id: 76
function flag: True
There are 216 instructions for function: sbr_make_f_tablelim in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '174', 'end': 180}, 'before': {'start': '174', 'end': 180}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 10, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 11, 'instruction': 'movl\t0x18(%rax), %eax'}, {'instIndex': 12, 'instruction': 'subl\t$1, %eax'}, {'instIndex': 13, 'instruction': 'movl\t%eax, %eax'}, {'instIndex': 14, 'instruction': 'leaq\t0(,%rax,4), %rdx'}, {'instIndex': 15, 'instruction': 'leaq\tbands_warped.4(%rip), %rax'}, {'instIndex': 16, 'instruction': 'movss\t(%rdx,%rax), %xmm0'}, {'instIndex': 17, 'instruction': 'movss\t%xmm0, 0x14(%rsp)'}, {'instIndex': 18, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 19, 'instruction': 'addq\t$0x2ae12, %rax'}, {'instIndex': 20, 'instruction': 'addq\t$2, %rax'}, {'instIndex': 21, 'instruction': 'movq\t%rax, 0x18(%rsp)'}, {'instIndex': 22, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 23, 'instruction': 'addq\t$0x2ae12, %rax'}, {'instIndex': 24, 'instruction': 'movq\t%rax, 0x20(%rsp)'}, {'instIndex': 25, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 26, 'instruction': 'movl\t0x44(%rax), %eax'}, {'instIndex': 27, 'instruction': 'movw\t%ax, 0x2a(%rsp)'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/gcc_after/O0/aacsbr.o
Binary file does not exist.
{'sbr_make_f_tablelim': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 10, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 11, 'instruction': 'movl\t0x18(%rax), %eax'}, {'instIndex': 12, 'instruction': 'subl\t$1, %eax'}, {'instIndex': 13, 'instruction': 'movl\t%eax, %eax'}, {'instIndex': 14, 'instruction': 'leaq\t0(,%rax,4), %rdx'}, {'instIndex': 15, 'instruction': 'leaq\tbands_warped.4(%rip), %rax'}, {'instIndex': 16, 'instruction': 'movss\t(%rdx,%rax), %xmm0'}, {'instIndex': 17, 'instruction': 'movss\t%xmm0, 0x14(%rsp)'}, {'instIndex': 18, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 19, 'instruction': 'addq\t$0x2ae12, %rax'}, {'instIndex': 20, 'instruction': 'addq\t$2, %rax'}, {'instIndex': 21, 'instruction': 'movq\t%rax, 0x18(%rsp)'}, {'instIndex': 22, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 23, 'instruction': 'addq\t$0x2ae12, %rax'}, {'instIndex': 24, 'instruction': 'movq\t%rax, 0x20(%rsp)'}, {'instIndex': 25, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 26, 'instruction': 'movl\t0x44(%rax), %eax'}, {'instIndex': 27, 'instruction': 'movw\t%ax, 0x2a(%rsp)'}]}]}
The case of compiler gcc with optimization O1.
Patched source code file: aacsbr.c
Patched function: 1---static void sbr_make_f_tablelim 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/gcc_after/O1/aacsbr_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/gcc_after/O1/aacsbr_gcc.s---sbr_make_f_tablelim---after
function id: 45
function flag: True
Assembly file error information: list index out of range
Traceback (most recent call last):
  File "extract_patched_slicing_info.py", line 807, in patched_commit_patched_tag_handle
    = extract_patched_assembly_code_from_debug_file(assembly_file, func_name,
  File "extract_patched_slicing_info.py", line 163, in extract_patched_assembly_code_from_debug_file
    cur_debug_info = {"line": debug_line[1],
IndexError: list index out of range

/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/gcc_after/O1/aacsbr.o
Binary file does not exist.
{'sbr_make_f_tablelim': []}
The case of compiler gcc with optimization O2.
Patched source code file: aacsbr.c
Patched function: 1---static void sbr_make_f_tablelim 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/gcc_after/O2/aacsbr_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/gcc_after/O2/aacsbr_gcc.s---sbr_make_f_tablelim---after
function id: 14
function flag: True
There are 570 instructions for function: sbr_make_f_tablelim in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '174', 'end': 180}, 'before': {'start': '174', 'end': 180}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 13, 'instruction': 'movl\t0x44(%rdi), %ecx'}, {'instIndex': 14, 'instruction': 'leaq\t0x2ae14(%rdi), %r12'}, {'instIndex': 15, 'instruction': 'leaq\t0x2ae12(%rdi), %r13'}, {'instIndex': 17, 'instruction': 'leal\t-1(%rax), %edx'}, {'instIndex': 18, 'instruction': 'leaq\tbands_warped.4(%rip), %rax'}, {'instIndex': 19, 'instruction': 'movw\t%cx, 0x1a(%rsp)'}, {'instIndex': 20, 'instruction': 'movss\t(%rax,%rdx,4), %xmm2'}, {'instIndex': 21, 'instruction': 'movl\t%ecx, %ebp'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/gcc_after/O2/aacsbr.o
Binary file does not exist.
{'sbr_make_f_tablelim': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 13, 'instruction': 'movl\t0x44(%rdi), %ecx'}, {'instIndex': 14, 'instruction': 'leaq\t0x2ae14(%rdi), %r12'}, {'instIndex': 15, 'instruction': 'leaq\t0x2ae12(%rdi), %r13'}, {'instIndex': 17, 'instruction': 'leal\t-1(%rax), %edx'}, {'instIndex': 18, 'instruction': 'leaq\tbands_warped.4(%rip), %rax'}, {'instIndex': 19, 'instruction': 'movw\t%cx, 0x1a(%rsp)'}, {'instIndex': 20, 'instruction': 'movss\t(%rax,%rdx,4), %xmm2'}, {'instIndex': 21, 'instruction': 'movl\t%ecx, %ebp'}]}]}
The case of compiler gcc with optimization O3.
Patched source code file: aacsbr.c
Patched function: 1---static void sbr_make_f_tablelim 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/gcc_after/O3/aacsbr_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/gcc_after/O3/aacsbr_gcc.s---sbr_make_f_tablelim---after
function id: 824
function flag: True
Assembly file error information: list index out of range
Traceback (most recent call last):
  File "extract_patched_slicing_info.py", line 807, in patched_commit_patched_tag_handle
    = extract_patched_assembly_code_from_debug_file(assembly_file, func_name,
  File "extract_patched_slicing_info.py", line 163, in extract_patched_assembly_code_from_debug_file
    cur_debug_info = {"line": debug_line[1],
IndexError: list index out of range

/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/gcc_after/O3/aacsbr.o
Binary file does not exist.
{'sbr_make_f_tablelim': []}
The case of compiler gcc with optimization Os.
Patched source code file: aacsbr.c
Patched function: 1---static void sbr_make_f_tablelim 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/gcc_after/Os/aacsbr_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/gcc_after/Os/aacsbr_gcc.s---sbr_make_f_tablelim---after
function id: 451
function flag: True
Assembly file error information: list index out of range
Traceback (most recent call last):
  File "extract_patched_slicing_info.py", line 807, in patched_commit_patched_tag_handle
    = extract_patched_assembly_code_from_debug_file(assembly_file, func_name,
  File "extract_patched_slicing_info.py", line 163, in extract_patched_assembly_code_from_debug_file
    cur_debug_info = {"line": debug_line[1],
IndexError: list index out of range

/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/gcc_after/Os/aacsbr.o
Binary file does not exist.
{'sbr_make_f_tablelim': []}
The case of compiler clang with optimization no.
Patched source code file: aacsbr.c
Patched function: 1---static void sbr_make_f_tablelim 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_after/no/aacsbr.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_after/no/aacsbr.s---sbr_make_f_tablelim---after
function id: 25
function flag: True
There are 192 instructions for function: sbr_make_f_tablelim in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '174', 'end': 180}, 'before': {'start': '174', 'end': 180}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 5, 'instruction': 'movq\t0x30(%rsp), %rax'}, {'instIndex': 6, 'instruction': 'movl\t0x18(%rax), %eax'}, {'instIndex': 7, 'instruction': 'subl\t$1, %eax'}, {'instIndex': 8, 'instruction': 'movl\t%eax, %eax'}, {'instIndex': 9, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 10, 'instruction': 'leaq\tsbr_make_f_tablelim.bands_warped(%rip), %rax'}, {'instIndex': 11, 'instruction': 'movss\t(%rax,%rcx,4), %xmm0            # xmm0 = mem[0],zero,zero,zero'}, {'instIndex': 12, 'instruction': 'movss\t%xmm0, 0x28(%rsp)'}, {'instIndex': 13, 'instruction': 'movq\t0x30(%rsp), %rax'}, {'instIndex': 14, 'instruction': 'addq\t$0x2ae12, %rax                   # imm = 0x2AE12'}, {'instIndex': 15, 'instruction': 'addq\t$2, %rax'}, {'instIndex': 16, 'instruction': 'movq\t%rax, 0x10(%rsp)'}, {'instIndex': 17, 'instruction': 'movq\t0x30(%rsp), %rax'}, {'instIndex': 18, 'instruction': 'addq\t$0x2ae12, %rax                   # imm = 0x2AE12'}, {'instIndex': 19, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 20, 'instruction': 'movq\t0x30(%rsp), %rax'}, {'instIndex': 21, 'instruction': 'movl\t0x44(%rax), %eax'}, {'instIndex': 22, 'instruction': 'movw\t%ax, 0x1a(%rsp)'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_after/no/aacsbr.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_after/no/aacsbr.o---after
The extraction of function: sbr_make_f_tablelim
Analyzing the binaries to generate subCFGs from patched function ...
It has 1178 nodes and 2072 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 192 instructions in binary file.
[4216936]
The execution time of patched subCFG information extraction via angr: 0:00:01.987782
{'sbr_make_f_tablelim': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405914>, <DisassemblerInsn "add" for 0x405919>, <DisassemblerInsn "mov" for 0x405920>, <DisassemblerInsn "add" for 0x405925>, <DisassemblerInsn "mov" for 0x40592c>, <DisassemblerInsn "mov" for 0x405931>, <DisassemblerInsn "add" for 0x405937>, <DisassemblerInsn "mov" for 0x40593a>, <DisassemblerInsn "mov" for 0x40593c>, <DisassemblerInsn "shl" for 0x40593e>, <DisassemblerInsn "call" for 0x405941>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4058d3>, <DisassemblerInsn "sub" for 0x4058d7>, <DisassemblerInsn "cdqe" for 0x4058da>, <DisassemblerInsn "movsx" for 0x4058dc>, <DisassemblerInsn "mov" for 0x4058e1>, <DisassemblerInsn "mov" for 0x4058e6>, <DisassemblerInsn "sub" for 0x4058ea>, <DisassemblerInsn "movsxd" for 0x4058ed>, <DisassemblerInsn "movzx" for 0x4058f0>, <DisassemblerInsn "add" for 0x4058f8>, <DisassemblerInsn "mov" for 0x4058fa>, <DisassemblerInsn "movsxd" for 0x4058fd>, <DisassemblerInsn "mov" for 0x405902>, <DisassemblerInsn "mov" for 0x405907>, <DisassemblerInsn "add" for 0x40590b>, <DisassemblerInsn "mov" for 0x40590e>, <DisassemblerInsn "jmp" for 0x405912>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405868>, <DisassemblerInsn "mov" for 0x40586d>, <DisassemblerInsn "sub" for 0x405870>, <DisassemblerInsn "mov" for 0x405873>, <DisassemblerInsn "mov" for 0x405875>, <DisassemblerInsn "lea" for 0x405877>, <DisassemblerInsn "movss" for 0x40587e>, <DisassemblerInsn "movss" for 0x405883>, <DisassemblerInsn "mov" for 0x405889>, <DisassemblerInsn "add" for 0x40588e>, <DisassemblerInsn "add" for 0x405894>, <DisassemblerInsn "mov" for 0x405898>, <DisassemblerInsn "mov" for 0x40589d>, <DisassemblerInsn "add" for 0x4058a2>, <DisassemblerInsn "mov" for 0x4058a8>, <DisassemblerInsn "mov" for 0x4058ad>, <DisassemblerInsn "mov" for 0x4058b2>, <DisassemblerInsn "mov" for 0x4058b5>, <DisassemblerInsn "mov" for 0x4058ba>, <DisassemblerInsn "mov" for 0x4058c2>, <DisassemblerInsn "mov" for 0x4058c6>, <DisassemblerInsn "cmp" for 0x4058cb>, <DisassemblerInsn "ja" for 0x4058d1>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x405850>, <DisassemblerInsn "mov" for 0x405854>, <DisassemblerInsn "mov" for 0x405859>, <DisassemblerInsn "cmp" for 0x40585e>, <DisassemblerInsn "jbe" for 0x405862>]'}], 'cfg_block_detailed_info': [{'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<add~~rdi, 0x2ae12>', '<mov~~rsi, qword ptr [rsp + 0x30]>', '<add~~rsi, 0x2ad72>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rax + 0x2ad00]>', '<add~~eax, 1>', '<mov~~eax, eax>', '<mov~~edx, eax>', '<shl~~rdx, 1>', '<call~~0x500050>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2c]>', '<sub~~eax, 1>', '<cdqe~~>', '<movsx~~eax, word ptr [rsp + rax*2 + 0x1a]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<mov~~edx, dword ptr [rsp + 0x2c]>', '<sub~~edx, 1>', '<movsxd~~rdx, edx>', '<movzx~~ecx, byte ptr [rcx + rdx + 0x2ae50]>', '<add~~eax, ecx>', '<mov~~cx, ax>', '<movsxd~~rax, dword ptr [rsp + 0x2c]>', '<mov~~word ptr [rsp + rax*2 + 0x1a], cx>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<jmp~~0x4058c2>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rax + 0x18]>', '<sub~~eax, 1>', '<mov~~eax, eax>', '<mov~~ecx, eax>', '<lea~~rax, [rip + 0x552e]>', '<movss~~xmm0, dword ptr [rax + rcx*4]>', '<movss~~dword ptr [rsp + 0x28], xmm0>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<add~~rax, 0x2ae12>', '<add~~rax, 2>', '<mov~~qword ptr [rsp + 0x10], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<add~~rax, 0x2ae12>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rax + 0x44]>', '<mov~~word ptr [rsp + 0x1a], ax>', '<mov~~dword ptr [rsp + 0x2c], 1>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<cmp~~eax, dword ptr [rcx + 0x2ae4c]>', '<ja~~0x405914>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x38>', '<mov~~qword ptr [rsp + 0x30], rdi>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<cmp~~dword ptr [rax + 0x18], 0>', '<jbe~~0x405b51>']}], 'cfg_edge_info': [(2, 3), (0, 2), (2, 4)]}]}
{'sbr_make_f_tablelim': [4216936]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_after/no/aacsbr.o---after
The extraction of function: sbr_make_f_tablelim
[4216936]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 45 nodes and 64 edges in CFGEmulated.
It has 45 nodes and 59 edges in CDG.
It has 809 nodes and 1102 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4216936]
{4217475, 4217108, 4217240, 4217756, 4217629, 4217374, 4217509, 4217409, 4217026, 4217158, 4217545, 4217674, 4217295, 4216912, 4217681, 4217679, 4217043, 4217172, 4216936, 4217579, 4217455, 4217331}
[16, 0, 44, 9, 12, 33, 13, 3, 1, 21, 4, 20, 19, 7, 31, 38, 18, 15, 5, 23, 14, 28, 2, 17, 42, 41, 8]
The execution time of patched slicing information extraction via angr: 0:00:10.769334
{'sbr_make_f_tablelim': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405a41>, <DisassemblerInsn "mov" for 0x405a46>, <DisassemblerInsn "add" for 0x405a49>, <DisassemblerInsn "mov" for 0x405a4d>, <DisassemblerInsn "mov" for 0x405a52>, <DisassemblerInsn "mov" for 0x405a55>, <DisassemblerInsn "mov" for 0x405a5a>, <DisassemblerInsn "add" for 0x405a5d>, <DisassemblerInsn "mov" for 0x405a61>, <DisassemblerInsn "mov" for 0x405a66>, <DisassemblerInsn "jmp" for 0x405a6a>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x405850>, <DisassemblerInsn "mov" for 0x405854>, <DisassemblerInsn "mov" for 0x405859>, <DisassemblerInsn "cmp" for 0x40585e>, <DisassemblerInsn "jbe" for 0x405862>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x405b46>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405954>, <DisassemblerInsn "add" for 0x405959>, <DisassemblerInsn "mov" for 0x405960>, <DisassemblerInsn "mov" for 0x405965>, <DisassemblerInsn "shl" for 0x40596b>, <DisassemblerInsn "add" for 0x40596e>, <DisassemblerInsn "add" for 0x405971>, <DisassemblerInsn "lea" for 0x405975>, <DisassemblerInsn "add" for 0x40597a>, <DisassemblerInsn "mov" for 0x40597e>, <DisassemblerInsn "mov" for 0x405983>, <DisassemblerInsn "sub" for 0x405989>, <DisassemblerInsn "mov" for 0x40598c>, <DisassemblerInsn "mov" for 0x40598e>, <DisassemblerInsn "shl" for 0x405990>, <DisassemblerInsn "call" for 0x405993>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4059cf>, <DisassemblerInsn "mov" for 0x4059d4>, <DisassemblerInsn "mov" for 0x4059da>, <DisassemblerInsn "add" for 0x4059df>, <DisassemblerInsn "sub" for 0x4059e5>, <DisassemblerInsn "mov" for 0x4059e8>, <DisassemblerInsn "mov" for 0x4059ed>, <DisassemblerInsn "mov" for 0x4059f3>, <DisassemblerInsn "mov" for 0x4059f8>, <DisassemblerInsn "add" for 0x4059fd>, <DisassemblerInsn "mov" for 0x405a04>, <DisassemblerInsn "mov" for 0x405a09>, <DisassemblerInsn "shl" for 0x405a0f>, <DisassemblerInsn "add" for 0x405a12>, <DisassemblerInsn "cmp" for 0x405a15>, <DisassemblerInsn "jae" for 0x405a18>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405c00>, <DisassemblerInsn "mov" for 0x405c03>, <DisassemblerInsn "mov" for 0x405c08>, <DisassemblerInsn "mov" for 0x405c0c>, <DisassemblerInsn "mov" for 0x405c11>, <DisassemblerInsn "mov" for 0x405c19>, <DisassemblerInsn "cmp" for 0x405c1d>, <DisassemblerInsn "jg" for 0x405c21>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405a1e>, <DisassemblerInsn "movzx" for 0x405a23>, <DisassemblerInsn "cvtsi2ss" for 0x405a26>, <DisassemblerInsn "mov" for 0x405a2a>, <DisassemblerInsn "movzx" for 0x405a2f>, <DisassemblerInsn "cvtsi2ss" for 0x405a32>, <DisassemblerInsn "mulss" for 0x405a36>, <DisassemblerInsn "ucomiss" for 0x405a3c>, <DisassemblerInsn "jb" for 0x405a3f>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4058d3>, <DisassemblerInsn "sub" for 0x4058d7>, <DisassemblerInsn "cdqe" for 0x4058da>, <DisassemblerInsn "movsx" for 0x4058dc>, <DisassemblerInsn "mov" for 0x4058e1>, <DisassemblerInsn "mov" for 0x4058e6>, <DisassemblerInsn "sub" for 0x4058ea>, <DisassemblerInsn "movsxd" for 0x4058ed>, <DisassemblerInsn "movzx" for 0x4058f0>, <DisassemblerInsn "add" for 0x4058f8>, <DisassemblerInsn "mov" for 0x4058fa>, <DisassemblerInsn "movsxd" for 0x4058fd>, <DisassemblerInsn "mov" for 0x405902>, <DisassemblerInsn "mov" for 0x405907>, <DisassemblerInsn "add" for 0x40590b>, <DisassemblerInsn "mov" for 0x40590e>, <DisassemblerInsn "jmp" for 0x405912>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405b51>, <DisassemblerInsn "mov" for 0x405b56>, <DisassemblerInsn "mov" for 0x405b5d>, <DisassemblerInsn "mov" for 0x405b62>, <DisassemblerInsn "mov" for 0x405b69>, <DisassemblerInsn "mov" for 0x405b6e>, <DisassemblerInsn "mov" for 0x405b73>, <DisassemblerInsn "mov" for 0x405b79>, <DisassemblerInsn "mov" for 0x405b81>, <DisassemblerInsn "mov" for 0x405b86>, <DisassemblerInsn "mov" for 0x405b8d>, <DisassemblerInsn "mov" for 0x405b92>, <DisassemblerInsn "add" for 0x405b9c>, <DisassemblerInsn "ret" for 0x405ba0>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x405b48>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405914>, <DisassemblerInsn "add" for 0x405919>, <DisassemblerInsn "mov" for 0x405920>, <DisassemblerInsn "add" for 0x405925>, <DisassemblerInsn "mov" for 0x40592c>, <DisassemblerInsn "mov" for 0x405931>, <DisassemblerInsn "add" for 0x405937>, <DisassemblerInsn "mov" for 0x40593a>, <DisassemblerInsn "mov" for 0x40593c>, <DisassemblerInsn "shl" for 0x40593e>, <DisassemblerInsn "call" for 0x405941>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x405b4a>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "lea" for 0x405a83>, <DisassemblerInsn "mov" for 0x405a88>, <DisassemblerInsn "mov" for 0x405a8d>, <DisassemblerInsn "mov" for 0x405a93>, <DisassemblerInsn "movsx" for 0x405a98>, <DisassemblerInsn "call" for 0x405a9b>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405946>, <DisassemblerInsn "cmp" for 0x40594b>, <DisassemblerInsn "jbe" for 0x405952>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "lea" for 0x405ac9>, <DisassemblerInsn "mov" for 0x405ace>, <DisassemblerInsn "mov" for 0x405ad3>, <DisassemblerInsn "mov" for 0x405ad9>, <DisassemblerInsn "movsx" for 0x405ade>, <DisassemblerInsn "call" for 0x405ae1>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x405ae6>, <DisassemblerInsn "jne" for 0x405ae9>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405aa5>, <DisassemblerInsn "add" for 0x405aaa>, <DisassemblerInsn "mov" for 0x405aae>, <DisassemblerInsn "mov" for 0x405ab3>, <DisassemblerInsn "mov" for 0x405ab8>, <DisassemblerInsn "add" for 0x405abe>, <DisassemblerInsn "mov" for 0x405ac1>, <DisassemblerInsn "jmp" for 0x405ac7>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405a6f>, <DisassemblerInsn "movzx" for 0x405a74>, <DisassemblerInsn "mov" for 0x405a77>, <DisassemblerInsn "movzx" for 0x405a7c>, <DisassemblerInsn "cmp" for 0x405a7f>, <DisassemblerInsn "je" for 0x405a81>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4058c2>, <DisassemblerInsn "mov" for 0x4058c6>, <DisassemblerInsn "cmp" for 0x4058cb>, <DisassemblerInsn "ja" for 0x4058d1>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4059f3>, <DisassemblerInsn "mov" for 0x4059f8>, <DisassemblerInsn "add" for 0x4059fd>, <DisassemblerInsn "mov" for 0x405a04>, <DisassemblerInsn "mov" for 0x405a09>, <DisassemblerInsn "shl" for 0x405a0f>, <DisassemblerInsn "add" for 0x405a12>, <DisassemblerInsn "cmp" for 0x405a15>, <DisassemblerInsn "jae" for 0x405a18>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x405b4f>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x405aa0>, <DisassemblerInsn "jne" for 0x405aa3>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405868>, <DisassemblerInsn "mov" for 0x40586d>, <DisassemblerInsn "sub" for 0x405870>, <DisassemblerInsn "mov" for 0x405873>, <DisassemblerInsn "mov" for 0x405875>, <DisassemblerInsn "lea" for 0x405877>, <DisassemblerInsn "movss" for 0x40587e>, <DisassemblerInsn "movss" for 0x405883>, <DisassemblerInsn "mov" for 0x405889>, <DisassemblerInsn "add" for 0x40588e>, <DisassemblerInsn "add" for 0x405894>, <DisassemblerInsn "mov" for 0x405898>, <DisassemblerInsn "mov" for 0x40589d>, <DisassemblerInsn "add" for 0x4058a2>, <DisassemblerInsn "mov" for 0x4058a8>, <DisassemblerInsn "mov" for 0x4058ad>, <DisassemblerInsn "mov" for 0x4058b2>, <DisassemblerInsn "mov" for 0x4058b5>, <DisassemblerInsn "mov" for 0x4058ba>, <DisassemblerInsn "mov" for 0x4058c2>, <DisassemblerInsn "mov" for 0x4058c6>, <DisassemblerInsn "cmp" for 0x4058cb>, <DisassemblerInsn "ja" for 0x4058d1>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "add" for 0x405b9c>, <DisassemblerInsn "ret" for 0x405ba0>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405b1d>, <DisassemblerInsn "mov" for 0x405b22>, <DisassemblerInsn "add" for 0x405b25>, <DisassemblerInsn "mov" for 0x405b29>, <DisassemblerInsn "mov" for 0x405b2e>, <DisassemblerInsn "mov" for 0x405b31>, <DisassemblerInsn "mov" for 0x405b36>, <DisassemblerInsn "add" for 0x405b39>, <DisassemblerInsn "mov" for 0x405b3d>, <DisassemblerInsn "mov" for 0x405b42>, <DisassemblerInsn "jmp" for 0x405b46>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405aeb>, <DisassemblerInsn "mov" for 0x405af0>, <DisassemblerInsn "add" for 0x405af3>, <DisassemblerInsn "mov" for 0x405af7>, <DisassemblerInsn "mov" for 0x405afc>, <DisassemblerInsn "mov" for 0x405aff>, <DisassemblerInsn "mov" for 0x405b04>, <DisassemblerInsn "mov" for 0x405b07>, <DisassemblerInsn "mov" for 0x405b0c>, <DisassemblerInsn "add" for 0x405b12>, <DisassemblerInsn "mov" for 0x405b15>, <DisassemblerInsn "jmp" for 0x405b1b>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405998>, <DisassemblerInsn "add" for 0x40599d>, <DisassemblerInsn "mov" for 0x4059a4>, <DisassemblerInsn "mov" for 0x4059a9>, <DisassemblerInsn "mov" for 0x4059af>, <DisassemblerInsn "add" for 0x4059b4>, <DisassemblerInsn "mov" for 0x4059ba>, <DisassemblerInsn "mov" for 0x4059bc>, <DisassemblerInsn "mov" for 0x4059be>, <DisassemblerInsn "lea" for 0x4059c3>, <DisassemblerInsn "call" for 0x4059ca>]'}], 'cfg_block_detailed_info': [{'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rcx, rax>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x10], rcx>', '<mov~~cx, word ptr [rax]>', '<mov~~rax, qword ptr [rsp + 8]>', '<mov~~rdx, rax>', '<add~~rdx, 2>', '<mov~~qword ptr [rsp + 8], rdx>', '<mov~~word ptr [rax + 2], cx>', '<jmp~~0x405b4a>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x38>', '<mov~~qword ptr [rsp + 0x30], rdi>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<cmp~~dword ptr [rax + 0x18], 0>', '<jbe~~0x405b51>']}, {'block_Idx': 44, 'blockInsts': ['<jmp~~0x405b48>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<add~~rdi, 0x2ae12>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rax + 0x2ad00]>', '<shl~~rax, 1>', '<add~~rdi, rax>', '<add~~rdi, 2>', '<lea~~rsi, [rsp + 0x1a]>', '<add~~rsi, 2>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rax + 0x2ae4c]>', '<sub~~eax, 1>', '<mov~~eax, eax>', '<mov~~edx, eax>', '<shl~~rdx, 1>', '<call~~0x500050>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~ecx, dword ptr [rax + 0x2ad00]>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<add~~ecx, dword ptr [rax + 0x2ae4c]>', '<sub~~ecx, 1>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~dword ptr [rax + 0x2ad0c], ecx>', '<mov~~rax, qword ptr [rsp + 8]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<add~~rcx, 0x2ae12>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<mov~~edx, dword ptr [rdx + 0x2ad0c]>', '<shl~~rdx, 1>', '<add~~rcx, rdx>', '<cmp~~rax, rcx>', '<jae~~0x405b4f>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~ax, dx>', '<mov~~qword ptr [rsp - 0x10], rdi>', '<mov~~dword ptr [rsp - 0x14], esi>', '<mov~~word ptr [rsp - 0x16], ax>', '<mov~~dword ptr [rsp - 0x1c], 0>', '<mov~~eax, dword ptr [rsp - 0x1c]>', '<cmp~~eax, dword ptr [rsp - 0x14]>', '<jg~~0x405c53>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<movzx~~eax, word ptr [rax]>', '<cvtsi2ss~~xmm0, eax>', '<mov~~rax, qword ptr [rsp + 8]>', '<movzx~~eax, word ptr [rax]>', '<cvtsi2ss~~xmm1, eax>', '<mulss~~xmm1, dword ptr [rsp + 0x28]>', '<ucomiss~~xmm0, xmm1>', '<jb~~0x405a6f>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2c]>', '<sub~~eax, 1>', '<cdqe~~>', '<movsx~~eax, word ptr [rsp + rax*2 + 0x1a]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<mov~~edx, dword ptr [rsp + 0x2c]>', '<sub~~edx, 1>', '<movsxd~~rdx, edx>', '<movzx~~ecx, byte ptr [rcx + rdx + 0x2ae50]>', '<add~~eax, ecx>', '<mov~~cx, ax>', '<movsxd~~rax, dword ptr [rsp + 0x2c]>', '<mov~~word ptr [rsp + rax*2 + 0x1a], cx>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<jmp~~0x4058c2>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~cx, word ptr [rax + 0x2ad72]>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~word ptr [rax + 0x2ae12], cx>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<mov~~ecx, dword ptr [rcx + 0x2ad00]>', '<mov~~cx, word ptr [rax + rcx*2 + 0x2ad72]>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~word ptr [rax + 0x2ae14], cx>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~dword ptr [rax + 0x2ad0c], 1>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 21, 'blockInsts': ['<jmp~~0x405b4a>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<add~~rdi, 0x2ae12>', '<mov~~rsi, qword ptr [rsp + 0x30]>', '<add~~rsi, 0x2ad72>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rax + 0x2ad00]>', '<add~~eax, 1>', '<mov~~eax, eax>', '<mov~~edx, eax>', '<shl~~rdx, 1>', '<call~~0x500050>']}, {'block_Idx': 20, 'blockInsts': ['<jmp~~0x4059f3>']}, {'block_Idx': 19, 'blockInsts': ['<lea~~rdi, [rsp + 0x1a]>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~esi, dword ptr [rax + 0x2ae4c]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<movsx~~edx, word ptr [rax]>', '<call~~0x405c00>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x30]>', '<cmp~~dword ptr [rax + 0x2ae4c], 1>', '<jbe~~0x405998>']}, {'block_Idx': 31, 'blockInsts': ['<lea~~rdi, [rsp + 0x1a]>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~esi, dword ptr [rax + 0x2ae4c]>', '<mov~~rax, qword ptr [rsp + 8]>', '<movsx~~edx, word ptr [rax]>', '<call~~0x405c00>']}, {'block_Idx': 38, 'blockInsts': ['<cmp~~eax, 0>', '<jne~~0x405b1d>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<add~~rax, 2>', '<mov~~qword ptr [rsp + 0x10], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~ecx, dword ptr [rax + 0x2ad0c]>', '<add~~ecx, -1>', '<mov~~dword ptr [rax + 0x2ad0c], ecx>', '<jmp~~0x405b48>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<movzx~~eax, word ptr [rax]>', '<mov~~rcx, qword ptr [rsp + 8]>', '<movzx~~ecx, word ptr [rcx]>', '<cmp~~eax, ecx>', '<je~~0x405aa5>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2c]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<cmp~~eax, dword ptr [rcx + 0x2ae4c]>', '<ja~~0x405914>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<add~~rcx, 0x2ae12>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<mov~~edx, dword ptr [rdx + 0x2ad0c]>', '<shl~~rdx, 1>', '<add~~rcx, rdx>', '<cmp~~rax, rcx>', '<jae~~0x405b4f>']}, {'block_Idx': 14, 'blockInsts': ['<jmp~~0x405b9c>']}, {'block_Idx': 28, 'blockInsts': ['<cmp~~eax, 0>', '<jne~~0x405ac9>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rax + 0x18]>', '<sub~~eax, 1>', '<mov~~eax, eax>', '<mov~~ecx, eax>', '<lea~~rax, [rip + 0x552e]>', '<movss~~xmm0, dword ptr [rax + rcx*4]>', '<movss~~dword ptr [rsp + 0x28], xmm0>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<add~~rax, 0x2ae12>', '<add~~rax, 2>', '<mov~~qword ptr [rsp + 0x10], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<add~~rax, 0x2ae12>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rax + 0x44]>', '<mov~~word ptr [rsp + 0x1a], ax>', '<mov~~dword ptr [rsp + 0x2c], 1>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<cmp~~eax, dword ptr [rcx + 0x2ae4c]>', '<ja~~0x405914>']}, {'block_Idx': 17, 'blockInsts': ['<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 42, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rcx, rax>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x10], rcx>', '<mov~~cx, word ptr [rax]>', '<mov~~rax, qword ptr [rsp + 8]>', '<mov~~rdx, rax>', '<add~~rdx, 2>', '<mov~~qword ptr [rsp + 8], rdx>', '<mov~~word ptr [rax + 2], cx>', '<jmp~~0x405b48>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rcx, rax>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x10], rcx>', '<mov~~cx, word ptr [rax]>', '<mov~~rax, qword ptr [rsp + 8]>', '<mov~~word ptr [rax], cx>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~ecx, dword ptr [rax + 0x2ad0c]>', '<add~~ecx, -1>', '<mov~~dword ptr [rax + 0x2ad0c], ecx>', '<jmp~~0x405b46>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<add~~rdi, 0x2ae12>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rax + 0x2ae4c]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<add~~eax, dword ptr [rcx + 0x2ad00]>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<mov~~edx, 2>', '<lea~~rcx, [rip + 0x216]>', '<call~~0x500060>']}], 'cfg_edge_info': [(16, 20), (5, 4), (20, 23), (23, 13), (12, 13), (38, 41), (0, 2), (28, 18), (9, 8), (8, 12), (31, 38), (19, 33), (5, 3), (0, 1), (2, 4), (13, 16), (7, 9), (15, 19), (41, 44), (18, 21), (4, 7), (3, 5), (12, 14), (23, 14), (21, 20), (38, 42), (14, 17), (31, 33), (2, 3), (42, 21), (28, 31), (19, 28), (13, 15), (15, 18), (7, 8)], 'cdg_edge_info': [(23, 13), (12, 13), (0, 2), (0, 8), (0, 14), (2, 5), (0, 17), (15, 14), (15, 17), (15, 23), (15, 20), (5, 3), (0, 1), (0, 7), (0, 4), (13, 16), (7, 9), (15, 19), (23, 23), (12, 23), (5, 5), (12, 20), (23, 20), (2, 3), (0, 12), (13, 18), (13, 15)], 'ddg_edge_info': [(4, 9), (9, 8), (0, 5), (19, 18), (8, 18), (41, 15), (16, 13), (41, 42), (42, 41), (18, 19), (16, 31), (2, 41), (12, 18), (41, 17), (13, 19), (1, 17), (16, 15), (31, 15), (16, 42), (31, 42), (41, 19), (42, 18), (5, 7), (0, 2), (16, 19), (18, 16), (31, 19), (5, 9), (42, 13), (41, 23), (13, 16), (2, 13), (42, 31), (2, 31), (3, 5), (41, 16), (42, 15), (8, 13), (2, 15), (19, 31), (16, 23), (2, 42), (31, 23), (18, 41), (41, 18), (8, 15), (42, 17), (31, 16), (4, 8), (0, 4), (42, 19), (8, 17), (2, 19), (31, 18), (12, 23), (41, 13), (2, 3), (8, 19), (16, 41), (8, 12), (31, 41), (42, 23), (2, 5), (2, 23), (31, 13), (18, 13), (23, 18), (0, 1), (42, 16), (19, 23), (8, 23), (2, 16), (16, 18), (18, 15), (4, 7), (5, 8), (18, 42), (0, 3), (8, 16), (2, 18), (13, 15), (41, 31)]}]}
{'sbr_make_f_tablelim': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 5, 'instruction': 'movq\t0x30(%rsp), %rax'}, {'instIndex': 6, 'instruction': 'movl\t0x18(%rax), %eax'}, {'instIndex': 7, 'instruction': 'subl\t$1, %eax'}, {'instIndex': 8, 'instruction': 'movl\t%eax, %eax'}, {'instIndex': 9, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 10, 'instruction': 'leaq\tsbr_make_f_tablelim.bands_warped(%rip), %rax'}, {'instIndex': 11, 'instruction': 'movss\t(%rax,%rcx,4), %xmm0            # xmm0 = mem[0],zero,zero,zero'}, {'instIndex': 12, 'instruction': 'movss\t%xmm0, 0x28(%rsp)'}, {'instIndex': 13, 'instruction': 'movq\t0x30(%rsp), %rax'}, {'instIndex': 14, 'instruction': 'addq\t$0x2ae12, %rax                   # imm = 0x2AE12'}, {'instIndex': 15, 'instruction': 'addq\t$2, %rax'}, {'instIndex': 16, 'instruction': 'movq\t%rax, 0x10(%rsp)'}, {'instIndex': 17, 'instruction': 'movq\t0x30(%rsp), %rax'}, {'instIndex': 18, 'instruction': 'addq\t$0x2ae12, %rax                   # imm = 0x2AE12'}, {'instIndex': 19, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 20, 'instruction': 'movq\t0x30(%rsp), %rax'}, {'instIndex': 21, 'instruction': 'movl\t0x44(%rax), %eax'}, {'instIndex': 22, 'instruction': 'movw\t%ax, 0x1a(%rsp)'}]}]}
The case of compiler clang with optimization O0.
Patched source code file: aacsbr.c
Patched function: 1---static void sbr_make_f_tablelim 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_after/O0/aacsbr.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_after/O0/aacsbr.s---sbr_make_f_tablelim---after
function id: 25
function flag: True
There are 192 instructions for function: sbr_make_f_tablelim in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '174', 'end': 180}, 'before': {'start': '174', 'end': 180}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 5, 'instruction': 'movq\t0x30(%rsp), %rax'}, {'instIndex': 6, 'instruction': 'movl\t0x18(%rax), %eax'}, {'instIndex': 7, 'instruction': 'subl\t$1, %eax'}, {'instIndex': 8, 'instruction': 'movl\t%eax, %eax'}, {'instIndex': 9, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 10, 'instruction': 'leaq\tsbr_make_f_tablelim.bands_warped(%rip), %rax'}, {'instIndex': 11, 'instruction': 'movss\t(%rax,%rcx,4), %xmm0            # xmm0 = mem[0],zero,zero,zero'}, {'instIndex': 12, 'instruction': 'movss\t%xmm0, 0x28(%rsp)'}, {'instIndex': 13, 'instruction': 'movq\t0x30(%rsp), %rax'}, {'instIndex': 14, 'instruction': 'addq\t$0x2ae12, %rax                   # imm = 0x2AE12'}, {'instIndex': 15, 'instruction': 'addq\t$2, %rax'}, {'instIndex': 16, 'instruction': 'movq\t%rax, 0x10(%rsp)'}, {'instIndex': 17, 'instruction': 'movq\t0x30(%rsp), %rax'}, {'instIndex': 18, 'instruction': 'addq\t$0x2ae12, %rax                   # imm = 0x2AE12'}, {'instIndex': 19, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 20, 'instruction': 'movq\t0x30(%rsp), %rax'}, {'instIndex': 21, 'instruction': 'movl\t0x44(%rax), %eax'}, {'instIndex': 22, 'instruction': 'movw\t%ax, 0x1a(%rsp)'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_after/O0/aacsbr.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_after/O0/aacsbr.o---after
The extraction of function: sbr_make_f_tablelim
Analyzing the binaries to generate subCFGs from patched function ...
It has 1178 nodes and 2072 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 192 instructions in binary file.
[4216936]
The execution time of patched subCFG information extraction via angr: 0:00:01.948883
{'sbr_make_f_tablelim': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405914>, <DisassemblerInsn "add" for 0x405919>, <DisassemblerInsn "mov" for 0x405920>, <DisassemblerInsn "add" for 0x405925>, <DisassemblerInsn "mov" for 0x40592c>, <DisassemblerInsn "mov" for 0x405931>, <DisassemblerInsn "add" for 0x405937>, <DisassemblerInsn "mov" for 0x40593a>, <DisassemblerInsn "mov" for 0x40593c>, <DisassemblerInsn "shl" for 0x40593e>, <DisassemblerInsn "call" for 0x405941>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4058d3>, <DisassemblerInsn "sub" for 0x4058d7>, <DisassemblerInsn "cdqe" for 0x4058da>, <DisassemblerInsn "movsx" for 0x4058dc>, <DisassemblerInsn "mov" for 0x4058e1>, <DisassemblerInsn "mov" for 0x4058e6>, <DisassemblerInsn "sub" for 0x4058ea>, <DisassemblerInsn "movsxd" for 0x4058ed>, <DisassemblerInsn "movzx" for 0x4058f0>, <DisassemblerInsn "add" for 0x4058f8>, <DisassemblerInsn "mov" for 0x4058fa>, <DisassemblerInsn "movsxd" for 0x4058fd>, <DisassemblerInsn "mov" for 0x405902>, <DisassemblerInsn "mov" for 0x405907>, <DisassemblerInsn "add" for 0x40590b>, <DisassemblerInsn "mov" for 0x40590e>, <DisassemblerInsn "jmp" for 0x405912>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405868>, <DisassemblerInsn "mov" for 0x40586d>, <DisassemblerInsn "sub" for 0x405870>, <DisassemblerInsn "mov" for 0x405873>, <DisassemblerInsn "mov" for 0x405875>, <DisassemblerInsn "lea" for 0x405877>, <DisassemblerInsn "movss" for 0x40587e>, <DisassemblerInsn "movss" for 0x405883>, <DisassemblerInsn "mov" for 0x405889>, <DisassemblerInsn "add" for 0x40588e>, <DisassemblerInsn "add" for 0x405894>, <DisassemblerInsn "mov" for 0x405898>, <DisassemblerInsn "mov" for 0x40589d>, <DisassemblerInsn "add" for 0x4058a2>, <DisassemblerInsn "mov" for 0x4058a8>, <DisassemblerInsn "mov" for 0x4058ad>, <DisassemblerInsn "mov" for 0x4058b2>, <DisassemblerInsn "mov" for 0x4058b5>, <DisassemblerInsn "mov" for 0x4058ba>, <DisassemblerInsn "mov" for 0x4058c2>, <DisassemblerInsn "mov" for 0x4058c6>, <DisassemblerInsn "cmp" for 0x4058cb>, <DisassemblerInsn "ja" for 0x4058d1>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x405850>, <DisassemblerInsn "mov" for 0x405854>, <DisassemblerInsn "mov" for 0x405859>, <DisassemblerInsn "cmp" for 0x40585e>, <DisassemblerInsn "jbe" for 0x405862>]'}], 'cfg_block_detailed_info': [{'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<add~~rdi, 0x2ae12>', '<mov~~rsi, qword ptr [rsp + 0x30]>', '<add~~rsi, 0x2ad72>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rax + 0x2ad00]>', '<add~~eax, 1>', '<mov~~eax, eax>', '<mov~~edx, eax>', '<shl~~rdx, 1>', '<call~~0x500050>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2c]>', '<sub~~eax, 1>', '<cdqe~~>', '<movsx~~eax, word ptr [rsp + rax*2 + 0x1a]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<mov~~edx, dword ptr [rsp + 0x2c]>', '<sub~~edx, 1>', '<movsxd~~rdx, edx>', '<movzx~~ecx, byte ptr [rcx + rdx + 0x2ae50]>', '<add~~eax, ecx>', '<mov~~cx, ax>', '<movsxd~~rax, dword ptr [rsp + 0x2c]>', '<mov~~word ptr [rsp + rax*2 + 0x1a], cx>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<jmp~~0x4058c2>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rax + 0x18]>', '<sub~~eax, 1>', '<mov~~eax, eax>', '<mov~~ecx, eax>', '<lea~~rax, [rip + 0x552e]>', '<movss~~xmm0, dword ptr [rax + rcx*4]>', '<movss~~dword ptr [rsp + 0x28], xmm0>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<add~~rax, 0x2ae12>', '<add~~rax, 2>', '<mov~~qword ptr [rsp + 0x10], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<add~~rax, 0x2ae12>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rax + 0x44]>', '<mov~~word ptr [rsp + 0x1a], ax>', '<mov~~dword ptr [rsp + 0x2c], 1>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<cmp~~eax, dword ptr [rcx + 0x2ae4c]>', '<ja~~0x405914>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x38>', '<mov~~qword ptr [rsp + 0x30], rdi>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<cmp~~dword ptr [rax + 0x18], 0>', '<jbe~~0x405b51>']}], 'cfg_edge_info': [(2, 3), (0, 2), (2, 4)]}]}
{'sbr_make_f_tablelim': [4216936]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_after/O0/aacsbr.o---after
The extraction of function: sbr_make_f_tablelim
[4216936]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 45 nodes and 64 edges in CFGEmulated.
It has 45 nodes and 59 edges in CDG.
It has 809 nodes and 1106 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4216936]
{4217475, 4217108, 4217240, 4217756, 4217629, 4217374, 4217509, 4217409, 4217026, 4217158, 4217545, 4217674, 4217295, 4216912, 4217681, 4217679, 4217043, 4217172, 4216936, 4217579, 4217455, 4217331}
[16, 0, 44, 9, 12, 33, 13, 3, 1, 21, 4, 20, 19, 7, 31, 38, 18, 15, 5, 23, 14, 28, 2, 17, 42, 41, 8]
The execution time of patched slicing information extraction via angr: 0:00:06.949780
{'sbr_make_f_tablelim': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405a41>, <DisassemblerInsn "mov" for 0x405a46>, <DisassemblerInsn "add" for 0x405a49>, <DisassemblerInsn "mov" for 0x405a4d>, <DisassemblerInsn "mov" for 0x405a52>, <DisassemblerInsn "mov" for 0x405a55>, <DisassemblerInsn "mov" for 0x405a5a>, <DisassemblerInsn "add" for 0x405a5d>, <DisassemblerInsn "mov" for 0x405a61>, <DisassemblerInsn "mov" for 0x405a66>, <DisassemblerInsn "jmp" for 0x405a6a>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x405850>, <DisassemblerInsn "mov" for 0x405854>, <DisassemblerInsn "mov" for 0x405859>, <DisassemblerInsn "cmp" for 0x40585e>, <DisassemblerInsn "jbe" for 0x405862>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x405b46>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405954>, <DisassemblerInsn "add" for 0x405959>, <DisassemblerInsn "mov" for 0x405960>, <DisassemblerInsn "mov" for 0x405965>, <DisassemblerInsn "shl" for 0x40596b>, <DisassemblerInsn "add" for 0x40596e>, <DisassemblerInsn "add" for 0x405971>, <DisassemblerInsn "lea" for 0x405975>, <DisassemblerInsn "add" for 0x40597a>, <DisassemblerInsn "mov" for 0x40597e>, <DisassemblerInsn "mov" for 0x405983>, <DisassemblerInsn "sub" for 0x405989>, <DisassemblerInsn "mov" for 0x40598c>, <DisassemblerInsn "mov" for 0x40598e>, <DisassemblerInsn "shl" for 0x405990>, <DisassemblerInsn "call" for 0x405993>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4059cf>, <DisassemblerInsn "mov" for 0x4059d4>, <DisassemblerInsn "mov" for 0x4059da>, <DisassemblerInsn "add" for 0x4059df>, <DisassemblerInsn "sub" for 0x4059e5>, <DisassemblerInsn "mov" for 0x4059e8>, <DisassemblerInsn "mov" for 0x4059ed>, <DisassemblerInsn "mov" for 0x4059f3>, <DisassemblerInsn "mov" for 0x4059f8>, <DisassemblerInsn "add" for 0x4059fd>, <DisassemblerInsn "mov" for 0x405a04>, <DisassemblerInsn "mov" for 0x405a09>, <DisassemblerInsn "shl" for 0x405a0f>, <DisassemblerInsn "add" for 0x405a12>, <DisassemblerInsn "cmp" for 0x405a15>, <DisassemblerInsn "jae" for 0x405a18>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405c00>, <DisassemblerInsn "mov" for 0x405c03>, <DisassemblerInsn "mov" for 0x405c08>, <DisassemblerInsn "mov" for 0x405c0c>, <DisassemblerInsn "mov" for 0x405c11>, <DisassemblerInsn "mov" for 0x405c19>, <DisassemblerInsn "cmp" for 0x405c1d>, <DisassemblerInsn "jg" for 0x405c21>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405a1e>, <DisassemblerInsn "movzx" for 0x405a23>, <DisassemblerInsn "cvtsi2ss" for 0x405a26>, <DisassemblerInsn "mov" for 0x405a2a>, <DisassemblerInsn "movzx" for 0x405a2f>, <DisassemblerInsn "cvtsi2ss" for 0x405a32>, <DisassemblerInsn "mulss" for 0x405a36>, <DisassemblerInsn "ucomiss" for 0x405a3c>, <DisassemblerInsn "jb" for 0x405a3f>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4058d3>, <DisassemblerInsn "sub" for 0x4058d7>, <DisassemblerInsn "cdqe" for 0x4058da>, <DisassemblerInsn "movsx" for 0x4058dc>, <DisassemblerInsn "mov" for 0x4058e1>, <DisassemblerInsn "mov" for 0x4058e6>, <DisassemblerInsn "sub" for 0x4058ea>, <DisassemblerInsn "movsxd" for 0x4058ed>, <DisassemblerInsn "movzx" for 0x4058f0>, <DisassemblerInsn "add" for 0x4058f8>, <DisassemblerInsn "mov" for 0x4058fa>, <DisassemblerInsn "movsxd" for 0x4058fd>, <DisassemblerInsn "mov" for 0x405902>, <DisassemblerInsn "mov" for 0x405907>, <DisassemblerInsn "add" for 0x40590b>, <DisassemblerInsn "mov" for 0x40590e>, <DisassemblerInsn "jmp" for 0x405912>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405b51>, <DisassemblerInsn "mov" for 0x405b56>, <DisassemblerInsn "mov" for 0x405b5d>, <DisassemblerInsn "mov" for 0x405b62>, <DisassemblerInsn "mov" for 0x405b69>, <DisassemblerInsn "mov" for 0x405b6e>, <DisassemblerInsn "mov" for 0x405b73>, <DisassemblerInsn "mov" for 0x405b79>, <DisassemblerInsn "mov" for 0x405b81>, <DisassemblerInsn "mov" for 0x405b86>, <DisassemblerInsn "mov" for 0x405b8d>, <DisassemblerInsn "mov" for 0x405b92>, <DisassemblerInsn "add" for 0x405b9c>, <DisassemblerInsn "ret" for 0x405ba0>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x405b48>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405914>, <DisassemblerInsn "add" for 0x405919>, <DisassemblerInsn "mov" for 0x405920>, <DisassemblerInsn "add" for 0x405925>, <DisassemblerInsn "mov" for 0x40592c>, <DisassemblerInsn "mov" for 0x405931>, <DisassemblerInsn "add" for 0x405937>, <DisassemblerInsn "mov" for 0x40593a>, <DisassemblerInsn "mov" for 0x40593c>, <DisassemblerInsn "shl" for 0x40593e>, <DisassemblerInsn "call" for 0x405941>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x405b4a>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "lea" for 0x405a83>, <DisassemblerInsn "mov" for 0x405a88>, <DisassemblerInsn "mov" for 0x405a8d>, <DisassemblerInsn "mov" for 0x405a93>, <DisassemblerInsn "movsx" for 0x405a98>, <DisassemblerInsn "call" for 0x405a9b>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405946>, <DisassemblerInsn "cmp" for 0x40594b>, <DisassemblerInsn "jbe" for 0x405952>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "lea" for 0x405ac9>, <DisassemblerInsn "mov" for 0x405ace>, <DisassemblerInsn "mov" for 0x405ad3>, <DisassemblerInsn "mov" for 0x405ad9>, <DisassemblerInsn "movsx" for 0x405ade>, <DisassemblerInsn "call" for 0x405ae1>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x405ae6>, <DisassemblerInsn "jne" for 0x405ae9>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405aa5>, <DisassemblerInsn "add" for 0x405aaa>, <DisassemblerInsn "mov" for 0x405aae>, <DisassemblerInsn "mov" for 0x405ab3>, <DisassemblerInsn "mov" for 0x405ab8>, <DisassemblerInsn "add" for 0x405abe>, <DisassemblerInsn "mov" for 0x405ac1>, <DisassemblerInsn "jmp" for 0x405ac7>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405a6f>, <DisassemblerInsn "movzx" for 0x405a74>, <DisassemblerInsn "mov" for 0x405a77>, <DisassemblerInsn "movzx" for 0x405a7c>, <DisassemblerInsn "cmp" for 0x405a7f>, <DisassemblerInsn "je" for 0x405a81>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4058c2>, <DisassemblerInsn "mov" for 0x4058c6>, <DisassemblerInsn "cmp" for 0x4058cb>, <DisassemblerInsn "ja" for 0x4058d1>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4059f3>, <DisassemblerInsn "mov" for 0x4059f8>, <DisassemblerInsn "add" for 0x4059fd>, <DisassemblerInsn "mov" for 0x405a04>, <DisassemblerInsn "mov" for 0x405a09>, <DisassemblerInsn "shl" for 0x405a0f>, <DisassemblerInsn "add" for 0x405a12>, <DisassemblerInsn "cmp" for 0x405a15>, <DisassemblerInsn "jae" for 0x405a18>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x405b4f>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x405aa0>, <DisassemblerInsn "jne" for 0x405aa3>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405868>, <DisassemblerInsn "mov" for 0x40586d>, <DisassemblerInsn "sub" for 0x405870>, <DisassemblerInsn "mov" for 0x405873>, <DisassemblerInsn "mov" for 0x405875>, <DisassemblerInsn "lea" for 0x405877>, <DisassemblerInsn "movss" for 0x40587e>, <DisassemblerInsn "movss" for 0x405883>, <DisassemblerInsn "mov" for 0x405889>, <DisassemblerInsn "add" for 0x40588e>, <DisassemblerInsn "add" for 0x405894>, <DisassemblerInsn "mov" for 0x405898>, <DisassemblerInsn "mov" for 0x40589d>, <DisassemblerInsn "add" for 0x4058a2>, <DisassemblerInsn "mov" for 0x4058a8>, <DisassemblerInsn "mov" for 0x4058ad>, <DisassemblerInsn "mov" for 0x4058b2>, <DisassemblerInsn "mov" for 0x4058b5>, <DisassemblerInsn "mov" for 0x4058ba>, <DisassemblerInsn "mov" for 0x4058c2>, <DisassemblerInsn "mov" for 0x4058c6>, <DisassemblerInsn "cmp" for 0x4058cb>, <DisassemblerInsn "ja" for 0x4058d1>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "add" for 0x405b9c>, <DisassemblerInsn "ret" for 0x405ba0>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405b1d>, <DisassemblerInsn "mov" for 0x405b22>, <DisassemblerInsn "add" for 0x405b25>, <DisassemblerInsn "mov" for 0x405b29>, <DisassemblerInsn "mov" for 0x405b2e>, <DisassemblerInsn "mov" for 0x405b31>, <DisassemblerInsn "mov" for 0x405b36>, <DisassemblerInsn "add" for 0x405b39>, <DisassemblerInsn "mov" for 0x405b3d>, <DisassemblerInsn "mov" for 0x405b42>, <DisassemblerInsn "jmp" for 0x405b46>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405aeb>, <DisassemblerInsn "mov" for 0x405af0>, <DisassemblerInsn "add" for 0x405af3>, <DisassemblerInsn "mov" for 0x405af7>, <DisassemblerInsn "mov" for 0x405afc>, <DisassemblerInsn "mov" for 0x405aff>, <DisassemblerInsn "mov" for 0x405b04>, <DisassemblerInsn "mov" for 0x405b07>, <DisassemblerInsn "mov" for 0x405b0c>, <DisassemblerInsn "add" for 0x405b12>, <DisassemblerInsn "mov" for 0x405b15>, <DisassemblerInsn "jmp" for 0x405b1b>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405998>, <DisassemblerInsn "add" for 0x40599d>, <DisassemblerInsn "mov" for 0x4059a4>, <DisassemblerInsn "mov" for 0x4059a9>, <DisassemblerInsn "mov" for 0x4059af>, <DisassemblerInsn "add" for 0x4059b4>, <DisassemblerInsn "mov" for 0x4059ba>, <DisassemblerInsn "mov" for 0x4059bc>, <DisassemblerInsn "mov" for 0x4059be>, <DisassemblerInsn "lea" for 0x4059c3>, <DisassemblerInsn "call" for 0x4059ca>]'}], 'cfg_block_detailed_info': [{'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rcx, rax>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x10], rcx>', '<mov~~cx, word ptr [rax]>', '<mov~~rax, qword ptr [rsp + 8]>', '<mov~~rdx, rax>', '<add~~rdx, 2>', '<mov~~qword ptr [rsp + 8], rdx>', '<mov~~word ptr [rax + 2], cx>', '<jmp~~0x405b4a>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x38>', '<mov~~qword ptr [rsp + 0x30], rdi>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<cmp~~dword ptr [rax + 0x18], 0>', '<jbe~~0x405b51>']}, {'block_Idx': 44, 'blockInsts': ['<jmp~~0x405b48>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<add~~rdi, 0x2ae12>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rax + 0x2ad00]>', '<shl~~rax, 1>', '<add~~rdi, rax>', '<add~~rdi, 2>', '<lea~~rsi, [rsp + 0x1a]>', '<add~~rsi, 2>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rax + 0x2ae4c]>', '<sub~~eax, 1>', '<mov~~eax, eax>', '<mov~~edx, eax>', '<shl~~rdx, 1>', '<call~~0x500050>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~ecx, dword ptr [rax + 0x2ad00]>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<add~~ecx, dword ptr [rax + 0x2ae4c]>', '<sub~~ecx, 1>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~dword ptr [rax + 0x2ad0c], ecx>', '<mov~~rax, qword ptr [rsp + 8]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<add~~rcx, 0x2ae12>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<mov~~edx, dword ptr [rdx + 0x2ad0c]>', '<shl~~rdx, 1>', '<add~~rcx, rdx>', '<cmp~~rax, rcx>', '<jae~~0x405b4f>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~ax, dx>', '<mov~~qword ptr [rsp - 0x10], rdi>', '<mov~~dword ptr [rsp - 0x14], esi>', '<mov~~word ptr [rsp - 0x16], ax>', '<mov~~dword ptr [rsp - 0x1c], 0>', '<mov~~eax, dword ptr [rsp - 0x1c]>', '<cmp~~eax, dword ptr [rsp - 0x14]>', '<jg~~0x405c53>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<movzx~~eax, word ptr [rax]>', '<cvtsi2ss~~xmm0, eax>', '<mov~~rax, qword ptr [rsp + 8]>', '<movzx~~eax, word ptr [rax]>', '<cvtsi2ss~~xmm1, eax>', '<mulss~~xmm1, dword ptr [rsp + 0x28]>', '<ucomiss~~xmm0, xmm1>', '<jb~~0x405a6f>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2c]>', '<sub~~eax, 1>', '<cdqe~~>', '<movsx~~eax, word ptr [rsp + rax*2 + 0x1a]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<mov~~edx, dword ptr [rsp + 0x2c]>', '<sub~~edx, 1>', '<movsxd~~rdx, edx>', '<movzx~~ecx, byte ptr [rcx + rdx + 0x2ae50]>', '<add~~eax, ecx>', '<mov~~cx, ax>', '<movsxd~~rax, dword ptr [rsp + 0x2c]>', '<mov~~word ptr [rsp + rax*2 + 0x1a], cx>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<jmp~~0x4058c2>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~cx, word ptr [rax + 0x2ad72]>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~word ptr [rax + 0x2ae12], cx>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<mov~~ecx, dword ptr [rcx + 0x2ad00]>', '<mov~~cx, word ptr [rax + rcx*2 + 0x2ad72]>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~word ptr [rax + 0x2ae14], cx>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~dword ptr [rax + 0x2ad0c], 1>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 21, 'blockInsts': ['<jmp~~0x405b4a>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<add~~rdi, 0x2ae12>', '<mov~~rsi, qword ptr [rsp + 0x30]>', '<add~~rsi, 0x2ad72>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rax + 0x2ad00]>', '<add~~eax, 1>', '<mov~~eax, eax>', '<mov~~edx, eax>', '<shl~~rdx, 1>', '<call~~0x500050>']}, {'block_Idx': 20, 'blockInsts': ['<jmp~~0x4059f3>']}, {'block_Idx': 19, 'blockInsts': ['<lea~~rdi, [rsp + 0x1a]>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~esi, dword ptr [rax + 0x2ae4c]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<movsx~~edx, word ptr [rax]>', '<call~~0x405c00>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x30]>', '<cmp~~dword ptr [rax + 0x2ae4c], 1>', '<jbe~~0x405998>']}, {'block_Idx': 31, 'blockInsts': ['<lea~~rdi, [rsp + 0x1a]>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~esi, dword ptr [rax + 0x2ae4c]>', '<mov~~rax, qword ptr [rsp + 8]>', '<movsx~~edx, word ptr [rax]>', '<call~~0x405c00>']}, {'block_Idx': 38, 'blockInsts': ['<cmp~~eax, 0>', '<jne~~0x405b1d>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<add~~rax, 2>', '<mov~~qword ptr [rsp + 0x10], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~ecx, dword ptr [rax + 0x2ad0c]>', '<add~~ecx, -1>', '<mov~~dword ptr [rax + 0x2ad0c], ecx>', '<jmp~~0x405b48>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<movzx~~eax, word ptr [rax]>', '<mov~~rcx, qword ptr [rsp + 8]>', '<movzx~~ecx, word ptr [rcx]>', '<cmp~~eax, ecx>', '<je~~0x405aa5>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2c]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<cmp~~eax, dword ptr [rcx + 0x2ae4c]>', '<ja~~0x405914>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<add~~rcx, 0x2ae12>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<mov~~edx, dword ptr [rdx + 0x2ad0c]>', '<shl~~rdx, 1>', '<add~~rcx, rdx>', '<cmp~~rax, rcx>', '<jae~~0x405b4f>']}, {'block_Idx': 14, 'blockInsts': ['<jmp~~0x405b9c>']}, {'block_Idx': 28, 'blockInsts': ['<cmp~~eax, 0>', '<jne~~0x405ac9>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rax + 0x18]>', '<sub~~eax, 1>', '<mov~~eax, eax>', '<mov~~ecx, eax>', '<lea~~rax, [rip + 0x552e]>', '<movss~~xmm0, dword ptr [rax + rcx*4]>', '<movss~~dword ptr [rsp + 0x28], xmm0>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<add~~rax, 0x2ae12>', '<add~~rax, 2>', '<mov~~qword ptr [rsp + 0x10], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<add~~rax, 0x2ae12>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rax + 0x44]>', '<mov~~word ptr [rsp + 0x1a], ax>', '<mov~~dword ptr [rsp + 0x2c], 1>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<cmp~~eax, dword ptr [rcx + 0x2ae4c]>', '<ja~~0x405914>']}, {'block_Idx': 17, 'blockInsts': ['<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 42, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rcx, rax>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x10], rcx>', '<mov~~cx, word ptr [rax]>', '<mov~~rax, qword ptr [rsp + 8]>', '<mov~~rdx, rax>', '<add~~rdx, 2>', '<mov~~qword ptr [rsp + 8], rdx>', '<mov~~word ptr [rax + 2], cx>', '<jmp~~0x405b48>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rcx, rax>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x10], rcx>', '<mov~~cx, word ptr [rax]>', '<mov~~rax, qword ptr [rsp + 8]>', '<mov~~word ptr [rax], cx>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~ecx, dword ptr [rax + 0x2ad0c]>', '<add~~ecx, -1>', '<mov~~dword ptr [rax + 0x2ad0c], ecx>', '<jmp~~0x405b46>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<add~~rdi, 0x2ae12>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rax + 0x2ae4c]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<add~~eax, dword ptr [rcx + 0x2ad00]>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<mov~~edx, 2>', '<lea~~rcx, [rip + 0x216]>', '<call~~0x500060>']}], 'cfg_edge_info': [(16, 20), (5, 4), (20, 23), (23, 13), (12, 13), (38, 41), (0, 2), (28, 18), (9, 8), (8, 12), (31, 38), (19, 33), (5, 3), (0, 1), (2, 4), (13, 16), (7, 9), (15, 19), (41, 44), (18, 21), (4, 7), (3, 5), (12, 14), (23, 14), (21, 20), (38, 42), (14, 17), (31, 33), (2, 3), (42, 21), (28, 31), (19, 28), (13, 15), (15, 18), (7, 8)], 'cdg_edge_info': [(23, 13), (12, 13), (0, 2), (0, 8), (0, 14), (2, 5), (0, 17), (15, 14), (15, 17), (15, 23), (15, 20), (5, 3), (0, 1), (0, 7), (0, 4), (13, 16), (7, 9), (15, 19), (23, 23), (12, 23), (5, 5), (12, 20), (23, 20), (2, 3), (0, 12), (13, 18), (13, 15)], 'ddg_edge_info': [(4, 9), (9, 8), (0, 5), (19, 18), (8, 18), (41, 15), (16, 13), (41, 42), (42, 41), (18, 19), (16, 31), (2, 41), (12, 18), (41, 17), (13, 19), (1, 17), (16, 15), (31, 15), (16, 42), (31, 42), (41, 19), (42, 18), (18, 23), (5, 7), (0, 2), (16, 19), (18, 16), (31, 19), (5, 9), (42, 13), (41, 23), (13, 16), (2, 13), (42, 31), (2, 31), (3, 5), (41, 16), (42, 15), (8, 13), (2, 15), (19, 31), (16, 23), (2, 42), (31, 23), (18, 41), (41, 18), (8, 15), (42, 17), (31, 16), (4, 8), (0, 4), (42, 19), (8, 17), (2, 19), (31, 18), (12, 23), (41, 13), (2, 3), (8, 19), (16, 41), (8, 12), (31, 41), (42, 23), (2, 5), (2, 23), (31, 13), (18, 13), (23, 18), (0, 1), (42, 16), (19, 23), (8, 23), (2, 16), (16, 18), (18, 15), (4, 7), (5, 8), (18, 42), (0, 3), (8, 16), (2, 18), (13, 15), (41, 31)]}]}
{'sbr_make_f_tablelim': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 5, 'instruction': 'movq\t0x30(%rsp), %rax'}, {'instIndex': 6, 'instruction': 'movl\t0x18(%rax), %eax'}, {'instIndex': 7, 'instruction': 'subl\t$1, %eax'}, {'instIndex': 8, 'instruction': 'movl\t%eax, %eax'}, {'instIndex': 9, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 10, 'instruction': 'leaq\tsbr_make_f_tablelim.bands_warped(%rip), %rax'}, {'instIndex': 11, 'instruction': 'movss\t(%rax,%rcx,4), %xmm0            # xmm0 = mem[0],zero,zero,zero'}, {'instIndex': 12, 'instruction': 'movss\t%xmm0, 0x28(%rsp)'}, {'instIndex': 13, 'instruction': 'movq\t0x30(%rsp), %rax'}, {'instIndex': 14, 'instruction': 'addq\t$0x2ae12, %rax                   # imm = 0x2AE12'}, {'instIndex': 15, 'instruction': 'addq\t$2, %rax'}, {'instIndex': 16, 'instruction': 'movq\t%rax, 0x10(%rsp)'}, {'instIndex': 17, 'instruction': 'movq\t0x30(%rsp), %rax'}, {'instIndex': 18, 'instruction': 'addq\t$0x2ae12, %rax                   # imm = 0x2AE12'}, {'instIndex': 19, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 20, 'instruction': 'movq\t0x30(%rsp), %rax'}, {'instIndex': 21, 'instruction': 'movl\t0x44(%rax), %eax'}, {'instIndex': 22, 'instruction': 'movw\t%ax, 0x1a(%rsp)'}]}]}
The case of compiler clang with optimization O1.
Patched source code file: aacsbr.c
Patched function: 1---static void sbr_make_f_tablelim 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_after/O1/aacsbr.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_after/O1/aacsbr.s---sbr_make_f_tablelim---after
function id: 6
function flag: True
There are 253 instructions for function: sbr_make_f_tablelim in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '174', 'end': 180}, 'before': {'start': '174', 'end': 180}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 10, 'instruction': 'addl\t$-1, %ecx'}, {'instIndex': 11, 'instruction': 'movl\t%ecx, %ecx'}, {'instIndex': 12, 'instruction': 'movl\t%ecx, %edx'}, {'instIndex': 13, 'instruction': 'leaq\tsbr_make_f_tablelim.bands_warped(%rip), %rcx'}, {'instIndex': 14, 'instruction': 'movss\t(%rcx,%rdx,4), %xmm0            # xmm0 = mem[0],zero,zero,zero'}, {'instIndex': 15, 'instruction': 'movss\t%xmm0, 0xd4(%rsp)                # 4-byte Spill'}, {'instIndex': 16, 'instruction': 'leaq\t0x10a(%rsp), %rcx'}, {'instIndex': 17, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 18, 'instruction': 'addq\t$0x2ae12, %rcx                   # imm = 0x2AE12'}, {'instIndex': 19, 'instruction': 'movq\t%rcx, 0xd8(%rsp)                 # 8-byte Spill'}, {'instIndex': 20, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 21, 'instruction': 'addq\t$0x2ae12, %rcx                   # imm = 0x2AE12'}, {'instIndex': 22, 'instruction': 'addq\t$2, %rcx'}, {'instIndex': 23, 'instruction': 'movq\t%rcx, 0xe0(%rsp)                 # 8-byte Spill'}, {'instIndex': 24, 'instruction': 'movl\t0x44(%rax), %ecx'}, {'instIndex': 25, 'instruction': 'movw\t%cx, 0x10a(%rsp)'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_after/O1/aacsbr.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_after/O1/aacsbr.o---after
The extraction of function: sbr_make_f_tablelim
Analyzing the binaries to generate subCFGs from patched function ...
It has 885 nodes and 1596 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 253 instructions in binary file.
[4241794]
The execution time of patched subCFG information extraction via angr: 0:00:01.365238
{'sbr_make_f_tablelim': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b9fe>, <DisassemblerInsn "mov" for 0x40ba06>, <DisassemblerInsn "add" for 0x40ba0d>, <DisassemblerInsn "mov" for 0x40ba10>, <DisassemblerInsn "mov" for 0x40ba12>, <DisassemblerInsn "mov" for 0x40ba1a>, <DisassemblerInsn "mov" for 0x40ba1d>, <DisassemblerInsn "mov" for 0x40ba22>, <DisassemblerInsn "mov" for 0x40ba2a>, <DisassemblerInsn "mov" for 0x40ba32>, <DisassemblerInsn "mov" for 0x40ba3a>, <DisassemblerInsn "mov" for 0x40ba42>, <DisassemblerInsn "mov" for 0x40ba4a>, <DisassemblerInsn "movzx" for 0x40ba52>, <DisassemblerInsn "add" for 0x40ba5a>, <DisassemblerInsn "mov" for 0x40ba5d>, <DisassemblerInsn "mov" for 0x40ba65>, <DisassemblerInsn "add" for 0x40ba6d>, <DisassemblerInsn "mov" for 0x40ba71>, <DisassemblerInsn "cmp" for 0x40ba79>, <DisassemblerInsn "mov" for 0x40ba7c>, <DisassemblerInsn "mov" for 0x40ba84>, <DisassemblerInsn "jne" for 0x40ba8c>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40ba8e>, <DisassemblerInsn "mov" for 0x40ba96>, <DisassemblerInsn "mov" for 0x40ba9e>, <DisassemblerInsn "add" for 0x40baa1>, <DisassemblerInsn "mov" for 0x40baa8>, <DisassemblerInsn "mov" for 0x40bab0>, <DisassemblerInsn "mov" for 0x40bab8>, <DisassemblerInsn "add" for 0x40babb>, <DisassemblerInsn "mov" for 0x40bac2>, <DisassemblerInsn "add" for 0x40bac5>, <DisassemblerInsn "mov" for 0x40bacc>, <DisassemblerInsn "mov" for 0x40bad4>, <DisassemblerInsn "mov" for 0x40bada>, <DisassemblerInsn "add" for 0x40bae1>, <DisassemblerInsn "mov" for 0x40bae4>, <DisassemblerInsn "mov" for 0x40bae6>, <DisassemblerInsn "shl" for 0x40bae8>, <DisassemblerInsn "call" for 0x40baeb>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x40b950>, <DisassemblerInsn "mov" for 0x40b957>, <DisassemblerInsn "lea" for 0x40b95f>, <DisassemblerInsn "mov" for 0x40b967>, <DisassemblerInsn "mov" for 0x40b96f>, <DisassemblerInsn "mov" for 0x40b972>, <DisassemblerInsn "cmp" for 0x40b979>, <DisassemblerInsn "je" for 0x40b97c>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b982>, <DisassemblerInsn "mov" for 0x40b98a>, <DisassemblerInsn "add" for 0x40b991>, <DisassemblerInsn "mov" for 0x40b994>, <DisassemblerInsn "mov" for 0x40b996>, <DisassemblerInsn "lea" for 0x40b998>, <DisassemblerInsn "movss" for 0x40b99f>, <DisassemblerInsn "movss" for 0x40b9a4>, <DisassemblerInsn "lea" for 0x40b9ad>, <DisassemblerInsn "mov" for 0x40b9b5>, <DisassemblerInsn "add" for 0x40b9b8>, <DisassemblerInsn "mov" for 0x40b9bf>, <DisassemblerInsn "mov" for 0x40b9c7>, <DisassemblerInsn "add" for 0x40b9ca>, <DisassemblerInsn "add" for 0x40b9d1>, <DisassemblerInsn "mov" for 0x40b9d5>, <DisassemblerInsn "mov" for 0x40b9dd>, <DisassemblerInsn "mov" for 0x40b9e0>, <DisassemblerInsn "mov" for 0x40b9e8>, <DisassemblerInsn "mov" for 0x40b9ee>, <DisassemblerInsn "cmp" for 0x40b9f5>, <DisassemblerInsn "je" for 0x40b9f8>]'}], 'cfg_block_detailed_info': [{'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xf8]>', '<mov~~ecx, dword ptr [rsp + 0xec]>', '<add~~ecx, 1>', '<mov~~ecx, ecx>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<mov~~cx, word ptr [rax]>', '<mov~~eax, 1>', '<mov~~word ptr [rsp + 0xc6], cx>', '<mov~~qword ptr [rsp + 0xc8], rax>', '<mov~~rax, qword ptr [rsp + 0xc8]>', '<mov~~cx, word ptr [rsp + 0xc6]>', '<mov~~rdx, qword ptr [rsp + 0xb8]>', '<mov~~rsi, qword ptr [rsp + 0xf0]>', '<movzx~~esi, byte ptr [rsi + rax + 0x2ae4f]>', '<add~~cx, si>', '<mov~~word ptr [rsp + 0xae], cx>', '<mov~~word ptr [rsp + rax*2 + 0x10a], cx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0xb0], rax>', '<cmp~~rax, rdx>', '<mov~~word ptr [rsp + 0xc6], cx>', '<mov~~qword ptr [rsp + 0xc8], rax>', '<jne~~0x40ba32>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xf0]>', '<mov~~rdi, qword ptr [rsp + 0xd8]>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ae4c>', '<mov~~qword ptr [rsp + 0x88], rcx>', '<mov~~qword ptr [rsp + 0x90], rdi>', '<mov~~rsi, rax>', '<add~~rsi, 0x2ad72>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ad00>', '<mov~~qword ptr [rsp + 0x98], rcx>', '<mov~~eax, dword ptr [rax + 0x2ad00]>', '<mov~~dword ptr [rsp + 0xa4], eax>', '<add~~eax, 1>', '<mov~~eax, eax>', '<mov~~edx, eax>', '<shl~~rdx, 1>', '<call~~0x500060>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x118>', '<mov~~qword ptr [rsp + 0xf0], rdi>', '<lea~~rax, [rsp + 0x10a]>', '<mov~~qword ptr [rsp + 0xf8], rax>', '<mov~~eax, dword ptr [rdi + 0x18]>', '<mov~~dword ptr [rsp + 0x104], eax>', '<cmp~~eax, 0>', '<je~~0x40bdd5>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xf0]>', '<mov~~ecx, dword ptr [rsp + 0x104]>', '<add~~ecx, -1>', '<mov~~ecx, ecx>', '<mov~~edx, ecx>', '<lea~~rcx, [rip + 0x353d]>', '<movss~~xmm0, dword ptr [rcx + rdx*4]>', '<movss~~dword ptr [rsp + 0xd4], xmm0>', '<lea~~rcx, [rsp + 0x10a]>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ae12>', '<mov~~qword ptr [rsp + 0xd8], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ae12>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<mov~~ecx, dword ptr [rax + 0x44]>', '<mov~~word ptr [rsp + 0x10a], cx>', '<mov~~eax, dword ptr [rax + 0x2ae4c]>', '<mov~~dword ptr [rsp + 0xec], eax>', '<cmp~~eax, 0>', '<je~~0x40ba8e>']}], 'cfg_edge_info': [(2, 3), (0, 2), (2, 4)]}]}
{'sbr_make_f_tablelim': [4241794]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_after/O1/aacsbr.o---after
The extraction of function: sbr_make_f_tablelim
[4241794]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 32 nodes and 49 edges in CFGEmulated.
It has 32 nodes and 44 edges in CDG.
It has 971 nodes and 1179 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4241794]
{4241794, 4242690, 4242564, 4242954, 4242186, 4242062, 4242449, 4242708, 4242600, 4242731, 4241970, 4242624, 4242760, 4242377, 4242254, 4241744, 4242899, 4242901, 4242525, 4242654, 4242160, 4242801, 4241918, 4242303}
[6, 31, 14, 15, 23, 19, 0, 30, 28, 4, 16, 7, 1, 20, 9, 12, 18, 2, 21, 22, 3, 13, 24, 17, 26, 29, 8, 25, 27]
The execution time of patched slicing information extraction via angr: 0:00:10.494499
{'sbr_make_f_tablelim': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40ba32>, <DisassemblerInsn "mov" for 0x40ba3a>, <DisassemblerInsn "mov" for 0x40ba42>, <DisassemblerInsn "mov" for 0x40ba4a>, <DisassemblerInsn "movzx" for 0x40ba52>, <DisassemblerInsn "add" for 0x40ba5a>, <DisassemblerInsn "mov" for 0x40ba5d>, <DisassemblerInsn "mov" for 0x40ba65>, <DisassemblerInsn "add" for 0x40ba6d>, <DisassemblerInsn "mov" for 0x40ba71>, <DisassemblerInsn "cmp" for 0x40ba79>, <DisassemblerInsn "mov" for 0x40ba7c>, <DisassemblerInsn "mov" for 0x40ba84>, <DisassemblerInsn "jne" for 0x40ba8c>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40bd14>, <DisassemblerInsn "mov" for 0x40bd19>, <DisassemblerInsn "add" for 0x40bd1d>, <DisassemblerInsn "cmp" for 0x40bd21>, <DisassemblerInsn "mov" for 0x40bd24>, <DisassemblerInsn "je" for 0x40bd29>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40bbc9>, <DisassemblerInsn "mov" for 0x40bbcd>, <DisassemblerInsn "mov" for 0x40bbd5>, <DisassemblerInsn "mov" for 0x40bbdd>, <DisassemblerInsn "cmp" for 0x40bbe1>, <DisassemblerInsn "setl" for 0x40bbe4>, <DisassemblerInsn "mov" for 0x40bbe8>, <DisassemblerInsn "mov" for 0x40bbed>, <DisassemblerInsn "add" for 0x40bbef>, <DisassemblerInsn "mov" for 0x40bbf2>, <DisassemblerInsn "mov" for 0x40bbf4>, <DisassemblerInsn "add" for 0x40bbf9>, <DisassemblerInsn "mov" for 0x40bbfc>, <DisassemblerInsn "mov" for 0x40bbfe>, <DisassemblerInsn "mov" for 0x40bc03>, <DisassemblerInsn "mov" for 0x40bc08>, <DisassemblerInsn "mov" for 0x40bc0d>, <DisassemblerInsn "movss" for 0x40bc11>, <DisassemblerInsn "mov" for 0x40bc1a>, <DisassemblerInsn "mov" for 0x40bc1f>, <DisassemblerInsn "mov" for 0x40bc24>, <DisassemblerInsn "mov" for 0x40bc28>, <DisassemblerInsn "mov" for 0x40bc2c>, <DisassemblerInsn "mov" for 0x40bc31>, <DisassemblerInsn "movzx" for 0x40bc36>, <DisassemblerInsn "mov" for 0x40bc39>, <DisassemblerInsn "mov" for 0x40bc3c>, <DisassemblerInsn "cvtsi2ss" for 0x40bc41>, <DisassemblerInsn "movzx" for 0x40bc45>, <DisassemblerInsn "mov" for 0x40bc48>, <DisassemblerInsn "mov" for 0x40bc4b>, <DisassemblerInsn "cvtsi2ss" for 0x40bc50>, <DisassemblerInsn "mulss" for 0x40bc54>, <DisassemblerInsn "ucomiss" for 0x40bc58>, <DisassemblerInsn "jb" for 0x40bc5b>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "add" for 0x40be0a>, <DisassemblerInsn "ret" for 0x40be11>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40bd02>, <DisassemblerInsn "xor" for 0x40bd06>, <DisassemblerInsn "test" for 0x40bd08>, <DisassemblerInsn "mov" for 0x40bd0b>, <DisassemblerInsn "jne" for 0x40bd10>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40bcde>, <DisassemblerInsn "mov" for 0x40bce3>, <DisassemblerInsn "mov" for 0x40bceb>, <DisassemblerInsn "add" for 0x40bcef>, <DisassemblerInsn "mov" for 0x40bcf2>, <DisassemblerInsn "mov" for 0x40bcf4>, <DisassemblerInsn "mov" for 0x40bcf8>, <DisassemblerInsn "jmp" for 0x40bcfd>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x40b950>, <DisassemblerInsn "mov" for 0x40b957>, <DisassemblerInsn "lea" for 0x40b95f>, <DisassemblerInsn "mov" for 0x40b967>, <DisassemblerInsn "mov" for 0x40b96f>, <DisassemblerInsn "mov" for 0x40b972>, <DisassemblerInsn "cmp" for 0x40b979>, <DisassemblerInsn "je" for 0x40b97c>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40bd46>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40bd2b>, <DisassemblerInsn "mov" for 0x40bd30>, <DisassemblerInsn "mov" for 0x40bd35>, <DisassemblerInsn "mov" for 0x40bd39>, <DisassemblerInsn "cmp" for 0x40bd41>, <DisassemblerInsn "je" for 0x40bd44>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b9fe>, <DisassemblerInsn "mov" for 0x40ba06>, <DisassemblerInsn "add" for 0x40ba0d>, <DisassemblerInsn "mov" for 0x40ba10>, <DisassemblerInsn "mov" for 0x40ba12>, <DisassemblerInsn "mov" for 0x40ba1a>, <DisassemblerInsn "mov" for 0x40ba1d>, <DisassemblerInsn "mov" for 0x40ba22>, <DisassemblerInsn "mov" for 0x40ba2a>, <DisassemblerInsn "mov" for 0x40ba32>, <DisassemblerInsn "mov" for 0x40ba3a>, <DisassemblerInsn "mov" for 0x40ba42>, <DisassemblerInsn "mov" for 0x40ba4a>, <DisassemblerInsn "movzx" for 0x40ba52>, <DisassemblerInsn "add" for 0x40ba5a>, <DisassemblerInsn "mov" for 0x40ba5d>, <DisassemblerInsn "mov" for 0x40ba65>, <DisassemblerInsn "add" for 0x40ba6d>, <DisassemblerInsn "mov" for 0x40ba71>, <DisassemblerInsn "cmp" for 0x40ba79>, <DisassemblerInsn "mov" for 0x40ba7c>, <DisassemblerInsn "mov" for 0x40ba84>, <DisassemblerInsn "jne" for 0x40ba8c>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40bc84>, <DisassemblerInsn "mov" for 0x40bc88>, <DisassemblerInsn "mov" for 0x40bc8d>, <DisassemblerInsn "sub" for 0x40bc92>, <DisassemblerInsn "sete" for 0x40bc95>, <DisassemblerInsn "or" for 0x40bc98>, <DisassemblerInsn "xor" for 0x40bc9a>, <DisassemblerInsn "test" for 0x40bc9c>, <DisassemblerInsn "mov" for 0x40bc9f>, <DisassemblerInsn "jne" for 0x40bca4>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40baf0>, <DisassemblerInsn "mov" for 0x40baf8>, <DisassemblerInsn "mov" for 0x40bafe>, <DisassemblerInsn "cmp" for 0x40bb05>, <DisassemblerInsn "jbe" for 0x40bb08>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40bdd5>, <DisassemblerInsn "mov" for 0x40bddd>, <DisassemblerInsn "mov" for 0x40bde4>, <DisassemblerInsn "mov" for 0x40bdeb>, <DisassemblerInsn "mov" for 0x40bdf1>, <DisassemblerInsn "mov" for 0x40bdf9>, <DisassemblerInsn "mov" for 0x40be00>, <DisassemblerInsn "add" for 0x40be0a>, <DisassemblerInsn "ret" for 0x40be11>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40bd93>, <DisassemblerInsn "mov" for 0x40bd9b>, <DisassemblerInsn "mov" for 0x40bda0>, <DisassemblerInsn "mov" for 0x40bda4>, <DisassemblerInsn "add" for 0x40bda9>, <DisassemblerInsn "mov" for 0x40bdad>, <DisassemblerInsn "add" for 0x40bdaf>, <DisassemblerInsn "shl" for 0x40bdb6>, <DisassemblerInsn "add" for 0x40bdb9>, <DisassemblerInsn "cmp" for 0x40bdbc>, <DisassemblerInsn "mov" for 0x40bdbf>, <DisassemblerInsn "mov" for 0x40bdc4>, <DisassemblerInsn "mov" for 0x40bdc9>, <DisassemblerInsn "jb" for 0x40bdcd>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40bb0a>, <DisassemblerInsn "mov" for 0x40bb11>, <DisassemblerInsn "mov" for 0x40bb19>, <DisassemblerInsn "mov" for 0x40bb20>, <DisassemblerInsn "add" for 0x40bb22>, <DisassemblerInsn "shl" for 0x40bb29>, <DisassemblerInsn "add" for 0x40bb2c>, <DisassemblerInsn "add" for 0x40bb2f>, <DisassemblerInsn "lea" for 0x40bb33>, <DisassemblerInsn "add" for 0x40bb3b>, <DisassemblerInsn "add" for 0x40bb3f>, <DisassemblerInsn "mov" for 0x40bb42>, <DisassemblerInsn "mov" for 0x40bb44>, <DisassemblerInsn "shl" for 0x40bb46>, <DisassemblerInsn "call" for 0x40bb49>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40bb7f>, <DisassemblerInsn "mov" for 0x40bb87>, <DisassemblerInsn "mov" for 0x40bb8f>, <DisassemblerInsn "mov" for 0x40bb97>, <DisassemblerInsn "mov" for 0x40bb99>, <DisassemblerInsn "mov" for 0x40bb9b>, <DisassemblerInsn "add" for 0x40bb9f>, <DisassemblerInsn "add" for 0x40bba2>, <DisassemblerInsn "mov" for 0x40bba4>, <DisassemblerInsn "mov" for 0x40bba8>, <DisassemblerInsn "add" for 0x40bbab>, <DisassemblerInsn "mov" for 0x40bbb2>, <DisassemblerInsn "mov" for 0x40bbba>, <DisassemblerInsn "cmp" for 0x40bbc0>, <DisassemblerInsn "je" for 0x40bbc3>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40bca6>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b982>, <DisassemblerInsn "mov" for 0x40b98a>, <DisassemblerInsn "add" for 0x40b991>, <DisassemblerInsn "mov" for 0x40b994>, <DisassemblerInsn "mov" for 0x40b996>, <DisassemblerInsn "lea" for 0x40b998>, <DisassemblerInsn "movss" for 0x40b99f>, <DisassemblerInsn "movss" for 0x40b9a4>, <DisassemblerInsn "lea" for 0x40b9ad>, <DisassemblerInsn "mov" for 0x40b9b5>, <DisassemblerInsn "add" for 0x40b9b8>, <DisassemblerInsn "mov" for 0x40b9bf>, <DisassemblerInsn "mov" for 0x40b9c7>, <DisassemblerInsn "add" for 0x40b9ca>, <DisassemblerInsn "add" for 0x40b9d1>, <DisassemblerInsn "mov" for 0x40b9d5>, <DisassemblerInsn "mov" for 0x40b9dd>, <DisassemblerInsn "mov" for 0x40b9e0>, <DisassemblerInsn "mov" for 0x40b9e8>, <DisassemblerInsn "mov" for 0x40b9ee>, <DisassemblerInsn "cmp" for 0x40b9f5>, <DisassemblerInsn "je" for 0x40b9f8>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40bcc0>, <DisassemblerInsn "mov" for 0x40bcc5>, <DisassemblerInsn "mov" for 0x40bcca>, <DisassemblerInsn "mov" for 0x40bccf>, <DisassemblerInsn "cmp" for 0x40bcd7>, <DisassemblerInsn "je" for 0x40bcda>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "movss" for 0x40bc11>, <DisassemblerInsn "mov" for 0x40bc1a>, <DisassemblerInsn "mov" for 0x40bc1f>, <DisassemblerInsn "mov" for 0x40bc24>, <DisassemblerInsn "mov" for 0x40bc28>, <DisassemblerInsn "mov" for 0x40bc2c>, <DisassemblerInsn "mov" for 0x40bc31>, <DisassemblerInsn "movzx" for 0x40bc36>, <DisassemblerInsn "mov" for 0x40bc39>, <DisassemblerInsn "mov" for 0x40bc3c>, <DisassemblerInsn "cvtsi2ss" for 0x40bc41>, <DisassemblerInsn "movzx" for 0x40bc45>, <DisassemblerInsn "mov" for 0x40bc48>, <DisassemblerInsn "mov" for 0x40bc4b>, <DisassemblerInsn "cvtsi2ss" for 0x40bc50>, <DisassemblerInsn "mulss" for 0x40bc54>, <DisassemblerInsn "ucomiss" for 0x40bc58>, <DisassemblerInsn "jb" for 0x40bc5b>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40ba8e>, <DisassemblerInsn "mov" for 0x40ba96>, <DisassemblerInsn "mov" for 0x40ba9e>, <DisassemblerInsn "add" for 0x40baa1>, <DisassemblerInsn "mov" for 0x40baa8>, <DisassemblerInsn "mov" for 0x40bab0>, <DisassemblerInsn "mov" for 0x40bab8>, <DisassemblerInsn "add" for 0x40babb>, <DisassemblerInsn "mov" for 0x40bac2>, <DisassemblerInsn "add" for 0x40bac5>, <DisassemblerInsn "mov" for 0x40bacc>, <DisassemblerInsn "mov" for 0x40bad4>, <DisassemblerInsn "mov" for 0x40bada>, <DisassemblerInsn "add" for 0x40bae1>, <DisassemblerInsn "mov" for 0x40bae4>, <DisassemblerInsn "mov" for 0x40bae6>, <DisassemblerInsn "shl" for 0x40bae8>, <DisassemblerInsn "call" for 0x40baeb>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40bdd3>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40bcdc>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40bc5d>, <DisassemblerInsn "mov" for 0x40bc61>, <DisassemblerInsn "mov" for 0x40bc66>, <DisassemblerInsn "mov" for 0x40bc6b>, <DisassemblerInsn "add" for 0x40bc6e>, <DisassemblerInsn "mov" for 0x40bc72>, <DisassemblerInsn "mov" for 0x40bc76>, <DisassemblerInsn "mov" for 0x40bc7a>, <DisassemblerInsn "jmp" for 0x40bc7f>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40bd48>, <DisassemblerInsn "mov" for 0x40bd4d>, <DisassemblerInsn "mov" for 0x40bd55>, <DisassemblerInsn "mov" for 0x40bd59>, <DisassemblerInsn "mov" for 0x40bd5e>, <DisassemblerInsn "add" for 0x40bd61>, <DisassemblerInsn "mov" for 0x40bd64>, <DisassemblerInsn "mov" for 0x40bd66>, <DisassemblerInsn "mov" for 0x40bd6a>, <DisassemblerInsn "jmp" for 0x40bd6f>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40bd71>, <DisassemblerInsn "mov" for 0x40bd75>, <DisassemblerInsn "mov" for 0x40bd7a>, <DisassemblerInsn "mov" for 0x40bd7f>, <DisassemblerInsn "add" for 0x40bd82>, <DisassemblerInsn "mov" for 0x40bd86>, <DisassemblerInsn "mov" for 0x40bd8a>, <DisassemblerInsn "mov" for 0x40bd8e>, <DisassemblerInsn "mov" for 0x40bd93>, <DisassemblerInsn "mov" for 0x40bd9b>, <DisassemblerInsn "mov" for 0x40bda0>, <DisassemblerInsn "mov" for 0x40bda4>, <DisassemblerInsn "add" for 0x40bda9>, <DisassemblerInsn "mov" for 0x40bdad>, <DisassemblerInsn "add" for 0x40bdaf>, <DisassemblerInsn "shl" for 0x40bdb6>, <DisassemblerInsn "add" for 0x40bdb9>, <DisassemblerInsn "cmp" for 0x40bdbc>, <DisassemblerInsn "mov" for 0x40bdbf>, <DisassemblerInsn "mov" for 0x40bdc4>, <DisassemblerInsn "mov" for 0x40bdc9>, <DisassemblerInsn "jb" for 0x40bdcd>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40bb4e>, <DisassemblerInsn "mov" for 0x40bb56>, <DisassemblerInsn "mov" for 0x40bb5e>, <DisassemblerInsn "mov" for 0x40bb66>, <DisassemblerInsn "add" for 0x40bb68>, <DisassemblerInsn "mov" for 0x40bb6a>, <DisassemblerInsn "mov" for 0x40bb6c>, <DisassemblerInsn "mov" for 0x40bb6e>, <DisassemblerInsn "lea" for 0x40bb73>, <DisassemblerInsn "call" for 0x40bb7a>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40bd12>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40bca8>, <DisassemblerInsn "mov" for 0x40bcad>, <DisassemblerInsn "add" for 0x40bcb2>, <DisassemblerInsn "cmp" for 0x40bcb6>, <DisassemblerInsn "mov" for 0x40bcb9>, <DisassemblerInsn "je" for 0x40bcbe>]'}], 'cfg_block_detailed_info': [{'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xc8]>', '<mov~~cx, word ptr [rsp + 0xc6]>', '<mov~~rdx, qword ptr [rsp + 0xb8]>', '<mov~~rsi, qword ptr [rsp + 0xf0]>', '<movzx~~esi, byte ptr [rsi + rax + 0x2ae4f]>', '<add~~cx, si>', '<mov~~word ptr [rsp + 0xae], cx>', '<mov~~word ptr [rsp + rax*2 + 0x10a], cx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0xb0], rax>', '<cmp~~rax, rdx>', '<mov~~word ptr [rsp + 0xc6], cx>', '<mov~~qword ptr [rsp + 0xc8], rax>', '<jne~~0x40ba32>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rsp]>', '<add~~rax, 1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 8], rax>', '<je~~0x40bd48>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x7c]>', '<mov~~rcx, qword ptr [rsp + 0xe0]>', '<mov~~rdx, qword ptr [rsp + 0xd8]>', '<mov~~esi, dword ptr [rsp + 0x78]>', '<cmp~~esi, 0>', '<setl~~dil>', '<mov~~byte ptr [rsp + 0x4f], dil>', '<mov~~edi, esi>', '<add~~edi, 1>', '<mov~~edi, edi>', '<mov~~qword ptr [rsp + 0x50], rdi>', '<add~~esi, 1>', '<mov~~esi, esi>', '<mov~~qword ptr [rsp + 0x58], rsi>', '<mov~~qword ptr [rsp + 0x60], rdx>', '<mov~~qword ptr [rsp + 0x68], rcx>', '<mov~~dword ptr [rsp + 0x74], eax>', '<movss~~xmm1, dword ptr [rsp + 0xd4]>', '<mov~~rax, qword ptr [rsp + 0x60]>', '<mov~~rcx, qword ptr [rsp + 0x68]>', '<mov~~edx, dword ptr [rsp + 0x74]>', '<mov~~dword ptr [rsp + 0x34], edx>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~qword ptr [rsp + 0x40], rax>', '<movzx~~ecx, word ptr [rcx]>', '<mov~~dx, cx>', '<mov~~word ptr [rsp + 0x4a], dx>', '<cvtsi2ss~~xmm0, ecx>', '<movzx~~eax, word ptr [rax]>', '<mov~~cx, ax>', '<mov~~word ptr [rsp + 0x4c], cx>', '<cvtsi2ss~~xmm2, eax>', '<mulss~~xmm1, xmm2>', '<ucomiss~~xmm0, xmm1>', '<jb~~0x40bc84>']}, {'block_Idx': 15, 'blockInsts': ['<add~~rsp, 0x118>', '<ret~~>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x4f]>', '<xor~~eax, eax>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 8], rax>', '<jne~~0x40bd48>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rdx, qword ptr [rsp + 0x80]>', '<mov~~ecx, dword ptr [rsp + 0x34]>', '<add~~ecx, -1>', '<mov~~dword ptr [rdx], ecx>', '<mov~~dword ptr [rsp + 0x24], ecx>', '<mov~~qword ptr [rsp + 0x28], rax>', '<jmp~~0x40bd93>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x118>', '<mov~~qword ptr [rsp + 0xf0], rdi>', '<lea~~rax, [rsp + 0x10a]>', '<mov~~qword ptr [rsp + 0xf8], rax>', '<mov~~eax, dword ptr [rdi + 0x18]>', '<mov~~dword ptr [rsp + 0x104], eax>', '<cmp~~eax, 0>', '<je~~0x40bdd5>']}, {'block_Idx': 30, 'blockInsts': ['<jmp~~0x40bd14>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~cx, word ptr [rsp + 0x4c]>', '<mov~~rax, qword ptr [rsp + 8]>', '<mov~~qword ptr [rsp], rax>', '<mov~~ax, word ptr [rsp + rax*2 + 0x10a]>', '<cmp~~ax, cx>', '<je~~0x40bd71>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xf8]>', '<mov~~ecx, dword ptr [rsp + 0xec]>', '<add~~ecx, 1>', '<mov~~ecx, ecx>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<mov~~cx, word ptr [rax]>', '<mov~~eax, 1>', '<mov~~word ptr [rsp + 0xc6], cx>', '<mov~~qword ptr [rsp + 0xc8], rax>', '<mov~~rax, qword ptr [rsp + 0xc8]>', '<mov~~cx, word ptr [rsp + 0xc6]>', '<mov~~rdx, qword ptr [rsp + 0xb8]>', '<mov~~rsi, qword ptr [rsp + 0xf0]>', '<movzx~~esi, byte ptr [rsi + rax + 0x2ae4f]>', '<add~~cx, si>', '<mov~~word ptr [rsp + 0xae], cx>', '<mov~~word ptr [rsp + rax*2 + 0x10a], cx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0xb0], rax>', '<cmp~~rax, rdx>', '<mov~~word ptr [rsp + 0xc6], cx>', '<mov~~qword ptr [rsp + 0xc8], rax>', '<jne~~0x40ba32>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x4f]>', '<mov~~dx, word ptr [rsp + 0x4c]>', '<mov~~cx, word ptr [rsp + 0x4a]>', '<sub~~cx, dx>', '<sete~~cl>', '<or~~cl, al>', '<xor~~eax, eax>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x18], rax>', '<jne~~0x40bcde>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xf0]>', '<mov~~eax, dword ptr [rax + 0x2ae4c]>', '<mov~~dword ptr [rsp + 0xa8], eax>', '<cmp~~eax, 1>', '<jbe~~0x40bb4e>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xf0]>', '<mov~~cx, word ptr [rax + 0x2ad72]>', '<mov~~word ptr [rax + 0x2ae12], cx>', '<mov~~ecx, dword ptr [rax + 0x2ad00]>', '<mov~~cx, word ptr [rax + rcx*2 + 0x2ad72]>', '<mov~~word ptr [rax + 0x2ae14], cx>', '<mov~~dword ptr [rax + 0x2ad0c], 1>', '<add~~rsp, 0x118>', '<ret~~>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0xf0]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<mov~~rdx, qword ptr [rsp + 0x28]>', '<add~~rcx, 2>', '<mov~~edi, eax>', '<add~~rsi, 0x2ae12>', '<shl~~rdi, 1>', '<add~~rsi, rdi>', '<cmp~~rdx, rsi>', '<mov~~qword ptr [rsp + 0x60], rdx>', '<mov~~qword ptr [rsp + 0x68], rcx>', '<mov~~dword ptr [rsp + 0x74], eax>', '<jb~~0x40bc11>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xa8]>', '<mov~~rdi, qword ptr [rsp + 0xf0]>', '<mov~~ecx, dword ptr [rsp + 0xa4]>', '<mov~~ecx, ecx>', '<add~~rdi, 0x2ae12>', '<shl~~rcx, 1>', '<add~~rdi, rcx>', '<add~~rdi, 2>', '<lea~~rsi, [rsp + 0x10a]>', '<add~~rsi, 2>', '<add~~eax, -1>', '<mov~~eax, eax>', '<mov~~edx, eax>', '<shl~~rdx, 1>', '<call~~0x500060>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~rdx, qword ptr [rsp + 0x88]>', '<mov~~rcx, qword ptr [rsp + 0xf0]>', '<mov~~eax, dword ptr [rax]>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0x78], edx>', '<add~~eax, -1>', '<add~~eax, edx>', '<mov~~dword ptr [rsp + 0x7c], eax>', '<mov~~rdx, rcx>', '<add~~rdx, 0x2ad0c>', '<mov~~qword ptr [rsp + 0x80], rdx>', '<mov~~dword ptr [rcx + 0x2ad0c], eax>', '<cmp~~eax, 0>', '<je~~0x40bdd3>']}, {'block_Idx': 18, 'blockInsts': ['<jmp~~0x40bcc0>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xf0]>', '<mov~~ecx, dword ptr [rsp + 0x104]>', '<add~~ecx, -1>', '<mov~~ecx, ecx>', '<mov~~edx, ecx>', '<lea~~rcx, [rip + 0x353d]>', '<movss~~xmm0, dword ptr [rcx + rdx*4]>', '<movss~~dword ptr [rsp + 0xd4], xmm0>', '<lea~~rcx, [rsp + 0x10a]>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ae12>', '<mov~~qword ptr [rsp + 0xd8], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ae12>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<mov~~ecx, dword ptr [rax + 0x44]>', '<mov~~word ptr [rsp + 0x10a], cx>', '<mov~~eax, dword ptr [rax + 0x2ae4c]>', '<mov~~dword ptr [rsp + 0xec], eax>', '<cmp~~eax, 0>', '<je~~0x40ba8e>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~cx, word ptr [rsp + 0x4a]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~qword ptr [rsp + 0x10], rax>', '<mov~~ax, word ptr [rsp + rax*2 + 0x10a]>', '<cmp~~ax, cx>', '<je~~0x40bd02>']}, {'block_Idx': 22, 'blockInsts': ['<movss~~xmm1, dword ptr [rsp + 0xd4]>', '<mov~~rax, qword ptr [rsp + 0x60]>', '<mov~~rcx, qword ptr [rsp + 0x68]>', '<mov~~edx, dword ptr [rsp + 0x74]>', '<mov~~dword ptr [rsp + 0x34], edx>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~qword ptr [rsp + 0x40], rax>', '<movzx~~ecx, word ptr [rcx]>', '<mov~~dx, cx>', '<mov~~word ptr [rsp + 0x4a], dx>', '<cvtsi2ss~~xmm0, ecx>', '<movzx~~eax, word ptr [rax]>', '<mov~~cx, ax>', '<mov~~word ptr [rsp + 0x4c], cx>', '<cvtsi2ss~~xmm2, eax>', '<mulss~~xmm1, xmm2>', '<ucomiss~~xmm0, xmm1>', '<jb~~0x40bc84>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xf0]>', '<mov~~rdi, qword ptr [rsp + 0xd8]>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ae4c>', '<mov~~qword ptr [rsp + 0x88], rcx>', '<mov~~qword ptr [rsp + 0x90], rdi>', '<mov~~rsi, rax>', '<add~~rsi, 0x2ad72>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ad00>', '<mov~~qword ptr [rsp + 0x98], rcx>', '<mov~~eax, dword ptr [rax + 0x2ad00]>', '<mov~~dword ptr [rsp + 0xa4], eax>', '<add~~eax, 1>', '<mov~~eax, eax>', '<mov~~edx, eax>', '<shl~~rdx, 1>', '<call~~0x500060>']}, {'block_Idx': 13, 'blockInsts': ['<jmp~~0x40be0a>']}, {'block_Idx': 24, 'blockInsts': ['<jmp~~0x40bca8>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x34]>', '<mov~~rdx, qword ptr [rsp + 0x40]>', '<mov~~si, word ptr [rsp + 0x4a]>', '<mov~~rax, rdx>', '<add~~rax, 2>', '<mov~~word ptr [rdx + 2], si>', '<mov~~dword ptr [rsp + 0x24], ecx>', '<mov~~qword ptr [rsp + 0x28], rax>', '<jmp~~0x40bd93>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~rdx, qword ptr [rsp + 0x80]>', '<mov~~ecx, dword ptr [rsp + 0x34]>', '<mov~~si, word ptr [rsp + 0x4a]>', '<mov~~word ptr [rax], si>', '<add~~ecx, -1>', '<mov~~dword ptr [rdx], ecx>', '<mov~~dword ptr [rsp + 0x24], ecx>', '<mov~~qword ptr [rsp + 0x28], rax>', '<jmp~~0x40bd93>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x34]>', '<mov~~rdx, qword ptr [rsp + 0x40]>', '<mov~~si, word ptr [rsp + 0x4a]>', '<mov~~rax, rdx>', '<add~~rax, 2>', '<mov~~word ptr [rdx + 2], si>', '<mov~~dword ptr [rsp + 0x24], ecx>', '<mov~~qword ptr [rsp + 0x28], rax>', '<mov~~rsi, qword ptr [rsp + 0xf0]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<mov~~rdx, qword ptr [rsp + 0x28]>', '<add~~rcx, 2>', '<mov~~edi, eax>', '<add~~rsi, 0x2ae12>', '<shl~~rdi, 1>', '<add~~rsi, rdi>', '<cmp~~rdx, rsi>', '<mov~~qword ptr [rsp + 0x60], rdx>', '<mov~~qword ptr [rsp + 0x68], rcx>', '<mov~~dword ptr [rsp + 0x74], eax>', '<jb~~0x40bc11>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x88]>', '<mov~~rcx, qword ptr [rsp + 0x98]>', '<mov~~rdi, qword ptr [rsp + 0x90]>', '<mov~~eax, dword ptr [rax]>', '<add~~eax, dword ptr [rcx]>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<mov~~edx, 2>', '<lea~~rcx, [rip + 0x2a6]>', '<call~~0x500050>']}, {'block_Idx': 25, 'blockInsts': ['<jmp~~0x40bd2b>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x50]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<add~~rax, 1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x18], rax>', '<je~~0x40bcde>']}], 'cfg_edge_info': [(24, 27), (4, 3), (3, 7), (4, 6), (12, 13), (14, 16), (22, 17), (31, 26), (0, 2), (23, 25), (9, 8), (8, 12), (27, 19), (28, 30), (26, 20), (16, 19), (25, 28), (20, 13), (29, 13), (29, 22), (22, 16), (21, 24), (20, 22), (31, 28), (0, 1), (2, 4), (27, 21), (17, 20), (28, 29), (19, 20), (30, 31), (7, 9), (16, 18), (18, 21), (21, 23), (12, 14), (23, 26), (14, 17), (2, 3), (6, 6), (13, 15), (6, 3), (7, 8)], 'cdg_edge_info': [(4, 6), (31, 26), (14, 16), (22, 17), (0, 2), (23, 28), (27, 19), (0, 8), (16, 19), (29, 22), (22, 16), (31, 28), (21, 27), (0, 1), (0, 7), (2, 4), (27, 21), (0, 13), (28, 29), (7, 9), (16, 21), (12, 14), (21, 23), (23, 26), (14, 17), (0, 3), (0, 12), (0, 15), (28, 31), (6, 6)], 'ddg_edge_info': [(3, 7), (4, 6), (12, 19), (22, 17), (14, 16), (0, 2), (22, 26), (23, 28), (9, 8), (14, 22), (22, 29), (8, 12), (14, 31), (8, 21), (8, 15), (2, 14), (8, 27), (1, 15), (0, 29), (29, 22), (3, 9), (22, 16), (26, 29), (3, 12), (22, 19), (31, 28), (21, 27), (22, 28), (0, 1), (0, 7), (2, 4), (27, 21), (8, 14), (14, 27), (2, 7), (0, 4), (8, 23), (8, 17), (17, 29), (8, 26), (8, 29), (19, 29), (7, 9), (2, 22), (2, 28), (16, 21), (12, 14), (3, 8), (22, 21), (12, 26), (14, 23), (0, 3), (0, 9), (8, 31), (8, 16), (0, 6), (2, 3), (8, 19), (17, 22), (0, 12), (8, 22), (8, 28), (28, 31), (2, 21)]}]}
{'sbr_make_f_tablelim': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 10, 'instruction': 'addl\t$-1, %ecx'}, {'instIndex': 11, 'instruction': 'movl\t%ecx, %ecx'}, {'instIndex': 12, 'instruction': 'movl\t%ecx, %edx'}, {'instIndex': 13, 'instruction': 'leaq\tsbr_make_f_tablelim.bands_warped(%rip), %rcx'}, {'instIndex': 14, 'instruction': 'movss\t(%rcx,%rdx,4), %xmm0            # xmm0 = mem[0],zero,zero,zero'}, {'instIndex': 15, 'instruction': 'movss\t%xmm0, 0xd4(%rsp)                # 4-byte Spill'}, {'instIndex': 16, 'instruction': 'leaq\t0x10a(%rsp), %rcx'}, {'instIndex': 17, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 18, 'instruction': 'addq\t$0x2ae12, %rcx                   # imm = 0x2AE12'}, {'instIndex': 19, 'instruction': 'movq\t%rcx, 0xd8(%rsp)                 # 8-byte Spill'}, {'instIndex': 20, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 21, 'instruction': 'addq\t$0x2ae12, %rcx                   # imm = 0x2AE12'}, {'instIndex': 22, 'instruction': 'addq\t$2, %rcx'}, {'instIndex': 23, 'instruction': 'movq\t%rcx, 0xe0(%rsp)                 # 8-byte Spill'}, {'instIndex': 24, 'instruction': 'movl\t0x44(%rax), %ecx'}, {'instIndex': 25, 'instruction': 'movw\t%cx, 0x10a(%rsp)'}]}]}
The case of compiler clang with optimization O2.
Patched source code file: aacsbr.c
Patched function: 1---static void sbr_make_f_tablelim 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_after/O2/aacsbr.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_after/O2/aacsbr.s---sbr_make_f_tablelim---after
function id: 6
function flag: True
There are 325 instructions for function: sbr_make_f_tablelim in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '174', 'end': 180}, 'before': {'start': '174', 'end': 180}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 8, 'instruction': 'addl\t$-1, %ecx'}, {'instIndex': 9, 'instruction': 'movl\t%ecx, %ecx'}, {'instIndex': 10, 'instruction': 'movl\t%ecx, %edx'}, {'instIndex': 11, 'instruction': 'leaq\tsbr_make_f_tablelim.bands_warped(%rip), %rcx'}, {'instIndex': 12, 'instruction': 'movss\t(%rcx,%rdx,4), %xmm0            # xmm0 = mem[0],zero,zero,zero'}, {'instIndex': 13, 'instruction': 'movss\t%xmm0, 0x13c(%rsp)                # 4-byte Spill'}, {'instIndex': 14, 'instruction': 'leaq\t0x17a(%rsp), %rcx'}, {'instIndex': 15, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 16, 'instruction': 'addq\t$0x2ae12, %rcx                   # imm = 0x2AE12'}, {'instIndex': 17, 'instruction': 'movq\t%rcx, 0x140(%rsp)                 # 8-byte Spill'}, {'instIndex': 18, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 19, 'instruction': 'addq\t$0x2ae12, %rcx                   # imm = 0x2AE12'}, {'instIndex': 20, 'instruction': 'addq\t$2, %rcx'}, {'instIndex': 21, 'instruction': 'movq\t%rcx, 0x148(%rsp)                 # 8-byte Spill'}, {'instIndex': 22, 'instruction': 'movl\t0x44(%rax), %ecx'}, {'instIndex': 24, 'instruction': 'movw\t%cx, 0x17a(%rsp)'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_after/O2/aacsbr.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_after/O2/aacsbr.o---after
The extraction of function: sbr_make_f_tablelim
Analyzing the binaries to generate subCFGs from patched function ...
It has 1056 nodes and 1912 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 325 instructions in binary file.
[4263874]
The execution time of patched subCFG information extraction via angr: 0:00:01.523825
{'sbr_make_f_tablelim': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x410fc2>, <DisassemblerInsn "mov" for 0x410fca>, <DisassemblerInsn "add" for 0x410fd1>, <DisassemblerInsn "mov" for 0x410fd4>, <DisassemblerInsn "mov" for 0x410fd6>, <DisassemblerInsn "lea" for 0x410fd8>, <DisassemblerInsn "movss" for 0x410fdf>, <DisassemblerInsn "movss" for 0x410fe4>, <DisassemblerInsn "lea" for 0x410fed>, <DisassemblerInsn "mov" for 0x410ff5>, <DisassemblerInsn "add" for 0x410ff8>, <DisassemblerInsn "mov" for 0x410fff>, <DisassemblerInsn "mov" for 0x411007>, <DisassemblerInsn "add" for 0x41100a>, <DisassemblerInsn "add" for 0x411011>, <DisassemblerInsn "mov" for 0x411015>, <DisassemblerInsn "mov" for 0x41101d>, <DisassemblerInsn "mov" for 0x411020>, <DisassemblerInsn "mov" for 0x411028>, <DisassemblerInsn "mov" for 0x411030>, <DisassemblerInsn "add" for 0x411033>, <DisassemblerInsn "mov" for 0x41103a>, <DisassemblerInsn "mov" for 0x411042>, <DisassemblerInsn "mov" for 0x411048>, <DisassemblerInsn "cmp" for 0x41104f>, <DisassemblerInsn "je" for 0x411052>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411058>, <DisassemblerInsn "mov" for 0x411060>, <DisassemblerInsn "add" for 0x411067>, <DisassemblerInsn "mov" for 0x41106a>, <DisassemblerInsn "mov" for 0x41106c>, <DisassemblerInsn "mov" for 0x41106e>, <DisassemblerInsn "add" for 0x411071>, <DisassemblerInsn "mov" for 0x411075>, <DisassemblerInsn "add" for 0x41107d>, <DisassemblerInsn "and" for 0x411081>, <DisassemblerInsn "mov" for 0x411085>, <DisassemblerInsn "mov" for 0x41108d>, <DisassemblerInsn "cmp" for 0x411092>, <DisassemblerInsn "mov" for 0x411096>, <DisassemblerInsn "mov" for 0x41109e>, <DisassemblerInsn "jb" for 0x4110a6>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x410fa0>, <DisassemblerInsn "mov" for 0x410fa7>, <DisassemblerInsn "mov" for 0x410faf>, <DisassemblerInsn "mov" for 0x410fb2>, <DisassemblerInsn "cmp" for 0x410fb9>, <DisassemblerInsn "je" for 0x410fbc>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411288>, <DisassemblerInsn "mov" for 0x411290>, <DisassemblerInsn "mov" for 0x411298>, <DisassemblerInsn "mov" for 0x4112a0>, <DisassemblerInsn "add" for 0x4112a3>, <DisassemblerInsn "mov" for 0x4112aa>, <DisassemblerInsn "add" for 0x4112ad>, <DisassemblerInsn "mov" for 0x4112b4>, <DisassemblerInsn "mov" for 0x4112bc>, <DisassemblerInsn "mov" for 0x4112c2>, <DisassemblerInsn "add" for 0x4112c9>, <DisassemblerInsn "mov" for 0x4112cc>, <DisassemblerInsn "mov" for 0x4112ce>, <DisassemblerInsn "shl" for 0x4112d0>, <DisassemblerInsn "call" for 0x4112d3>]'}], 'cfg_block_detailed_info': [{'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x168]>', '<mov~~ecx, dword ptr [rsp + 0x174]>', '<add~~ecx, -1>', '<mov~~ecx, ecx>', '<mov~~edx, ecx>', '<lea~~rcx, [rip + 0x42dd]>', '<movss~~xmm0, dword ptr [rcx + rdx*4]>', '<movss~~dword ptr [rsp + 0x13c], xmm0>', '<lea~~rcx, [rsp + 0x17a]>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ae12>', '<mov~~qword ptr [rsp + 0x140], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ae12>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x148], rcx>', '<mov~~ecx, dword ptr [rax + 0x44]>', '<mov~~word ptr [rsp + 0x156], cx>', '<mov~~word ptr [rsp + 0x17a], cx>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ae4c>', '<mov~~qword ptr [rsp + 0x158], rcx>', '<mov~~eax, dword ptr [rax + 0x2ae4c]>', '<mov~~dword ptr [rsp + 0x164], eax>', '<cmp~~eax, 0>', '<je~~0x411288>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~cx, word ptr [rsp + 0x156]>', '<mov~~eax, dword ptr [rsp + 0x164]>', '<add~~eax, 1>', '<mov~~eax, eax>', '<mov~~edx, eax>', '<mov~~rax, rdx>', '<add~~rax, -1>', '<mov~~qword ptr [rsp + 0x118], rax>', '<add~~rdx, -2>', '<and~~rax, 3>', '<mov~~qword ptr [rsp + 0x120], rax>', '<mov~~eax, 1>', '<cmp~~rdx, 3>', '<mov~~word ptr [rsp + 0x12e], cx>', '<mov~~qword ptr [rsp + 0x130], rax>', '<jb~~0x4111d8>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x188>', '<mov~~qword ptr [rsp + 0x168], rdi>', '<mov~~eax, dword ptr [rdi + 0x18]>', '<mov~~dword ptr [rsp + 0x174], eax>', '<cmp~~eax, 0>', '<je~~0x411603>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x168]>', '<mov~~rdi, qword ptr [rsp + 0x140]>', '<mov~~qword ptr [rsp + 0x88], rdi>', '<mov~~rsi, rax>', '<add~~rsi, 0x2ad72>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ad00>', '<mov~~qword ptr [rsp + 0x90], rcx>', '<mov~~eax, dword ptr [rax + 0x2ad00]>', '<mov~~dword ptr [rsp + 0x9c], eax>', '<add~~eax, 1>', '<mov~~eax, eax>', '<mov~~edx, eax>', '<shl~~rdx, 1>', '<call~~0x500058>']}], 'cfg_edge_info': [(2, 3), (0, 2), (2, 4)]}]}
{'sbr_make_f_tablelim': [4263874]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_after/O2/aacsbr.o---after
The extraction of function: sbr_make_f_tablelim
[4263874]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 35 nodes and 55 edges in CFGEmulated.
It has 35 nodes and 46 edges in CDG.
It has 1251 nodes and 1570 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4263874]
{4265473, 4265475, 4264707, 4264584, 4265359, 4264464, 4264854, 4265118, 4263840, 4264996, 4264108, 4265261, 4265528, 4263874, 4265154, 4265284, 4264775, 4264408, 4264664, 4264024, 4265178, 4264928, 4265313, 4264167, 4264809, 4265074, 4265215}
[6, 21, 9, 22, 1, 31, 17, 15, 18, 16, 28, 10, 29, 0, 4, 23, 2, 33, 8, 7, 30, 25, 26, 34, 32, 3, 12, 27, 20, 11, 24]
The execution time of patched slicing information extraction via angr: 0:00:10.759177
{'sbr_make_f_tablelim': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4111d8>, <DisassemblerInsn "mov" for 0x4111e0>, <DisassemblerInsn "mov" for 0x4111e8>, <DisassemblerInsn "xor" for 0x4111f0>, <DisassemblerInsn "cmp" for 0x4111f2>, <DisassemblerInsn "mov" for 0x4111f6>, <DisassemblerInsn "mov" for 0x4111fe>, <DisassemblerInsn "mov" for 0x411206>, <DisassemblerInsn "je" for 0x41120e>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x41149e>, <DisassemblerInsn "mov" for 0x4114a2>, <DisassemblerInsn "mov" for 0x4114a7>, <DisassemblerInsn "sub" for 0x4114ac>, <DisassemblerInsn "sete" for 0x4114af>, <DisassemblerInsn "or" for 0x4114b2>, <DisassemblerInsn "xor" for 0x4114b4>, <DisassemblerInsn "test" for 0x4114b6>, <DisassemblerInsn "mov" for 0x4114b9>, <DisassemblerInsn "jne" for 0x4114be>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411210>, <DisassemblerInsn "mov" for 0x411218>, <DisassemblerInsn "mov" for 0x411220>, <DisassemblerInsn "mov" for 0x411228>, <DisassemblerInsn "mov" for 0x411230>, <DisassemblerInsn "movzx" for 0x411238>, <DisassemblerInsn "add" for 0x411240>, <DisassemblerInsn "mov" for 0x411243>, <DisassemblerInsn "mov" for 0x41124b>, <DisassemblerInsn "add" for 0x411253>, <DisassemblerInsn "mov" for 0x411257>, <DisassemblerInsn "add" for 0x41125f>, <DisassemblerInsn "mov" for 0x411263>, <DisassemblerInsn "cmp" for 0x41126b>, <DisassemblerInsn "mov" for 0x41126e>, <DisassemblerInsn "mov" for 0x411276>, <DisassemblerInsn "mov" for 0x41127e>, <DisassemblerInsn "jne" for 0x411286>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411472>, <DisassemblerInsn "mov" for 0x411476>, <DisassemblerInsn "mov" for 0x41147b>, <DisassemblerInsn "mov" for 0x411480>, <DisassemblerInsn "add" for 0x411483>, <DisassemblerInsn "mov" for 0x411487>, <DisassemblerInsn "mov" for 0x41148b>, <DisassemblerInsn "mov" for 0x411490>, <DisassemblerInsn "mov" for 0x411494>, <DisassemblerInsn "jmp" for 0x411499>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411603>, <DisassemblerInsn "mov" for 0x41160b>, <DisassemblerInsn "mov" for 0x411612>, <DisassemblerInsn "mov" for 0x411619>, <DisassemblerInsn "mov" for 0x41161f>, <DisassemblerInsn "mov" for 0x411627>, <DisassemblerInsn "mov" for 0x41162e>, <DisassemblerInsn "add" for 0x411638>, <DisassemblerInsn "ret" for 0x41163f>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x41155f>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x411601>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411396>, <DisassemblerInsn "mov" for 0x41139e>, <DisassemblerInsn "mov" for 0x4113a6>, <DisassemblerInsn "mov" for 0x4113ae>, <DisassemblerInsn "mov" for 0x4113b0>, <DisassemblerInsn "mov" for 0x4113b2>, <DisassemblerInsn "add" for 0x4113b6>, <DisassemblerInsn "add" for 0x4113b9>, <DisassemblerInsn "mov" for 0x4113bb>, <DisassemblerInsn "mov" for 0x4113bf>, <DisassemblerInsn "add" for 0x4113c2>, <DisassemblerInsn "mov" for 0x4113c9>, <DisassemblerInsn "mov" for 0x4113d1>, <DisassemblerInsn "cmp" for 0x4113d7>, <DisassemblerInsn "je" for 0x4113da>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4113e0>, <DisassemblerInsn "mov" for 0x4113e4>, <DisassemblerInsn "mov" for 0x4113ec>, <DisassemblerInsn "mov" for 0x4113f4>, <DisassemblerInsn "cmp" for 0x4113f8>, <DisassemblerInsn "setl" for 0x4113fb>, <DisassemblerInsn "mov" for 0x4113ff>, <DisassemblerInsn "add" for 0x411404>, <DisassemblerInsn "mov" for 0x411407>, <DisassemblerInsn "mov" for 0x411409>, <DisassemblerInsn "mov" for 0x41140e>, <DisassemblerInsn "mov" for 0x411411>, <DisassemblerInsn "mov" for 0x411416>, <DisassemblerInsn "mov" for 0x41141b>, <DisassemblerInsn "mov" for 0x411420>, <DisassemblerInsn "movss" for 0x411424>, <DisassemblerInsn "mov" for 0x41142d>, <DisassemblerInsn "mov" for 0x411432>, <DisassemblerInsn "mov" for 0x411437>, <DisassemblerInsn "mov" for 0x41143c>, <DisassemblerInsn "mov" for 0x411440>, <DisassemblerInsn "mov" for 0x411444>, <DisassemblerInsn "mov" for 0x411449>, <DisassemblerInsn "mov" for 0x41144e>, <DisassemblerInsn "movzx" for 0x411453>, <DisassemblerInsn "mov" for 0x411456>, <DisassemblerInsn "mov" for 0x411459>, <DisassemblerInsn "cvtsi2ss" for 0x41145e>, <DisassemblerInsn "movzx" for 0x411462>, <DisassemblerInsn "cvtsi2ss" for 0x411465>, <DisassemblerInsn "mulss" for 0x411469>, <DisassemblerInsn "ucomiss" for 0x41146d>, <DisassemblerInsn "jb" for 0x411470>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411347>, <DisassemblerInsn "mov" for 0x41134f>, <DisassemblerInsn "mov" for 0x411357>, <DisassemblerInsn "mov" for 0x411359>, <DisassemblerInsn "mov" for 0x41135b>, <DisassemblerInsn "mov" for 0x411362>, <DisassemblerInsn "mov" for 0x411369>, <DisassemblerInsn "mov" for 0x411371>, <DisassemblerInsn "mov" for 0x411378>, <DisassemblerInsn "add" for 0x41137f>, <DisassemblerInsn "mov" for 0x411381>, <DisassemblerInsn "mov" for 0x411383>, <DisassemblerInsn "mov" for 0x411385>, <DisassemblerInsn "lea" for 0x41138a>, <DisassemblerInsn "call" for 0x411391>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411544>, <DisassemblerInsn "mov" for 0x411549>, <DisassemblerInsn "mov" for 0x41154e>, <DisassemblerInsn "mov" for 0x411552>, <DisassemblerInsn "cmp" for 0x41155a>, <DisassemblerInsn "je" for 0x41155d>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4110e7>, <DisassemblerInsn "mov" for 0x4110ef>, <DisassemblerInsn "mov" for 0x4110f7>, <DisassemblerInsn "mov" for 0x4110ff>, <DisassemblerInsn "mov" for 0x411107>, <DisassemblerInsn "mov" for 0x41110f>, <DisassemblerInsn "movzx" for 0x411117>, <DisassemblerInsn "add" for 0x411120>, <DisassemblerInsn "mov" for 0x411124>, <DisassemblerInsn "mov" for 0x41112c>, <DisassemblerInsn "movzx" for 0x411134>, <DisassemblerInsn "add" for 0x41113d>, <DisassemblerInsn "mov" for 0x411141>, <DisassemblerInsn "mov" for 0x411149>, <DisassemblerInsn "movzx" for 0x411151>, <DisassemblerInsn "add" for 0x41115a>, <DisassemblerInsn "mov" for 0x41115e>, <DisassemblerInsn "mov" for 0x411166>, <DisassemblerInsn "movzx" for 0x41116e>, <DisassemblerInsn "add" for 0x411176>, <DisassemblerInsn "mov" for 0x411179>, <DisassemblerInsn "mov" for 0x411181>, <DisassemblerInsn "add" for 0x411189>, <DisassemblerInsn "mov" for 0x41118d>, <DisassemblerInsn "add" for 0x411195>, <DisassemblerInsn "mov" for 0x411199>, <DisassemblerInsn "cmp" for 0x4111a1>, <DisassemblerInsn "mov" for 0x4111a4>, <DisassemblerInsn "mov" for 0x4111a7>, <DisassemblerInsn "mov" for 0x4111af>, <DisassemblerInsn "mov" for 0x4111b2>, <DisassemblerInsn "mov" for 0x4111ba>, <DisassemblerInsn "mov" for 0x4111c2>, <DisassemblerInsn "mov" for 0x4111ca>, <DisassemblerInsn "jne" for 0x4111d2>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4114fd>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x410fa0>, <DisassemblerInsn "mov" for 0x410fa7>, <DisassemblerInsn "mov" for 0x410faf>, <DisassemblerInsn "mov" for 0x410fb2>, <DisassemblerInsn "cmp" for 0x410fb9>, <DisassemblerInsn "je" for 0x410fbc>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411058>, <DisassemblerInsn "mov" for 0x411060>, <DisassemblerInsn "add" for 0x411067>, <DisassemblerInsn "mov" for 0x41106a>, <DisassemblerInsn "mov" for 0x41106c>, <DisassemblerInsn "mov" for 0x41106e>, <DisassemblerInsn "add" for 0x411071>, <DisassemblerInsn "mov" for 0x411075>, <DisassemblerInsn "add" for 0x41107d>, <DisassemblerInsn "and" for 0x411081>, <DisassemblerInsn "mov" for 0x411085>, <DisassemblerInsn "mov" for 0x41108d>, <DisassemblerInsn "cmp" for 0x411092>, <DisassemblerInsn "mov" for 0x411096>, <DisassemblerInsn "mov" for 0x41109e>, <DisassemblerInsn "jb" for 0x4110a6>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4114c0>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x410fc2>, <DisassemblerInsn "mov" for 0x410fca>, <DisassemblerInsn "add" for 0x410fd1>, <DisassemblerInsn "mov" for 0x410fd4>, <DisassemblerInsn "mov" for 0x410fd6>, <DisassemblerInsn "lea" for 0x410fd8>, <DisassemblerInsn "movss" for 0x410fdf>, <DisassemblerInsn "movss" for 0x410fe4>, <DisassemblerInsn "lea" for 0x410fed>, <DisassemblerInsn "mov" for 0x410ff5>, <DisassemblerInsn "add" for 0x410ff8>, <DisassemblerInsn "mov" for 0x410fff>, <DisassemblerInsn "mov" for 0x411007>, <DisassemblerInsn "add" for 0x41100a>, <DisassemblerInsn "add" for 0x411011>, <DisassemblerInsn "mov" for 0x411015>, <DisassemblerInsn "mov" for 0x41101d>, <DisassemblerInsn "mov" for 0x411020>, <DisassemblerInsn "mov" for 0x411028>, <DisassemblerInsn "mov" for 0x411030>, <DisassemblerInsn "add" for 0x411033>, <DisassemblerInsn "mov" for 0x41103a>, <DisassemblerInsn "mov" for 0x411042>, <DisassemblerInsn "mov" for 0x411048>, <DisassemblerInsn "cmp" for 0x41104f>, <DisassemblerInsn "je" for 0x411052>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x41152d>, <DisassemblerInsn "mov" for 0x411532>, <DisassemblerInsn "add" for 0x411536>, <DisassemblerInsn "cmp" for 0x41153a>, <DisassemblerInsn "mov" for 0x41153d>, <DisassemblerInsn "je" for 0x411542>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4112d8>, <DisassemblerInsn "mov" for 0x4112e0>, <DisassemblerInsn "mov" for 0x4112e7>, <DisassemblerInsn "mov" for 0x4112e9>, <DisassemblerInsn "cmp" for 0x4112f0>, <DisassemblerInsn "mov" for 0x4112f3>, <DisassemblerInsn "mov" for 0x4112fa>, <DisassemblerInsn "jbe" for 0x411301>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4110ac>, <DisassemblerInsn "mov" for 0x4110b4>, <DisassemblerInsn "and" for 0x4110bc>, <DisassemblerInsn "mov" for 0x4110c0>, <DisassemblerInsn "mov" for 0x4110c8>, <DisassemblerInsn "xor" for 0x4110cd>, <DisassemblerInsn "mov" for 0x4110cf>, <DisassemblerInsn "mov" for 0x4110d7>, <DisassemblerInsn "mov" for 0x4110df>, <DisassemblerInsn "mov" for 0x4110e7>, <DisassemblerInsn "mov" for 0x4110ef>, <DisassemblerInsn "mov" for 0x4110f7>, <DisassemblerInsn "mov" for 0x4110ff>, <DisassemblerInsn "mov" for 0x411107>, <DisassemblerInsn "mov" for 0x41110f>, <DisassemblerInsn "movzx" for 0x411117>, <DisassemblerInsn "add" for 0x411120>, <DisassemblerInsn "mov" for 0x411124>, <DisassemblerInsn "mov" for 0x41112c>, <DisassemblerInsn "movzx" for 0x411134>, <DisassemblerInsn "add" for 0x41113d>, <DisassemblerInsn "mov" for 0x411141>, <DisassemblerInsn "mov" for 0x411149>, <DisassemblerInsn "movzx" for 0x411151>, <DisassemblerInsn "add" for 0x41115a>, <DisassemblerInsn "mov" for 0x41115e>, <DisassemblerInsn "mov" for 0x411166>, <DisassemblerInsn "movzx" for 0x41116e>, <DisassemblerInsn "add" for 0x411176>, <DisassemblerInsn "mov" for 0x411179>, <DisassemblerInsn "mov" for 0x411181>, <DisassemblerInsn "add" for 0x411189>, <DisassemblerInsn "mov" for 0x41118d>, <DisassemblerInsn "add" for 0x411195>, <DisassemblerInsn "mov" for 0x411199>, <DisassemblerInsn "cmp" for 0x4111a1>, <DisassemblerInsn "mov" for 0x4111a4>, <DisassemblerInsn "mov" for 0x4111a7>, <DisassemblerInsn "mov" for 0x4111af>, <DisassemblerInsn "mov" for 0x4111b2>, <DisassemblerInsn "mov" for 0x4111ba>, <DisassemblerInsn "mov" for 0x4111c2>, <DisassemblerInsn "mov" for 0x4111ca>, <DisassemblerInsn "jne" for 0x4111d2>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x41158f>, <DisassemblerInsn "mov" for 0x411593>, <DisassemblerInsn "mov" for 0x411598>, <DisassemblerInsn "mov" for 0x41159d>, <DisassemblerInsn "add" for 0x4115a0>, <DisassemblerInsn "mov" for 0x4115a4>, <DisassemblerInsn "mov" for 0x4115a8>, <DisassemblerInsn "mov" for 0x4115ad>, <DisassemblerInsn "mov" for 0x4115b1>, <DisassemblerInsn "mov" for 0x4115b6>, <DisassemblerInsn "mov" for 0x4115be>, <DisassemblerInsn "mov" for 0x4115c3>, <DisassemblerInsn "mov" for 0x4115c8>, <DisassemblerInsn "mov" for 0x4115cc>, <DisassemblerInsn "add" for 0x4115d1>, <DisassemblerInsn "mov" for 0x4115d5>, <DisassemblerInsn "add" for 0x4115d8>, <DisassemblerInsn "shl" for 0x4115df>, <DisassemblerInsn "add" for 0x4115e2>, <DisassemblerInsn "cmp" for 0x4115e5>, <DisassemblerInsn "mov" for 0x4115e8>, <DisassemblerInsn "mov" for 0x4115ed>, <DisassemblerInsn "mov" for 0x4115f2>, <DisassemblerInsn "mov" for 0x4115f7>, <DisassemblerInsn "jb" for 0x4115fb>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4115b6>, <DisassemblerInsn "mov" for 0x4115be>, <DisassemblerInsn "mov" for 0x4115c3>, <DisassemblerInsn "mov" for 0x4115c8>, <DisassemblerInsn "mov" for 0x4115cc>, <DisassemblerInsn "add" for 0x4115d1>, <DisassemblerInsn "mov" for 0x4115d5>, <DisassemblerInsn "add" for 0x4115d8>, <DisassemblerInsn "shl" for 0x4115df>, <DisassemblerInsn "add" for 0x4115e2>, <DisassemblerInsn "cmp" for 0x4115e5>, <DisassemblerInsn "mov" for 0x4115e8>, <DisassemblerInsn "mov" for 0x4115ed>, <DisassemblerInsn "mov" for 0x4115f2>, <DisassemblerInsn "mov" for 0x4115f7>, <DisassemblerInsn "jb" for 0x4115fb>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4114da>, <DisassemblerInsn "mov" for 0x4114df>, <DisassemblerInsn "mov" for 0x4114e4>, <DisassemblerInsn "mov" for 0x4114e9>, <DisassemblerInsn "xor" for 0x4114f1>, <DisassemblerInsn "cmp" for 0x4114f3>, <DisassemblerInsn "mov" for 0x4114f6>, <DisassemblerInsn "je" for 0x4114fb>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411561>, <DisassemblerInsn "mov" for 0x411566>, <DisassemblerInsn "mov" for 0x41156b>, <DisassemblerInsn "mov" for 0x411573>, <DisassemblerInsn "mov" for 0x411577>, <DisassemblerInsn "add" for 0x41157a>, <DisassemblerInsn "mov" for 0x41157d>, <DisassemblerInsn "mov" for 0x41157f>, <DisassemblerInsn "mov" for 0x411584>, <DisassemblerInsn "mov" for 0x411588>, <DisassemblerInsn "jmp" for 0x41158d>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4114c2>, <DisassemblerInsn "mov" for 0x4114c7>, <DisassemblerInsn "add" for 0x4114cc>, <DisassemblerInsn "cmp" for 0x4114d0>, <DisassemblerInsn "mov" for 0x4114d3>, <DisassemblerInsn "je" for 0x4114d8>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411288>, <DisassemblerInsn "mov" for 0x411290>, <DisassemblerInsn "mov" for 0x411298>, <DisassemblerInsn "mov" for 0x4112a0>, <DisassemblerInsn "add" for 0x4112a3>, <DisassemblerInsn "mov" for 0x4112aa>, <DisassemblerInsn "add" for 0x4112ad>, <DisassemblerInsn "mov" for 0x4112b4>, <DisassemblerInsn "mov" for 0x4112bc>, <DisassemblerInsn "mov" for 0x4112c2>, <DisassemblerInsn "add" for 0x4112c9>, <DisassemblerInsn "mov" for 0x4112cc>, <DisassemblerInsn "mov" for 0x4112ce>, <DisassemblerInsn "shl" for 0x4112d0>, <DisassemblerInsn "call" for 0x4112d3>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411303>, <DisassemblerInsn "mov" for 0x41130a>, <DisassemblerInsn "mov" for 0x411312>, <DisassemblerInsn "mov" for 0x411319>, <DisassemblerInsn "add" for 0x41131b>, <DisassemblerInsn "shl" for 0x411322>, <DisassemblerInsn "add" for 0x411325>, <DisassemblerInsn "add" for 0x411328>, <DisassemblerInsn "lea" for 0x41132c>, <DisassemblerInsn "add" for 0x411334>, <DisassemblerInsn "add" for 0x411338>, <DisassemblerInsn "mov" for 0x41133b>, <DisassemblerInsn "mov" for 0x41133d>, <DisassemblerInsn "shl" for 0x41133f>, <DisassemblerInsn "call" for 0x411342>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "movss" for 0x411424>, <DisassemblerInsn "mov" for 0x41142d>, <DisassemblerInsn "mov" for 0x411432>, <DisassemblerInsn "mov" for 0x411437>, <DisassemblerInsn "mov" for 0x41143c>, <DisassemblerInsn "mov" for 0x411440>, <DisassemblerInsn "mov" for 0x411444>, <DisassemblerInsn "mov" for 0x411449>, <DisassemblerInsn "mov" for 0x41144e>, <DisassemblerInsn "movzx" for 0x411453>, <DisassemblerInsn "mov" for 0x411456>, <DisassemblerInsn "mov" for 0x411459>, <DisassemblerInsn "cvtsi2ss" for 0x41145e>, <DisassemblerInsn "movzx" for 0x411462>, <DisassemblerInsn "cvtsi2ss" for 0x411465>, <DisassemblerInsn "mulss" for 0x411469>, <DisassemblerInsn "ucomiss" for 0x41146d>, <DisassemblerInsn "jb" for 0x411470>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "add" for 0x411638>, <DisassemblerInsn "ret" for 0x41163f>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411369>, <DisassemblerInsn "mov" for 0x411371>, <DisassemblerInsn "mov" for 0x411378>, <DisassemblerInsn "add" for 0x41137f>, <DisassemblerInsn "mov" for 0x411381>, <DisassemblerInsn "mov" for 0x411383>, <DisassemblerInsn "mov" for 0x411385>, <DisassemblerInsn "lea" for 0x41138a>, <DisassemblerInsn "call" for 0x411391>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4114ff>, <DisassemblerInsn "mov" for 0x411504>, <DisassemblerInsn "mov" for 0x411509>, <DisassemblerInsn "mov" for 0x411511>, <DisassemblerInsn "add" for 0x411515>, <DisassemblerInsn "mov" for 0x411518>, <DisassemblerInsn "mov" for 0x41151a>, <DisassemblerInsn "mov" for 0x41151f>, <DisassemblerInsn "mov" for 0x411523>, <DisassemblerInsn "jmp" for 0x411528>]'}], 'cfg_block_detailed_info': [{'block_Idx': 6, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x120]>', '<mov~~dx, word ptr [rsp + 0x12e]>', '<mov~~rcx, qword ptr [rsp + 0x130]>', '<xor~~eax, eax>', '<cmp~~rsi, 0>', '<mov~~word ptr [rsp + 0xc6], dx>', '<mov~~qword ptr [rsp + 0xc8], rcx>', '<mov~~qword ptr [rsp + 0xd0], rax>', '<je~~0x411288>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x4f]>', '<mov~~dx, word ptr [rsp + 0x4a]>', '<mov~~cx, word ptr [rsp + 0x4c]>', '<sub~~cx, dx>', '<sete~~cl>', '<or~~cl, al>', '<xor~~eax, eax>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x18], rax>', '<jne~~0x4114ff>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd0]>', '<mov~~rcx, qword ptr [rsp + 0xc8]>', '<mov~~dx, word ptr [rsp + 0xc6]>', '<mov~~rsi, qword ptr [rsp + 0x120]>', '<mov~~rdi, qword ptr [rsp + 0x168]>', '<movzx~~edi, byte ptr [rdi + rcx + 0x2ae4f]>', '<add~~dx, di>', '<mov~~word ptr [rsp + 0xae], dx>', '<mov~~word ptr [rsp + rcx*2 + 0x17a], dx>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0xb0], rcx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0xb8], rax>', '<cmp~~rax, rsi>', '<mov~~word ptr [rsp + 0xc6], dx>', '<mov~~qword ptr [rsp + 0xc8], rcx>', '<mov~~qword ptr [rsp + 0xd0], rax>', '<jne~~0x411210>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x34]>', '<mov~~dx, word ptr [rsp + 0x4c]>', '<mov~~rsi, qword ptr [rsp + 0x40]>', '<mov~~rax, rsi>', '<add~~rax, 2>', '<mov~~word ptr [rsi + 2], dx>', '<mov~~word ptr [rsp + 0x22], dx>', '<mov~~dword ptr [rsp + 0x24], ecx>', '<mov~~qword ptr [rsp + 0x28], rax>', '<jmp~~0x4115b6>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x168]>', '<mov~~cx, word ptr [rax + 0x2ad72]>', '<mov~~word ptr [rax + 0x2ae12], cx>', '<mov~~ecx, dword ptr [rax + 0x2ad00]>', '<mov~~cx, word ptr [rax + rcx*2 + 0x2ad72]>', '<mov~~word ptr [rax + 0x2ae14], cx>', '<mov~~dword ptr [rax + 0x2ad0c], 1>', '<add~~rsp, 0x188>', '<ret~~>']}, {'block_Idx': 31, 'blockInsts': ['<jmp~~0x41152d>']}, {'block_Idx': 17, 'blockInsts': ['<jmp~~0x411638>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x90]>', '<mov~~rdx, qword ptr [rsp + 0x158]>', '<mov~~rcx, qword ptr [rsp + 0x168]>', '<mov~~eax, dword ptr [rax]>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0x78], edx>', '<add~~eax, -1>', '<add~~eax, edx>', '<mov~~dword ptr [rsp + 0x7c], eax>', '<mov~~rdx, rcx>', '<add~~rdx, 0x2ad0c>', '<mov~~qword ptr [rsp + 0x80], rdx>', '<mov~~dword ptr [rcx + 0x2ad0c], eax>', '<cmp~~eax, 0>', '<je~~0x411601>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x7c]>', '<mov~~rcx, qword ptr [rsp + 0x148]>', '<mov~~rdx, qword ptr [rsp + 0x140]>', '<mov~~esi, dword ptr [rsp + 0x78]>', '<cmp~~esi, 0>', '<setl~~dil>', '<mov~~byte ptr [rsp + 0x4f], dil>', '<add~~esi, 1>', '<mov~~esi, esi>', '<mov~~qword ptr [rsp + 0x50], rsi>', '<mov~~si, word ptr [rdx]>', '<mov~~word ptr [rsp + 0x5e], si>', '<mov~~qword ptr [rsp + 0x60], rdx>', '<mov~~qword ptr [rsp + 0x68], rcx>', '<mov~~dword ptr [rsp + 0x74], eax>', '<movss~~xmm1, dword ptr [rsp + 0x13c]>', '<mov~~ax, word ptr [rsp + 0x5e]>', '<mov~~rdx, qword ptr [rsp + 0x60]>', '<mov~~rcx, qword ptr [rsp + 0x68]>', '<mov~~esi, dword ptr [rsp + 0x74]>', '<mov~~dword ptr [rsp + 0x34], esi>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~qword ptr [rsp + 0x40], rdx>', '<mov~~word ptr [rsp + 0x4a], ax>', '<movzx~~ecx, word ptr [rcx]>', '<mov~~dx, cx>', '<mov~~word ptr [rsp + 0x4c], dx>', '<cvtsi2ss~~xmm0, ecx>', '<movzx~~eax, ax>', '<cvtsi2ss~~xmm2, eax>', '<mulss~~xmm1, xmm2>', '<ucomiss~~xmm0, xmm1>', '<jb~~0x41149e>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~rcx, qword ptr [rsp + 0x90]>', '<mov~~eax, dword ptr [rax]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0xa4], ecx>', '<mov~~dword ptr [rsp + 0xa8], eax>', '<mov~~rdi, qword ptr [rsp + 0x88]>', '<mov~~eax, dword ptr [rsp + 0xa4]>', '<mov~~ecx, dword ptr [rsp + 0xa8]>', '<add~~eax, ecx>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<mov~~edx, 2>', '<lea~~rcx, [rip + 0x2af]>', '<call~~0x500048>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~cx, word ptr [rsp + 0x4a]>', '<mov~~rax, qword ptr [rsp + 8]>', '<mov~~qword ptr [rsp], rax>', '<mov~~ax, word ptr [rsp + rax*2 + 0x17a]>', '<cmp~~ax, cx>', '<je~~0x41158f>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x110]>', '<mov~~rax, qword ptr [rsp + 0x108]>', '<mov~~cx, word ptr [rsp + 0x106]>', '<mov~~rsi, qword ptr [rsp + 0xf8]>', '<mov~~rdi, qword ptr [rsp + 0x168]>', '<mov~~qword ptr [rsp + 0xd8], rax>', '<movzx~~r8d, byte ptr [rdi + rax + 0x2ae4f]>', '<add~~cx, r8w>', '<mov~~word ptr [rsp + 0xe0], cx>', '<mov~~word ptr [rsp + rax*2 + 0x17a], cx>', '<movzx~~r8d, byte ptr [rdi + rax + 0x2ae50]>', '<add~~cx, r8w>', '<mov~~word ptr [rsp + 0xe2], cx>', '<mov~~word ptr [rsp + rax*2 + 0x17c], cx>', '<movzx~~r8d, byte ptr [rdi + rax + 0x2ae51]>', '<add~~cx, r8w>', '<mov~~word ptr [rsp + 0xe4], cx>', '<mov~~word ptr [rsp + rax*2 + 0x17e], cx>', '<movzx~~edi, byte ptr [rdi + rax + 0x2ae52]>', '<add~~cx, di>', '<mov~~word ptr [rsp + 0xe6], cx>', '<mov~~word ptr [rsp + rax*2 + 0x180], cx>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0xe8], rax>', '<add~~rdx, 4>', '<mov~~qword ptr [rsp + 0xf0], rdx>', '<cmp~~rdx, rsi>', '<mov~~si, cx>', '<mov~~word ptr [rsp + 0x106], si>', '<mov~~rsi, rax>', '<mov~~qword ptr [rsp + 0x108], rsi>', '<mov~~qword ptr [rsp + 0x110], rdx>', '<mov~~word ptr [rsp + 0x12e], cx>', '<mov~~qword ptr [rsp + 0x130], rax>', '<jne~~0x4110e7>']}, {'block_Idx': 29, 'blockInsts': ['<jmp~~0x4114c2>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x188>', '<mov~~qword ptr [rsp + 0x168], rdi>', '<mov~~eax, dword ptr [rdi + 0x18]>', '<mov~~dword ptr [rsp + 0x174], eax>', '<cmp~~eax, 0>', '<je~~0x411603>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~cx, word ptr [rsp + 0x156]>', '<mov~~eax, dword ptr [rsp + 0x164]>', '<add~~eax, 1>', '<mov~~eax, eax>', '<mov~~edx, eax>', '<mov~~rax, rdx>', '<add~~rax, -1>', '<mov~~qword ptr [rsp + 0x118], rax>', '<add~~rdx, -2>', '<and~~rax, 3>', '<mov~~qword ptr [rsp + 0x120], rax>', '<mov~~eax, 1>', '<cmp~~rdx, 3>', '<mov~~word ptr [rsp + 0x12e], cx>', '<mov~~qword ptr [rsp + 0x130], rax>', '<jb~~0x4111d8>']}, {'block_Idx': 23, 'blockInsts': ['<jmp~~0x4114da>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x168]>', '<mov~~ecx, dword ptr [rsp + 0x174]>', '<add~~ecx, -1>', '<mov~~ecx, ecx>', '<mov~~edx, ecx>', '<lea~~rcx, [rip + 0x42dd]>', '<movss~~xmm0, dword ptr [rcx + rdx*4]>', '<movss~~dword ptr [rsp + 0x13c], xmm0>', '<lea~~rcx, [rsp + 0x17a]>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ae12>', '<mov~~qword ptr [rsp + 0x140], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ae12>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x148], rcx>', '<mov~~ecx, dword ptr [rax + 0x44]>', '<mov~~word ptr [rsp + 0x156], cx>', '<mov~~word ptr [rsp + 0x17a], cx>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ae4c>', '<mov~~qword ptr [rsp + 0x158], rcx>', '<mov~~eax, dword ptr [rax + 0x2ae4c]>', '<mov~~dword ptr [rsp + 0x164], eax>', '<cmp~~eax, 0>', '<je~~0x411288>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x50]>', '<mov~~rax, qword ptr [rsp]>', '<add~~rax, 1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 8], rax>', '<je~~0x411561>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~ecx, dword ptr [rsp + 0x9c]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0xa0], eax>', '<cmp~~eax, 1>', '<mov~~dword ptr [rsp + 0xa4], ecx>', '<mov~~dword ptr [rsp + 0xa8], eax>', '<jbe~~0x411369>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~dx, word ptr [rsp + 0x156]>', '<mov~~rax, qword ptr [rsp + 0x118]>', '<and~~rax, 0xfffffffffffffffc>', '<mov~~qword ptr [rsp + 0xf8], rax>', '<mov~~ecx, 1>', '<xor~~eax, eax>', '<mov~~word ptr [rsp + 0x106], dx>', '<mov~~qword ptr [rsp + 0x108], rcx>', '<mov~~qword ptr [rsp + 0x110], rax>', '<mov~~rdx, qword ptr [rsp + 0x110]>', '<mov~~rax, qword ptr [rsp + 0x108]>', '<mov~~cx, word ptr [rsp + 0x106]>', '<mov~~rsi, qword ptr [rsp + 0xf8]>', '<mov~~rdi, qword ptr [rsp + 0x168]>', '<mov~~qword ptr [rsp + 0xd8], rax>', '<movzx~~r8d, byte ptr [rdi + rax + 0x2ae4f]>', '<add~~cx, r8w>', '<mov~~word ptr [rsp + 0xe0], cx>', '<mov~~word ptr [rsp + rax*2 + 0x17a], cx>', '<movzx~~r8d, byte ptr [rdi + rax + 0x2ae50]>', '<add~~cx, r8w>', '<mov~~word ptr [rsp + 0xe2], cx>', '<mov~~word ptr [rsp + rax*2 + 0x17c], cx>', '<movzx~~r8d, byte ptr [rdi + rax + 0x2ae51]>', '<add~~cx, r8w>', '<mov~~word ptr [rsp + 0xe4], cx>', '<mov~~word ptr [rsp + rax*2 + 0x17e], cx>', '<movzx~~edi, byte ptr [rdi + rax + 0x2ae52]>', '<add~~cx, di>', '<mov~~word ptr [rsp + 0xe6], cx>', '<mov~~word ptr [rsp + rax*2 + 0x180], cx>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0xe8], rax>', '<add~~rdx, 4>', '<mov~~qword ptr [rsp + 0xf0], rdx>', '<cmp~~rdx, rsi>', '<mov~~si, cx>', '<mov~~word ptr [rsp + 0x106], si>', '<mov~~rsi, rax>', '<mov~~qword ptr [rsp + 0x108], rsi>', '<mov~~qword ptr [rsp + 0x110], rdx>', '<mov~~word ptr [rsp + 0x12e], cx>', '<mov~~qword ptr [rsp + 0x130], rax>', '<jne~~0x4110e7>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x34]>', '<mov~~dx, word ptr [rsp + 0x4c]>', '<mov~~rsi, qword ptr [rsp + 0x40]>', '<mov~~rax, rsi>', '<add~~rax, 2>', '<mov~~word ptr [rsi + 2], dx>', '<mov~~word ptr [rsp + 0x22], dx>', '<mov~~dword ptr [rsp + 0x24], ecx>', '<mov~~qword ptr [rsp + 0x28], rax>', '<mov~~rdi, qword ptr [rsp + 0x168]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~si, word ptr [rsp + 0x22]>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<mov~~rdx, qword ptr [rsp + 0x28]>', '<add~~rcx, 2>', '<mov~~r8d, eax>', '<add~~rdi, 0x2ae12>', '<shl~~r8, 1>', '<add~~rdi, r8>', '<cmp~~rdx, rdi>', '<mov~~word ptr [rsp + 0x5e], si>', '<mov~~qword ptr [rsp + 0x60], rdx>', '<mov~~qword ptr [rsp + 0x68], rcx>', '<mov~~dword ptr [rsp + 0x74], eax>', '<jb~~0x411424>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x168]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~si, word ptr [rsp + 0x22]>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<mov~~rdx, qword ptr [rsp + 0x28]>', '<add~~rcx, 2>', '<mov~~r8d, eax>', '<add~~rdi, 0x2ae12>', '<shl~~r8, 1>', '<add~~rdi, r8>', '<cmp~~rdx, rdi>', '<mov~~word ptr [rsp + 0x5e], si>', '<mov~~qword ptr [rsp + 0x60], rdx>', '<mov~~qword ptr [rsp + 0x68], rcx>', '<mov~~dword ptr [rsp + 0x74], eax>', '<jb~~0x411424>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~dx, word ptr [rsp + 0x4c]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~qword ptr [rsp + 0x10], rax>', '<mov~~cx, word ptr [rsp + rax*2 + 0x17a]>', '<xor~~eax, eax>', '<cmp~~cx, dx>', '<mov~~qword ptr [rsp + 8], rax>', '<je~~0x411544>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~dx, word ptr [rsp + 0x4c]>', '<mov~~rsi, qword ptr [rsp + 0x80]>', '<mov~~ecx, dword ptr [rsp + 0x34]>', '<mov~~word ptr [rax], dx>', '<add~~ecx, -1>', '<mov~~dword ptr [rsi], ecx>', '<mov~~word ptr [rsp + 0x22], dx>', '<mov~~dword ptr [rsp + 0x24], ecx>', '<mov~~qword ptr [rsp + 0x28], rax>', '<jmp~~0x4115b6>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x50]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<add~~rax, 1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x18], rax>', '<je~~0x4114ff>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x168]>', '<mov~~rdi, qword ptr [rsp + 0x140]>', '<mov~~qword ptr [rsp + 0x88], rdi>', '<mov~~rsi, rax>', '<add~~rsi, 0x2ad72>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ad00>', '<mov~~qword ptr [rsp + 0x90], rcx>', '<mov~~eax, dword ptr [rax + 0x2ad00]>', '<mov~~dword ptr [rsp + 0x9c], eax>', '<add~~eax, 1>', '<mov~~eax, eax>', '<mov~~edx, eax>', '<shl~~rdx, 1>', '<call~~0x500058>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xa0]>', '<mov~~rdi, qword ptr [rsp + 0x168]>', '<mov~~ecx, dword ptr [rsp + 0x9c]>', '<mov~~ecx, ecx>', '<add~~rdi, 0x2ae12>', '<shl~~rcx, 1>', '<add~~rdi, rcx>', '<add~~rdi, 2>', '<lea~~rsi, [rsp + 0x17a]>', '<add~~rsi, 2>', '<add~~eax, -1>', '<mov~~eax, eax>', '<mov~~edx, eax>', '<shl~~rdx, 1>', '<call~~0x500058>']}, {'block_Idx': 27, 'blockInsts': ['<movss~~xmm1, dword ptr [rsp + 0x13c]>', '<mov~~ax, word ptr [rsp + 0x5e]>', '<mov~~rdx, qword ptr [rsp + 0x60]>', '<mov~~rcx, qword ptr [rsp + 0x68]>', '<mov~~esi, dword ptr [rsp + 0x74]>', '<mov~~dword ptr [rsp + 0x34], esi>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~qword ptr [rsp + 0x40], rdx>', '<mov~~word ptr [rsp + 0x4a], ax>', '<movzx~~ecx, word ptr [rcx]>', '<mov~~dx, cx>', '<mov~~word ptr [rsp + 0x4c], dx>', '<cvtsi2ss~~xmm0, ecx>', '<movzx~~eax, ax>', '<cvtsi2ss~~xmm2, eax>', '<mulss~~xmm1, xmm2>', '<ucomiss~~xmm0, xmm1>', '<jb~~0x41149e>']}, {'block_Idx': 20, 'blockInsts': ['<add~~rsp, 0x188>', '<ret~~>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x88]>', '<mov~~eax, dword ptr [rsp + 0xa4]>', '<mov~~ecx, dword ptr [rsp + 0xa8]>', '<add~~eax, ecx>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<mov~~edx, 2>', '<lea~~rcx, [rip + 0x2af]>', '<call~~0x500048>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~dx, word ptr [rsp + 0x4a]>', '<mov~~rsi, qword ptr [rsp + 0x80]>', '<mov~~ecx, dword ptr [rsp + 0x34]>', '<add~~ecx, -1>', '<mov~~dword ptr [rsi], ecx>', '<mov~~word ptr [rsp + 0x22], dx>', '<mov~~dword ptr [rsp + 0x24], ecx>', '<mov~~qword ptr [rsp + 0x28], rax>', '<jmp~~0x4115b6>']}], 'cfg_edge_info': [(12, 16), (4, 6), (34, 25), (29, 32), (0, 2), (10, 6), (8, 12), (28, 30), (27, 22), (30, 27), (32, 24), (7, 10), (15, 17), (18, 22), (26, 29), (21, 24), (22, 25), (8, 11), (0, 1), (2, 4), (27, 21), (17, 20), (30, 17), (15, 18), (33, 28), (32, 26), (16, 15), (7, 6), (24, 25), (25, 27), (33, 34), (18, 21), (26, 28), (4, 7), (21, 23), (3, 8), (9, 3), (9, 9), (31, 33), (23, 26), (2, 3), (10, 10), (11, 15), (28, 31), (25, 17), (6, 3), (6, 9)], 'cdg_edge_info': [(0, 2), (8, 12), (0, 8), (27, 22), (28, 30), (0, 17), (28, 33), (0, 20), (30, 27), (32, 24), (7, 10), (26, 32), (18, 22), (21, 24), (8, 11), (0, 1), (2, 4), (27, 21), (33, 28), (32, 26), (15, 18), (33, 34), (18, 21), (26, 28), (4, 7), (21, 26), (9, 9), (0, 3), (8, 16), (10, 10), (2, 6), (0, 15), (6, 9)], 'ddg_edge_info': [(24, 30), (0, 30), (16, 20), (16, 26), (15, 24), (2, 27), (4, 9), (12, 16), (16, 32), (4, 6), (3, 16), (18, 32), (0, 2), (10, 6), (8, 12), (10, 9), (8, 15), (27, 22), (27, 28), (2, 8), (28, 33), (30, 27), (27, 34), (2, 26), (7, 10), (16, 22), (16, 28), (26, 32), (16, 34), (3, 12), (6, 9), (3, 15), (34, 30), (0, 1), (0, 7), (2, 4), (27, 21), (0, 4), (0, 10), (2, 7), (27, 24), (27, 30), (2, 16), (1, 20), (33, 28), (32, 26), (16, 15), (2, 28), (16, 21), (16, 18), (16, 24), (18, 21), (26, 28), (16, 30), (16, 27), (16, 33), (4, 7), (18, 27), (18, 33), (15, 34), (3, 8), (21, 26), (22, 30), (0, 3), (0, 9), (8, 16), (0, 6), (0, 12), (2, 3), (27, 26), (0, 15), (2, 18), (2, 15), (15, 18)]}]}
{'sbr_make_f_tablelim': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 8, 'instruction': 'addl\t$-1, %ecx'}, {'instIndex': 9, 'instruction': 'movl\t%ecx, %ecx'}, {'instIndex': 10, 'instruction': 'movl\t%ecx, %edx'}, {'instIndex': 11, 'instruction': 'leaq\tsbr_make_f_tablelim.bands_warped(%rip), %rcx'}, {'instIndex': 12, 'instruction': 'movss\t(%rcx,%rdx,4), %xmm0            # xmm0 = mem[0],zero,zero,zero'}, {'instIndex': 13, 'instruction': 'movss\t%xmm0, 0x13c(%rsp)                # 4-byte Spill'}, {'instIndex': 14, 'instruction': 'leaq\t0x17a(%rsp), %rcx'}, {'instIndex': 15, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 16, 'instruction': 'addq\t$0x2ae12, %rcx                   # imm = 0x2AE12'}, {'instIndex': 17, 'instruction': 'movq\t%rcx, 0x140(%rsp)                 # 8-byte Spill'}, {'instIndex': 18, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 19, 'instruction': 'addq\t$0x2ae12, %rcx                   # imm = 0x2AE12'}, {'instIndex': 20, 'instruction': 'addq\t$2, %rcx'}, {'instIndex': 21, 'instruction': 'movq\t%rcx, 0x148(%rsp)                 # 8-byte Spill'}, {'instIndex': 22, 'instruction': 'movl\t0x44(%rax), %ecx'}, {'instIndex': 24, 'instruction': 'movw\t%cx, 0x17a(%rsp)'}]}]}
The case of compiler clang with optimization O3.
Patched source code file: aacsbr.c
Patched function: 1---static void sbr_make_f_tablelim 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_after/O3/aacsbr.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_after/O3/aacsbr.s---sbr_make_f_tablelim---after
function id: 6
function flag: True
There are 383 instructions for function: sbr_make_f_tablelim in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '174', 'end': 180}, 'before': {'start': '174', 'end': 180}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 8, 'instruction': 'addl\t$-1, %ecx'}, {'instIndex': 9, 'instruction': 'movl\t%ecx, %ecx'}, {'instIndex': 10, 'instruction': 'movl\t%ecx, %edx'}, {'instIndex': 11, 'instruction': 'leaq\tsbr_make_f_tablelim.bands_warped(%rip), %rcx'}, {'instIndex': 12, 'instruction': 'movss\t(%rcx,%rdx,4), %xmm0            # xmm0 = mem[0],zero,zero,zero'}, {'instIndex': 13, 'instruction': 'movss\t%xmm0, 0x18c(%rsp)                # 4-byte Spill'}, {'instIndex': 14, 'instruction': 'leaq\t0x1ca(%rsp), %rcx'}, {'instIndex': 15, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 16, 'instruction': 'addq\t$0x2ae12, %rcx                   # imm = 0x2AE12'}, {'instIndex': 17, 'instruction': 'movq\t%rcx, 0x190(%rsp)                 # 8-byte Spill'}, {'instIndex': 18, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 19, 'instruction': 'addq\t$0x2ae12, %rcx                   # imm = 0x2AE12'}, {'instIndex': 20, 'instruction': 'addq\t$2, %rcx'}, {'instIndex': 21, 'instruction': 'movq\t%rcx, 0x198(%rsp)                 # 8-byte Spill'}, {'instIndex': 22, 'instruction': 'movl\t0x44(%rax), %ecx'}, {'instIndex': 24, 'instruction': 'movw\t%cx, 0x1ca(%rsp)'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_after/O3/aacsbr.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_after/O3/aacsbr.o---after
The extraction of function: sbr_make_f_tablelim
Analyzing the binaries to generate subCFGs from patched function ...
It has 1137 nodes and 2053 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 383 instructions in binary file.
[4270226]
The execution time of patched subCFG information extraction via angr: 0:00:01.584078
{'sbr_make_f_tablelim': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412b58>, <DisassemblerInsn "mov" for 0x412b60>, <DisassemblerInsn "mov" for 0x412b68>, <DisassemblerInsn "mov" for 0x412b70>, <DisassemblerInsn "add" for 0x412b73>, <DisassemblerInsn "mov" for 0x412b7a>, <DisassemblerInsn "add" for 0x412b7d>, <DisassemblerInsn "mov" for 0x412b84>, <DisassemblerInsn "mov" for 0x412b8c>, <DisassemblerInsn "mov" for 0x412b92>, <DisassemblerInsn "add" for 0x412b99>, <DisassemblerInsn "mov" for 0x412b9c>, <DisassemblerInsn "mov" for 0x412b9e>, <DisassemblerInsn "shl" for 0x412ba0>, <DisassemblerInsn "call" for 0x412ba3>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412928>, <DisassemblerInsn "mov" for 0x412930>, <DisassemblerInsn "add" for 0x412937>, <DisassemblerInsn "mov" for 0x41293a>, <DisassemblerInsn "mov" for 0x41293c>, <DisassemblerInsn "mov" for 0x41293e>, <DisassemblerInsn "add" for 0x412941>, <DisassemblerInsn "mov" for 0x412945>, <DisassemblerInsn "add" for 0x41294d>, <DisassemblerInsn "and" for 0x412951>, <DisassemblerInsn "mov" for 0x412955>, <DisassemblerInsn "mov" for 0x41295d>, <DisassemblerInsn "cmp" for 0x412962>, <DisassemblerInsn "mov" for 0x412966>, <DisassemblerInsn "mov" for 0x41296e>, <DisassemblerInsn "jb" for 0x412976>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x412870>, <DisassemblerInsn "mov" for 0x412877>, <DisassemblerInsn "mov" for 0x41287f>, <DisassemblerInsn "mov" for 0x412882>, <DisassemblerInsn "cmp" for 0x412889>, <DisassemblerInsn "je" for 0x41288c>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412892>, <DisassemblerInsn "mov" for 0x41289a>, <DisassemblerInsn "add" for 0x4128a1>, <DisassemblerInsn "mov" for 0x4128a4>, <DisassemblerInsn "mov" for 0x4128a6>, <DisassemblerInsn "lea" for 0x4128a8>, <DisassemblerInsn "movss" for 0x4128af>, <DisassemblerInsn "movss" for 0x4128b4>, <DisassemblerInsn "lea" for 0x4128bd>, <DisassemblerInsn "mov" for 0x4128c5>, <DisassemblerInsn "add" for 0x4128c8>, <DisassemblerInsn "mov" for 0x4128cf>, <DisassemblerInsn "mov" for 0x4128d7>, <DisassemblerInsn "add" for 0x4128da>, <DisassemblerInsn "add" for 0x4128e1>, <DisassemblerInsn "mov" for 0x4128e5>, <DisassemblerInsn "mov" for 0x4128ed>, <DisassemblerInsn "mov" for 0x4128f0>, <DisassemblerInsn "mov" for 0x4128f8>, <DisassemblerInsn "mov" for 0x412900>, <DisassemblerInsn "add" for 0x412903>, <DisassemblerInsn "mov" for 0x41290a>, <DisassemblerInsn "mov" for 0x412912>, <DisassemblerInsn "mov" for 0x412918>, <DisassemblerInsn "cmp" for 0x41291f>, <DisassemblerInsn "je" for 0x412922>]'}], 'cfg_block_detailed_info': [{'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b8]>', '<mov~~rdi, qword ptr [rsp + 0x190]>', '<mov~~qword ptr [rsp + 0xd8], rdi>', '<mov~~rsi, rax>', '<add~~rsi, 0x2ad72>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ad00>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<mov~~eax, dword ptr [rax + 0x2ad00]>', '<mov~~dword ptr [rsp + 0xec], eax>', '<add~~eax, 1>', '<mov~~eax, eax>', '<mov~~edx, eax>', '<shl~~rdx, 1>', '<call~~0x500058>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~cx, word ptr [rsp + 0x1a6]>', '<mov~~eax, dword ptr [rsp + 0x1b4]>', '<add~~eax, 1>', '<mov~~eax, eax>', '<mov~~edx, eax>', '<mov~~rax, rdx>', '<add~~rax, -1>', '<mov~~qword ptr [rsp + 0x168], rax>', '<add~~rdx, -2>', '<and~~rax, 3>', '<mov~~qword ptr [rsp + 0x170], rax>', '<mov~~eax, 1>', '<cmp~~rdx, 3>', '<mov~~word ptr [rsp + 0x17e], cx>', '<mov~~qword ptr [rsp + 0x180], rax>', '<jb~~0x412aa8>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x1d8>', '<mov~~qword ptr [rsp + 0x1b8], rdi>', '<mov~~eax, dword ptr [rdi + 0x18]>', '<mov~~dword ptr [rsp + 0x1c4], eax>', '<cmp~~eax, 0>', '<je~~0x41303f>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b8]>', '<mov~~ecx, dword ptr [rsp + 0x1c4]>', '<add~~ecx, -1>', '<mov~~ecx, ecx>', '<mov~~edx, ecx>', '<lea~~rcx, [rip + 0x444d]>', '<movss~~xmm0, dword ptr [rcx + rdx*4]>', '<movss~~dword ptr [rsp + 0x18c], xmm0>', '<lea~~rcx, [rsp + 0x1ca]>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ae12>', '<mov~~qword ptr [rsp + 0x190], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ae12>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x198], rcx>', '<mov~~ecx, dword ptr [rax + 0x44]>', '<mov~~word ptr [rsp + 0x1a6], cx>', '<mov~~word ptr [rsp + 0x1ca], cx>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ae4c>', '<mov~~qword ptr [rsp + 0x1a8], rcx>', '<mov~~eax, dword ptr [rax + 0x2ae4c]>', '<mov~~dword ptr [rsp + 0x1b4], eax>', '<cmp~~eax, 0>', '<je~~0x412b58>']}], 'cfg_edge_info': [(2, 3), (0, 2), (2, 4)]}]}
{'sbr_make_f_tablelim': [4270226]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_after/O3/aacsbr.o---after
The extraction of function: sbr_make_f_tablelim
[4270226]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 40 nodes and 63 edges in CFGEmulated.
It has 40 nodes and 51 edges in CDG.
It has 1400 nodes and 1760 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4270226]
{4271877, 4272017, 4270226, 4271127, 4271512, 4271782, 4270376, 4270760, 4271016, 4271914, 4271286, 4270519, 4271416, 4271161, 4272189, 4272191, 4272063, 4271556, 4271692, 4271826, 4271059, 4270936, 4271960, 4270816, 4271206, 4271850, 4270192, 4271600, 4271987, 4272244, 4270460}
[30, 4, 16, 32, 2, 15, 17, 37, 10, 18, 23, 0, 7, 21, 8, 20, 38, 29, 31, 35, 1, 26, 12, 25, 39, 28, 36, 6, 9, 34, 22, 33, 27, 24, 11, 3]
The execution time of patched slicing information extraction via angr: 0:00:11.613021
{'sbr_make_f_tablelim': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x412ee8>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412928>, <DisassemblerInsn "mov" for 0x412930>, <DisassemblerInsn "add" for 0x412937>, <DisassemblerInsn "mov" for 0x41293a>, <DisassemblerInsn "mov" for 0x41293c>, <DisassemblerInsn "mov" for 0x41293e>, <DisassemblerInsn "add" for 0x412941>, <DisassemblerInsn "mov" for 0x412945>, <DisassemblerInsn "add" for 0x41294d>, <DisassemblerInsn "and" for 0x412951>, <DisassemblerInsn "mov" for 0x412955>, <DisassemblerInsn "mov" for 0x41295d>, <DisassemblerInsn "cmp" for 0x412962>, <DisassemblerInsn "mov" for 0x412966>, <DisassemblerInsn "mov" for 0x41296e>, <DisassemblerInsn "jb" for 0x412976>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412c17>, <DisassemblerInsn "mov" for 0x412c1f>, <DisassemblerInsn "mov" for 0x412c27>, <DisassemblerInsn "mov" for 0x412c29>, <DisassemblerInsn "mov" for 0x412c2b>, <DisassemblerInsn "mov" for 0x412c32>, <DisassemblerInsn "mov" for 0x412c39>, <DisassemblerInsn "mov" for 0x412c41>, <DisassemblerInsn "mov" for 0x412c48>, <DisassemblerInsn "add" for 0x412c4f>, <DisassemblerInsn "mov" for 0x412c51>, <DisassemblerInsn "mov" for 0x412c53>, <DisassemblerInsn "mov" for 0x412c55>, <DisassemblerInsn "lea" for 0x412c5a>, <DisassemblerInsn "call" for 0x412c61>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412f05>, <DisassemblerInsn "mov" for 0x412f0a>, <DisassemblerInsn "mov" for 0x412f0f>, <DisassemblerInsn "mov" for 0x412f14>, <DisassemblerInsn "xor" for 0x412f1c>, <DisassemblerInsn "cmp" for 0x412f1e>, <DisassemblerInsn "mov" for 0x412f21>, <DisassemblerInsn "je" for 0x412f26>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412892>, <DisassemblerInsn "mov" for 0x41289a>, <DisassemblerInsn "add" for 0x4128a1>, <DisassemblerInsn "mov" for 0x4128a4>, <DisassemblerInsn "mov" for 0x4128a6>, <DisassemblerInsn "lea" for 0x4128a8>, <DisassemblerInsn "movss" for 0x4128af>, <DisassemblerInsn "movss" for 0x4128b4>, <DisassemblerInsn "lea" for 0x4128bd>, <DisassemblerInsn "mov" for 0x4128c5>, <DisassemblerInsn "add" for 0x4128c8>, <DisassemblerInsn "mov" for 0x4128cf>, <DisassemblerInsn "mov" for 0x4128d7>, <DisassemblerInsn "add" for 0x4128da>, <DisassemblerInsn "add" for 0x4128e1>, <DisassemblerInsn "mov" for 0x4128e5>, <DisassemblerInsn "mov" for 0x4128ed>, <DisassemblerInsn "mov" for 0x4128f0>, <DisassemblerInsn "mov" for 0x4128f8>, <DisassemblerInsn "mov" for 0x412900>, <DisassemblerInsn "add" for 0x412903>, <DisassemblerInsn "mov" for 0x41290a>, <DisassemblerInsn "mov" for 0x412912>, <DisassemblerInsn "mov" for 0x412918>, <DisassemblerInsn "cmp" for 0x41291f>, <DisassemblerInsn "je" for 0x412922>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412c66>, <DisassemblerInsn "mov" for 0x412c6e>, <DisassemblerInsn "mov" for 0x412c76>, <DisassemblerInsn "mov" for 0x412c7e>, <DisassemblerInsn "mov" for 0x412c80>, <DisassemblerInsn "mov" for 0x412c82>, <DisassemblerInsn "add" for 0x412c89>, <DisassemblerInsn "add" for 0x412c8c>, <DisassemblerInsn "mov" for 0x412c8e>, <DisassemblerInsn "mov" for 0x412c95>, <DisassemblerInsn "add" for 0x412c98>, <DisassemblerInsn "mov" for 0x412c9f>, <DisassemblerInsn "mov" for 0x412ca7>, <DisassemblerInsn "cmp" for 0x412cad>, <DisassemblerInsn "je" for 0x412cb0>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x41303d>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412eea>, <DisassemblerInsn "mov" for 0x412ef2>, <DisassemblerInsn "add" for 0x412ef7>, <DisassemblerInsn "cmp" for 0x412efb>, <DisassemblerInsn "mov" for 0x412efe>, <DisassemblerInsn "je" for 0x412f03>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4129b7>, <DisassemblerInsn "mov" for 0x4129bf>, <DisassemblerInsn "mov" for 0x4129c7>, <DisassemblerInsn "mov" for 0x4129cf>, <DisassemblerInsn "mov" for 0x4129d7>, <DisassemblerInsn "mov" for 0x4129df>, <DisassemblerInsn "movzx" for 0x4129e7>, <DisassemblerInsn "add" for 0x4129f0>, <DisassemblerInsn "mov" for 0x4129f4>, <DisassemblerInsn "mov" for 0x4129fc>, <DisassemblerInsn "movzx" for 0x412a04>, <DisassemblerInsn "add" for 0x412a0d>, <DisassemblerInsn "mov" for 0x412a11>, <DisassemblerInsn "mov" for 0x412a19>, <DisassemblerInsn "movzx" for 0x412a21>, <DisassemblerInsn "add" for 0x412a2a>, <DisassemblerInsn "mov" for 0x412a2e>, <DisassemblerInsn "mov" for 0x412a36>, <DisassemblerInsn "movzx" for 0x412a3e>, <DisassemblerInsn "add" for 0x412a46>, <DisassemblerInsn "mov" for 0x412a49>, <DisassemblerInsn "mov" for 0x412a51>, <DisassemblerInsn "add" for 0x412a59>, <DisassemblerInsn "mov" for 0x412a5d>, <DisassemblerInsn "add" for 0x412a65>, <DisassemblerInsn "mov" for 0x412a69>, <DisassemblerInsn "cmp" for 0x412a71>, <DisassemblerInsn "mov" for 0x412a74>, <DisassemblerInsn "mov" for 0x412a77>, <DisassemblerInsn "mov" for 0x412a7f>, <DisassemblerInsn "mov" for 0x412a82>, <DisassemblerInsn "mov" for 0x412a8a>, <DisassemblerInsn "mov" for 0x412a92>, <DisassemblerInsn "mov" for 0x412a9a>, <DisassemblerInsn "jne" for 0x412aa2>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412cb6>, <DisassemblerInsn "mov" for 0x412cbd>, <DisassemblerInsn "mov" for 0x412cc5>, <DisassemblerInsn "mov" for 0x412ccd>, <DisassemblerInsn "mov" for 0x412cd4>, <DisassemblerInsn "add" for 0x412cd6>, <DisassemblerInsn "mov" for 0x412cd9>, <DisassemblerInsn "mov" for 0x412cdb>, <DisassemblerInsn "mov" for 0x412ce3>, <DisassemblerInsn "cmp" for 0x412ce6>, <DisassemblerInsn "mov" for 0x412ce9>, <DisassemblerInsn "mov" for 0x412cec>, <DisassemblerInsn "mov" for 0x412cf4>, <DisassemblerInsn "mov" for 0x412cf7>, <DisassemblerInsn "mov" for 0x412cff>, <DisassemblerInsn "mov" for 0x412d02>, <DisassemblerInsn "mov" for 0x412d0a>, <DisassemblerInsn "mov" for 0x412d0c>, <DisassemblerInsn "mov" for 0x412d13>, <DisassemblerInsn "mov" for 0x412d1b>, <DisassemblerInsn "mov" for 0x412d23>, <DisassemblerInsn "mov" for 0x412d2b>, <DisassemblerInsn "jge" for 0x412d32>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412dc4>, <DisassemblerInsn "mov" for 0x412dc9>, <DisassemblerInsn "mov" for 0x412dd1>, <DisassemblerInsn "mov" for 0x412dd9>, <DisassemblerInsn "add" for 0x412ddd>, <DisassemblerInsn "mov" for 0x412de0>, <DisassemblerInsn "mov" for 0x412de2>, <DisassemblerInsn "mov" for 0x412de7>, <DisassemblerInsn "mov" for 0x412deb>, <DisassemblerInsn "mov" for 0x412df0>, <DisassemblerInsn "mov" for 0x412df8>, <DisassemblerInsn "mov" for 0x412dfd>, <DisassemblerInsn "mov" for 0x412e02>, <DisassemblerInsn "mov" for 0x412e06>, <DisassemblerInsn "add" for 0x412e0b>, <DisassemblerInsn "mov" for 0x412e0f>, <DisassemblerInsn "add" for 0x412e12>, <DisassemblerInsn "shl" for 0x412e19>, <DisassemblerInsn "add" for 0x412e1c>, <DisassemblerInsn "cmp" for 0x412e1f>, <DisassemblerInsn "mov" for 0x412e22>, <DisassemblerInsn "mov" for 0x412e2a>, <DisassemblerInsn "mov" for 0x412e32>, <DisassemblerInsn "mov" for 0x412e3a>, <DisassemblerInsn "jb" for 0x412e41>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x412870>, <DisassemblerInsn "mov" for 0x412877>, <DisassemblerInsn "mov" for 0x41287f>, <DisassemblerInsn "mov" for 0x412882>, <DisassemblerInsn "cmp" for 0x412889>, <DisassemblerInsn "je" for 0x41288c>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x41297c>, <DisassemblerInsn "mov" for 0x412984>, <DisassemblerInsn "and" for 0x41298c>, <DisassemblerInsn "mov" for 0x412990>, <DisassemblerInsn "mov" for 0x412998>, <DisassemblerInsn "xor" for 0x41299d>, <DisassemblerInsn "mov" for 0x41299f>, <DisassemblerInsn "mov" for 0x4129a7>, <DisassemblerInsn "mov" for 0x4129af>, <DisassemblerInsn "mov" for 0x4129b7>, <DisassemblerInsn "mov" for 0x4129bf>, <DisassemblerInsn "mov" for 0x4129c7>, <DisassemblerInsn "mov" for 0x4129cf>, <DisassemblerInsn "mov" for 0x4129d7>, <DisassemblerInsn "mov" for 0x4129df>, <DisassemblerInsn "movzx" for 0x4129e7>, <DisassemblerInsn "add" for 0x4129f0>, <DisassemblerInsn "mov" for 0x4129f4>, <DisassemblerInsn "mov" for 0x4129fc>, <DisassemblerInsn "movzx" for 0x412a04>, <DisassemblerInsn "add" for 0x412a0d>, <DisassemblerInsn "mov" for 0x412a11>, <DisassemblerInsn "mov" for 0x412a19>, <DisassemblerInsn "movzx" for 0x412a21>, <DisassemblerInsn "add" for 0x412a2a>, <DisassemblerInsn "mov" for 0x412a2e>, <DisassemblerInsn "mov" for 0x412a36>, <DisassemblerInsn "movzx" for 0x412a3e>, <DisassemblerInsn "add" for 0x412a46>, <DisassemblerInsn "mov" for 0x412a49>, <DisassemblerInsn "mov" for 0x412a51>, <DisassemblerInsn "add" for 0x412a59>, <DisassemblerInsn "mov" for 0x412a5d>, <DisassemblerInsn "add" for 0x412a65>, <DisassemblerInsn "mov" for 0x412a69>, <DisassemblerInsn "cmp" for 0x412a71>, <DisassemblerInsn "mov" for 0x412a74>, <DisassemblerInsn "mov" for 0x412a77>, <DisassemblerInsn "mov" for 0x412a7f>, <DisassemblerInsn "mov" for 0x412a82>, <DisassemblerInsn "mov" for 0x412a8a>, <DisassemblerInsn "mov" for 0x412a92>, <DisassemblerInsn "mov" for 0x412a9a>, <DisassemblerInsn "jne" for 0x412aa2>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "movss" for 0x412d38>, <DisassemblerInsn "mov" for 0x412d41>, <DisassemblerInsn "mov" for 0x412d49>, <DisassemblerInsn "mov" for 0x412d51>, <DisassemblerInsn "mov" for 0x412d59>, <DisassemblerInsn "mov" for 0x412d60>, <DisassemblerInsn "mov" for 0x412d64>, <DisassemblerInsn "mov" for 0x412d69>, <DisassemblerInsn "mov" for 0x412d6e>, <DisassemblerInsn "movzx" for 0x412d76>, <DisassemblerInsn "mov" for 0x412d79>, <DisassemblerInsn "mov" for 0x412d7c>, <DisassemblerInsn "cvtsi2ss" for 0x412d84>, <DisassemblerInsn "movzx" for 0x412d88>, <DisassemblerInsn "cvtsi2ss" for 0x412d8b>, <DisassemblerInsn "mulss" for 0x412d8f>, <DisassemblerInsn "ucomiss" for 0x412d93>, <DisassemblerInsn "jb" for 0x412d96>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412ba8>, <DisassemblerInsn "mov" for 0x412bb0>, <DisassemblerInsn "mov" for 0x412bb7>, <DisassemblerInsn "mov" for 0x412bb9>, <DisassemblerInsn "cmp" for 0x412bc0>, <DisassemblerInsn "mov" for 0x412bc3>, <DisassemblerInsn "mov" for 0x412bca>, <DisassemblerInsn "jbe" for 0x412bd1>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "add" for 0x413074>, <DisassemblerInsn "ret" for 0x41307b>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412f58>, <DisassemblerInsn "mov" for 0x412f60>, <DisassemblerInsn "add" for 0x412f65>, <DisassemblerInsn "cmp" for 0x412f69>, <DisassemblerInsn "mov" for 0x412f6c>, <DisassemblerInsn "je" for 0x412f71>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412f2a>, <DisassemblerInsn "mov" for 0x412f2f>, <DisassemblerInsn "mov" for 0x412f34>, <DisassemblerInsn "mov" for 0x412f3c>, <DisassemblerInsn "add" for 0x412f40>, <DisassemblerInsn "mov" for 0x412f43>, <DisassemblerInsn "mov" for 0x412f45>, <DisassemblerInsn "mov" for 0x412f4a>, <DisassemblerInsn "mov" for 0x412f4e>, <DisassemblerInsn "jmp" for 0x412f53>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412fe6>, <DisassemblerInsn "mov" for 0x412fee>, <DisassemblerInsn "mov" for 0x412ff3>, <DisassemblerInsn "mov" for 0x412ff8>, <DisassemblerInsn "mov" for 0x412ffc>, <DisassemblerInsn "add" for 0x413001>, <DisassemblerInsn "mov" for 0x413005>, <DisassemblerInsn "add" for 0x413008>, <DisassemblerInsn "shl" for 0x41300f>, <DisassemblerInsn "add" for 0x413012>, <DisassemblerInsn "cmp" for 0x413015>, <DisassemblerInsn "mov" for 0x413018>, <DisassemblerInsn "mov" for 0x413020>, <DisassemblerInsn "mov" for 0x413028>, <DisassemblerInsn "mov" for 0x413030>, <DisassemblerInsn "jb" for 0x413037>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412fbf>, <DisassemblerInsn "mov" for 0x412fc3>, <DisassemblerInsn "mov" for 0x412fc8>, <DisassemblerInsn "mov" for 0x412fcd>, <DisassemblerInsn "add" for 0x412fd0>, <DisassemblerInsn "mov" for 0x412fd4>, <DisassemblerInsn "mov" for 0x412fd8>, <DisassemblerInsn "mov" for 0x412fdd>, <DisassemblerInsn "mov" for 0x412fe1>, <DisassemblerInsn "mov" for 0x412fe6>, <DisassemblerInsn "mov" for 0x412fee>, <DisassemblerInsn "mov" for 0x412ff3>, <DisassemblerInsn "mov" for 0x412ff8>, <DisassemblerInsn "mov" for 0x412ffc>, <DisassemblerInsn "add" for 0x413001>, <DisassemblerInsn "mov" for 0x413005>, <DisassemblerInsn "add" for 0x413008>, <DisassemblerInsn "shl" for 0x41300f>, <DisassemblerInsn "add" for 0x413012>, <DisassemblerInsn "cmp" for 0x413015>, <DisassemblerInsn "mov" for 0x413018>, <DisassemblerInsn "mov" for 0x413020>, <DisassemblerInsn "mov" for 0x413028>, <DisassemblerInsn "mov" for 0x413030>, <DisassemblerInsn "jb" for 0x413037>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x41303f>, <DisassemblerInsn "mov" for 0x413047>, <DisassemblerInsn "mov" for 0x41304e>, <DisassemblerInsn "mov" for 0x413055>, <DisassemblerInsn "mov" for 0x41305b>, <DisassemblerInsn "mov" for 0x413063>, <DisassemblerInsn "mov" for 0x41306a>, <DisassemblerInsn "add" for 0x413074>, <DisassemblerInsn "ret" for 0x41307b>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412ea6>, <DisassemblerInsn "mov" for 0x412eaa>, <DisassemblerInsn "mov" for 0x412eaf>, <DisassemblerInsn "mov" for 0x412eb4>, <DisassemblerInsn "add" for 0x412eb7>, <DisassemblerInsn "mov" for 0x412ebb>, <DisassemblerInsn "mov" for 0x412ebf>, <DisassemblerInsn "mov" for 0x412ec4>, <DisassemblerInsn "mov" for 0x412ec8>, <DisassemblerInsn "jmp" for 0x412ecd>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412bd3>, <DisassemblerInsn "mov" for 0x412bda>, <DisassemblerInsn "mov" for 0x412be2>, <DisassemblerInsn "mov" for 0x412be9>, <DisassemblerInsn "add" for 0x412beb>, <DisassemblerInsn "shl" for 0x412bf2>, <DisassemblerInsn "add" for 0x412bf5>, <DisassemblerInsn "add" for 0x412bf8>, <DisassemblerInsn "lea" for 0x412bfc>, <DisassemblerInsn "add" for 0x412c04>, <DisassemblerInsn "add" for 0x412c08>, <DisassemblerInsn "mov" for 0x412c0b>, <DisassemblerInsn "mov" for 0x412c0d>, <DisassemblerInsn "shl" for 0x412c0f>, <DisassemblerInsn "call" for 0x412c12>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412ed2>, <DisassemblerInsn "mov" for 0x412ed7>, <DisassemblerInsn "xor" for 0x412edc>, <DisassemblerInsn "cmp" for 0x412ede>, <DisassemblerInsn "mov" for 0x412ee1>, <DisassemblerInsn "je" for 0x412ee6>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412f91>, <DisassemblerInsn "mov" for 0x412f96>, <DisassemblerInsn "mov" for 0x412f9b>, <DisassemblerInsn "mov" for 0x412fa3>, <DisassemblerInsn "mov" for 0x412fa7>, <DisassemblerInsn "add" for 0x412faa>, <DisassemblerInsn "mov" for 0x412fad>, <DisassemblerInsn "mov" for 0x412faf>, <DisassemblerInsn "mov" for 0x412fb4>, <DisassemblerInsn "mov" for 0x412fb8>, <DisassemblerInsn "jmp" for 0x412fbd>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412df0>, <DisassemblerInsn "mov" for 0x412df8>, <DisassemblerInsn "mov" for 0x412dfd>, <DisassemblerInsn "mov" for 0x412e02>, <DisassemblerInsn "mov" for 0x412e06>, <DisassemblerInsn "add" for 0x412e0b>, <DisassemblerInsn "mov" for 0x412e0f>, <DisassemblerInsn "add" for 0x412e12>, <DisassemblerInsn "shl" for 0x412e19>, <DisassemblerInsn "add" for 0x412e1c>, <DisassemblerInsn "cmp" for 0x412e1f>, <DisassemblerInsn "mov" for 0x412e22>, <DisassemblerInsn "mov" for 0x412e2a>, <DisassemblerInsn "mov" for 0x412e32>, <DisassemblerInsn "mov" for 0x412e3a>, <DisassemblerInsn "jb" for 0x412e41>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x412f8f>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412aa8>, <DisassemblerInsn "mov" for 0x412ab0>, <DisassemblerInsn "mov" for 0x412ab8>, <DisassemblerInsn "xor" for 0x412ac0>, <DisassemblerInsn "cmp" for 0x412ac2>, <DisassemblerInsn "mov" for 0x412ac6>, <DisassemblerInsn "mov" for 0x412ace>, <DisassemblerInsn "mov" for 0x412ad6>, <DisassemblerInsn "je" for 0x412ade>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412ae0>, <DisassemblerInsn "mov" for 0x412ae8>, <DisassemblerInsn "mov" for 0x412af0>, <DisassemblerInsn "mov" for 0x412af8>, <DisassemblerInsn "mov" for 0x412b00>, <DisassemblerInsn "movzx" for 0x412b08>, <DisassemblerInsn "add" for 0x412b10>, <DisassemblerInsn "mov" for 0x412b13>, <DisassemblerInsn "mov" for 0x412b1b>, <DisassemblerInsn "add" for 0x412b23>, <DisassemblerInsn "mov" for 0x412b27>, <DisassemblerInsn "add" for 0x412b2f>, <DisassemblerInsn "mov" for 0x412b33>, <DisassemblerInsn "cmp" for 0x412b3b>, <DisassemblerInsn "mov" for 0x412b3e>, <DisassemblerInsn "mov" for 0x412b46>, <DisassemblerInsn "mov" for 0x412b4e>, <DisassemblerInsn "jne" for 0x412b56>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x412f28>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "movss" for 0x412e4c>, <DisassemblerInsn "mov" for 0x412e55>, <DisassemblerInsn "mov" for 0x412e5d>, <DisassemblerInsn "mov" for 0x412e65>, <DisassemblerInsn "mov" for 0x412e6d>, <DisassemblerInsn "mov" for 0x412e74>, <DisassemblerInsn "mov" for 0x412e78>, <DisassemblerInsn "mov" for 0x412e7d>, <DisassemblerInsn "mov" for 0x412e82>, <DisassemblerInsn "movzx" for 0x412e87>, <DisassemblerInsn "mov" for 0x412e8a>, <DisassemblerInsn "mov" for 0x412e8d>, <DisassemblerInsn "cvtsi2ss" for 0x412e92>, <DisassemblerInsn "movzx" for 0x412e96>, <DisassemblerInsn "cvtsi2ss" for 0x412e99>, <DisassemblerInsn "mulss" for 0x412e9d>, <DisassemblerInsn "ucomiss" for 0x412ea1>, <DisassemblerInsn "jb" for 0x412ea4>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412f73>, <DisassemblerInsn "mov" for 0x412f78>, <DisassemblerInsn "mov" for 0x412f7d>, <DisassemblerInsn "mov" for 0x412f82>, <DisassemblerInsn "cmp" for 0x412f8a>, <DisassemblerInsn "je" for 0x412f8d>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x412e47>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412d98>, <DisassemblerInsn "mov" for 0x412d9c>, <DisassemblerInsn "mov" for 0x412da4>, <DisassemblerInsn "mov" for 0x412da9>, <DisassemblerInsn "add" for 0x412dac>, <DisassemblerInsn "mov" for 0x412db0>, <DisassemblerInsn "mov" for 0x412db4>, <DisassemblerInsn "mov" for 0x412db9>, <DisassemblerInsn "mov" for 0x412dbd>, <DisassemblerInsn "jmp" for 0x412dc2>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412c39>, <DisassemblerInsn "mov" for 0x412c41>, <DisassemblerInsn "mov" for 0x412c48>, <DisassemblerInsn "add" for 0x412c4f>, <DisassemblerInsn "mov" for 0x412c51>, <DisassemblerInsn "mov" for 0x412c53>, <DisassemblerInsn "mov" for 0x412c55>, <DisassemblerInsn "lea" for 0x412c5a>, <DisassemblerInsn "call" for 0x412c61>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412b58>, <DisassemblerInsn "mov" for 0x412b60>, <DisassemblerInsn "mov" for 0x412b68>, <DisassemblerInsn "mov" for 0x412b70>, <DisassemblerInsn "add" for 0x412b73>, <DisassemblerInsn "mov" for 0x412b7a>, <DisassemblerInsn "add" for 0x412b7d>, <DisassemblerInsn "mov" for 0x412b84>, <DisassemblerInsn "mov" for 0x412b8c>, <DisassemblerInsn "mov" for 0x412b92>, <DisassemblerInsn "add" for 0x412b99>, <DisassemblerInsn "mov" for 0x412b9c>, <DisassemblerInsn "mov" for 0x412b9e>, <DisassemblerInsn "shl" for 0x412ba0>, <DisassemblerInsn "call" for 0x412ba3>]'}], 'cfg_block_detailed_info': [{'block_Idx': 30, 'blockInsts': ['<jmp~~0x412f05>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~cx, word ptr [rsp + 0x1a6]>', '<mov~~eax, dword ptr [rsp + 0x1b4]>', '<add~~eax, 1>', '<mov~~eax, eax>', '<mov~~edx, eax>', '<mov~~rax, rdx>', '<add~~rax, -1>', '<mov~~qword ptr [rsp + 0x168], rax>', '<add~~rdx, -2>', '<and~~rax, 3>', '<mov~~qword ptr [rsp + 0x170], rax>', '<mov~~eax, 1>', '<cmp~~rdx, 3>', '<mov~~word ptr [rsp + 0x17e], cx>', '<mov~~qword ptr [rsp + 0x180], rax>', '<jb~~0x412aa8>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a8]>', '<mov~~rcx, qword ptr [rsp + 0xe0]>', '<mov~~eax, dword ptr [rax]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0xf4], ecx>', '<mov~~dword ptr [rsp + 0xf8], eax>', '<mov~~rdi, qword ptr [rsp + 0xd8]>', '<mov~~eax, dword ptr [rsp + 0xf4]>', '<mov~~ecx, dword ptr [rsp + 0xf8]>', '<add~~eax, ecx>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<mov~~edx, 2>', '<lea~~rcx, [rip + 0x41f]>', '<call~~0x500048>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~dx, word ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~cx, word ptr [rsp + rax*2 + 0x1ca]>', '<xor~~eax, eax>', '<cmp~~cx, dx>', '<mov~~qword ptr [rsp + 0x10], rax>', '<je~~0x412f73>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b8]>', '<mov~~ecx, dword ptr [rsp + 0x1c4]>', '<add~~ecx, -1>', '<mov~~ecx, ecx>', '<mov~~edx, ecx>', '<lea~~rcx, [rip + 0x444d]>', '<movss~~xmm0, dword ptr [rcx + rdx*4]>', '<movss~~dword ptr [rsp + 0x18c], xmm0>', '<lea~~rcx, [rsp + 0x1ca]>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ae12>', '<mov~~qword ptr [rsp + 0x190], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ae12>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x198], rcx>', '<mov~~ecx, dword ptr [rax + 0x44]>', '<mov~~word ptr [rsp + 0x1a6], cx>', '<mov~~word ptr [rsp + 0x1ca], cx>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ae4c>', '<mov~~qword ptr [rsp + 0x1a8], rcx>', '<mov~~eax, dword ptr [rax + 0x2ae4c]>', '<mov~~dword ptr [rsp + 0x1b4], eax>', '<cmp~~eax, 0>', '<je~~0x412b58>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe0]>', '<mov~~rdx, qword ptr [rsp + 0x1a8]>', '<mov~~rcx, qword ptr [rsp + 0x1b8]>', '<mov~~eax, dword ptr [rax]>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0xc8], edx>', '<add~~eax, -1>', '<add~~eax, edx>', '<mov~~dword ptr [rsp + 0xcc], eax>', '<mov~~rdx, rcx>', '<add~~rdx, 0x2ad0c>', '<mov~~qword ptr [rsp + 0xd0], rdx>', '<mov~~dword ptr [rcx + 0x2ad0c], eax>', '<cmp~~eax, 0>', '<je~~0x41303d>']}, {'block_Idx': 17, 'blockInsts': ['<jmp~~0x413074>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x88]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<add~~rax, 1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x20], rax>', '<je~~0x412f2a>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x160]>', '<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~cx, word ptr [rsp + 0x156]>', '<mov~~rsi, qword ptr [rsp + 0x148]>', '<mov~~rdi, qword ptr [rsp + 0x1b8]>', '<mov~~qword ptr [rsp + 0x128], rax>', '<movzx~~r8d, byte ptr [rdi + rax + 0x2ae4f]>', '<add~~cx, r8w>', '<mov~~word ptr [rsp + 0x130], cx>', '<mov~~word ptr [rsp + rax*2 + 0x1ca], cx>', '<movzx~~r8d, byte ptr [rdi + rax + 0x2ae50]>', '<add~~cx, r8w>', '<mov~~word ptr [rsp + 0x132], cx>', '<mov~~word ptr [rsp + rax*2 + 0x1cc], cx>', '<movzx~~r8d, byte ptr [rdi + rax + 0x2ae51]>', '<add~~cx, r8w>', '<mov~~word ptr [rsp + 0x134], cx>', '<mov~~word ptr [rsp + rax*2 + 0x1ce], cx>', '<movzx~~edi, byte ptr [rdi + rax + 0x2ae52]>', '<add~~cx, di>', '<mov~~word ptr [rsp + 0x136], cx>', '<mov~~word ptr [rsp + rax*2 + 0x1d0], cx>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x138], rax>', '<add~~rdx, 4>', '<mov~~qword ptr [rsp + 0x140], rdx>', '<cmp~~rdx, rsi>', '<mov~~si, cx>', '<mov~~word ptr [rsp + 0x156], si>', '<mov~~rsi, rax>', '<mov~~qword ptr [rsp + 0x158], rsi>', '<mov~~qword ptr [rsp + 0x160], rdx>', '<mov~~word ptr [rsp + 0x17e], cx>', '<mov~~qword ptr [rsp + 0x180], rax>', '<jne~~0x4129b7>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xcc]>', '<mov~~rcx, qword ptr [rsp + 0x198]>', '<mov~~rdx, qword ptr [rsp + 0x190]>', '<mov~~edi, dword ptr [rsp + 0xc8]>', '<mov~~esi, edi>', '<add~~esi, 1>', '<mov~~esi, esi>', '<mov~~qword ptr [rsp + 0x88], rsi>', '<mov~~si, word ptr [rdx]>', '<cmp~~edi, 0>', '<mov~~di, si>', '<mov~~word ptr [rsp + 0x96], di>', '<mov~~rdi, rdx>', '<mov~~qword ptr [rsp + 0x98], rdi>', '<mov~~rdi, rcx>', '<mov~~qword ptr [rsp + 0xa0], rdi>', '<mov~~edi, eax>', '<mov~~dword ptr [rsp + 0xa8], edi>', '<mov~~word ptr [rsp + 0xae], si>', '<mov~~qword ptr [rsp + 0xb0], rdx>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<mov~~dword ptr [rsp + 0xc4], eax>', '<jge~~0x412e4c>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x78]>', '<mov~~dx, word ptr [rsp + 0x84]>', '<mov~~rsi, qword ptr [rsp + 0xd0]>', '<mov~~ecx, dword ptr [rsp + 0x6c]>', '<add~~ecx, -1>', '<mov~~dword ptr [rsi], ecx>', '<mov~~word ptr [rsp + 0x5a], dx>', '<mov~~dword ptr [rsp + 0x5c], ecx>', '<mov~~qword ptr [rsp + 0x60], rax>', '<mov~~rdi, qword ptr [rsp + 0x1b8]>', '<mov~~rcx, qword ptr [rsp + 0x70]>', '<mov~~si, word ptr [rsp + 0x5a]>', '<mov~~eax, dword ptr [rsp + 0x5c]>', '<mov~~rdx, qword ptr [rsp + 0x60]>', '<add~~rcx, 2>', '<mov~~r8d, eax>', '<add~~rdi, 0x2ae12>', '<shl~~r8, 1>', '<add~~rdi, r8>', '<cmp~~rdx, rdi>', '<mov~~word ptr [rsp + 0x96], si>', '<mov~~qword ptr [rsp + 0x98], rdx>', '<mov~~qword ptr [rsp + 0xa0], rcx>', '<mov~~dword ptr [rsp + 0xa8], eax>', '<jb~~0x412d38>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x1d8>', '<mov~~qword ptr [rsp + 0x1b8], rdi>', '<mov~~eax, dword ptr [rdi + 0x18]>', '<mov~~dword ptr [rsp + 0x1c4], eax>', '<cmp~~eax, 0>', '<je~~0x41303f>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~dx, word ptr [rsp + 0x1a6]>', '<mov~~rax, qword ptr [rsp + 0x168]>', '<and~~rax, 0xfffffffffffffffc>', '<mov~~qword ptr [rsp + 0x148], rax>', '<mov~~ecx, 1>', '<xor~~eax, eax>', '<mov~~word ptr [rsp + 0x156], dx>', '<mov~~qword ptr [rsp + 0x158], rcx>', '<mov~~qword ptr [rsp + 0x160], rax>', '<mov~~rdx, qword ptr [rsp + 0x160]>', '<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~cx, word ptr [rsp + 0x156]>', '<mov~~rsi, qword ptr [rsp + 0x148]>', '<mov~~rdi, qword ptr [rsp + 0x1b8]>', '<mov~~qword ptr [rsp + 0x128], rax>', '<movzx~~r8d, byte ptr [rdi + rax + 0x2ae4f]>', '<add~~cx, r8w>', '<mov~~word ptr [rsp + 0x130], cx>', '<mov~~word ptr [rsp + rax*2 + 0x1ca], cx>', '<movzx~~r8d, byte ptr [rdi + rax + 0x2ae50]>', '<add~~cx, r8w>', '<mov~~word ptr [rsp + 0x132], cx>', '<mov~~word ptr [rsp + rax*2 + 0x1cc], cx>', '<movzx~~r8d, byte ptr [rdi + rax + 0x2ae51]>', '<add~~cx, r8w>', '<mov~~word ptr [rsp + 0x134], cx>', '<mov~~word ptr [rsp + rax*2 + 0x1ce], cx>', '<movzx~~edi, byte ptr [rdi + rax + 0x2ae52]>', '<add~~cx, di>', '<mov~~word ptr [rsp + 0x136], cx>', '<mov~~word ptr [rsp + rax*2 + 0x1d0], cx>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x138], rax>', '<add~~rdx, 4>', '<mov~~qword ptr [rsp + 0x140], rdx>', '<cmp~~rdx, rsi>', '<mov~~si, cx>', '<mov~~word ptr [rsp + 0x156], si>', '<mov~~rsi, rax>', '<mov~~qword ptr [rsp + 0x158], rsi>', '<mov~~qword ptr [rsp + 0x160], rdx>', '<mov~~word ptr [rsp + 0x17e], cx>', '<mov~~qword ptr [rsp + 0x180], rax>', '<jne~~0x4129b7>']}, {'block_Idx': 21, 'blockInsts': ['<movss~~xmm1, dword ptr [rsp + 0x18c]>', '<mov~~ax, word ptr [rsp + 0x96]>', '<mov~~rdx, qword ptr [rsp + 0x98]>', '<mov~~rcx, qword ptr [rsp + 0xa0]>', '<mov~~esi, dword ptr [rsp + 0xa8]>', '<mov~~dword ptr [rsp + 0x6c], esi>', '<mov~~qword ptr [rsp + 0x70], rcx>', '<mov~~qword ptr [rsp + 0x78], rdx>', '<mov~~word ptr [rsp + 0x84], ax>', '<movzx~~ecx, word ptr [rcx]>', '<mov~~dx, cx>', '<mov~~word ptr [rsp + 0x86], dx>', '<cvtsi2ss~~xmm0, ecx>', '<movzx~~eax, ax>', '<cvtsi2ss~~xmm2, eax>', '<mulss~~xmm1, xmm2>', '<ucomiss~~xmm0, xmm1>', '<jb~~0x412dc4>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a8]>', '<mov~~ecx, dword ptr [rsp + 0xec]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0xf0], eax>', '<cmp~~eax, 1>', '<mov~~dword ptr [rsp + 0xf4], ecx>', '<mov~~dword ptr [rsp + 0xf8], eax>', '<jbe~~0x412c39>']}, {'block_Idx': 20, 'blockInsts': ['<add~~rsp, 0x1d8>', '<ret~~>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x88]>', '<mov~~rax, qword ptr [rsp + 8]>', '<add~~rax, 1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x10], rax>', '<je~~0x412f91>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~dx, word ptr [rsp + 0x56]>', '<mov~~rsi, qword ptr [rsp + 0xd0]>', '<mov~~ecx, dword ptr [rsp + 0x3c]>', '<add~~ecx, -1>', '<mov~~dword ptr [rsi], ecx>', '<mov~~word ptr [rsp + 0x2a], dx>', '<mov~~dword ptr [rsp + 0x2c], ecx>', '<mov~~qword ptr [rsp + 0x30], rax>', '<jmp~~0x412fe6>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1b8]>', '<mov~~rcx, qword ptr [rsp + 0x40]>', '<mov~~si, word ptr [rsp + 0x2a]>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<add~~rcx, 2>', '<mov~~r8d, eax>', '<add~~rdi, 0x2ae12>', '<shl~~r8, 1>', '<add~~rdi, r8>', '<cmp~~rdx, rdi>', '<mov~~word ptr [rsp + 0xae], si>', '<mov~~qword ptr [rsp + 0xb0], rdx>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<mov~~dword ptr [rsp + 0xc4], eax>', '<jb~~0x412e4c>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x3c]>', '<mov~~dx, word ptr [rsp + 0x58]>', '<mov~~rsi, qword ptr [rsp + 0x48]>', '<mov~~rax, rsi>', '<add~~rax, 2>', '<mov~~word ptr [rsi + 2], dx>', '<mov~~word ptr [rsp + 0x2a], dx>', '<mov~~dword ptr [rsp + 0x2c], ecx>', '<mov~~qword ptr [rsp + 0x30], rax>', '<mov~~rdi, qword ptr [rsp + 0x1b8]>', '<mov~~rcx, qword ptr [rsp + 0x40]>', '<mov~~si, word ptr [rsp + 0x2a]>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<add~~rcx, 2>', '<mov~~r8d, eax>', '<add~~rdi, 0x2ae12>', '<shl~~r8, 1>', '<add~~rdi, r8>', '<cmp~~rdx, rdi>', '<mov~~word ptr [rsp + 0xae], si>', '<mov~~qword ptr [rsp + 0xb0], rdx>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<mov~~dword ptr [rsp + 0xc4], eax>', '<jb~~0x412e4c>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b8]>', '<mov~~cx, word ptr [rax + 0x2ad72]>', '<mov~~word ptr [rax + 0x2ae12], cx>', '<mov~~ecx, dword ptr [rax + 0x2ad00]>', '<mov~~cx, word ptr [rax + rcx*2 + 0x2ad72]>', '<mov~~word ptr [rax + 0x2ae14], cx>', '<mov~~dword ptr [rax + 0x2ad0c], 1>', '<add~~rsp, 0x1d8>', '<ret~~>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x3c]>', '<mov~~dx, word ptr [rsp + 0x58]>', '<mov~~rsi, qword ptr [rsp + 0x48]>', '<mov~~rax, rsi>', '<add~~rax, 2>', '<mov~~word ptr [rsi + 2], dx>', '<mov~~word ptr [rsp + 0x2a], dx>', '<mov~~dword ptr [rsp + 0x2c], ecx>', '<mov~~qword ptr [rsp + 0x30], rax>', '<jmp~~0x412fe6>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xf0]>', '<mov~~rdi, qword ptr [rsp + 0x1b8]>', '<mov~~ecx, dword ptr [rsp + 0xec]>', '<mov~~ecx, ecx>', '<add~~rdi, 0x2ae12>', '<shl~~rcx, 1>', '<add~~rdi, rcx>', '<add~~rdi, 2>', '<lea~~rsi, [rsp + 0x1ca]>', '<add~~rsi, 2>', '<add~~eax, -1>', '<mov~~eax, eax>', '<mov~~edx, eax>', '<shl~~rdx, 1>', '<call~~0x500058>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~cx, word ptr [rsp + 0x58]>', '<mov~~dx, word ptr [rsp + 0x56]>', '<xor~~eax, eax>', '<cmp~~cx, dx>', '<mov~~qword ptr [rsp + 0x20], rax>', '<je~~0x412f2a>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~dx, word ptr [rsp + 0x58]>', '<mov~~rsi, qword ptr [rsp + 0xd0]>', '<mov~~ecx, dword ptr [rsp + 0x3c]>', '<mov~~word ptr [rax], dx>', '<add~~ecx, -1>', '<mov~~dword ptr [rsi], ecx>', '<mov~~word ptr [rsp + 0x2a], dx>', '<mov~~dword ptr [rsp + 0x2c], ecx>', '<mov~~qword ptr [rsp + 0x30], rax>', '<jmp~~0x412fe6>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1b8]>', '<mov~~rcx, qword ptr [rsp + 0x70]>', '<mov~~si, word ptr [rsp + 0x5a]>', '<mov~~eax, dword ptr [rsp + 0x5c]>', '<mov~~rdx, qword ptr [rsp + 0x60]>', '<add~~rcx, 2>', '<mov~~r8d, eax>', '<add~~rdi, 0x2ae12>', '<shl~~r8, 1>', '<add~~rdi, r8>', '<cmp~~rdx, rdi>', '<mov~~word ptr [rsp + 0x96], si>', '<mov~~qword ptr [rsp + 0x98], rdx>', '<mov~~qword ptr [rsp + 0xa0], rcx>', '<mov~~dword ptr [rsp + 0xa8], eax>', '<jb~~0x412d38>']}, {'block_Idx': 36, 'blockInsts': ['<jmp~~0x412f58>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x170]>', '<mov~~dx, word ptr [rsp + 0x17e]>', '<mov~~rcx, qword ptr [rsp + 0x180]>', '<xor~~eax, eax>', '<cmp~~rsi, 0>', '<mov~~word ptr [rsp + 0x116], dx>', '<mov~~qword ptr [rsp + 0x118], rcx>', '<mov~~qword ptr [rsp + 0x120], rax>', '<je~~0x412b58>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x120]>', '<mov~~rcx, qword ptr [rsp + 0x118]>', '<mov~~dx, word ptr [rsp + 0x116]>', '<mov~~rsi, qword ptr [rsp + 0x170]>', '<mov~~rdi, qword ptr [rsp + 0x1b8]>', '<movzx~~edi, byte ptr [rdi + rcx + 0x2ae4f]>', '<add~~dx, di>', '<mov~~word ptr [rsp + 0xfe], dx>', '<mov~~word ptr [rsp + rcx*2 + 0x1ca], dx>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0x100], rcx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x108], rax>', '<cmp~~rax, rsi>', '<mov~~word ptr [rsp + 0x116], dx>', '<mov~~qword ptr [rsp + 0x118], rcx>', '<mov~~qword ptr [rsp + 0x120], rax>', '<jne~~0x412ae0>']}, {'block_Idx': 34, 'blockInsts': ['<jmp~~0x412eea>']}, {'block_Idx': 22, 'blockInsts': ['<movss~~xmm1, dword ptr [rsp + 0x18c]>', '<mov~~ax, word ptr [rsp + 0xae]>', '<mov~~rdx, qword ptr [rsp + 0xb0]>', '<mov~~rcx, qword ptr [rsp + 0xb8]>', '<mov~~esi, dword ptr [rsp + 0xc4]>', '<mov~~dword ptr [rsp + 0x3c], esi>', '<mov~~qword ptr [rsp + 0x40], rcx>', '<mov~~qword ptr [rsp + 0x48], rdx>', '<mov~~word ptr [rsp + 0x56], ax>', '<movzx~~ecx, word ptr [rcx]>', '<mov~~dx, cx>', '<mov~~word ptr [rsp + 0x58], dx>', '<cvtsi2ss~~xmm0, ecx>', '<movzx~~eax, ax>', '<cvtsi2ss~~xmm2, eax>', '<mulss~~xmm1, xmm2>', '<ucomiss~~xmm0, xmm1>', '<jb~~0x412ed2>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~cx, word ptr [rsp + 0x56]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~ax, word ptr [rsp + rax*2 + 0x1ca]>', '<cmp~~ax, cx>', '<je~~0x412fbf>']}, {'block_Idx': 27, 'blockInsts': ['<jmp~~0x41303d>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x6c]>', '<mov~~dx, word ptr [rsp + 0x86]>', '<mov~~rsi, qword ptr [rsp + 0x78]>', '<mov~~rax, rsi>', '<add~~rax, 2>', '<mov~~word ptr [rsi + 2], dx>', '<mov~~word ptr [rsp + 0x5a], dx>', '<mov~~dword ptr [rsp + 0x5c], ecx>', '<mov~~qword ptr [rsp + 0x60], rax>', '<jmp~~0x412df0>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xd8]>', '<mov~~eax, dword ptr [rsp + 0xf4]>', '<mov~~ecx, dword ptr [rsp + 0xf8]>', '<add~~eax, ecx>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<mov~~edx, 2>', '<lea~~rcx, [rip + 0x41f]>', '<call~~0x500048>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b8]>', '<mov~~rdi, qword ptr [rsp + 0x190]>', '<mov~~qword ptr [rsp + 0xd8], rdi>', '<mov~~rsi, rax>', '<add~~rsi, 0x2ad72>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ad00>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<mov~~eax, dword ptr [rax + 0x2ad00]>', '<mov~~dword ptr [rsp + 0xec], eax>', '<add~~eax, 1>', '<mov~~eax, eax>', '<mov~~edx, eax>', '<shl~~rdx, 1>', '<call~~0x500058>']}], 'cfg_edge_info': [(25, 29), (33, 36), (32, 34), (12, 16), (31, 17), (4, 6), (0, 2), (22, 26), (10, 6), (8, 12), (28, 21), (34, 37), (28, 27), (35, 17), (7, 10), (15, 17), (32, 33), (33, 35), (18, 22), (21, 24), (29, 31), (23, 21), (22, 25), (31, 22), (8, 11), (0, 1), (23, 27), (2, 4), (37, 29), (17, 20), (37, 32), (30, 32), (15, 18), (16, 15), (7, 6), (24, 28), (35, 22), (18, 21), (25, 30), (4, 7), (26, 31), (21, 23), (38, 33), (3, 8), (39, 31), (38, 39), (9, 3), (9, 9), (27, 17), (2, 3), (10, 10), (11, 15), (36, 38), (6, 3), (6, 9)], 'cdg_edge_info': [(32, 37), (25, 29), (25, 32), (21, 28), (0, 2), (22, 26), (28, 21), (8, 12), (0, 8), (0, 17), (0, 20), (7, 10), (33, 35), (32, 33), (33, 38), (18, 22), (21, 24), (23, 21), (22, 25), (8, 11), (0, 1), (2, 4), (37, 29), (37, 32), (15, 18), (35, 22), (18, 21), (4, 7), (21, 23), (38, 33), (38, 39), (9, 9), (0, 3), (8, 16), (10, 10), (2, 6), (0, 15), (6, 9)], 'ddg_edge_info': [(32, 37), (16, 20), (25, 32), (16, 29), (4, 9), (15, 39), (16, 38), (22, 26), (10, 6), (28, 21), (22, 35), (7, 10), (15, 23), (16, 22), (33, 38), (2, 32), (18, 37), (39, 35), (3, 15), (0, 7), (2, 4), (16, 15), (24, 28), (16, 24), (18, 21), (16, 33), (3, 8), (0, 9), (22, 39), (24, 21), (15, 18), (16, 26), (16, 35), (0, 2), (22, 32), (16, 28), (3, 12), (22, 25), (2, 22), (16, 21), (2, 15), (16, 23), (2, 33), (4, 6), (3, 16), (29, 35), (23, 28), (8, 15), (2, 8), (15, 29), (21, 24), (16, 37), (0, 4), (37, 32), (1, 20), (26, 22), (38, 33), (16, 39), (0, 6), (2, 3), (0, 15), (2, 21), (12, 16), (16, 32), (21, 28), (18, 38), (22, 29), (10, 9), (8, 12), (0, 35), (32, 33), (16, 25), (18, 22), (26, 35), (0, 1), (0, 10), (2, 7), (2, 16), (0, 28), (35, 22), (16, 18), (4, 7), (21, 23), (0, 3), (8, 16), (22, 33), (0, 12), (2, 18), (6, 9)]}]}
{'sbr_make_f_tablelim': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 8, 'instruction': 'addl\t$-1, %ecx'}, {'instIndex': 9, 'instruction': 'movl\t%ecx, %ecx'}, {'instIndex': 10, 'instruction': 'movl\t%ecx, %edx'}, {'instIndex': 11, 'instruction': 'leaq\tsbr_make_f_tablelim.bands_warped(%rip), %rcx'}, {'instIndex': 12, 'instruction': 'movss\t(%rcx,%rdx,4), %xmm0            # xmm0 = mem[0],zero,zero,zero'}, {'instIndex': 13, 'instruction': 'movss\t%xmm0, 0x18c(%rsp)                # 4-byte Spill'}, {'instIndex': 14, 'instruction': 'leaq\t0x1ca(%rsp), %rcx'}, {'instIndex': 15, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 16, 'instruction': 'addq\t$0x2ae12, %rcx                   # imm = 0x2AE12'}, {'instIndex': 17, 'instruction': 'movq\t%rcx, 0x190(%rsp)                 # 8-byte Spill'}, {'instIndex': 18, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 19, 'instruction': 'addq\t$0x2ae12, %rcx                   # imm = 0x2AE12'}, {'instIndex': 20, 'instruction': 'addq\t$2, %rcx'}, {'instIndex': 21, 'instruction': 'movq\t%rcx, 0x198(%rsp)                 # 8-byte Spill'}, {'instIndex': 22, 'instruction': 'movl\t0x44(%rax), %ecx'}, {'instIndex': 24, 'instruction': 'movw\t%cx, 0x1ca(%rsp)'}]}]}
The case of compiler clang with optimization Os.
Patched source code file: aacsbr.c
Patched function: 1---static void sbr_make_f_tablelim 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_after/Os/aacsbr.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_after/Os/aacsbr.s---sbr_make_f_tablelim---after
function id: 6
function flag: True
There are 260 instructions for function: sbr_make_f_tablelim in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '174', 'end': 180}, 'before': {'start': '174', 'end': 180}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 8, 'instruction': 'addl\t$-1, %ecx'}, {'instIndex': 9, 'instruction': 'movl\t%ecx, %ecx'}, {'instIndex': 10, 'instruction': 'movl\t%ecx, %edx'}, {'instIndex': 11, 'instruction': 'leaq\tsbr_make_f_tablelim.bands_warped(%rip), %rcx'}, {'instIndex': 12, 'instruction': 'movss\t(%rcx,%rdx,4), %xmm0            # xmm0 = mem[0],zero,zero,zero'}, {'instIndex': 13, 'instruction': 'movss\t%xmm0, 0xdc(%rsp)                # 4-byte Spill'}, {'instIndex': 14, 'instruction': 'leaq\t0x11a(%rsp), %rcx'}, {'instIndex': 15, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 16, 'instruction': 'addq\t$0x2ae12, %rcx                   # imm = 0x2AE12'}, {'instIndex': 17, 'instruction': 'movq\t%rcx, 0xe0(%rsp)                 # 8-byte Spill'}, {'instIndex': 18, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 19, 'instruction': 'addq\t$0x2ae12, %rcx                   # imm = 0x2AE12'}, {'instIndex': 20, 'instruction': 'addq\t$2, %rcx'}, {'instIndex': 21, 'instruction': 'movq\t%rcx, 0xe8(%rsp)                 # 8-byte Spill'}, {'instIndex': 22, 'instruction': 'movl\t0x44(%rax), %ecx'}, {'instIndex': 24, 'instruction': 'movw\t%cx, 0x11a(%rsp)'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_after/Os/aacsbr.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_after/Os/aacsbr.o---after
The extraction of function: sbr_make_f_tablelim
Analyzing the binaries to generate subCFGs from patched function ...
It has 863 nodes and 1557 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 260 instructions in binary file.
[4236685]
The execution time of patched subCFG information extraction via angr: 0:00:01.312658
{'sbr_make_f_tablelim': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40a6b0>, <DisassemblerInsn "mov" for 0x40a6b8>, <DisassemblerInsn "mov" for 0x40a6c0>, <DisassemblerInsn "mov" for 0x40a6c8>, <DisassemblerInsn "add" for 0x40a6cb>, <DisassemblerInsn "mov" for 0x40a6d2>, <DisassemblerInsn "add" for 0x40a6d5>, <DisassemblerInsn "mov" for 0x40a6dc>, <DisassemblerInsn "mov" for 0x40a6e4>, <DisassemblerInsn "mov" for 0x40a6ea>, <DisassemblerInsn "add" for 0x40a6f1>, <DisassemblerInsn "mov" for 0x40a6f4>, <DisassemblerInsn "mov" for 0x40a6f6>, <DisassemblerInsn "shl" for 0x40a6f8>, <DisassemblerInsn "call" for 0x40a6fb>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x40a56b>, <DisassemblerInsn "mov" for 0x40a572>, <DisassemblerInsn "mov" for 0x40a57a>, <DisassemblerInsn "mov" for 0x40a57d>, <DisassemblerInsn "cmp" for 0x40a584>, <DisassemblerInsn "je" for 0x40a587>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40a623>, <DisassemblerInsn "mov" for 0x40a62b>, <DisassemblerInsn "add" for 0x40a632>, <DisassemblerInsn "mov" for 0x40a635>, <DisassemblerInsn "mov" for 0x40a637>, <DisassemblerInsn "mov" for 0x40a63f>, <DisassemblerInsn "mov" for 0x40a644>, <DisassemblerInsn "mov" for 0x40a64c>, <DisassemblerInsn "mov" for 0x40a654>, <DisassemblerInsn "mov" for 0x40a65c>, <DisassemblerInsn "mov" for 0x40a664>, <DisassemblerInsn "mov" for 0x40a66c>, <DisassemblerInsn "movzx" for 0x40a674>, <DisassemblerInsn "add" for 0x40a67c>, <DisassemblerInsn "mov" for 0x40a67f>, <DisassemblerInsn "mov" for 0x40a687>, <DisassemblerInsn "add" for 0x40a68f>, <DisassemblerInsn "mov" for 0x40a693>, <DisassemblerInsn "cmp" for 0x40a69b>, <DisassemblerInsn "mov" for 0x40a69e>, <DisassemblerInsn "mov" for 0x40a6a6>, <DisassemblerInsn "jne" for 0x40a6ae>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40a58d>, <DisassemblerInsn "mov" for 0x40a595>, <DisassemblerInsn "add" for 0x40a59c>, <DisassemblerInsn "mov" for 0x40a59f>, <DisassemblerInsn "mov" for 0x40a5a1>, <DisassemblerInsn "lea" for 0x40a5a3>, <DisassemblerInsn "movss" for 0x40a5aa>, <DisassemblerInsn "movss" for 0x40a5af>, <DisassemblerInsn "lea" for 0x40a5b8>, <DisassemblerInsn "mov" for 0x40a5c0>, <DisassemblerInsn "add" for 0x40a5c3>, <DisassemblerInsn "mov" for 0x40a5ca>, <DisassemblerInsn "mov" for 0x40a5d2>, <DisassemblerInsn "add" for 0x40a5d5>, <DisassemblerInsn "add" for 0x40a5dc>, <DisassemblerInsn "mov" for 0x40a5e0>, <DisassemblerInsn "mov" for 0x40a5e8>, <DisassemblerInsn "mov" for 0x40a5eb>, <DisassemblerInsn "mov" for 0x40a5f3>, <DisassemblerInsn "mov" for 0x40a5fb>, <DisassemblerInsn "add" for 0x40a5fe>, <DisassemblerInsn "mov" for 0x40a605>, <DisassemblerInsn "mov" for 0x40a60d>, <DisassemblerInsn "mov" for 0x40a613>, <DisassemblerInsn "cmp" for 0x40a61a>, <DisassemblerInsn "je" for 0x40a61d>]'}], 'cfg_block_detailed_info': [{'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x108]>', '<mov~~rdi, qword ptr [rsp + 0xe0]>', '<mov~~qword ptr [rsp + 0x90], rdi>', '<mov~~rsi, rax>', '<add~~rsi, 0x2ad72>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ad00>', '<mov~~qword ptr [rsp + 0x98], rcx>', '<mov~~eax, dword ptr [rax + 0x2ad00]>', '<mov~~dword ptr [rsp + 0xa4], eax>', '<add~~eax, 1>', '<mov~~eax, eax>', '<mov~~edx, eax>', '<shl~~rdx, 1>', '<call~~0x500058>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x128>', '<mov~~qword ptr [rsp + 0x108], rdi>', '<mov~~eax, dword ptr [rdi + 0x18]>', '<mov~~dword ptr [rsp + 0x114], eax>', '<cmp~~eax, 0>', '<je~~0x40aa39>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~cx, word ptr [rsp + 0xf6]>', '<mov~~eax, dword ptr [rsp + 0x104]>', '<add~~eax, 1>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0xc0], rax>', '<mov~~eax, 1>', '<mov~~word ptr [rsp + 0xce], cx>', '<mov~~qword ptr [rsp + 0xd0], rax>', '<mov~~rax, qword ptr [rsp + 0xd0]>', '<mov~~cx, word ptr [rsp + 0xce]>', '<mov~~rdx, qword ptr [rsp + 0xc0]>', '<mov~~rsi, qword ptr [rsp + 0x108]>', '<movzx~~esi, byte ptr [rsi + rax + 0x2ae4f]>', '<add~~cx, si>', '<mov~~word ptr [rsp + 0xb6], cx>', '<mov~~word ptr [rsp + rax*2 + 0x11a], cx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0xb8], rax>', '<cmp~~rax, rdx>', '<mov~~word ptr [rsp + 0xce], cx>', '<mov~~qword ptr [rsp + 0xd0], rax>', '<jne~~0x40a654>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x108]>', '<mov~~ecx, dword ptr [rsp + 0x114]>', '<add~~ecx, -1>', '<mov~~ecx, ecx>', '<mov~~edx, ecx>', '<lea~~rcx, [rip + 0x4342]>', '<movss~~xmm0, dword ptr [rcx + rdx*4]>', '<movss~~dword ptr [rsp + 0xdc], xmm0>', '<lea~~rcx, [rsp + 0x11a]>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ae12>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ae12>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0xe8], rcx>', '<mov~~ecx, dword ptr [rax + 0x44]>', '<mov~~word ptr [rsp + 0xf6], cx>', '<mov~~word ptr [rsp + 0x11a], cx>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ae4c>', '<mov~~qword ptr [rsp + 0xf8], rcx>', '<mov~~eax, dword ptr [rax + 0x2ae4c]>', '<mov~~dword ptr [rsp + 0x104], eax>', '<cmp~~eax, 0>', '<je~~0x40a6b0>']}], 'cfg_edge_info': [(2, 3), (0, 2), (2, 4)]}]}
{'sbr_make_f_tablelim': [4236685]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_after/Os/aacsbr.o---after
The extraction of function: sbr_make_f_tablelim
[4236685]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 32 nodes and 49 edges in CFGEmulated.
It has 32 nodes and 42 edges in CDG.
It has 1020 nodes and 1261 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4236685]
{4237056, 4236685, 4237326, 4237582, 4237201, 4237719, 4236835, 4237478, 4237099, 4236976, 4237619, 4237879, 4237881, 4237246, 4237765, 4237522, 4236884, 4237400, 4237665, 4236651, 4237934, 4237167, 4237558, 4237689}
[21, 19, 27, 14, 8, 6, 1, 4, 22, 13, 12, 18, 0, 17, 20, 2, 24, 7, 23, 31, 3, 28, 26, 25, 29, 9, 30, 15]
The execution time of patched slicing information extraction via angr: 0:00:09.594264
{'sbr_make_f_tablelim': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40a933>, <DisassemblerInsn "mov" for 0x40a938>, <DisassemblerInsn "mov" for 0x40a93d>, <DisassemblerInsn "mov" for 0x40a945>, <DisassemblerInsn "add" for 0x40a949>, <DisassemblerInsn "mov" for 0x40a94c>, <DisassemblerInsn "mov" for 0x40a94e>, <DisassemblerInsn "mov" for 0x40a953>, <DisassemblerInsn "mov" for 0x40a957>, <DisassemblerInsn "jmp" for 0x40a95c>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40a8a6>, <DisassemblerInsn "mov" for 0x40a8aa>, <DisassemblerInsn "mov" for 0x40a8af>, <DisassemblerInsn "mov" for 0x40a8b4>, <DisassemblerInsn "add" for 0x40a8b7>, <DisassemblerInsn "mov" for 0x40a8bb>, <DisassemblerInsn "mov" for 0x40a8bf>, <DisassemblerInsn "mov" for 0x40a8c4>, <DisassemblerInsn "mov" for 0x40a8c8>, <DisassemblerInsn "jmp" for 0x40a8cd>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40a9c5>, <DisassemblerInsn "mov" for 0x40a9c9>, <DisassemblerInsn "mov" for 0x40a9ce>, <DisassemblerInsn "mov" for 0x40a9d3>, <DisassemblerInsn "add" for 0x40a9d6>, <DisassemblerInsn "mov" for 0x40a9da>, <DisassemblerInsn "mov" for 0x40a9de>, <DisassemblerInsn "mov" for 0x40a9e3>, <DisassemblerInsn "mov" for 0x40a9e7>, <DisassemblerInsn "mov" for 0x40a9ec>, <DisassemblerInsn "mov" for 0x40a9f4>, <DisassemblerInsn "mov" for 0x40a9f9>, <DisassemblerInsn "mov" for 0x40a9fe>, <DisassemblerInsn "mov" for 0x40aa02>, <DisassemblerInsn "add" for 0x40aa07>, <DisassemblerInsn "mov" for 0x40aa0b>, <DisassemblerInsn "add" for 0x40aa0e>, <DisassemblerInsn "shl" for 0x40aa15>, <DisassemblerInsn "add" for 0x40aa18>, <DisassemblerInsn "cmp" for 0x40aa1b>, <DisassemblerInsn "mov" for 0x40aa1e>, <DisassemblerInsn "mov" for 0x40aa23>, <DisassemblerInsn "mov" for 0x40aa28>, <DisassemblerInsn "mov" for 0x40aa2d>, <DisassemblerInsn "jb" for 0x40aa31>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40aa37>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40a791>, <DisassemblerInsn "mov" for 0x40a799>, <DisassemblerInsn "mov" for 0x40a7a0>, <DisassemblerInsn "add" for 0x40a7a7>, <DisassemblerInsn "mov" for 0x40a7a9>, <DisassemblerInsn "mov" for 0x40a7ab>, <DisassemblerInsn "mov" for 0x40a7ad>, <DisassemblerInsn "lea" for 0x40a7b2>, <DisassemblerInsn "call" for 0x40a7b9>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40a654>, <DisassemblerInsn "mov" for 0x40a65c>, <DisassemblerInsn "mov" for 0x40a664>, <DisassemblerInsn "mov" for 0x40a66c>, <DisassemblerInsn "movzx" for 0x40a674>, <DisassemblerInsn "add" for 0x40a67c>, <DisassemblerInsn "mov" for 0x40a67f>, <DisassemblerInsn "mov" for 0x40a687>, <DisassemblerInsn "add" for 0x40a68f>, <DisassemblerInsn "mov" for 0x40a693>, <DisassemblerInsn "cmp" for 0x40a69b>, <DisassemblerInsn "mov" for 0x40a69e>, <DisassemblerInsn "mov" for 0x40a6a6>, <DisassemblerInsn "jne" for 0x40a6ae>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40aa39>, <DisassemblerInsn "mov" for 0x40aa41>, <DisassemblerInsn "mov" for 0x40aa48>, <DisassemblerInsn "mov" for 0x40aa4f>, <DisassemblerInsn "mov" for 0x40aa55>, <DisassemblerInsn "mov" for 0x40aa5d>, <DisassemblerInsn "mov" for 0x40aa64>, <DisassemblerInsn "add" for 0x40aa6e>, <DisassemblerInsn "ret" for 0x40aa75>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40a623>, <DisassemblerInsn "mov" for 0x40a62b>, <DisassemblerInsn "add" for 0x40a632>, <DisassemblerInsn "mov" for 0x40a635>, <DisassemblerInsn "mov" for 0x40a637>, <DisassemblerInsn "mov" for 0x40a63f>, <DisassemblerInsn "mov" for 0x40a644>, <DisassemblerInsn "mov" for 0x40a64c>, <DisassemblerInsn "mov" for 0x40a654>, <DisassemblerInsn "mov" for 0x40a65c>, <DisassemblerInsn "mov" for 0x40a664>, <DisassemblerInsn "mov" for 0x40a66c>, <DisassemblerInsn "movzx" for 0x40a674>, <DisassemblerInsn "add" for 0x40a67c>, <DisassemblerInsn "mov" for 0x40a67f>, <DisassemblerInsn "mov" for 0x40a687>, <DisassemblerInsn "add" for 0x40a68f>, <DisassemblerInsn "mov" for 0x40a693>, <DisassemblerInsn "cmp" for 0x40a69b>, <DisassemblerInsn "mov" for 0x40a69e>, <DisassemblerInsn "mov" for 0x40a6a6>, <DisassemblerInsn "jne" for 0x40a6ae>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40a9ec>, <DisassemblerInsn "mov" for 0x40a9f4>, <DisassemblerInsn "mov" for 0x40a9f9>, <DisassemblerInsn "mov" for 0x40a9fe>, <DisassemblerInsn "mov" for 0x40aa02>, <DisassemblerInsn "add" for 0x40aa07>, <DisassemblerInsn "mov" for 0x40aa0b>, <DisassemblerInsn "add" for 0x40aa0e>, <DisassemblerInsn "shl" for 0x40aa15>, <DisassemblerInsn "add" for 0x40aa18>, <DisassemblerInsn "cmp" for 0x40aa1b>, <DisassemblerInsn "mov" for 0x40aa1e>, <DisassemblerInsn "mov" for 0x40aa23>, <DisassemblerInsn "mov" for 0x40aa28>, <DisassemblerInsn "mov" for 0x40aa2d>, <DisassemblerInsn "jb" for 0x40aa31>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40a76f>, <DisassemblerInsn "mov" for 0x40a777>, <DisassemblerInsn "mov" for 0x40a77f>, <DisassemblerInsn "mov" for 0x40a781>, <DisassemblerInsn "mov" for 0x40a783>, <DisassemblerInsn "mov" for 0x40a78a>, <DisassemblerInsn "mov" for 0x40a791>, <DisassemblerInsn "mov" for 0x40a799>, <DisassemblerInsn "mov" for 0x40a7a0>, <DisassemblerInsn "add" for 0x40a7a7>, <DisassemblerInsn "mov" for 0x40a7a9>, <DisassemblerInsn "mov" for 0x40a7ab>, <DisassemblerInsn "mov" for 0x40a7ad>, <DisassemblerInsn "lea" for 0x40a7b2>, <DisassemblerInsn "call" for 0x40a7b9>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40a7be>, <DisassemblerInsn "mov" for 0x40a7c6>, <DisassemblerInsn "mov" for 0x40a7ce>, <DisassemblerInsn "mov" for 0x40a7d6>, <DisassemblerInsn "mov" for 0x40a7d8>, <DisassemblerInsn "mov" for 0x40a7da>, <DisassemblerInsn "add" for 0x40a7e1>, <DisassemblerInsn "add" for 0x40a7e4>, <DisassemblerInsn "mov" for 0x40a7e6>, <DisassemblerInsn "mov" for 0x40a7ed>, <DisassemblerInsn "add" for 0x40a7f0>, <DisassemblerInsn "mov" for 0x40a7f7>, <DisassemblerInsn "mov" for 0x40a7ff>, <DisassemblerInsn "cmp" for 0x40a805>, <DisassemblerInsn "je" for 0x40a808>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40a8d2>, <DisassemblerInsn "mov" for 0x40a8d6>, <DisassemblerInsn "mov" for 0x40a8db>, <DisassemblerInsn "sub" for 0x40a8e0>, <DisassemblerInsn "sete" for 0x40a8e3>, <DisassemblerInsn "or" for 0x40a8e6>, <DisassemblerInsn "xor" for 0x40a8e8>, <DisassemblerInsn "test" for 0x40a8ea>, <DisassemblerInsn "mov" for 0x40a8ed>, <DisassemblerInsn "jne" for 0x40a8f2>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x40a56b>, <DisassemblerInsn "mov" for 0x40a572>, <DisassemblerInsn "mov" for 0x40a57a>, <DisassemblerInsn "mov" for 0x40a57d>, <DisassemblerInsn "cmp" for 0x40a584>, <DisassemblerInsn "je" for 0x40a587>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "add" for 0x40aa6e>, <DisassemblerInsn "ret" for 0x40aa75>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40a8f4>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40a58d>, <DisassemblerInsn "mov" for 0x40a595>, <DisassemblerInsn "add" for 0x40a59c>, <DisassemblerInsn "mov" for 0x40a59f>, <DisassemblerInsn "mov" for 0x40a5a1>, <DisassemblerInsn "lea" for 0x40a5a3>, <DisassemblerInsn "movss" for 0x40a5aa>, <DisassemblerInsn "movss" for 0x40a5af>, <DisassemblerInsn "lea" for 0x40a5b8>, <DisassemblerInsn "mov" for 0x40a5c0>, <DisassemblerInsn "add" for 0x40a5c3>, <DisassemblerInsn "mov" for 0x40a5ca>, <DisassemblerInsn "mov" for 0x40a5d2>, <DisassemblerInsn "add" for 0x40a5d5>, <DisassemblerInsn "add" for 0x40a5dc>, <DisassemblerInsn "mov" for 0x40a5e0>, <DisassemblerInsn "mov" for 0x40a5e8>, <DisassemblerInsn "mov" for 0x40a5eb>, <DisassemblerInsn "mov" for 0x40a5f3>, <DisassemblerInsn "mov" for 0x40a5fb>, <DisassemblerInsn "add" for 0x40a5fe>, <DisassemblerInsn "mov" for 0x40a605>, <DisassemblerInsn "mov" for 0x40a60d>, <DisassemblerInsn "mov" for 0x40a613>, <DisassemblerInsn "cmp" for 0x40a61a>, <DisassemblerInsn "je" for 0x40a61d>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "movss" for 0x40a858>, <DisassemblerInsn "mov" for 0x40a861>, <DisassemblerInsn "mov" for 0x40a866>, <DisassemblerInsn "mov" for 0x40a86b>, <DisassemblerInsn "mov" for 0x40a870>, <DisassemblerInsn "mov" for 0x40a874>, <DisassemblerInsn "mov" for 0x40a878>, <DisassemblerInsn "mov" for 0x40a87d>, <DisassemblerInsn "mov" for 0x40a882>, <DisassemblerInsn "movzx" for 0x40a887>, <DisassemblerInsn "mov" for 0x40a88a>, <DisassemblerInsn "mov" for 0x40a88d>, <DisassemblerInsn "cvtsi2ss" for 0x40a892>, <DisassemblerInsn "movzx" for 0x40a896>, <DisassemblerInsn "cvtsi2ss" for 0x40a899>, <DisassemblerInsn "mulss" for 0x40a89d>, <DisassemblerInsn "ucomiss" for 0x40a8a1>, <DisassemblerInsn "jb" for 0x40a8a4>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40a700>, <DisassemblerInsn "mov" for 0x40a708>, <DisassemblerInsn "mov" for 0x40a70f>, <DisassemblerInsn "mov" for 0x40a711>, <DisassemblerInsn "cmp" for 0x40a718>, <DisassemblerInsn "mov" for 0x40a71b>, <DisassemblerInsn "mov" for 0x40a722>, <DisassemblerInsn "jbe" for 0x40a729>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40a90e>, <DisassemblerInsn "mov" for 0x40a913>, <DisassemblerInsn "mov" for 0x40a918>, <DisassemblerInsn "mov" for 0x40a91d>, <DisassemblerInsn "xor" for 0x40a925>, <DisassemblerInsn "cmp" for 0x40a927>, <DisassemblerInsn "mov" for 0x40a92a>, <DisassemblerInsn "je" for 0x40a92f>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40a997>, <DisassemblerInsn "mov" for 0x40a99c>, <DisassemblerInsn "mov" for 0x40a9a1>, <DisassemblerInsn "mov" for 0x40a9a9>, <DisassemblerInsn "mov" for 0x40a9ad>, <DisassemblerInsn "add" for 0x40a9b0>, <DisassemblerInsn "mov" for 0x40a9b3>, <DisassemblerInsn "mov" for 0x40a9b5>, <DisassemblerInsn "mov" for 0x40a9ba>, <DisassemblerInsn "mov" for 0x40a9be>, <DisassemblerInsn "jmp" for 0x40a9c3>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40a6b0>, <DisassemblerInsn "mov" for 0x40a6b8>, <DisassemblerInsn "mov" for 0x40a6c0>, <DisassemblerInsn "mov" for 0x40a6c8>, <DisassemblerInsn "add" for 0x40a6cb>, <DisassemblerInsn "mov" for 0x40a6d2>, <DisassemblerInsn "add" for 0x40a6d5>, <DisassemblerInsn "mov" for 0x40a6dc>, <DisassemblerInsn "mov" for 0x40a6e4>, <DisassemblerInsn "mov" for 0x40a6ea>, <DisassemblerInsn "add" for 0x40a6f1>, <DisassemblerInsn "mov" for 0x40a6f4>, <DisassemblerInsn "mov" for 0x40a6f6>, <DisassemblerInsn "shl" for 0x40a6f8>, <DisassemblerInsn "call" for 0x40a6fb>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40a995>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40a931>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40a979>, <DisassemblerInsn "mov" for 0x40a97e>, <DisassemblerInsn "mov" for 0x40a983>, <DisassemblerInsn "mov" for 0x40a988>, <DisassemblerInsn "cmp" for 0x40a990>, <DisassemblerInsn "je" for 0x40a993>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40a8f6>, <DisassemblerInsn "mov" for 0x40a8fb>, <DisassemblerInsn "add" for 0x40a900>, <DisassemblerInsn "cmp" for 0x40a904>, <DisassemblerInsn "mov" for 0x40a907>, <DisassemblerInsn "je" for 0x40a90c>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40a72b>, <DisassemblerInsn "mov" for 0x40a732>, <DisassemblerInsn "mov" for 0x40a73a>, <DisassemblerInsn "mov" for 0x40a741>, <DisassemblerInsn "add" for 0x40a743>, <DisassemblerInsn "shl" for 0x40a74a>, <DisassemblerInsn "add" for 0x40a74d>, <DisassemblerInsn "add" for 0x40a750>, <DisassemblerInsn "lea" for 0x40a754>, <DisassemblerInsn "add" for 0x40a75c>, <DisassemblerInsn "add" for 0x40a760>, <DisassemblerInsn "mov" for 0x40a763>, <DisassemblerInsn "mov" for 0x40a765>, <DisassemblerInsn "shl" for 0x40a767>, <DisassemblerInsn "call" for 0x40a76a>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40a961>, <DisassemblerInsn "mov" for 0x40a966>, <DisassemblerInsn "add" for 0x40a96b>, <DisassemblerInsn "cmp" for 0x40a96f>, <DisassemblerInsn "mov" for 0x40a972>, <DisassemblerInsn "je" for 0x40a977>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40a80e>, <DisassemblerInsn "mov" for 0x40a815>, <DisassemblerInsn "mov" for 0x40a81d>, <DisassemblerInsn "mov" for 0x40a825>, <DisassemblerInsn "cmp" for 0x40a82c>, <DisassemblerInsn "setl" for 0x40a82f>, <DisassemblerInsn "mov" for 0x40a833>, <DisassemblerInsn "add" for 0x40a838>, <DisassemblerInsn "mov" for 0x40a83b>, <DisassemblerInsn "mov" for 0x40a83d>, <DisassemblerInsn "mov" for 0x40a842>, <DisassemblerInsn "mov" for 0x40a845>, <DisassemblerInsn "mov" for 0x40a84a>, <DisassemblerInsn "mov" for 0x40a84f>, <DisassemblerInsn "mov" for 0x40a854>, <DisassemblerInsn "movss" for 0x40a858>, <DisassemblerInsn "mov" for 0x40a861>, <DisassemblerInsn "mov" for 0x40a866>, <DisassemblerInsn "mov" for 0x40a86b>, <DisassemblerInsn "mov" for 0x40a870>, <DisassemblerInsn "mov" for 0x40a874>, <DisassemblerInsn "mov" for 0x40a878>, <DisassemblerInsn "mov" for 0x40a87d>, <DisassemblerInsn "mov" for 0x40a882>, <DisassemblerInsn "movzx" for 0x40a887>, <DisassemblerInsn "mov" for 0x40a88a>, <DisassemblerInsn "mov" for 0x40a88d>, <DisassemblerInsn "cvtsi2ss" for 0x40a892>, <DisassemblerInsn "movzx" for 0x40a896>, <DisassemblerInsn "cvtsi2ss" for 0x40a899>, <DisassemblerInsn "mulss" for 0x40a89d>, <DisassemblerInsn "ucomiss" for 0x40a8a1>, <DisassemblerInsn "jb" for 0x40a8a4>]'}], 'cfg_block_detailed_info': [{'block_Idx': 21, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~dx, word ptr [rsp + 0x52]>', '<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~ecx, dword ptr [rsp + 0x3c]>', '<add~~ecx, -1>', '<mov~~dword ptr [rsi], ecx>', '<mov~~word ptr [rsp + 0x2a], dx>', '<mov~~dword ptr [rsp + 0x2c], ecx>', '<mov~~qword ptr [rsp + 0x30], rax>', '<jmp~~0x40a9ec>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x3c]>', '<mov~~dx, word ptr [rsp + 0x54]>', '<mov~~rsi, qword ptr [rsp + 0x48]>', '<mov~~rax, rsi>', '<add~~rax, 2>', '<mov~~word ptr [rsi + 2], dx>', '<mov~~word ptr [rsp + 0x2a], dx>', '<mov~~dword ptr [rsp + 0x2c], ecx>', '<mov~~qword ptr [rsp + 0x30], rax>', '<jmp~~0x40a9ec>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x3c]>', '<mov~~dx, word ptr [rsp + 0x54]>', '<mov~~rsi, qword ptr [rsp + 0x48]>', '<mov~~rax, rsi>', '<add~~rax, 2>', '<mov~~word ptr [rsi + 2], dx>', '<mov~~word ptr [rsp + 0x2a], dx>', '<mov~~dword ptr [rsp + 0x2c], ecx>', '<mov~~qword ptr [rsp + 0x30], rax>', '<mov~~rdi, qword ptr [rsp + 0x108]>', '<mov~~rcx, qword ptr [rsp + 0x40]>', '<mov~~si, word ptr [rsp + 0x2a]>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<add~~rcx, 2>', '<mov~~r8d, eax>', '<add~~rdi, 0x2ae12>', '<shl~~r8, 1>', '<add~~rdi, r8>', '<cmp~~rdx, rdi>', '<mov~~word ptr [rsp + 0x66], si>', '<mov~~qword ptr [rsp + 0x68], rdx>', '<mov~~qword ptr [rsp + 0x70], rcx>', '<mov~~dword ptr [rsp + 0x7c], eax>', '<jb~~0x40a858>']}, {'block_Idx': 14, 'blockInsts': ['<jmp~~0x40aa6e>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x90]>', '<mov~~eax, dword ptr [rsp + 0xac]>', '<mov~~ecx, dword ptr [rsp + 0xb0]>', '<add~~eax, ecx>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<mov~~edx, 2>', '<lea~~rcx, [rip + 0x2bd]>', '<call~~0x500048>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd0]>', '<mov~~cx, word ptr [rsp + 0xce]>', '<mov~~rdx, qword ptr [rsp + 0xc0]>', '<mov~~rsi, qword ptr [rsp + 0x108]>', '<movzx~~esi, byte ptr [rsi + rax + 0x2ae4f]>', '<add~~cx, si>', '<mov~~word ptr [rsp + 0xb6], cx>', '<mov~~word ptr [rsp + rax*2 + 0x11a], cx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0xb8], rax>', '<cmp~~rax, rdx>', '<mov~~word ptr [rsp + 0xce], cx>', '<mov~~qword ptr [rsp + 0xd0], rax>', '<jne~~0x40a654>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x108]>', '<mov~~cx, word ptr [rax + 0x2ad72]>', '<mov~~word ptr [rax + 0x2ae12], cx>', '<mov~~ecx, dword ptr [rax + 0x2ad00]>', '<mov~~cx, word ptr [rax + rcx*2 + 0x2ad72]>', '<mov~~word ptr [rax + 0x2ae14], cx>', '<mov~~dword ptr [rax + 0x2ad0c], 1>', '<add~~rsp, 0x128>', '<ret~~>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~cx, word ptr [rsp + 0xf6]>', '<mov~~eax, dword ptr [rsp + 0x104]>', '<add~~eax, 1>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0xc0], rax>', '<mov~~eax, 1>', '<mov~~word ptr [rsp + 0xce], cx>', '<mov~~qword ptr [rsp + 0xd0], rax>', '<mov~~rax, qword ptr [rsp + 0xd0]>', '<mov~~cx, word ptr [rsp + 0xce]>', '<mov~~rdx, qword ptr [rsp + 0xc0]>', '<mov~~rsi, qword ptr [rsp + 0x108]>', '<movzx~~esi, byte ptr [rsi + rax + 0x2ae4f]>', '<add~~cx, si>', '<mov~~word ptr [rsp + 0xb6], cx>', '<mov~~word ptr [rsp + rax*2 + 0x11a], cx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0xb8], rax>', '<cmp~~rax, rdx>', '<mov~~word ptr [rsp + 0xce], cx>', '<mov~~qword ptr [rsp + 0xd0], rax>', '<jne~~0x40a654>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x108]>', '<mov~~rcx, qword ptr [rsp + 0x40]>', '<mov~~si, word ptr [rsp + 0x2a]>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<add~~rcx, 2>', '<mov~~r8d, eax>', '<add~~rdi, 0x2ae12>', '<shl~~r8, 1>', '<add~~rdi, r8>', '<cmp~~rdx, rdi>', '<mov~~word ptr [rsp + 0x66], si>', '<mov~~qword ptr [rsp + 0x68], rdx>', '<mov~~qword ptr [rsp + 0x70], rcx>', '<mov~~dword ptr [rsp + 0x7c], eax>', '<jb~~0x40a858>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xf8]>', '<mov~~rcx, qword ptr [rsp + 0x98]>', '<mov~~eax, dword ptr [rax]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0xac], ecx>', '<mov~~dword ptr [rsp + 0xb0], eax>', '<mov~~rdi, qword ptr [rsp + 0x90]>', '<mov~~eax, dword ptr [rsp + 0xac]>', '<mov~~ecx, dword ptr [rsp + 0xb0]>', '<add~~eax, ecx>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<mov~~edx, 2>', '<lea~~rcx, [rip + 0x2bd]>', '<call~~0x500048>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~rdx, qword ptr [rsp + 0xf8]>', '<mov~~rcx, qword ptr [rsp + 0x108]>', '<mov~~eax, dword ptr [rax]>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0x80], edx>', '<add~~eax, -1>', '<add~~eax, edx>', '<mov~~dword ptr [rsp + 0x84], eax>', '<mov~~rdx, rcx>', '<add~~rdx, 0x2ad0c>', '<mov~~qword ptr [rsp + 0x88], rdx>', '<mov~~dword ptr [rcx + 0x2ad0c], eax>', '<cmp~~eax, 0>', '<je~~0x40aa37>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x57]>', '<mov~~dx, word ptr [rsp + 0x52]>', '<mov~~cx, word ptr [rsp + 0x54]>', '<sub~~cx, dx>', '<sete~~cl>', '<or~~cl, al>', '<xor~~eax, eax>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x20], rax>', '<jne~~0x40a933>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x128>', '<mov~~qword ptr [rsp + 0x108], rdi>', '<mov~~eax, dword ptr [rdi + 0x18]>', '<mov~~dword ptr [rsp + 0x114], eax>', '<cmp~~eax, 0>', '<je~~0x40aa39>']}, {'block_Idx': 17, 'blockInsts': ['<add~~rsp, 0x128>', '<ret~~>']}, {'block_Idx': 20, 'blockInsts': ['<jmp~~0x40a90e>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x108]>', '<mov~~ecx, dword ptr [rsp + 0x114]>', '<add~~ecx, -1>', '<mov~~ecx, ecx>', '<mov~~edx, ecx>', '<lea~~rcx, [rip + 0x4342]>', '<movss~~xmm0, dword ptr [rcx + rdx*4]>', '<movss~~dword ptr [rsp + 0xdc], xmm0>', '<lea~~rcx, [rsp + 0x11a]>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ae12>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ae12>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0xe8], rcx>', '<mov~~ecx, dword ptr [rax + 0x44]>', '<mov~~word ptr [rsp + 0xf6], cx>', '<mov~~word ptr [rsp + 0x11a], cx>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ae4c>', '<mov~~qword ptr [rsp + 0xf8], rcx>', '<mov~~eax, dword ptr [rax + 0x2ae4c]>', '<mov~~dword ptr [rsp + 0x104], eax>', '<cmp~~eax, 0>', '<je~~0x40a6b0>']}, {'block_Idx': 24, 'blockInsts': ['<movss~~xmm1, dword ptr [rsp + 0xdc]>', '<mov~~ax, word ptr [rsp + 0x66]>', '<mov~~rdx, qword ptr [rsp + 0x68]>', '<mov~~rcx, qword ptr [rsp + 0x70]>', '<mov~~esi, dword ptr [rsp + 0x7c]>', '<mov~~dword ptr [rsp + 0x3c], esi>', '<mov~~qword ptr [rsp + 0x40], rcx>', '<mov~~qword ptr [rsp + 0x48], rdx>', '<mov~~word ptr [rsp + 0x52], ax>', '<movzx~~ecx, word ptr [rcx]>', '<mov~~dx, cx>', '<mov~~word ptr [rsp + 0x54], dx>', '<cvtsi2ss~~xmm0, ecx>', '<movzx~~eax, ax>', '<cvtsi2ss~~xmm2, eax>', '<mulss~~xmm1, xmm2>', '<ucomiss~~xmm0, xmm1>', '<jb~~0x40a8d2>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xf8]>', '<mov~~ecx, dword ptr [rsp + 0xa4]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0xa8], eax>', '<cmp~~eax, 1>', '<mov~~dword ptr [rsp + 0xac], ecx>', '<mov~~dword ptr [rsp + 0xb0], eax>', '<jbe~~0x40a791>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~dx, word ptr [rsp + 0x54]>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~cx, word ptr [rsp + rax*2 + 0x11a]>', '<xor~~eax, eax>', '<cmp~~cx, dx>', '<mov~~qword ptr [rsp + 0x10], rax>', '<je~~0x40a979>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~dx, word ptr [rsp + 0x54]>', '<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~ecx, dword ptr [rsp + 0x3c]>', '<mov~~word ptr [rax], dx>', '<add~~ecx, -1>', '<mov~~dword ptr [rsi], ecx>', '<mov~~word ptr [rsp + 0x2a], dx>', '<mov~~dword ptr [rsp + 0x2c], ecx>', '<mov~~qword ptr [rsp + 0x30], rax>', '<jmp~~0x40a9ec>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x108]>', '<mov~~rdi, qword ptr [rsp + 0xe0]>', '<mov~~qword ptr [rsp + 0x90], rdi>', '<mov~~rsi, rax>', '<add~~rsi, 0x2ad72>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ad00>', '<mov~~qword ptr [rsp + 0x98], rcx>', '<mov~~eax, dword ptr [rax + 0x2ad00]>', '<mov~~dword ptr [rsp + 0xa4], eax>', '<add~~eax, 1>', '<mov~~eax, eax>', '<mov~~edx, eax>', '<shl~~rdx, 1>', '<call~~0x500058>']}, {'block_Idx': 28, 'blockInsts': ['<jmp~~0x40a961>']}, {'block_Idx': 26, 'blockInsts': ['<jmp~~0x40a8f6>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~cx, word ptr [rsp + 0x52]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~ax, word ptr [rsp + rax*2 + 0x11a]>', '<cmp~~ax, cx>', '<je~~0x40a9c5>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<add~~rax, 1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x20], rax>', '<je~~0x40a933>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xa8]>', '<mov~~rdi, qword ptr [rsp + 0x108]>', '<mov~~ecx, dword ptr [rsp + 0xa4]>', '<mov~~ecx, ecx>', '<add~~rdi, 0x2ae12>', '<shl~~rcx, 1>', '<add~~rdi, rcx>', '<add~~rdi, 2>', '<lea~~rsi, [rsp + 0x11a]>', '<add~~rsi, 2>', '<add~~eax, -1>', '<mov~~eax, eax>', '<mov~~edx, eax>', '<shl~~rdx, 1>', '<call~~0x500058>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rsp + 8]>', '<add~~rax, 1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x10], rax>', '<je~~0x40a997>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<mov~~rcx, qword ptr [rsp + 0xe8]>', '<mov~~rdx, qword ptr [rsp + 0xe0]>', '<mov~~esi, dword ptr [rsp + 0x80]>', '<cmp~~esi, 0>', '<setl~~dil>', '<mov~~byte ptr [rsp + 0x57], dil>', '<add~~esi, 1>', '<mov~~esi, esi>', '<mov~~qword ptr [rsp + 0x58], rsi>', '<mov~~si, word ptr [rdx]>', '<mov~~word ptr [rsp + 0x66], si>', '<mov~~qword ptr [rsp + 0x68], rdx>', '<mov~~qword ptr [rsp + 0x70], rcx>', '<mov~~dword ptr [rsp + 0x7c], eax>', '<movss~~xmm1, dword ptr [rsp + 0xdc]>', '<mov~~ax, word ptr [rsp + 0x66]>', '<mov~~rdx, qword ptr [rsp + 0x68]>', '<mov~~rcx, qword ptr [rsp + 0x70]>', '<mov~~esi, dword ptr [rsp + 0x7c]>', '<mov~~dword ptr [rsp + 0x3c], esi>', '<mov~~qword ptr [rsp + 0x40], rcx>', '<mov~~qword ptr [rsp + 0x48], rdx>', '<mov~~word ptr [rsp + 0x52], ax>', '<movzx~~ecx, word ptr [rcx]>', '<mov~~dx, cx>', '<mov~~word ptr [rsp + 0x54], dx>', '<cvtsi2ss~~xmm0, ecx>', '<movzx~~eax, ax>', '<cvtsi2ss~~xmm2, eax>', '<mulss~~xmm1, xmm2>', '<ucomiss~~xmm0, xmm1>', '<jb~~0x40a8d2>']}], 'cfg_edge_info': [(29, 23), (4, 3), (18, 20), (3, 7), (20, 23), (4, 6), (21, 22), (22, 14), (0, 2), (23, 25), (8, 12), (28, 30), (25, 28), (26, 29), (12, 15), (31, 22), (0, 1), (2, 4), (9, 13), (27, 24), (7, 9), (24, 19), (15, 19), (25, 27), (18, 21), (29, 21), (12, 14), (23, 26), (14, 17), (27, 14), (22, 24), (2, 3), (30, 25), (19, 22), (13, 12), (24, 18), (6, 6), (30, 31), (6, 3), (15, 18), (7, 8)], 'cdg_edge_info': [(18, 23), (29, 23), (4, 6), (0, 2), (23, 25), (0, 14), (0, 17), (7, 13), (12, 15), (0, 1), (0, 7), (2, 4), (27, 24), (24, 19), (7, 9), (15, 19), (25, 27), (18, 21), (29, 21), (25, 30), (0, 3), (23, 29), (0, 12), (30, 25), (24, 18), (6, 6), (30, 31), (15, 18), (7, 8)], 'ddg_edge_info': [(13, 30), (24, 27), (15, 24), (15, 30), (29, 23), (18, 23), (13, 27), (3, 7), (4, 6), (24, 18), (3, 13), (0, 2), (23, 25), (12, 31), (24, 21), (19, 27), (2, 23), (24, 23), (13, 23), (13, 17), (7, 13), (13, 29), (15, 29), (3, 9), (12, 15), (12, 21), (3, 12), (21, 27), (0, 1), (2, 4), (0, 4), (9, 13), (2, 7), (27, 24), (2, 13), (13, 19), (24, 25), (1, 17), (24, 19), (7, 12), (7, 9), (2, 25), (13, 25), (24, 31), (13, 31), (25, 30), (31, 27), (0, 3), (23, 29), (0, 9), (0, 6), (0, 12), (2, 3), (30, 25), (2, 12), (13, 12), (13, 18), (2, 15), (13, 15), (13, 21), (15, 18), (0, 27), (2, 24), (13, 24)]}]}
{'sbr_make_f_tablelim': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 8, 'instruction': 'addl\t$-1, %ecx'}, {'instIndex': 9, 'instruction': 'movl\t%ecx, %ecx'}, {'instIndex': 10, 'instruction': 'movl\t%ecx, %edx'}, {'instIndex': 11, 'instruction': 'leaq\tsbr_make_f_tablelim.bands_warped(%rip), %rcx'}, {'instIndex': 12, 'instruction': 'movss\t(%rcx,%rdx,4), %xmm0            # xmm0 = mem[0],zero,zero,zero'}, {'instIndex': 13, 'instruction': 'movss\t%xmm0, 0xdc(%rsp)                # 4-byte Spill'}, {'instIndex': 14, 'instruction': 'leaq\t0x11a(%rsp), %rcx'}, {'instIndex': 15, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 16, 'instruction': 'addq\t$0x2ae12, %rcx                   # imm = 0x2AE12'}, {'instIndex': 17, 'instruction': 'movq\t%rcx, 0xe0(%rsp)                 # 8-byte Spill'}, {'instIndex': 18, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 19, 'instruction': 'addq\t$0x2ae12, %rcx                   # imm = 0x2AE12'}, {'instIndex': 20, 'instruction': 'addq\t$2, %rcx'}, {'instIndex': 21, 'instruction': 'movq\t%rcx, 0xe8(%rsp)                 # 8-byte Spill'}, {'instIndex': 22, 'instruction': 'movl\t0x44(%rax), %ecx'}, {'instIndex': 24, 'instruction': 'movw\t%cx, 0x11a(%rsp)'}]}]}
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9---a/libavcodec/aacsbr.c
The case of compiler gcc with optimization no.
Patched source code file: aacsbr.c
Patched function: 1---static void sbr_make_f_tablelim 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/gcc_before/no/aacsbr_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/gcc_before/no/aacsbr_gcc.s---sbr_make_f_tablelim---before
function id: 76
function flag: True
There are 216 instructions for function: sbr_make_f_tablelim in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '174', 'end': 180}, 'before': {'start': '174', 'end': 180}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 10, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 11, 'instruction': 'movl\t0x18(%rax), %eax'}, {'instIndex': 12, 'instruction': 'subl\t$1, %eax'}, {'instIndex': 13, 'instruction': 'movl\t%eax, %eax'}, {'instIndex': 14, 'instruction': 'leaq\t0(,%rax,4), %rdx'}, {'instIndex': 15, 'instruction': 'leaq\tbands_warped.4(%rip), %rax'}, {'instIndex': 16, 'instruction': 'movss\t(%rdx,%rax), %xmm0'}, {'instIndex': 17, 'instruction': 'movss\t%xmm0, 0x14(%rsp)'}, {'instIndex': 18, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 19, 'instruction': 'addq\t$0x2ae12, %rax'}, {'instIndex': 20, 'instruction': 'addq\t$2, %rax'}, {'instIndex': 21, 'instruction': 'movq\t%rax, 0x18(%rsp)'}, {'instIndex': 22, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 23, 'instruction': 'addq\t$0x2ae12, %rax'}, {'instIndex': 24, 'instruction': 'movq\t%rax, 0x20(%rsp)'}, {'instIndex': 25, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 26, 'instruction': 'movl\t0x44(%rax), %eax'}, {'instIndex': 27, 'instruction': 'movw\t%ax, 0x2e(%rsp)'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/gcc_before/no/aacsbr.o
Binary file does not exist.
{'sbr_make_f_tablelim': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 10, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 11, 'instruction': 'movl\t0x18(%rax), %eax'}, {'instIndex': 12, 'instruction': 'subl\t$1, %eax'}, {'instIndex': 13, 'instruction': 'movl\t%eax, %eax'}, {'instIndex': 14, 'instruction': 'leaq\t0(,%rax,4), %rdx'}, {'instIndex': 15, 'instruction': 'leaq\tbands_warped.4(%rip), %rax'}, {'instIndex': 16, 'instruction': 'movss\t(%rdx,%rax), %xmm0'}, {'instIndex': 17, 'instruction': 'movss\t%xmm0, 0x14(%rsp)'}, {'instIndex': 18, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 19, 'instruction': 'addq\t$0x2ae12, %rax'}, {'instIndex': 20, 'instruction': 'addq\t$2, %rax'}, {'instIndex': 21, 'instruction': 'movq\t%rax, 0x18(%rsp)'}, {'instIndex': 22, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 23, 'instruction': 'addq\t$0x2ae12, %rax'}, {'instIndex': 24, 'instruction': 'movq\t%rax, 0x20(%rsp)'}, {'instIndex': 25, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 26, 'instruction': 'movl\t0x44(%rax), %eax'}, {'instIndex': 27, 'instruction': 'movw\t%ax, 0x2e(%rsp)'}]}]}
The case of compiler gcc with optimization O0.
Patched source code file: aacsbr.c
Patched function: 1---static void sbr_make_f_tablelim 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/gcc_before/O0/aacsbr_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/gcc_before/O0/aacsbr_gcc.s---sbr_make_f_tablelim---before
function id: 76
function flag: True
There are 216 instructions for function: sbr_make_f_tablelim in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '174', 'end': 180}, 'before': {'start': '174', 'end': 180}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 10, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 11, 'instruction': 'movl\t0x18(%rax), %eax'}, {'instIndex': 12, 'instruction': 'subl\t$1, %eax'}, {'instIndex': 13, 'instruction': 'movl\t%eax, %eax'}, {'instIndex': 14, 'instruction': 'leaq\t0(,%rax,4), %rdx'}, {'instIndex': 15, 'instruction': 'leaq\tbands_warped.4(%rip), %rax'}, {'instIndex': 16, 'instruction': 'movss\t(%rdx,%rax), %xmm0'}, {'instIndex': 17, 'instruction': 'movss\t%xmm0, 0x14(%rsp)'}, {'instIndex': 18, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 19, 'instruction': 'addq\t$0x2ae12, %rax'}, {'instIndex': 20, 'instruction': 'addq\t$2, %rax'}, {'instIndex': 21, 'instruction': 'movq\t%rax, 0x18(%rsp)'}, {'instIndex': 22, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 23, 'instruction': 'addq\t$0x2ae12, %rax'}, {'instIndex': 24, 'instruction': 'movq\t%rax, 0x20(%rsp)'}, {'instIndex': 25, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 26, 'instruction': 'movl\t0x44(%rax), %eax'}, {'instIndex': 27, 'instruction': 'movw\t%ax, 0x2e(%rsp)'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/gcc_before/O0/aacsbr.o
Binary file does not exist.
{'sbr_make_f_tablelim': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 10, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 11, 'instruction': 'movl\t0x18(%rax), %eax'}, {'instIndex': 12, 'instruction': 'subl\t$1, %eax'}, {'instIndex': 13, 'instruction': 'movl\t%eax, %eax'}, {'instIndex': 14, 'instruction': 'leaq\t0(,%rax,4), %rdx'}, {'instIndex': 15, 'instruction': 'leaq\tbands_warped.4(%rip), %rax'}, {'instIndex': 16, 'instruction': 'movss\t(%rdx,%rax), %xmm0'}, {'instIndex': 17, 'instruction': 'movss\t%xmm0, 0x14(%rsp)'}, {'instIndex': 18, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 19, 'instruction': 'addq\t$0x2ae12, %rax'}, {'instIndex': 20, 'instruction': 'addq\t$2, %rax'}, {'instIndex': 21, 'instruction': 'movq\t%rax, 0x18(%rsp)'}, {'instIndex': 22, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 23, 'instruction': 'addq\t$0x2ae12, %rax'}, {'instIndex': 24, 'instruction': 'movq\t%rax, 0x20(%rsp)'}, {'instIndex': 25, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 26, 'instruction': 'movl\t0x44(%rax), %eax'}, {'instIndex': 27, 'instruction': 'movw\t%ax, 0x2e(%rsp)'}]}]}
The case of compiler gcc with optimization O1.
Patched source code file: aacsbr.c
Patched function: 1---static void sbr_make_f_tablelim 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/gcc_before/O1/aacsbr_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/gcc_before/O1/aacsbr_gcc.s---sbr_make_f_tablelim---before
function id: 45
function flag: True
Assembly file error information: list index out of range
Traceback (most recent call last):
  File "extract_patched_slicing_info.py", line 807, in patched_commit_patched_tag_handle
    = extract_patched_assembly_code_from_debug_file(assembly_file, func_name,
  File "extract_patched_slicing_info.py", line 163, in extract_patched_assembly_code_from_debug_file
    cur_debug_info = {"line": debug_line[1],
IndexError: list index out of range

/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/gcc_before/O1/aacsbr.o
Binary file does not exist.
{'sbr_make_f_tablelim': []}
The case of compiler gcc with optimization O2.
Patched source code file: aacsbr.c
Patched function: 1---static void sbr_make_f_tablelim 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/gcc_before/O2/aacsbr_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/gcc_before/O2/aacsbr_gcc.s---sbr_make_f_tablelim---before
function id: 14
function flag: True
There are 570 instructions for function: sbr_make_f_tablelim in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '174', 'end': 180}, 'before': {'start': '174', 'end': 180}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 13, 'instruction': 'movl\t0x44(%rdi), %ecx'}, {'instIndex': 14, 'instruction': 'leaq\t0x2ae14(%rdi), %r12'}, {'instIndex': 15, 'instruction': 'leaq\t0x2ae12(%rdi), %r13'}, {'instIndex': 17, 'instruction': 'leal\t-1(%rax), %edx'}, {'instIndex': 18, 'instruction': 'leaq\tbands_warped.4(%rip), %rax'}, {'instIndex': 19, 'instruction': 'movw\t%cx, 0x1e(%rsp)'}, {'instIndex': 20, 'instruction': 'movss\t(%rax,%rdx,4), %xmm2'}, {'instIndex': 21, 'instruction': 'movl\t%ecx, %ebp'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/gcc_before/O2/aacsbr.o
Binary file does not exist.
{'sbr_make_f_tablelim': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 13, 'instruction': 'movl\t0x44(%rdi), %ecx'}, {'instIndex': 14, 'instruction': 'leaq\t0x2ae14(%rdi), %r12'}, {'instIndex': 15, 'instruction': 'leaq\t0x2ae12(%rdi), %r13'}, {'instIndex': 17, 'instruction': 'leal\t-1(%rax), %edx'}, {'instIndex': 18, 'instruction': 'leaq\tbands_warped.4(%rip), %rax'}, {'instIndex': 19, 'instruction': 'movw\t%cx, 0x1e(%rsp)'}, {'instIndex': 20, 'instruction': 'movss\t(%rax,%rdx,4), %xmm2'}, {'instIndex': 21, 'instruction': 'movl\t%ecx, %ebp'}]}]}
The case of compiler gcc with optimization O3.
Patched source code file: aacsbr.c
Patched function: 1---static void sbr_make_f_tablelim 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/gcc_before/O3/aacsbr_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/gcc_before/O3/aacsbr_gcc.s---sbr_make_f_tablelim---before
function id: 824
function flag: True
Assembly file error information: list index out of range
Traceback (most recent call last):
  File "extract_patched_slicing_info.py", line 807, in patched_commit_patched_tag_handle
    = extract_patched_assembly_code_from_debug_file(assembly_file, func_name,
  File "extract_patched_slicing_info.py", line 163, in extract_patched_assembly_code_from_debug_file
    cur_debug_info = {"line": debug_line[1],
IndexError: list index out of range

/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/gcc_before/O3/aacsbr.o
Binary file does not exist.
{'sbr_make_f_tablelim': []}
The case of compiler gcc with optimization Os.
Patched source code file: aacsbr.c
Patched function: 1---static void sbr_make_f_tablelim 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/gcc_before/Os/aacsbr_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/gcc_before/Os/aacsbr_gcc.s---sbr_make_f_tablelim---before
function id: 451
function flag: True
Assembly file error information: list index out of range
Traceback (most recent call last):
  File "extract_patched_slicing_info.py", line 807, in patched_commit_patched_tag_handle
    = extract_patched_assembly_code_from_debug_file(assembly_file, func_name,
  File "extract_patched_slicing_info.py", line 163, in extract_patched_assembly_code_from_debug_file
    cur_debug_info = {"line": debug_line[1],
IndexError: list index out of range

/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/gcc_before/Os/aacsbr.o
Binary file does not exist.
{'sbr_make_f_tablelim': []}
The case of compiler clang with optimization no.
Patched source code file: aacsbr.c
Patched function: 1---static void sbr_make_f_tablelim 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_before/no/aacsbr.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_before/no/aacsbr.s---sbr_make_f_tablelim---before
function id: 25
function flag: True
There are 192 instructions for function: sbr_make_f_tablelim in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '174', 'end': 180}, 'before': {'start': '174', 'end': 180}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 5, 'instruction': 'movq\t0x30(%rsp), %rax'}, {'instIndex': 6, 'instruction': 'movl\t0x18(%rax), %eax'}, {'instIndex': 7, 'instruction': 'subl\t$1, %eax'}, {'instIndex': 8, 'instruction': 'movl\t%eax, %eax'}, {'instIndex': 9, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 10, 'instruction': 'leaq\tsbr_make_f_tablelim.bands_warped(%rip), %rax'}, {'instIndex': 11, 'instruction': 'movss\t(%rax,%rcx,4), %xmm0            # xmm0 = mem[0],zero,zero,zero'}, {'instIndex': 12, 'instruction': 'movss\t%xmm0, 0x28(%rsp)'}, {'instIndex': 13, 'instruction': 'movq\t0x30(%rsp), %rax'}, {'instIndex': 14, 'instruction': 'addq\t$0x2ae12, %rax                   # imm = 0x2AE12'}, {'instIndex': 15, 'instruction': 'addq\t$2, %rax'}, {'instIndex': 16, 'instruction': 'movq\t%rax, 0x10(%rsp)'}, {'instIndex': 17, 'instruction': 'movq\t0x30(%rsp), %rax'}, {'instIndex': 18, 'instruction': 'addq\t$0x2ae12, %rax                   # imm = 0x2AE12'}, {'instIndex': 19, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 20, 'instruction': 'movq\t0x30(%rsp), %rax'}, {'instIndex': 21, 'instruction': 'movl\t0x44(%rax), %eax'}, {'instIndex': 22, 'instruction': 'movw\t%ax, 0x1e(%rsp)'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_before/no/aacsbr.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_before/no/aacsbr.o---before
The extraction of function: sbr_make_f_tablelim
Analyzing the binaries to generate subCFGs from patched function ...
It has 1178 nodes and 2072 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 192 instructions in binary file.
[4216936]
The execution time of patched subCFG information extraction via angr: 0:00:01.920782
{'sbr_make_f_tablelim': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405914>, <DisassemblerInsn "add" for 0x405919>, <DisassemblerInsn "mov" for 0x405920>, <DisassemblerInsn "add" for 0x405925>, <DisassemblerInsn "mov" for 0x40592c>, <DisassemblerInsn "mov" for 0x405931>, <DisassemblerInsn "add" for 0x405937>, <DisassemblerInsn "mov" for 0x40593a>, <DisassemblerInsn "mov" for 0x40593c>, <DisassemblerInsn "shl" for 0x40593e>, <DisassemblerInsn "call" for 0x405941>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4058d3>, <DisassemblerInsn "sub" for 0x4058d7>, <DisassemblerInsn "cdqe" for 0x4058da>, <DisassemblerInsn "movsx" for 0x4058dc>, <DisassemblerInsn "mov" for 0x4058e1>, <DisassemblerInsn "mov" for 0x4058e6>, <DisassemblerInsn "sub" for 0x4058ea>, <DisassemblerInsn "movsxd" for 0x4058ed>, <DisassemblerInsn "movzx" for 0x4058f0>, <DisassemblerInsn "add" for 0x4058f8>, <DisassemblerInsn "mov" for 0x4058fa>, <DisassemblerInsn "movsxd" for 0x4058fd>, <DisassemblerInsn "mov" for 0x405902>, <DisassemblerInsn "mov" for 0x405907>, <DisassemblerInsn "add" for 0x40590b>, <DisassemblerInsn "mov" for 0x40590e>, <DisassemblerInsn "jmp" for 0x405912>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x405850>, <DisassemblerInsn "mov" for 0x405854>, <DisassemblerInsn "mov" for 0x405859>, <DisassemblerInsn "cmp" for 0x40585e>, <DisassemblerInsn "jbe" for 0x405862>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405868>, <DisassemblerInsn "mov" for 0x40586d>, <DisassemblerInsn "sub" for 0x405870>, <DisassemblerInsn "mov" for 0x405873>, <DisassemblerInsn "mov" for 0x405875>, <DisassemblerInsn "lea" for 0x405877>, <DisassemblerInsn "movss" for 0x40587e>, <DisassemblerInsn "movss" for 0x405883>, <DisassemblerInsn "mov" for 0x405889>, <DisassemblerInsn "add" for 0x40588e>, <DisassemblerInsn "add" for 0x405894>, <DisassemblerInsn "mov" for 0x405898>, <DisassemblerInsn "mov" for 0x40589d>, <DisassemblerInsn "add" for 0x4058a2>, <DisassemblerInsn "mov" for 0x4058a8>, <DisassemblerInsn "mov" for 0x4058ad>, <DisassemblerInsn "mov" for 0x4058b2>, <DisassemblerInsn "mov" for 0x4058b5>, <DisassemblerInsn "mov" for 0x4058ba>, <DisassemblerInsn "mov" for 0x4058c2>, <DisassemblerInsn "mov" for 0x4058c6>, <DisassemblerInsn "cmp" for 0x4058cb>, <DisassemblerInsn "ja" for 0x4058d1>]'}], 'cfg_block_detailed_info': [{'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<add~~rdi, 0x2ae12>', '<mov~~rsi, qword ptr [rsp + 0x30]>', '<add~~rsi, 0x2ad72>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rax + 0x2ad00]>', '<add~~eax, 1>', '<mov~~eax, eax>', '<mov~~edx, eax>', '<shl~~rdx, 1>', '<call~~0x500050>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2c]>', '<sub~~eax, 1>', '<cdqe~~>', '<movsx~~eax, word ptr [rsp + rax*2 + 0x1e]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<mov~~edx, dword ptr [rsp + 0x2c]>', '<sub~~edx, 1>', '<movsxd~~rdx, edx>', '<movzx~~ecx, byte ptr [rcx + rdx + 0x2ae50]>', '<add~~eax, ecx>', '<mov~~cx, ax>', '<movsxd~~rax, dword ptr [rsp + 0x2c]>', '<mov~~word ptr [rsp + rax*2 + 0x1e], cx>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<jmp~~0x4058c2>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x38>', '<mov~~qword ptr [rsp + 0x30], rdi>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<cmp~~dword ptr [rax + 0x18], 0>', '<jbe~~0x405b51>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rax + 0x18]>', '<sub~~eax, 1>', '<mov~~eax, eax>', '<mov~~ecx, eax>', '<lea~~rax, [rip + 0x552e]>', '<movss~~xmm0, dword ptr [rax + rcx*4]>', '<movss~~dword ptr [rsp + 0x28], xmm0>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<add~~rax, 0x2ae12>', '<add~~rax, 2>', '<mov~~qword ptr [rsp + 0x10], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<add~~rax, 0x2ae12>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rax + 0x44]>', '<mov~~word ptr [rsp + 0x1e], ax>', '<mov~~dword ptr [rsp + 0x2c], 1>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<cmp~~eax, dword ptr [rcx + 0x2ae4c]>', '<ja~~0x405914>']}], 'cfg_edge_info': [(2, 3), (0, 2), (2, 4)]}]}
{'sbr_make_f_tablelim': [4216936]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_before/no/aacsbr.o---before
The extraction of function: sbr_make_f_tablelim
[4216936]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 45 nodes and 64 edges in CFGEmulated.
It has 45 nodes and 59 edges in CDG.
It has 809 nodes and 1106 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4216936]
{4217475, 4217108, 4217240, 4217756, 4217629, 4217374, 4217509, 4217409, 4217026, 4217158, 4217545, 4217674, 4217295, 4216912, 4217681, 4217679, 4217043, 4217172, 4216936, 4217579, 4217455, 4217331}
[16, 0, 44, 9, 12, 33, 13, 3, 1, 21, 4, 20, 19, 7, 31, 38, 18, 15, 5, 23, 14, 28, 2, 17, 42, 41, 8]
The execution time of patched slicing information extraction via angr: 0:00:06.496703
{'sbr_make_f_tablelim': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405a41>, <DisassemblerInsn "mov" for 0x405a46>, <DisassemblerInsn "add" for 0x405a49>, <DisassemblerInsn "mov" for 0x405a4d>, <DisassemblerInsn "mov" for 0x405a52>, <DisassemblerInsn "mov" for 0x405a55>, <DisassemblerInsn "mov" for 0x405a5a>, <DisassemblerInsn "add" for 0x405a5d>, <DisassemblerInsn "mov" for 0x405a61>, <DisassemblerInsn "mov" for 0x405a66>, <DisassemblerInsn "jmp" for 0x405a6a>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x405850>, <DisassemblerInsn "mov" for 0x405854>, <DisassemblerInsn "mov" for 0x405859>, <DisassemblerInsn "cmp" for 0x40585e>, <DisassemblerInsn "jbe" for 0x405862>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x405b46>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405954>, <DisassemblerInsn "add" for 0x405959>, <DisassemblerInsn "mov" for 0x405960>, <DisassemblerInsn "mov" for 0x405965>, <DisassemblerInsn "shl" for 0x40596b>, <DisassemblerInsn "add" for 0x40596e>, <DisassemblerInsn "add" for 0x405971>, <DisassemblerInsn "lea" for 0x405975>, <DisassemblerInsn "add" for 0x40597a>, <DisassemblerInsn "mov" for 0x40597e>, <DisassemblerInsn "mov" for 0x405983>, <DisassemblerInsn "sub" for 0x405989>, <DisassemblerInsn "mov" for 0x40598c>, <DisassemblerInsn "mov" for 0x40598e>, <DisassemblerInsn "shl" for 0x405990>, <DisassemblerInsn "call" for 0x405993>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4059cf>, <DisassemblerInsn "mov" for 0x4059d4>, <DisassemblerInsn "mov" for 0x4059da>, <DisassemblerInsn "add" for 0x4059df>, <DisassemblerInsn "sub" for 0x4059e5>, <DisassemblerInsn "mov" for 0x4059e8>, <DisassemblerInsn "mov" for 0x4059ed>, <DisassemblerInsn "mov" for 0x4059f3>, <DisassemblerInsn "mov" for 0x4059f8>, <DisassemblerInsn "add" for 0x4059fd>, <DisassemblerInsn "mov" for 0x405a04>, <DisassemblerInsn "mov" for 0x405a09>, <DisassemblerInsn "shl" for 0x405a0f>, <DisassemblerInsn "add" for 0x405a12>, <DisassemblerInsn "cmp" for 0x405a15>, <DisassemblerInsn "jae" for 0x405a18>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405c00>, <DisassemblerInsn "mov" for 0x405c03>, <DisassemblerInsn "mov" for 0x405c08>, <DisassemblerInsn "mov" for 0x405c0c>, <DisassemblerInsn "mov" for 0x405c11>, <DisassemblerInsn "mov" for 0x405c19>, <DisassemblerInsn "cmp" for 0x405c1d>, <DisassemblerInsn "jg" for 0x405c21>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405a1e>, <DisassemblerInsn "movzx" for 0x405a23>, <DisassemblerInsn "cvtsi2ss" for 0x405a26>, <DisassemblerInsn "mov" for 0x405a2a>, <DisassemblerInsn "movzx" for 0x405a2f>, <DisassemblerInsn "cvtsi2ss" for 0x405a32>, <DisassemblerInsn "mulss" for 0x405a36>, <DisassemblerInsn "ucomiss" for 0x405a3c>, <DisassemblerInsn "jb" for 0x405a3f>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4058d3>, <DisassemblerInsn "sub" for 0x4058d7>, <DisassemblerInsn "cdqe" for 0x4058da>, <DisassemblerInsn "movsx" for 0x4058dc>, <DisassemblerInsn "mov" for 0x4058e1>, <DisassemblerInsn "mov" for 0x4058e6>, <DisassemblerInsn "sub" for 0x4058ea>, <DisassemblerInsn "movsxd" for 0x4058ed>, <DisassemblerInsn "movzx" for 0x4058f0>, <DisassemblerInsn "add" for 0x4058f8>, <DisassemblerInsn "mov" for 0x4058fa>, <DisassemblerInsn "movsxd" for 0x4058fd>, <DisassemblerInsn "mov" for 0x405902>, <DisassemblerInsn "mov" for 0x405907>, <DisassemblerInsn "add" for 0x40590b>, <DisassemblerInsn "mov" for 0x40590e>, <DisassemblerInsn "jmp" for 0x405912>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405b51>, <DisassemblerInsn "mov" for 0x405b56>, <DisassemblerInsn "mov" for 0x405b5d>, <DisassemblerInsn "mov" for 0x405b62>, <DisassemblerInsn "mov" for 0x405b69>, <DisassemblerInsn "mov" for 0x405b6e>, <DisassemblerInsn "mov" for 0x405b73>, <DisassemblerInsn "mov" for 0x405b79>, <DisassemblerInsn "mov" for 0x405b81>, <DisassemblerInsn "mov" for 0x405b86>, <DisassemblerInsn "mov" for 0x405b8d>, <DisassemblerInsn "mov" for 0x405b92>, <DisassemblerInsn "add" for 0x405b9c>, <DisassemblerInsn "ret" for 0x405ba0>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x405b48>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405914>, <DisassemblerInsn "add" for 0x405919>, <DisassemblerInsn "mov" for 0x405920>, <DisassemblerInsn "add" for 0x405925>, <DisassemblerInsn "mov" for 0x40592c>, <DisassemblerInsn "mov" for 0x405931>, <DisassemblerInsn "add" for 0x405937>, <DisassemblerInsn "mov" for 0x40593a>, <DisassemblerInsn "mov" for 0x40593c>, <DisassemblerInsn "shl" for 0x40593e>, <DisassemblerInsn "call" for 0x405941>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x405b4a>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "lea" for 0x405a83>, <DisassemblerInsn "mov" for 0x405a88>, <DisassemblerInsn "mov" for 0x405a8d>, <DisassemblerInsn "mov" for 0x405a93>, <DisassemblerInsn "movsx" for 0x405a98>, <DisassemblerInsn "call" for 0x405a9b>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405946>, <DisassemblerInsn "cmp" for 0x40594b>, <DisassemblerInsn "jbe" for 0x405952>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "lea" for 0x405ac9>, <DisassemblerInsn "mov" for 0x405ace>, <DisassemblerInsn "mov" for 0x405ad3>, <DisassemblerInsn "mov" for 0x405ad9>, <DisassemblerInsn "movsx" for 0x405ade>, <DisassemblerInsn "call" for 0x405ae1>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x405ae6>, <DisassemblerInsn "jne" for 0x405ae9>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405aa5>, <DisassemblerInsn "add" for 0x405aaa>, <DisassemblerInsn "mov" for 0x405aae>, <DisassemblerInsn "mov" for 0x405ab3>, <DisassemblerInsn "mov" for 0x405ab8>, <DisassemblerInsn "add" for 0x405abe>, <DisassemblerInsn "mov" for 0x405ac1>, <DisassemblerInsn "jmp" for 0x405ac7>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405a6f>, <DisassemblerInsn "movzx" for 0x405a74>, <DisassemblerInsn "mov" for 0x405a77>, <DisassemblerInsn "movzx" for 0x405a7c>, <DisassemblerInsn "cmp" for 0x405a7f>, <DisassemblerInsn "je" for 0x405a81>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4058c2>, <DisassemblerInsn "mov" for 0x4058c6>, <DisassemblerInsn "cmp" for 0x4058cb>, <DisassemblerInsn "ja" for 0x4058d1>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4059f3>, <DisassemblerInsn "mov" for 0x4059f8>, <DisassemblerInsn "add" for 0x4059fd>, <DisassemblerInsn "mov" for 0x405a04>, <DisassemblerInsn "mov" for 0x405a09>, <DisassemblerInsn "shl" for 0x405a0f>, <DisassemblerInsn "add" for 0x405a12>, <DisassemblerInsn "cmp" for 0x405a15>, <DisassemblerInsn "jae" for 0x405a18>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x405b4f>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x405aa0>, <DisassemblerInsn "jne" for 0x405aa3>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405868>, <DisassemblerInsn "mov" for 0x40586d>, <DisassemblerInsn "sub" for 0x405870>, <DisassemblerInsn "mov" for 0x405873>, <DisassemblerInsn "mov" for 0x405875>, <DisassemblerInsn "lea" for 0x405877>, <DisassemblerInsn "movss" for 0x40587e>, <DisassemblerInsn "movss" for 0x405883>, <DisassemblerInsn "mov" for 0x405889>, <DisassemblerInsn "add" for 0x40588e>, <DisassemblerInsn "add" for 0x405894>, <DisassemblerInsn "mov" for 0x405898>, <DisassemblerInsn "mov" for 0x40589d>, <DisassemblerInsn "add" for 0x4058a2>, <DisassemblerInsn "mov" for 0x4058a8>, <DisassemblerInsn "mov" for 0x4058ad>, <DisassemblerInsn "mov" for 0x4058b2>, <DisassemblerInsn "mov" for 0x4058b5>, <DisassemblerInsn "mov" for 0x4058ba>, <DisassemblerInsn "mov" for 0x4058c2>, <DisassemblerInsn "mov" for 0x4058c6>, <DisassemblerInsn "cmp" for 0x4058cb>, <DisassemblerInsn "ja" for 0x4058d1>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "add" for 0x405b9c>, <DisassemblerInsn "ret" for 0x405ba0>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405b1d>, <DisassemblerInsn "mov" for 0x405b22>, <DisassemblerInsn "add" for 0x405b25>, <DisassemblerInsn "mov" for 0x405b29>, <DisassemblerInsn "mov" for 0x405b2e>, <DisassemblerInsn "mov" for 0x405b31>, <DisassemblerInsn "mov" for 0x405b36>, <DisassemblerInsn "add" for 0x405b39>, <DisassemblerInsn "mov" for 0x405b3d>, <DisassemblerInsn "mov" for 0x405b42>, <DisassemblerInsn "jmp" for 0x405b46>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405aeb>, <DisassemblerInsn "mov" for 0x405af0>, <DisassemblerInsn "add" for 0x405af3>, <DisassemblerInsn "mov" for 0x405af7>, <DisassemblerInsn "mov" for 0x405afc>, <DisassemblerInsn "mov" for 0x405aff>, <DisassemblerInsn "mov" for 0x405b04>, <DisassemblerInsn "mov" for 0x405b07>, <DisassemblerInsn "mov" for 0x405b0c>, <DisassemblerInsn "add" for 0x405b12>, <DisassemblerInsn "mov" for 0x405b15>, <DisassemblerInsn "jmp" for 0x405b1b>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405998>, <DisassemblerInsn "add" for 0x40599d>, <DisassemblerInsn "mov" for 0x4059a4>, <DisassemblerInsn "mov" for 0x4059a9>, <DisassemblerInsn "mov" for 0x4059af>, <DisassemblerInsn "add" for 0x4059b4>, <DisassemblerInsn "mov" for 0x4059ba>, <DisassemblerInsn "mov" for 0x4059bc>, <DisassemblerInsn "mov" for 0x4059be>, <DisassemblerInsn "lea" for 0x4059c3>, <DisassemblerInsn "call" for 0x4059ca>]'}], 'cfg_block_detailed_info': [{'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rcx, rax>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x10], rcx>', '<mov~~cx, word ptr [rax]>', '<mov~~rax, qword ptr [rsp + 8]>', '<mov~~rdx, rax>', '<add~~rdx, 2>', '<mov~~qword ptr [rsp + 8], rdx>', '<mov~~word ptr [rax + 2], cx>', '<jmp~~0x405b4a>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x38>', '<mov~~qword ptr [rsp + 0x30], rdi>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<cmp~~dword ptr [rax + 0x18], 0>', '<jbe~~0x405b51>']}, {'block_Idx': 44, 'blockInsts': ['<jmp~~0x405b48>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<add~~rdi, 0x2ae12>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rax + 0x2ad00]>', '<shl~~rax, 1>', '<add~~rdi, rax>', '<add~~rdi, 2>', '<lea~~rsi, [rsp + 0x1e]>', '<add~~rsi, 2>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rax + 0x2ae4c]>', '<sub~~eax, 1>', '<mov~~eax, eax>', '<mov~~edx, eax>', '<shl~~rdx, 1>', '<call~~0x500050>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~ecx, dword ptr [rax + 0x2ad00]>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<add~~ecx, dword ptr [rax + 0x2ae4c]>', '<sub~~ecx, 1>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~dword ptr [rax + 0x2ad0c], ecx>', '<mov~~rax, qword ptr [rsp + 8]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<add~~rcx, 0x2ae12>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<mov~~edx, dword ptr [rdx + 0x2ad0c]>', '<shl~~rdx, 1>', '<add~~rcx, rdx>', '<cmp~~rax, rcx>', '<jae~~0x405b4f>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~ax, dx>', '<mov~~qword ptr [rsp - 0x10], rdi>', '<mov~~dword ptr [rsp - 0x14], esi>', '<mov~~word ptr [rsp - 0x16], ax>', '<mov~~dword ptr [rsp - 0x1c], 0>', '<mov~~eax, dword ptr [rsp - 0x1c]>', '<cmp~~eax, dword ptr [rsp - 0x14]>', '<jg~~0x405c53>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<movzx~~eax, word ptr [rax]>', '<cvtsi2ss~~xmm0, eax>', '<mov~~rax, qword ptr [rsp + 8]>', '<movzx~~eax, word ptr [rax]>', '<cvtsi2ss~~xmm1, eax>', '<mulss~~xmm1, dword ptr [rsp + 0x28]>', '<ucomiss~~xmm0, xmm1>', '<jb~~0x405a6f>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2c]>', '<sub~~eax, 1>', '<cdqe~~>', '<movsx~~eax, word ptr [rsp + rax*2 + 0x1e]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<mov~~edx, dword ptr [rsp + 0x2c]>', '<sub~~edx, 1>', '<movsxd~~rdx, edx>', '<movzx~~ecx, byte ptr [rcx + rdx + 0x2ae50]>', '<add~~eax, ecx>', '<mov~~cx, ax>', '<movsxd~~rax, dword ptr [rsp + 0x2c]>', '<mov~~word ptr [rsp + rax*2 + 0x1e], cx>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<jmp~~0x4058c2>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~cx, word ptr [rax + 0x2ad72]>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~word ptr [rax + 0x2ae12], cx>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<mov~~ecx, dword ptr [rcx + 0x2ad00]>', '<mov~~cx, word ptr [rax + rcx*2 + 0x2ad72]>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~word ptr [rax + 0x2ae14], cx>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~dword ptr [rax + 0x2ad0c], 1>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 21, 'blockInsts': ['<jmp~~0x405b4a>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<add~~rdi, 0x2ae12>', '<mov~~rsi, qword ptr [rsp + 0x30]>', '<add~~rsi, 0x2ad72>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rax + 0x2ad00]>', '<add~~eax, 1>', '<mov~~eax, eax>', '<mov~~edx, eax>', '<shl~~rdx, 1>', '<call~~0x500050>']}, {'block_Idx': 20, 'blockInsts': ['<jmp~~0x4059f3>']}, {'block_Idx': 19, 'blockInsts': ['<lea~~rdi, [rsp + 0x1e]>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~esi, dword ptr [rax + 0x2ae4c]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<movsx~~edx, word ptr [rax]>', '<call~~0x405c00>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x30]>', '<cmp~~dword ptr [rax + 0x2ae4c], 1>', '<jbe~~0x405998>']}, {'block_Idx': 31, 'blockInsts': ['<lea~~rdi, [rsp + 0x1e]>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~esi, dword ptr [rax + 0x2ae4c]>', '<mov~~rax, qword ptr [rsp + 8]>', '<movsx~~edx, word ptr [rax]>', '<call~~0x405c00>']}, {'block_Idx': 38, 'blockInsts': ['<cmp~~eax, 0>', '<jne~~0x405b1d>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<add~~rax, 2>', '<mov~~qword ptr [rsp + 0x10], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~ecx, dword ptr [rax + 0x2ad0c]>', '<add~~ecx, -1>', '<mov~~dword ptr [rax + 0x2ad0c], ecx>', '<jmp~~0x405b48>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<movzx~~eax, word ptr [rax]>', '<mov~~rcx, qword ptr [rsp + 8]>', '<movzx~~ecx, word ptr [rcx]>', '<cmp~~eax, ecx>', '<je~~0x405aa5>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2c]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<cmp~~eax, dword ptr [rcx + 0x2ae4c]>', '<ja~~0x405914>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<add~~rcx, 0x2ae12>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<mov~~edx, dword ptr [rdx + 0x2ad0c]>', '<shl~~rdx, 1>', '<add~~rcx, rdx>', '<cmp~~rax, rcx>', '<jae~~0x405b4f>']}, {'block_Idx': 14, 'blockInsts': ['<jmp~~0x405b9c>']}, {'block_Idx': 28, 'blockInsts': ['<cmp~~eax, 0>', '<jne~~0x405ac9>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rax + 0x18]>', '<sub~~eax, 1>', '<mov~~eax, eax>', '<mov~~ecx, eax>', '<lea~~rax, [rip + 0x552e]>', '<movss~~xmm0, dword ptr [rax + rcx*4]>', '<movss~~dword ptr [rsp + 0x28], xmm0>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<add~~rax, 0x2ae12>', '<add~~rax, 2>', '<mov~~qword ptr [rsp + 0x10], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<add~~rax, 0x2ae12>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rax + 0x44]>', '<mov~~word ptr [rsp + 0x1e], ax>', '<mov~~dword ptr [rsp + 0x2c], 1>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<cmp~~eax, dword ptr [rcx + 0x2ae4c]>', '<ja~~0x405914>']}, {'block_Idx': 17, 'blockInsts': ['<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 42, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rcx, rax>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x10], rcx>', '<mov~~cx, word ptr [rax]>', '<mov~~rax, qword ptr [rsp + 8]>', '<mov~~rdx, rax>', '<add~~rdx, 2>', '<mov~~qword ptr [rsp + 8], rdx>', '<mov~~word ptr [rax + 2], cx>', '<jmp~~0x405b48>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rcx, rax>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x10], rcx>', '<mov~~cx, word ptr [rax]>', '<mov~~rax, qword ptr [rsp + 8]>', '<mov~~word ptr [rax], cx>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~ecx, dword ptr [rax + 0x2ad0c]>', '<add~~ecx, -1>', '<mov~~dword ptr [rax + 0x2ad0c], ecx>', '<jmp~~0x405b46>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<add~~rdi, 0x2ae12>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rax + 0x2ae4c]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<add~~eax, dword ptr [rcx + 0x2ad00]>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<mov~~edx, 2>', '<lea~~rcx, [rip + 0x216]>', '<call~~0x500060>']}], 'cfg_edge_info': [(16, 20), (5, 4), (20, 23), (23, 13), (12, 13), (38, 41), (0, 2), (28, 18), (9, 8), (8, 12), (31, 38), (19, 33), (5, 3), (0, 1), (2, 4), (13, 16), (7, 9), (15, 19), (41, 44), (18, 21), (4, 7), (3, 5), (12, 14), (23, 14), (21, 20), (38, 42), (14, 17), (31, 33), (2, 3), (42, 21), (28, 31), (19, 28), (13, 15), (15, 18), (7, 8)], 'cdg_edge_info': [(23, 13), (12, 13), (0, 2), (0, 8), (0, 14), (2, 5), (0, 17), (15, 14), (15, 17), (15, 23), (15, 20), (5, 3), (0, 1), (0, 7), (0, 4), (13, 16), (7, 9), (15, 19), (23, 23), (12, 23), (5, 5), (12, 20), (23, 20), (2, 3), (0, 12), (13, 18), (13, 15)], 'ddg_edge_info': [(4, 9), (9, 8), (0, 5), (19, 18), (8, 18), (41, 15), (16, 13), (41, 42), (42, 41), (18, 19), (16, 31), (2, 41), (12, 18), (41, 17), (13, 19), (1, 17), (16, 15), (31, 15), (16, 42), (31, 42), (41, 19), (42, 18), (18, 23), (5, 7), (0, 2), (16, 19), (18, 16), (31, 19), (5, 9), (42, 13), (41, 23), (13, 16), (2, 13), (42, 31), (2, 31), (3, 5), (41, 16), (42, 15), (8, 13), (2, 15), (19, 31), (16, 23), (2, 42), (31, 23), (18, 41), (41, 18), (8, 15), (42, 17), (31, 16), (4, 8), (0, 4), (42, 19), (8, 17), (2, 19), (31, 18), (12, 23), (41, 13), (2, 3), (8, 19), (16, 41), (8, 12), (31, 41), (42, 23), (2, 5), (2, 23), (31, 13), (18, 13), (0, 1), (42, 16), (19, 23), (8, 23), (2, 16), (16, 18), (18, 15), (4, 7), (5, 8), (18, 42), (0, 3), (8, 16), (2, 18), (13, 15), (41, 31)]}]}
{'sbr_make_f_tablelim': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 5, 'instruction': 'movq\t0x30(%rsp), %rax'}, {'instIndex': 6, 'instruction': 'movl\t0x18(%rax), %eax'}, {'instIndex': 7, 'instruction': 'subl\t$1, %eax'}, {'instIndex': 8, 'instruction': 'movl\t%eax, %eax'}, {'instIndex': 9, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 10, 'instruction': 'leaq\tsbr_make_f_tablelim.bands_warped(%rip), %rax'}, {'instIndex': 11, 'instruction': 'movss\t(%rax,%rcx,4), %xmm0            # xmm0 = mem[0],zero,zero,zero'}, {'instIndex': 12, 'instruction': 'movss\t%xmm0, 0x28(%rsp)'}, {'instIndex': 13, 'instruction': 'movq\t0x30(%rsp), %rax'}, {'instIndex': 14, 'instruction': 'addq\t$0x2ae12, %rax                   # imm = 0x2AE12'}, {'instIndex': 15, 'instruction': 'addq\t$2, %rax'}, {'instIndex': 16, 'instruction': 'movq\t%rax, 0x10(%rsp)'}, {'instIndex': 17, 'instruction': 'movq\t0x30(%rsp), %rax'}, {'instIndex': 18, 'instruction': 'addq\t$0x2ae12, %rax                   # imm = 0x2AE12'}, {'instIndex': 19, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 20, 'instruction': 'movq\t0x30(%rsp), %rax'}, {'instIndex': 21, 'instruction': 'movl\t0x44(%rax), %eax'}, {'instIndex': 22, 'instruction': 'movw\t%ax, 0x1e(%rsp)'}]}]}
The case of compiler clang with optimization O0.
Patched source code file: aacsbr.c
Patched function: 1---static void sbr_make_f_tablelim 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_before/O0/aacsbr.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_before/O0/aacsbr.s---sbr_make_f_tablelim---before
function id: 25
function flag: True
There are 192 instructions for function: sbr_make_f_tablelim in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '174', 'end': 180}, 'before': {'start': '174', 'end': 180}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 5, 'instruction': 'movq\t0x30(%rsp), %rax'}, {'instIndex': 6, 'instruction': 'movl\t0x18(%rax), %eax'}, {'instIndex': 7, 'instruction': 'subl\t$1, %eax'}, {'instIndex': 8, 'instruction': 'movl\t%eax, %eax'}, {'instIndex': 9, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 10, 'instruction': 'leaq\tsbr_make_f_tablelim.bands_warped(%rip), %rax'}, {'instIndex': 11, 'instruction': 'movss\t(%rax,%rcx,4), %xmm0            # xmm0 = mem[0],zero,zero,zero'}, {'instIndex': 12, 'instruction': 'movss\t%xmm0, 0x28(%rsp)'}, {'instIndex': 13, 'instruction': 'movq\t0x30(%rsp), %rax'}, {'instIndex': 14, 'instruction': 'addq\t$0x2ae12, %rax                   # imm = 0x2AE12'}, {'instIndex': 15, 'instruction': 'addq\t$2, %rax'}, {'instIndex': 16, 'instruction': 'movq\t%rax, 0x10(%rsp)'}, {'instIndex': 17, 'instruction': 'movq\t0x30(%rsp), %rax'}, {'instIndex': 18, 'instruction': 'addq\t$0x2ae12, %rax                   # imm = 0x2AE12'}, {'instIndex': 19, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 20, 'instruction': 'movq\t0x30(%rsp), %rax'}, {'instIndex': 21, 'instruction': 'movl\t0x44(%rax), %eax'}, {'instIndex': 22, 'instruction': 'movw\t%ax, 0x1e(%rsp)'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_before/O0/aacsbr.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_before/O0/aacsbr.o---before
The extraction of function: sbr_make_f_tablelim
Analyzing the binaries to generate subCFGs from patched function ...
It has 1178 nodes and 2072 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 192 instructions in binary file.
[4216936]
The execution time of patched subCFG information extraction via angr: 0:00:01.989651
{'sbr_make_f_tablelim': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405914>, <DisassemblerInsn "add" for 0x405919>, <DisassemblerInsn "mov" for 0x405920>, <DisassemblerInsn "add" for 0x405925>, <DisassemblerInsn "mov" for 0x40592c>, <DisassemblerInsn "mov" for 0x405931>, <DisassemblerInsn "add" for 0x405937>, <DisassemblerInsn "mov" for 0x40593a>, <DisassemblerInsn "mov" for 0x40593c>, <DisassemblerInsn "shl" for 0x40593e>, <DisassemblerInsn "call" for 0x405941>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4058d3>, <DisassemblerInsn "sub" for 0x4058d7>, <DisassemblerInsn "cdqe" for 0x4058da>, <DisassemblerInsn "movsx" for 0x4058dc>, <DisassemblerInsn "mov" for 0x4058e1>, <DisassemblerInsn "mov" for 0x4058e6>, <DisassemblerInsn "sub" for 0x4058ea>, <DisassemblerInsn "movsxd" for 0x4058ed>, <DisassemblerInsn "movzx" for 0x4058f0>, <DisassemblerInsn "add" for 0x4058f8>, <DisassemblerInsn "mov" for 0x4058fa>, <DisassemblerInsn "movsxd" for 0x4058fd>, <DisassemblerInsn "mov" for 0x405902>, <DisassemblerInsn "mov" for 0x405907>, <DisassemblerInsn "add" for 0x40590b>, <DisassemblerInsn "mov" for 0x40590e>, <DisassemblerInsn "jmp" for 0x405912>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x405850>, <DisassemblerInsn "mov" for 0x405854>, <DisassemblerInsn "mov" for 0x405859>, <DisassemblerInsn "cmp" for 0x40585e>, <DisassemblerInsn "jbe" for 0x405862>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405868>, <DisassemblerInsn "mov" for 0x40586d>, <DisassemblerInsn "sub" for 0x405870>, <DisassemblerInsn "mov" for 0x405873>, <DisassemblerInsn "mov" for 0x405875>, <DisassemblerInsn "lea" for 0x405877>, <DisassemblerInsn "movss" for 0x40587e>, <DisassemblerInsn "movss" for 0x405883>, <DisassemblerInsn "mov" for 0x405889>, <DisassemblerInsn "add" for 0x40588e>, <DisassemblerInsn "add" for 0x405894>, <DisassemblerInsn "mov" for 0x405898>, <DisassemblerInsn "mov" for 0x40589d>, <DisassemblerInsn "add" for 0x4058a2>, <DisassemblerInsn "mov" for 0x4058a8>, <DisassemblerInsn "mov" for 0x4058ad>, <DisassemblerInsn "mov" for 0x4058b2>, <DisassemblerInsn "mov" for 0x4058b5>, <DisassemblerInsn "mov" for 0x4058ba>, <DisassemblerInsn "mov" for 0x4058c2>, <DisassemblerInsn "mov" for 0x4058c6>, <DisassemblerInsn "cmp" for 0x4058cb>, <DisassemblerInsn "ja" for 0x4058d1>]'}], 'cfg_block_detailed_info': [{'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<add~~rdi, 0x2ae12>', '<mov~~rsi, qword ptr [rsp + 0x30]>', '<add~~rsi, 0x2ad72>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rax + 0x2ad00]>', '<add~~eax, 1>', '<mov~~eax, eax>', '<mov~~edx, eax>', '<shl~~rdx, 1>', '<call~~0x500050>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2c]>', '<sub~~eax, 1>', '<cdqe~~>', '<movsx~~eax, word ptr [rsp + rax*2 + 0x1e]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<mov~~edx, dword ptr [rsp + 0x2c]>', '<sub~~edx, 1>', '<movsxd~~rdx, edx>', '<movzx~~ecx, byte ptr [rcx + rdx + 0x2ae50]>', '<add~~eax, ecx>', '<mov~~cx, ax>', '<movsxd~~rax, dword ptr [rsp + 0x2c]>', '<mov~~word ptr [rsp + rax*2 + 0x1e], cx>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<jmp~~0x4058c2>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x38>', '<mov~~qword ptr [rsp + 0x30], rdi>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<cmp~~dword ptr [rax + 0x18], 0>', '<jbe~~0x405b51>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rax + 0x18]>', '<sub~~eax, 1>', '<mov~~eax, eax>', '<mov~~ecx, eax>', '<lea~~rax, [rip + 0x552e]>', '<movss~~xmm0, dword ptr [rax + rcx*4]>', '<movss~~dword ptr [rsp + 0x28], xmm0>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<add~~rax, 0x2ae12>', '<add~~rax, 2>', '<mov~~qword ptr [rsp + 0x10], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<add~~rax, 0x2ae12>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rax + 0x44]>', '<mov~~word ptr [rsp + 0x1e], ax>', '<mov~~dword ptr [rsp + 0x2c], 1>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<cmp~~eax, dword ptr [rcx + 0x2ae4c]>', '<ja~~0x405914>']}], 'cfg_edge_info': [(2, 3), (0, 2), (2, 4)]}]}
{'sbr_make_f_tablelim': [4216936]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_before/O0/aacsbr.o---before
The extraction of function: sbr_make_f_tablelim
[4216936]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 45 nodes and 64 edges in CFGEmulated.
It has 45 nodes and 59 edges in CDG.
It has 809 nodes and 1102 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4216936]
{4217475, 4217108, 4217240, 4217756, 4217629, 4217374, 4217509, 4217409, 4217026, 4217158, 4217545, 4217674, 4217295, 4216912, 4217681, 4217679, 4217043, 4217172, 4216936, 4217579, 4217455, 4217331}
[16, 0, 44, 9, 12, 33, 13, 3, 1, 21, 4, 20, 19, 7, 31, 38, 18, 15, 5, 23, 14, 28, 2, 17, 42, 41, 8]
The execution time of patched slicing information extraction via angr: 0:00:06.774698
{'sbr_make_f_tablelim': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405a41>, <DisassemblerInsn "mov" for 0x405a46>, <DisassemblerInsn "add" for 0x405a49>, <DisassemblerInsn "mov" for 0x405a4d>, <DisassemblerInsn "mov" for 0x405a52>, <DisassemblerInsn "mov" for 0x405a55>, <DisassemblerInsn "mov" for 0x405a5a>, <DisassemblerInsn "add" for 0x405a5d>, <DisassemblerInsn "mov" for 0x405a61>, <DisassemblerInsn "mov" for 0x405a66>, <DisassemblerInsn "jmp" for 0x405a6a>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x405850>, <DisassemblerInsn "mov" for 0x405854>, <DisassemblerInsn "mov" for 0x405859>, <DisassemblerInsn "cmp" for 0x40585e>, <DisassemblerInsn "jbe" for 0x405862>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x405b46>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405954>, <DisassemblerInsn "add" for 0x405959>, <DisassemblerInsn "mov" for 0x405960>, <DisassemblerInsn "mov" for 0x405965>, <DisassemblerInsn "shl" for 0x40596b>, <DisassemblerInsn "add" for 0x40596e>, <DisassemblerInsn "add" for 0x405971>, <DisassemblerInsn "lea" for 0x405975>, <DisassemblerInsn "add" for 0x40597a>, <DisassemblerInsn "mov" for 0x40597e>, <DisassemblerInsn "mov" for 0x405983>, <DisassemblerInsn "sub" for 0x405989>, <DisassemblerInsn "mov" for 0x40598c>, <DisassemblerInsn "mov" for 0x40598e>, <DisassemblerInsn "shl" for 0x405990>, <DisassemblerInsn "call" for 0x405993>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4059cf>, <DisassemblerInsn "mov" for 0x4059d4>, <DisassemblerInsn "mov" for 0x4059da>, <DisassemblerInsn "add" for 0x4059df>, <DisassemblerInsn "sub" for 0x4059e5>, <DisassemblerInsn "mov" for 0x4059e8>, <DisassemblerInsn "mov" for 0x4059ed>, <DisassemblerInsn "mov" for 0x4059f3>, <DisassemblerInsn "mov" for 0x4059f8>, <DisassemblerInsn "add" for 0x4059fd>, <DisassemblerInsn "mov" for 0x405a04>, <DisassemblerInsn "mov" for 0x405a09>, <DisassemblerInsn "shl" for 0x405a0f>, <DisassemblerInsn "add" for 0x405a12>, <DisassemblerInsn "cmp" for 0x405a15>, <DisassemblerInsn "jae" for 0x405a18>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405c00>, <DisassemblerInsn "mov" for 0x405c03>, <DisassemblerInsn "mov" for 0x405c08>, <DisassemblerInsn "mov" for 0x405c0c>, <DisassemblerInsn "mov" for 0x405c11>, <DisassemblerInsn "mov" for 0x405c19>, <DisassemblerInsn "cmp" for 0x405c1d>, <DisassemblerInsn "jg" for 0x405c21>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405a1e>, <DisassemblerInsn "movzx" for 0x405a23>, <DisassemblerInsn "cvtsi2ss" for 0x405a26>, <DisassemblerInsn "mov" for 0x405a2a>, <DisassemblerInsn "movzx" for 0x405a2f>, <DisassemblerInsn "cvtsi2ss" for 0x405a32>, <DisassemblerInsn "mulss" for 0x405a36>, <DisassemblerInsn "ucomiss" for 0x405a3c>, <DisassemblerInsn "jb" for 0x405a3f>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4058d3>, <DisassemblerInsn "sub" for 0x4058d7>, <DisassemblerInsn "cdqe" for 0x4058da>, <DisassemblerInsn "movsx" for 0x4058dc>, <DisassemblerInsn "mov" for 0x4058e1>, <DisassemblerInsn "mov" for 0x4058e6>, <DisassemblerInsn "sub" for 0x4058ea>, <DisassemblerInsn "movsxd" for 0x4058ed>, <DisassemblerInsn "movzx" for 0x4058f0>, <DisassemblerInsn "add" for 0x4058f8>, <DisassemblerInsn "mov" for 0x4058fa>, <DisassemblerInsn "movsxd" for 0x4058fd>, <DisassemblerInsn "mov" for 0x405902>, <DisassemblerInsn "mov" for 0x405907>, <DisassemblerInsn "add" for 0x40590b>, <DisassemblerInsn "mov" for 0x40590e>, <DisassemblerInsn "jmp" for 0x405912>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405b51>, <DisassemblerInsn "mov" for 0x405b56>, <DisassemblerInsn "mov" for 0x405b5d>, <DisassemblerInsn "mov" for 0x405b62>, <DisassemblerInsn "mov" for 0x405b69>, <DisassemblerInsn "mov" for 0x405b6e>, <DisassemblerInsn "mov" for 0x405b73>, <DisassemblerInsn "mov" for 0x405b79>, <DisassemblerInsn "mov" for 0x405b81>, <DisassemblerInsn "mov" for 0x405b86>, <DisassemblerInsn "mov" for 0x405b8d>, <DisassemblerInsn "mov" for 0x405b92>, <DisassemblerInsn "add" for 0x405b9c>, <DisassemblerInsn "ret" for 0x405ba0>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x405b48>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405914>, <DisassemblerInsn "add" for 0x405919>, <DisassemblerInsn "mov" for 0x405920>, <DisassemblerInsn "add" for 0x405925>, <DisassemblerInsn "mov" for 0x40592c>, <DisassemblerInsn "mov" for 0x405931>, <DisassemblerInsn "add" for 0x405937>, <DisassemblerInsn "mov" for 0x40593a>, <DisassemblerInsn "mov" for 0x40593c>, <DisassemblerInsn "shl" for 0x40593e>, <DisassemblerInsn "call" for 0x405941>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x405b4a>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "lea" for 0x405a83>, <DisassemblerInsn "mov" for 0x405a88>, <DisassemblerInsn "mov" for 0x405a8d>, <DisassemblerInsn "mov" for 0x405a93>, <DisassemblerInsn "movsx" for 0x405a98>, <DisassemblerInsn "call" for 0x405a9b>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405946>, <DisassemblerInsn "cmp" for 0x40594b>, <DisassemblerInsn "jbe" for 0x405952>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "lea" for 0x405ac9>, <DisassemblerInsn "mov" for 0x405ace>, <DisassemblerInsn "mov" for 0x405ad3>, <DisassemblerInsn "mov" for 0x405ad9>, <DisassemblerInsn "movsx" for 0x405ade>, <DisassemblerInsn "call" for 0x405ae1>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x405ae6>, <DisassemblerInsn "jne" for 0x405ae9>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405aa5>, <DisassemblerInsn "add" for 0x405aaa>, <DisassemblerInsn "mov" for 0x405aae>, <DisassemblerInsn "mov" for 0x405ab3>, <DisassemblerInsn "mov" for 0x405ab8>, <DisassemblerInsn "add" for 0x405abe>, <DisassemblerInsn "mov" for 0x405ac1>, <DisassemblerInsn "jmp" for 0x405ac7>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405a6f>, <DisassemblerInsn "movzx" for 0x405a74>, <DisassemblerInsn "mov" for 0x405a77>, <DisassemblerInsn "movzx" for 0x405a7c>, <DisassemblerInsn "cmp" for 0x405a7f>, <DisassemblerInsn "je" for 0x405a81>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4058c2>, <DisassemblerInsn "mov" for 0x4058c6>, <DisassemblerInsn "cmp" for 0x4058cb>, <DisassemblerInsn "ja" for 0x4058d1>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4059f3>, <DisassemblerInsn "mov" for 0x4059f8>, <DisassemblerInsn "add" for 0x4059fd>, <DisassemblerInsn "mov" for 0x405a04>, <DisassemblerInsn "mov" for 0x405a09>, <DisassemblerInsn "shl" for 0x405a0f>, <DisassemblerInsn "add" for 0x405a12>, <DisassemblerInsn "cmp" for 0x405a15>, <DisassemblerInsn "jae" for 0x405a18>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x405b4f>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x405aa0>, <DisassemblerInsn "jne" for 0x405aa3>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405868>, <DisassemblerInsn "mov" for 0x40586d>, <DisassemblerInsn "sub" for 0x405870>, <DisassemblerInsn "mov" for 0x405873>, <DisassemblerInsn "mov" for 0x405875>, <DisassemblerInsn "lea" for 0x405877>, <DisassemblerInsn "movss" for 0x40587e>, <DisassemblerInsn "movss" for 0x405883>, <DisassemblerInsn "mov" for 0x405889>, <DisassemblerInsn "add" for 0x40588e>, <DisassemblerInsn "add" for 0x405894>, <DisassemblerInsn "mov" for 0x405898>, <DisassemblerInsn "mov" for 0x40589d>, <DisassemblerInsn "add" for 0x4058a2>, <DisassemblerInsn "mov" for 0x4058a8>, <DisassemblerInsn "mov" for 0x4058ad>, <DisassemblerInsn "mov" for 0x4058b2>, <DisassemblerInsn "mov" for 0x4058b5>, <DisassemblerInsn "mov" for 0x4058ba>, <DisassemblerInsn "mov" for 0x4058c2>, <DisassemblerInsn "mov" for 0x4058c6>, <DisassemblerInsn "cmp" for 0x4058cb>, <DisassemblerInsn "ja" for 0x4058d1>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "add" for 0x405b9c>, <DisassemblerInsn "ret" for 0x405ba0>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405b1d>, <DisassemblerInsn "mov" for 0x405b22>, <DisassemblerInsn "add" for 0x405b25>, <DisassemblerInsn "mov" for 0x405b29>, <DisassemblerInsn "mov" for 0x405b2e>, <DisassemblerInsn "mov" for 0x405b31>, <DisassemblerInsn "mov" for 0x405b36>, <DisassemblerInsn "add" for 0x405b39>, <DisassemblerInsn "mov" for 0x405b3d>, <DisassemblerInsn "mov" for 0x405b42>, <DisassemblerInsn "jmp" for 0x405b46>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405aeb>, <DisassemblerInsn "mov" for 0x405af0>, <DisassemblerInsn "add" for 0x405af3>, <DisassemblerInsn "mov" for 0x405af7>, <DisassemblerInsn "mov" for 0x405afc>, <DisassemblerInsn "mov" for 0x405aff>, <DisassemblerInsn "mov" for 0x405b04>, <DisassemblerInsn "mov" for 0x405b07>, <DisassemblerInsn "mov" for 0x405b0c>, <DisassemblerInsn "add" for 0x405b12>, <DisassemblerInsn "mov" for 0x405b15>, <DisassemblerInsn "jmp" for 0x405b1b>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x405998>, <DisassemblerInsn "add" for 0x40599d>, <DisassemblerInsn "mov" for 0x4059a4>, <DisassemblerInsn "mov" for 0x4059a9>, <DisassemblerInsn "mov" for 0x4059af>, <DisassemblerInsn "add" for 0x4059b4>, <DisassemblerInsn "mov" for 0x4059ba>, <DisassemblerInsn "mov" for 0x4059bc>, <DisassemblerInsn "mov" for 0x4059be>, <DisassemblerInsn "lea" for 0x4059c3>, <DisassemblerInsn "call" for 0x4059ca>]'}], 'cfg_block_detailed_info': [{'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rcx, rax>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x10], rcx>', '<mov~~cx, word ptr [rax]>', '<mov~~rax, qword ptr [rsp + 8]>', '<mov~~rdx, rax>', '<add~~rdx, 2>', '<mov~~qword ptr [rsp + 8], rdx>', '<mov~~word ptr [rax + 2], cx>', '<jmp~~0x405b4a>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x38>', '<mov~~qword ptr [rsp + 0x30], rdi>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<cmp~~dword ptr [rax + 0x18], 0>', '<jbe~~0x405b51>']}, {'block_Idx': 44, 'blockInsts': ['<jmp~~0x405b48>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<add~~rdi, 0x2ae12>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rax + 0x2ad00]>', '<shl~~rax, 1>', '<add~~rdi, rax>', '<add~~rdi, 2>', '<lea~~rsi, [rsp + 0x1e]>', '<add~~rsi, 2>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rax + 0x2ae4c]>', '<sub~~eax, 1>', '<mov~~eax, eax>', '<mov~~edx, eax>', '<shl~~rdx, 1>', '<call~~0x500050>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~ecx, dword ptr [rax + 0x2ad00]>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<add~~ecx, dword ptr [rax + 0x2ae4c]>', '<sub~~ecx, 1>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~dword ptr [rax + 0x2ad0c], ecx>', '<mov~~rax, qword ptr [rsp + 8]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<add~~rcx, 0x2ae12>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<mov~~edx, dword ptr [rdx + 0x2ad0c]>', '<shl~~rdx, 1>', '<add~~rcx, rdx>', '<cmp~~rax, rcx>', '<jae~~0x405b4f>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~ax, dx>', '<mov~~qword ptr [rsp - 0x10], rdi>', '<mov~~dword ptr [rsp - 0x14], esi>', '<mov~~word ptr [rsp - 0x16], ax>', '<mov~~dword ptr [rsp - 0x1c], 0>', '<mov~~eax, dword ptr [rsp - 0x1c]>', '<cmp~~eax, dword ptr [rsp - 0x14]>', '<jg~~0x405c53>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<movzx~~eax, word ptr [rax]>', '<cvtsi2ss~~xmm0, eax>', '<mov~~rax, qword ptr [rsp + 8]>', '<movzx~~eax, word ptr [rax]>', '<cvtsi2ss~~xmm1, eax>', '<mulss~~xmm1, dword ptr [rsp + 0x28]>', '<ucomiss~~xmm0, xmm1>', '<jb~~0x405a6f>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2c]>', '<sub~~eax, 1>', '<cdqe~~>', '<movsx~~eax, word ptr [rsp + rax*2 + 0x1e]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<mov~~edx, dword ptr [rsp + 0x2c]>', '<sub~~edx, 1>', '<movsxd~~rdx, edx>', '<movzx~~ecx, byte ptr [rcx + rdx + 0x2ae50]>', '<add~~eax, ecx>', '<mov~~cx, ax>', '<movsxd~~rax, dword ptr [rsp + 0x2c]>', '<mov~~word ptr [rsp + rax*2 + 0x1e], cx>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<add~~eax, 1>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<jmp~~0x4058c2>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~cx, word ptr [rax + 0x2ad72]>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~word ptr [rax + 0x2ae12], cx>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<mov~~ecx, dword ptr [rcx + 0x2ad00]>', '<mov~~cx, word ptr [rax + rcx*2 + 0x2ad72]>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~word ptr [rax + 0x2ae14], cx>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~dword ptr [rax + 0x2ad0c], 1>', '<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 21, 'blockInsts': ['<jmp~~0x405b4a>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<add~~rdi, 0x2ae12>', '<mov~~rsi, qword ptr [rsp + 0x30]>', '<add~~rsi, 0x2ad72>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rax + 0x2ad00]>', '<add~~eax, 1>', '<mov~~eax, eax>', '<mov~~edx, eax>', '<shl~~rdx, 1>', '<call~~0x500050>']}, {'block_Idx': 20, 'blockInsts': ['<jmp~~0x4059f3>']}, {'block_Idx': 19, 'blockInsts': ['<lea~~rdi, [rsp + 0x1e]>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~esi, dword ptr [rax + 0x2ae4c]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<movsx~~edx, word ptr [rax]>', '<call~~0x405c00>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x30]>', '<cmp~~dword ptr [rax + 0x2ae4c], 1>', '<jbe~~0x405998>']}, {'block_Idx': 31, 'blockInsts': ['<lea~~rdi, [rsp + 0x1e]>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~esi, dword ptr [rax + 0x2ae4c]>', '<mov~~rax, qword ptr [rsp + 8]>', '<movsx~~edx, word ptr [rax]>', '<call~~0x405c00>']}, {'block_Idx': 38, 'blockInsts': ['<cmp~~eax, 0>', '<jne~~0x405b1d>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<add~~rax, 2>', '<mov~~qword ptr [rsp + 0x10], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~ecx, dword ptr [rax + 0x2ad0c]>', '<add~~ecx, -1>', '<mov~~dword ptr [rax + 0x2ad0c], ecx>', '<jmp~~0x405b48>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<movzx~~eax, word ptr [rax]>', '<mov~~rcx, qword ptr [rsp + 8]>', '<movzx~~ecx, word ptr [rcx]>', '<cmp~~eax, ecx>', '<je~~0x405aa5>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x2c]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<cmp~~eax, dword ptr [rcx + 0x2ae4c]>', '<ja~~0x405914>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 8]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<add~~rcx, 0x2ae12>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<mov~~edx, dword ptr [rdx + 0x2ad0c]>', '<shl~~rdx, 1>', '<add~~rcx, rdx>', '<cmp~~rax, rcx>', '<jae~~0x405b4f>']}, {'block_Idx': 14, 'blockInsts': ['<jmp~~0x405b9c>']}, {'block_Idx': 28, 'blockInsts': ['<cmp~~eax, 0>', '<jne~~0x405ac9>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rax + 0x18]>', '<sub~~eax, 1>', '<mov~~eax, eax>', '<mov~~ecx, eax>', '<lea~~rax, [rip + 0x552e]>', '<movss~~xmm0, dword ptr [rax + rcx*4]>', '<movss~~dword ptr [rsp + 0x28], xmm0>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<add~~rax, 0x2ae12>', '<add~~rax, 2>', '<mov~~qword ptr [rsp + 0x10], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<add~~rax, 0x2ae12>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rax + 0x44]>', '<mov~~word ptr [rsp + 0x1e], ax>', '<mov~~dword ptr [rsp + 0x2c], 1>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<cmp~~eax, dword ptr [rcx + 0x2ae4c]>', '<ja~~0x405914>']}, {'block_Idx': 17, 'blockInsts': ['<add~~rsp, 0x38>', '<ret~~>']}, {'block_Idx': 42, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rcx, rax>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x10], rcx>', '<mov~~cx, word ptr [rax]>', '<mov~~rax, qword ptr [rsp + 8]>', '<mov~~rdx, rax>', '<add~~rdx, 2>', '<mov~~qword ptr [rsp + 8], rdx>', '<mov~~word ptr [rax + 2], cx>', '<jmp~~0x405b48>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~rcx, rax>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x10], rcx>', '<mov~~cx, word ptr [rax]>', '<mov~~rax, qword ptr [rsp + 8]>', '<mov~~word ptr [rax], cx>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~ecx, dword ptr [rax + 0x2ad0c]>', '<add~~ecx, -1>', '<mov~~dword ptr [rax + 0x2ad0c], ecx>', '<jmp~~0x405b46>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x30]>', '<add~~rdi, 0x2ae12>', '<mov~~rax, qword ptr [rsp + 0x30]>', '<mov~~eax, dword ptr [rax + 0x2ae4c]>', '<mov~~rcx, qword ptr [rsp + 0x30]>', '<add~~eax, dword ptr [rcx + 0x2ad00]>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<mov~~edx, 2>', '<lea~~rcx, [rip + 0x216]>', '<call~~0x500060>']}], 'cfg_edge_info': [(16, 20), (5, 4), (20, 23), (23, 13), (12, 13), (38, 41), (0, 2), (28, 18), (9, 8), (8, 12), (31, 38), (19, 33), (5, 3), (0, 1), (2, 4), (13, 16), (7, 9), (15, 19), (41, 44), (18, 21), (4, 7), (3, 5), (12, 14), (23, 14), (21, 20), (38, 42), (14, 17), (31, 33), (2, 3), (42, 21), (28, 31), (19, 28), (13, 15), (15, 18), (7, 8)], 'cdg_edge_info': [(23, 13), (12, 13), (0, 2), (0, 8), (0, 14), (2, 5), (0, 17), (15, 14), (15, 17), (15, 23), (15, 20), (5, 3), (0, 1), (0, 7), (0, 4), (13, 16), (7, 9), (15, 19), (23, 23), (12, 23), (5, 5), (12, 20), (23, 20), (2, 3), (0, 12), (13, 18), (13, 15)], 'ddg_edge_info': [(4, 9), (9, 8), (0, 5), (19, 18), (8, 18), (41, 15), (16, 13), (41, 42), (42, 41), (18, 19), (16, 31), (2, 41), (12, 18), (41, 17), (13, 19), (1, 17), (16, 15), (31, 15), (16, 42), (31, 42), (41, 19), (42, 18), (5, 7), (0, 2), (16, 19), (18, 16), (31, 19), (5, 9), (42, 13), (41, 23), (13, 16), (2, 13), (42, 31), (2, 31), (3, 5), (41, 16), (42, 15), (8, 13), (2, 15), (19, 31), (16, 23), (2, 42), (31, 23), (18, 41), (41, 18), (8, 15), (42, 17), (31, 16), (4, 8), (0, 4), (42, 19), (8, 17), (2, 19), (31, 18), (12, 23), (41, 13), (2, 3), (8, 19), (16, 41), (8, 12), (31, 41), (42, 23), (2, 5), (2, 23), (31, 13), (18, 13), (23, 18), (0, 1), (42, 16), (19, 23), (8, 23), (2, 16), (16, 18), (18, 15), (4, 7), (5, 8), (18, 42), (0, 3), (8, 16), (2, 18), (13, 15), (41, 31)]}]}
{'sbr_make_f_tablelim': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 5, 'instruction': 'movq\t0x30(%rsp), %rax'}, {'instIndex': 6, 'instruction': 'movl\t0x18(%rax), %eax'}, {'instIndex': 7, 'instruction': 'subl\t$1, %eax'}, {'instIndex': 8, 'instruction': 'movl\t%eax, %eax'}, {'instIndex': 9, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 10, 'instruction': 'leaq\tsbr_make_f_tablelim.bands_warped(%rip), %rax'}, {'instIndex': 11, 'instruction': 'movss\t(%rax,%rcx,4), %xmm0            # xmm0 = mem[0],zero,zero,zero'}, {'instIndex': 12, 'instruction': 'movss\t%xmm0, 0x28(%rsp)'}, {'instIndex': 13, 'instruction': 'movq\t0x30(%rsp), %rax'}, {'instIndex': 14, 'instruction': 'addq\t$0x2ae12, %rax                   # imm = 0x2AE12'}, {'instIndex': 15, 'instruction': 'addq\t$2, %rax'}, {'instIndex': 16, 'instruction': 'movq\t%rax, 0x10(%rsp)'}, {'instIndex': 17, 'instruction': 'movq\t0x30(%rsp), %rax'}, {'instIndex': 18, 'instruction': 'addq\t$0x2ae12, %rax                   # imm = 0x2AE12'}, {'instIndex': 19, 'instruction': 'movq\t%rax, 8(%rsp)'}, {'instIndex': 20, 'instruction': 'movq\t0x30(%rsp), %rax'}, {'instIndex': 21, 'instruction': 'movl\t0x44(%rax), %eax'}, {'instIndex': 22, 'instruction': 'movw\t%ax, 0x1e(%rsp)'}]}]}
The case of compiler clang with optimization O1.
Patched source code file: aacsbr.c
Patched function: 1---static void sbr_make_f_tablelim 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_before/O1/aacsbr.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_before/O1/aacsbr.s---sbr_make_f_tablelim---before
function id: 6
function flag: True
There are 253 instructions for function: sbr_make_f_tablelim in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '174', 'end': 180}, 'before': {'start': '174', 'end': 180}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 10, 'instruction': 'addl\t$-1, %ecx'}, {'instIndex': 11, 'instruction': 'movl\t%ecx, %ecx'}, {'instIndex': 12, 'instruction': 'movl\t%ecx, %edx'}, {'instIndex': 13, 'instruction': 'leaq\tsbr_make_f_tablelim.bands_warped(%rip), %rcx'}, {'instIndex': 14, 'instruction': 'movss\t(%rcx,%rdx,4), %xmm0            # xmm0 = mem[0],zero,zero,zero'}, {'instIndex': 15, 'instruction': 'movss\t%xmm0, 0xdc(%rsp)                # 4-byte Spill'}, {'instIndex': 16, 'instruction': 'leaq\t0x10e(%rsp), %rcx'}, {'instIndex': 17, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 18, 'instruction': 'addq\t$0x2ae12, %rcx                   # imm = 0x2AE12'}, {'instIndex': 19, 'instruction': 'movq\t%rcx, 0xe0(%rsp)                 # 8-byte Spill'}, {'instIndex': 20, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 21, 'instruction': 'addq\t$0x2ae12, %rcx                   # imm = 0x2AE12'}, {'instIndex': 22, 'instruction': 'addq\t$2, %rcx'}, {'instIndex': 23, 'instruction': 'movq\t%rcx, 0xe8(%rsp)                 # 8-byte Spill'}, {'instIndex': 24, 'instruction': 'movl\t0x44(%rax), %ecx'}, {'instIndex': 25, 'instruction': 'movw\t%cx, 0x10e(%rsp)'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_before/O1/aacsbr.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_before/O1/aacsbr.o---before
The extraction of function: sbr_make_f_tablelim
Analyzing the binaries to generate subCFGs from patched function ...
It has 884 nodes and 1595 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 253 instructions in binary file.
[4241794]
The execution time of patched subCFG information extraction via angr: 0:00:01.338918
{'sbr_make_f_tablelim': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b9fe>, <DisassemblerInsn "mov" for 0x40ba06>, <DisassemblerInsn "add" for 0x40ba0d>, <DisassemblerInsn "mov" for 0x40ba10>, <DisassemblerInsn "mov" for 0x40ba12>, <DisassemblerInsn "mov" for 0x40ba1a>, <DisassemblerInsn "mov" for 0x40ba1d>, <DisassemblerInsn "mov" for 0x40ba22>, <DisassemblerInsn "mov" for 0x40ba2a>, <DisassemblerInsn "mov" for 0x40ba32>, <DisassemblerInsn "mov" for 0x40ba3a>, <DisassemblerInsn "mov" for 0x40ba42>, <DisassemblerInsn "mov" for 0x40ba4a>, <DisassemblerInsn "movzx" for 0x40ba52>, <DisassemblerInsn "add" for 0x40ba5a>, <DisassemblerInsn "mov" for 0x40ba5d>, <DisassemblerInsn "mov" for 0x40ba65>, <DisassemblerInsn "add" for 0x40ba6d>, <DisassemblerInsn "mov" for 0x40ba71>, <DisassemblerInsn "cmp" for 0x40ba79>, <DisassemblerInsn "mov" for 0x40ba7c>, <DisassemblerInsn "mov" for 0x40ba84>, <DisassemblerInsn "jne" for 0x40ba8c>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x40b950>, <DisassemblerInsn "mov" for 0x40b957>, <DisassemblerInsn "lea" for 0x40b95f>, <DisassemblerInsn "mov" for 0x40b967>, <DisassemblerInsn "mov" for 0x40b96f>, <DisassemblerInsn "mov" for 0x40b972>, <DisassemblerInsn "cmp" for 0x40b979>, <DisassemblerInsn "je" for 0x40b97c>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b982>, <DisassemblerInsn "mov" for 0x40b98a>, <DisassemblerInsn "add" for 0x40b991>, <DisassemblerInsn "mov" for 0x40b994>, <DisassemblerInsn "mov" for 0x40b996>, <DisassemblerInsn "lea" for 0x40b998>, <DisassemblerInsn "movss" for 0x40b99f>, <DisassemblerInsn "movss" for 0x40b9a4>, <DisassemblerInsn "lea" for 0x40b9ad>, <DisassemblerInsn "mov" for 0x40b9b5>, <DisassemblerInsn "add" for 0x40b9b8>, <DisassemblerInsn "mov" for 0x40b9bf>, <DisassemblerInsn "mov" for 0x40b9c7>, <DisassemblerInsn "add" for 0x40b9ca>, <DisassemblerInsn "add" for 0x40b9d1>, <DisassemblerInsn "mov" for 0x40b9d5>, <DisassemblerInsn "mov" for 0x40b9dd>, <DisassemblerInsn "mov" for 0x40b9e0>, <DisassemblerInsn "mov" for 0x40b9e8>, <DisassemblerInsn "mov" for 0x40b9ee>, <DisassemblerInsn "cmp" for 0x40b9f5>, <DisassemblerInsn "je" for 0x40b9f8>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40ba8e>, <DisassemblerInsn "mov" for 0x40ba96>, <DisassemblerInsn "mov" for 0x40ba9e>, <DisassemblerInsn "add" for 0x40baa1>, <DisassemblerInsn "mov" for 0x40baa8>, <DisassemblerInsn "mov" for 0x40bab0>, <DisassemblerInsn "mov" for 0x40bab8>, <DisassemblerInsn "add" for 0x40babb>, <DisassemblerInsn "mov" for 0x40bac2>, <DisassemblerInsn "add" for 0x40bac5>, <DisassemblerInsn "mov" for 0x40bacc>, <DisassemblerInsn "mov" for 0x40bad4>, <DisassemblerInsn "mov" for 0x40bada>, <DisassemblerInsn "add" for 0x40bae1>, <DisassemblerInsn "mov" for 0x40bae4>, <DisassemblerInsn "mov" for 0x40bae6>, <DisassemblerInsn "shl" for 0x40bae8>, <DisassemblerInsn "call" for 0x40baeb>]'}], 'cfg_block_detailed_info': [{'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x100]>', '<mov~~ecx, dword ptr [rsp + 0xf4]>', '<add~~ecx, 1>', '<mov~~ecx, ecx>', '<mov~~qword ptr [rsp + 0xc0], rcx>', '<mov~~cx, word ptr [rax]>', '<mov~~eax, 1>', '<mov~~word ptr [rsp + 0xce], cx>', '<mov~~qword ptr [rsp + 0xd0], rax>', '<mov~~rax, qword ptr [rsp + 0xd0]>', '<mov~~cx, word ptr [rsp + 0xce]>', '<mov~~rdx, qword ptr [rsp + 0xc0]>', '<mov~~rsi, qword ptr [rsp + 0xf8]>', '<movzx~~esi, byte ptr [rsi + rax + 0x2ae4f]>', '<add~~cx, si>', '<mov~~word ptr [rsp + 0xb6], cx>', '<mov~~word ptr [rsp + rax*2 + 0x10e], cx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0xb8], rax>', '<cmp~~rax, rdx>', '<mov~~word ptr [rsp + 0xce], cx>', '<mov~~qword ptr [rsp + 0xd0], rax>', '<jne~~0x40ba32>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x118>', '<mov~~qword ptr [rsp + 0xf8], rdi>', '<lea~~rax, [rsp + 0x10e]>', '<mov~~qword ptr [rsp + 0x100], rax>', '<mov~~eax, dword ptr [rdi + 0x18]>', '<mov~~dword ptr [rsp + 0x108], eax>', '<cmp~~eax, 0>', '<je~~0x40bde3>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xf8]>', '<mov~~ecx, dword ptr [rsp + 0x108]>', '<add~~ecx, -1>', '<mov~~ecx, ecx>', '<mov~~edx, ecx>', '<lea~~rcx, [rip + 0x353d]>', '<movss~~xmm0, dword ptr [rcx + rdx*4]>', '<movss~~dword ptr [rsp + 0xdc], xmm0>', '<lea~~rcx, [rsp + 0x10e]>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ae12>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ae12>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0xe8], rcx>', '<mov~~ecx, dword ptr [rax + 0x44]>', '<mov~~word ptr [rsp + 0x10e], cx>', '<mov~~eax, dword ptr [rax + 0x2ae4c]>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<cmp~~eax, 0>', '<je~~0x40ba8e>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xf8]>', '<mov~~rdi, qword ptr [rsp + 0xe0]>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ae4c>', '<mov~~qword ptr [rsp + 0x90], rcx>', '<mov~~qword ptr [rsp + 0x98], rdi>', '<mov~~rsi, rax>', '<add~~rsi, 0x2ad72>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ad00>', '<mov~~qword ptr [rsp + 0xa0], rcx>', '<mov~~eax, dword ptr [rax + 0x2ad00]>', '<mov~~dword ptr [rsp + 0xac], eax>', '<add~~eax, 1>', '<mov~~eax, eax>', '<mov~~edx, eax>', '<shl~~rdx, 1>', '<call~~0x500060>']}], 'cfg_edge_info': [(2, 3), (0, 2), (2, 4)]}]}
{'sbr_make_f_tablelim': [4241794]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_before/O1/aacsbr.o---before
The extraction of function: sbr_make_f_tablelim
[4241794]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 32 nodes and 49 edges in CFGEmulated.
It has 32 nodes and 44 edges in CDG.
It has 973 nodes and 1181 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4241794]
{4241794, 4242186, 4242062, 4242702, 4242576, 4242968, 4242461, 4242720, 4241970, 4242612, 4242744, 4242636, 4242254, 4242383, 4241744, 4242774, 4242303, 4242913, 4242915, 4242537, 4242666, 4242160, 4241918, 4242815}
[6, 24, 0, 19, 4, 7, 17, 9, 12, 23, 26, 2, 18, 22, 29, 20, 25, 3, 21, 13, 28, 15, 1, 14, 27, 16, 30, 8, 31]
The execution time of patched slicing information extraction via angr: 0:00:10.040624
{'sbr_make_f_tablelim': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40ba32>, <DisassemblerInsn "mov" for 0x40ba3a>, <DisassemblerInsn "mov" for 0x40ba42>, <DisassemblerInsn "mov" for 0x40ba4a>, <DisassemblerInsn "movzx" for 0x40ba52>, <DisassemblerInsn "add" for 0x40ba5a>, <DisassemblerInsn "mov" for 0x40ba5d>, <DisassemblerInsn "mov" for 0x40ba65>, <DisassemblerInsn "add" for 0x40ba6d>, <DisassemblerInsn "mov" for 0x40ba71>, <DisassemblerInsn "cmp" for 0x40ba79>, <DisassemblerInsn "mov" for 0x40ba7c>, <DisassemblerInsn "mov" for 0x40ba84>, <DisassemblerInsn "jne" for 0x40ba8c>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40bce8>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x40b950>, <DisassemblerInsn "mov" for 0x40b957>, <DisassemblerInsn "lea" for 0x40b95f>, <DisassemblerInsn "mov" for 0x40b967>, <DisassemblerInsn "mov" for 0x40b96f>, <DisassemblerInsn "mov" for 0x40b972>, <DisassemblerInsn "cmp" for 0x40b979>, <DisassemblerInsn "je" for 0x40b97c>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40bcea>, <DisassemblerInsn "mov" for 0x40bcef>, <DisassemblerInsn "mov" for 0x40bcf7>, <DisassemblerInsn "add" for 0x40bcfb>, <DisassemblerInsn "mov" for 0x40bcfe>, <DisassemblerInsn "mov" for 0x40bd00>, <DisassemblerInsn "mov" for 0x40bd04>, <DisassemblerInsn "jmp" for 0x40bd09>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b9fe>, <DisassemblerInsn "mov" for 0x40ba06>, <DisassemblerInsn "add" for 0x40ba0d>, <DisassemblerInsn "mov" for 0x40ba10>, <DisassemblerInsn "mov" for 0x40ba12>, <DisassemblerInsn "mov" for 0x40ba1a>, <DisassemblerInsn "mov" for 0x40ba1d>, <DisassemblerInsn "mov" for 0x40ba22>, <DisassemblerInsn "mov" for 0x40ba2a>, <DisassemblerInsn "mov" for 0x40ba32>, <DisassemblerInsn "mov" for 0x40ba3a>, <DisassemblerInsn "mov" for 0x40ba42>, <DisassemblerInsn "mov" for 0x40ba4a>, <DisassemblerInsn "movzx" for 0x40ba52>, <DisassemblerInsn "add" for 0x40ba5a>, <DisassemblerInsn "mov" for 0x40ba5d>, <DisassemblerInsn "mov" for 0x40ba65>, <DisassemblerInsn "add" for 0x40ba6d>, <DisassemblerInsn "mov" for 0x40ba71>, <DisassemblerInsn "cmp" for 0x40ba79>, <DisassemblerInsn "mov" for 0x40ba7c>, <DisassemblerInsn "mov" for 0x40ba84>, <DisassemblerInsn "jne" for 0x40ba8c>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40baf0>, <DisassemblerInsn "mov" for 0x40baf8>, <DisassemblerInsn "mov" for 0x40bafe>, <DisassemblerInsn "cmp" for 0x40bb05>, <DisassemblerInsn "jbe" for 0x40bb08>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40bc69>, <DisassemblerInsn "mov" for 0x40bc6d>, <DisassemblerInsn "mov" for 0x40bc72>, <DisassemblerInsn "mov" for 0x40bc77>, <DisassemblerInsn "add" for 0x40bc7a>, <DisassemblerInsn "mov" for 0x40bc7e>, <DisassemblerInsn "mov" for 0x40bc82>, <DisassemblerInsn "mov" for 0x40bc86>, <DisassemblerInsn "jmp" for 0x40bc8b>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40bb0a>, <DisassemblerInsn "mov" for 0x40bb11>, <DisassemblerInsn "mov" for 0x40bb19>, <DisassemblerInsn "mov" for 0x40bb20>, <DisassemblerInsn "add" for 0x40bb22>, <DisassemblerInsn "shl" for 0x40bb29>, <DisassemblerInsn "add" for 0x40bb2c>, <DisassemblerInsn "add" for 0x40bb2f>, <DisassemblerInsn "lea" for 0x40bb33>, <DisassemblerInsn "add" for 0x40bb3b>, <DisassemblerInsn "add" for 0x40bb3f>, <DisassemblerInsn "mov" for 0x40bb42>, <DisassemblerInsn "mov" for 0x40bb44>, <DisassemblerInsn "shl" for 0x40bb46>, <DisassemblerInsn "call" for 0x40bb49>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40bb7f>, <DisassemblerInsn "mov" for 0x40bb87>, <DisassemblerInsn "mov" for 0x40bb8f>, <DisassemblerInsn "mov" for 0x40bb97>, <DisassemblerInsn "mov" for 0x40bb99>, <DisassemblerInsn "mov" for 0x40bb9b>, <DisassemblerInsn "add" for 0x40bba2>, <DisassemblerInsn "add" for 0x40bba5>, <DisassemblerInsn "mov" for 0x40bba7>, <DisassemblerInsn "mov" for 0x40bbae>, <DisassemblerInsn "add" for 0x40bbb1>, <DisassemblerInsn "mov" for 0x40bbb8>, <DisassemblerInsn "mov" for 0x40bbc0>, <DisassemblerInsn "cmp" for 0x40bbc6>, <DisassemblerInsn "je" for 0x40bbc9>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40bd0e>, <DisassemblerInsn "xor" for 0x40bd12>, <DisassemblerInsn "test" for 0x40bd14>, <DisassemblerInsn "mov" for 0x40bd17>, <DisassemblerInsn "jne" for 0x40bd1c>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40bd56>, <DisassemblerInsn "mov" for 0x40bd5b>, <DisassemblerInsn "mov" for 0x40bd63>, <DisassemblerInsn "mov" for 0x40bd67>, <DisassemblerInsn "mov" for 0x40bd6c>, <DisassemblerInsn "add" for 0x40bd6f>, <DisassemblerInsn "mov" for 0x40bd72>, <DisassemblerInsn "mov" for 0x40bd74>, <DisassemblerInsn "mov" for 0x40bd78>, <DisassemblerInsn "jmp" for 0x40bd7d>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40b982>, <DisassemblerInsn "mov" for 0x40b98a>, <DisassemblerInsn "add" for 0x40b991>, <DisassemblerInsn "mov" for 0x40b994>, <DisassemblerInsn "mov" for 0x40b996>, <DisassemblerInsn "lea" for 0x40b998>, <DisassemblerInsn "movss" for 0x40b99f>, <DisassemblerInsn "movss" for 0x40b9a4>, <DisassemblerInsn "lea" for 0x40b9ad>, <DisassemblerInsn "mov" for 0x40b9b5>, <DisassemblerInsn "add" for 0x40b9b8>, <DisassemblerInsn "mov" for 0x40b9bf>, <DisassemblerInsn "mov" for 0x40b9c7>, <DisassemblerInsn "add" for 0x40b9ca>, <DisassemblerInsn "add" for 0x40b9d1>, <DisassemblerInsn "mov" for 0x40b9d5>, <DisassemblerInsn "mov" for 0x40b9dd>, <DisassemblerInsn "mov" for 0x40b9e0>, <DisassemblerInsn "mov" for 0x40b9e8>, <DisassemblerInsn "mov" for 0x40b9ee>, <DisassemblerInsn "cmp" for 0x40b9f5>, <DisassemblerInsn "je" for 0x40b9f8>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40bcb2>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "movss" for 0x40bc1d>, <DisassemblerInsn "mov" for 0x40bc26>, <DisassemblerInsn "mov" for 0x40bc2b>, <DisassemblerInsn "mov" for 0x40bc30>, <DisassemblerInsn "mov" for 0x40bc34>, <DisassemblerInsn "mov" for 0x40bc38>, <DisassemblerInsn "mov" for 0x40bc3d>, <DisassemblerInsn "movzx" for 0x40bc42>, <DisassemblerInsn "mov" for 0x40bc45>, <DisassemblerInsn "mov" for 0x40bc48>, <DisassemblerInsn "cvtsi2ss" for 0x40bc4d>, <DisassemblerInsn "movzx" for 0x40bc51>, <DisassemblerInsn "mov" for 0x40bc54>, <DisassemblerInsn "mov" for 0x40bc57>, <DisassemblerInsn "cvtsi2ss" for 0x40bc5c>, <DisassemblerInsn "mulss" for 0x40bc60>, <DisassemblerInsn "ucomiss" for 0x40bc64>, <DisassemblerInsn "jb" for 0x40bc67>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40bd7f>, <DisassemblerInsn "mov" for 0x40bd83>, <DisassemblerInsn "mov" for 0x40bd88>, <DisassemblerInsn "mov" for 0x40bd8d>, <DisassemblerInsn "add" for 0x40bd90>, <DisassemblerInsn "mov" for 0x40bd94>, <DisassemblerInsn "mov" for 0x40bd98>, <DisassemblerInsn "mov" for 0x40bd9c>, <DisassemblerInsn "mov" for 0x40bda1>, <DisassemblerInsn "mov" for 0x40bda9>, <DisassemblerInsn "mov" for 0x40bdae>, <DisassemblerInsn "mov" for 0x40bdb2>, <DisassemblerInsn "add" for 0x40bdb7>, <DisassemblerInsn "mov" for 0x40bdbb>, <DisassemblerInsn "add" for 0x40bdbd>, <DisassemblerInsn "shl" for 0x40bdc4>, <DisassemblerInsn "add" for 0x40bdc7>, <DisassemblerInsn "cmp" for 0x40bdca>, <DisassemblerInsn "mov" for 0x40bdcd>, <DisassemblerInsn "mov" for 0x40bdd2>, <DisassemblerInsn "mov" for 0x40bdd7>, <DisassemblerInsn "jb" for 0x40bddb>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40bda1>, <DisassemblerInsn "mov" for 0x40bda9>, <DisassemblerInsn "mov" for 0x40bdae>, <DisassemblerInsn "mov" for 0x40bdb2>, <DisassemblerInsn "add" for 0x40bdb7>, <DisassemblerInsn "mov" for 0x40bdbb>, <DisassemblerInsn "add" for 0x40bdbd>, <DisassemblerInsn "shl" for 0x40bdc4>, <DisassemblerInsn "add" for 0x40bdc7>, <DisassemblerInsn "cmp" for 0x40bdca>, <DisassemblerInsn "mov" for 0x40bdcd>, <DisassemblerInsn "mov" for 0x40bdd2>, <DisassemblerInsn "mov" for 0x40bdd7>, <DisassemblerInsn "jb" for 0x40bddb>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40bd1e>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40ba8e>, <DisassemblerInsn "mov" for 0x40ba96>, <DisassemblerInsn "mov" for 0x40ba9e>, <DisassemblerInsn "add" for 0x40baa1>, <DisassemblerInsn "mov" for 0x40baa8>, <DisassemblerInsn "mov" for 0x40bab0>, <DisassemblerInsn "mov" for 0x40bab8>, <DisassemblerInsn "add" for 0x40babb>, <DisassemblerInsn "mov" for 0x40bac2>, <DisassemblerInsn "add" for 0x40bac5>, <DisassemblerInsn "mov" for 0x40bacc>, <DisassemblerInsn "mov" for 0x40bad4>, <DisassemblerInsn "mov" for 0x40bada>, <DisassemblerInsn "add" for 0x40bae1>, <DisassemblerInsn "mov" for 0x40bae4>, <DisassemblerInsn "mov" for 0x40bae6>, <DisassemblerInsn "shl" for 0x40bae8>, <DisassemblerInsn "call" for 0x40baeb>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40bccc>, <DisassemblerInsn "mov" for 0x40bcd1>, <DisassemblerInsn "mov" for 0x40bcd6>, <DisassemblerInsn "mov" for 0x40bcdb>, <DisassemblerInsn "cmp" for 0x40bce3>, <DisassemblerInsn "je" for 0x40bce6>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40bde1>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40bd38>, <DisassemblerInsn "mov" for 0x40bd3d>, <DisassemblerInsn "mov" for 0x40bd42>, <DisassemblerInsn "mov" for 0x40bd47>, <DisassemblerInsn "cmp" for 0x40bd4f>, <DisassemblerInsn "je" for 0x40bd52>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "add" for 0x40be18>, <DisassemblerInsn "ret" for 0x40be1f>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40bde3>, <DisassemblerInsn "mov" for 0x40bdeb>, <DisassemblerInsn "mov" for 0x40bdf2>, <DisassemblerInsn "mov" for 0x40bdf9>, <DisassemblerInsn "mov" for 0x40bdff>, <DisassemblerInsn "mov" for 0x40be07>, <DisassemblerInsn "mov" for 0x40be0e>, <DisassemblerInsn "add" for 0x40be18>, <DisassemblerInsn "ret" for 0x40be1f>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40bbcf>, <DisassemblerInsn "mov" for 0x40bbd6>, <DisassemblerInsn "mov" for 0x40bbde>, <DisassemblerInsn "mov" for 0x40bbe6>, <DisassemblerInsn "cmp" for 0x40bbed>, <DisassemblerInsn "setl" for 0x40bbf0>, <DisassemblerInsn "mov" for 0x40bbf4>, <DisassemblerInsn "mov" for 0x40bbf9>, <DisassemblerInsn "add" for 0x40bbfb>, <DisassemblerInsn "mov" for 0x40bbfe>, <DisassemblerInsn "mov" for 0x40bc00>, <DisassemblerInsn "add" for 0x40bc05>, <DisassemblerInsn "mov" for 0x40bc08>, <DisassemblerInsn "mov" for 0x40bc0a>, <DisassemblerInsn "mov" for 0x40bc0f>, <DisassemblerInsn "mov" for 0x40bc14>, <DisassemblerInsn "mov" for 0x40bc19>, <DisassemblerInsn "movss" for 0x40bc1d>, <DisassemblerInsn "mov" for 0x40bc26>, <DisassemblerInsn "mov" for 0x40bc2b>, <DisassemblerInsn "mov" for 0x40bc30>, <DisassemblerInsn "mov" for 0x40bc34>, <DisassemblerInsn "mov" for 0x40bc38>, <DisassemblerInsn "mov" for 0x40bc3d>, <DisassemblerInsn "movzx" for 0x40bc42>, <DisassemblerInsn "mov" for 0x40bc45>, <DisassemblerInsn "mov" for 0x40bc48>, <DisassemblerInsn "cvtsi2ss" for 0x40bc4d>, <DisassemblerInsn "movzx" for 0x40bc51>, <DisassemblerInsn "mov" for 0x40bc54>, <DisassemblerInsn "mov" for 0x40bc57>, <DisassemblerInsn "cvtsi2ss" for 0x40bc5c>, <DisassemblerInsn "mulss" for 0x40bc60>, <DisassemblerInsn "ucomiss" for 0x40bc64>, <DisassemblerInsn "jb" for 0x40bc67>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40bcb4>, <DisassemblerInsn "mov" for 0x40bcb9>, <DisassemblerInsn "add" for 0x40bcbe>, <DisassemblerInsn "cmp" for 0x40bcc2>, <DisassemblerInsn "mov" for 0x40bcc5>, <DisassemblerInsn "je" for 0x40bcca>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40bc90>, <DisassemblerInsn "mov" for 0x40bc94>, <DisassemblerInsn "mov" for 0x40bc99>, <DisassemblerInsn "sub" for 0x40bc9e>, <DisassemblerInsn "sete" for 0x40bca1>, <DisassemblerInsn "or" for 0x40bca4>, <DisassemblerInsn "xor" for 0x40bca6>, <DisassemblerInsn "test" for 0x40bca8>, <DisassemblerInsn "mov" for 0x40bcab>, <DisassemblerInsn "jne" for 0x40bcb0>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40bd54>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40bb4e>, <DisassemblerInsn "mov" for 0x40bb56>, <DisassemblerInsn "mov" for 0x40bb5e>, <DisassemblerInsn "mov" for 0x40bb66>, <DisassemblerInsn "add" for 0x40bb68>, <DisassemblerInsn "mov" for 0x40bb6a>, <DisassemblerInsn "mov" for 0x40bb6c>, <DisassemblerInsn "mov" for 0x40bb6e>, <DisassemblerInsn "lea" for 0x40bb73>, <DisassemblerInsn "call" for 0x40bb7a>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40bd20>, <DisassemblerInsn "mov" for 0x40bd25>, <DisassemblerInsn "add" for 0x40bd2a>, <DisassemblerInsn "cmp" for 0x40bd2e>, <DisassemblerInsn "mov" for 0x40bd31>, <DisassemblerInsn "je" for 0x40bd36>]'}], 'cfg_block_detailed_info': [{'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd0]>', '<mov~~cx, word ptr [rsp + 0xce]>', '<mov~~rdx, qword ptr [rsp + 0xc0]>', '<mov~~rsi, qword ptr [rsp + 0xf8]>', '<movzx~~esi, byte ptr [rsi + rax + 0x2ae4f]>', '<add~~cx, si>', '<mov~~word ptr [rsp + 0xb6], cx>', '<mov~~word ptr [rsp + rax*2 + 0x10e], cx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0xb8], rax>', '<cmp~~rax, rdx>', '<mov~~word ptr [rsp + 0xce], cx>', '<mov~~qword ptr [rsp + 0xd0], rax>', '<jne~~0x40ba32>']}, {'block_Idx': 24, 'blockInsts': ['<jmp~~0x40bcb4>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x118>', '<mov~~qword ptr [rsp + 0xf8], rdi>', '<lea~~rax, [rsp + 0x10e]>', '<mov~~qword ptr [rsp + 0x100], rax>', '<mov~~eax, dword ptr [rdi + 0x18]>', '<mov~~dword ptr [rsp + 0x108], eax>', '<cmp~~eax, 0>', '<je~~0x40bde3>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rdx, qword ptr [rsp + 0x88]>', '<mov~~ecx, dword ptr [rsp + 0x3c]>', '<add~~ecx, -1>', '<mov~~dword ptr [rdx], ecx>', '<mov~~dword ptr [rsp + 0x2c], ecx>', '<mov~~qword ptr [rsp + 0x30], rax>', '<jmp~~0x40bda1>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x100]>', '<mov~~ecx, dword ptr [rsp + 0xf4]>', '<add~~ecx, 1>', '<mov~~ecx, ecx>', '<mov~~qword ptr [rsp + 0xc0], rcx>', '<mov~~cx, word ptr [rax]>', '<mov~~eax, 1>', '<mov~~word ptr [rsp + 0xce], cx>', '<mov~~qword ptr [rsp + 0xd0], rax>', '<mov~~rax, qword ptr [rsp + 0xd0]>', '<mov~~cx, word ptr [rsp + 0xce]>', '<mov~~rdx, qword ptr [rsp + 0xc0]>', '<mov~~rsi, qword ptr [rsp + 0xf8]>', '<movzx~~esi, byte ptr [rsi + rax + 0x2ae4f]>', '<add~~cx, si>', '<mov~~word ptr [rsp + 0xb6], cx>', '<mov~~word ptr [rsp + rax*2 + 0x10e], cx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0xb8], rax>', '<cmp~~rax, rdx>', '<mov~~word ptr [rsp + 0xce], cx>', '<mov~~qword ptr [rsp + 0xd0], rax>', '<jne~~0x40ba32>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xf8]>', '<mov~~eax, dword ptr [rax + 0x2ae4c]>', '<mov~~dword ptr [rsp + 0xb0], eax>', '<cmp~~eax, 1>', '<jbe~~0x40bb4e>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x3c]>', '<mov~~rdx, qword ptr [rsp + 0x48]>', '<mov~~si, word ptr [rsp + 0x52]>', '<mov~~rax, rdx>', '<add~~rax, 2>', '<mov~~word ptr [rdx + 2], si>', '<mov~~dword ptr [rsp + 0x2c], ecx>', '<mov~~qword ptr [rsp + 0x30], rax>', '<jmp~~0x40bda1>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xb0]>', '<mov~~rdi, qword ptr [rsp + 0xf8]>', '<mov~~ecx, dword ptr [rsp + 0xac]>', '<mov~~ecx, ecx>', '<add~~rdi, 0x2ae12>', '<shl~~rcx, 1>', '<add~~rdi, rcx>', '<add~~rdi, 2>', '<lea~~rsi, [rsp + 0x10e]>', '<add~~rsi, 2>', '<add~~eax, -1>', '<mov~~eax, eax>', '<mov~~edx, eax>', '<shl~~rdx, 1>', '<call~~0x500060>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa0]>', '<mov~~rdx, qword ptr [rsp + 0x90]>', '<mov~~rcx, qword ptr [rsp + 0xf8]>', '<mov~~eax, dword ptr [rax]>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0x80], edx>', '<add~~eax, -1>', '<add~~eax, edx>', '<mov~~dword ptr [rsp + 0x84], eax>', '<mov~~rdx, rcx>', '<add~~rdx, 0x2ad0c>', '<mov~~qword ptr [rsp + 0x88], rdx>', '<mov~~dword ptr [rcx + 0x2ad0c], eax>', '<cmp~~eax, 0>', '<je~~0x40bde1>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x57]>', '<xor~~eax, eax>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x10], rax>', '<jne~~0x40bd56>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~rdx, qword ptr [rsp + 0x88]>', '<mov~~ecx, dword ptr [rsp + 0x3c]>', '<mov~~si, word ptr [rsp + 0x52]>', '<mov~~word ptr [rax], si>', '<add~~ecx, -1>', '<mov~~dword ptr [rdx], ecx>', '<mov~~dword ptr [rsp + 0x2c], ecx>', '<mov~~qword ptr [rsp + 0x30], rax>', '<jmp~~0x40bda1>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xf8]>', '<mov~~ecx, dword ptr [rsp + 0x108]>', '<add~~ecx, -1>', '<mov~~ecx, ecx>', '<mov~~edx, ecx>', '<lea~~rcx, [rip + 0x353d]>', '<movss~~xmm0, dword ptr [rcx + rdx*4]>', '<movss~~dword ptr [rsp + 0xdc], xmm0>', '<lea~~rcx, [rsp + 0x10e]>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ae12>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ae12>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0xe8], rcx>', '<mov~~ecx, dword ptr [rax + 0x44]>', '<mov~~word ptr [rsp + 0x10e], cx>', '<mov~~eax, dword ptr [rax + 0x2ae4c]>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<cmp~~eax, 0>', '<je~~0x40ba8e>']}, {'block_Idx': 18, 'blockInsts': ['<jmp~~0x40bccc>']}, {'block_Idx': 22, 'blockInsts': ['<movss~~xmm1, dword ptr [rsp + 0xdc]>', '<mov~~rax, qword ptr [rsp + 0x68]>', '<mov~~rcx, qword ptr [rsp + 0x70]>', '<mov~~edx, dword ptr [rsp + 0x7c]>', '<mov~~dword ptr [rsp + 0x3c], edx>', '<mov~~qword ptr [rsp + 0x40], rcx>', '<mov~~qword ptr [rsp + 0x48], rax>', '<movzx~~ecx, word ptr [rcx]>', '<mov~~dx, cx>', '<mov~~word ptr [rsp + 0x52], dx>', '<cvtsi2ss~~xmm0, ecx>', '<movzx~~eax, word ptr [rax]>', '<mov~~cx, ax>', '<mov~~word ptr [rsp + 0x54], cx>', '<cvtsi2ss~~xmm2, eax>', '<mulss~~xmm1, xmm2>', '<ucomiss~~xmm0, xmm1>', '<jb~~0x40bc90>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x3c]>', '<mov~~rdx, qword ptr [rsp + 0x48]>', '<mov~~si, word ptr [rsp + 0x52]>', '<mov~~rax, rdx>', '<add~~rax, 2>', '<mov~~word ptr [rdx + 2], si>', '<mov~~dword ptr [rsp + 0x2c], ecx>', '<mov~~qword ptr [rsp + 0x30], rax>', '<mov~~rsi, qword ptr [rsp + 0xf8]>', '<mov~~rcx, qword ptr [rsp + 0x40]>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<add~~rcx, 2>', '<mov~~edi, eax>', '<add~~rsi, 0x2ae12>', '<shl~~rdi, 1>', '<add~~rsi, rdi>', '<cmp~~rdx, rsi>', '<mov~~qword ptr [rsp + 0x68], rdx>', '<mov~~qword ptr [rsp + 0x70], rcx>', '<mov~~dword ptr [rsp + 0x7c], eax>', '<jb~~0x40bc1d>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0xf8]>', '<mov~~rcx, qword ptr [rsp + 0x40]>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<add~~rcx, 2>', '<mov~~edi, eax>', '<add~~rsi, 0x2ae12>', '<shl~~rdi, 1>', '<add~~rsi, rdi>', '<cmp~~rdx, rsi>', '<mov~~qword ptr [rsp + 0x68], rdx>', '<mov~~qword ptr [rsp + 0x70], rcx>', '<mov~~dword ptr [rsp + 0x7c], eax>', '<jb~~0x40bc1d>']}, {'block_Idx': 25, 'blockInsts': ['<jmp~~0x40bd38>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xf8]>', '<mov~~rdi, qword ptr [rsp + 0xe0]>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ae4c>', '<mov~~qword ptr [rsp + 0x90], rcx>', '<mov~~qword ptr [rsp + 0x98], rdi>', '<mov~~rsi, rax>', '<add~~rsi, 0x2ad72>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ad00>', '<mov~~qword ptr [rsp + 0xa0], rcx>', '<mov~~eax, dword ptr [rax + 0x2ad00]>', '<mov~~dword ptr [rsp + 0xac], eax>', '<add~~eax, 1>', '<mov~~eax, eax>', '<mov~~edx, eax>', '<shl~~rdx, 1>', '<call~~0x500060>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~cx, word ptr [rsp + 0x52]>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~ax, word ptr [rsp + rax*2 + 0x10e]>', '<cmp~~ax, cx>', '<je~~0x40bd0e>']}, {'block_Idx': 13, 'blockInsts': ['<jmp~~0x40be18>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~cx, word ptr [rsp + 0x54]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~ax, word ptr [rsp + rax*2 + 0x10e]>', '<cmp~~ax, cx>', '<je~~0x40bd7f>']}, {'block_Idx': 15, 'blockInsts': ['<add~~rsp, 0x118>', '<ret~~>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xf8]>', '<mov~~cx, word ptr [rax + 0x2ad72]>', '<mov~~word ptr [rax + 0x2ae12], cx>', '<mov~~ecx, dword ptr [rax + 0x2ad00]>', '<mov~~cx, word ptr [rax + rcx*2 + 0x2ad72]>', '<mov~~word ptr [rax + 0x2ae14], cx>', '<mov~~dword ptr [rax + 0x2ad0c], 1>', '<add~~rsp, 0x118>', '<ret~~>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<mov~~rcx, qword ptr [rsp + 0xe8]>', '<mov~~rdx, qword ptr [rsp + 0xe0]>', '<mov~~esi, dword ptr [rsp + 0x80]>', '<cmp~~esi, 0>', '<setl~~dil>', '<mov~~byte ptr [rsp + 0x57], dil>', '<mov~~edi, esi>', '<add~~edi, 1>', '<mov~~edi, edi>', '<mov~~qword ptr [rsp + 0x58], rdi>', '<add~~esi, 1>', '<mov~~esi, esi>', '<mov~~qword ptr [rsp + 0x60], rsi>', '<mov~~qword ptr [rsp + 0x68], rdx>', '<mov~~qword ptr [rsp + 0x70], rcx>', '<mov~~dword ptr [rsp + 0x7c], eax>', '<movss~~xmm1, dword ptr [rsp + 0xdc]>', '<mov~~rax, qword ptr [rsp + 0x68]>', '<mov~~rcx, qword ptr [rsp + 0x70]>', '<mov~~edx, dword ptr [rsp + 0x7c]>', '<mov~~dword ptr [rsp + 0x3c], edx>', '<mov~~qword ptr [rsp + 0x40], rcx>', '<mov~~qword ptr [rsp + 0x48], rax>', '<movzx~~ecx, word ptr [rcx]>', '<mov~~dx, cx>', '<mov~~word ptr [rsp + 0x52], dx>', '<cvtsi2ss~~xmm0, ecx>', '<movzx~~eax, word ptr [rax]>', '<mov~~cx, ax>', '<mov~~word ptr [rsp + 0x54], cx>', '<cvtsi2ss~~xmm2, eax>', '<mulss~~xmm1, xmm2>', '<ucomiss~~xmm0, xmm1>', '<jb~~0x40bc90>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<add~~rax, 1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x20], rax>', '<je~~0x40bcea>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x57]>', '<mov~~dx, word ptr [rsp + 0x54]>', '<mov~~cx, word ptr [rsp + 0x52]>', '<sub~~cx, dx>', '<sete~~cl>', '<or~~cl, al>', '<xor~~eax, eax>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x20], rax>', '<jne~~0x40bcea>']}, {'block_Idx': 30, 'blockInsts': ['<jmp~~0x40bd20>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x90]>', '<mov~~rcx, qword ptr [rsp + 0xa0]>', '<mov~~rdi, qword ptr [rsp + 0x98]>', '<mov~~eax, dword ptr [rax]>', '<add~~eax, dword ptr [rcx]>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<mov~~edx, 2>', '<lea~~rcx, [rip + 0x2a6]>', '<call~~0x500050>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x60]>', '<mov~~rax, qword ptr [rsp + 8]>', '<add~~rax, 1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x10], rax>', '<je~~0x40bd56>']}], 'cfg_edge_info': [(24, 27), (4, 3), (3, 7), (4, 6), (12, 13), (14, 16), (22, 17), (31, 26), (0, 2), (9, 8), (23, 25), (8, 12), (27, 19), (28, 30), (26, 20), (16, 19), (25, 28), (20, 13), (29, 13), (29, 22), (22, 16), (21, 24), (20, 22), (31, 28), (0, 1), (2, 4), (27, 21), (17, 20), (28, 29), (19, 20), (30, 31), (7, 9), (16, 18), (18, 21), (21, 23), (12, 14), (23, 26), (14, 17), (2, 3), (6, 6), (13, 15), (6, 3), (7, 8)], 'cdg_edge_info': [(4, 6), (31, 26), (14, 16), (22, 17), (23, 28), (0, 2), (27, 19), (0, 8), (16, 19), (29, 22), (22, 16), (31, 28), (21, 27), (0, 1), (0, 7), (2, 4), (27, 21), (0, 13), (28, 29), (7, 9), (16, 21), (21, 23), (12, 14), (23, 26), (14, 17), (0, 3), (0, 12), (0, 15), (28, 31), (6, 6)], 'ddg_edge_info': [(3, 7), (4, 6), (12, 19), (14, 16), (22, 17), (0, 2), (23, 28), (22, 26), (9, 8), (14, 22), (8, 12), (22, 29), (8, 15), (14, 31), (8, 21), (2, 14), (8, 27), (1, 15), (0, 29), (2, 21), (26, 29), (29, 22), (22, 16), (3, 9), (3, 12), (22, 19), (31, 28), (21, 27), (22, 28), (0, 1), (0, 7), (8, 14), (2, 4), (27, 21), (14, 27), (2, 7), (8, 23), (0, 4), (8, 17), (17, 29), (8, 26), (19, 29), (8, 29), (7, 9), (2, 22), (2, 28), (16, 21), (12, 14), (3, 8), (22, 21), (12, 26), (14, 23), (0, 3), (0, 9), (8, 16), (0, 6), (2, 3), (8, 19), (17, 22), (0, 12), (28, 31), (8, 22), (8, 28), (8, 31)]}]}
{'sbr_make_f_tablelim': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 10, 'instruction': 'addl\t$-1, %ecx'}, {'instIndex': 11, 'instruction': 'movl\t%ecx, %ecx'}, {'instIndex': 12, 'instruction': 'movl\t%ecx, %edx'}, {'instIndex': 13, 'instruction': 'leaq\tsbr_make_f_tablelim.bands_warped(%rip), %rcx'}, {'instIndex': 14, 'instruction': 'movss\t(%rcx,%rdx,4), %xmm0            # xmm0 = mem[0],zero,zero,zero'}, {'instIndex': 15, 'instruction': 'movss\t%xmm0, 0xdc(%rsp)                # 4-byte Spill'}, {'instIndex': 16, 'instruction': 'leaq\t0x10e(%rsp), %rcx'}, {'instIndex': 17, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 18, 'instruction': 'addq\t$0x2ae12, %rcx                   # imm = 0x2AE12'}, {'instIndex': 19, 'instruction': 'movq\t%rcx, 0xe0(%rsp)                 # 8-byte Spill'}, {'instIndex': 20, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 21, 'instruction': 'addq\t$0x2ae12, %rcx                   # imm = 0x2AE12'}, {'instIndex': 22, 'instruction': 'addq\t$2, %rcx'}, {'instIndex': 23, 'instruction': 'movq\t%rcx, 0xe8(%rsp)                 # 8-byte Spill'}, {'instIndex': 24, 'instruction': 'movl\t0x44(%rax), %ecx'}, {'instIndex': 25, 'instruction': 'movw\t%cx, 0x10e(%rsp)'}]}]}
The case of compiler clang with optimization O2.
Patched source code file: aacsbr.c
Patched function: 1---static void sbr_make_f_tablelim 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_before/O2/aacsbr.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_before/O2/aacsbr.s---sbr_make_f_tablelim---before
function id: 6
function flag: True
There are 325 instructions for function: sbr_make_f_tablelim in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '174', 'end': 180}, 'before': {'start': '174', 'end': 180}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 8, 'instruction': 'addl\t$-1, %ecx'}, {'instIndex': 9, 'instruction': 'movl\t%ecx, %ecx'}, {'instIndex': 10, 'instruction': 'movl\t%ecx, %edx'}, {'instIndex': 11, 'instruction': 'leaq\tsbr_make_f_tablelim.bands_warped(%rip), %rcx'}, {'instIndex': 12, 'instruction': 'movss\t(%rcx,%rdx,4), %xmm0            # xmm0 = mem[0],zero,zero,zero'}, {'instIndex': 13, 'instruction': 'movss\t%xmm0, 0x144(%rsp)                # 4-byte Spill'}, {'instIndex': 14, 'instruction': 'leaq\t0x17e(%rsp), %rcx'}, {'instIndex': 15, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 16, 'instruction': 'addq\t$0x2ae12, %rcx                   # imm = 0x2AE12'}, {'instIndex': 17, 'instruction': 'movq\t%rcx, 0x148(%rsp)                 # 8-byte Spill'}, {'instIndex': 18, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 19, 'instruction': 'addq\t$0x2ae12, %rcx                   # imm = 0x2AE12'}, {'instIndex': 20, 'instruction': 'addq\t$2, %rcx'}, {'instIndex': 21, 'instruction': 'movq\t%rcx, 0x150(%rsp)                 # 8-byte Spill'}, {'instIndex': 22, 'instruction': 'movl\t0x44(%rax), %ecx'}, {'instIndex': 24, 'instruction': 'movw\t%cx, 0x17e(%rsp)'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_before/O2/aacsbr.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_before/O2/aacsbr.o---before
The extraction of function: sbr_make_f_tablelim
Analyzing the binaries to generate subCFGs from patched function ...
It has 1057 nodes and 1913 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 325 instructions in binary file.
[4263874]
The execution time of patched subCFG information extraction via angr: 0:00:01.516093
{'sbr_make_f_tablelim': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x410fa0>, <DisassemblerInsn "mov" for 0x410fa7>, <DisassemblerInsn "mov" for 0x410faf>, <DisassemblerInsn "mov" for 0x410fb2>, <DisassemblerInsn "cmp" for 0x410fb9>, <DisassemblerInsn "je" for 0x410fbc>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411288>, <DisassemblerInsn "mov" for 0x411290>, <DisassemblerInsn "mov" for 0x411298>, <DisassemblerInsn "mov" for 0x4112a0>, <DisassemblerInsn "add" for 0x4112a3>, <DisassemblerInsn "mov" for 0x4112aa>, <DisassemblerInsn "add" for 0x4112ad>, <DisassemblerInsn "mov" for 0x4112b4>, <DisassemblerInsn "mov" for 0x4112bc>, <DisassemblerInsn "mov" for 0x4112c2>, <DisassemblerInsn "add" for 0x4112c9>, <DisassemblerInsn "mov" for 0x4112cc>, <DisassemblerInsn "mov" for 0x4112ce>, <DisassemblerInsn "shl" for 0x4112d0>, <DisassemblerInsn "call" for 0x4112d3>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411058>, <DisassemblerInsn "mov" for 0x411060>, <DisassemblerInsn "add" for 0x411067>, <DisassemblerInsn "mov" for 0x41106a>, <DisassemblerInsn "mov" for 0x41106c>, <DisassemblerInsn "mov" for 0x41106e>, <DisassemblerInsn "add" for 0x411071>, <DisassemblerInsn "mov" for 0x411075>, <DisassemblerInsn "add" for 0x41107d>, <DisassemblerInsn "and" for 0x411081>, <DisassemblerInsn "mov" for 0x411085>, <DisassemblerInsn "mov" for 0x41108d>, <DisassemblerInsn "cmp" for 0x411092>, <DisassemblerInsn "mov" for 0x411096>, <DisassemblerInsn "mov" for 0x41109e>, <DisassemblerInsn "jb" for 0x4110a6>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x410fc2>, <DisassemblerInsn "mov" for 0x410fca>, <DisassemblerInsn "add" for 0x410fd1>, <DisassemblerInsn "mov" for 0x410fd4>, <DisassemblerInsn "mov" for 0x410fd6>, <DisassemblerInsn "lea" for 0x410fd8>, <DisassemblerInsn "movss" for 0x410fdf>, <DisassemblerInsn "movss" for 0x410fe4>, <DisassemblerInsn "lea" for 0x410fed>, <DisassemblerInsn "mov" for 0x410ff5>, <DisassemblerInsn "add" for 0x410ff8>, <DisassemblerInsn "mov" for 0x410fff>, <DisassemblerInsn "mov" for 0x411007>, <DisassemblerInsn "add" for 0x41100a>, <DisassemblerInsn "add" for 0x411011>, <DisassemblerInsn "mov" for 0x411015>, <DisassemblerInsn "mov" for 0x41101d>, <DisassemblerInsn "mov" for 0x411020>, <DisassemblerInsn "mov" for 0x411028>, <DisassemblerInsn "mov" for 0x411030>, <DisassemblerInsn "add" for 0x411033>, <DisassemblerInsn "mov" for 0x41103a>, <DisassemblerInsn "mov" for 0x411042>, <DisassemblerInsn "mov" for 0x411048>, <DisassemblerInsn "cmp" for 0x41104f>, <DisassemblerInsn "je" for 0x411052>]'}], 'cfg_block_detailed_info': [{'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x188>', '<mov~~qword ptr [rsp + 0x170], rdi>', '<mov~~eax, dword ptr [rdi + 0x18]>', '<mov~~dword ptr [rsp + 0x178], eax>', '<cmp~~eax, 0>', '<je~~0x411611>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x170]>', '<mov~~rdi, qword ptr [rsp + 0x148]>', '<mov~~qword ptr [rsp + 0x90], rdi>', '<mov~~rsi, rax>', '<add~~rsi, 0x2ad72>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ad00>', '<mov~~qword ptr [rsp + 0x98], rcx>', '<mov~~eax, dword ptr [rax + 0x2ad00]>', '<mov~~dword ptr [rsp + 0xa4], eax>', '<add~~eax, 1>', '<mov~~eax, eax>', '<mov~~edx, eax>', '<shl~~rdx, 1>', '<call~~0x500058>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~cx, word ptr [rsp + 0x15e]>', '<mov~~eax, dword ptr [rsp + 0x16c]>', '<add~~eax, 1>', '<mov~~eax, eax>', '<mov~~edx, eax>', '<mov~~rax, rdx>', '<add~~rax, -1>', '<mov~~qword ptr [rsp + 0x120], rax>', '<add~~rdx, -2>', '<and~~rax, 3>', '<mov~~qword ptr [rsp + 0x128], rax>', '<mov~~eax, 1>', '<cmp~~rdx, 3>', '<mov~~word ptr [rsp + 0x136], cx>', '<mov~~qword ptr [rsp + 0x138], rax>', '<jb~~0x4111d8>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x170]>', '<mov~~ecx, dword ptr [rsp + 0x178]>', '<add~~ecx, -1>', '<mov~~ecx, ecx>', '<mov~~edx, ecx>', '<lea~~rcx, [rip + 0x42ed]>', '<movss~~xmm0, dword ptr [rcx + rdx*4]>', '<movss~~dword ptr [rsp + 0x144], xmm0>', '<lea~~rcx, [rsp + 0x17e]>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ae12>', '<mov~~qword ptr [rsp + 0x148], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ae12>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x150], rcx>', '<mov~~ecx, dword ptr [rax + 0x44]>', '<mov~~word ptr [rsp + 0x15e], cx>', '<mov~~word ptr [rsp + 0x17e], cx>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ae4c>', '<mov~~qword ptr [rsp + 0x160], rcx>', '<mov~~eax, dword ptr [rax + 0x2ae4c]>', '<mov~~dword ptr [rsp + 0x16c], eax>', '<cmp~~eax, 0>', '<je~~0x411288>']}], 'cfg_edge_info': [(2, 3), (0, 2), (2, 4)]}]}
{'sbr_make_f_tablelim': [4263874]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_before/O2/aacsbr.o---before
The extraction of function: sbr_make_f_tablelim
[4263874]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 35 nodes and 55 edges in CFGEmulated.
It has 35 nodes and 46 edges in CDG.
It has 1253 nodes and 1572 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4263874]
{4264707, 4264584, 4265227, 4265487, 4264464, 4265489, 4264854, 4265373, 4263840, 4265130, 4264108, 4265008, 4265273, 4263874, 4265542, 4264775, 4265166, 4265297, 4264408, 4264664, 4264024, 4264934, 4264167, 4265190, 4264809, 4265327, 4265086}
[24, 6, 9, 32, 15, 22, 17, 28, 25, 16, 1, 10, 31, 33, 18, 0, 4, 2, 8, 7, 23, 21, 30, 26, 34, 3, 12, 27, 29, 11, 20]
The execution time of patched slicing information extraction via angr: 0:00:10.907871
{'sbr_make_f_tablelim': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x41150b>, <DisassemblerInsn "mov" for 0x411510>, <DisassemblerInsn "mov" for 0x411515>, <DisassemblerInsn "mov" for 0x41151d>, <DisassemblerInsn "add" for 0x411521>, <DisassemblerInsn "mov" for 0x411524>, <DisassemblerInsn "mov" for 0x411526>, <DisassemblerInsn "mov" for 0x41152b>, <DisassemblerInsn "mov" for 0x41152f>, <DisassemblerInsn "jmp" for 0x411534>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4111d8>, <DisassemblerInsn "mov" for 0x4111e0>, <DisassemblerInsn "mov" for 0x4111e8>, <DisassemblerInsn "xor" for 0x4111f0>, <DisassemblerInsn "cmp" for 0x4111f2>, <DisassemblerInsn "mov" for 0x4111f6>, <DisassemblerInsn "mov" for 0x4111fe>, <DisassemblerInsn "mov" for 0x411206>, <DisassemblerInsn "je" for 0x41120e>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411210>, <DisassemblerInsn "mov" for 0x411218>, <DisassemblerInsn "mov" for 0x411220>, <DisassemblerInsn "mov" for 0x411228>, <DisassemblerInsn "mov" for 0x411230>, <DisassemblerInsn "movzx" for 0x411238>, <DisassemblerInsn "add" for 0x411240>, <DisassemblerInsn "mov" for 0x411243>, <DisassemblerInsn "mov" for 0x41124b>, <DisassemblerInsn "add" for 0x411253>, <DisassemblerInsn "mov" for 0x411257>, <DisassemblerInsn "add" for 0x41125f>, <DisassemblerInsn "mov" for 0x411263>, <DisassemblerInsn "cmp" for 0x41126b>, <DisassemblerInsn "mov" for 0x41126e>, <DisassemblerInsn "mov" for 0x411276>, <DisassemblerInsn "mov" for 0x41127e>, <DisassemblerInsn "jne" for 0x411286>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4114ce>, <DisassemblerInsn "mov" for 0x4114d3>, <DisassemblerInsn "add" for 0x4114d8>, <DisassemblerInsn "cmp" for 0x4114dc>, <DisassemblerInsn "mov" for 0x4114df>, <DisassemblerInsn "je" for 0x4114e4>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411396>, <DisassemblerInsn "mov" for 0x41139e>, <DisassemblerInsn "mov" for 0x4113a6>, <DisassemblerInsn "mov" for 0x4113ae>, <DisassemblerInsn "mov" for 0x4113b0>, <DisassemblerInsn "mov" for 0x4113b2>, <DisassemblerInsn "add" for 0x4113b9>, <DisassemblerInsn "add" for 0x4113bc>, <DisassemblerInsn "mov" for 0x4113be>, <DisassemblerInsn "mov" for 0x4113c5>, <DisassemblerInsn "add" for 0x4113c8>, <DisassemblerInsn "mov" for 0x4113cf>, <DisassemblerInsn "mov" for 0x4113d7>, <DisassemblerInsn "cmp" for 0x4113dd>, <DisassemblerInsn "je" for 0x4113e0>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x41147e>, <DisassemblerInsn "mov" for 0x411482>, <DisassemblerInsn "mov" for 0x411487>, <DisassemblerInsn "mov" for 0x41148c>, <DisassemblerInsn "add" for 0x41148f>, <DisassemblerInsn "mov" for 0x411493>, <DisassemblerInsn "mov" for 0x411497>, <DisassemblerInsn "mov" for 0x41149c>, <DisassemblerInsn "mov" for 0x4114a0>, <DisassemblerInsn "jmp" for 0x4114a5>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x41160f>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411551>, <DisassemblerInsn "mov" for 0x411556>, <DisassemblerInsn "mov" for 0x41155b>, <DisassemblerInsn "mov" for 0x411560>, <DisassemblerInsn "cmp" for 0x411568>, <DisassemblerInsn "je" for 0x41156b>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4115c4>, <DisassemblerInsn "mov" for 0x4115cc>, <DisassemblerInsn "mov" for 0x4115d1>, <DisassemblerInsn "mov" for 0x4115d6>, <DisassemblerInsn "mov" for 0x4115da>, <DisassemblerInsn "add" for 0x4115df>, <DisassemblerInsn "mov" for 0x4115e3>, <DisassemblerInsn "add" for 0x4115e6>, <DisassemblerInsn "shl" for 0x4115ed>, <DisassemblerInsn "add" for 0x4115f0>, <DisassemblerInsn "cmp" for 0x4115f3>, <DisassemblerInsn "mov" for 0x4115f6>, <DisassemblerInsn "mov" for 0x4115fb>, <DisassemblerInsn "mov" for 0x411600>, <DisassemblerInsn "mov" for 0x411605>, <DisassemblerInsn "jb" for 0x411609>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411347>, <DisassemblerInsn "mov" for 0x41134f>, <DisassemblerInsn "mov" for 0x411357>, <DisassemblerInsn "mov" for 0x411359>, <DisassemblerInsn "mov" for 0x41135b>, <DisassemblerInsn "mov" for 0x411362>, <DisassemblerInsn "mov" for 0x411369>, <DisassemblerInsn "mov" for 0x411371>, <DisassemblerInsn "mov" for 0x411378>, <DisassemblerInsn "add" for 0x41137f>, <DisassemblerInsn "mov" for 0x411381>, <DisassemblerInsn "mov" for 0x411383>, <DisassemblerInsn "mov" for 0x411385>, <DisassemblerInsn "lea" for 0x41138a>, <DisassemblerInsn "call" for 0x411391>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411611>, <DisassemblerInsn "mov" for 0x411619>, <DisassemblerInsn "mov" for 0x411620>, <DisassemblerInsn "mov" for 0x411627>, <DisassemblerInsn "mov" for 0x41162d>, <DisassemblerInsn "mov" for 0x411635>, <DisassemblerInsn "mov" for 0x41163c>, <DisassemblerInsn "add" for 0x411646>, <DisassemblerInsn "ret" for 0x41164d>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4110e7>, <DisassemblerInsn "mov" for 0x4110ef>, <DisassemblerInsn "mov" for 0x4110f7>, <DisassemblerInsn "mov" for 0x4110ff>, <DisassemblerInsn "mov" for 0x411107>, <DisassemblerInsn "mov" for 0x41110f>, <DisassemblerInsn "movzx" for 0x411117>, <DisassemblerInsn "add" for 0x411120>, <DisassemblerInsn "mov" for 0x411124>, <DisassemblerInsn "mov" for 0x41112c>, <DisassemblerInsn "movzx" for 0x411134>, <DisassemblerInsn "add" for 0x41113d>, <DisassemblerInsn "mov" for 0x411141>, <DisassemblerInsn "mov" for 0x411149>, <DisassemblerInsn "movzx" for 0x411151>, <DisassemblerInsn "add" for 0x41115a>, <DisassemblerInsn "mov" for 0x41115e>, <DisassemblerInsn "mov" for 0x411166>, <DisassemblerInsn "movzx" for 0x41116e>, <DisassemblerInsn "add" for 0x411176>, <DisassemblerInsn "mov" for 0x411179>, <DisassemblerInsn "mov" for 0x411181>, <DisassemblerInsn "add" for 0x411189>, <DisassemblerInsn "mov" for 0x41118d>, <DisassemblerInsn "add" for 0x411195>, <DisassemblerInsn "mov" for 0x411199>, <DisassemblerInsn "cmp" for 0x4111a1>, <DisassemblerInsn "mov" for 0x4111a4>, <DisassemblerInsn "mov" for 0x4111a7>, <DisassemblerInsn "mov" for 0x4111af>, <DisassemblerInsn "mov" for 0x4111b2>, <DisassemblerInsn "mov" for 0x4111ba>, <DisassemblerInsn "mov" for 0x4111c2>, <DisassemblerInsn "mov" for 0x4111ca>, <DisassemblerInsn "jne" for 0x4111d2>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x41156d>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411539>, <DisassemblerInsn "mov" for 0x41153e>, <DisassemblerInsn "add" for 0x411543>, <DisassemblerInsn "cmp" for 0x411547>, <DisassemblerInsn "mov" for 0x41154a>, <DisassemblerInsn "je" for 0x41154f>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4113e6>, <DisassemblerInsn "mov" for 0x4113ed>, <DisassemblerInsn "mov" for 0x4113f5>, <DisassemblerInsn "mov" for 0x4113fd>, <DisassemblerInsn "cmp" for 0x411404>, <DisassemblerInsn "setl" for 0x411407>, <DisassemblerInsn "mov" for 0x41140b>, <DisassemblerInsn "add" for 0x411410>, <DisassemblerInsn "mov" for 0x411413>, <DisassemblerInsn "mov" for 0x411415>, <DisassemblerInsn "mov" for 0x41141a>, <DisassemblerInsn "mov" for 0x41141d>, <DisassemblerInsn "mov" for 0x411422>, <DisassemblerInsn "mov" for 0x411427>, <DisassemblerInsn "mov" for 0x41142c>, <DisassemblerInsn "movss" for 0x411430>, <DisassemblerInsn "mov" for 0x411439>, <DisassemblerInsn "mov" for 0x41143e>, <DisassemblerInsn "mov" for 0x411443>, <DisassemblerInsn "mov" for 0x411448>, <DisassemblerInsn "mov" for 0x41144c>, <DisassemblerInsn "mov" for 0x411450>, <DisassemblerInsn "mov" for 0x411455>, <DisassemblerInsn "mov" for 0x41145a>, <DisassemblerInsn "movzx" for 0x41145f>, <DisassemblerInsn "mov" for 0x411462>, <DisassemblerInsn "mov" for 0x411465>, <DisassemblerInsn "cvtsi2ss" for 0x41146a>, <DisassemblerInsn "movzx" for 0x41146e>, <DisassemblerInsn "cvtsi2ss" for 0x411471>, <DisassemblerInsn "mulss" for 0x411475>, <DisassemblerInsn "ucomiss" for 0x411479>, <DisassemblerInsn "jb" for 0x41147c>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x410fa0>, <DisassemblerInsn "mov" for 0x410fa7>, <DisassemblerInsn "mov" for 0x410faf>, <DisassemblerInsn "mov" for 0x410fb2>, <DisassemblerInsn "cmp" for 0x410fb9>, <DisassemblerInsn "je" for 0x410fbc>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411058>, <DisassemblerInsn "mov" for 0x411060>, <DisassemblerInsn "add" for 0x411067>, <DisassemblerInsn "mov" for 0x41106a>, <DisassemblerInsn "mov" for 0x41106c>, <DisassemblerInsn "mov" for 0x41106e>, <DisassemblerInsn "add" for 0x411071>, <DisassemblerInsn "mov" for 0x411075>, <DisassemblerInsn "add" for 0x41107d>, <DisassemblerInsn "and" for 0x411081>, <DisassemblerInsn "mov" for 0x411085>, <DisassemblerInsn "mov" for 0x41108d>, <DisassemblerInsn "cmp" for 0x411092>, <DisassemblerInsn "mov" for 0x411096>, <DisassemblerInsn "mov" for 0x41109e>, <DisassemblerInsn "jb" for 0x4110a6>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x410fc2>, <DisassemblerInsn "mov" for 0x410fca>, <DisassemblerInsn "add" for 0x410fd1>, <DisassemblerInsn "mov" for 0x410fd4>, <DisassemblerInsn "mov" for 0x410fd6>, <DisassemblerInsn "lea" for 0x410fd8>, <DisassemblerInsn "movss" for 0x410fdf>, <DisassemblerInsn "movss" for 0x410fe4>, <DisassemblerInsn "lea" for 0x410fed>, <DisassemblerInsn "mov" for 0x410ff5>, <DisassemblerInsn "add" for 0x410ff8>, <DisassemblerInsn "mov" for 0x410fff>, <DisassemblerInsn "mov" for 0x411007>, <DisassemblerInsn "add" for 0x41100a>, <DisassemblerInsn "add" for 0x411011>, <DisassemblerInsn "mov" for 0x411015>, <DisassemblerInsn "mov" for 0x41101d>, <DisassemblerInsn "mov" for 0x411020>, <DisassemblerInsn "mov" for 0x411028>, <DisassemblerInsn "mov" for 0x411030>, <DisassemblerInsn "add" for 0x411033>, <DisassemblerInsn "mov" for 0x41103a>, <DisassemblerInsn "mov" for 0x411042>, <DisassemblerInsn "mov" for 0x411048>, <DisassemblerInsn "cmp" for 0x41104f>, <DisassemblerInsn "je" for 0x411052>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4112d8>, <DisassemblerInsn "mov" for 0x4112e0>, <DisassemblerInsn "mov" for 0x4112e7>, <DisassemblerInsn "mov" for 0x4112e9>, <DisassemblerInsn "cmp" for 0x4112f0>, <DisassemblerInsn "mov" for 0x4112f3>, <DisassemblerInsn "mov" for 0x4112fa>, <DisassemblerInsn "jbe" for 0x411301>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4110ac>, <DisassemblerInsn "mov" for 0x4110b4>, <DisassemblerInsn "and" for 0x4110bc>, <DisassemblerInsn "mov" for 0x4110c0>, <DisassemblerInsn "mov" for 0x4110c8>, <DisassemblerInsn "xor" for 0x4110cd>, <DisassemblerInsn "mov" for 0x4110cf>, <DisassemblerInsn "mov" for 0x4110d7>, <DisassemblerInsn "mov" for 0x4110df>, <DisassemblerInsn "mov" for 0x4110e7>, <DisassemblerInsn "mov" for 0x4110ef>, <DisassemblerInsn "mov" for 0x4110f7>, <DisassemblerInsn "mov" for 0x4110ff>, <DisassemblerInsn "mov" for 0x411107>, <DisassemblerInsn "mov" for 0x41110f>, <DisassemblerInsn "movzx" for 0x411117>, <DisassemblerInsn "add" for 0x411120>, <DisassemblerInsn "mov" for 0x411124>, <DisassemblerInsn "mov" for 0x41112c>, <DisassemblerInsn "movzx" for 0x411134>, <DisassemblerInsn "add" for 0x41113d>, <DisassemblerInsn "mov" for 0x411141>, <DisassemblerInsn "mov" for 0x411149>, <DisassemblerInsn "movzx" for 0x411151>, <DisassemblerInsn "add" for 0x41115a>, <DisassemblerInsn "mov" for 0x41115e>, <DisassemblerInsn "mov" for 0x411166>, <DisassemblerInsn "movzx" for 0x41116e>, <DisassemblerInsn "add" for 0x411176>, <DisassemblerInsn "mov" for 0x411179>, <DisassemblerInsn "mov" for 0x411181>, <DisassemblerInsn "add" for 0x411189>, <DisassemblerInsn "mov" for 0x41118d>, <DisassemblerInsn "add" for 0x411195>, <DisassemblerInsn "mov" for 0x411199>, <DisassemblerInsn "cmp" for 0x4111a1>, <DisassemblerInsn "mov" for 0x4111a4>, <DisassemblerInsn "mov" for 0x4111a7>, <DisassemblerInsn "mov" for 0x4111af>, <DisassemblerInsn "mov" for 0x4111b2>, <DisassemblerInsn "mov" for 0x4111ba>, <DisassemblerInsn "mov" for 0x4111c2>, <DisassemblerInsn "mov" for 0x4111ca>, <DisassemblerInsn "jne" for 0x4111d2>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4114cc>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4114aa>, <DisassemblerInsn "mov" for 0x4114ae>, <DisassemblerInsn "mov" for 0x4114b3>, <DisassemblerInsn "sub" for 0x4114b8>, <DisassemblerInsn "sete" for 0x4114bb>, <DisassemblerInsn "or" for 0x4114be>, <DisassemblerInsn "xor" for 0x4114c0>, <DisassemblerInsn "test" for 0x4114c2>, <DisassemblerInsn "mov" for 0x4114c5>, <DisassemblerInsn "jne" for 0x4114ca>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x41159d>, <DisassemblerInsn "mov" for 0x4115a1>, <DisassemblerInsn "mov" for 0x4115a6>, <DisassemblerInsn "mov" for 0x4115ab>, <DisassemblerInsn "add" for 0x4115ae>, <DisassemblerInsn "mov" for 0x4115b2>, <DisassemblerInsn "mov" for 0x4115b6>, <DisassemblerInsn "mov" for 0x4115bb>, <DisassemblerInsn "mov" for 0x4115bf>, <DisassemblerInsn "mov" for 0x4115c4>, <DisassemblerInsn "mov" for 0x4115cc>, <DisassemblerInsn "mov" for 0x4115d1>, <DisassemblerInsn "mov" for 0x4115d6>, <DisassemblerInsn "mov" for 0x4115da>, <DisassemblerInsn "add" for 0x4115df>, <DisassemblerInsn "mov" for 0x4115e3>, <DisassemblerInsn "add" for 0x4115e6>, <DisassemblerInsn "shl" for 0x4115ed>, <DisassemblerInsn "add" for 0x4115f0>, <DisassemblerInsn "cmp" for 0x4115f3>, <DisassemblerInsn "mov" for 0x4115f6>, <DisassemblerInsn "mov" for 0x4115fb>, <DisassemblerInsn "mov" for 0x411600>, <DisassemblerInsn "mov" for 0x411605>, <DisassemblerInsn "jb" for 0x411609>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4114e6>, <DisassemblerInsn "mov" for 0x4114eb>, <DisassemblerInsn "mov" for 0x4114f0>, <DisassemblerInsn "mov" for 0x4114f5>, <DisassemblerInsn "xor" for 0x4114fd>, <DisassemblerInsn "cmp" for 0x4114ff>, <DisassemblerInsn "mov" for 0x411502>, <DisassemblerInsn "je" for 0x411507>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x41156f>, <DisassemblerInsn "mov" for 0x411574>, <DisassemblerInsn "mov" for 0x411579>, <DisassemblerInsn "mov" for 0x411581>, <DisassemblerInsn "mov" for 0x411585>, <DisassemblerInsn "add" for 0x411588>, <DisassemblerInsn "mov" for 0x41158b>, <DisassemblerInsn "mov" for 0x41158d>, <DisassemblerInsn "mov" for 0x411592>, <DisassemblerInsn "mov" for 0x411596>, <DisassemblerInsn "jmp" for 0x41159b>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411288>, <DisassemblerInsn "mov" for 0x411290>, <DisassemblerInsn "mov" for 0x411298>, <DisassemblerInsn "mov" for 0x4112a0>, <DisassemblerInsn "add" for 0x4112a3>, <DisassemblerInsn "mov" for 0x4112aa>, <DisassemblerInsn "add" for 0x4112ad>, <DisassemblerInsn "mov" for 0x4112b4>, <DisassemblerInsn "mov" for 0x4112bc>, <DisassemblerInsn "mov" for 0x4112c2>, <DisassemblerInsn "add" for 0x4112c9>, <DisassemblerInsn "mov" for 0x4112cc>, <DisassemblerInsn "mov" for 0x4112ce>, <DisassemblerInsn "shl" for 0x4112d0>, <DisassemblerInsn "call" for 0x4112d3>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411303>, <DisassemblerInsn "mov" for 0x41130a>, <DisassemblerInsn "mov" for 0x411312>, <DisassemblerInsn "mov" for 0x411319>, <DisassemblerInsn "add" for 0x41131b>, <DisassemblerInsn "shl" for 0x411322>, <DisassemblerInsn "add" for 0x411325>, <DisassemblerInsn "add" for 0x411328>, <DisassemblerInsn "lea" for 0x41132c>, <DisassemblerInsn "add" for 0x411334>, <DisassemblerInsn "add" for 0x411338>, <DisassemblerInsn "mov" for 0x41133b>, <DisassemblerInsn "mov" for 0x41133d>, <DisassemblerInsn "shl" for 0x41133f>, <DisassemblerInsn "call" for 0x411342>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "movss" for 0x411430>, <DisassemblerInsn "mov" for 0x411439>, <DisassemblerInsn "mov" for 0x41143e>, <DisassemblerInsn "mov" for 0x411443>, <DisassemblerInsn "mov" for 0x411448>, <DisassemblerInsn "mov" for 0x41144c>, <DisassemblerInsn "mov" for 0x411450>, <DisassemblerInsn "mov" for 0x411455>, <DisassemblerInsn "mov" for 0x41145a>, <DisassemblerInsn "movzx" for 0x41145f>, <DisassemblerInsn "mov" for 0x411462>, <DisassemblerInsn "mov" for 0x411465>, <DisassemblerInsn "cvtsi2ss" for 0x41146a>, <DisassemblerInsn "movzx" for 0x41146e>, <DisassemblerInsn "cvtsi2ss" for 0x411471>, <DisassemblerInsn "mulss" for 0x411475>, <DisassemblerInsn "ucomiss" for 0x411479>, <DisassemblerInsn "jb" for 0x41147c>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x411509>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x411369>, <DisassemblerInsn "mov" for 0x411371>, <DisassemblerInsn "mov" for 0x411378>, <DisassemblerInsn "add" for 0x41137f>, <DisassemblerInsn "mov" for 0x411381>, <DisassemblerInsn "mov" for 0x411383>, <DisassemblerInsn "mov" for 0x411385>, <DisassemblerInsn "lea" for 0x41138a>, <DisassemblerInsn "call" for 0x411391>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "add" for 0x411646>, <DisassemblerInsn "ret" for 0x41164d>]'}], 'cfg_block_detailed_info': [{'block_Idx': 24, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~dx, word ptr [rsp + 0x52]>', '<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~ecx, dword ptr [rsp + 0x3c]>', '<add~~ecx, -1>', '<mov~~dword ptr [rsi], ecx>', '<mov~~word ptr [rsp + 0x2a], dx>', '<mov~~dword ptr [rsp + 0x2c], ecx>', '<mov~~qword ptr [rsp + 0x30], rax>', '<jmp~~0x4115c4>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x128]>', '<mov~~dx, word ptr [rsp + 0x136]>', '<mov~~rcx, qword ptr [rsp + 0x138]>', '<xor~~eax, eax>', '<cmp~~rsi, 0>', '<mov~~word ptr [rsp + 0xce], dx>', '<mov~~qword ptr [rsp + 0xd0], rcx>', '<mov~~qword ptr [rsp + 0xd8], rax>', '<je~~0x411288>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~rcx, qword ptr [rsp + 0xd0]>', '<mov~~dx, word ptr [rsp + 0xce]>', '<mov~~rsi, qword ptr [rsp + 0x128]>', '<mov~~rdi, qword ptr [rsp + 0x170]>', '<movzx~~edi, byte ptr [rdi + rcx + 0x2ae4f]>', '<add~~dx, di>', '<mov~~word ptr [rsp + 0xb6], dx>', '<mov~~word ptr [rsp + rcx*2 + 0x17e], dx>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0xc0], rax>', '<cmp~~rax, rsi>', '<mov~~word ptr [rsp + 0xce], dx>', '<mov~~qword ptr [rsp + 0xd0], rcx>', '<mov~~qword ptr [rsp + 0xd8], rax>', '<jne~~0x411210>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<add~~rax, 1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x20], rax>', '<je~~0x41150b>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x98]>', '<mov~~rdx, qword ptr [rsp + 0x160]>', '<mov~~rcx, qword ptr [rsp + 0x170]>', '<mov~~eax, dword ptr [rax]>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0x80], edx>', '<add~~eax, -1>', '<add~~eax, edx>', '<mov~~dword ptr [rsp + 0x84], eax>', '<mov~~rdx, rcx>', '<add~~rdx, 0x2ad0c>', '<mov~~qword ptr [rsp + 0x88], rdx>', '<mov~~dword ptr [rcx + 0x2ad0c], eax>', '<cmp~~eax, 0>', '<je~~0x41160f>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x3c]>', '<mov~~dx, word ptr [rsp + 0x54]>', '<mov~~rsi, qword ptr [rsp + 0x48]>', '<mov~~rax, rsi>', '<add~~rax, 2>', '<mov~~word ptr [rsi + 2], dx>', '<mov~~word ptr [rsp + 0x2a], dx>', '<mov~~dword ptr [rsp + 0x2c], ecx>', '<mov~~qword ptr [rsp + 0x30], rax>', '<jmp~~0x4115c4>']}, {'block_Idx': 17, 'blockInsts': ['<jmp~~0x411646>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~cx, word ptr [rsp + 0x52]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~ax, word ptr [rsp + rax*2 + 0x17e]>', '<cmp~~ax, cx>', '<je~~0x41159d>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x170]>', '<mov~~rcx, qword ptr [rsp + 0x40]>', '<mov~~si, word ptr [rsp + 0x2a]>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<add~~rcx, 2>', '<mov~~r8d, eax>', '<add~~rdi, 0x2ae12>', '<shl~~r8, 1>', '<add~~rdi, r8>', '<cmp~~rdx, rdi>', '<mov~~word ptr [rsp + 0x66], si>', '<mov~~qword ptr [rsp + 0x68], rdx>', '<mov~~qword ptr [rsp + 0x70], rcx>', '<mov~~dword ptr [rsp + 0x7c], eax>', '<jb~~0x411430>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x160]>', '<mov~~rcx, qword ptr [rsp + 0x98]>', '<mov~~eax, dword ptr [rax]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0xac], ecx>', '<mov~~dword ptr [rsp + 0xb0], eax>', '<mov~~rdi, qword ptr [rsp + 0x90]>', '<mov~~eax, dword ptr [rsp + 0xac]>', '<mov~~ecx, dword ptr [rsp + 0xb0]>', '<add~~eax, ecx>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<mov~~edx, 2>', '<lea~~rcx, [rip + 0x2bf]>', '<call~~0x500048>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x170]>', '<mov~~cx, word ptr [rax + 0x2ad72]>', '<mov~~word ptr [rax + 0x2ae12], cx>', '<mov~~ecx, dword ptr [rax + 0x2ad00]>', '<mov~~cx, word ptr [rax + rcx*2 + 0x2ad72]>', '<mov~~word ptr [rax + 0x2ae14], cx>', '<mov~~dword ptr [rax + 0x2ad0c], 1>', '<add~~rsp, 0x188>', '<ret~~>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x118]>', '<mov~~rax, qword ptr [rsp + 0x110]>', '<mov~~cx, word ptr [rsp + 0x10e]>', '<mov~~rsi, qword ptr [rsp + 0x100]>', '<mov~~rdi, qword ptr [rsp + 0x170]>', '<mov~~qword ptr [rsp + 0xe0], rax>', '<movzx~~r8d, byte ptr [rdi + rax + 0x2ae4f]>', '<add~~cx, r8w>', '<mov~~word ptr [rsp + 0xe8], cx>', '<mov~~word ptr [rsp + rax*2 + 0x17e], cx>', '<movzx~~r8d, byte ptr [rdi + rax + 0x2ae50]>', '<add~~cx, r8w>', '<mov~~word ptr [rsp + 0xea], cx>', '<mov~~word ptr [rsp + rax*2 + 0x180], cx>', '<movzx~~r8d, byte ptr [rdi + rax + 0x2ae51]>', '<add~~cx, r8w>', '<mov~~word ptr [rsp + 0xec], cx>', '<mov~~word ptr [rsp + rax*2 + 0x182], cx>', '<movzx~~edi, byte ptr [rdi + rax + 0x2ae52]>', '<add~~cx, di>', '<mov~~word ptr [rsp + 0xee], cx>', '<mov~~word ptr [rsp + rax*2 + 0x184], cx>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0xf0], rax>', '<add~~rdx, 4>', '<mov~~qword ptr [rsp + 0xf8], rdx>', '<cmp~~rdx, rsi>', '<mov~~si, cx>', '<mov~~word ptr [rsp + 0x10e], si>', '<mov~~rsi, rax>', '<mov~~qword ptr [rsp + 0x110], rsi>', '<mov~~qword ptr [rsp + 0x118], rdx>', '<mov~~word ptr [rsp + 0x136], cx>', '<mov~~qword ptr [rsp + 0x138], rax>', '<jne~~0x4110e7>']}, {'block_Idx': 31, 'blockInsts': ['<jmp~~0x411539>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x58]>', '<mov~~rax, qword ptr [rsp + 8]>', '<add~~rax, 1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x10], rax>', '<je~~0x41156f>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x84]>', '<mov~~rcx, qword ptr [rsp + 0x150]>', '<mov~~rdx, qword ptr [rsp + 0x148]>', '<mov~~esi, dword ptr [rsp + 0x80]>', '<cmp~~esi, 0>', '<setl~~dil>', '<mov~~byte ptr [rsp + 0x57], dil>', '<add~~esi, 1>', '<mov~~esi, esi>', '<mov~~qword ptr [rsp + 0x58], rsi>', '<mov~~si, word ptr [rdx]>', '<mov~~word ptr [rsp + 0x66], si>', '<mov~~qword ptr [rsp + 0x68], rdx>', '<mov~~qword ptr [rsp + 0x70], rcx>', '<mov~~dword ptr [rsp + 0x7c], eax>', '<movss~~xmm1, dword ptr [rsp + 0x144]>', '<mov~~ax, word ptr [rsp + 0x66]>', '<mov~~rdx, qword ptr [rsp + 0x68]>', '<mov~~rcx, qword ptr [rsp + 0x70]>', '<mov~~esi, dword ptr [rsp + 0x7c]>', '<mov~~dword ptr [rsp + 0x3c], esi>', '<mov~~qword ptr [rsp + 0x40], rcx>', '<mov~~qword ptr [rsp + 0x48], rdx>', '<mov~~word ptr [rsp + 0x52], ax>', '<movzx~~ecx, word ptr [rcx]>', '<mov~~dx, cx>', '<mov~~word ptr [rsp + 0x54], dx>', '<cvtsi2ss~~xmm0, ecx>', '<movzx~~eax, ax>', '<cvtsi2ss~~xmm2, eax>', '<mulss~~xmm1, xmm2>', '<ucomiss~~xmm0, xmm1>', '<jb~~0x4114aa>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x188>', '<mov~~qword ptr [rsp + 0x170], rdi>', '<mov~~eax, dword ptr [rdi + 0x18]>', '<mov~~dword ptr [rsp + 0x178], eax>', '<cmp~~eax, 0>', '<je~~0x411611>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~cx, word ptr [rsp + 0x15e]>', '<mov~~eax, dword ptr [rsp + 0x16c]>', '<add~~eax, 1>', '<mov~~eax, eax>', '<mov~~edx, eax>', '<mov~~rax, rdx>', '<add~~rax, -1>', '<mov~~qword ptr [rsp + 0x120], rax>', '<add~~rdx, -2>', '<and~~rax, 3>', '<mov~~qword ptr [rsp + 0x128], rax>', '<mov~~eax, 1>', '<cmp~~rdx, 3>', '<mov~~word ptr [rsp + 0x136], cx>', '<mov~~qword ptr [rsp + 0x138], rax>', '<jb~~0x4111d8>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x170]>', '<mov~~ecx, dword ptr [rsp + 0x178]>', '<add~~ecx, -1>', '<mov~~ecx, ecx>', '<mov~~edx, ecx>', '<lea~~rcx, [rip + 0x42ed]>', '<movss~~xmm0, dword ptr [rcx + rdx*4]>', '<movss~~dword ptr [rsp + 0x144], xmm0>', '<lea~~rcx, [rsp + 0x17e]>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ae12>', '<mov~~qword ptr [rsp + 0x148], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ae12>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x150], rcx>', '<mov~~ecx, dword ptr [rax + 0x44]>', '<mov~~word ptr [rsp + 0x15e], cx>', '<mov~~word ptr [rsp + 0x17e], cx>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ae4c>', '<mov~~qword ptr [rsp + 0x160], rcx>', '<mov~~eax, dword ptr [rax + 0x2ae4c]>', '<mov~~dword ptr [rsp + 0x16c], eax>', '<cmp~~eax, 0>', '<je~~0x411288>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x160]>', '<mov~~ecx, dword ptr [rsp + 0xa4]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0xa8], eax>', '<cmp~~eax, 1>', '<mov~~dword ptr [rsp + 0xac], ecx>', '<mov~~dword ptr [rsp + 0xb0], eax>', '<jbe~~0x411369>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~dx, word ptr [rsp + 0x15e]>', '<mov~~rax, qword ptr [rsp + 0x120]>', '<and~~rax, 0xfffffffffffffffc>', '<mov~~qword ptr [rsp + 0x100], rax>', '<mov~~ecx, 1>', '<xor~~eax, eax>', '<mov~~word ptr [rsp + 0x10e], dx>', '<mov~~qword ptr [rsp + 0x110], rcx>', '<mov~~qword ptr [rsp + 0x118], rax>', '<mov~~rdx, qword ptr [rsp + 0x118]>', '<mov~~rax, qword ptr [rsp + 0x110]>', '<mov~~cx, word ptr [rsp + 0x10e]>', '<mov~~rsi, qword ptr [rsp + 0x100]>', '<mov~~rdi, qword ptr [rsp + 0x170]>', '<mov~~qword ptr [rsp + 0xe0], rax>', '<movzx~~r8d, byte ptr [rdi + rax + 0x2ae4f]>', '<add~~cx, r8w>', '<mov~~word ptr [rsp + 0xe8], cx>', '<mov~~word ptr [rsp + rax*2 + 0x17e], cx>', '<movzx~~r8d, byte ptr [rdi + rax + 0x2ae50]>', '<add~~cx, r8w>', '<mov~~word ptr [rsp + 0xea], cx>', '<mov~~word ptr [rsp + rax*2 + 0x180], cx>', '<movzx~~r8d, byte ptr [rdi + rax + 0x2ae51]>', '<add~~cx, r8w>', '<mov~~word ptr [rsp + 0xec], cx>', '<mov~~word ptr [rsp + rax*2 + 0x182], cx>', '<movzx~~edi, byte ptr [rdi + rax + 0x2ae52]>', '<add~~cx, di>', '<mov~~word ptr [rsp + 0xee], cx>', '<mov~~word ptr [rsp + rax*2 + 0x184], cx>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0xf0], rax>', '<add~~rdx, 4>', '<mov~~qword ptr [rsp + 0xf8], rdx>', '<cmp~~rdx, rsi>', '<mov~~si, cx>', '<mov~~word ptr [rsp + 0x10e], si>', '<mov~~rsi, rax>', '<mov~~qword ptr [rsp + 0x110], rsi>', '<mov~~qword ptr [rsp + 0x118], rdx>', '<mov~~word ptr [rsp + 0x136], cx>', '<mov~~qword ptr [rsp + 0x138], rax>', '<jne~~0x4110e7>']}, {'block_Idx': 23, 'blockInsts': ['<jmp~~0x4114e6>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x57]>', '<mov~~dx, word ptr [rsp + 0x52]>', '<mov~~cx, word ptr [rsp + 0x54]>', '<sub~~cx, dx>', '<sete~~cl>', '<or~~cl, al>', '<xor~~eax, eax>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x20], rax>', '<jne~~0x41150b>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x3c]>', '<mov~~dx, word ptr [rsp + 0x54]>', '<mov~~rsi, qword ptr [rsp + 0x48]>', '<mov~~rax, rsi>', '<add~~rax, 2>', '<mov~~word ptr [rsi + 2], dx>', '<mov~~word ptr [rsp + 0x2a], dx>', '<mov~~dword ptr [rsp + 0x2c], ecx>', '<mov~~qword ptr [rsp + 0x30], rax>', '<mov~~rdi, qword ptr [rsp + 0x170]>', '<mov~~rcx, qword ptr [rsp + 0x40]>', '<mov~~si, word ptr [rsp + 0x2a]>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<mov~~rdx, qword ptr [rsp + 0x30]>', '<add~~rcx, 2>', '<mov~~r8d, eax>', '<add~~rdi, 0x2ae12>', '<shl~~r8, 1>', '<add~~rdi, r8>', '<cmp~~rdx, rdi>', '<mov~~word ptr [rsp + 0x66], si>', '<mov~~qword ptr [rsp + 0x68], rdx>', '<mov~~qword ptr [rsp + 0x70], rcx>', '<mov~~dword ptr [rsp + 0x7c], eax>', '<jb~~0x411430>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~dx, word ptr [rsp + 0x54]>', '<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~qword ptr [rsp + 0x18], rax>', '<mov~~cx, word ptr [rsp + rax*2 + 0x17e]>', '<xor~~eax, eax>', '<cmp~~cx, dx>', '<mov~~qword ptr [rsp + 0x10], rax>', '<je~~0x411551>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~dx, word ptr [rsp + 0x54]>', '<mov~~rsi, qword ptr [rsp + 0x88]>', '<mov~~ecx, dword ptr [rsp + 0x3c]>', '<mov~~word ptr [rax], dx>', '<add~~ecx, -1>', '<mov~~dword ptr [rsi], ecx>', '<mov~~word ptr [rsp + 0x2a], dx>', '<mov~~dword ptr [rsp + 0x2c], ecx>', '<mov~~qword ptr [rsp + 0x30], rax>', '<jmp~~0x4115c4>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x170]>', '<mov~~rdi, qword ptr [rsp + 0x148]>', '<mov~~qword ptr [rsp + 0x90], rdi>', '<mov~~rsi, rax>', '<add~~rsi, 0x2ad72>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ad00>', '<mov~~qword ptr [rsp + 0x98], rcx>', '<mov~~eax, dword ptr [rax + 0x2ad00]>', '<mov~~dword ptr [rsp + 0xa4], eax>', '<add~~eax, 1>', '<mov~~eax, eax>', '<mov~~edx, eax>', '<shl~~rdx, 1>', '<call~~0x500058>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xa8]>', '<mov~~rdi, qword ptr [rsp + 0x170]>', '<mov~~ecx, dword ptr [rsp + 0xa4]>', '<mov~~ecx, ecx>', '<add~~rdi, 0x2ae12>', '<shl~~rcx, 1>', '<add~~rdi, rcx>', '<add~~rdi, 2>', '<lea~~rsi, [rsp + 0x17e]>', '<add~~rsi, 2>', '<add~~eax, -1>', '<mov~~eax, eax>', '<mov~~edx, eax>', '<shl~~rdx, 1>', '<call~~0x500058>']}, {'block_Idx': 27, 'blockInsts': ['<movss~~xmm1, dword ptr [rsp + 0x144]>', '<mov~~ax, word ptr [rsp + 0x66]>', '<mov~~rdx, qword ptr [rsp + 0x68]>', '<mov~~rcx, qword ptr [rsp + 0x70]>', '<mov~~esi, dword ptr [rsp + 0x7c]>', '<mov~~dword ptr [rsp + 0x3c], esi>', '<mov~~qword ptr [rsp + 0x40], rcx>', '<mov~~qword ptr [rsp + 0x48], rdx>', '<mov~~word ptr [rsp + 0x52], ax>', '<movzx~~ecx, word ptr [rcx]>', '<mov~~dx, cx>', '<mov~~word ptr [rsp + 0x54], dx>', '<cvtsi2ss~~xmm0, ecx>', '<movzx~~eax, ax>', '<cvtsi2ss~~xmm2, eax>', '<mulss~~xmm1, xmm2>', '<ucomiss~~xmm0, xmm1>', '<jb~~0x4114aa>']}, {'block_Idx': 29, 'blockInsts': ['<jmp~~0x4114ce>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x90]>', '<mov~~eax, dword ptr [rsp + 0xac]>', '<mov~~ecx, dword ptr [rsp + 0xb0]>', '<add~~eax, ecx>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<mov~~edx, 2>', '<lea~~rcx, [rip + 0x2bf]>', '<call~~0x500048>']}, {'block_Idx': 20, 'blockInsts': ['<add~~rsp, 0x188>', '<ret~~>']}], 'cfg_edge_info': [(12, 16), (4, 6), (34, 25), (29, 32), (0, 2), (10, 6), (8, 12), (28, 30), (27, 22), (30, 27), (32, 24), (7, 10), (15, 17), (18, 22), (26, 29), (21, 24), (22, 25), (6, 9), (8, 11), (0, 1), (2, 4), (27, 21), (17, 20), (30, 17), (33, 28), (24, 25), (32, 26), (16, 15), (7, 6), (25, 27), (33, 34), (18, 21), (26, 28), (4, 7), (21, 23), (3, 8), (9, 3), (9, 9), (31, 33), (23, 26), (2, 3), (10, 10), (11, 15), (28, 31), (25, 17), (6, 3), (15, 18)], 'cdg_edge_info': [(0, 2), (8, 12), (0, 8), (27, 22), (28, 30), (0, 17), (28, 33), (0, 20), (30, 27), (32, 24), (7, 10), (26, 32), (18, 22), (21, 24), (8, 11), (0, 1), (2, 4), (27, 21), (33, 28), (32, 26), (15, 18), (33, 34), (18, 21), (26, 28), (4, 7), (21, 26), (9, 9), (0, 3), (8, 16), (10, 10), (2, 6), (0, 15), (6, 9)], 'ddg_edge_info': [(24, 30), (0, 30), (16, 20), (2, 27), (15, 24), (16, 26), (4, 9), (12, 16), (4, 6), (16, 32), (3, 16), (18, 32), (0, 2), (10, 6), (8, 12), (10, 9), (8, 15), (27, 22), (27, 28), (2, 8), (28, 33), (30, 27), (27, 34), (2, 26), (7, 10), (16, 22), (16, 28), (26, 32), (16, 34), (3, 12), (3, 15), (34, 30), (0, 1), (0, 7), (2, 4), (27, 21), (0, 4), (0, 10), (2, 7), (27, 24), (27, 30), (2, 16), (1, 20), (15, 18), (32, 26), (33, 28), (16, 15), (2, 28), (16, 21), (16, 18), (16, 24), (16, 30), (18, 21), (26, 28), (16, 27), (4, 7), (16, 33), (18, 27), (21, 26), (15, 34), (3, 8), (18, 33), (22, 30), (0, 3), (0, 9), (8, 16), (0, 6), (0, 12), (2, 3), (27, 26), (0, 15), (2, 18), (2, 15), (6, 9)]}]}
{'sbr_make_f_tablelim': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 8, 'instruction': 'addl\t$-1, %ecx'}, {'instIndex': 9, 'instruction': 'movl\t%ecx, %ecx'}, {'instIndex': 10, 'instruction': 'movl\t%ecx, %edx'}, {'instIndex': 11, 'instruction': 'leaq\tsbr_make_f_tablelim.bands_warped(%rip), %rcx'}, {'instIndex': 12, 'instruction': 'movss\t(%rcx,%rdx,4), %xmm0            # xmm0 = mem[0],zero,zero,zero'}, {'instIndex': 13, 'instruction': 'movss\t%xmm0, 0x144(%rsp)                # 4-byte Spill'}, {'instIndex': 14, 'instruction': 'leaq\t0x17e(%rsp), %rcx'}, {'instIndex': 15, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 16, 'instruction': 'addq\t$0x2ae12, %rcx                   # imm = 0x2AE12'}, {'instIndex': 17, 'instruction': 'movq\t%rcx, 0x148(%rsp)                 # 8-byte Spill'}, {'instIndex': 18, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 19, 'instruction': 'addq\t$0x2ae12, %rcx                   # imm = 0x2AE12'}, {'instIndex': 20, 'instruction': 'addq\t$2, %rcx'}, {'instIndex': 21, 'instruction': 'movq\t%rcx, 0x150(%rsp)                 # 8-byte Spill'}, {'instIndex': 22, 'instruction': 'movl\t0x44(%rax), %ecx'}, {'instIndex': 24, 'instruction': 'movw\t%cx, 0x17e(%rsp)'}]}]}
The case of compiler clang with optimization O3.
Patched source code file: aacsbr.c
Patched function: 1---static void sbr_make_f_tablelim 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_before/O3/aacsbr.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_before/O3/aacsbr.s---sbr_make_f_tablelim---before
function id: 6
function flag: True
There are 383 instructions for function: sbr_make_f_tablelim in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '174', 'end': 180}, 'before': {'start': '174', 'end': 180}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 8, 'instruction': 'addl\t$-1, %ecx'}, {'instIndex': 9, 'instruction': 'movl\t%ecx, %ecx'}, {'instIndex': 10, 'instruction': 'movl\t%ecx, %edx'}, {'instIndex': 11, 'instruction': 'leaq\tsbr_make_f_tablelim.bands_warped(%rip), %rcx'}, {'instIndex': 12, 'instruction': 'movss\t(%rcx,%rdx,4), %xmm0            # xmm0 = mem[0],zero,zero,zero'}, {'instIndex': 13, 'instruction': 'movss\t%xmm0, 0x184(%rsp)                # 4-byte Spill'}, {'instIndex': 14, 'instruction': 'leaq\t0x1be(%rsp), %rcx'}, {'instIndex': 15, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 16, 'instruction': 'addq\t$0x2ae12, %rcx                   # imm = 0x2AE12'}, {'instIndex': 17, 'instruction': 'movq\t%rcx, 0x188(%rsp)                 # 8-byte Spill'}, {'instIndex': 18, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 19, 'instruction': 'addq\t$0x2ae12, %rcx                   # imm = 0x2AE12'}, {'instIndex': 20, 'instruction': 'addq\t$2, %rcx'}, {'instIndex': 21, 'instruction': 'movq\t%rcx, 0x190(%rsp)                 # 8-byte Spill'}, {'instIndex': 22, 'instruction': 'movl\t0x44(%rax), %ecx'}, {'instIndex': 24, 'instruction': 'movw\t%cx, 0x1be(%rsp)'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_before/O3/aacsbr.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_before/O3/aacsbr.o---before
The extraction of function: sbr_make_f_tablelim
Analyzing the binaries to generate subCFGs from patched function ...
It has 1137 nodes and 2053 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 383 instructions in binary file.
[4270226]
The execution time of patched subCFG information extraction via angr: 0:00:01.597096
{'sbr_make_f_tablelim': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412892>, <DisassemblerInsn "mov" for 0x41289a>, <DisassemblerInsn "add" for 0x4128a1>, <DisassemblerInsn "mov" for 0x4128a4>, <DisassemblerInsn "mov" for 0x4128a6>, <DisassemblerInsn "lea" for 0x4128a8>, <DisassemblerInsn "movss" for 0x4128af>, <DisassemblerInsn "movss" for 0x4128b4>, <DisassemblerInsn "lea" for 0x4128bd>, <DisassemblerInsn "mov" for 0x4128c5>, <DisassemblerInsn "add" for 0x4128c8>, <DisassemblerInsn "mov" for 0x4128cf>, <DisassemblerInsn "mov" for 0x4128d7>, <DisassemblerInsn "add" for 0x4128da>, <DisassemblerInsn "add" for 0x4128e1>, <DisassemblerInsn "mov" for 0x4128e5>, <DisassemblerInsn "mov" for 0x4128ed>, <DisassemblerInsn "mov" for 0x4128f0>, <DisassemblerInsn "mov" for 0x4128f8>, <DisassemblerInsn "mov" for 0x412900>, <DisassemblerInsn "add" for 0x412903>, <DisassemblerInsn "mov" for 0x41290a>, <DisassemblerInsn "mov" for 0x412912>, <DisassemblerInsn "mov" for 0x412918>, <DisassemblerInsn "cmp" for 0x41291f>, <DisassemblerInsn "je" for 0x412922>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412b58>, <DisassemblerInsn "mov" for 0x412b60>, <DisassemblerInsn "mov" for 0x412b68>, <DisassemblerInsn "mov" for 0x412b70>, <DisassemblerInsn "add" for 0x412b73>, <DisassemblerInsn "mov" for 0x412b7a>, <DisassemblerInsn "add" for 0x412b7d>, <DisassemblerInsn "mov" for 0x412b84>, <DisassemblerInsn "mov" for 0x412b8c>, <DisassemblerInsn "mov" for 0x412b92>, <DisassemblerInsn "add" for 0x412b99>, <DisassemblerInsn "mov" for 0x412b9c>, <DisassemblerInsn "mov" for 0x412b9e>, <DisassemblerInsn "shl" for 0x412ba0>, <DisassemblerInsn "call" for 0x412ba3>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x412870>, <DisassemblerInsn "mov" for 0x412877>, <DisassemblerInsn "mov" for 0x41287f>, <DisassemblerInsn "mov" for 0x412882>, <DisassemblerInsn "cmp" for 0x412889>, <DisassemblerInsn "je" for 0x41288c>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412928>, <DisassemblerInsn "mov" for 0x412930>, <DisassemblerInsn "add" for 0x412937>, <DisassemblerInsn "mov" for 0x41293a>, <DisassemblerInsn "mov" for 0x41293c>, <DisassemblerInsn "mov" for 0x41293e>, <DisassemblerInsn "add" for 0x412941>, <DisassemblerInsn "mov" for 0x412945>, <DisassemblerInsn "add" for 0x41294d>, <DisassemblerInsn "and" for 0x412951>, <DisassemblerInsn "mov" for 0x412955>, <DisassemblerInsn "mov" for 0x41295d>, <DisassemblerInsn "cmp" for 0x412962>, <DisassemblerInsn "mov" for 0x412966>, <DisassemblerInsn "mov" for 0x41296e>, <DisassemblerInsn "jb" for 0x412976>]'}], 'cfg_block_detailed_info': [{'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~ecx, dword ptr [rsp + 0x1b8]>', '<add~~ecx, -1>', '<mov~~ecx, ecx>', '<mov~~edx, ecx>', '<lea~~rcx, [rip + 0x443d]>', '<movss~~xmm0, dword ptr [rcx + rdx*4]>', '<movss~~dword ptr [rsp + 0x184], xmm0>', '<lea~~rcx, [rsp + 0x1be]>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ae12>', '<mov~~qword ptr [rsp + 0x188], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ae12>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x190], rcx>', '<mov~~ecx, dword ptr [rax + 0x44]>', '<mov~~word ptr [rsp + 0x19e], cx>', '<mov~~word ptr [rsp + 0x1be], cx>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ae4c>', '<mov~~qword ptr [rsp + 0x1a0], rcx>', '<mov~~eax, dword ptr [rax + 0x2ae4c]>', '<mov~~dword ptr [rsp + 0x1ac], eax>', '<cmp~~eax, 0>', '<je~~0x412b58>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rdi, qword ptr [rsp + 0x188]>', '<mov~~qword ptr [rsp + 0xd0], rdi>', '<mov~~rsi, rax>', '<add~~rsi, 0x2ad72>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ad00>', '<mov~~qword ptr [rsp + 0xd8], rcx>', '<mov~~eax, dword ptr [rax + 0x2ad00]>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<add~~eax, 1>', '<mov~~eax, eax>', '<mov~~edx, eax>', '<shl~~rdx, 1>', '<call~~0x500058>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x1c8>', '<mov~~qword ptr [rsp + 0x1b0], rdi>', '<mov~~eax, dword ptr [rdi + 0x18]>', '<mov~~dword ptr [rsp + 0x1b8], eax>', '<cmp~~eax, 0>', '<je~~0x413031>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~cx, word ptr [rsp + 0x19e]>', '<mov~~eax, dword ptr [rsp + 0x1ac]>', '<add~~eax, 1>', '<mov~~eax, eax>', '<mov~~edx, eax>', '<mov~~rax, rdx>', '<add~~rax, -1>', '<mov~~qword ptr [rsp + 0x160], rax>', '<add~~rdx, -2>', '<and~~rax, 3>', '<mov~~qword ptr [rsp + 0x168], rax>', '<mov~~eax, 1>', '<cmp~~rdx, 3>', '<mov~~word ptr [rsp + 0x176], cx>', '<mov~~qword ptr [rsp + 0x178], rax>', '<jb~~0x412aa8>']}], 'cfg_edge_info': [(2, 3), (0, 2), (2, 4)]}]}
{'sbr_make_f_tablelim': [4270226]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_before/O3/aacsbr.o---before
The extraction of function: sbr_make_f_tablelim
[4270226]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 40 nodes and 63 edges in CFGEmulated.
It has 40 nodes and 51 edges in CDG.
It has 1398 nodes and 1758 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4270226]
{4272003, 4270226, 4271506, 4271127, 4271770, 4271902, 4270376, 4270760, 4271016, 4272175, 4272177, 4272049, 4271286, 4270519, 4271416, 4271161, 4271547, 4271680, 4271814, 4271948, 4271059, 4270936, 4271838, 4270816, 4271588, 4271206, 4272230, 4271974, 4270192, 4271865, 4270460}
[30, 24, 32, 17, 4, 16, 2, 15, 10, 39, 18, 0, 20, 37, 7, 22, 21, 8, 29, 36, 26, 25, 35, 1, 12, 33, 28, 6, 9, 34, 27, 38, 31, 23, 11, 3]
The execution time of patched slicing information extraction via angr: 0:00:11.126984
{'sbr_make_f_tablelim': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x412edc>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412d92>, <DisassemblerInsn "mov" for 0x412d96>, <DisassemblerInsn "mov" for 0x412d9b>, <DisassemblerInsn "mov" for 0x412da0>, <DisassemblerInsn "add" for 0x412da3>, <DisassemblerInsn "mov" for 0x412da7>, <DisassemblerInsn "mov" for 0x412dab>, <DisassemblerInsn "mov" for 0x412db0>, <DisassemblerInsn "mov" for 0x412db4>, <DisassemblerInsn "jmp" for 0x412db9>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412ef9>, <DisassemblerInsn "mov" for 0x412efe>, <DisassemblerInsn "mov" for 0x412f03>, <DisassemblerInsn "mov" for 0x412f08>, <DisassemblerInsn "xor" for 0x412f10>, <DisassemblerInsn "cmp" for 0x412f12>, <DisassemblerInsn "mov" for 0x412f15>, <DisassemblerInsn "je" for 0x412f1a>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x41302f>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412928>, <DisassemblerInsn "mov" for 0x412930>, <DisassemblerInsn "add" for 0x412937>, <DisassemblerInsn "mov" for 0x41293a>, <DisassemblerInsn "mov" for 0x41293c>, <DisassemblerInsn "mov" for 0x41293e>, <DisassemblerInsn "add" for 0x412941>, <DisassemblerInsn "mov" for 0x412945>, <DisassemblerInsn "add" for 0x41294d>, <DisassemblerInsn "and" for 0x412951>, <DisassemblerInsn "mov" for 0x412955>, <DisassemblerInsn "mov" for 0x41295d>, <DisassemblerInsn "cmp" for 0x412962>, <DisassemblerInsn "mov" for 0x412966>, <DisassemblerInsn "mov" for 0x41296e>, <DisassemblerInsn "jb" for 0x412976>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412c17>, <DisassemblerInsn "mov" for 0x412c1f>, <DisassemblerInsn "mov" for 0x412c27>, <DisassemblerInsn "mov" for 0x412c29>, <DisassemblerInsn "mov" for 0x412c2b>, <DisassemblerInsn "mov" for 0x412c32>, <DisassemblerInsn "mov" for 0x412c39>, <DisassemblerInsn "mov" for 0x412c41>, <DisassemblerInsn "mov" for 0x412c48>, <DisassemblerInsn "add" for 0x412c4f>, <DisassemblerInsn "mov" for 0x412c51>, <DisassemblerInsn "mov" for 0x412c53>, <DisassemblerInsn "mov" for 0x412c55>, <DisassemblerInsn "lea" for 0x412c5a>, <DisassemblerInsn "call" for 0x412c61>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412892>, <DisassemblerInsn "mov" for 0x41289a>, <DisassemblerInsn "add" for 0x4128a1>, <DisassemblerInsn "mov" for 0x4128a4>, <DisassemblerInsn "mov" for 0x4128a6>, <DisassemblerInsn "lea" for 0x4128a8>, <DisassemblerInsn "movss" for 0x4128af>, <DisassemblerInsn "movss" for 0x4128b4>, <DisassemblerInsn "lea" for 0x4128bd>, <DisassemblerInsn "mov" for 0x4128c5>, <DisassemblerInsn "add" for 0x4128c8>, <DisassemblerInsn "mov" for 0x4128cf>, <DisassemblerInsn "mov" for 0x4128d7>, <DisassemblerInsn "add" for 0x4128da>, <DisassemblerInsn "add" for 0x4128e1>, <DisassemblerInsn "mov" for 0x4128e5>, <DisassemblerInsn "mov" for 0x4128ed>, <DisassemblerInsn "mov" for 0x4128f0>, <DisassemblerInsn "mov" for 0x4128f8>, <DisassemblerInsn "mov" for 0x412900>, <DisassemblerInsn "add" for 0x412903>, <DisassemblerInsn "mov" for 0x41290a>, <DisassemblerInsn "mov" for 0x412912>, <DisassemblerInsn "mov" for 0x412918>, <DisassemblerInsn "cmp" for 0x41291f>, <DisassemblerInsn "je" for 0x412922>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412c66>, <DisassemblerInsn "mov" for 0x412c6e>, <DisassemblerInsn "mov" for 0x412c76>, <DisassemblerInsn "mov" for 0x412c7e>, <DisassemblerInsn "mov" for 0x412c80>, <DisassemblerInsn "mov" for 0x412c82>, <DisassemblerInsn "add" for 0x412c89>, <DisassemblerInsn "add" for 0x412c8c>, <DisassemblerInsn "mov" for 0x412c8e>, <DisassemblerInsn "mov" for 0x412c95>, <DisassemblerInsn "add" for 0x412c98>, <DisassemblerInsn "mov" for 0x412c9f>, <DisassemblerInsn "mov" for 0x412ca7>, <DisassemblerInsn "cmp" for 0x412cad>, <DisassemblerInsn "je" for 0x412cb0>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4129b7>, <DisassemblerInsn "mov" for 0x4129bf>, <DisassemblerInsn "mov" for 0x4129c7>, <DisassemblerInsn "mov" for 0x4129cf>, <DisassemblerInsn "mov" for 0x4129d7>, <DisassemblerInsn "mov" for 0x4129df>, <DisassemblerInsn "movzx" for 0x4129e7>, <DisassemblerInsn "add" for 0x4129f0>, <DisassemblerInsn "mov" for 0x4129f4>, <DisassemblerInsn "mov" for 0x4129fc>, <DisassemblerInsn "movzx" for 0x412a04>, <DisassemblerInsn "add" for 0x412a0d>, <DisassemblerInsn "mov" for 0x412a11>, <DisassemblerInsn "mov" for 0x412a19>, <DisassemblerInsn "movzx" for 0x412a21>, <DisassemblerInsn "add" for 0x412a2a>, <DisassemblerInsn "mov" for 0x412a2e>, <DisassemblerInsn "mov" for 0x412a36>, <DisassemblerInsn "movzx" for 0x412a3e>, <DisassemblerInsn "add" for 0x412a46>, <DisassemblerInsn "mov" for 0x412a49>, <DisassemblerInsn "mov" for 0x412a51>, <DisassemblerInsn "add" for 0x412a59>, <DisassemblerInsn "mov" for 0x412a5d>, <DisassemblerInsn "add" for 0x412a65>, <DisassemblerInsn "mov" for 0x412a69>, <DisassemblerInsn "cmp" for 0x412a71>, <DisassemblerInsn "mov" for 0x412a74>, <DisassemblerInsn "mov" for 0x412a77>, <DisassemblerInsn "mov" for 0x412a7f>, <DisassemblerInsn "mov" for 0x412a82>, <DisassemblerInsn "mov" for 0x412a8a>, <DisassemblerInsn "mov" for 0x412a92>, <DisassemblerInsn "mov" for 0x412a9a>, <DisassemblerInsn "jne" for 0x412aa2>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412f83>, <DisassemblerInsn "mov" for 0x412f88>, <DisassemblerInsn "mov" for 0x412f8d>, <DisassemblerInsn "mov" for 0x412f95>, <DisassemblerInsn "mov" for 0x412f99>, <DisassemblerInsn "add" for 0x412f9c>, <DisassemblerInsn "mov" for 0x412f9f>, <DisassemblerInsn "mov" for 0x412fa1>, <DisassemblerInsn "mov" for 0x412fa6>, <DisassemblerInsn "mov" for 0x412faa>, <DisassemblerInsn "jmp" for 0x412faf>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412cb6>, <DisassemblerInsn "mov" for 0x412cbd>, <DisassemblerInsn "mov" for 0x412cc5>, <DisassemblerInsn "mov" for 0x412ccd>, <DisassemblerInsn "mov" for 0x412cd4>, <DisassemblerInsn "add" for 0x412cd6>, <DisassemblerInsn "mov" for 0x412cd9>, <DisassemblerInsn "mov" for 0x412cdb>, <DisassemblerInsn "mov" for 0x412ce3>, <DisassemblerInsn "cmp" for 0x412ce6>, <DisassemblerInsn "mov" for 0x412ce9>, <DisassemblerInsn "mov" for 0x412cec>, <DisassemblerInsn "mov" for 0x412cf4>, <DisassemblerInsn "mov" for 0x412cf7>, <DisassemblerInsn "mov" for 0x412cff>, <DisassemblerInsn "mov" for 0x412d02>, <DisassemblerInsn "mov" for 0x412d0a>, <DisassemblerInsn "mov" for 0x412d0c>, <DisassemblerInsn "mov" for 0x412d13>, <DisassemblerInsn "mov" for 0x412d1b>, <DisassemblerInsn "mov" for 0x412d23>, <DisassemblerInsn "mov" for 0x412d2b>, <DisassemblerInsn "jge" for 0x412d32>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x412870>, <DisassemblerInsn "mov" for 0x412877>, <DisassemblerInsn "mov" for 0x41287f>, <DisassemblerInsn "mov" for 0x412882>, <DisassemblerInsn "cmp" for 0x412889>, <DisassemblerInsn "je" for 0x41288c>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "add" for 0x413066>, <DisassemblerInsn "ret" for 0x41306d>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412ede>, <DisassemblerInsn "mov" for 0x412ee6>, <DisassemblerInsn "add" for 0x412eeb>, <DisassemblerInsn "cmp" for 0x412eef>, <DisassemblerInsn "mov" for 0x412ef2>, <DisassemblerInsn "je" for 0x412ef7>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x41297c>, <DisassemblerInsn "mov" for 0x412984>, <DisassemblerInsn "and" for 0x41298c>, <DisassemblerInsn "mov" for 0x412990>, <DisassemblerInsn "mov" for 0x412998>, <DisassemblerInsn "xor" for 0x41299d>, <DisassemblerInsn "mov" for 0x41299f>, <DisassemblerInsn "mov" for 0x4129a7>, <DisassemblerInsn "mov" for 0x4129af>, <DisassemblerInsn "mov" for 0x4129b7>, <DisassemblerInsn "mov" for 0x4129bf>, <DisassemblerInsn "mov" for 0x4129c7>, <DisassemblerInsn "mov" for 0x4129cf>, <DisassemblerInsn "mov" for 0x4129d7>, <DisassemblerInsn "mov" for 0x4129df>, <DisassemblerInsn "movzx" for 0x4129e7>, <DisassemblerInsn "add" for 0x4129f0>, <DisassemblerInsn "mov" for 0x4129f4>, <DisassemblerInsn "mov" for 0x4129fc>, <DisassemblerInsn "movzx" for 0x412a04>, <DisassemblerInsn "add" for 0x412a0d>, <DisassemblerInsn "mov" for 0x412a11>, <DisassemblerInsn "mov" for 0x412a19>, <DisassemblerInsn "movzx" for 0x412a21>, <DisassemblerInsn "add" for 0x412a2a>, <DisassemblerInsn "mov" for 0x412a2e>, <DisassemblerInsn "mov" for 0x412a36>, <DisassemblerInsn "movzx" for 0x412a3e>, <DisassemblerInsn "add" for 0x412a46>, <DisassemblerInsn "mov" for 0x412a49>, <DisassemblerInsn "mov" for 0x412a51>, <DisassemblerInsn "add" for 0x412a59>, <DisassemblerInsn "mov" for 0x412a5d>, <DisassemblerInsn "add" for 0x412a65>, <DisassemblerInsn "mov" for 0x412a69>, <DisassemblerInsn "cmp" for 0x412a71>, <DisassemblerInsn "mov" for 0x412a74>, <DisassemblerInsn "mov" for 0x412a77>, <DisassemblerInsn "mov" for 0x412a7f>, <DisassemblerInsn "mov" for 0x412a82>, <DisassemblerInsn "mov" for 0x412a8a>, <DisassemblerInsn "mov" for 0x412a92>, <DisassemblerInsn "mov" for 0x412a9a>, <DisassemblerInsn "jne" for 0x412aa2>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "movss" for 0x412e40>, <DisassemblerInsn "mov" for 0x412e49>, <DisassemblerInsn "mov" for 0x412e51>, <DisassemblerInsn "mov" for 0x412e59>, <DisassemblerInsn "mov" for 0x412e61>, <DisassemblerInsn "mov" for 0x412e68>, <DisassemblerInsn "mov" for 0x412e6c>, <DisassemblerInsn "mov" for 0x412e71>, <DisassemblerInsn "mov" for 0x412e76>, <DisassemblerInsn "movzx" for 0x412e7b>, <DisassemblerInsn "mov" for 0x412e7e>, <DisassemblerInsn "mov" for 0x412e81>, <DisassemblerInsn "cvtsi2ss" for 0x412e86>, <DisassemblerInsn "movzx" for 0x412e8a>, <DisassemblerInsn "cvtsi2ss" for 0x412e8d>, <DisassemblerInsn "mulss" for 0x412e91>, <DisassemblerInsn "ucomiss" for 0x412e95>, <DisassemblerInsn "jb" for 0x412e98>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "movss" for 0x412d38>, <DisassemblerInsn "mov" for 0x412d41>, <DisassemblerInsn "mov" for 0x412d49>, <DisassemblerInsn "mov" for 0x412d51>, <DisassemblerInsn "mov" for 0x412d59>, <DisassemblerInsn "mov" for 0x412d60>, <DisassemblerInsn "mov" for 0x412d64>, <DisassemblerInsn "mov" for 0x412d69>, <DisassemblerInsn "mov" for 0x412d6e>, <DisassemblerInsn "movzx" for 0x412d73>, <DisassemblerInsn "mov" for 0x412d76>, <DisassemblerInsn "mov" for 0x412d79>, <DisassemblerInsn "cvtsi2ss" for 0x412d7e>, <DisassemblerInsn "movzx" for 0x412d82>, <DisassemblerInsn "cvtsi2ss" for 0x412d85>, <DisassemblerInsn "mulss" for 0x412d89>, <DisassemblerInsn "ucomiss" for 0x412d8d>, <DisassemblerInsn "jb" for 0x412d90>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412ba8>, <DisassemblerInsn "mov" for 0x412bb0>, <DisassemblerInsn "mov" for 0x412bb7>, <DisassemblerInsn "mov" for 0x412bb9>, <DisassemblerInsn "cmp" for 0x412bc0>, <DisassemblerInsn "mov" for 0x412bc3>, <DisassemblerInsn "mov" for 0x412bca>, <DisassemblerInsn "jbe" for 0x412bd1>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412f1e>, <DisassemblerInsn "mov" for 0x412f23>, <DisassemblerInsn "mov" for 0x412f28>, <DisassemblerInsn "mov" for 0x412f30>, <DisassemblerInsn "add" for 0x412f34>, <DisassemblerInsn "mov" for 0x412f37>, <DisassemblerInsn "mov" for 0x412f39>, <DisassemblerInsn "mov" for 0x412f3e>, <DisassemblerInsn "mov" for 0x412f42>, <DisassemblerInsn "jmp" for 0x412f47>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x412f81>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412e9a>, <DisassemblerInsn "mov" for 0x412e9e>, <DisassemblerInsn "mov" for 0x412ea3>, <DisassemblerInsn "mov" for 0x412ea8>, <DisassemblerInsn "add" for 0x412eab>, <DisassemblerInsn "mov" for 0x412eaf>, <DisassemblerInsn "mov" for 0x412eb3>, <DisassemblerInsn "mov" for 0x412eb8>, <DisassemblerInsn "mov" for 0x412ebc>, <DisassemblerInsn "jmp" for 0x412ec1>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412ec6>, <DisassemblerInsn "mov" for 0x412ecb>, <DisassemblerInsn "xor" for 0x412ed0>, <DisassemblerInsn "cmp" for 0x412ed2>, <DisassemblerInsn "mov" for 0x412ed5>, <DisassemblerInsn "je" for 0x412eda>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412fb1>, <DisassemblerInsn "mov" for 0x412fb5>, <DisassemblerInsn "mov" for 0x412fba>, <DisassemblerInsn "mov" for 0x412fbf>, <DisassemblerInsn "add" for 0x412fc2>, <DisassemblerInsn "mov" for 0x412fc6>, <DisassemblerInsn "mov" for 0x412fca>, <DisassemblerInsn "mov" for 0x412fcf>, <DisassemblerInsn "mov" for 0x412fd3>, <DisassemblerInsn "mov" for 0x412fd8>, <DisassemblerInsn "mov" for 0x412fe0>, <DisassemblerInsn "mov" for 0x412fe5>, <DisassemblerInsn "mov" for 0x412fea>, <DisassemblerInsn "mov" for 0x412fee>, <DisassemblerInsn "add" for 0x412ff3>, <DisassemblerInsn "mov" for 0x412ff7>, <DisassemblerInsn "add" for 0x412ffa>, <DisassemblerInsn "shl" for 0x413001>, <DisassemblerInsn "add" for 0x413004>, <DisassemblerInsn "cmp" for 0x413007>, <DisassemblerInsn "mov" for 0x41300a>, <DisassemblerInsn "mov" for 0x413012>, <DisassemblerInsn "mov" for 0x41301a>, <DisassemblerInsn "mov" for 0x413022>, <DisassemblerInsn "jb" for 0x413029>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x413031>, <DisassemblerInsn "mov" for 0x413039>, <DisassemblerInsn "mov" for 0x413040>, <DisassemblerInsn "mov" for 0x413047>, <DisassemblerInsn "mov" for 0x41304d>, <DisassemblerInsn "mov" for 0x413055>, <DisassemblerInsn "mov" for 0x41305c>, <DisassemblerInsn "add" for 0x413066>, <DisassemblerInsn "ret" for 0x41306d>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412bd3>, <DisassemblerInsn "mov" for 0x412bda>, <DisassemblerInsn "mov" for 0x412be2>, <DisassemblerInsn "mov" for 0x412be9>, <DisassemblerInsn "add" for 0x412beb>, <DisassemblerInsn "shl" for 0x412bf2>, <DisassemblerInsn "add" for 0x412bf5>, <DisassemblerInsn "add" for 0x412bf8>, <DisassemblerInsn "lea" for 0x412bfc>, <DisassemblerInsn "add" for 0x412c04>, <DisassemblerInsn "add" for 0x412c08>, <DisassemblerInsn "mov" for 0x412c0b>, <DisassemblerInsn "mov" for 0x412c0d>, <DisassemblerInsn "shl" for 0x412c0f>, <DisassemblerInsn "call" for 0x412c12>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412f66>, <DisassemblerInsn "mov" for 0x412f6b>, <DisassemblerInsn "mov" for 0x412f70>, <DisassemblerInsn "mov" for 0x412f74>, <DisassemblerInsn "cmp" for 0x412f7c>, <DisassemblerInsn "je" for 0x412f7f>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412de4>, <DisassemblerInsn "mov" for 0x412dec>, <DisassemblerInsn "mov" for 0x412df1>, <DisassemblerInsn "mov" for 0x412df6>, <DisassemblerInsn "mov" for 0x412dfa>, <DisassemblerInsn "add" for 0x412dff>, <DisassemblerInsn "mov" for 0x412e03>, <DisassemblerInsn "add" for 0x412e06>, <DisassemblerInsn "shl" for 0x412e0d>, <DisassemblerInsn "add" for 0x412e10>, <DisassemblerInsn "cmp" for 0x412e13>, <DisassemblerInsn "mov" for 0x412e16>, <DisassemblerInsn "mov" for 0x412e1e>, <DisassemblerInsn "mov" for 0x412e26>, <DisassemblerInsn "mov" for 0x412e2e>, <DisassemblerInsn "jb" for 0x412e35>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412aa8>, <DisassemblerInsn "mov" for 0x412ab0>, <DisassemblerInsn "mov" for 0x412ab8>, <DisassemblerInsn "xor" for 0x412ac0>, <DisassemblerInsn "cmp" for 0x412ac2>, <DisassemblerInsn "mov" for 0x412ac6>, <DisassemblerInsn "mov" for 0x412ace>, <DisassemblerInsn "mov" for 0x412ad6>, <DisassemblerInsn "je" for 0x412ade>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412ae0>, <DisassemblerInsn "mov" for 0x412ae8>, <DisassemblerInsn "mov" for 0x412af0>, <DisassemblerInsn "mov" for 0x412af8>, <DisassemblerInsn "mov" for 0x412b00>, <DisassemblerInsn "movzx" for 0x412b08>, <DisassemblerInsn "add" for 0x412b10>, <DisassemblerInsn "mov" for 0x412b13>, <DisassemblerInsn "mov" for 0x412b1b>, <DisassemblerInsn "add" for 0x412b23>, <DisassemblerInsn "mov" for 0x412b27>, <DisassemblerInsn "add" for 0x412b2f>, <DisassemblerInsn "mov" for 0x412b33>, <DisassemblerInsn "cmp" for 0x412b3b>, <DisassemblerInsn "mov" for 0x412b3e>, <DisassemblerInsn "mov" for 0x412b46>, <DisassemblerInsn "mov" for 0x412b4e>, <DisassemblerInsn "jne" for 0x412b56>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x412f1c>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x412e3b>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412f4c>, <DisassemblerInsn "mov" for 0x412f54>, <DisassemblerInsn "add" for 0x412f58>, <DisassemblerInsn "cmp" for 0x412f5c>, <DisassemblerInsn "mov" for 0x412f5f>, <DisassemblerInsn "je" for 0x412f64>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412fd8>, <DisassemblerInsn "mov" for 0x412fe0>, <DisassemblerInsn "mov" for 0x412fe5>, <DisassemblerInsn "mov" for 0x412fea>, <DisassemblerInsn "mov" for 0x412fee>, <DisassemblerInsn "add" for 0x412ff3>, <DisassemblerInsn "mov" for 0x412ff7>, <DisassemblerInsn "add" for 0x412ffa>, <DisassemblerInsn "shl" for 0x413001>, <DisassemblerInsn "add" for 0x413004>, <DisassemblerInsn "cmp" for 0x413007>, <DisassemblerInsn "mov" for 0x41300a>, <DisassemblerInsn "mov" for 0x413012>, <DisassemblerInsn "mov" for 0x41301a>, <DisassemblerInsn "mov" for 0x413022>, <DisassemblerInsn "jb" for 0x413029>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412dbb>, <DisassemblerInsn "mov" for 0x412dc0>, <DisassemblerInsn "mov" for 0x412dc5>, <DisassemblerInsn "mov" for 0x412dcd>, <DisassemblerInsn "add" for 0x412dd1>, <DisassemblerInsn "mov" for 0x412dd4>, <DisassemblerInsn "mov" for 0x412dd6>, <DisassemblerInsn "mov" for 0x412ddb>, <DisassemblerInsn "mov" for 0x412ddf>, <DisassemblerInsn "mov" for 0x412de4>, <DisassemblerInsn "mov" for 0x412dec>, <DisassemblerInsn "mov" for 0x412df1>, <DisassemblerInsn "mov" for 0x412df6>, <DisassemblerInsn "mov" for 0x412dfa>, <DisassemblerInsn "add" for 0x412dff>, <DisassemblerInsn "mov" for 0x412e03>, <DisassemblerInsn "add" for 0x412e06>, <DisassemblerInsn "shl" for 0x412e0d>, <DisassemblerInsn "add" for 0x412e10>, <DisassemblerInsn "cmp" for 0x412e13>, <DisassemblerInsn "mov" for 0x412e16>, <DisassemblerInsn "mov" for 0x412e1e>, <DisassemblerInsn "mov" for 0x412e26>, <DisassemblerInsn "mov" for 0x412e2e>, <DisassemblerInsn "jb" for 0x412e35>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412c39>, <DisassemblerInsn "mov" for 0x412c41>, <DisassemblerInsn "mov" for 0x412c48>, <DisassemblerInsn "add" for 0x412c4f>, <DisassemblerInsn "mov" for 0x412c51>, <DisassemblerInsn "mov" for 0x412c53>, <DisassemblerInsn "mov" for 0x412c55>, <DisassemblerInsn "lea" for 0x412c5a>, <DisassemblerInsn "call" for 0x412c61>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x412b58>, <DisassemblerInsn "mov" for 0x412b60>, <DisassemblerInsn "mov" for 0x412b68>, <DisassemblerInsn "mov" for 0x412b70>, <DisassemblerInsn "add" for 0x412b73>, <DisassemblerInsn "mov" for 0x412b7a>, <DisassemblerInsn "add" for 0x412b7d>, <DisassemblerInsn "mov" for 0x412b84>, <DisassemblerInsn "mov" for 0x412b8c>, <DisassemblerInsn "mov" for 0x412b92>, <DisassemblerInsn "add" for 0x412b99>, <DisassemblerInsn "mov" for 0x412b9c>, <DisassemblerInsn "mov" for 0x412b9e>, <DisassemblerInsn "shl" for 0x412ba0>, <DisassemblerInsn "call" for 0x412ba3>]'}], 'cfg_block_detailed_info': [{'block_Idx': 30, 'blockInsts': ['<jmp~~0x412ef9>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x64]>', '<mov~~dx, word ptr [rsp + 0x7e]>', '<mov~~rsi, qword ptr [rsp + 0x70]>', '<mov~~rax, rsi>', '<add~~rax, 2>', '<mov~~word ptr [rsi + 2], dx>', '<mov~~word ptr [rsp + 0x52], dx>', '<mov~~dword ptr [rsp + 0x54], ecx>', '<mov~~qword ptr [rsp + 0x58], rax>', '<jmp~~0x412de4>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~dx, word ptr [rsp + 0x50]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~qword ptr [rsp + 0x10], rax>', '<mov~~cx, word ptr [rsp + rax*2 + 0x1be]>', '<xor~~eax, eax>', '<cmp~~cx, dx>', '<mov~~qword ptr [rsp + 8], rax>', '<je~~0x412f66>']}, {'block_Idx': 17, 'blockInsts': ['<jmp~~0x413066>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~cx, word ptr [rsp + 0x19e]>', '<mov~~eax, dword ptr [rsp + 0x1ac]>', '<add~~eax, 1>', '<mov~~eax, eax>', '<mov~~edx, eax>', '<mov~~rax, rdx>', '<add~~rax, -1>', '<mov~~qword ptr [rsp + 0x160], rax>', '<add~~rdx, -2>', '<and~~rax, 3>', '<mov~~qword ptr [rsp + 0x168], rax>', '<mov~~eax, 1>', '<cmp~~rdx, 3>', '<mov~~word ptr [rsp + 0x176], cx>', '<mov~~qword ptr [rsp + 0x178], rax>', '<jb~~0x412aa8>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~rcx, qword ptr [rsp + 0xd8]>', '<mov~~eax, dword ptr [rax]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0xec], ecx>', '<mov~~dword ptr [rsp + 0xf0], eax>', '<mov~~rdi, qword ptr [rsp + 0xd0]>', '<mov~~eax, dword ptr [rsp + 0xec]>', '<mov~~ecx, dword ptr [rsp + 0xf0]>', '<add~~eax, ecx>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<mov~~edx, 2>', '<lea~~rcx, [rip + 0x40f]>', '<call~~0x500048>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~ecx, dword ptr [rsp + 0x1b8]>', '<add~~ecx, -1>', '<mov~~ecx, ecx>', '<mov~~edx, ecx>', '<lea~~rcx, [rip + 0x443d]>', '<movss~~xmm0, dword ptr [rcx + rdx*4]>', '<movss~~dword ptr [rsp + 0x184], xmm0>', '<lea~~rcx, [rsp + 0x1be]>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ae12>', '<mov~~qword ptr [rsp + 0x188], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ae12>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0x190], rcx>', '<mov~~ecx, dword ptr [rax + 0x44]>', '<mov~~word ptr [rsp + 0x19e], cx>', '<mov~~word ptr [rsp + 0x1be], cx>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ae4c>', '<mov~~qword ptr [rsp + 0x1a0], rcx>', '<mov~~eax, dword ptr [rax + 0x2ae4c]>', '<mov~~dword ptr [rsp + 0x1ac], eax>', '<cmp~~eax, 0>', '<je~~0x412b58>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~rdx, qword ptr [rsp + 0x1a0]>', '<mov~~rcx, qword ptr [rsp + 0x1b0]>', '<mov~~eax, dword ptr [rax]>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0xc0], edx>', '<add~~eax, -1>', '<add~~eax, edx>', '<mov~~dword ptr [rsp + 0xc4], eax>', '<mov~~rdx, rcx>', '<add~~rdx, 0x2ad0c>', '<mov~~qword ptr [rsp + 0xc8], rdx>', '<mov~~dword ptr [rcx + 0x2ad0c], eax>', '<cmp~~eax, 0>', '<je~~0x41302f>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x158]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~cx, word ptr [rsp + 0x14e]>', '<mov~~rsi, qword ptr [rsp + 0x140]>', '<mov~~rdi, qword ptr [rsp + 0x1b0]>', '<mov~~qword ptr [rsp + 0x120], rax>', '<movzx~~r8d, byte ptr [rdi + rax + 0x2ae4f]>', '<add~~cx, r8w>', '<mov~~word ptr [rsp + 0x128], cx>', '<mov~~word ptr [rsp + rax*2 + 0x1be], cx>', '<movzx~~r8d, byte ptr [rdi + rax + 0x2ae50]>', '<add~~cx, r8w>', '<mov~~word ptr [rsp + 0x12a], cx>', '<mov~~word ptr [rsp + rax*2 + 0x1c0], cx>', '<movzx~~r8d, byte ptr [rdi + rax + 0x2ae51]>', '<add~~cx, r8w>', '<mov~~word ptr [rsp + 0x12c], cx>', '<mov~~word ptr [rsp + rax*2 + 0x1c2], cx>', '<movzx~~edi, byte ptr [rdi + rax + 0x2ae52]>', '<add~~cx, di>', '<mov~~word ptr [rsp + 0x12e], cx>', '<mov~~word ptr [rsp + rax*2 + 0x1c4], cx>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x130], rax>', '<add~~rdx, 4>', '<mov~~qword ptr [rsp + 0x138], rdx>', '<cmp~~rdx, rsi>', '<mov~~si, cx>', '<mov~~word ptr [rsp + 0x14e], si>', '<mov~~rsi, rax>', '<mov~~qword ptr [rsp + 0x150], rsi>', '<mov~~qword ptr [rsp + 0x158], rdx>', '<mov~~word ptr [rsp + 0x176], cx>', '<mov~~qword ptr [rsp + 0x178], rax>', '<jne~~0x4129b7>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~dx, word ptr [rsp + 0x50]>', '<mov~~rsi, qword ptr [rsp + 0xc8]>', '<mov~~ecx, dword ptr [rsp + 0x34]>', '<mov~~word ptr [rax], dx>', '<add~~ecx, -1>', '<mov~~dword ptr [rsi], ecx>', '<mov~~word ptr [rsp + 0x22], dx>', '<mov~~dword ptr [rsp + 0x24], ecx>', '<mov~~qword ptr [rsp + 0x28], rax>', '<jmp~~0x412fd8>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xc4]>', '<mov~~rcx, qword ptr [rsp + 0x190]>', '<mov~~rdx, qword ptr [rsp + 0x188]>', '<mov~~edi, dword ptr [rsp + 0xc0]>', '<mov~~esi, edi>', '<add~~esi, 1>', '<mov~~esi, esi>', '<mov~~qword ptr [rsp + 0x80], rsi>', '<mov~~si, word ptr [rdx]>', '<cmp~~edi, 0>', '<mov~~di, si>', '<mov~~word ptr [rsp + 0x8e], di>', '<mov~~rdi, rdx>', '<mov~~qword ptr [rsp + 0x90], rdi>', '<mov~~rdi, rcx>', '<mov~~qword ptr [rsp + 0x98], rdi>', '<mov~~edi, eax>', '<mov~~dword ptr [rsp + 0xa0], edi>', '<mov~~word ptr [rsp + 0xa6], si>', '<mov~~qword ptr [rsp + 0xa8], rdx>', '<mov~~qword ptr [rsp + 0xb0], rcx>', '<mov~~dword ptr [rsp + 0xbc], eax>', '<jge~~0x412e40>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x1c8>', '<mov~~qword ptr [rsp + 0x1b0], rdi>', '<mov~~eax, dword ptr [rdi + 0x18]>', '<mov~~dword ptr [rsp + 0x1b8], eax>', '<cmp~~eax, 0>', '<je~~0x413031>']}, {'block_Idx': 20, 'blockInsts': ['<add~~rsp, 0x1c8>', '<ret~~>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x80]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<add~~rax, 1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x18], rax>', '<je~~0x412f1e>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~dx, word ptr [rsp + 0x19e]>', '<mov~~rax, qword ptr [rsp + 0x160]>', '<and~~rax, 0xfffffffffffffffc>', '<mov~~qword ptr [rsp + 0x140], rax>', '<mov~~ecx, 1>', '<xor~~eax, eax>', '<mov~~word ptr [rsp + 0x14e], dx>', '<mov~~qword ptr [rsp + 0x150], rcx>', '<mov~~qword ptr [rsp + 0x158], rax>', '<mov~~rdx, qword ptr [rsp + 0x158]>', '<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~cx, word ptr [rsp + 0x14e]>', '<mov~~rsi, qword ptr [rsp + 0x140]>', '<mov~~rdi, qword ptr [rsp + 0x1b0]>', '<mov~~qword ptr [rsp + 0x120], rax>', '<movzx~~r8d, byte ptr [rdi + rax + 0x2ae4f]>', '<add~~cx, r8w>', '<mov~~word ptr [rsp + 0x128], cx>', '<mov~~word ptr [rsp + rax*2 + 0x1be], cx>', '<movzx~~r8d, byte ptr [rdi + rax + 0x2ae50]>', '<add~~cx, r8w>', '<mov~~word ptr [rsp + 0x12a], cx>', '<mov~~word ptr [rsp + rax*2 + 0x1c0], cx>', '<movzx~~r8d, byte ptr [rdi + rax + 0x2ae51]>', '<add~~cx, r8w>', '<mov~~word ptr [rsp + 0x12c], cx>', '<mov~~word ptr [rsp + rax*2 + 0x1c2], cx>', '<movzx~~edi, byte ptr [rdi + rax + 0x2ae52]>', '<add~~cx, di>', '<mov~~word ptr [rsp + 0x12e], cx>', '<mov~~word ptr [rsp + rax*2 + 0x1c4], cx>', '<add~~rax, 4>', '<mov~~qword ptr [rsp + 0x130], rax>', '<add~~rdx, 4>', '<mov~~qword ptr [rsp + 0x138], rdx>', '<cmp~~rdx, rsi>', '<mov~~si, cx>', '<mov~~word ptr [rsp + 0x14e], si>', '<mov~~rsi, rax>', '<mov~~qword ptr [rsp + 0x150], rsi>', '<mov~~qword ptr [rsp + 0x158], rdx>', '<mov~~word ptr [rsp + 0x176], cx>', '<mov~~qword ptr [rsp + 0x178], rax>', '<jne~~0x4129b7>']}, {'block_Idx': 22, 'blockInsts': ['<movss~~xmm1, dword ptr [rsp + 0x184]>', '<mov~~ax, word ptr [rsp + 0xa6]>', '<mov~~rdx, qword ptr [rsp + 0xa8]>', '<mov~~rcx, qword ptr [rsp + 0xb0]>', '<mov~~esi, dword ptr [rsp + 0xbc]>', '<mov~~dword ptr [rsp + 0x34], esi>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~qword ptr [rsp + 0x40], rdx>', '<mov~~word ptr [rsp + 0x4e], ax>', '<movzx~~ecx, word ptr [rcx]>', '<mov~~dx, cx>', '<mov~~word ptr [rsp + 0x50], dx>', '<cvtsi2ss~~xmm0, ecx>', '<movzx~~eax, ax>', '<cvtsi2ss~~xmm2, eax>', '<mulss~~xmm1, xmm2>', '<ucomiss~~xmm0, xmm1>', '<jb~~0x412ec6>']}, {'block_Idx': 21, 'blockInsts': ['<movss~~xmm1, dword ptr [rsp + 0x184]>', '<mov~~ax, word ptr [rsp + 0x8e]>', '<mov~~rdx, qword ptr [rsp + 0x90]>', '<mov~~rcx, qword ptr [rsp + 0x98]>', '<mov~~esi, dword ptr [rsp + 0xa0]>', '<mov~~dword ptr [rsp + 0x64], esi>', '<mov~~qword ptr [rsp + 0x68], rcx>', '<mov~~qword ptr [rsp + 0x70], rdx>', '<mov~~word ptr [rsp + 0x7c], ax>', '<movzx~~ecx, word ptr [rcx]>', '<mov~~dx, cx>', '<mov~~word ptr [rsp + 0x7e], dx>', '<cvtsi2ss~~xmm0, ecx>', '<movzx~~eax, ax>', '<cvtsi2ss~~xmm2, eax>', '<mulss~~xmm1, xmm2>', '<ucomiss~~xmm0, xmm1>', '<jb~~0x412dbb>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1a0]>', '<mov~~ecx, dword ptr [rsp + 0xe4]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0xe8], eax>', '<cmp~~eax, 1>', '<mov~~dword ptr [rsp + 0xec], ecx>', '<mov~~dword ptr [rsp + 0xf0], eax>', '<jbe~~0x412c39>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~dx, word ptr [rsp + 0x4e]>', '<mov~~rsi, qword ptr [rsp + 0xc8]>', '<mov~~ecx, dword ptr [rsp + 0x34]>', '<add~~ecx, -1>', '<mov~~dword ptr [rsi], ecx>', '<mov~~word ptr [rsp + 0x22], dx>', '<mov~~dword ptr [rsp + 0x24], ecx>', '<mov~~qword ptr [rsp + 0x28], rax>', '<jmp~~0x412fd8>']}, {'block_Idx': 36, 'blockInsts': ['<jmp~~0x412f4c>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x34]>', '<mov~~dx, word ptr [rsp + 0x50]>', '<mov~~rsi, qword ptr [rsp + 0x40]>', '<mov~~rax, rsi>', '<add~~rax, 2>', '<mov~~word ptr [rsi + 2], dx>', '<mov~~word ptr [rsp + 0x22], dx>', '<mov~~dword ptr [rsp + 0x24], ecx>', '<mov~~qword ptr [rsp + 0x28], rax>', '<jmp~~0x412fd8>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~cx, word ptr [rsp + 0x50]>', '<mov~~dx, word ptr [rsp + 0x4e]>', '<xor~~eax, eax>', '<cmp~~cx, dx>', '<mov~~qword ptr [rsp + 0x18], rax>', '<je~~0x412f1e>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x34]>', '<mov~~dx, word ptr [rsp + 0x50]>', '<mov~~rsi, qword ptr [rsp + 0x40]>', '<mov~~rax, rsi>', '<add~~rax, 2>', '<mov~~word ptr [rsi + 2], dx>', '<mov~~word ptr [rsp + 0x22], dx>', '<mov~~dword ptr [rsp + 0x24], ecx>', '<mov~~qword ptr [rsp + 0x28], rax>', '<mov~~rdi, qword ptr [rsp + 0x1b0]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~si, word ptr [rsp + 0x22]>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<mov~~rdx, qword ptr [rsp + 0x28]>', '<add~~rcx, 2>', '<mov~~r8d, eax>', '<add~~rdi, 0x2ae12>', '<shl~~r8, 1>', '<add~~rdi, r8>', '<cmp~~rdx, rdi>', '<mov~~word ptr [rsp + 0xa6], si>', '<mov~~qword ptr [rsp + 0xa8], rdx>', '<mov~~qword ptr [rsp + 0xb0], rcx>', '<mov~~dword ptr [rsp + 0xbc], eax>', '<jb~~0x412e40>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~cx, word ptr [rax + 0x2ad72]>', '<mov~~word ptr [rax + 0x2ae12], cx>', '<mov~~ecx, dword ptr [rax + 0x2ad00]>', '<mov~~cx, word ptr [rax + rcx*2 + 0x2ad72]>', '<mov~~word ptr [rax + 0x2ae14], cx>', '<mov~~dword ptr [rax + 0x2ad0c], 1>', '<add~~rsp, 0x1c8>', '<ret~~>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xe8]>', '<mov~~rdi, qword ptr [rsp + 0x1b0]>', '<mov~~ecx, dword ptr [rsp + 0xe4]>', '<mov~~ecx, ecx>', '<add~~rdi, 0x2ae12>', '<shl~~rcx, 1>', '<add~~rdi, rcx>', '<add~~rdi, 2>', '<lea~~rsi, [rsp + 0x1be]>', '<add~~rsi, 2>', '<add~~eax, -1>', '<mov~~eax, eax>', '<mov~~edx, eax>', '<shl~~rdx, 1>', '<call~~0x500058>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~cx, word ptr [rsp + 0x4e]>', '<mov~~rax, qword ptr [rsp + 8]>', '<mov~~qword ptr [rsp], rax>', '<mov~~ax, word ptr [rsp + rax*2 + 0x1be]>', '<cmp~~ax, cx>', '<je~~0x412fb1>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1b0]>', '<mov~~rcx, qword ptr [rsp + 0x68]>', '<mov~~si, word ptr [rsp + 0x52]>', '<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~rdx, qword ptr [rsp + 0x58]>', '<add~~rcx, 2>', '<mov~~r8d, eax>', '<add~~rdi, 0x2ae12>', '<shl~~r8, 1>', '<add~~rdi, r8>', '<cmp~~rdx, rdi>', '<mov~~word ptr [rsp + 0x8e], si>', '<mov~~qword ptr [rsp + 0x90], rdx>', '<mov~~qword ptr [rsp + 0x98], rcx>', '<mov~~dword ptr [rsp + 0xa0], eax>', '<jb~~0x412d38>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x168]>', '<mov~~dx, word ptr [rsp + 0x176]>', '<mov~~rcx, qword ptr [rsp + 0x178]>', '<xor~~eax, eax>', '<cmp~~rsi, 0>', '<mov~~word ptr [rsp + 0x10e], dx>', '<mov~~qword ptr [rsp + 0x110], rcx>', '<mov~~qword ptr [rsp + 0x118], rax>', '<je~~0x412b58>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x118]>', '<mov~~rcx, qword ptr [rsp + 0x110]>', '<mov~~dx, word ptr [rsp + 0x10e]>', '<mov~~rsi, qword ptr [rsp + 0x168]>', '<mov~~rdi, qword ptr [rsp + 0x1b0]>', '<movzx~~edi, byte ptr [rdi + rcx + 0x2ae4f]>', '<add~~dx, di>', '<mov~~word ptr [rsp + 0xf6], dx>', '<mov~~word ptr [rsp + rcx*2 + 0x1be], dx>', '<add~~rcx, 1>', '<mov~~qword ptr [rsp + 0xf8], rcx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0x100], rax>', '<cmp~~rax, rsi>', '<mov~~word ptr [rsp + 0x10e], dx>', '<mov~~qword ptr [rsp + 0x110], rcx>', '<mov~~qword ptr [rsp + 0x118], rax>', '<jne~~0x412ae0>']}, {'block_Idx': 34, 'blockInsts': ['<jmp~~0x412ede>']}, {'block_Idx': 27, 'blockInsts': ['<jmp~~0x41302f>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x80]>', '<mov~~rax, qword ptr [rsp]>', '<add~~rax, 1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 8], rax>', '<je~~0x412f83>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x1b0]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~si, word ptr [rsp + 0x22]>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<mov~~rdx, qword ptr [rsp + 0x28]>', '<add~~rcx, 2>', '<mov~~r8d, eax>', '<add~~rdi, 0x2ae12>', '<shl~~r8, 1>', '<add~~rdi, r8>', '<cmp~~rdx, rdi>', '<mov~~word ptr [rsp + 0xa6], si>', '<mov~~qword ptr [rsp + 0xa8], rdx>', '<mov~~qword ptr [rsp + 0xb0], rcx>', '<mov~~dword ptr [rsp + 0xbc], eax>', '<jb~~0x412e40>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~dx, word ptr [rsp + 0x7c]>', '<mov~~rsi, qword ptr [rsp + 0xc8]>', '<mov~~ecx, dword ptr [rsp + 0x64]>', '<add~~ecx, -1>', '<mov~~dword ptr [rsi], ecx>', '<mov~~word ptr [rsp + 0x52], dx>', '<mov~~dword ptr [rsp + 0x54], ecx>', '<mov~~qword ptr [rsp + 0x58], rax>', '<mov~~rdi, qword ptr [rsp + 0x1b0]>', '<mov~~rcx, qword ptr [rsp + 0x68]>', '<mov~~si, word ptr [rsp + 0x52]>', '<mov~~eax, dword ptr [rsp + 0x54]>', '<mov~~rdx, qword ptr [rsp + 0x58]>', '<add~~rcx, 2>', '<mov~~r8d, eax>', '<add~~rdi, 0x2ae12>', '<shl~~r8, 1>', '<add~~rdi, r8>', '<cmp~~rdx, rdi>', '<mov~~word ptr [rsp + 0x8e], si>', '<mov~~qword ptr [rsp + 0x90], rdx>', '<mov~~qword ptr [rsp + 0x98], rcx>', '<mov~~dword ptr [rsp + 0xa0], eax>', '<jb~~0x412d38>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xd0]>', '<mov~~eax, dword ptr [rsp + 0xec]>', '<mov~~ecx, dword ptr [rsp + 0xf0]>', '<add~~eax, ecx>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<mov~~edx, 2>', '<lea~~rcx, [rip + 0x40f]>', '<call~~0x500048>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x1b0]>', '<mov~~rdi, qword ptr [rsp + 0x188]>', '<mov~~qword ptr [rsp + 0xd0], rdi>', '<mov~~rsi, rax>', '<add~~rsi, 0x2ad72>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ad00>', '<mov~~qword ptr [rsp + 0xd8], rcx>', '<mov~~eax, dword ptr [rax + 0x2ad00]>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<add~~eax, 1>', '<mov~~eax, eax>', '<mov~~edx, eax>', '<shl~~rdx, 1>', '<call~~0x500058>']}], 'cfg_edge_info': [(25, 29), (33, 36), (32, 34), (12, 16), (31, 17), (4, 6), (0, 2), (22, 26), (10, 6), (8, 12), (28, 21), (34, 37), (28, 27), (35, 17), (7, 10), (15, 17), (33, 35), (32, 33), (18, 22), (21, 24), (29, 31), (23, 21), (31, 22), (22, 25), (8, 11), (0, 1), (23, 27), (2, 4), (37, 29), (17, 20), (37, 32), (30, 32), (15, 18), (16, 15), (7, 6), (24, 28), (35, 22), (18, 21), (25, 30), (4, 7), (26, 31), (21, 23), (38, 33), (3, 8), (39, 31), (38, 39), (9, 3), (9, 9), (27, 17), (2, 3), (10, 10), (11, 15), (36, 38), (6, 3), (6, 9)], 'cdg_edge_info': [(32, 37), (25, 29), (25, 32), (21, 28), (0, 2), (22, 26), (8, 12), (28, 21), (0, 8), (0, 17), (0, 20), (7, 10), (33, 35), (32, 33), (33, 38), (18, 22), (21, 24), (23, 21), (22, 25), (8, 11), (0, 1), (2, 4), (37, 29), (37, 32), (15, 18), (35, 22), (18, 21), (4, 7), (38, 33), (21, 23), (38, 39), (9, 9), (0, 3), (8, 16), (10, 10), (2, 6), (0, 15), (6, 9)], 'ddg_edge_info': [(32, 37), (16, 20), (25, 32), (16, 29), (4, 9), (15, 39), (16, 38), (22, 26), (10, 6), (28, 21), (22, 35), (7, 10), (15, 23), (16, 22), (33, 38), (2, 32), (18, 37), (39, 35), (3, 15), (0, 7), (2, 4), (16, 15), (24, 28), (16, 24), (18, 21), (16, 33), (3, 8), (0, 9), (22, 39), (24, 21), (15, 18), (16, 26), (16, 35), (0, 2), (22, 32), (16, 28), (3, 12), (22, 25), (2, 22), (16, 21), (2, 15), (16, 23), (2, 33), (4, 6), (29, 35), (3, 16), (23, 28), (8, 15), (2, 8), (15, 29), (21, 24), (16, 37), (0, 4), (37, 32), (1, 20), (26, 22), (38, 33), (16, 39), (0, 6), (2, 3), (0, 15), (2, 21), (12, 16), (16, 32), (21, 28), (18, 38), (22, 29), (10, 9), (8, 12), (0, 35), (32, 33), (16, 25), (18, 22), (26, 35), (0, 1), (0, 10), (2, 7), (2, 16), (0, 28), (35, 22), (16, 18), (4, 7), (21, 23), (0, 3), (8, 16), (22, 33), (0, 12), (2, 18), (6, 9)]}]}
{'sbr_make_f_tablelim': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 8, 'instruction': 'addl\t$-1, %ecx'}, {'instIndex': 9, 'instruction': 'movl\t%ecx, %ecx'}, {'instIndex': 10, 'instruction': 'movl\t%ecx, %edx'}, {'instIndex': 11, 'instruction': 'leaq\tsbr_make_f_tablelim.bands_warped(%rip), %rcx'}, {'instIndex': 12, 'instruction': 'movss\t(%rcx,%rdx,4), %xmm0            # xmm0 = mem[0],zero,zero,zero'}, {'instIndex': 13, 'instruction': 'movss\t%xmm0, 0x184(%rsp)                # 4-byte Spill'}, {'instIndex': 14, 'instruction': 'leaq\t0x1be(%rsp), %rcx'}, {'instIndex': 15, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 16, 'instruction': 'addq\t$0x2ae12, %rcx                   # imm = 0x2AE12'}, {'instIndex': 17, 'instruction': 'movq\t%rcx, 0x188(%rsp)                 # 8-byte Spill'}, {'instIndex': 18, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 19, 'instruction': 'addq\t$0x2ae12, %rcx                   # imm = 0x2AE12'}, {'instIndex': 20, 'instruction': 'addq\t$2, %rcx'}, {'instIndex': 21, 'instruction': 'movq\t%rcx, 0x190(%rsp)                 # 8-byte Spill'}, {'instIndex': 22, 'instruction': 'movl\t0x44(%rax), %ecx'}, {'instIndex': 24, 'instruction': 'movw\t%cx, 0x1be(%rsp)'}]}]}
The case of compiler clang with optimization Os.
Patched source code file: aacsbr.c
Patched function: 1---static void sbr_make_f_tablelim 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_before/Os/aacsbr.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_before/Os/aacsbr.s---sbr_make_f_tablelim---before
function id: 6
function flag: True
There are 260 instructions for function: sbr_make_f_tablelim in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '174', 'end': 180}, 'before': {'start': '174', 'end': 180}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 8, 'instruction': 'addl\t$-1, %ecx'}, {'instIndex': 9, 'instruction': 'movl\t%ecx, %ecx'}, {'instIndex': 10, 'instruction': 'movl\t%ecx, %edx'}, {'instIndex': 11, 'instruction': 'leaq\tsbr_make_f_tablelim.bands_warped(%rip), %rcx'}, {'instIndex': 12, 'instruction': 'movss\t(%rcx,%rdx,4), %xmm0            # xmm0 = mem[0],zero,zero,zero'}, {'instIndex': 13, 'instruction': 'movss\t%xmm0, 0xd4(%rsp)                # 4-byte Spill'}, {'instIndex': 14, 'instruction': 'leaq\t0x10e(%rsp), %rcx'}, {'instIndex': 15, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 16, 'instruction': 'addq\t$0x2ae12, %rcx                   # imm = 0x2AE12'}, {'instIndex': 17, 'instruction': 'movq\t%rcx, 0xd8(%rsp)                 # 8-byte Spill'}, {'instIndex': 18, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 19, 'instruction': 'addq\t$0x2ae12, %rcx                   # imm = 0x2AE12'}, {'instIndex': 20, 'instruction': 'addq\t$2, %rcx'}, {'instIndex': 21, 'instruction': 'movq\t%rcx, 0xe0(%rsp)                 # 8-byte Spill'}, {'instIndex': 22, 'instruction': 'movl\t0x44(%rax), %ecx'}, {'instIndex': 24, 'instruction': 'movw\t%cx, 0x10e(%rsp)'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_before/Os/aacsbr.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_before/Os/aacsbr.o---before
The extraction of function: sbr_make_f_tablelim
Analyzing the binaries to generate subCFGs from patched function ...
It has 863 nodes and 1557 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 260 instructions in binary file.
[4236685]
The execution time of patched subCFG information extraction via angr: 0:00:01.331102
{'sbr_make_f_tablelim': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x40a56b>, <DisassemblerInsn "mov" for 0x40a572>, <DisassemblerInsn "mov" for 0x40a57a>, <DisassemblerInsn "mov" for 0x40a57d>, <DisassemblerInsn "cmp" for 0x40a584>, <DisassemblerInsn "je" for 0x40a587>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40a6b0>, <DisassemblerInsn "mov" for 0x40a6b8>, <DisassemblerInsn "mov" for 0x40a6c0>, <DisassemblerInsn "mov" for 0x40a6c8>, <DisassemblerInsn "add" for 0x40a6cb>, <DisassemblerInsn "mov" for 0x40a6d2>, <DisassemblerInsn "add" for 0x40a6d5>, <DisassemblerInsn "mov" for 0x40a6dc>, <DisassemblerInsn "mov" for 0x40a6e4>, <DisassemblerInsn "mov" for 0x40a6ea>, <DisassemblerInsn "add" for 0x40a6f1>, <DisassemblerInsn "mov" for 0x40a6f4>, <DisassemblerInsn "mov" for 0x40a6f6>, <DisassemblerInsn "shl" for 0x40a6f8>, <DisassemblerInsn "call" for 0x40a6fb>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40a58d>, <DisassemblerInsn "mov" for 0x40a595>, <DisassemblerInsn "add" for 0x40a59c>, <DisassemblerInsn "mov" for 0x40a59f>, <DisassemblerInsn "mov" for 0x40a5a1>, <DisassemblerInsn "lea" for 0x40a5a3>, <DisassemblerInsn "movss" for 0x40a5aa>, <DisassemblerInsn "movss" for 0x40a5af>, <DisassemblerInsn "lea" for 0x40a5b8>, <DisassemblerInsn "mov" for 0x40a5c0>, <DisassemblerInsn "add" for 0x40a5c3>, <DisassemblerInsn "mov" for 0x40a5ca>, <DisassemblerInsn "mov" for 0x40a5d2>, <DisassemblerInsn "add" for 0x40a5d5>, <DisassemblerInsn "add" for 0x40a5dc>, <DisassemblerInsn "mov" for 0x40a5e0>, <DisassemblerInsn "mov" for 0x40a5e8>, <DisassemblerInsn "mov" for 0x40a5eb>, <DisassemblerInsn "mov" for 0x40a5f3>, <DisassemblerInsn "mov" for 0x40a5fb>, <DisassemblerInsn "add" for 0x40a5fe>, <DisassemblerInsn "mov" for 0x40a605>, <DisassemblerInsn "mov" for 0x40a60d>, <DisassemblerInsn "mov" for 0x40a613>, <DisassemblerInsn "cmp" for 0x40a61a>, <DisassemblerInsn "je" for 0x40a61d>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40a623>, <DisassemblerInsn "mov" for 0x40a62b>, <DisassemblerInsn "add" for 0x40a632>, <DisassemblerInsn "mov" for 0x40a635>, <DisassemblerInsn "mov" for 0x40a637>, <DisassemblerInsn "mov" for 0x40a63f>, <DisassemblerInsn "mov" for 0x40a644>, <DisassemblerInsn "mov" for 0x40a64c>, <DisassemblerInsn "mov" for 0x40a654>, <DisassemblerInsn "mov" for 0x40a65c>, <DisassemblerInsn "mov" for 0x40a664>, <DisassemblerInsn "mov" for 0x40a66c>, <DisassemblerInsn "movzx" for 0x40a674>, <DisassemblerInsn "add" for 0x40a67c>, <DisassemblerInsn "mov" for 0x40a67f>, <DisassemblerInsn "mov" for 0x40a687>, <DisassemblerInsn "add" for 0x40a68f>, <DisassemblerInsn "mov" for 0x40a693>, <DisassemblerInsn "cmp" for 0x40a69b>, <DisassemblerInsn "mov" for 0x40a69e>, <DisassemblerInsn "mov" for 0x40a6a6>, <DisassemblerInsn "jne" for 0x40a6ae>]'}], 'cfg_block_detailed_info': [{'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x118>', '<mov~~qword ptr [rsp + 0x100], rdi>', '<mov~~eax, dword ptr [rdi + 0x18]>', '<mov~~dword ptr [rsp + 0x108], eax>', '<cmp~~eax, 0>', '<je~~0x40aa2b>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x100]>', '<mov~~rdi, qword ptr [rsp + 0xd8]>', '<mov~~qword ptr [rsp + 0x88], rdi>', '<mov~~rsi, rax>', '<add~~rsi, 0x2ad72>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ad00>', '<mov~~qword ptr [rsp + 0x90], rcx>', '<mov~~eax, dword ptr [rax + 0x2ad00]>', '<mov~~dword ptr [rsp + 0x9c], eax>', '<add~~eax, 1>', '<mov~~eax, eax>', '<mov~~edx, eax>', '<shl~~rdx, 1>', '<call~~0x500058>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x100]>', '<mov~~ecx, dword ptr [rsp + 0x108]>', '<add~~ecx, -1>', '<mov~~ecx, ecx>', '<mov~~edx, ecx>', '<lea~~rcx, [rip + 0x4332]>', '<movss~~xmm0, dword ptr [rcx + rdx*4]>', '<movss~~dword ptr [rsp + 0xd4], xmm0>', '<lea~~rcx, [rsp + 0x10e]>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ae12>', '<mov~~qword ptr [rsp + 0xd8], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ae12>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<mov~~ecx, dword ptr [rax + 0x44]>', '<mov~~word ptr [rsp + 0xee], cx>', '<mov~~word ptr [rsp + 0x10e], cx>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ae4c>', '<mov~~qword ptr [rsp + 0xf0], rcx>', '<mov~~eax, dword ptr [rax + 0x2ae4c]>', '<mov~~dword ptr [rsp + 0xfc], eax>', '<cmp~~eax, 0>', '<je~~0x40a6b0>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~cx, word ptr [rsp + 0xee]>', '<mov~~eax, dword ptr [rsp + 0xfc]>', '<add~~eax, 1>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0xb8], rax>', '<mov~~eax, 1>', '<mov~~word ptr [rsp + 0xc6], cx>', '<mov~~qword ptr [rsp + 0xc8], rax>', '<mov~~rax, qword ptr [rsp + 0xc8]>', '<mov~~cx, word ptr [rsp + 0xc6]>', '<mov~~rdx, qword ptr [rsp + 0xb8]>', '<mov~~rsi, qword ptr [rsp + 0x100]>', '<movzx~~esi, byte ptr [rsi + rax + 0x2ae4f]>', '<add~~cx, si>', '<mov~~word ptr [rsp + 0xae], cx>', '<mov~~word ptr [rsp + rax*2 + 0x10e], cx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0xb0], rax>', '<cmp~~rax, rdx>', '<mov~~word ptr [rsp + 0xc6], cx>', '<mov~~qword ptr [rsp + 0xc8], rax>', '<jne~~0x40a654>']}], 'cfg_edge_info': [(2, 3), (0, 2), (2, 4)]}]}
{'sbr_make_f_tablelim': [4236685]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/10678e5c728f3b7c4c8d4aa95df07421da3e14a9/clang_before/Os/aacsbr.o---before
The extraction of function: sbr_make_f_tablelim
[4236685]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 32 nodes and 49 edges in CFGEmulated.
It has 32 nodes and 42 edges in CDG.
It has 1018 nodes and 1259 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4236685]
{4237056, 4237570, 4237320, 4237705, 4236685, 4237201, 4237466, 4236835, 4237607, 4237865, 4237867, 4237099, 4236976, 4237751, 4237246, 4237510, 4237388, 4236884, 4237653, 4237920, 4237546, 4236651, 4237676, 4237167}
[19, 23, 27, 14, 8, 26, 6, 4, 28, 13, 29, 18, 12, 0, 17, 30, 21, 22, 2, 1, 15, 7, 31, 3, 24, 25, 20, 9]
The execution time of patched slicing information extraction via angr: 0:00:10.379733
{'sbr_make_f_tablelim': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40a89a>, <DisassemblerInsn "mov" for 0x40a89e>, <DisassemblerInsn "mov" for 0x40a8a3>, <DisassemblerInsn "mov" for 0x40a8a8>, <DisassemblerInsn "add" for 0x40a8ab>, <DisassemblerInsn "mov" for 0x40a8af>, <DisassemblerInsn "mov" for 0x40a8b3>, <DisassemblerInsn "mov" for 0x40a8b8>, <DisassemblerInsn "mov" for 0x40a8bc>, <DisassemblerInsn "jmp" for 0x40a8c1>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40a902>, <DisassemblerInsn "mov" for 0x40a907>, <DisassemblerInsn "mov" for 0x40a90c>, <DisassemblerInsn "mov" for 0x40a911>, <DisassemblerInsn "xor" for 0x40a919>, <DisassemblerInsn "cmp" for 0x40a91b>, <DisassemblerInsn "mov" for 0x40a91e>, <DisassemblerInsn "je" for 0x40a923>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40a9b7>, <DisassemblerInsn "mov" for 0x40a9bb>, <DisassemblerInsn "mov" for 0x40a9c0>, <DisassemblerInsn "mov" for 0x40a9c5>, <DisassemblerInsn "add" for 0x40a9c8>, <DisassemblerInsn "mov" for 0x40a9cc>, <DisassemblerInsn "mov" for 0x40a9d0>, <DisassemblerInsn "mov" for 0x40a9d5>, <DisassemblerInsn "mov" for 0x40a9d9>, <DisassemblerInsn "mov" for 0x40a9de>, <DisassemblerInsn "mov" for 0x40a9e6>, <DisassemblerInsn "mov" for 0x40a9eb>, <DisassemblerInsn "mov" for 0x40a9f0>, <DisassemblerInsn "mov" for 0x40a9f4>, <DisassemblerInsn "add" for 0x40a9f9>, <DisassemblerInsn "mov" for 0x40a9fd>, <DisassemblerInsn "add" for 0x40aa00>, <DisassemblerInsn "shl" for 0x40aa07>, <DisassemblerInsn "add" for 0x40aa0a>, <DisassemblerInsn "cmp" for 0x40aa0d>, <DisassemblerInsn "mov" for 0x40aa10>, <DisassemblerInsn "mov" for 0x40aa15>, <DisassemblerInsn "mov" for 0x40aa1a>, <DisassemblerInsn "mov" for 0x40aa1f>, <DisassemblerInsn "jb" for 0x40aa23>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40aa29>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40a791>, <DisassemblerInsn "mov" for 0x40a799>, <DisassemblerInsn "mov" for 0x40a7a0>, <DisassemblerInsn "add" for 0x40a7a7>, <DisassemblerInsn "mov" for 0x40a7a9>, <DisassemblerInsn "mov" for 0x40a7ab>, <DisassemblerInsn "mov" for 0x40a7ad>, <DisassemblerInsn "lea" for 0x40a7b2>, <DisassemblerInsn "call" for 0x40a7b9>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40a925>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40a654>, <DisassemblerInsn "mov" for 0x40a65c>, <DisassemblerInsn "mov" for 0x40a664>, <DisassemblerInsn "mov" for 0x40a66c>, <DisassemblerInsn "movzx" for 0x40a674>, <DisassemblerInsn "add" for 0x40a67c>, <DisassemblerInsn "mov" for 0x40a67f>, <DisassemblerInsn "mov" for 0x40a687>, <DisassemblerInsn "add" for 0x40a68f>, <DisassemblerInsn "mov" for 0x40a693>, <DisassemblerInsn "cmp" for 0x40a69b>, <DisassemblerInsn "mov" for 0x40a69e>, <DisassemblerInsn "mov" for 0x40a6a6>, <DisassemblerInsn "jne" for 0x40a6ae>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40a623>, <DisassemblerInsn "mov" for 0x40a62b>, <DisassemblerInsn "add" for 0x40a632>, <DisassemblerInsn "mov" for 0x40a635>, <DisassemblerInsn "mov" for 0x40a637>, <DisassemblerInsn "mov" for 0x40a63f>, <DisassemblerInsn "mov" for 0x40a644>, <DisassemblerInsn "mov" for 0x40a64c>, <DisassemblerInsn "mov" for 0x40a654>, <DisassemblerInsn "mov" for 0x40a65c>, <DisassemblerInsn "mov" for 0x40a664>, <DisassemblerInsn "mov" for 0x40a66c>, <DisassemblerInsn "movzx" for 0x40a674>, <DisassemblerInsn "add" for 0x40a67c>, <DisassemblerInsn "mov" for 0x40a67f>, <DisassemblerInsn "mov" for 0x40a687>, <DisassemblerInsn "add" for 0x40a68f>, <DisassemblerInsn "mov" for 0x40a693>, <DisassemblerInsn "cmp" for 0x40a69b>, <DisassemblerInsn "mov" for 0x40a69e>, <DisassemblerInsn "mov" for 0x40a6a6>, <DisassemblerInsn "jne" for 0x40a6ae>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40a987>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40a76f>, <DisassemblerInsn "mov" for 0x40a777>, <DisassemblerInsn "mov" for 0x40a77f>, <DisassemblerInsn "mov" for 0x40a781>, <DisassemblerInsn "mov" for 0x40a783>, <DisassemblerInsn "mov" for 0x40a78a>, <DisassemblerInsn "mov" for 0x40a791>, <DisassemblerInsn "mov" for 0x40a799>, <DisassemblerInsn "mov" for 0x40a7a0>, <DisassemblerInsn "add" for 0x40a7a7>, <DisassemblerInsn "mov" for 0x40a7a9>, <DisassemblerInsn "mov" for 0x40a7ab>, <DisassemblerInsn "mov" for 0x40a7ad>, <DisassemblerInsn "lea" for 0x40a7b2>, <DisassemblerInsn "call" for 0x40a7b9>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40a8ea>, <DisassemblerInsn "mov" for 0x40a8ef>, <DisassemblerInsn "add" for 0x40a8f4>, <DisassemblerInsn "cmp" for 0x40a8f8>, <DisassemblerInsn "mov" for 0x40a8fb>, <DisassemblerInsn "je" for 0x40a900>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40a8c6>, <DisassemblerInsn "mov" for 0x40a8ca>, <DisassemblerInsn "mov" for 0x40a8cf>, <DisassemblerInsn "sub" for 0x40a8d4>, <DisassemblerInsn "sete" for 0x40a8d7>, <DisassemblerInsn "or" for 0x40a8da>, <DisassemblerInsn "xor" for 0x40a8dc>, <DisassemblerInsn "test" for 0x40a8de>, <DisassemblerInsn "mov" for 0x40a8e1>, <DisassemblerInsn "jne" for 0x40a8e6>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40a7be>, <DisassemblerInsn "mov" for 0x40a7c6>, <DisassemblerInsn "mov" for 0x40a7ce>, <DisassemblerInsn "mov" for 0x40a7d6>, <DisassemblerInsn "mov" for 0x40a7d8>, <DisassemblerInsn "mov" for 0x40a7da>, <DisassemblerInsn "add" for 0x40a7de>, <DisassemblerInsn "add" for 0x40a7e1>, <DisassemblerInsn "mov" for 0x40a7e3>, <DisassemblerInsn "mov" for 0x40a7e7>, <DisassemblerInsn "add" for 0x40a7ea>, <DisassemblerInsn "mov" for 0x40a7f1>, <DisassemblerInsn "mov" for 0x40a7f9>, <DisassemblerInsn "cmp" for 0x40a7ff>, <DisassemblerInsn "je" for 0x40a802>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x40a56b>, <DisassemblerInsn "mov" for 0x40a572>, <DisassemblerInsn "mov" for 0x40a57a>, <DisassemblerInsn "mov" for 0x40a57d>, <DisassemblerInsn "cmp" for 0x40a584>, <DisassemblerInsn "je" for 0x40a587>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "add" for 0x40aa60>, <DisassemblerInsn "ret" for 0x40aa67>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40a955>, <DisassemblerInsn "mov" for 0x40a95a>, <DisassemblerInsn "add" for 0x40a95e>, <DisassemblerInsn "cmp" for 0x40a962>, <DisassemblerInsn "mov" for 0x40a965>, <DisassemblerInsn "je" for 0x40a96a>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40a927>, <DisassemblerInsn "mov" for 0x40a92c>, <DisassemblerInsn "mov" for 0x40a931>, <DisassemblerInsn "mov" for 0x40a939>, <DisassemblerInsn "add" for 0x40a93d>, <DisassemblerInsn "mov" for 0x40a940>, <DisassemblerInsn "mov" for 0x40a942>, <DisassemblerInsn "mov" for 0x40a947>, <DisassemblerInsn "mov" for 0x40a94b>, <DisassemblerInsn "jmp" for 0x40a950>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40a9de>, <DisassemblerInsn "mov" for 0x40a9e6>, <DisassemblerInsn "mov" for 0x40a9eb>, <DisassemblerInsn "mov" for 0x40a9f0>, <DisassemblerInsn "mov" for 0x40a9f4>, <DisassemblerInsn "add" for 0x40a9f9>, <DisassemblerInsn "mov" for 0x40a9fd>, <DisassemblerInsn "add" for 0x40aa00>, <DisassemblerInsn "shl" for 0x40aa07>, <DisassemblerInsn "add" for 0x40aa0a>, <DisassemblerInsn "cmp" for 0x40aa0d>, <DisassemblerInsn "mov" for 0x40aa10>, <DisassemblerInsn "mov" for 0x40aa15>, <DisassemblerInsn "mov" for 0x40aa1a>, <DisassemblerInsn "mov" for 0x40aa1f>, <DisassemblerInsn "jb" for 0x40aa23>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40a58d>, <DisassemblerInsn "mov" for 0x40a595>, <DisassemblerInsn "add" for 0x40a59c>, <DisassemblerInsn "mov" for 0x40a59f>, <DisassemblerInsn "mov" for 0x40a5a1>, <DisassemblerInsn "lea" for 0x40a5a3>, <DisassemblerInsn "movss" for 0x40a5aa>, <DisassemblerInsn "movss" for 0x40a5af>, <DisassemblerInsn "lea" for 0x40a5b8>, <DisassemblerInsn "mov" for 0x40a5c0>, <DisassemblerInsn "add" for 0x40a5c3>, <DisassemblerInsn "mov" for 0x40a5ca>, <DisassemblerInsn "mov" for 0x40a5d2>, <DisassemblerInsn "add" for 0x40a5d5>, <DisassemblerInsn "add" for 0x40a5dc>, <DisassemblerInsn "mov" for 0x40a5e0>, <DisassemblerInsn "mov" for 0x40a5e8>, <DisassemblerInsn "mov" for 0x40a5eb>, <DisassemblerInsn "mov" for 0x40a5f3>, <DisassemblerInsn "mov" for 0x40a5fb>, <DisassemblerInsn "add" for 0x40a5fe>, <DisassemblerInsn "mov" for 0x40a605>, <DisassemblerInsn "mov" for 0x40a60d>, <DisassemblerInsn "mov" for 0x40a613>, <DisassemblerInsn "cmp" for 0x40a61a>, <DisassemblerInsn "je" for 0x40a61d>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40aa2b>, <DisassemblerInsn "mov" for 0x40aa33>, <DisassemblerInsn "mov" for 0x40aa3a>, <DisassemblerInsn "mov" for 0x40aa41>, <DisassemblerInsn "mov" for 0x40aa47>, <DisassemblerInsn "mov" for 0x40aa4f>, <DisassemblerInsn "mov" for 0x40aa56>, <DisassemblerInsn "add" for 0x40aa60>, <DisassemblerInsn "ret" for 0x40aa67>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40a808>, <DisassemblerInsn "mov" for 0x40a80c>, <DisassemblerInsn "mov" for 0x40a814>, <DisassemblerInsn "mov" for 0x40a81c>, <DisassemblerInsn "cmp" for 0x40a820>, <DisassemblerInsn "setl" for 0x40a823>, <DisassemblerInsn "mov" for 0x40a827>, <DisassemblerInsn "add" for 0x40a82c>, <DisassemblerInsn "mov" for 0x40a82f>, <DisassemblerInsn "mov" for 0x40a831>, <DisassemblerInsn "mov" for 0x40a836>, <DisassemblerInsn "mov" for 0x40a839>, <DisassemblerInsn "mov" for 0x40a83e>, <DisassemblerInsn "mov" for 0x40a843>, <DisassemblerInsn "mov" for 0x40a848>, <DisassemblerInsn "movss" for 0x40a84c>, <DisassemblerInsn "mov" for 0x40a855>, <DisassemblerInsn "mov" for 0x40a85a>, <DisassemblerInsn "mov" for 0x40a85f>, <DisassemblerInsn "mov" for 0x40a864>, <DisassemblerInsn "mov" for 0x40a868>, <DisassemblerInsn "mov" for 0x40a86c>, <DisassemblerInsn "mov" for 0x40a871>, <DisassemblerInsn "mov" for 0x40a876>, <DisassemblerInsn "movzx" for 0x40a87b>, <DisassemblerInsn "mov" for 0x40a87e>, <DisassemblerInsn "mov" for 0x40a881>, <DisassemblerInsn "cvtsi2ss" for 0x40a886>, <DisassemblerInsn "movzx" for 0x40a88a>, <DisassemblerInsn "cvtsi2ss" for 0x40a88d>, <DisassemblerInsn "mulss" for 0x40a891>, <DisassemblerInsn "ucomiss" for 0x40a895>, <DisassemblerInsn "jb" for 0x40a898>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40a700>, <DisassemblerInsn "mov" for 0x40a708>, <DisassemblerInsn "mov" for 0x40a70f>, <DisassemblerInsn "mov" for 0x40a711>, <DisassemblerInsn "cmp" for 0x40a718>, <DisassemblerInsn "mov" for 0x40a71b>, <DisassemblerInsn "mov" for 0x40a722>, <DisassemblerInsn "jbe" for 0x40a729>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40a989>, <DisassemblerInsn "mov" for 0x40a98e>, <DisassemblerInsn "mov" for 0x40a993>, <DisassemblerInsn "mov" for 0x40a99b>, <DisassemblerInsn "mov" for 0x40a99f>, <DisassemblerInsn "add" for 0x40a9a2>, <DisassemblerInsn "mov" for 0x40a9a5>, <DisassemblerInsn "mov" for 0x40a9a7>, <DisassemblerInsn "mov" for 0x40a9ac>, <DisassemblerInsn "mov" for 0x40a9b0>, <DisassemblerInsn "jmp" for 0x40a9b5>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40a6b0>, <DisassemblerInsn "mov" for 0x40a6b8>, <DisassemblerInsn "mov" for 0x40a6c0>, <DisassemblerInsn "mov" for 0x40a6c8>, <DisassemblerInsn "add" for 0x40a6cb>, <DisassemblerInsn "mov" for 0x40a6d2>, <DisassemblerInsn "add" for 0x40a6d5>, <DisassemblerInsn "mov" for 0x40a6dc>, <DisassemblerInsn "mov" for 0x40a6e4>, <DisassemblerInsn "mov" for 0x40a6ea>, <DisassemblerInsn "add" for 0x40a6f1>, <DisassemblerInsn "mov" for 0x40a6f4>, <DisassemblerInsn "mov" for 0x40a6f6>, <DisassemblerInsn "shl" for 0x40a6f8>, <DisassemblerInsn "call" for 0x40a6fb>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "movss" for 0x40a84c>, <DisassemblerInsn "mov" for 0x40a855>, <DisassemblerInsn "mov" for 0x40a85a>, <DisassemblerInsn "mov" for 0x40a85f>, <DisassemblerInsn "mov" for 0x40a864>, <DisassemblerInsn "mov" for 0x40a868>, <DisassemblerInsn "mov" for 0x40a86c>, <DisassemblerInsn "mov" for 0x40a871>, <DisassemblerInsn "mov" for 0x40a876>, <DisassemblerInsn "movzx" for 0x40a87b>, <DisassemblerInsn "mov" for 0x40a87e>, <DisassemblerInsn "mov" for 0x40a881>, <DisassemblerInsn "cvtsi2ss" for 0x40a886>, <DisassemblerInsn "movzx" for 0x40a88a>, <DisassemblerInsn "cvtsi2ss" for 0x40a88d>, <DisassemblerInsn "mulss" for 0x40a891>, <DisassemblerInsn "ucomiss" for 0x40a895>, <DisassemblerInsn "jb" for 0x40a898>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40a96c>, <DisassemblerInsn "mov" for 0x40a971>, <DisassemblerInsn "mov" for 0x40a976>, <DisassemblerInsn "mov" for 0x40a97a>, <DisassemblerInsn "cmp" for 0x40a982>, <DisassemblerInsn "je" for 0x40a985>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40a8e8>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40a72b>, <DisassemblerInsn "mov" for 0x40a732>, <DisassemblerInsn "mov" for 0x40a73a>, <DisassemblerInsn "mov" for 0x40a741>, <DisassemblerInsn "add" for 0x40a743>, <DisassemblerInsn "shl" for 0x40a74a>, <DisassemblerInsn "add" for 0x40a74d>, <DisassemblerInsn "add" for 0x40a750>, <DisassemblerInsn "lea" for 0x40a754>, <DisassemblerInsn "add" for 0x40a75c>, <DisassemblerInsn "add" for 0x40a760>, <DisassemblerInsn "mov" for 0x40a763>, <DisassemblerInsn "mov" for 0x40a765>, <DisassemblerInsn "shl" for 0x40a767>, <DisassemblerInsn "call" for 0x40a76a>]'}], 'cfg_block_detailed_info': [{'block_Idx': 19, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x34]>', '<mov~~dx, word ptr [rsp + 0x4c]>', '<mov~~rsi, qword ptr [rsp + 0x40]>', '<mov~~rax, rsi>', '<add~~rax, 2>', '<mov~~word ptr [rsi + 2], dx>', '<mov~~word ptr [rsp + 0x22], dx>', '<mov~~dword ptr [rsp + 0x24], ecx>', '<mov~~qword ptr [rsp + 0x28], rax>', '<jmp~~0x40a9de>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~dx, word ptr [rsp + 0x4c]>', '<mov~~rax, qword ptr [rsp + 0x18]>', '<mov~~qword ptr [rsp + 0x10], rax>', '<mov~~cx, word ptr [rsp + rax*2 + 0x10e]>', '<xor~~eax, eax>', '<cmp~~cx, dx>', '<mov~~qword ptr [rsp + 8], rax>', '<je~~0x40a96c>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x34]>', '<mov~~dx, word ptr [rsp + 0x4c]>', '<mov~~rsi, qword ptr [rsp + 0x40]>', '<mov~~rax, rsi>', '<add~~rax, 2>', '<mov~~word ptr [rsi + 2], dx>', '<mov~~word ptr [rsp + 0x22], dx>', '<mov~~dword ptr [rsp + 0x24], ecx>', '<mov~~qword ptr [rsp + 0x28], rax>', '<mov~~rdi, qword ptr [rsp + 0x100]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~si, word ptr [rsp + 0x22]>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<mov~~rdx, qword ptr [rsp + 0x28]>', '<add~~rcx, 2>', '<mov~~r8d, eax>', '<add~~rdi, 0x2ae12>', '<shl~~r8, 1>', '<add~~rdi, r8>', '<cmp~~rdx, rdi>', '<mov~~word ptr [rsp + 0x5e], si>', '<mov~~qword ptr [rsp + 0x60], rdx>', '<mov~~qword ptr [rsp + 0x68], rcx>', '<mov~~dword ptr [rsp + 0x74], eax>', '<jb~~0x40a84c>']}, {'block_Idx': 14, 'blockInsts': ['<jmp~~0x40aa60>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x88]>', '<mov~~eax, dword ptr [rsp + 0xa4]>', '<mov~~ecx, dword ptr [rsp + 0xa8]>', '<add~~eax, ecx>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<mov~~edx, 2>', '<lea~~rcx, [rip + 0x2af]>', '<call~~0x500048>']}, {'block_Idx': 26, 'blockInsts': ['<jmp~~0x40a8ea>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xc8]>', '<mov~~cx, word ptr [rsp + 0xc6]>', '<mov~~rdx, qword ptr [rsp + 0xb8]>', '<mov~~rsi, qword ptr [rsp + 0x100]>', '<movzx~~esi, byte ptr [rsi + rax + 0x2ae4f]>', '<add~~cx, si>', '<mov~~word ptr [rsp + 0xae], cx>', '<mov~~word ptr [rsp + rax*2 + 0x10e], cx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0xb0], rax>', '<cmp~~rax, rdx>', '<mov~~word ptr [rsp + 0xc6], cx>', '<mov~~qword ptr [rsp + 0xc8], rax>', '<jne~~0x40a654>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~cx, word ptr [rsp + 0xee]>', '<mov~~eax, dword ptr [rsp + 0xfc]>', '<add~~eax, 1>', '<mov~~eax, eax>', '<mov~~qword ptr [rsp + 0xb8], rax>', '<mov~~eax, 1>', '<mov~~word ptr [rsp + 0xc6], cx>', '<mov~~qword ptr [rsp + 0xc8], rax>', '<mov~~rax, qword ptr [rsp + 0xc8]>', '<mov~~cx, word ptr [rsp + 0xc6]>', '<mov~~rdx, qword ptr [rsp + 0xb8]>', '<mov~~rsi, qword ptr [rsp + 0x100]>', '<movzx~~esi, byte ptr [rsi + rax + 0x2ae4f]>', '<add~~cx, si>', '<mov~~word ptr [rsp + 0xae], cx>', '<mov~~word ptr [rsp + rax*2 + 0x10e], cx>', '<add~~rax, 1>', '<mov~~qword ptr [rsp + 0xb0], rax>', '<cmp~~rax, rdx>', '<mov~~word ptr [rsp + 0xc6], cx>', '<mov~~qword ptr [rsp + 0xc8], rax>', '<jne~~0x40a654>']}, {'block_Idx': 28, 'blockInsts': ['<jmp~~0x40a955>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xf0]>', '<mov~~rcx, qword ptr [rsp + 0x90]>', '<mov~~eax, dword ptr [rax]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0xa4], ecx>', '<mov~~dword ptr [rsp + 0xa8], eax>', '<mov~~rdi, qword ptr [rsp + 0x88]>', '<mov~~eax, dword ptr [rsp + 0xa4]>', '<mov~~ecx, dword ptr [rsp + 0xa8]>', '<add~~eax, ecx>', '<mov~~eax, eax>', '<mov~~esi, eax>', '<mov~~edx, 2>', '<lea~~rcx, [rip + 0x2af]>', '<call~~0x500048>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x50]>', '<mov~~rax, qword ptr [rsp + 0x10]>', '<add~~rax, 1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 0x18], rax>', '<je~~0x40a927>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x4f]>', '<mov~~dx, word ptr [rsp + 0x4a]>', '<mov~~cx, word ptr [rsp + 0x4c]>', '<sub~~cx, dx>', '<sete~~cl>', '<or~~cl, al>', '<xor~~eax, eax>', '<test~~cl, 1>', '<mov~~qword ptr [rsp + 0x18], rax>', '<jne~~0x40a927>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x90]>', '<mov~~rdx, qword ptr [rsp + 0xf0]>', '<mov~~rcx, qword ptr [rsp + 0x100]>', '<mov~~eax, dword ptr [rax]>', '<mov~~edx, dword ptr [rdx]>', '<mov~~dword ptr [rsp + 0x78], edx>', '<add~~eax, -1>', '<add~~eax, edx>', '<mov~~dword ptr [rsp + 0x7c], eax>', '<mov~~rdx, rcx>', '<add~~rdx, 0x2ad0c>', '<mov~~qword ptr [rsp + 0x80], rdx>', '<mov~~dword ptr [rcx + 0x2ad0c], eax>', '<cmp~~eax, 0>', '<je~~0x40aa29>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x118>', '<mov~~qword ptr [rsp + 0x100], rdi>', '<mov~~eax, dword ptr [rdi + 0x18]>', '<mov~~dword ptr [rsp + 0x108], eax>', '<cmp~~eax, 0>', '<je~~0x40aa2b>']}, {'block_Idx': 17, 'blockInsts': ['<add~~rsp, 0x118>', '<ret~~>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x50]>', '<mov~~rax, qword ptr [rsp]>', '<add~~rax, 1>', '<cmp~~rax, rcx>', '<mov~~qword ptr [rsp + 8], rax>', '<je~~0x40a989>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~dx, word ptr [rsp + 0x4a]>', '<mov~~rsi, qword ptr [rsp + 0x80]>', '<mov~~ecx, dword ptr [rsp + 0x34]>', '<add~~ecx, -1>', '<mov~~dword ptr [rsi], ecx>', '<mov~~word ptr [rsp + 0x22], dx>', '<mov~~dword ptr [rsp + 0x24], ecx>', '<mov~~qword ptr [rsp + 0x28], rax>', '<jmp~~0x40a9de>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x100]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~si, word ptr [rsp + 0x22]>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<mov~~rdx, qword ptr [rsp + 0x28]>', '<add~~rcx, 2>', '<mov~~r8d, eax>', '<add~~rdi, 0x2ae12>', '<shl~~r8, 1>', '<add~~rdi, r8>', '<cmp~~rdx, rdi>', '<mov~~word ptr [rsp + 0x5e], si>', '<mov~~qword ptr [rsp + 0x60], rdx>', '<mov~~qword ptr [rsp + 0x68], rcx>', '<mov~~dword ptr [rsp + 0x74], eax>', '<jb~~0x40a84c>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x100]>', '<mov~~ecx, dword ptr [rsp + 0x108]>', '<add~~ecx, -1>', '<mov~~ecx, ecx>', '<mov~~edx, ecx>', '<lea~~rcx, [rip + 0x4332]>', '<movss~~xmm0, dword ptr [rcx + rdx*4]>', '<movss~~dword ptr [rsp + 0xd4], xmm0>', '<lea~~rcx, [rsp + 0x10e]>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ae12>', '<mov~~qword ptr [rsp + 0xd8], rcx>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ae12>', '<add~~rcx, 2>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<mov~~ecx, dword ptr [rax + 0x44]>', '<mov~~word ptr [rsp + 0xee], cx>', '<mov~~word ptr [rsp + 0x10e], cx>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ae4c>', '<mov~~qword ptr [rsp + 0xf0], rcx>', '<mov~~eax, dword ptr [rax + 0x2ae4c]>', '<mov~~dword ptr [rsp + 0xfc], eax>', '<cmp~~eax, 0>', '<je~~0x40a6b0>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x100]>', '<mov~~cx, word ptr [rax + 0x2ad72]>', '<mov~~word ptr [rax + 0x2ae12], cx>', '<mov~~ecx, dword ptr [rax + 0x2ad00]>', '<mov~~cx, word ptr [rax + rcx*2 + 0x2ad72]>', '<mov~~word ptr [rax + 0x2ae14], cx>', '<mov~~dword ptr [rax + 0x2ad0c], 1>', '<add~~rsp, 0x118>', '<ret~~>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x7c]>', '<mov~~rcx, qword ptr [rsp + 0xe0]>', '<mov~~rdx, qword ptr [rsp + 0xd8]>', '<mov~~esi, dword ptr [rsp + 0x78]>', '<cmp~~esi, 0>', '<setl~~dil>', '<mov~~byte ptr [rsp + 0x4f], dil>', '<add~~esi, 1>', '<mov~~esi, esi>', '<mov~~qword ptr [rsp + 0x50], rsi>', '<mov~~si, word ptr [rdx]>', '<mov~~word ptr [rsp + 0x5e], si>', '<mov~~qword ptr [rsp + 0x60], rdx>', '<mov~~qword ptr [rsp + 0x68], rcx>', '<mov~~dword ptr [rsp + 0x74], eax>', '<movss~~xmm1, dword ptr [rsp + 0xd4]>', '<mov~~ax, word ptr [rsp + 0x5e]>', '<mov~~rdx, qword ptr [rsp + 0x60]>', '<mov~~rcx, qword ptr [rsp + 0x68]>', '<mov~~esi, dword ptr [rsp + 0x74]>', '<mov~~dword ptr [rsp + 0x34], esi>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~qword ptr [rsp + 0x40], rdx>', '<mov~~word ptr [rsp + 0x4a], ax>', '<movzx~~ecx, word ptr [rcx]>', '<mov~~dx, cx>', '<mov~~word ptr [rsp + 0x4c], dx>', '<cvtsi2ss~~xmm0, ecx>', '<movzx~~eax, ax>', '<cvtsi2ss~~xmm2, eax>', '<mulss~~xmm1, xmm2>', '<ucomiss~~xmm0, xmm1>', '<jb~~0x40a8c6>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xf0]>', '<mov~~ecx, dword ptr [rsp + 0x9c]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0xa0], eax>', '<cmp~~eax, 1>', '<mov~~dword ptr [rsp + 0xa4], ecx>', '<mov~~dword ptr [rsp + 0xa8], eax>', '<jbe~~0x40a791>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x40]>', '<mov~~dx, word ptr [rsp + 0x4c]>', '<mov~~rsi, qword ptr [rsp + 0x80]>', '<mov~~ecx, dword ptr [rsp + 0x34]>', '<mov~~word ptr [rax], dx>', '<add~~ecx, -1>', '<mov~~dword ptr [rsi], ecx>', '<mov~~word ptr [rsp + 0x22], dx>', '<mov~~dword ptr [rsp + 0x24], ecx>', '<mov~~qword ptr [rsp + 0x28], rax>', '<jmp~~0x40a9de>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x100]>', '<mov~~rdi, qword ptr [rsp + 0xd8]>', '<mov~~qword ptr [rsp + 0x88], rdi>', '<mov~~rsi, rax>', '<add~~rsi, 0x2ad72>', '<mov~~rcx, rax>', '<add~~rcx, 0x2ad00>', '<mov~~qword ptr [rsp + 0x90], rcx>', '<mov~~eax, dword ptr [rax + 0x2ad00]>', '<mov~~dword ptr [rsp + 0x9c], eax>', '<add~~eax, 1>', '<mov~~eax, eax>', '<mov~~edx, eax>', '<shl~~rdx, 1>', '<call~~0x500058>']}, {'block_Idx': 24, 'blockInsts': ['<movss~~xmm1, dword ptr [rsp + 0xd4]>', '<mov~~ax, word ptr [rsp + 0x5e]>', '<mov~~rdx, qword ptr [rsp + 0x60]>', '<mov~~rcx, qword ptr [rsp + 0x68]>', '<mov~~esi, dword ptr [rsp + 0x74]>', '<mov~~dword ptr [rsp + 0x34], esi>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~qword ptr [rsp + 0x40], rdx>', '<mov~~word ptr [rsp + 0x4a], ax>', '<movzx~~ecx, word ptr [rcx]>', '<mov~~dx, cx>', '<mov~~word ptr [rsp + 0x4c], dx>', '<cvtsi2ss~~xmm0, ecx>', '<movzx~~eax, ax>', '<cvtsi2ss~~xmm2, eax>', '<mulss~~xmm1, xmm2>', '<ucomiss~~xmm0, xmm1>', '<jb~~0x40a8c6>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~cx, word ptr [rsp + 0x4a]>', '<mov~~rax, qword ptr [rsp + 8]>', '<mov~~qword ptr [rsp], rax>', '<mov~~ax, word ptr [rsp + rax*2 + 0x10e]>', '<cmp~~ax, cx>', '<je~~0x40a9b7>']}, {'block_Idx': 20, 'blockInsts': ['<jmp~~0x40a902>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xa0]>', '<mov~~rdi, qword ptr [rsp + 0x100]>', '<mov~~ecx, dword ptr [rsp + 0x9c]>', '<mov~~ecx, ecx>', '<add~~rdi, 0x2ae12>', '<shl~~rcx, 1>', '<add~~rdi, rcx>', '<add~~rdi, 2>', '<lea~~rsi, [rsp + 0x10e]>', '<add~~rsi, 2>', '<add~~eax, -1>', '<mov~~eax, eax>', '<mov~~edx, eax>', '<shl~~rdx, 1>', '<call~~0x500058>']}], 'cfg_edge_info': [(29, 23), (4, 3), (18, 20), (3, 7), (20, 23), (4, 6), (21, 22), (22, 14), (0, 2), (23, 25), (8, 12), (28, 30), (25, 28), (26, 29), (12, 15), (31, 22), (0, 1), (2, 4), (9, 13), (27, 24), (7, 9), (24, 19), (15, 19), (25, 27), (18, 21), (29, 21), (12, 14), (23, 26), (14, 17), (27, 14), (22, 24), (2, 3), (30, 25), (19, 22), (13, 12), (24, 18), (6, 6), (30, 31), (6, 3), (15, 18), (7, 8)], 'cdg_edge_info': [(18, 23), (29, 23), (4, 6), (0, 2), (23, 25), (0, 14), (0, 17), (7, 13), (12, 15), (0, 1), (0, 7), (2, 4), (27, 24), (24, 19), (7, 9), (15, 19), (25, 27), (18, 21), (29, 21), (25, 30), (0, 3), (23, 29), (0, 12), (30, 25), (24, 18), (6, 6), (30, 31), (15, 18), (7, 8)], 'ddg_edge_info': [(13, 30), (24, 27), (18, 23), (29, 23), (15, 24), (15, 30), (13, 27), (3, 7), (4, 6), (3, 13), (0, 2), (23, 25), (12, 31), (19, 27), (13, 17), (2, 23), (24, 23), (13, 23), (7, 13), (13, 29), (15, 29), (3, 9), (12, 15), (12, 21), (3, 12), (21, 27), (13, 21), (0, 1), (2, 4), (0, 4), (9, 13), (2, 7), (27, 24), (13, 18), (2, 13), (1, 17), (24, 19), (24, 25), (13, 19), (7, 12), (7, 9), (2, 25), (13, 25), (24, 31), (13, 31), (25, 30), (31, 27), (0, 3), (0, 9), (23, 29), (0, 6), (0, 12), (2, 3), (30, 25), (2, 12), (13, 12), (24, 18), (2, 15), (13, 15), (24, 21), (15, 18), (0, 27), (2, 24), (13, 24)]}]}
{'sbr_make_f_tablelim': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 8, 'instruction': 'addl\t$-1, %ecx'}, {'instIndex': 9, 'instruction': 'movl\t%ecx, %ecx'}, {'instIndex': 10, 'instruction': 'movl\t%ecx, %edx'}, {'instIndex': 11, 'instruction': 'leaq\tsbr_make_f_tablelim.bands_warped(%rip), %rcx'}, {'instIndex': 12, 'instruction': 'movss\t(%rcx,%rdx,4), %xmm0            # xmm0 = mem[0],zero,zero,zero'}, {'instIndex': 13, 'instruction': 'movss\t%xmm0, 0xd4(%rsp)                # 4-byte Spill'}, {'instIndex': 14, 'instruction': 'leaq\t0x10e(%rsp), %rcx'}, {'instIndex': 15, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 16, 'instruction': 'addq\t$0x2ae12, %rcx                   # imm = 0x2AE12'}, {'instIndex': 17, 'instruction': 'movq\t%rcx, 0xd8(%rsp)                 # 8-byte Spill'}, {'instIndex': 18, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 19, 'instruction': 'addq\t$0x2ae12, %rcx                   # imm = 0x2AE12'}, {'instIndex': 20, 'instruction': 'addq\t$2, %rcx'}, {'instIndex': 21, 'instruction': 'movq\t%rcx, 0xe0(%rsp)                 # 8-byte Spill'}, {'instIndex': 22, 'instruction': 'movl\t0x44(%rax), %ecx'}, {'instIndex': 24, 'instruction': 'movw\t%cx, 0x10e(%rsp)'}]}]}
The analysis of 13 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/patch_info.txt
{'1': {'before': 'a/libavresample/utils.c', 'after': 'b/libavresample/utils.c'}}
{'1': [{'before': '-36,6', 'after': '+36,11', 'function': 'int avresample_open'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310---b/libavresample/utils.c
The case of compiler gcc with optimization no.
Patched source code file: utils.c
Patched function: 1---int avresample_open 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/gcc_after/no/utils_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/gcc_after/no/utils_gcc.s---avresample_open---after
function id: 24
function flag: True
There are 575 instructions for function: avresample_open in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '36', 'end': 46}, 'before': {'start': '36', 'end': 41}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'endbr64'}, {'instIndex': 1, 'instruction': 'pushq\t%rbx'}, {'instIndex': 2, 'instruction': 'subq\t$0x30, %rsp'}, {'instIndex': 3, 'instruction': 'movq\t%rdi, 8(%rsp)'}, {'instIndex': 4, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 5, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 6, 'instruction': 'call\tavresample_is_open@PLT'}, {'instIndex': 7, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 8, 'instruction': 'je\t.L2'}, {'instIndex': 9, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 10, 'instruction': 'leaq\t.LC0(%rip), %rdx'}, {'instIndex': 11, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 12, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 13, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 14, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 15, 'instruction': 'movl\t$-0x16, %eax'}, {'instIndex': 16, 'instruction': 'jmp\t.L3'}, {'instIndex': 17, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 18, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 19, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 20, 'instruction': 'call\tav_get_channel_layout_nb_channels@PLT'}, {'instIndex': 21, 'instruction': 'movq\t8(%rsp), %rdx'}, {'instIndex': 22, 'instruction': 'movl\t%eax, 0x74(%rdx)'}, {'instIndex': 23, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 24, 'instruction': 'movl\t0x74(%rax), %eax'}, {'instIndex': 25, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 26, 'instruction': 'jle\t.L4'}, {'instIndex': 27, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 28, 'instruction': 'movl\t0x74(%rax), %eax'}, {'instIndex': 29, 'instruction': 'cmpl\t$0x20, %eax'}, {'instIndex': 30, 'instruction': 'jle\t.L5'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/gcc_after/no/utils.o
Binary file does not exist.
{'avresample_open': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'endbr64'}, {'instIndex': 1, 'instruction': 'pushq\t%rbx'}, {'instIndex': 2, 'instruction': 'subq\t$0x30, %rsp'}, {'instIndex': 3, 'instruction': 'movq\t%rdi, 8(%rsp)'}, {'instIndex': 4, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 5, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 6, 'instruction': 'call\tavresample_is_open@PLT'}, {'instIndex': 7, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 8, 'instruction': 'je\t.L2'}, {'instIndex': 9, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 10, 'instruction': 'leaq\t.LC0(%rip), %rdx'}, {'instIndex': 11, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 12, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 13, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 14, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 15, 'instruction': 'movl\t$-0x16, %eax'}, {'instIndex': 16, 'instruction': 'jmp\t.L3'}, {'instIndex': 17, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 18, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 19, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 20, 'instruction': 'call\tav_get_channel_layout_nb_channels@PLT'}, {'instIndex': 21, 'instruction': 'movq\t8(%rsp), %rdx'}, {'instIndex': 22, 'instruction': 'movl\t%eax, 0x74(%rdx)'}, {'instIndex': 23, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 24, 'instruction': 'movl\t0x74(%rax), %eax'}, {'instIndex': 25, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 26, 'instruction': 'jle\t.L4'}, {'instIndex': 27, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 28, 'instruction': 'movl\t0x74(%rax), %eax'}, {'instIndex': 29, 'instruction': 'cmpl\t$0x20, %eax'}, {'instIndex': 30, 'instruction': 'jle\t.L5'}]}]}
The case of compiler gcc with optimization O0.
Patched source code file: utils.c
Patched function: 1---int avresample_open 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/gcc_after/O0/utils_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/gcc_after/O0/utils_gcc.s---avresample_open---after
function id: 24
function flag: True
There are 575 instructions for function: avresample_open in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '36', 'end': 46}, 'before': {'start': '36', 'end': 41}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'endbr64'}, {'instIndex': 1, 'instruction': 'pushq\t%rbx'}, {'instIndex': 2, 'instruction': 'subq\t$0x30, %rsp'}, {'instIndex': 3, 'instruction': 'movq\t%rdi, 8(%rsp)'}, {'instIndex': 4, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 5, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 6, 'instruction': 'call\tavresample_is_open@PLT'}, {'instIndex': 7, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 8, 'instruction': 'je\t.L2'}, {'instIndex': 9, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 10, 'instruction': 'leaq\t.LC0(%rip), %rdx'}, {'instIndex': 11, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 12, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 13, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 14, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 15, 'instruction': 'movl\t$-0x16, %eax'}, {'instIndex': 16, 'instruction': 'jmp\t.L3'}, {'instIndex': 17, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 18, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 19, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 20, 'instruction': 'call\tav_get_channel_layout_nb_channels@PLT'}, {'instIndex': 21, 'instruction': 'movq\t8(%rsp), %rdx'}, {'instIndex': 22, 'instruction': 'movl\t%eax, 0x74(%rdx)'}, {'instIndex': 23, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 24, 'instruction': 'movl\t0x74(%rax), %eax'}, {'instIndex': 25, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 26, 'instruction': 'jle\t.L4'}, {'instIndex': 27, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 28, 'instruction': 'movl\t0x74(%rax), %eax'}, {'instIndex': 29, 'instruction': 'cmpl\t$0x20, %eax'}, {'instIndex': 30, 'instruction': 'jle\t.L5'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/gcc_after/O0/utils.o
Binary file does not exist.
{'avresample_open': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'endbr64'}, {'instIndex': 1, 'instruction': 'pushq\t%rbx'}, {'instIndex': 2, 'instruction': 'subq\t$0x30, %rsp'}, {'instIndex': 3, 'instruction': 'movq\t%rdi, 8(%rsp)'}, {'instIndex': 4, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 5, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 6, 'instruction': 'call\tavresample_is_open@PLT'}, {'instIndex': 7, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 8, 'instruction': 'je\t.L2'}, {'instIndex': 9, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 10, 'instruction': 'leaq\t.LC0(%rip), %rdx'}, {'instIndex': 11, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 12, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 13, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 14, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 15, 'instruction': 'movl\t$-0x16, %eax'}, {'instIndex': 16, 'instruction': 'jmp\t.L3'}, {'instIndex': 17, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 18, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 19, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 20, 'instruction': 'call\tav_get_channel_layout_nb_channels@PLT'}, {'instIndex': 21, 'instruction': 'movq\t8(%rsp), %rdx'}, {'instIndex': 22, 'instruction': 'movl\t%eax, 0x74(%rdx)'}, {'instIndex': 23, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 24, 'instruction': 'movl\t0x74(%rax), %eax'}, {'instIndex': 25, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 26, 'instruction': 'jle\t.L4'}, {'instIndex': 27, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 28, 'instruction': 'movl\t0x74(%rax), %eax'}, {'instIndex': 29, 'instruction': 'cmpl\t$0x20, %eax'}, {'instIndex': 30, 'instruction': 'jle\t.L5'}]}]}
The case of compiler gcc with optimization O1.
Patched source code file: utils.c
Patched function: 1---int avresample_open 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/gcc_after/O1/utils_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/gcc_after/O1/utils_gcc.s---avresample_open---after
function id: 13
function flag: True
There are 1000 instructions for function: avresample_open in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '36', 'end': 46}, 'before': {'start': '36', 'end': 41}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'endbr64'}, {'instIndex': 1, 'instruction': 'pushq\t%r14'}, {'instIndex': 2, 'instruction': 'pushq\t%r13'}, {'instIndex': 3, 'instruction': 'pushq\t%r12'}, {'instIndex': 4, 'instruction': 'pushq\t%rbp'}, {'instIndex': 5, 'instruction': 'pushq\t%rbx'}, {'instIndex': 6, 'instruction': 'movq\t%rdi, %rbx'}, {'instIndex': 7, 'instruction': 'call\tavresample_is_open@PLT'}, {'instIndex': 8, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 9, 'instruction': 'jne\t.L73'}, {'instIndex': 10, 'instruction': 'movl\t%eax, %ebp'}, {'instIndex': 11, 'instruction': 'movq\t8(%rbx), %rdi'}, {'instIndex': 12, 'instruction': 'call\tav_get_channel_layout_nb_channels@PLT'}, {'instIndex': 13, 'instruction': 'movl\t%eax, 0x74(%rbx)'}, {'instIndex': 14, 'instruction': 'subl\t$1, %eax'}, {'instIndex': 15, 'instruction': 'cmpl\t$0x1f, %eax'}, {'instIndex': 16, 'instruction': 'ja\t.L74'}, {'instIndex': 79, 'instruction': 'leaq\t.LC0(%rip), %rdx'}, {'instIndex': 80, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 81, 'instruction': 'movq\t%rbx, %rdi'}, {'instIndex': 82, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 83, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 84, 'instruction': 'movl\t$-0x16, %r12d'}, {'instIndex': 85, 'instruction': 'jmp\t.L4'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/gcc_after/O1/utils.o
Binary file does not exist.
{'avresample_open': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'endbr64'}, {'instIndex': 1, 'instruction': 'pushq\t%r14'}, {'instIndex': 2, 'instruction': 'pushq\t%r13'}, {'instIndex': 3, 'instruction': 'pushq\t%r12'}, {'instIndex': 4, 'instruction': 'pushq\t%rbp'}, {'instIndex': 5, 'instruction': 'pushq\t%rbx'}, {'instIndex': 6, 'instruction': 'movq\t%rdi, %rbx'}, {'instIndex': 7, 'instruction': 'call\tavresample_is_open@PLT'}, {'instIndex': 8, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 9, 'instruction': 'jne\t.L73'}, {'instIndex': 10, 'instruction': 'movl\t%eax, %ebp'}, {'instIndex': 11, 'instruction': 'movq\t8(%rbx), %rdi'}, {'instIndex': 12, 'instruction': 'call\tav_get_channel_layout_nb_channels@PLT'}, {'instIndex': 13, 'instruction': 'movl\t%eax, 0x74(%rbx)'}, {'instIndex': 14, 'instruction': 'subl\t$1, %eax'}, {'instIndex': 15, 'instruction': 'cmpl\t$0x1f, %eax'}, {'instIndex': 16, 'instruction': 'ja\t.L74'}, {'instIndex': 79, 'instruction': 'leaq\t.LC0(%rip), %rdx'}, {'instIndex': 80, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 81, 'instruction': 'movq\t%rbx, %rdi'}, {'instIndex': 82, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 83, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 84, 'instruction': 'movl\t$-0x16, %r12d'}, {'instIndex': 85, 'instruction': 'jmp\t.L4'}]}]}
The case of compiler gcc with optimization O2.
Patched source code file: utils.c
Patched function: 1---int avresample_open 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/gcc_after/O2/utils_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/gcc_after/O2/utils_gcc.s---avresample_open---after
function id: 13
function flag: True
There are 990 instructions for function: avresample_open in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '36', 'end': 46}, 'before': {'start': '36', 'end': 41}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'endbr64'}, {'instIndex': 1, 'instruction': 'pushq\t%r14'}, {'instIndex': 2, 'instruction': 'pushq\t%r13'}, {'instIndex': 3, 'instruction': 'pushq\t%r12'}, {'instIndex': 4, 'instruction': 'pushq\t%rbp'}, {'instIndex': 5, 'instruction': 'movq\t%rdi, %rbp'}, {'instIndex': 6, 'instruction': 'pushq\t%rbx'}, {'instIndex': 7, 'instruction': 'call\tavresample_is_open@PLT'}, {'instIndex': 8, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 9, 'instruction': 'jne\t.L101'}, {'instIndex': 10, 'instruction': 'movq\t8(%rbp), %rdi'}, {'instIndex': 11, 'instruction': 'movl\t%eax, %r12d'}, {'instIndex': 12, 'instruction': 'call\tav_get_channel_layout_nb_channels@PLT'}, {'instIndex': 13, 'instruction': 'movl\t%eax, 0x74(%rbp)'}, {'instIndex': 14, 'instruction': 'subl\t$1, %eax'}, {'instIndex': 15, 'instruction': 'cmpl\t$0x1f, %eax'}, {'instIndex': 16, 'instruction': 'ja\t.L102'}, {'instIndex': 344, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 345, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 346, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 347, 'instruction': 'movl\t$-0x16, %r12d'}, {'instIndex': 348, 'instruction': 'leaq\t.LC0(%rip), %rdx'}, {'instIndex': 349, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 350, 'instruction': 'jmp\t.L5'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/gcc_after/O2/utils.o
Binary file does not exist.
{'avresample_open': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'endbr64'}, {'instIndex': 1, 'instruction': 'pushq\t%r14'}, {'instIndex': 2, 'instruction': 'pushq\t%r13'}, {'instIndex': 3, 'instruction': 'pushq\t%r12'}, {'instIndex': 4, 'instruction': 'pushq\t%rbp'}, {'instIndex': 5, 'instruction': 'movq\t%rdi, %rbp'}, {'instIndex': 6, 'instruction': 'pushq\t%rbx'}, {'instIndex': 7, 'instruction': 'call\tavresample_is_open@PLT'}, {'instIndex': 8, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 9, 'instruction': 'jne\t.L101'}, {'instIndex': 10, 'instruction': 'movq\t8(%rbp), %rdi'}, {'instIndex': 11, 'instruction': 'movl\t%eax, %r12d'}, {'instIndex': 12, 'instruction': 'call\tav_get_channel_layout_nb_channels@PLT'}, {'instIndex': 13, 'instruction': 'movl\t%eax, 0x74(%rbp)'}, {'instIndex': 14, 'instruction': 'subl\t$1, %eax'}, {'instIndex': 15, 'instruction': 'cmpl\t$0x1f, %eax'}, {'instIndex': 16, 'instruction': 'ja\t.L102'}, {'instIndex': 344, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 345, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 346, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 347, 'instruction': 'movl\t$-0x16, %r12d'}, {'instIndex': 348, 'instruction': 'leaq\t.LC0(%rip), %rdx'}, {'instIndex': 349, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 350, 'instruction': 'jmp\t.L5'}]}]}
The case of compiler gcc with optimization O3.
Patched source code file: utils.c
Patched function: 1---int avresample_open 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/gcc_after/O3/utils_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/gcc_after/O3/utils_gcc.s---avresample_open---after
function id: 13
function flag: True
There are 996 instructions for function: avresample_open in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '36', 'end': 46}, 'before': {'start': '36', 'end': 41}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'endbr64'}, {'instIndex': 1, 'instruction': 'pushq\t%r14'}, {'instIndex': 2, 'instruction': 'pushq\t%r13'}, {'instIndex': 3, 'instruction': 'pushq\t%r12'}, {'instIndex': 4, 'instruction': 'pushq\t%rbp'}, {'instIndex': 5, 'instruction': 'movq\t%rdi, %rbp'}, {'instIndex': 6, 'instruction': 'pushq\t%rbx'}, {'instIndex': 7, 'instruction': 'call\tavresample_is_open@PLT'}, {'instIndex': 8, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 9, 'instruction': 'jne\t.L101'}, {'instIndex': 10, 'instruction': 'movq\t8(%rbp), %rdi'}, {'instIndex': 11, 'instruction': 'movl\t%eax, %r12d'}, {'instIndex': 12, 'instruction': 'call\tav_get_channel_layout_nb_channels@PLT'}, {'instIndex': 13, 'instruction': 'movl\t%eax, 0x74(%rbp)'}, {'instIndex': 14, 'instruction': 'subl\t$1, %eax'}, {'instIndex': 15, 'instruction': 'cmpl\t$0x1f, %eax'}, {'instIndex': 16, 'instruction': 'ja\t.L102'}, {'instIndex': 344, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 345, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 346, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 347, 'instruction': 'movl\t$-0x16, %r12d'}, {'instIndex': 348, 'instruction': 'leaq\t.LC0(%rip), %rdx'}, {'instIndex': 349, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 350, 'instruction': 'jmp\t.L5'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/gcc_after/O3/utils.o
Binary file does not exist.
{'avresample_open': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'endbr64'}, {'instIndex': 1, 'instruction': 'pushq\t%r14'}, {'instIndex': 2, 'instruction': 'pushq\t%r13'}, {'instIndex': 3, 'instruction': 'pushq\t%r12'}, {'instIndex': 4, 'instruction': 'pushq\t%rbp'}, {'instIndex': 5, 'instruction': 'movq\t%rdi, %rbp'}, {'instIndex': 6, 'instruction': 'pushq\t%rbx'}, {'instIndex': 7, 'instruction': 'call\tavresample_is_open@PLT'}, {'instIndex': 8, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 9, 'instruction': 'jne\t.L101'}, {'instIndex': 10, 'instruction': 'movq\t8(%rbp), %rdi'}, {'instIndex': 11, 'instruction': 'movl\t%eax, %r12d'}, {'instIndex': 12, 'instruction': 'call\tav_get_channel_layout_nb_channels@PLT'}, {'instIndex': 13, 'instruction': 'movl\t%eax, 0x74(%rbp)'}, {'instIndex': 14, 'instruction': 'subl\t$1, %eax'}, {'instIndex': 15, 'instruction': 'cmpl\t$0x1f, %eax'}, {'instIndex': 16, 'instruction': 'ja\t.L102'}, {'instIndex': 344, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 345, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 346, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 347, 'instruction': 'movl\t$-0x16, %r12d'}, {'instIndex': 348, 'instruction': 'leaq\t.LC0(%rip), %rdx'}, {'instIndex': 349, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 350, 'instruction': 'jmp\t.L5'}]}]}
The case of compiler gcc with optimization Os.
Patched source code file: utils.c
Patched function: 1---int avresample_open 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/gcc_after/Os/utils_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/gcc_after/Os/utils_gcc.s---avresample_open---after
function id: 13
function flag: True
There are 884 instructions for function: avresample_open in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '36', 'end': 46}, 'before': {'start': '36', 'end': 41}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'endbr64'}, {'instIndex': 1, 'instruction': 'pushq\t%r14'}, {'instIndex': 2, 'instruction': 'pushq\t%r13'}, {'instIndex': 3, 'instruction': 'pushq\t%r12'}, {'instIndex': 4, 'instruction': 'pushq\t%rbp'}, {'instIndex': 5, 'instruction': 'movq\t%rdi, %rbp'}, {'instIndex': 6, 'instruction': 'pushq\t%rbx'}, {'instIndex': 7, 'instruction': 'subq\t$0x10, %rsp'}, {'instIndex': 8, 'instruction': 'call\tavresample_is_open@PLT'}, {'instIndex': 9, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 10, 'instruction': 'je\t.L5'}, {'instIndex': 11, 'instruction': 'leaq\t.LC0(%rip), %rdx'}, {'instIndex': 12, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 13, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 14, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 15, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 16, 'instruction': 'jmp\t.L96'}, {'instIndex': 17, 'instruction': 'movq\t8(%rbp), %rdi'}, {'instIndex': 18, 'instruction': 'movl\t%eax, %r12d'}, {'instIndex': 19, 'instruction': 'call\tav_get_channel_layout_nb_channels@PLT'}, {'instIndex': 20, 'instruction': 'movl\t%eax, 0x74(%rbp)'}, {'instIndex': 21, 'instruction': 'decl\t%eax'}, {'instIndex': 22, 'instruction': 'cmpl\t$0x1f, %eax'}, {'instIndex': 23, 'instruction': 'jbe\t.L7'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/gcc_after/Os/utils.o
Binary file does not exist.
{'avresample_open': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'endbr64'}, {'instIndex': 1, 'instruction': 'pushq\t%r14'}, {'instIndex': 2, 'instruction': 'pushq\t%r13'}, {'instIndex': 3, 'instruction': 'pushq\t%r12'}, {'instIndex': 4, 'instruction': 'pushq\t%rbp'}, {'instIndex': 5, 'instruction': 'movq\t%rdi, %rbp'}, {'instIndex': 6, 'instruction': 'pushq\t%rbx'}, {'instIndex': 7, 'instruction': 'subq\t$0x10, %rsp'}, {'instIndex': 8, 'instruction': 'call\tavresample_is_open@PLT'}, {'instIndex': 9, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 10, 'instruction': 'je\t.L5'}, {'instIndex': 11, 'instruction': 'leaq\t.LC0(%rip), %rdx'}, {'instIndex': 12, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 13, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 14, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 15, 'instruction': 'call\tav_log@PLT'}, {'instIndex': 16, 'instruction': 'jmp\t.L96'}, {'instIndex': 17, 'instruction': 'movq\t8(%rbp), %rdi'}, {'instIndex': 18, 'instruction': 'movl\t%eax, %r12d'}, {'instIndex': 19, 'instruction': 'call\tav_get_channel_layout_nb_channels@PLT'}, {'instIndex': 20, 'instruction': 'movl\t%eax, 0x74(%rbp)'}, {'instIndex': 21, 'instruction': 'decl\t%eax'}, {'instIndex': 22, 'instruction': 'cmpl\t$0x1f, %eax'}, {'instIndex': 23, 'instruction': 'jbe\t.L7'}]}]}
The case of compiler clang with optimization no.
Patched source code file: utils.c
Patched function: 1---int avresample_open 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_after/no/utils.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_after/no/utils.s---avresample_open---after
function id: 0
function flag: True
There are 561 instructions for function: avresample_open in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '36', 'end': 46}, 'before': {'start': '36', 'end': 41}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'subq\t$0x48, %rsp'}, {'instIndex': 1, 'instruction': 'movq\t%rdi, 0x38(%rsp)'}, {'instIndex': 2, 'instruction': 'movq\t0x38(%rsp), %rdi'}, {'instIndex': 3, 'instruction': 'callq\tavresample_is_open@PLT'}, {'instIndex': 4, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 5, 'instruction': 'je\t.LBB0_2'}, {'instIndex': 6, 'instruction': 'movq\t0x38(%rsp), %rdi'}, {'instIndex': 7, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 8, 'instruction': 'leaq\t.L.str(%rip), %rdx'}, {'instIndex': 9, 'instruction': 'movb\t$0, %al'}, {'instIndex': 10, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 11, 'instruction': 'movl\t$-0x16, 0x44(%rsp)'}, {'instIndex': 12, 'instruction': 'jmp\t.LBB0_122'}, {'instIndex': 13, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 14, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 15, 'instruction': 'callq\tav_get_channel_layout_nb_channels@PLT'}, {'instIndex': 16, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 17, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 18, 'instruction': 'movl\t%ecx, 0x74(%rax)'}, {'instIndex': 19, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 20, 'instruction': 'cmpl\t$0, 0x74(%rax)'}, {'instIndex': 21, 'instruction': 'jle\t.LBB0_4'}, {'instIndex': 22, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 23, 'instruction': 'cmpl\t$0x20, 0x74(%rax)'}, {'instIndex': 24, 'instruction': 'jle\t.LBB0_5'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_after/no/utils.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_after/no/utils.o---after
The extraction of function: avresample_open
Analyzing the binaries to generate subCFGs from patched function ...
It has 453 nodes and 749 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 561 instructions in binary file.
[4194304, 4194323, 4194328, 4194352, 4194365, 4194379, 4194400]
The execution time of patched subCFG information extraction via angr: 0:00:00.478043
{'avresample_open': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400030>, <DisassemblerInsn "jmp" for 0x400038>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400013>, <DisassemblerInsn "je" for 0x400016>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400018>, <DisassemblerInsn "mov" for 0x40001d>, <DisassemblerInsn "lea" for 0x400022>, <DisassemblerInsn "mov" for 0x400029>, <DisassemblerInsn "call" for 0x40002b>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400968>, <DisassemblerInsn "add" for 0x40096c>, <DisassemblerInsn "ret" for 0x400970>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40003d>, <DisassemblerInsn "mov" for 0x400042>, <DisassemblerInsn "call" for 0x400046>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40006b>, <DisassemblerInsn "mov" for 0x400070>, <DisassemblerInsn "mov" for 0x400075>, <DisassemblerInsn "mov" for 0x400079>, <DisassemblerInsn "lea" for 0x40007e>, <DisassemblerInsn "mov" for 0x400085>, <DisassemblerInsn "call" for 0x400087>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400060>, <DisassemblerInsn "cmp" for 0x400065>, <DisassemblerInsn "jle" for 0x400069>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400099>, <DisassemblerInsn "mov" for 0x40009e>, <DisassemblerInsn "call" for 0x4000a2>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40004b>, <DisassemblerInsn "mov" for 0x40004d>, <DisassemblerInsn "mov" for 0x400052>, <DisassemblerInsn "mov" for 0x400055>, <DisassemblerInsn "cmp" for 0x40005a>, <DisassemblerInsn "jle" for 0x40005e>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400004>, <DisassemblerInsn "mov" for 0x400009>, <DisassemblerInsn "call" for 0x40000e>]'}], 'cfg_block_detailed_info': [{'block_Idx': 5, 'blockInsts': ['<mov~~dword ptr [rsp + 0x44], 0xffffffea>', '<jmp~~0x400968>']}, {'block_Idx': 1, 'blockInsts': ['<cmp~~eax, 0>', '<je~~0x40003d>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x38]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x1b5f]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x44]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rdi, qword ptr [rax + 8]>', '<call~~0x500008>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x38]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rcx, qword ptr [rax + 8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x1b2c]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x74], 0x20>', '<jle~~0x400099>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rdi, qword ptr [rax + 0x18]>', '<call~~0x500008>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x74], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x74], 0>', '<jle~~0x40006b>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x48>', '<mov~~qword ptr [rsp + 0x38], rdi>', '<mov~~rdi, qword ptr [rsp + 0x38]>', '<call~~0x400980>']}], 'cfg_edge_info': [(0, 1), (2, 4), (1, 2), (5, 8), (7, 10), (4, 6), (7, 6), (1, 3), (4, 7), (3, 5)]}]}
{'avresample_open': [4194304, 4194323, 4194328, 4194352, 4194365, 4194379, 4194400]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_after/no/utils.o---after
The extraction of function: avresample_open
[4194304, 4194323, 4194328, 4194352, 4194365, 4194379, 4194400]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 198 nodes and 311 edges in CFGEmulated.
It has 196 nodes and 460 edges in CDG.
It has 2882 nodes and 3949 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194304, 4194323, 4194328, 4194352, 4194365, 4194379, 4194400]
{4194304, 4195843, 4195336, 4194323, 4195349, 4196374, 4194328, 4195864, 4195354, 4194849, 4196389, 4195367, 4195879, 4194352, 4194865, 4195893, 4196407, 4194365, 4195391, 4195907, 4196421, 4194379, 4195405, 4196435, 4194900, 4195925, 4196447, 4194400, 4195938, 4194914, 4194411, 4195949, 4195442, 4194932, 4194945, 4195462, 4195974, 4194444, 4194962, 4195475, 4194457, 4196507, 4194975, 4196004, 4194471, 4194988, 4196019, 4194998, 4196537, 4194492, 4195007, 4195521, 4196033, 4195013, 4194503, 4196552, 4195022, 4195535, 4195026, 4196566, 4195549, 4196063, 4196576, 4195041, 4194536, 4195055, 4194549, 4195069, 4196093, 4196606, 4195586, 4194567, 4196618, 4195083, 4196108, 4195090, 4194581, 4196632, 4195097, 4196122, 4195104, 4194593, 4196642, 4195111, 4195118, 4196152, 4195641, 4195132, 4196672, 4196682, 4195146, 4196684, 4195661, 4196694, 4196182, 4195160, 4196704, 4195681, 4196197, 4196712, 4194664, 4195176, 4194684, 4196223, 4195199, 4194705, 4195226, 4196253, 4195237, 4195750, 4194730, 4196266, 4195250, 4195764, 4196280, 4195781, 4195271, 4195795, 4195284, 4194786, 4195812, 4195308, 4195826, 4194805, 4196344, 4195322}
[78, 161, 154, 76, 2, 168, 26, 145, 90, 179, 82, 119, 117, 21, 153, 104, 137, 60, 170, 133, 67, 129, 86, 13, 102, 68, 17, 48, 115, 62, 96, 72, 146, 69, 14, 27, 127, 131, 147, 152, 196, 46, 142, 10, 38, 58, 94, 197, 111, 141, 44, 108, 120, 113, 57, 53, 100, 49, 18, 106, 123, 157, 45, 184, 165, 144, 28, 183, 87, 3, 30, 29, 174, 118, 112, 55, 151, 181, 0, 95, 130, 40, 173, 34, 85, 128, 1, 139, 162, 164, 75, 93, 180, 136, 109, 22, 159, 20, 138, 37, 9, 132, 65, 99, 11, 36, 79, 98, 177, 105, 54, 39, 61, 80, 101, 35, 124, 88, 51, 16, 135, 25, 71, 148, 63, 77, 169, 110, 134, 74, 52, 89, 140, 4, 33, 32, 158, 43, 125, 160, 83, 84, 8, 31, 73, 24, 23, 150, 56, 107, 97, 178, 7]
The execution time of patched slicing information extraction via angr: 0:00:37.840148
{'avresample_open': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40057c>, <DisassemblerInsn "mov" for 0x400580>, <DisassemblerInsn "mov" for 0x400584>, <DisassemblerInsn "and" for 0x400588>, <DisassemblerInsn "movzx" for 0x40058a>, <DisassemblerInsn "mov" for 0x40058d>, <DisassemblerInsn "mov" for 0x400592>, <DisassemblerInsn "mov" for 0x400598>, <DisassemblerInsn "cmp" for 0x40059d>, <DisassemblerInsn "je" for 0x4005a4>]'}, {'block_Idx': 161, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400845>, <DisassemblerInsn "mov" for 0x40084a>, <DisassemblerInsn "mov" for 0x40084d>, <DisassemblerInsn "jmp" for 0x400851>]'}, {'block_Idx': 154, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400837>, <DisassemblerInsn "cmp" for 0x40083c>, <DisassemblerInsn "je" for 0x400843>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002ac>, <DisassemblerInsn "mov" for 0x4002ae>, <DisassemblerInsn "cmp" for 0x4002b2>, <DisassemblerInsn "jle" for 0x4002b4>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400013>, <DisassemblerInsn "je" for 0x400016>]'}, {'block_Idx': 168, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40085f>, <DisassemblerInsn "mov" for 0x400864>, <DisassemblerInsn "mov" for 0x400869>, <DisassemblerInsn "mov" for 0x40086c>, <DisassemblerInsn "mov" for 0x400870>, <DisassemblerInsn "mov" for 0x400875>, <DisassemblerInsn "mov" for 0x400878>, <DisassemblerInsn "mov" for 0x40087d>, <DisassemblerInsn "mov" for 0x400881>, <DisassemblerInsn "cmp" for 0x400886>, <DisassemblerInsn "sete" for 0x40088d>, <DisassemblerInsn "and" for 0x400890>, <DisassemblerInsn "movzx" for 0x400892>, <DisassemblerInsn "call" for 0x400896>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400121>, <DisassemblerInsn "mov" for 0x400125>, <DisassemblerInsn "mov" for 0x40012a>, <DisassemblerInsn "mov" for 0x40012d>, <DisassemblerInsn "mov" for 0x400132>, <DisassemblerInsn "mov" for 0x400135>, <DisassemblerInsn "cmp" for 0x40013a>, <DisassemblerInsn "setg" for 0x40013d>, <DisassemblerInsn "and" for 0x400140>, <DisassemblerInsn "movzx" for 0x400142>, <DisassemblerInsn "mov" for 0x400145>, <DisassemblerInsn "mov" for 0x40014a>, <DisassemblerInsn "mov" for 0x400150>, <DisassemblerInsn "mov" for 0x400155>, <DisassemblerInsn "mov" for 0x400158>, <DisassemblerInsn "mov" for 0x40015d>, <DisassemblerInsn "cmp" for 0x40015f>, <DisassemblerInsn "mov" for 0x400162>, <DisassemblerInsn "jg" for 0x400166>]'}, {'block_Idx': 145, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400327>, <DisassemblerInsn "jne" for 0x40032c>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400427>, <DisassemblerInsn "mov" for 0x400429>, <DisassemblerInsn "mov" for 0x40042e>, <DisassemblerInsn "mov" for 0x400431>, <DisassemblerInsn "cmp" for 0x400436>, <DisassemblerInsn "jne" for 0x40043d>]'}, {'block_Idx': 179, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400908>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002c5>, <DisassemblerInsn "call" for 0x4002c9>]'}, {'block_Idx': 119, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40030b>, <DisassemblerInsn "jg" for 0x400310>]'}, {'block_Idx': 117, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400612>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000e8>, <DisassemblerInsn "jmp" for 0x4000f0>]'}, {'block_Idx': 153, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008c8>, <DisassemblerInsn "cmp" for 0x4008cd>, <DisassemblerInsn "je" for 0x4008d4>]'}, {'block_Idx': 104, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40066d>, <DisassemblerInsn "mov" for 0x400670>, <DisassemblerInsn "mov" for 0x400675>, <DisassemblerInsn "xor" for 0x400678>, <DisassemblerInsn "lea" for 0x40067a>, <DisassemblerInsn "call" for 0x400681>]'}, {'block_Idx': 137, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400319>, <DisassemblerInsn "jne" for 0x40031e>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40049f>, <DisassemblerInsn "and" for 0x4004a3>, <DisassemblerInsn "movzx" for 0x4004a5>, <DisassemblerInsn "mov" for 0x4004a8>, <DisassemblerInsn "mov" for 0x4004ad>, <DisassemblerInsn "mov" for 0x4004b3>, <DisassemblerInsn "cmp" for 0x4004b8>, <DisassemblerInsn "jne" for 0x4004bf>]'}, {'block_Idx': 170, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400823>]'}, {'block_Idx': 133, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40070a>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004cf>, <DisassemblerInsn "cmp" for 0x4004d4>, <DisassemblerInsn "je" for 0x4004db>]'}, {'block_Idx': 129, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400366>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400635>, <DisassemblerInsn "cmp" for 0x40063a>, <DisassemblerInsn "je" for 0x400641>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400099>, <DisassemblerInsn "mov" for 0x40009e>, <DisassemblerInsn "call" for 0x4000a2>]'}, {'block_Idx': 102, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006c1>, <DisassemblerInsn "mov" for 0x4006c6>, <DisassemblerInsn "mov" for 0x4006c9>, <DisassemblerInsn "mov" for 0x4006ce>, <DisassemblerInsn "xor" for 0x4006d1>, <DisassemblerInsn "lea" for 0x4006d3>, <DisassemblerInsn "call" for 0x4006da>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400525>, <DisassemblerInsn "xor" for 0x40052a>, <DisassemblerInsn "cmp" for 0x40052c>, <DisassemblerInsn "mov" for 0x400533>, <DisassemblerInsn "jne" for 0x400537>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c7>, <DisassemblerInsn "mov" for 0x4000cc>, <DisassemblerInsn "mov" for 0x4000d1>, <DisassemblerInsn "mov" for 0x4000d5>, <DisassemblerInsn "lea" for 0x4000da>, <DisassemblerInsn "mov" for 0x4000e1>, <DisassemblerInsn "call" for 0x4000e3>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400431>, <DisassemblerInsn "cmp" for 0x400436>, <DisassemblerInsn "jne" for 0x40043d>]'}, {'block_Idx': 115, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400686>, <DisassemblerInsn "mov" for 0x400689>, <DisassemblerInsn "mov" for 0x40068e>, <DisassemblerInsn "mov" for 0x400695>, <DisassemblerInsn "cmp" for 0x40069a>, <DisassemblerInsn "jne" for 0x4006a2>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004c1>, <DisassemblerInsn "cmp" for 0x4004c6>, <DisassemblerInsn "jne" for 0x4004cd>]'}, {'block_Idx': 96, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005e4>, <DisassemblerInsn "cmp" for 0x4005e9>, <DisassemblerInsn "je" for 0x4005f0>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400502>, <DisassemblerInsn "mov" for 0x400507>, <DisassemblerInsn "mov" for 0x40050a>, <DisassemblerInsn "cmp" for 0x40050f>, <DisassemblerInsn "setne" for 0x400512>, <DisassemblerInsn "and" for 0x400515>, <DisassemblerInsn "movzx" for 0x400517>, <DisassemblerInsn "mov" for 0x40051a>, <DisassemblerInsn "mov" for 0x40051f>, <DisassemblerInsn "mov" for 0x400525>, <DisassemblerInsn "xor" for 0x40052a>, <DisassemblerInsn "cmp" for 0x40052c>, <DisassemblerInsn "mov" for 0x400533>, <DisassemblerInsn "jne" for 0x400537>]'}, {'block_Idx': 146, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40034a>, <DisassemblerInsn "mov" for 0x40034f>, <DisassemblerInsn "jmp" for 0x400356>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400415>, <DisassemblerInsn "jne" for 0x400418>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40008c>, <DisassemblerInsn "jmp" for 0x400094>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40017c>, <DisassemblerInsn "mov" for 0x400181>, <DisassemblerInsn "cmp" for 0x400183>, <DisassemblerInsn "mov" for 0x40018b>, <DisassemblerInsn "jne" for 0x40018f>]'}, {'block_Idx': 127, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400312>, <DisassemblerInsn "je" for 0x400317>]'}, {'block_Idx': 131, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400738>, <DisassemblerInsn "mov" for 0x40073b>, <DisassemblerInsn "mov" for 0x400740>, <DisassemblerInsn "mov" for 0x400747>, <DisassemblerInsn "cmp" for 0x40074c>, <DisassemblerInsn "jne" for 0x400754>]'}, {'block_Idx': 147, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400825>, <DisassemblerInsn "cmp" for 0x40082a>, <DisassemblerInsn "je" for 0x400831>]'}, {'block_Idx': 152, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400364>]'}, {'block_Idx': 196, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a44>, <DisassemblerInsn "mov" for 0x400a48>, <DisassemblerInsn "pop" for 0x400a52>, <DisassemblerInsn "ret" for 0x400a53>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003b2>, <DisassemblerInsn "mov" for 0x4003b4>, <DisassemblerInsn "mov" for 0x4003b9>, <DisassemblerInsn "mov" for 0x4003bc>, <DisassemblerInsn "cmp" for 0x4003c1>, <DisassemblerInsn "jne" for 0x4003c5>]'}, {'block_Idx': 142, 'blockInsts': '[<DisassemblerInsn "push" for 0x4009a0>, <DisassemblerInsn "mov" for 0x4009a1>, <DisassemblerInsn "mov" for 0x4009a5>, <DisassemblerInsn "add" for 0x4009a9>, <DisassemblerInsn "call" for 0x4009b0>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400060>, <DisassemblerInsn "cmp" for 0x400065>, <DisassemblerInsn "jle" for 0x400069>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400274>, <DisassemblerInsn "mov" for 0x400279>, <DisassemblerInsn "call" for 0x40027c>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400408>, <DisassemblerInsn "mov" for 0x40040d>, <DisassemblerInsn "call" for 0x400410>]'}, {'block_Idx': 94, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400662>, <DisassemblerInsn "mov" for 0x400667>, <DisassemblerInsn "mov" for 0x40066a>, <DisassemblerInsn "mov" for 0x40066d>, <DisassemblerInsn "mov" for 0x400670>, <DisassemblerInsn "mov" for 0x400675>, <DisassemblerInsn "xor" for 0x400678>, <DisassemblerInsn "lea" for 0x40067a>, <DisassemblerInsn "call" for 0x400681>]'}, {'block_Idx': 197, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400960>, <DisassemblerInsn "mov" for 0x400964>, <DisassemblerInsn "mov" for 0x400968>, <DisassemblerInsn "add" for 0x40096c>, <DisassemblerInsn "ret" for 0x400970>]'}, {'block_Idx': 111, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002d2>, <DisassemblerInsn "mov" for 0x4002d6>, <DisassemblerInsn "cmp" for 0x4002da>, <DisassemblerInsn "jg" for 0x4002df>]'}, {'block_Idx': 141, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400763>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003de>, <DisassemblerInsn "cmp" for 0x4003e3>, <DisassemblerInsn "je" for 0x4003ea>]'}, {'block_Idx': 108, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400627>, <DisassemblerInsn "cmp" for 0x40062c>, <DisassemblerInsn "jne" for 0x400633>]'}, {'block_Idx': 120, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002fd>, <DisassemblerInsn "mov" for 0x400302>, <DisassemblerInsn "jmp" for 0x400309>]'}, {'block_Idx': 113, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40071a>, <DisassemblerInsn "mov" for 0x40071f>, <DisassemblerInsn "mov" for 0x400722>, <DisassemblerInsn "mov" for 0x400727>, <DisassemblerInsn "xor" for 0x40072a>, <DisassemblerInsn "lea" for 0x40072c>, <DisassemblerInsn "call" for 0x400733>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004b3>, <DisassemblerInsn "cmp" for 0x4004b8>, <DisassemblerInsn "jne" for 0x4004bf>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40044d>, <DisassemblerInsn "mov" for 0x400452>, <DisassemblerInsn "mov" for 0x400455>, <DisassemblerInsn "cmp" for 0x40045a>, <DisassemblerInsn "setne" for 0x40045d>, <DisassemblerInsn "and" for 0x400460>, <DisassemblerInsn "movzx" for 0x400462>, <DisassemblerInsn "mov" for 0x400465>, <DisassemblerInsn "mov" for 0x40046a>, <DisassemblerInsn "jmp" for 0x400470>]'}, {'block_Idx': 100, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002bf>, <DisassemblerInsn "jmp" for 0x4002c3>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003ec>, <DisassemblerInsn "cmp" for 0x4003f1>, <DisassemblerInsn "jne" for 0x4003f8>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000bc>, <DisassemblerInsn "cmp" for 0x4000c1>, <DisassemblerInsn "jle" for 0x4000c5>]'}, {'block_Idx': 106, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005f2>, <DisassemblerInsn "mov" for 0x4005f7>, <DisassemblerInsn "jmp" for 0x400601>]'}, {'block_Idx': 123, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006df>, <DisassemblerInsn "mov" for 0x4006e2>, <DisassemblerInsn "mov" for 0x4006e7>, <DisassemblerInsn "mov" for 0x4006ee>, <DisassemblerInsn "cmp" for 0x4006f3>, <DisassemblerInsn "jne" for 0x4006fb>]'}, {'block_Idx': 157, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400356>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400281>, <DisassemblerInsn "mov" for 0x400285>, <DisassemblerInsn "mov" for 0x40028a>, <DisassemblerInsn "call" for 0x40028d>]'}, {'block_Idx': 184, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40094a>]'}, {'block_Idx': 165, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400918>, <DisassemblerInsn "call" for 0x40091d>]'}, {'block_Idx': 144, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40032e>, <DisassemblerInsn "mov" for 0x400333>, <DisassemblerInsn "jmp" for 0x40033a>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001b2>, <DisassemblerInsn "mov" for 0x4001b6>, <DisassemblerInsn "mov" for 0x4001ba>, <DisassemblerInsn "and" for 0x4001be>, <DisassemblerInsn "movzx" for 0x4001c0>, <DisassemblerInsn "mov" for 0x4001c3>, <DisassemblerInsn "mov" for 0x4001c8>, <DisassemblerInsn "mov" for 0x4001ce>, <DisassemblerInsn "mov" for 0x4001d3>, <DisassemblerInsn "cmp" for 0x4001d5>, <DisassemblerInsn "mov" for 0x4001dc>, <DisassemblerInsn "jne" for 0x4001e0>]'}, {'block_Idx': 183, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400940>, <DisassemblerInsn "jmp" for 0x400948>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400643>, <DisassemblerInsn "mov" for 0x400648>, <DisassemblerInsn "mov" for 0x40064b>, <DisassemblerInsn "cmp" for 0x400650>, <DisassemblerInsn "jle" for 0x400653>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40003d>, <DisassemblerInsn "mov" for 0x400042>, <DisassemblerInsn "call" for 0x400046>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001f5>, <DisassemblerInsn "and" for 0x4001f9>, <DisassemblerInsn "movzx" for 0x4001fb>, <DisassemblerInsn "mov" for 0x4001fe>, <DisassemblerInsn "mov" for 0x400203>, <DisassemblerInsn "mov" for 0x400209>, <DisassemblerInsn "mov" for 0x40020e>, <DisassemblerInsn "mov" for 0x400211>, <DisassemblerInsn "mov" for 0x400216>, <DisassemblerInsn "cmp" for 0x400218>, <DisassemblerInsn "mov" for 0x40021b>, <DisassemblerInsn "jne" for 0x40021f>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001e2>, <DisassemblerInsn "cmp" for 0x4001e7>, <DisassemblerInsn "setne" for 0x4001ee>, <DisassemblerInsn "mov" for 0x4001f1>, <DisassemblerInsn "mov" for 0x4001f5>, <DisassemblerInsn "and" for 0x4001f9>, <DisassemblerInsn "movzx" for 0x4001fb>, <DisassemblerInsn "mov" for 0x4001fe>, <DisassemblerInsn "mov" for 0x400203>, <DisassemblerInsn "mov" for 0x400209>, <DisassemblerInsn "mov" for 0x40020e>, <DisassemblerInsn "mov" for 0x400211>, <DisassemblerInsn "mov" for 0x400216>, <DisassemblerInsn "cmp" for 0x400218>, <DisassemblerInsn "mov" for 0x40021b>, <DisassemblerInsn "jne" for 0x40021f>]'}, {'block_Idx': 174, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40089b>, <DisassemblerInsn "mov" for 0x40089e>, <DisassemblerInsn "mov" for 0x4008a3>, <DisassemblerInsn "mov" for 0x4008aa>, <DisassemblerInsn "cmp" for 0x4008af>, <DisassemblerInsn "jne" for 0x4008b7>]'}, {'block_Idx': 118, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400368>, <DisassemblerInsn "mov" for 0x40036d>, <DisassemblerInsn "mov" for 0x400372>, <DisassemblerInsn "mov" for 0x400377>, <DisassemblerInsn "call" for 0x40037a>]'}, {'block_Idx': 112, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400765>, <DisassemblerInsn "mov" for 0x40076a>, <DisassemblerInsn "mov" for 0x40076d>, <DisassemblerInsn "mov" for 0x400772>, <DisassemblerInsn "mov" for 0x400775>, <DisassemblerInsn "call" for 0x40077a>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400292>, <DisassemblerInsn "mov" for 0x400296>, <DisassemblerInsn "call" for 0x40029a>]'}, {'block_Idx': 151, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40033c>, <DisassemblerInsn "mov" for 0x400341>, <DisassemblerInsn "jmp" for 0x400348>]'}, {'block_Idx': 181, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4008c6>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400004>, <DisassemblerInsn "mov" for 0x400009>, <DisassemblerInsn "call" for 0x40000e>]'}, {'block_Idx': 95, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400655>, <DisassemblerInsn "mov" for 0x40065a>, <DisassemblerInsn "mov" for 0x40065d>, <DisassemblerInsn "jmp" for 0x400660>]'}, {'block_Idx': 130, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40077f>, <DisassemblerInsn "mov" for 0x400782>, <DisassemblerInsn "mov" for 0x400787>, <DisassemblerInsn "mov" for 0x40078e>, <DisassemblerInsn "cmp" for 0x400793>, <DisassemblerInsn "jne" for 0x40079b>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003bc>, <DisassemblerInsn "cmp" for 0x4003c1>, <DisassemblerInsn "jne" for 0x4003c5>]'}, {'block_Idx': 173, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008e0>, <DisassemblerInsn "mov" for 0x4008e3>, <DisassemblerInsn "mov" for 0x4008e8>, <DisassemblerInsn "mov" for 0x4008ef>, <DisassemblerInsn "cmp" for 0x4008f4>, <DisassemblerInsn "jne" for 0x4008fc>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400231>, <DisassemblerInsn "and" for 0x400235>, <DisassemblerInsn "movzx" for 0x400237>, <DisassemblerInsn "mov" for 0x40023a>, <DisassemblerInsn "mov" for 0x40023f>, <DisassemblerInsn "mov" for 0x400245>, <DisassemblerInsn "cmp" for 0x40024a>, <DisassemblerInsn "jne" for 0x40024e>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400561>, <DisassemblerInsn "cmp" for 0x400566>, <DisassemblerInsn "setne" for 0x40056d>, <DisassemblerInsn "mov" for 0x400570>, <DisassemblerInsn "mov" for 0x400574>, <DisassemblerInsn "mov" for 0x400578>, <DisassemblerInsn "mov" for 0x40057c>, <DisassemblerInsn "mov" for 0x400580>, <DisassemblerInsn "mov" for 0x400584>, <DisassemblerInsn "and" for 0x400588>, <DisassemblerInsn "movzx" for 0x40058a>, <DisassemblerInsn "mov" for 0x40058d>, <DisassemblerInsn "mov" for 0x400592>, <DisassemblerInsn "mov" for 0x400598>, <DisassemblerInsn "cmp" for 0x40059d>, <DisassemblerInsn "je" for 0x4005a4>]'}, {'block_Idx': 128, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400358>, <DisassemblerInsn "mov" for 0x40035d>, <DisassemblerInsn "jmp" for 0x400364>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400980>, <DisassemblerInsn "mov" for 0x400985>, <DisassemblerInsn "cmp" for 0x40098a>, <DisassemblerInsn "setne" for 0x400992>, <DisassemblerInsn "xor" for 0x400995>, <DisassemblerInsn "xor" for 0x400997>, <DisassemblerInsn "and" for 0x400999>, <DisassemblerInsn "movzx" for 0x40099b>, <DisassemblerInsn "ret" for 0x40099e>]'}, {'block_Idx': 139, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007aa>, <DisassemblerInsn "cmp" for 0x4007af>, <DisassemblerInsn "je" for 0x4007b6>]'}, {'block_Idx': 162, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007f8>, <DisassemblerInsn "mov" for 0x4007fb>, <DisassemblerInsn "mov" for 0x400800>, <DisassemblerInsn "mov" for 0x400807>, <DisassemblerInsn "cmp" for 0x40080c>, <DisassemblerInsn "jne" for 0x400814>]'}, {'block_Idx': 164, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40094c>, <DisassemblerInsn "jmp" for 0x400954>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40041a>, <DisassemblerInsn "mov" for 0x40041f>, <DisassemblerInsn "call" for 0x400422>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006b3>, <DisassemblerInsn "cmp" for 0x4006b8>, <DisassemblerInsn "je" for 0x4006bf>]'}, {'block_Idx': 180, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008b9>, <DisassemblerInsn "jmp" for 0x4008c1>]'}, {'block_Idx': 136, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400320>, <DisassemblerInsn "je" for 0x400325>]'}, {'block_Idx': 109, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002e1>, <DisassemblerInsn "mov" for 0x4002e6>, <DisassemblerInsn "jmp" for 0x4002ed>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400115>, <DisassemblerInsn "mov" for 0x40011a>, <DisassemblerInsn "mov" for 0x40011d>, <DisassemblerInsn "mov" for 0x400121>, <DisassemblerInsn "mov" for 0x400125>, <DisassemblerInsn "mov" for 0x40012a>, <DisassemblerInsn "mov" for 0x40012d>, <DisassemblerInsn "mov" for 0x400132>, <DisassemblerInsn "mov" for 0x400135>, <DisassemblerInsn "cmp" for 0x40013a>, <DisassemblerInsn "setg" for 0x40013d>, <DisassemblerInsn "and" for 0x400140>, <DisassemblerInsn "movzx" for 0x400142>, <DisassemblerInsn "mov" for 0x400145>, <DisassemblerInsn "mov" for 0x40014a>, <DisassemblerInsn "mov" for 0x400150>, <DisassemblerInsn "mov" for 0x400155>, <DisassemblerInsn "mov" for 0x400158>, <DisassemblerInsn "mov" for 0x40015d>, <DisassemblerInsn "cmp" for 0x40015f>, <DisassemblerInsn "mov" for 0x400162>, <DisassemblerInsn "jg" for 0x400166>]'}, {'block_Idx': 159, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008d6>, <DisassemblerInsn "call" for 0x4008db>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000f5>, <DisassemblerInsn "mov" for 0x4000fa>, <DisassemblerInsn "mov" for 0x4000fd>, <DisassemblerInsn "cmp" for 0x400102>, <DisassemblerInsn "jle" for 0x400105>]'}, {'block_Idx': 138, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40079d>, <DisassemblerInsn "jmp" for 0x4007a5>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400262>, <DisassemblerInsn "cmp" for 0x400267>, <DisassemblerInsn "je" for 0x40026e>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40006b>, <DisassemblerInsn "mov" for 0x400070>, <DisassemblerInsn "mov" for 0x400075>, <DisassemblerInsn "mov" for 0x400079>, <DisassemblerInsn "lea" for 0x40007e>, <DisassemblerInsn "mov" for 0x400085>, <DisassemblerInsn "call" for 0x400087>]'}, {'block_Idx': 132, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006fd>, <DisassemblerInsn "jmp" for 0x400705>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40029f>, <DisassemblerInsn "mov" for 0x4002a3>, <DisassemblerInsn "call" for 0x4002a7>]'}, {'block_Idx': 99, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002ce>, <DisassemblerInsn "mov" for 0x4002d2>, <DisassemblerInsn "mov" for 0x4002d6>, <DisassemblerInsn "cmp" for 0x4002da>, <DisassemblerInsn "jg" for 0x4002df>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400968>, <DisassemblerInsn "add" for 0x40096c>, <DisassemblerInsn "ret" for 0x400970>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40039a>, <DisassemblerInsn "cmp" for 0x40039f>, <DisassemblerInsn "jne" for 0x4003a3>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400618>, <DisassemblerInsn "mov" for 0x40061d>, <DisassemblerInsn "mov" for 0x400627>, <DisassemblerInsn "cmp" for 0x40062c>, <DisassemblerInsn "jne" for 0x400633>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400616>]'}, {'block_Idx': 177, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400922>, <DisassemblerInsn "mov" for 0x400925>, <DisassemblerInsn "mov" for 0x40092a>, <DisassemblerInsn "mov" for 0x400931>, <DisassemblerInsn "cmp" for 0x400936>, <DisassemblerInsn "jne" for 0x40093e>]'}, {'block_Idx': 105, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400603>, <DisassemblerInsn "mov" for 0x400608>, <DisassemblerInsn "jmp" for 0x400612>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003fa>, <DisassemblerInsn "cmp" for 0x4003ff>, <DisassemblerInsn "jne" for 0x400406>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003a5>, <DisassemblerInsn "mov" for 0x4003aa>, <DisassemblerInsn "call" for 0x4003ad>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400486>, <DisassemblerInsn "mov" for 0x40048b>, <DisassemblerInsn "call" for 0x40048e>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005a6>, <DisassemblerInsn "cmp" for 0x4005ab>, <DisassemblerInsn "je" for 0x4005b2>]'}, {'block_Idx': 101, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40070c>, <DisassemblerInsn "cmp" for 0x400711>, <DisassemblerInsn "je" for 0x400718>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400254>, <DisassemblerInsn "cmp" for 0x400259>, <DisassemblerInsn "jne" for 0x400260>]'}, {'block_Idx': 124, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006a4>, <DisassemblerInsn "jmp" for 0x4006ac>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005c5>, <DisassemblerInsn "cmp" for 0x4005ca>, <DisassemblerInsn "je" for 0x4005d1>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003d4>, <DisassemblerInsn "mov" for 0x4003d6>, <DisassemblerInsn "mov" for 0x4003db>, <DisassemblerInsn "mov" for 0x4003de>, <DisassemblerInsn "cmp" for 0x4003e3>, <DisassemblerInsn "je" for 0x4003ea>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000a7>, <DisassemblerInsn "mov" for 0x4000a9>, <DisassemblerInsn "mov" for 0x4000ae>, <DisassemblerInsn "mov" for 0x4000b1>, <DisassemblerInsn "cmp" for 0x4000b6>, <DisassemblerInsn "jle" for 0x4000ba>]'}, {'block_Idx': 135, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40037f>, <DisassemblerInsn "mov" for 0x400384>, <DisassemblerInsn "mov" for 0x400387>, <DisassemblerInsn "lea" for 0x40038c>, <DisassemblerInsn "mov" for 0x400393>, <DisassemblerInsn "call" for 0x400395>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001ba>, <DisassemblerInsn "and" for 0x4001be>, <DisassemblerInsn "movzx" for 0x4001c0>, <DisassemblerInsn "mov" for 0x4001c3>, <DisassemblerInsn "mov" for 0x4001c8>, <DisassemblerInsn "mov" for 0x4001ce>, <DisassemblerInsn "mov" for 0x4001d3>, <DisassemblerInsn "cmp" for 0x4001d5>, <DisassemblerInsn "mov" for 0x4001dc>, <DisassemblerInsn "jne" for 0x4001e0>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400493>, <DisassemblerInsn "setne" for 0x400496>, <DisassemblerInsn "xor" for 0x400499>, <DisassemblerInsn "mov" for 0x40049b>, <DisassemblerInsn "mov" for 0x40049f>, <DisassemblerInsn "and" for 0x4004a3>, <DisassemblerInsn "movzx" for 0x4004a5>, <DisassemblerInsn "mov" for 0x4004a8>, <DisassemblerInsn "mov" for 0x4004ad>, <DisassemblerInsn "mov" for 0x4004b3>, <DisassemblerInsn "cmp" for 0x4004b8>, <DisassemblerInsn "jne" for 0x4004bf>]'}, {'block_Idx': 148, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007b8>, <DisassemblerInsn "mov" for 0x4007bd>, <DisassemblerInsn "mov" for 0x4007c2>, <DisassemblerInsn "mov" for 0x4007c5>, <DisassemblerInsn "mov" for 0x4007ca>, <DisassemblerInsn "mov" for 0x4007cd>, <DisassemblerInsn "mov" for 0x4007d2>, <DisassemblerInsn "mov" for 0x4007d5>, <DisassemblerInsn "mov" for 0x4007da>, <DisassemblerInsn "mov" for 0x4007de>, <DisassemblerInsn "cmp" for 0x4007e3>, <DisassemblerInsn "sete" for 0x4007ea>, <DisassemblerInsn "and" for 0x4007ed>, <DisassemblerInsn "movzx" for 0x4007ef>, <DisassemblerInsn "call" for 0x4007f3>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004dd>, <DisassemblerInsn "mov" for 0x4004e2>, <DisassemblerInsn "mov" for 0x4004e5>, <DisassemblerInsn "cmp" for 0x4004ea>, <DisassemblerInsn "setne" for 0x4004ed>, <DisassemblerInsn "and" for 0x4004f0>, <DisassemblerInsn "movzx" for 0x4004f2>, <DisassemblerInsn "mov" for 0x4004f5>, <DisassemblerInsn "mov" for 0x4004fa>, <DisassemblerInsn "jmp" for 0x400500>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40054d>, <DisassemblerInsn "xor" for 0x400552>, <DisassemblerInsn "cmp" for 0x400554>, <DisassemblerInsn "mov" for 0x40055b>, <DisassemblerInsn "je" for 0x40055f>]'}, {'block_Idx': 169, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400816>, <DisassemblerInsn "jmp" for 0x40081e>]'}, {'block_Idx': 110, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002ef>, <DisassemblerInsn "cmp" for 0x4002f4>, <DisassemblerInsn "je" for 0x4002fb>]'}, {'block_Idx': 134, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400956>, <DisassemblerInsn "call" for 0x40095b>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400584>, <DisassemblerInsn "and" for 0x400588>, <DisassemblerInsn "movzx" for 0x40058a>, <DisassemblerInsn "mov" for 0x40058d>, <DisassemblerInsn "mov" for 0x400592>, <DisassemblerInsn "mov" for 0x400598>, <DisassemblerInsn "cmp" for 0x40059d>, <DisassemblerInsn "je" for 0x4005a4>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40043f>, <DisassemblerInsn "cmp" for 0x400444>, <DisassemblerInsn "je" for 0x40044b>]'}, {'block_Idx': 89, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005b4>, <DisassemblerInsn "mov" for 0x4005b9>, <DisassemblerInsn "jmp" for 0x4005c3>]'}, {'block_Idx': 140, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400756>, <DisassemblerInsn "jmp" for 0x40075e>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400018>, <DisassemblerInsn "mov" for 0x40001d>, <DisassemblerInsn "lea" for 0x400022>, <DisassemblerInsn "mov" for 0x400029>, <DisassemblerInsn "call" for 0x40002b>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400221>, <DisassemblerInsn "cmp" for 0x400226>, <DisassemblerInsn "setne" for 0x40022a>, <DisassemblerInsn "mov" for 0x40022d>, <DisassemblerInsn "mov" for 0x400231>, <DisassemblerInsn "and" for 0x400235>, <DisassemblerInsn "movzx" for 0x400237>, <DisassemblerInsn "mov" for 0x40023a>, <DisassemblerInsn "mov" for 0x40023f>, <DisassemblerInsn "mov" for 0x400245>, <DisassemblerInsn "cmp" for 0x40024a>, <DisassemblerInsn "jne" for 0x40024e>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001aa>, <DisassemblerInsn "mov" for 0x4001ae>, <DisassemblerInsn "mov" for 0x4001b2>, <DisassemblerInsn "mov" for 0x4001b6>, <DisassemblerInsn "mov" for 0x4001ba>, <DisassemblerInsn "and" for 0x4001be>, <DisassemblerInsn "movzx" for 0x4001c0>, <DisassemblerInsn "mov" for 0x4001c3>, <DisassemblerInsn "mov" for 0x4001c8>, <DisassemblerInsn "mov" for 0x4001ce>, <DisassemblerInsn "mov" for 0x4001d3>, <DisassemblerInsn "cmp" for 0x4001d5>, <DisassemblerInsn "mov" for 0x4001dc>, <DisassemblerInsn "jne" for 0x4001e0>]'}, {'block_Idx': 158, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40090a>, <DisassemblerInsn "cmp" for 0x40090f>, <DisassemblerInsn "je" for 0x400916>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003c7>, <DisassemblerInsn "mov" for 0x4003cc>, <DisassemblerInsn "call" for 0x4003cf>]'}, {'block_Idx': 125, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4006b1>]'}, {'block_Idx': 160, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400853>, <DisassemblerInsn "mov" for 0x400858>, <DisassemblerInsn "mov" for 0x40085b>, <DisassemblerInsn "mov" for 0x40085f>, <DisassemblerInsn "mov" for 0x400864>, <DisassemblerInsn "mov" for 0x400869>, <DisassemblerInsn "mov" for 0x40086c>, <DisassemblerInsn "mov" for 0x400870>, <DisassemblerInsn "mov" for 0x400875>, <DisassemblerInsn "mov" for 0x400878>, <DisassemblerInsn "mov" for 0x40087d>, <DisassemblerInsn "mov" for 0x400881>, <DisassemblerInsn "cmp" for 0x400886>, <DisassemblerInsn "sete" for 0x40088d>, <DisassemblerInsn "and" for 0x400890>, <DisassemblerInsn "movzx" for 0x400892>, <DisassemblerInsn "call" for 0x400896>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002b6>, <DisassemblerInsn "call" for 0x4002ba>]'}, {'block_Idx': 84, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400574>, <DisassemblerInsn "mov" for 0x400578>, <DisassemblerInsn "mov" for 0x40057c>, <DisassemblerInsn "mov" for 0x400580>, <DisassemblerInsn "mov" for 0x400584>, <DisassemblerInsn "and" for 0x400588>, <DisassemblerInsn "movzx" for 0x40058a>, <DisassemblerInsn "mov" for 0x40058d>, <DisassemblerInsn "mov" for 0x400592>, <DisassemblerInsn "mov" for 0x400598>, <DisassemblerInsn "cmp" for 0x40059d>, <DisassemblerInsn "je" for 0x4005a4>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400030>, <DisassemblerInsn "jmp" for 0x400038>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400191>, <DisassemblerInsn "mov" for 0x400196>, <DisassemblerInsn "mov" for 0x40019a>, <DisassemblerInsn "cmp" for 0x40019f>, <DisassemblerInsn "setne" for 0x4001a3>, <DisassemblerInsn "mov" for 0x4001a6>, <DisassemblerInsn "mov" for 0x4001aa>, <DisassemblerInsn "mov" for 0x4001ae>, <DisassemblerInsn "mov" for 0x4001b2>, <DisassemblerInsn "mov" for 0x4001b6>, <DisassemblerInsn "mov" for 0x4001ba>, <DisassemblerInsn "and" for 0x4001be>, <DisassemblerInsn "movzx" for 0x4001c0>, <DisassemblerInsn "mov" for 0x4001c3>, <DisassemblerInsn "mov" for 0x4001c8>, <DisassemblerInsn "mov" for 0x4001ce>, <DisassemblerInsn "mov" for 0x4001d3>, <DisassemblerInsn "cmp" for 0x4001d5>, <DisassemblerInsn "mov" for 0x4001dc>, <DisassemblerInsn "jne" for 0x4001e0>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400539>, <DisassemblerInsn "mov" for 0x40053e>, <DisassemblerInsn "cmp" for 0x400540>, <DisassemblerInsn "mov" for 0x400547>, <DisassemblerInsn "jne" for 0x40054b>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400168>, <DisassemblerInsn "xor" for 0x40016d>, <DisassemblerInsn "cmp" for 0x40016f>, <DisassemblerInsn "mov" for 0x400176>, <DisassemblerInsn "jne" for 0x40017a>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400107>, <DisassemblerInsn "mov" for 0x40010c>, <DisassemblerInsn "mov" for 0x40010f>, <DisassemblerInsn "jmp" for 0x400113>]'}, {'block_Idx': 150, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400348>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400472>, <DisassemblerInsn "xor" for 0x400477>, <DisassemblerInsn "cmp" for 0x400479>, <DisassemblerInsn "mov" for 0x400480>, <DisassemblerInsn "je" for 0x400484>]'}, {'block_Idx': 107, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400614>]'}, {'block_Idx': 97, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005d3>, <DisassemblerInsn "mov" for 0x4005d8>, <DisassemblerInsn "jmp" for 0x4005e2>]'}, {'block_Idx': 178, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008fe>, <DisassemblerInsn "jmp" for 0x400906>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40004b>, <DisassemblerInsn "mov" for 0x40004d>, <DisassemblerInsn "mov" for 0x400052>, <DisassemblerInsn "mov" for 0x400055>, <DisassemblerInsn "cmp" for 0x40005a>, <DisassemblerInsn "jle" for 0x40005e>]'}], 'cfg_block_detailed_info': [{'block_Idx': 78, 'blockInsts': ['<mov~~al, byte ptr [rsp + 5]>', '<mov~~byte ptr [rsp + 6], al>', '<mov~~al, byte ptr [rsp + 6]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x98], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0xf0], 0>', '<je~~0x400618>']}, {'block_Idx': 161, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x28]>', '<mov~~dword ptr [rsp + 0x24], eax>', '<jmp~~0x40085f>']}, {'block_Idx': 154, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x90], 0>', '<je~~0x400853>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0x14]>', '<cmp~~eax, ecx>', '<jle~~0x4002c5>']}, {'block_Idx': 2, 'blockInsts': ['<cmp~~eax, 0>', '<je~~0x40003d>']}, {'block_Idx': 168, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x38]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~esi, dword ptr [rax + 0x20]>', '<mov~~edx, dword ptr [rsp + 0x24]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rax + 0x78]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~r8d, dword ptr [rax + 0x24]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0xf4], 4>', '<sete~~al>', '<and~~al, 1>', '<movzx~~r9d, al>', '<call~~0x500040>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x7c], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x74]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<cmp~~eax, dword ptr [rcx + 0x78]>', '<setg~~al>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x80], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rax + 0x78]>', '<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~al, 1>', '<cmp~~ecx, dword ptr [rdx + 0x74]>', '<mov~~byte ptr [rsp + 0x1f], al>', '<jg~~0x4001ba>']}, {'block_Idx': 145, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x2c], 8>', '<jne~~0x40033c>']}, {'block_Idx': 90, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x28], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x8c], 0>', '<jne~~0x40044d>']}, {'block_Idx': 179, 'blockInsts': ['<jmp~~0x40090a>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0x2c]>', '<call~~0x500018>']}, {'block_Idx': 119, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x28], 4>', '<jg~~0x400358>']}, {'block_Idx': 117, 'blockInsts': ['<jmp~~0x400614>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~dword ptr [rsp + 0x44], 0xffffffea>', '<jmp~~0x400968>']}, {'block_Idx': 153, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x8c], 0>', '<je~~0x40090a>']}, {'block_Idx': 104, 'blockInsts': ['<mov~~edi, dword ptr [rsp]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edx, dword ptr [rax + 0x28]>', '<xor~~esi, esi>', '<lea~~rcx, [rip + 0x159b]>', '<call~~0x500030>']}, {'block_Idx': 137, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x2c], 7>', '<jne~~0x40034a>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~al, byte ptr [rsp + 7]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x90], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x8c], 0>', '<jne~~0x4004dd>']}, {'block_Idx': 170, 'blockInsts': ['<jmp~~0x400825>']}, {'block_Idx': 133, 'blockInsts': ['<jmp~~0x40070c>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x90], 0>', '<je~~0x400502>']}, {'block_Idx': 129, 'blockInsts': ['<jmp~~0x400368>']}, {'block_Idx': 86, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x90], 0>', '<je~~0x4006b3>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rdi, qword ptr [rax + 0x18]>', '<call~~0x500008>']}, {'block_Idx': 102, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edi, dword ptr [rax + 0x78]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edx, dword ptr [rax + 0x28]>', '<xor~~esi, esi>', '<lea~~rcx, [rip + 0x154c]>', '<call~~0x500030>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x38]>', '<xor~~eax, eax>', '<cmp~~dword ptr [rcx + 0x90], 0>', '<mov~~byte ptr [rsp + 6], al>', '<jne~~0x400584>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x38]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rcx, qword ptr [rax + 0x18]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x1af3]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x8c], 0>', '<jne~~0x40044d>']}, {'block_Idx': 115, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rax + 0xa0], rcx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~qword ptr [rax + 0xa0], 0>', '<jne~~0x4006b1>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x88], 0>', '<jne~~0x4004dd>']}, {'block_Idx': 96, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x94], 0>', '<je~~0x400603>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<cmp~~eax, dword ptr [rcx + 0x20]>', '<setne~~al>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x94], ecx>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<xor~~eax, eax>', '<cmp~~dword ptr [rcx + 0x90], 0>', '<mov~~byte ptr [rsp + 6], al>', '<jne~~0x400584>']}, {'block_Idx': 146, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x28], 8>', '<jmp~~0x400364>']}, {'block_Idx': 69, 'blockInsts': ['<cmp~~eax, 0>', '<jne~~0x400431>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~dword ptr [rsp + 0x44], 0xffffffea>', '<jmp~~0x400968>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~al, 1>', '<cmp~~qword ptr [rcx + 0xe8], 0>', '<mov~~byte ptr [rsp + 0x1d], al>', '<jne~~0x4001aa>']}, {'block_Idx': 127, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x30], 7>', '<je~~0x400320>']}, {'block_Idx': 131, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rax + 0xb0], rcx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~qword ptr [rax + 0xb0], 0>', '<jne~~0x400763>']}, {'block_Idx': 147, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x94], 0>', '<je~~0x4008c8>']}, {'block_Idx': 152, 'blockInsts': ['<jmp~~0x400366>']}, {'block_Idx': 196, 'blockInsts': ['<mov~~rax, qword ptr [rsp]>', '<mov~~dword ptr [rax + 0xf0], 0>', '<pop~~rax>', '<ret~~>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x10], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x78], 1>', '<jne~~0x4003de>']}, {'block_Idx': 142, 'blockInsts': ['<push~~rax>', '<mov~~qword ptr [rsp], rdi>', '<mov~~rdi, qword ptr [rsp]>', '<add~~rdi, 0xa0>', '<call~~0x500058>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x74], 0x20>', '<jle~~0x400099>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edi, dword ptr [rax + 0x10]>', '<call~~0x500010>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500028>']}, {'block_Idx': 94, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x78]>', '<mov~~dword ptr [rsp], eax>', '<mov~~edi, dword ptr [rsp]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edx, dword ptr [rax + 0x28]>', '<xor~~esi, esi>', '<lea~~rcx, [rip + 0x159b]>', '<call~~0x500030>']}, {'block_Idx': 197, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<mov~~dword ptr [rsp + 0x44], eax>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 111, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 0x28], eax>', '<cmp~~dword ptr [rsp + 0x28], 2>', '<jg~~0x4002ef>']}, {'block_Idx': 141, 'blockInsts': ['<jmp~~0x400765>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0xf0], 0>', '<je~~0x400431>']}, {'block_Idx': 108, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x98], 0>', '<jne~~0x400643>']}, {'block_Idx': 120, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x28], 8>', '<jmp~~0x400366>']}, {'block_Idx': 113, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edi, dword ptr [rax + 0x78]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edx, dword ptr [rax + 0x20]>', '<xor~~esi, esi>', '<lea~~rcx, [rip + 0x1507]>', '<call~~0x500030>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x8c], 0>', '<jne~~0x4004dd>']}, {'block_Idx': 53, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<cmp~~eax, dword ptr [rcx + 0x28]>', '<setne~~al>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x90], ecx>', '<jmp~~0x4004b3>']}, {'block_Idx': 100, 'blockInsts': ['<mov~~dword ptr [rsp + 0x10], eax>', '<jmp~~0x4002d2>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x88], 0>', '<jne~~0x400431>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x78], 0x20>', '<jle~~0x4000f5>']}, {'block_Idx': 106, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0xf4], 4>', '<jmp~~0x400612>']}, {'block_Idx': 123, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~qword ptr [rax + 0xa8], 0>', '<jne~~0x40070a>']}, {'block_Idx': 157, 'blockInsts': ['<jmp~~0x400364>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~dword ptr [rsp + 0x30], eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500010>']}, {'block_Idx': 184, 'blockInsts': ['<jmp~~0x40094c>']}, {'block_Idx': 165, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x38]>', '<call~~0x500050>']}, {'block_Idx': 144, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x28], 9>', '<jmp~~0x400348>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x1e]>', '<mov~~byte ptr [rsp + 0x1f], al>', '<mov~~al, byte ptr [rsp + 0x1f]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x84], ecx>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~al, 1>', '<cmp~~dword ptr [rcx + 0x80], 0>', '<mov~~byte ptr [rsp + 0x1c], al>', '<jne~~0x4001f5>']}, {'block_Idx': 183, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xfffffff4>', '<jmp~~0x400956>']}, {'block_Idx': 87, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x74]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<cmp~~eax, dword ptr [rcx + 0x78]>', '<jle~~0x400662>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rdi, qword ptr [rax + 8]>', '<call~~0x500008>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x1c]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x88], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rax + 0x14]>', '<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~al, 1>', '<cmp~~ecx, dword ptr [rdx + 0x24]>', '<mov~~byte ptr [rsp + 0x1b], al>', '<jne~~0x400231>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x84], 0>', '<setne~~al>', '<mov~~byte ptr [rsp + 0x1c], al>', '<mov~~al, byte ptr [rsp + 0x1c]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x88], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rax + 0x14]>', '<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~al, 1>', '<cmp~~ecx, dword ptr [rdx + 0x24]>', '<mov~~byte ptr [rsp + 0x1b], al>', '<jne~~0x400231>']}, {'block_Idx': 174, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rax + 0xc8], rcx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~qword ptr [rax + 0xc8], 0>', '<jne~~0x4008c6>']}, {'block_Idx': 118, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edi, dword ptr [rax + 0x28]>', '<call~~0x500020>']}, {'block_Idx': 112, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edi, dword ptr [rax + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~esi, dword ptr [rax + 0x78]>', '<mov~~edx, 0x400>', '<call~~0x500038>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2c], eax>', '<mov~~edi, dword ptr [rsp + 0x30]>', '<call~~0x500018>']}, {'block_Idx': 151, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x28], 7>', '<jmp~~0x400356>']}, {'block_Idx': 181, 'blockInsts': ['<jmp~~0x4008c8>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x48>', '<mov~~qword ptr [rsp + 0x38], rdi>', '<mov~~rdi, qword ptr [rsp + 0x38]>', '<call~~0x400980>']}, {'block_Idx': 95, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x74]>', '<mov~~dword ptr [rsp], eax>', '<jmp~~0x40066d>']}, {'block_Idx': 130, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rax + 0xb8], rcx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~qword ptr [rax + 0xb8], 0>', '<jne~~0x4007aa>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x78], 1>', '<jne~~0x4003de>']}, {'block_Idx': 173, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rax + 0xd0], rcx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~qword ptr [rax + 0xd0], 0>', '<jne~~0x400908>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x1b]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x8c], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x28], -1>', '<jne~~0x40039a>']}, {'block_Idx': 85, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x8c], 0>', '<setne~~al>', '<mov~~byte ptr [rsp + 4], al>', '<mov~~al, byte ptr [rsp + 4]>', '<mov~~byte ptr [rsp + 5], al>', '<mov~~al, byte ptr [rsp + 5]>', '<mov~~byte ptr [rsp + 6], al>', '<mov~~al, byte ptr [rsp + 6]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x98], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0xf0], 0>', '<je~~0x400618>']}, {'block_Idx': 128, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x28], 9>', '<jmp~~0x400366>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~qword ptr [rsp - 8], rdi>', '<mov~~rax, qword ptr [rsp - 8]>', '<cmp~~qword ptr [rax + 0xb8], 0>', '<setne~~al>', '<xor~~al, 0xff>', '<xor~~al, 0xff>', '<and~~al, 1>', '<movzx~~eax, al>', '<ret~~>']}, {'block_Idx': 139, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x90], 0>', '<je~~0x400825>']}, {'block_Idx': 162, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rax + 0xc0], rcx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~qword ptr [rax + 0xc0], 0>', '<jne~~0x400823>']}, {'block_Idx': 164, 'blockInsts': ['<mov~~dword ptr [rsp + 0x44], 0>', '<jmp~~0x400968>']}, {'block_Idx': 75, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500010>']}, {'block_Idx': 93, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x8c], 0>', '<je~~0x40070c>']}, {'block_Idx': 180, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xfffffff4>', '<jmp~~0x400956>']}, {'block_Idx': 136, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x30], 8>', '<je~~0x40032e>']}, {'block_Idx': 109, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x28], 6>', '<jmp~~0x400368>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x74]>', '<mov~~dword ptr [rsp + 0x20], eax>', '<mov~~ecx, dword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x7c], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x74]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<cmp~~eax, dword ptr [rcx + 0x78]>', '<setg~~al>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x80], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rax + 0x78]>', '<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~al, 1>', '<cmp~~ecx, dword ptr [rdx + 0x74]>', '<mov~~byte ptr [rsp + 0x1f], al>', '<jg~~0x4001ba>']}, {'block_Idx': 159, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x38]>', '<call~~0x500048>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x74]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<cmp~~eax, dword ptr [rcx + 0x78]>', '<jle~~0x400115>']}, {'block_Idx': 138, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xfffffff4>', '<jmp~~0x400956>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x8c], 0>', '<je~~0x40039a>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x38]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rcx, qword ptr [rax + 8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x1b2c]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 132, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xffffffea>', '<jmp~~0x400956>']}, {'block_Idx': 65, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], eax>', '<mov~~edi, dword ptr [rsp + 0x2c]>', '<call~~0x500018>']}, {'block_Idx': 99, 'blockInsts': ['<mov~~dword ptr [rsp + 0x10], eax>', '<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 0x28], eax>', '<cmp~~dword ptr [rsp + 0x28], 2>', '<jg~~0x4002ef>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x44]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x74], 1>', '<jne~~0x4003bc>']}, {'block_Idx': 79, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0xf4], 0>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x98], 0>', '<jne~~0x400643>']}, {'block_Idx': 98, 'blockInsts': ['<jmp~~0x400627>']}, {'block_Idx': 177, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rax + 0xd8], rcx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~qword ptr [rax + 0xd8], 0>', '<jne~~0x40094a>']}, {'block_Idx': 105, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0xf4], 3>', '<jmp~~0x400614>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x8c], 0>', '<jne~~0x400431>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edi, dword ptr [rax + 0x10]>', '<call~~0x500010>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500028>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x98], 0>', '<je~~0x4005c5>']}, {'block_Idx': 101, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x94], 0>', '<je~~0x400765>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x88], 0>', '<jne~~0x400274>']}, {'block_Idx': 124, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xffffffea>', '<jmp~~0x400956>']}, {'block_Idx': 88, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x90], 0>', '<je~~0x4005e4>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x20], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0xf0], 0>', '<je~~0x400431>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x78], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x78], 0>', '<jle~~0x4000c7>']}, {'block_Idx': 135, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 8]>', '<mov~~rcx, rax>', '<mov~~esi, 0x30>', '<lea~~rdx, [rip + 0x1865]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x1f]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x84], ecx>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~al, 1>', '<cmp~~dword ptr [rcx + 0x80], 0>', '<mov~~byte ptr [rsp + 0x1c], al>', '<jne~~0x4001f5>']}, {'block_Idx': 71, 'blockInsts': ['<cmp~~eax, 0>', '<setne~~al>', '<xor~~al, 0xff>', '<mov~~byte ptr [rsp + 7], al>', '<mov~~al, byte ptr [rsp + 7]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x90], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x8c], 0>', '<jne~~0x4004dd>']}, {'block_Idx': 148, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x38]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~esi, dword ptr [rax + 0x28]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edx, dword ptr [rax + 0x10]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rax + 0x74]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~r8d, dword ptr [rax + 0x14]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0xf4], 2>', '<sete~~al>', '<and~~al, 1>', '<movzx~~r9d, al>', '<call~~0x500040>']}, {'block_Idx': 63, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x28]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<cmp~~eax, dword ptr [rcx + 0x20]>', '<setne~~al>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x94], ecx>', '<jmp~~0x400525>']}, {'block_Idx': 77, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x38]>', '<xor~~eax, eax>', '<cmp~~dword ptr [rcx + 0xf0], 0>', '<mov~~byte ptr [rsp + 4], al>', '<je~~0x400574>']}, {'block_Idx': 169, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xfffffff4>', '<jmp~~0x400956>']}, {'block_Idx': 110, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x88], 0>', '<je~~0x40030b>']}, {'block_Idx': 134, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x38]>', '<call~~0x4009a0>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~al, byte ptr [rsp + 6]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x98], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0xf0], 0>', '<je~~0x400618>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x88], 0>', '<je~~0x400472>']}, {'block_Idx': 89, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0xf4], 1>', '<jmp~~0x400616>']}, {'block_Idx': 140, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xffffffea>', '<jmp~~0x400956>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x38]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x1b5f]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x4c], 0>', '<setne~~al>', '<mov~~byte ptr [rsp + 0x1b], al>', '<mov~~al, byte ptr [rsp + 0x1b]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x8c], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x28], -1>', '<jne~~0x40039a>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x1d]>', '<mov~~byte ptr [rsp + 0x1e], al>', '<mov~~al, byte ptr [rsp + 0x1e]>', '<mov~~byte ptr [rsp + 0x1f], al>', '<mov~~al, byte ptr [rsp + 0x1f]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x84], ecx>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~al, 1>', '<cmp~~dword ptr [rcx + 0x80], 0>', '<mov~~byte ptr [rsp + 0x1c], al>', '<jne~~0x4001f5>']}, {'block_Idx': 158, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x88], 0>', '<je~~0x40094c>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500010>']}, {'block_Idx': 125, 'blockInsts': ['<jmp~~0x4006b3>']}, {'block_Idx': 160, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x10]>', '<mov~~dword ptr [rsp + 0x24], eax>', '<mov~~rdi, qword ptr [rsp + 0x38]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~esi, dword ptr [rax + 0x20]>', '<mov~~edx, dword ptr [rsp + 0x24]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rax + 0x78]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~r8d, dword ptr [rax + 0x24]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0xf4], 4>', '<sete~~al>', '<and~~al, 1>', '<movzx~~r9d, al>', '<call~~0x500040>']}, {'block_Idx': 83, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0x30]>', '<call~~0x500018>']}, {'block_Idx': 84, 'blockInsts': ['<mov~~al, byte ptr [rsp + 4]>', '<mov~~byte ptr [rsp + 5], al>', '<mov~~al, byte ptr [rsp + 5]>', '<mov~~byte ptr [rsp + 6], al>', '<mov~~al, byte ptr [rsp + 6]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x98], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0xf0], 0>', '<je~~0x400618>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~dword ptr [rsp + 0x44], 0xffffffea>', '<jmp~~0x400968>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<cmp~~rax, qword ptr [rcx + 0x18]>', '<setne~~al>', '<mov~~byte ptr [rsp + 0x1d], al>', '<mov~~al, byte ptr [rsp + 0x1d]>', '<mov~~byte ptr [rsp + 0x1e], al>', '<mov~~al, byte ptr [rsp + 0x1e]>', '<mov~~byte ptr [rsp + 0x1f], al>', '<mov~~al, byte ptr [rsp + 0x1f]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x84], ecx>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~al, 1>', '<cmp~~dword ptr [rcx + 0x80], 0>', '<mov~~byte ptr [rsp + 0x1c], al>', '<jne~~0x4001f5>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~al, 1>', '<cmp~~dword ptr [rcx + 0x88], 0>', '<mov~~byte ptr [rsp + 5], al>', '<jne~~0x40057c>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x38]>', '<xor~~eax, eax>', '<cmp~~dword ptr [rcx + 0x80], 0>', '<mov~~byte ptr [rsp + 0x1e], al>', '<jne~~0x4001b2>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x78]>', '<mov~~dword ptr [rsp + 0x20], eax>', '<jmp~~0x400121>']}, {'block_Idx': 150, 'blockInsts': ['<jmp~~0x400356>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x38]>', '<xor~~eax, eax>', '<cmp~~dword ptr [rcx + 0xf0], 0>', '<mov~~byte ptr [rsp + 7], al>', '<je~~0x40049f>']}, {'block_Idx': 107, 'blockInsts': ['<jmp~~0x400616>']}, {'block_Idx': 97, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0xf4], 2>', '<jmp~~0x400614>']}, {'block_Idx': 178, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xfffffff4>', '<jmp~~0x400956>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x74], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x74], 0>', '<jle~~0x40006b>']}], 'cfg_edge_info': [(120, 129), (72, 73), (33, 36), (105, 107), (160, 174), (18, 17), (99, 109), (31, 29), (144, 150), (17, 21), (196, 197), (28, 30), (112, 130), (111, 110), (75, 90), (32, 30), (7, 10), (177, 183), (96, 106), (162, 170), (139, 147), (20, 22), (173, 179), (90, 53), (29, 34), (134, 197), (8, 11), (127, 136), (134, 142), (40, 43), (2, 4), (80, 88), (130, 138), (123, 132), (113, 131), (174, 180), (151, 157), (62, 67), (24, 28), (67, 63), (84, 79), (56, 60), (26, 25), (35, 37), (119, 128), (136, 144), (44, 49), (179, 158), (147, 153), (46, 43), (165, 177), (77, 85), (39, 46), (49, 48), (178, 134), (53, 57), (158, 165), (30, 34), (16, 17), (93, 102), (25, 29), (73, 78), (88, 97), (154, 161), (102, 123), (82, 99), (60, 62), (101, 112), (180, 134), (0, 2), (9, 14), (57, 63), (85, 79), (74, 79), (140, 134), (131, 140), (27, 31), (181, 153), (54, 58), (45, 55), (33, 35), (79, 87), (55, 65), (110, 120), (145, 151), (22, 25), (129, 118), (78, 79), (48, 53), (95, 104), (161, 168), (164, 11), (115, 125), (13, 16), (125, 93), (108, 86), (7, 9), (72, 74), (145, 144), (96, 105), (162, 169), (21, 11), (146, 152), (99, 110), (173, 178), (52, 53), (58, 69), (29, 33), (67, 72), (31, 30), (38, 45), (23, 26), (49, 54), (159, 173), (132, 134), (118, 135), (141, 112), (76, 83), (119, 127), (3, 7), (20, 23), (139, 148), (86, 87), (77, 84), (138, 134), (87, 95), (80, 89), (153, 159), (130, 139), (106, 117), (123, 133), (133, 101), (71, 62), (65, 76), (158, 164), (36, 40), (30, 33), (93, 101), (83, 100), (56, 61), (73, 77), (88, 96), (136, 145), (154, 160), (51, 49), (147, 154), (46, 44), (4, 8), (1, 2), (34, 36), (135, 36), (28, 29), (54, 48), (111, 109), (110, 119), (69, 48), (32, 29), (183, 134), (137, 146), (14, 11), (60, 63), (69, 75), (61, 71), (90, 52), (104, 115), (2, 3), (115, 124), (27, 32), (62, 63), (100, 111), (24, 27), (26, 24), (177, 184), (18, 20), (78, 80), (86, 93), (127, 137), (10, 9), (89, 98), (37, 36), (108, 87), (76, 82), (128, 129), (174, 181), (148, 162), (168, 174), (94, 115), (84, 80), (35, 38), (170, 147), (43, 51), (124, 134), (87, 94), (184, 164), (0, 1), (153, 158), (57, 62), (36, 39), (37, 38), (97, 107), (109, 118), (16, 18), (51, 48), (79, 86), (25, 30), (52, 56), (98, 108), (101, 113), (22, 24), (34, 35), (48, 52), (10, 13), (71, 63), (85, 80), (74, 80), (68, 73), (131, 141), (63, 68), (137, 136), (169, 134)], 'cdg_edge_info': [(115, 197), (72, 73), (18, 17), (158, 177), (99, 109), (93, 123), (31, 29), (79, 115), (2, 11), (131, 134), (111, 110), (32, 30), (7, 10), (36, 46), (177, 183), (96, 106), (127, 118), (20, 22), (139, 147), (119, 144), (90, 53), (29, 34), (174, 153), (2, 4), (173, 197), (162, 197), (80, 88), (35, 65), (130, 138), (123, 132), (174, 180), (62, 67), (67, 63), (136, 135), (18, 21), (119, 128), (35, 37), (147, 153), (37, 65), (46, 43), (76, 111), (154, 168), (77, 85), (69, 90), (123, 134), (86, 115), (35, 76), (158, 165), (30, 34), (7, 14), (93, 102), (16, 17), (88, 97), (56, 71), (154, 161), (136, 36), (20, 26), (101, 112), (37, 76), (85, 79), (130, 197), (131, 140), (27, 31), (54, 58), (33, 35), (79, 87), (110, 120), (173, 158), (145, 151), (139, 162), (131, 197), (177, 164), (35, 135), (153, 173), (108, 86), (7, 9), (115, 134), (16, 21), (145, 144), (96, 105), (54, 69), (76, 99), (162, 169), (174, 134), (177, 11), (99, 110), (173, 178), (52, 53), (29, 33), (37, 135), (31, 30), (67, 72), (35, 55), (49, 54), (18, 11), (7, 11), (76, 83), (119, 127), (37, 55), (119, 136), (20, 23), (139, 148), (115, 93), (86, 87), (46, 51), (87, 95), (80, 89), (153, 159), (130, 139), (87, 104), (136, 118), (2, 8), (71, 62), (101, 130), (158, 164), (123, 197), (30, 33), (93, 101), (56, 61), (88, 96), (73, 77), (136, 145), (137, 144), (154, 160), (51, 49), (147, 154), (85, 115), (177, 134), (131, 112), (158, 11), (10, 14), (111, 109), (110, 119), (32, 29), (85, 108), (137, 146), (123, 101), (69, 75), (18, 36), (90, 52), (127, 135), (130, 134), (2, 3), (115, 124), (27, 32), (10, 16), (62, 63), (24, 27), (26, 24), (177, 184), (174, 197), (18, 20), (35, 45), (86, 93), (35, 118), (127, 137), (10, 9), (173, 134), (162, 134), (127, 36), (76, 82), (37, 45), (37, 118), (76, 100), (35, 38), (87, 94), (153, 158), (10, 11), (2, 7), (131, 130), (36, 39), (37, 38), (85, 87), (16, 18), (79, 86), (52, 56), (177, 197), (22, 24), (101, 113), (34, 35), (147, 174), (10, 13), (85, 80), (101, 131), (71, 63), (162, 147), (137, 136), (16, 11)], 'ddg_edge_info': [(0, 158), (13, 88), (43, 101), (158, 177), (13, 97), (7, 26), (106, 148), (13, 106), (16, 102), (53, 160), (159, 178), (58, 86), (58, 95), (0, 23), (148, 159), (58, 104), (111, 119), (148, 168), (46, 148), (135, 49), (58, 113), (135, 58), (135, 67), (0, 108), (39, 90), (174, 153), (17, 197), (39, 108), (30, 148), (83, 151), (0, 144), (174, 180), (43, 87), (43, 96), (13, 101), (124, 197), (159, 164), (77, 85), (0, 9), (146, 63), (58, 90), (61, 86), (148, 154), (144, 102), (61, 95), (58, 108), (61, 104), (135, 53), (61, 113), (135, 62), (0, 94), (82, 145), (102, 123), (39, 85), (71, 154), (83, 119), (3, 10), (39, 94), (0, 112), (102, 132), (83, 128), (13, 51), (83, 137), (39, 112), (51, 77), (9, 197), (83, 146), (43, 73), (0, 130), (165, 197), (13, 87), (55, 65), (85, 173), (58, 67), (151, 118), (61, 72), (58, 85), (58, 94), (161, 168), (135, 39), (153, 173), (39, 62), (61, 108), (0, 89), (39, 71), (39, 80), (174, 134), (39, 89), (112, 159), (146, 161), (51, 63), (13, 46), (112, 168), (165, 183), (51, 72), (115, 173), (43, 77), (13, 73), (65, 83), (16, 87), (151, 104), (58, 62), (128, 148), (85, 177), (58, 71), (61, 67), (146, 53), (58, 80), (55, 145), (58, 89), (61, 85), (61, 94), (135, 43), (0, 75), (83, 100), (90, 148), (102, 113), (79, 148), (82, 144), (83, 109), (0, 93), (0, 102), (75, 105), (24, 32), (83, 118), (112, 154), (3, 9), (51, 58), (13, 32), (83, 127), (43, 54), (115, 159), (53, 86), (83, 136), (43, 63), (16, 46), (115, 168), (43, 72), (115, 177), (34, 100), (45, 127), (29, 30), (61, 62), (120, 148), (109, 148), (168, 197), (58, 75), (61, 71), (61, 80), (39, 43), (61, 89), (39, 52), (39, 61), (0, 79), (0, 88), (71, 139), (94, 104), (39, 79), (0, 97), (13, 27), (165, 164), (0, 106), (13, 36), (112, 158), (43, 49), (72, 85), (115, 154), (43, 58), (13, 54), (13, 63), (128, 102), (34, 104), (65, 82), (45, 113), (168, 165), (58, 52), (168, 174), (76, 100), (58, 61), (90, 102), (7, 95), (58, 79), (4, 197), (138, 197), (0, 56), (39, 56), (75, 86), (102, 112), (75, 95), (13, 22), (16, 18), (75, 104), (13, 31), (112, 153), (53, 67), (75, 113), (43, 53), (45, 72), (115, 158), (13, 49), (34, 90), (34, 99), (120, 102), (109, 102), (58, 56), (0, 51), (30, 73), (39, 51), (75, 72), (82, 120), (112, 130), (132, 197), (75, 90), (13, 17), (0, 87), (112, 139), (135, 104), (32, 30), (13, 26), (112, 148), (135, 113), (58, 168), (75, 108), (13, 35), (115, 153), (45, 76), (115, 162), (34, 76), (34, 85), (85, 130), (168, 164), (168, 173), (151, 102), (144, 63), (0, 37), (71, 88), (0, 46), (39, 46), (75, 67), (146, 118), (0, 73), (104, 112), (115, 112), (135, 90), (75, 85), (112, 134), (115, 130), (75, 94), (135, 108), (34, 53), (115, 139), (13, 30), (16, 26), (115, 148), (34, 71), (56, 71), (9, 14), (168, 159), (0, 32), (148, 177), (75, 53), (146, 104), (75, 62), (82, 110), (75, 71), (135, 85), (75, 80), (135, 94), (75, 89), (13, 16), (112, 138), (144, 161), (104, 134), (115, 134), (135, 112), (0, 153), (0, 162), (45, 75), (43, 105), (38, 45), (159, 173), (118, 135), (0, 18), (144, 53), (0, 27), (0, 36), (30, 49), (0, 45), (38, 148), (0, 54), (104, 93), (115, 93), (31, 32), (135, 71), (63, 101), (104, 102), (115, 102), (135, 80), (135, 89), (45, 43), (0, 139), (0, 148), (45, 61), (85, 115), (13, 96), (51, 113), (13, 105), (0, 4), (0, 13), (0, 22), (30, 35), (148, 158), (0, 31), (58, 112), (75, 52), (75, 61), (104, 115), (135, 93), (115, 124), (104, 124), (0, 134), (135, 102), (128, 63), (43, 86), (43, 95), (0, 161), (26, 24), (7, 20), (174, 197), (43, 104), (43, 113), (53, 154), (90, 63), (0, 17), (45, 168), (148, 153), (0, 26), (148, 162), (0, 35), (135, 52), (61, 112), (46, 160), (135, 61), (75, 56), (104, 101), (115, 101), (135, 79), (39, 93), (0, 120), (39, 102), (135, 88), (83, 145), (174, 165), (34, 51), (51, 85), (0, 147), (120, 63), (13, 77), (43, 90), (109, 63), (13, 86), (51, 112), (13, 95), (21, 197), (43, 108), (13, 104), (55, 82), (159, 158), (45, 136), (13, 113), (0, 3), (128, 161), (58, 93), (58, 102), (135, 56), (30, 110), (90, 161), (39, 88), (3, 13), (0, 115), (22, 26), (39, 97), (39, 106), (34, 37), (43, 67), (3, 31), (128, 53), (13, 72), (43, 85), (0, 151), (7, 10), (43, 94), (13, 90), (26, 32), (13, 108), (99, 111), (90, 53), (16, 113), (148, 134), (0, 7), (120, 161), (0, 16), (58, 88), (109, 161), (97, 168), (58, 97), (151, 148), (61, 93), (113, 131), (58, 106), (148, 161), (61, 102), (113, 140), (135, 51), (144, 118), (0, 101), (73, 85), (135, 69), (0, 110), (165, 177), (39, 101), (43, 62), (0, 128), (51, 75), (13, 58), (174, 164), (43, 71), (83, 144), (13, 67), (174, 173), (43, 80), (120, 53), (109, 53), (43, 89), (13, 85), (105, 168), (13, 94), (53, 139), (34, 135), (53, 148), (34, 153), (61, 79), (148, 147), (61, 88), (58, 101), (144, 104), (89, 168), (61, 97), (135, 46), (169, 197), (61, 106), (0, 96), (0, 105), (39, 87), (39, 96), (102, 134), (51, 61), (0, 123), (39, 105), (13, 53), (174, 159), (95, 104), (13, 62), (13, 71), (13, 80), (45, 112), (159, 134), (13, 89), (76, 99), (16, 94), (58, 69), (113, 112), (58, 87), (58, 96), (61, 101), (39, 73), (82, 151), (3, 7), (63, 147), (51, 56), (75, 112), (112, 161), (43, 52), (13, 39), (0, 118), (0, 109), (43, 61), (43, 79), (65, 76), (46, 72), (168, 177), (51, 168), (58, 73), (180, 197), (61, 87), (135, 36), (82, 119), (113, 134), (0, 77), (61, 96), (82, 128), (0, 86), (82, 137), (32, 29), (39, 77), (0, 95), (82, 146), (112, 147), (83, 111), (0, 104), (39, 86), (13, 34), (83, 120), (0, 113), (13, 43), (112, 165), (43, 56), (115, 161), (53, 88), (13, 52), (72, 101), (13, 61), (34, 93), (34, 102), (128, 118), (38, 72), (160, 168), (97, 148), (58, 77), (61, 73), (0, 63), (39, 54), (0, 72), (102, 101), (39, 63), (0, 90), (75, 93), (39, 72), (13, 20), (75, 102), (13, 29), (115, 147), (13, 38), (112, 160), (43, 51), (72, 96), (115, 165), (13, 56), (115, 174), (46, 53), (128, 104), (8, 197), (105, 148), (164, 197), (168, 158), (120, 118), (109, 118), (58, 63), (58, 72), (55, 137), (90, 104), (0, 49), (30, 62), (89, 148), (61, 77), (0, 58), (63, 96), (82, 109), (0, 67), (39, 49), (82, 118), (165, 134), (75, 79), (82, 127), (39, 58), (0, 85), (39, 67), (82, 136), (75, 88), (75, 97), (13, 24), (83, 110), (146, 148), (183, 197), (75, 106), (13, 33), (16, 20), (34, 65), (45, 65), (112, 164), (115, 160), (45, 83), (17, 21), (38, 53), (120, 104), (109, 104), (168, 153), (168, 180), (71, 86), (61, 63), (79, 108), (0, 53), (16, 168), (0, 62), (0, 71), (39, 53), (0, 80), (135, 97), (135, 106), (75, 101), (13, 37), (34, 69), (0, 165), (38, 39), (0, 174), (85, 123), (58, 53), (71, 72), (30, 34), (0, 30), (0, 39), (7, 87), (30, 52), (82, 99), (146, 102), (38, 160), (115, 123), (75, 87), (135, 101), (34, 46), (75, 96), (13, 23), (34, 55), (45, 55), (0, 160), (168, 134), (151, 63), (43, 112), (106, 168), (71, 67), (0, 34), (0, 43), (0, 52), (0, 61), (23, 26), (14, 197), (148, 197), (75, 73), (135, 87), (135, 96), (13, 18), (135, 105), (0, 146), (16, 23), (53, 72), (30, 168), (0, 173), (85, 131), (13, 112), (178, 197), (0, 20), (0, 29), (148, 165), (0, 38), (151, 161), (4, 8), (135, 73), (104, 113), (140, 197), (75, 77), (115, 113), (34, 45), (115, 131), (34, 54), (174, 177), (34, 63), (45, 63), (43, 93), (0, 159), (85, 108), (43, 102), (151, 53), (0, 168), (72, 147), (0, 177), (7, 36), (34, 148), (16, 112), (27, 32), (0, 24), (100, 111), (159, 197), (148, 160), (0, 33), (58, 105), (148, 169), (7, 148), (75, 63), (135, 77), (135, 86), (135, 95), (45, 58), (30, 158), (112, 197), (43, 88), (0, 154), (43, 97), (13, 93), (7, 22), (43, 106), (13, 102), (159, 165), (0, 10), (34, 161), (148, 164), (61, 105), (33, 34), (148, 173), (135, 54), (135, 63), (135, 72), (79, 168), (39, 95), (144, 148), (39, 104), (174, 158), (0, 131), (85, 80), (39, 113), (13, 79)]}]}
{'avresample_open': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'subq\t$0x48, %rsp'}, {'instIndex': 1, 'instruction': 'movq\t%rdi, 0x38(%rsp)'}, {'instIndex': 2, 'instruction': 'movq\t0x38(%rsp), %rdi'}, {'instIndex': 3, 'instruction': 'callq\tavresample_is_open@PLT'}, {'instIndex': 4, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 5, 'instruction': 'je\t.LBB0_2'}, {'instIndex': 6, 'instruction': 'movq\t0x38(%rsp), %rdi'}, {'instIndex': 7, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 8, 'instruction': 'leaq\t.L.str(%rip), %rdx'}, {'instIndex': 9, 'instruction': 'movb\t$0, %al'}, {'instIndex': 10, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 11, 'instruction': 'movl\t$-0x16, 0x44(%rsp)'}, {'instIndex': 12, 'instruction': 'jmp\t.LBB0_122'}, {'instIndex': 13, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 14, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 15, 'instruction': 'callq\tav_get_channel_layout_nb_channels@PLT'}, {'instIndex': 16, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 17, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 18, 'instruction': 'movl\t%ecx, 0x74(%rax)'}, {'instIndex': 19, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 20, 'instruction': 'cmpl\t$0, 0x74(%rax)'}, {'instIndex': 21, 'instruction': 'jle\t.LBB0_4'}, {'instIndex': 22, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 23, 'instruction': 'cmpl\t$0x20, 0x74(%rax)'}, {'instIndex': 24, 'instruction': 'jle\t.LBB0_5'}]}]}
The case of compiler clang with optimization O0.
Patched source code file: utils.c
Patched function: 1---int avresample_open 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_after/O0/utils.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_after/O0/utils.s---avresample_open---after
function id: 0
function flag: True
There are 561 instructions for function: avresample_open in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '36', 'end': 46}, 'before': {'start': '36', 'end': 41}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'subq\t$0x48, %rsp'}, {'instIndex': 1, 'instruction': 'movq\t%rdi, 0x38(%rsp)'}, {'instIndex': 2, 'instruction': 'movq\t0x38(%rsp), %rdi'}, {'instIndex': 3, 'instruction': 'callq\tavresample_is_open@PLT'}, {'instIndex': 4, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 5, 'instruction': 'je\t.LBB0_2'}, {'instIndex': 6, 'instruction': 'movq\t0x38(%rsp), %rdi'}, {'instIndex': 7, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 8, 'instruction': 'leaq\t.L.str(%rip), %rdx'}, {'instIndex': 9, 'instruction': 'movb\t$0, %al'}, {'instIndex': 10, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 11, 'instruction': 'movl\t$-0x16, 0x44(%rsp)'}, {'instIndex': 12, 'instruction': 'jmp\t.LBB0_122'}, {'instIndex': 13, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 14, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 15, 'instruction': 'callq\tav_get_channel_layout_nb_channels@PLT'}, {'instIndex': 16, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 17, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 18, 'instruction': 'movl\t%ecx, 0x74(%rax)'}, {'instIndex': 19, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 20, 'instruction': 'cmpl\t$0, 0x74(%rax)'}, {'instIndex': 21, 'instruction': 'jle\t.LBB0_4'}, {'instIndex': 22, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 23, 'instruction': 'cmpl\t$0x20, 0x74(%rax)'}, {'instIndex': 24, 'instruction': 'jle\t.LBB0_5'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_after/O0/utils.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_after/O0/utils.o---after
The extraction of function: avresample_open
Analyzing the binaries to generate subCFGs from patched function ...
It has 453 nodes and 749 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 561 instructions in binary file.
[4194304, 4194323, 4194328, 4194352, 4194365, 4194379, 4194400]
The execution time of patched subCFG information extraction via angr: 0:00:00.670858
{'avresample_open': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400030>, <DisassemblerInsn "jmp" for 0x400038>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400013>, <DisassemblerInsn "je" for 0x400016>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400018>, <DisassemblerInsn "mov" for 0x40001d>, <DisassemblerInsn "lea" for 0x400022>, <DisassemblerInsn "mov" for 0x400029>, <DisassemblerInsn "call" for 0x40002b>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400968>, <DisassemblerInsn "add" for 0x40096c>, <DisassemblerInsn "ret" for 0x400970>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40003d>, <DisassemblerInsn "mov" for 0x400042>, <DisassemblerInsn "call" for 0x400046>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40006b>, <DisassemblerInsn "mov" for 0x400070>, <DisassemblerInsn "mov" for 0x400075>, <DisassemblerInsn "mov" for 0x400079>, <DisassemblerInsn "lea" for 0x40007e>, <DisassemblerInsn "mov" for 0x400085>, <DisassemblerInsn "call" for 0x400087>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400060>, <DisassemblerInsn "cmp" for 0x400065>, <DisassemblerInsn "jle" for 0x400069>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400099>, <DisassemblerInsn "mov" for 0x40009e>, <DisassemblerInsn "call" for 0x4000a2>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40004b>, <DisassemblerInsn "mov" for 0x40004d>, <DisassemblerInsn "mov" for 0x400052>, <DisassemblerInsn "mov" for 0x400055>, <DisassemblerInsn "cmp" for 0x40005a>, <DisassemblerInsn "jle" for 0x40005e>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400004>, <DisassemblerInsn "mov" for 0x400009>, <DisassemblerInsn "call" for 0x40000e>]'}], 'cfg_block_detailed_info': [{'block_Idx': 5, 'blockInsts': ['<mov~~dword ptr [rsp + 0x44], 0xffffffea>', '<jmp~~0x400968>']}, {'block_Idx': 1, 'blockInsts': ['<cmp~~eax, 0>', '<je~~0x40003d>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x38]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x1b5f]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x44]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rdi, qword ptr [rax + 8]>', '<call~~0x500008>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x38]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rcx, qword ptr [rax + 8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x1b2c]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x74], 0x20>', '<jle~~0x400099>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rdi, qword ptr [rax + 0x18]>', '<call~~0x500008>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x74], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x74], 0>', '<jle~~0x40006b>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x48>', '<mov~~qword ptr [rsp + 0x38], rdi>', '<mov~~rdi, qword ptr [rsp + 0x38]>', '<call~~0x400980>']}], 'cfg_edge_info': [(0, 1), (2, 4), (1, 2), (5, 8), (7, 10), (4, 6), (7, 6), (1, 3), (4, 7), (3, 5)]}]}
{'avresample_open': [4194304, 4194323, 4194328, 4194352, 4194365, 4194379, 4194400]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_after/O0/utils.o---after
The extraction of function: avresample_open
[4194304, 4194323, 4194328, 4194352, 4194365, 4194379, 4194400]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 198 nodes and 311 edges in CFGEmulated.
It has 196 nodes and 460 edges in CDG.
It has 2882 nodes and 3949 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194304, 4194323, 4194328, 4194352, 4194365, 4194379, 4194400]
{4194304, 4195843, 4195336, 4194323, 4195349, 4196374, 4194328, 4195864, 4195354, 4194849, 4196389, 4195367, 4195879, 4194352, 4194865, 4195893, 4196407, 4194365, 4195391, 4195907, 4196421, 4194379, 4195405, 4196435, 4194900, 4195925, 4196447, 4194400, 4195938, 4194914, 4194411, 4195949, 4195442, 4194932, 4194945, 4195462, 4195974, 4194444, 4194962, 4195475, 4194457, 4196507, 4194975, 4196004, 4194471, 4194988, 4196019, 4194998, 4196537, 4194492, 4195007, 4195521, 4196033, 4195013, 4194503, 4196552, 4195022, 4195535, 4195026, 4196566, 4195549, 4196063, 4196576, 4195041, 4194536, 4195055, 4194549, 4195069, 4196093, 4196606, 4195586, 4194567, 4196618, 4195083, 4196108, 4195090, 4194581, 4196632, 4195097, 4196122, 4195104, 4194593, 4196642, 4195111, 4195118, 4196152, 4195641, 4195132, 4196672, 4196682, 4195146, 4196684, 4195661, 4196694, 4196182, 4195160, 4196704, 4195681, 4196197, 4196712, 4194664, 4195176, 4194684, 4196223, 4195199, 4194705, 4195226, 4196253, 4195237, 4195750, 4194730, 4196266, 4195250, 4195764, 4196280, 4195781, 4195271, 4195795, 4195284, 4194786, 4195812, 4195308, 4195826, 4194805, 4196344, 4195322}
[78, 161, 154, 76, 2, 168, 26, 145, 90, 179, 82, 119, 117, 21, 153, 104, 137, 60, 170, 133, 67, 129, 86, 13, 102, 68, 17, 48, 115, 62, 96, 72, 146, 69, 14, 27, 127, 131, 147, 152, 196, 46, 142, 10, 38, 58, 94, 197, 111, 141, 44, 108, 120, 113, 57, 53, 100, 49, 18, 106, 123, 157, 45, 184, 165, 144, 28, 183, 87, 3, 30, 29, 174, 118, 112, 55, 151, 181, 0, 95, 130, 40, 173, 34, 85, 128, 1, 139, 162, 164, 75, 93, 180, 136, 109, 22, 159, 20, 138, 37, 9, 132, 65, 99, 11, 36, 79, 98, 177, 105, 54, 39, 61, 80, 101, 35, 124, 88, 51, 16, 135, 25, 71, 148, 63, 77, 169, 110, 134, 74, 52, 89, 140, 4, 33, 32, 158, 43, 125, 160, 83, 84, 8, 31, 73, 24, 23, 150, 56, 107, 97, 178, 7]
The execution time of patched slicing information extraction via angr: 0:00:37.803602
{'avresample_open': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40057c>, <DisassemblerInsn "mov" for 0x400580>, <DisassemblerInsn "mov" for 0x400584>, <DisassemblerInsn "and" for 0x400588>, <DisassemblerInsn "movzx" for 0x40058a>, <DisassemblerInsn "mov" for 0x40058d>, <DisassemblerInsn "mov" for 0x400592>, <DisassemblerInsn "mov" for 0x400598>, <DisassemblerInsn "cmp" for 0x40059d>, <DisassemblerInsn "je" for 0x4005a4>]'}, {'block_Idx': 161, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400845>, <DisassemblerInsn "mov" for 0x40084a>, <DisassemblerInsn "mov" for 0x40084d>, <DisassemblerInsn "jmp" for 0x400851>]'}, {'block_Idx': 154, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400837>, <DisassemblerInsn "cmp" for 0x40083c>, <DisassemblerInsn "je" for 0x400843>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002ac>, <DisassemblerInsn "mov" for 0x4002ae>, <DisassemblerInsn "cmp" for 0x4002b2>, <DisassemblerInsn "jle" for 0x4002b4>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400013>, <DisassemblerInsn "je" for 0x400016>]'}, {'block_Idx': 168, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40085f>, <DisassemblerInsn "mov" for 0x400864>, <DisassemblerInsn "mov" for 0x400869>, <DisassemblerInsn "mov" for 0x40086c>, <DisassemblerInsn "mov" for 0x400870>, <DisassemblerInsn "mov" for 0x400875>, <DisassemblerInsn "mov" for 0x400878>, <DisassemblerInsn "mov" for 0x40087d>, <DisassemblerInsn "mov" for 0x400881>, <DisassemblerInsn "cmp" for 0x400886>, <DisassemblerInsn "sete" for 0x40088d>, <DisassemblerInsn "and" for 0x400890>, <DisassemblerInsn "movzx" for 0x400892>, <DisassemblerInsn "call" for 0x400896>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400121>, <DisassemblerInsn "mov" for 0x400125>, <DisassemblerInsn "mov" for 0x40012a>, <DisassemblerInsn "mov" for 0x40012d>, <DisassemblerInsn "mov" for 0x400132>, <DisassemblerInsn "mov" for 0x400135>, <DisassemblerInsn "cmp" for 0x40013a>, <DisassemblerInsn "setg" for 0x40013d>, <DisassemblerInsn "and" for 0x400140>, <DisassemblerInsn "movzx" for 0x400142>, <DisassemblerInsn "mov" for 0x400145>, <DisassemblerInsn "mov" for 0x40014a>, <DisassemblerInsn "mov" for 0x400150>, <DisassemblerInsn "mov" for 0x400155>, <DisassemblerInsn "mov" for 0x400158>, <DisassemblerInsn "mov" for 0x40015d>, <DisassemblerInsn "cmp" for 0x40015f>, <DisassemblerInsn "mov" for 0x400162>, <DisassemblerInsn "jg" for 0x400166>]'}, {'block_Idx': 145, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400327>, <DisassemblerInsn "jne" for 0x40032c>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400427>, <DisassemblerInsn "mov" for 0x400429>, <DisassemblerInsn "mov" for 0x40042e>, <DisassemblerInsn "mov" for 0x400431>, <DisassemblerInsn "cmp" for 0x400436>, <DisassemblerInsn "jne" for 0x40043d>]'}, {'block_Idx': 179, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400908>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002c5>, <DisassemblerInsn "call" for 0x4002c9>]'}, {'block_Idx': 119, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40030b>, <DisassemblerInsn "jg" for 0x400310>]'}, {'block_Idx': 117, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400612>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000e8>, <DisassemblerInsn "jmp" for 0x4000f0>]'}, {'block_Idx': 153, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008c8>, <DisassemblerInsn "cmp" for 0x4008cd>, <DisassemblerInsn "je" for 0x4008d4>]'}, {'block_Idx': 104, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40066d>, <DisassemblerInsn "mov" for 0x400670>, <DisassemblerInsn "mov" for 0x400675>, <DisassemblerInsn "xor" for 0x400678>, <DisassemblerInsn "lea" for 0x40067a>, <DisassemblerInsn "call" for 0x400681>]'}, {'block_Idx': 137, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400319>, <DisassemblerInsn "jne" for 0x40031e>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40049f>, <DisassemblerInsn "and" for 0x4004a3>, <DisassemblerInsn "movzx" for 0x4004a5>, <DisassemblerInsn "mov" for 0x4004a8>, <DisassemblerInsn "mov" for 0x4004ad>, <DisassemblerInsn "mov" for 0x4004b3>, <DisassemblerInsn "cmp" for 0x4004b8>, <DisassemblerInsn "jne" for 0x4004bf>]'}, {'block_Idx': 170, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400823>]'}, {'block_Idx': 133, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40070a>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004cf>, <DisassemblerInsn "cmp" for 0x4004d4>, <DisassemblerInsn "je" for 0x4004db>]'}, {'block_Idx': 129, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400366>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400635>, <DisassemblerInsn "cmp" for 0x40063a>, <DisassemblerInsn "je" for 0x400641>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400099>, <DisassemblerInsn "mov" for 0x40009e>, <DisassemblerInsn "call" for 0x4000a2>]'}, {'block_Idx': 102, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006c1>, <DisassemblerInsn "mov" for 0x4006c6>, <DisassemblerInsn "mov" for 0x4006c9>, <DisassemblerInsn "mov" for 0x4006ce>, <DisassemblerInsn "xor" for 0x4006d1>, <DisassemblerInsn "lea" for 0x4006d3>, <DisassemblerInsn "call" for 0x4006da>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400525>, <DisassemblerInsn "xor" for 0x40052a>, <DisassemblerInsn "cmp" for 0x40052c>, <DisassemblerInsn "mov" for 0x400533>, <DisassemblerInsn "jne" for 0x400537>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c7>, <DisassemblerInsn "mov" for 0x4000cc>, <DisassemblerInsn "mov" for 0x4000d1>, <DisassemblerInsn "mov" for 0x4000d5>, <DisassemblerInsn "lea" for 0x4000da>, <DisassemblerInsn "mov" for 0x4000e1>, <DisassemblerInsn "call" for 0x4000e3>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400431>, <DisassemblerInsn "cmp" for 0x400436>, <DisassemblerInsn "jne" for 0x40043d>]'}, {'block_Idx': 115, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400686>, <DisassemblerInsn "mov" for 0x400689>, <DisassemblerInsn "mov" for 0x40068e>, <DisassemblerInsn "mov" for 0x400695>, <DisassemblerInsn "cmp" for 0x40069a>, <DisassemblerInsn "jne" for 0x4006a2>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004c1>, <DisassemblerInsn "cmp" for 0x4004c6>, <DisassemblerInsn "jne" for 0x4004cd>]'}, {'block_Idx': 96, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005e4>, <DisassemblerInsn "cmp" for 0x4005e9>, <DisassemblerInsn "je" for 0x4005f0>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400502>, <DisassemblerInsn "mov" for 0x400507>, <DisassemblerInsn "mov" for 0x40050a>, <DisassemblerInsn "cmp" for 0x40050f>, <DisassemblerInsn "setne" for 0x400512>, <DisassemblerInsn "and" for 0x400515>, <DisassemblerInsn "movzx" for 0x400517>, <DisassemblerInsn "mov" for 0x40051a>, <DisassemblerInsn "mov" for 0x40051f>, <DisassemblerInsn "mov" for 0x400525>, <DisassemblerInsn "xor" for 0x40052a>, <DisassemblerInsn "cmp" for 0x40052c>, <DisassemblerInsn "mov" for 0x400533>, <DisassemblerInsn "jne" for 0x400537>]'}, {'block_Idx': 146, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40034a>, <DisassemblerInsn "mov" for 0x40034f>, <DisassemblerInsn "jmp" for 0x400356>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400415>, <DisassemblerInsn "jne" for 0x400418>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40008c>, <DisassemblerInsn "jmp" for 0x400094>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40017c>, <DisassemblerInsn "mov" for 0x400181>, <DisassemblerInsn "cmp" for 0x400183>, <DisassemblerInsn "mov" for 0x40018b>, <DisassemblerInsn "jne" for 0x40018f>]'}, {'block_Idx': 127, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400312>, <DisassemblerInsn "je" for 0x400317>]'}, {'block_Idx': 131, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400738>, <DisassemblerInsn "mov" for 0x40073b>, <DisassemblerInsn "mov" for 0x400740>, <DisassemblerInsn "mov" for 0x400747>, <DisassemblerInsn "cmp" for 0x40074c>, <DisassemblerInsn "jne" for 0x400754>]'}, {'block_Idx': 147, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400825>, <DisassemblerInsn "cmp" for 0x40082a>, <DisassemblerInsn "je" for 0x400831>]'}, {'block_Idx': 152, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400364>]'}, {'block_Idx': 196, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a44>, <DisassemblerInsn "mov" for 0x400a48>, <DisassemblerInsn "pop" for 0x400a52>, <DisassemblerInsn "ret" for 0x400a53>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003b2>, <DisassemblerInsn "mov" for 0x4003b4>, <DisassemblerInsn "mov" for 0x4003b9>, <DisassemblerInsn "mov" for 0x4003bc>, <DisassemblerInsn "cmp" for 0x4003c1>, <DisassemblerInsn "jne" for 0x4003c5>]'}, {'block_Idx': 142, 'blockInsts': '[<DisassemblerInsn "push" for 0x4009a0>, <DisassemblerInsn "mov" for 0x4009a1>, <DisassemblerInsn "mov" for 0x4009a5>, <DisassemblerInsn "add" for 0x4009a9>, <DisassemblerInsn "call" for 0x4009b0>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400060>, <DisassemblerInsn "cmp" for 0x400065>, <DisassemblerInsn "jle" for 0x400069>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400274>, <DisassemblerInsn "mov" for 0x400279>, <DisassemblerInsn "call" for 0x40027c>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400408>, <DisassemblerInsn "mov" for 0x40040d>, <DisassemblerInsn "call" for 0x400410>]'}, {'block_Idx': 94, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400662>, <DisassemblerInsn "mov" for 0x400667>, <DisassemblerInsn "mov" for 0x40066a>, <DisassemblerInsn "mov" for 0x40066d>, <DisassemblerInsn "mov" for 0x400670>, <DisassemblerInsn "mov" for 0x400675>, <DisassemblerInsn "xor" for 0x400678>, <DisassemblerInsn "lea" for 0x40067a>, <DisassemblerInsn "call" for 0x400681>]'}, {'block_Idx': 197, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400960>, <DisassemblerInsn "mov" for 0x400964>, <DisassemblerInsn "mov" for 0x400968>, <DisassemblerInsn "add" for 0x40096c>, <DisassemblerInsn "ret" for 0x400970>]'}, {'block_Idx': 111, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002d2>, <DisassemblerInsn "mov" for 0x4002d6>, <DisassemblerInsn "cmp" for 0x4002da>, <DisassemblerInsn "jg" for 0x4002df>]'}, {'block_Idx': 141, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400763>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003de>, <DisassemblerInsn "cmp" for 0x4003e3>, <DisassemblerInsn "je" for 0x4003ea>]'}, {'block_Idx': 108, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400627>, <DisassemblerInsn "cmp" for 0x40062c>, <DisassemblerInsn "jne" for 0x400633>]'}, {'block_Idx': 120, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002fd>, <DisassemblerInsn "mov" for 0x400302>, <DisassemblerInsn "jmp" for 0x400309>]'}, {'block_Idx': 113, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40071a>, <DisassemblerInsn "mov" for 0x40071f>, <DisassemblerInsn "mov" for 0x400722>, <DisassemblerInsn "mov" for 0x400727>, <DisassemblerInsn "xor" for 0x40072a>, <DisassemblerInsn "lea" for 0x40072c>, <DisassemblerInsn "call" for 0x400733>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004b3>, <DisassemblerInsn "cmp" for 0x4004b8>, <DisassemblerInsn "jne" for 0x4004bf>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40044d>, <DisassemblerInsn "mov" for 0x400452>, <DisassemblerInsn "mov" for 0x400455>, <DisassemblerInsn "cmp" for 0x40045a>, <DisassemblerInsn "setne" for 0x40045d>, <DisassemblerInsn "and" for 0x400460>, <DisassemblerInsn "movzx" for 0x400462>, <DisassemblerInsn "mov" for 0x400465>, <DisassemblerInsn "mov" for 0x40046a>, <DisassemblerInsn "jmp" for 0x400470>]'}, {'block_Idx': 100, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002bf>, <DisassemblerInsn "jmp" for 0x4002c3>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003ec>, <DisassemblerInsn "cmp" for 0x4003f1>, <DisassemblerInsn "jne" for 0x4003f8>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000bc>, <DisassemblerInsn "cmp" for 0x4000c1>, <DisassemblerInsn "jle" for 0x4000c5>]'}, {'block_Idx': 106, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005f2>, <DisassemblerInsn "mov" for 0x4005f7>, <DisassemblerInsn "jmp" for 0x400601>]'}, {'block_Idx': 123, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006df>, <DisassemblerInsn "mov" for 0x4006e2>, <DisassemblerInsn "mov" for 0x4006e7>, <DisassemblerInsn "mov" for 0x4006ee>, <DisassemblerInsn "cmp" for 0x4006f3>, <DisassemblerInsn "jne" for 0x4006fb>]'}, {'block_Idx': 157, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400356>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400281>, <DisassemblerInsn "mov" for 0x400285>, <DisassemblerInsn "mov" for 0x40028a>, <DisassemblerInsn "call" for 0x40028d>]'}, {'block_Idx': 184, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40094a>]'}, {'block_Idx': 165, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400918>, <DisassemblerInsn "call" for 0x40091d>]'}, {'block_Idx': 144, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40032e>, <DisassemblerInsn "mov" for 0x400333>, <DisassemblerInsn "jmp" for 0x40033a>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001b2>, <DisassemblerInsn "mov" for 0x4001b6>, <DisassemblerInsn "mov" for 0x4001ba>, <DisassemblerInsn "and" for 0x4001be>, <DisassemblerInsn "movzx" for 0x4001c0>, <DisassemblerInsn "mov" for 0x4001c3>, <DisassemblerInsn "mov" for 0x4001c8>, <DisassemblerInsn "mov" for 0x4001ce>, <DisassemblerInsn "mov" for 0x4001d3>, <DisassemblerInsn "cmp" for 0x4001d5>, <DisassemblerInsn "mov" for 0x4001dc>, <DisassemblerInsn "jne" for 0x4001e0>]'}, {'block_Idx': 183, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400940>, <DisassemblerInsn "jmp" for 0x400948>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400643>, <DisassemblerInsn "mov" for 0x400648>, <DisassemblerInsn "mov" for 0x40064b>, <DisassemblerInsn "cmp" for 0x400650>, <DisassemblerInsn "jle" for 0x400653>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40003d>, <DisassemblerInsn "mov" for 0x400042>, <DisassemblerInsn "call" for 0x400046>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001f5>, <DisassemblerInsn "and" for 0x4001f9>, <DisassemblerInsn "movzx" for 0x4001fb>, <DisassemblerInsn "mov" for 0x4001fe>, <DisassemblerInsn "mov" for 0x400203>, <DisassemblerInsn "mov" for 0x400209>, <DisassemblerInsn "mov" for 0x40020e>, <DisassemblerInsn "mov" for 0x400211>, <DisassemblerInsn "mov" for 0x400216>, <DisassemblerInsn "cmp" for 0x400218>, <DisassemblerInsn "mov" for 0x40021b>, <DisassemblerInsn "jne" for 0x40021f>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001e2>, <DisassemblerInsn "cmp" for 0x4001e7>, <DisassemblerInsn "setne" for 0x4001ee>, <DisassemblerInsn "mov" for 0x4001f1>, <DisassemblerInsn "mov" for 0x4001f5>, <DisassemblerInsn "and" for 0x4001f9>, <DisassemblerInsn "movzx" for 0x4001fb>, <DisassemblerInsn "mov" for 0x4001fe>, <DisassemblerInsn "mov" for 0x400203>, <DisassemblerInsn "mov" for 0x400209>, <DisassemblerInsn "mov" for 0x40020e>, <DisassemblerInsn "mov" for 0x400211>, <DisassemblerInsn "mov" for 0x400216>, <DisassemblerInsn "cmp" for 0x400218>, <DisassemblerInsn "mov" for 0x40021b>, <DisassemblerInsn "jne" for 0x40021f>]'}, {'block_Idx': 174, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40089b>, <DisassemblerInsn "mov" for 0x40089e>, <DisassemblerInsn "mov" for 0x4008a3>, <DisassemblerInsn "mov" for 0x4008aa>, <DisassemblerInsn "cmp" for 0x4008af>, <DisassemblerInsn "jne" for 0x4008b7>]'}, {'block_Idx': 118, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400368>, <DisassemblerInsn "mov" for 0x40036d>, <DisassemblerInsn "mov" for 0x400372>, <DisassemblerInsn "mov" for 0x400377>, <DisassemblerInsn "call" for 0x40037a>]'}, {'block_Idx': 112, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400765>, <DisassemblerInsn "mov" for 0x40076a>, <DisassemblerInsn "mov" for 0x40076d>, <DisassemblerInsn "mov" for 0x400772>, <DisassemblerInsn "mov" for 0x400775>, <DisassemblerInsn "call" for 0x40077a>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400292>, <DisassemblerInsn "mov" for 0x400296>, <DisassemblerInsn "call" for 0x40029a>]'}, {'block_Idx': 151, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40033c>, <DisassemblerInsn "mov" for 0x400341>, <DisassemblerInsn "jmp" for 0x400348>]'}, {'block_Idx': 181, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4008c6>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400004>, <DisassemblerInsn "mov" for 0x400009>, <DisassemblerInsn "call" for 0x40000e>]'}, {'block_Idx': 95, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400655>, <DisassemblerInsn "mov" for 0x40065a>, <DisassemblerInsn "mov" for 0x40065d>, <DisassemblerInsn "jmp" for 0x400660>]'}, {'block_Idx': 130, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40077f>, <DisassemblerInsn "mov" for 0x400782>, <DisassemblerInsn "mov" for 0x400787>, <DisassemblerInsn "mov" for 0x40078e>, <DisassemblerInsn "cmp" for 0x400793>, <DisassemblerInsn "jne" for 0x40079b>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003bc>, <DisassemblerInsn "cmp" for 0x4003c1>, <DisassemblerInsn "jne" for 0x4003c5>]'}, {'block_Idx': 173, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008e0>, <DisassemblerInsn "mov" for 0x4008e3>, <DisassemblerInsn "mov" for 0x4008e8>, <DisassemblerInsn "mov" for 0x4008ef>, <DisassemblerInsn "cmp" for 0x4008f4>, <DisassemblerInsn "jne" for 0x4008fc>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400231>, <DisassemblerInsn "and" for 0x400235>, <DisassemblerInsn "movzx" for 0x400237>, <DisassemblerInsn "mov" for 0x40023a>, <DisassemblerInsn "mov" for 0x40023f>, <DisassemblerInsn "mov" for 0x400245>, <DisassemblerInsn "cmp" for 0x40024a>, <DisassemblerInsn "jne" for 0x40024e>]'}, {'block_Idx': 85, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400561>, <DisassemblerInsn "cmp" for 0x400566>, <DisassemblerInsn "setne" for 0x40056d>, <DisassemblerInsn "mov" for 0x400570>, <DisassemblerInsn "mov" for 0x400574>, <DisassemblerInsn "mov" for 0x400578>, <DisassemblerInsn "mov" for 0x40057c>, <DisassemblerInsn "mov" for 0x400580>, <DisassemblerInsn "mov" for 0x400584>, <DisassemblerInsn "and" for 0x400588>, <DisassemblerInsn "movzx" for 0x40058a>, <DisassemblerInsn "mov" for 0x40058d>, <DisassemblerInsn "mov" for 0x400592>, <DisassemblerInsn "mov" for 0x400598>, <DisassemblerInsn "cmp" for 0x40059d>, <DisassemblerInsn "je" for 0x4005a4>]'}, {'block_Idx': 128, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400358>, <DisassemblerInsn "mov" for 0x40035d>, <DisassemblerInsn "jmp" for 0x400364>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400980>, <DisassemblerInsn "mov" for 0x400985>, <DisassemblerInsn "cmp" for 0x40098a>, <DisassemblerInsn "setne" for 0x400992>, <DisassemblerInsn "xor" for 0x400995>, <DisassemblerInsn "xor" for 0x400997>, <DisassemblerInsn "and" for 0x400999>, <DisassemblerInsn "movzx" for 0x40099b>, <DisassemblerInsn "ret" for 0x40099e>]'}, {'block_Idx': 139, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007aa>, <DisassemblerInsn "cmp" for 0x4007af>, <DisassemblerInsn "je" for 0x4007b6>]'}, {'block_Idx': 162, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007f8>, <DisassemblerInsn "mov" for 0x4007fb>, <DisassemblerInsn "mov" for 0x400800>, <DisassemblerInsn "mov" for 0x400807>, <DisassemblerInsn "cmp" for 0x40080c>, <DisassemblerInsn "jne" for 0x400814>]'}, {'block_Idx': 164, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40094c>, <DisassemblerInsn "jmp" for 0x400954>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40041a>, <DisassemblerInsn "mov" for 0x40041f>, <DisassemblerInsn "call" for 0x400422>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006b3>, <DisassemblerInsn "cmp" for 0x4006b8>, <DisassemblerInsn "je" for 0x4006bf>]'}, {'block_Idx': 180, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008b9>, <DisassemblerInsn "jmp" for 0x4008c1>]'}, {'block_Idx': 136, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400320>, <DisassemblerInsn "je" for 0x400325>]'}, {'block_Idx': 109, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002e1>, <DisassemblerInsn "mov" for 0x4002e6>, <DisassemblerInsn "jmp" for 0x4002ed>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400115>, <DisassemblerInsn "mov" for 0x40011a>, <DisassemblerInsn "mov" for 0x40011d>, <DisassemblerInsn "mov" for 0x400121>, <DisassemblerInsn "mov" for 0x400125>, <DisassemblerInsn "mov" for 0x40012a>, <DisassemblerInsn "mov" for 0x40012d>, <DisassemblerInsn "mov" for 0x400132>, <DisassemblerInsn "mov" for 0x400135>, <DisassemblerInsn "cmp" for 0x40013a>, <DisassemblerInsn "setg" for 0x40013d>, <DisassemblerInsn "and" for 0x400140>, <DisassemblerInsn "movzx" for 0x400142>, <DisassemblerInsn "mov" for 0x400145>, <DisassemblerInsn "mov" for 0x40014a>, <DisassemblerInsn "mov" for 0x400150>, <DisassemblerInsn "mov" for 0x400155>, <DisassemblerInsn "mov" for 0x400158>, <DisassemblerInsn "mov" for 0x40015d>, <DisassemblerInsn "cmp" for 0x40015f>, <DisassemblerInsn "mov" for 0x400162>, <DisassemblerInsn "jg" for 0x400166>]'}, {'block_Idx': 159, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008d6>, <DisassemblerInsn "call" for 0x4008db>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000f5>, <DisassemblerInsn "mov" for 0x4000fa>, <DisassemblerInsn "mov" for 0x4000fd>, <DisassemblerInsn "cmp" for 0x400102>, <DisassemblerInsn "jle" for 0x400105>]'}, {'block_Idx': 138, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40079d>, <DisassemblerInsn "jmp" for 0x4007a5>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400262>, <DisassemblerInsn "cmp" for 0x400267>, <DisassemblerInsn "je" for 0x40026e>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40006b>, <DisassemblerInsn "mov" for 0x400070>, <DisassemblerInsn "mov" for 0x400075>, <DisassemblerInsn "mov" for 0x400079>, <DisassemblerInsn "lea" for 0x40007e>, <DisassemblerInsn "mov" for 0x400085>, <DisassemblerInsn "call" for 0x400087>]'}, {'block_Idx': 132, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006fd>, <DisassemblerInsn "jmp" for 0x400705>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40029f>, <DisassemblerInsn "mov" for 0x4002a3>, <DisassemblerInsn "call" for 0x4002a7>]'}, {'block_Idx': 99, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002ce>, <DisassemblerInsn "mov" for 0x4002d2>, <DisassemblerInsn "mov" for 0x4002d6>, <DisassemblerInsn "cmp" for 0x4002da>, <DisassemblerInsn "jg" for 0x4002df>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400968>, <DisassemblerInsn "add" for 0x40096c>, <DisassemblerInsn "ret" for 0x400970>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40039a>, <DisassemblerInsn "cmp" for 0x40039f>, <DisassemblerInsn "jne" for 0x4003a3>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400618>, <DisassemblerInsn "mov" for 0x40061d>, <DisassemblerInsn "mov" for 0x400627>, <DisassemblerInsn "cmp" for 0x40062c>, <DisassemblerInsn "jne" for 0x400633>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400616>]'}, {'block_Idx': 177, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400922>, <DisassemblerInsn "mov" for 0x400925>, <DisassemblerInsn "mov" for 0x40092a>, <DisassemblerInsn "mov" for 0x400931>, <DisassemblerInsn "cmp" for 0x400936>, <DisassemblerInsn "jne" for 0x40093e>]'}, {'block_Idx': 105, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400603>, <DisassemblerInsn "mov" for 0x400608>, <DisassemblerInsn "jmp" for 0x400612>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003fa>, <DisassemblerInsn "cmp" for 0x4003ff>, <DisassemblerInsn "jne" for 0x400406>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003a5>, <DisassemblerInsn "mov" for 0x4003aa>, <DisassemblerInsn "call" for 0x4003ad>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400486>, <DisassemblerInsn "mov" for 0x40048b>, <DisassemblerInsn "call" for 0x40048e>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005a6>, <DisassemblerInsn "cmp" for 0x4005ab>, <DisassemblerInsn "je" for 0x4005b2>]'}, {'block_Idx': 101, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40070c>, <DisassemblerInsn "cmp" for 0x400711>, <DisassemblerInsn "je" for 0x400718>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400254>, <DisassemblerInsn "cmp" for 0x400259>, <DisassemblerInsn "jne" for 0x400260>]'}, {'block_Idx': 124, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006a4>, <DisassemblerInsn "jmp" for 0x4006ac>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005c5>, <DisassemblerInsn "cmp" for 0x4005ca>, <DisassemblerInsn "je" for 0x4005d1>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003d4>, <DisassemblerInsn "mov" for 0x4003d6>, <DisassemblerInsn "mov" for 0x4003db>, <DisassemblerInsn "mov" for 0x4003de>, <DisassemblerInsn "cmp" for 0x4003e3>, <DisassemblerInsn "je" for 0x4003ea>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000a7>, <DisassemblerInsn "mov" for 0x4000a9>, <DisassemblerInsn "mov" for 0x4000ae>, <DisassemblerInsn "mov" for 0x4000b1>, <DisassemblerInsn "cmp" for 0x4000b6>, <DisassemblerInsn "jle" for 0x4000ba>]'}, {'block_Idx': 135, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40037f>, <DisassemblerInsn "mov" for 0x400384>, <DisassemblerInsn "mov" for 0x400387>, <DisassemblerInsn "lea" for 0x40038c>, <DisassemblerInsn "mov" for 0x400393>, <DisassemblerInsn "call" for 0x400395>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001ba>, <DisassemblerInsn "and" for 0x4001be>, <DisassemblerInsn "movzx" for 0x4001c0>, <DisassemblerInsn "mov" for 0x4001c3>, <DisassemblerInsn "mov" for 0x4001c8>, <DisassemblerInsn "mov" for 0x4001ce>, <DisassemblerInsn "mov" for 0x4001d3>, <DisassemblerInsn "cmp" for 0x4001d5>, <DisassemblerInsn "mov" for 0x4001dc>, <DisassemblerInsn "jne" for 0x4001e0>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400493>, <DisassemblerInsn "setne" for 0x400496>, <DisassemblerInsn "xor" for 0x400499>, <DisassemblerInsn "mov" for 0x40049b>, <DisassemblerInsn "mov" for 0x40049f>, <DisassemblerInsn "and" for 0x4004a3>, <DisassemblerInsn "movzx" for 0x4004a5>, <DisassemblerInsn "mov" for 0x4004a8>, <DisassemblerInsn "mov" for 0x4004ad>, <DisassemblerInsn "mov" for 0x4004b3>, <DisassemblerInsn "cmp" for 0x4004b8>, <DisassemblerInsn "jne" for 0x4004bf>]'}, {'block_Idx': 148, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007b8>, <DisassemblerInsn "mov" for 0x4007bd>, <DisassemblerInsn "mov" for 0x4007c2>, <DisassemblerInsn "mov" for 0x4007c5>, <DisassemblerInsn "mov" for 0x4007ca>, <DisassemblerInsn "mov" for 0x4007cd>, <DisassemblerInsn "mov" for 0x4007d2>, <DisassemblerInsn "mov" for 0x4007d5>, <DisassemblerInsn "mov" for 0x4007da>, <DisassemblerInsn "mov" for 0x4007de>, <DisassemblerInsn "cmp" for 0x4007e3>, <DisassemblerInsn "sete" for 0x4007ea>, <DisassemblerInsn "and" for 0x4007ed>, <DisassemblerInsn "movzx" for 0x4007ef>, <DisassemblerInsn "call" for 0x4007f3>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004dd>, <DisassemblerInsn "mov" for 0x4004e2>, <DisassemblerInsn "mov" for 0x4004e5>, <DisassemblerInsn "cmp" for 0x4004ea>, <DisassemblerInsn "setne" for 0x4004ed>, <DisassemblerInsn "and" for 0x4004f0>, <DisassemblerInsn "movzx" for 0x4004f2>, <DisassemblerInsn "mov" for 0x4004f5>, <DisassemblerInsn "mov" for 0x4004fa>, <DisassemblerInsn "jmp" for 0x400500>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40054d>, <DisassemblerInsn "xor" for 0x400552>, <DisassemblerInsn "cmp" for 0x400554>, <DisassemblerInsn "mov" for 0x40055b>, <DisassemblerInsn "je" for 0x40055f>]'}, {'block_Idx': 169, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400816>, <DisassemblerInsn "jmp" for 0x40081e>]'}, {'block_Idx': 110, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002ef>, <DisassemblerInsn "cmp" for 0x4002f4>, <DisassemblerInsn "je" for 0x4002fb>]'}, {'block_Idx': 134, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400956>, <DisassemblerInsn "call" for 0x40095b>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400584>, <DisassemblerInsn "and" for 0x400588>, <DisassemblerInsn "movzx" for 0x40058a>, <DisassemblerInsn "mov" for 0x40058d>, <DisassemblerInsn "mov" for 0x400592>, <DisassemblerInsn "mov" for 0x400598>, <DisassemblerInsn "cmp" for 0x40059d>, <DisassemblerInsn "je" for 0x4005a4>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40043f>, <DisassemblerInsn "cmp" for 0x400444>, <DisassemblerInsn "je" for 0x40044b>]'}, {'block_Idx': 89, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005b4>, <DisassemblerInsn "mov" for 0x4005b9>, <DisassemblerInsn "jmp" for 0x4005c3>]'}, {'block_Idx': 140, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400756>, <DisassemblerInsn "jmp" for 0x40075e>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400018>, <DisassemblerInsn "mov" for 0x40001d>, <DisassemblerInsn "lea" for 0x400022>, <DisassemblerInsn "mov" for 0x400029>, <DisassemblerInsn "call" for 0x40002b>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400221>, <DisassemblerInsn "cmp" for 0x400226>, <DisassemblerInsn "setne" for 0x40022a>, <DisassemblerInsn "mov" for 0x40022d>, <DisassemblerInsn "mov" for 0x400231>, <DisassemblerInsn "and" for 0x400235>, <DisassemblerInsn "movzx" for 0x400237>, <DisassemblerInsn "mov" for 0x40023a>, <DisassemblerInsn "mov" for 0x40023f>, <DisassemblerInsn "mov" for 0x400245>, <DisassemblerInsn "cmp" for 0x40024a>, <DisassemblerInsn "jne" for 0x40024e>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001aa>, <DisassemblerInsn "mov" for 0x4001ae>, <DisassemblerInsn "mov" for 0x4001b2>, <DisassemblerInsn "mov" for 0x4001b6>, <DisassemblerInsn "mov" for 0x4001ba>, <DisassemblerInsn "and" for 0x4001be>, <DisassemblerInsn "movzx" for 0x4001c0>, <DisassemblerInsn "mov" for 0x4001c3>, <DisassemblerInsn "mov" for 0x4001c8>, <DisassemblerInsn "mov" for 0x4001ce>, <DisassemblerInsn "mov" for 0x4001d3>, <DisassemblerInsn "cmp" for 0x4001d5>, <DisassemblerInsn "mov" for 0x4001dc>, <DisassemblerInsn "jne" for 0x4001e0>]'}, {'block_Idx': 158, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40090a>, <DisassemblerInsn "cmp" for 0x40090f>, <DisassemblerInsn "je" for 0x400916>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003c7>, <DisassemblerInsn "mov" for 0x4003cc>, <DisassemblerInsn "call" for 0x4003cf>]'}, {'block_Idx': 125, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4006b1>]'}, {'block_Idx': 160, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400853>, <DisassemblerInsn "mov" for 0x400858>, <DisassemblerInsn "mov" for 0x40085b>, <DisassemblerInsn "mov" for 0x40085f>, <DisassemblerInsn "mov" for 0x400864>, <DisassemblerInsn "mov" for 0x400869>, <DisassemblerInsn "mov" for 0x40086c>, <DisassemblerInsn "mov" for 0x400870>, <DisassemblerInsn "mov" for 0x400875>, <DisassemblerInsn "mov" for 0x400878>, <DisassemblerInsn "mov" for 0x40087d>, <DisassemblerInsn "mov" for 0x400881>, <DisassemblerInsn "cmp" for 0x400886>, <DisassemblerInsn "sete" for 0x40088d>, <DisassemblerInsn "and" for 0x400890>, <DisassemblerInsn "movzx" for 0x400892>, <DisassemblerInsn "call" for 0x400896>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002b6>, <DisassemblerInsn "call" for 0x4002ba>]'}, {'block_Idx': 84, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400574>, <DisassemblerInsn "mov" for 0x400578>, <DisassemblerInsn "mov" for 0x40057c>, <DisassemblerInsn "mov" for 0x400580>, <DisassemblerInsn "mov" for 0x400584>, <DisassemblerInsn "and" for 0x400588>, <DisassemblerInsn "movzx" for 0x40058a>, <DisassemblerInsn "mov" for 0x40058d>, <DisassemblerInsn "mov" for 0x400592>, <DisassemblerInsn "mov" for 0x400598>, <DisassemblerInsn "cmp" for 0x40059d>, <DisassemblerInsn "je" for 0x4005a4>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400030>, <DisassemblerInsn "jmp" for 0x400038>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400191>, <DisassemblerInsn "mov" for 0x400196>, <DisassemblerInsn "mov" for 0x40019a>, <DisassemblerInsn "cmp" for 0x40019f>, <DisassemblerInsn "setne" for 0x4001a3>, <DisassemblerInsn "mov" for 0x4001a6>, <DisassemblerInsn "mov" for 0x4001aa>, <DisassemblerInsn "mov" for 0x4001ae>, <DisassemblerInsn "mov" for 0x4001b2>, <DisassemblerInsn "mov" for 0x4001b6>, <DisassemblerInsn "mov" for 0x4001ba>, <DisassemblerInsn "and" for 0x4001be>, <DisassemblerInsn "movzx" for 0x4001c0>, <DisassemblerInsn "mov" for 0x4001c3>, <DisassemblerInsn "mov" for 0x4001c8>, <DisassemblerInsn "mov" for 0x4001ce>, <DisassemblerInsn "mov" for 0x4001d3>, <DisassemblerInsn "cmp" for 0x4001d5>, <DisassemblerInsn "mov" for 0x4001dc>, <DisassemblerInsn "jne" for 0x4001e0>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400539>, <DisassemblerInsn "mov" for 0x40053e>, <DisassemblerInsn "cmp" for 0x400540>, <DisassemblerInsn "mov" for 0x400547>, <DisassemblerInsn "jne" for 0x40054b>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400168>, <DisassemblerInsn "xor" for 0x40016d>, <DisassemblerInsn "cmp" for 0x40016f>, <DisassemblerInsn "mov" for 0x400176>, <DisassemblerInsn "jne" for 0x40017a>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400107>, <DisassemblerInsn "mov" for 0x40010c>, <DisassemblerInsn "mov" for 0x40010f>, <DisassemblerInsn "jmp" for 0x400113>]'}, {'block_Idx': 150, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400348>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400472>, <DisassemblerInsn "xor" for 0x400477>, <DisassemblerInsn "cmp" for 0x400479>, <DisassemblerInsn "mov" for 0x400480>, <DisassemblerInsn "je" for 0x400484>]'}, {'block_Idx': 107, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400614>]'}, {'block_Idx': 97, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005d3>, <DisassemblerInsn "mov" for 0x4005d8>, <DisassemblerInsn "jmp" for 0x4005e2>]'}, {'block_Idx': 178, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008fe>, <DisassemblerInsn "jmp" for 0x400906>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40004b>, <DisassemblerInsn "mov" for 0x40004d>, <DisassemblerInsn "mov" for 0x400052>, <DisassemblerInsn "mov" for 0x400055>, <DisassemblerInsn "cmp" for 0x40005a>, <DisassemblerInsn "jle" for 0x40005e>]'}], 'cfg_block_detailed_info': [{'block_Idx': 78, 'blockInsts': ['<mov~~al, byte ptr [rsp + 5]>', '<mov~~byte ptr [rsp + 6], al>', '<mov~~al, byte ptr [rsp + 6]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x98], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0xf0], 0>', '<je~~0x400618>']}, {'block_Idx': 161, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x28]>', '<mov~~dword ptr [rsp + 0x24], eax>', '<jmp~~0x40085f>']}, {'block_Idx': 154, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x90], 0>', '<je~~0x400853>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0x14]>', '<cmp~~eax, ecx>', '<jle~~0x4002c5>']}, {'block_Idx': 2, 'blockInsts': ['<cmp~~eax, 0>', '<je~~0x40003d>']}, {'block_Idx': 168, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x38]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~esi, dword ptr [rax + 0x20]>', '<mov~~edx, dword ptr [rsp + 0x24]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rax + 0x78]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~r8d, dword ptr [rax + 0x24]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0xf4], 4>', '<sete~~al>', '<and~~al, 1>', '<movzx~~r9d, al>', '<call~~0x500040>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x7c], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x74]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<cmp~~eax, dword ptr [rcx + 0x78]>', '<setg~~al>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x80], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rax + 0x78]>', '<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~al, 1>', '<cmp~~ecx, dword ptr [rdx + 0x74]>', '<mov~~byte ptr [rsp + 0x1f], al>', '<jg~~0x4001ba>']}, {'block_Idx': 145, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x2c], 8>', '<jne~~0x40033c>']}, {'block_Idx': 90, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x28], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x8c], 0>', '<jne~~0x40044d>']}, {'block_Idx': 179, 'blockInsts': ['<jmp~~0x40090a>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0x2c]>', '<call~~0x500018>']}, {'block_Idx': 119, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x28], 4>', '<jg~~0x400358>']}, {'block_Idx': 117, 'blockInsts': ['<jmp~~0x400614>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~dword ptr [rsp + 0x44], 0xffffffea>', '<jmp~~0x400968>']}, {'block_Idx': 153, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x8c], 0>', '<je~~0x40090a>']}, {'block_Idx': 104, 'blockInsts': ['<mov~~edi, dword ptr [rsp]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edx, dword ptr [rax + 0x28]>', '<xor~~esi, esi>', '<lea~~rcx, [rip + 0x159b]>', '<call~~0x500030>']}, {'block_Idx': 137, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x2c], 7>', '<jne~~0x40034a>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~al, byte ptr [rsp + 7]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x90], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x8c], 0>', '<jne~~0x4004dd>']}, {'block_Idx': 170, 'blockInsts': ['<jmp~~0x400825>']}, {'block_Idx': 133, 'blockInsts': ['<jmp~~0x40070c>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x90], 0>', '<je~~0x400502>']}, {'block_Idx': 129, 'blockInsts': ['<jmp~~0x400368>']}, {'block_Idx': 86, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x90], 0>', '<je~~0x4006b3>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rdi, qword ptr [rax + 0x18]>', '<call~~0x500008>']}, {'block_Idx': 102, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edi, dword ptr [rax + 0x78]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edx, dword ptr [rax + 0x28]>', '<xor~~esi, esi>', '<lea~~rcx, [rip + 0x154c]>', '<call~~0x500030>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x38]>', '<xor~~eax, eax>', '<cmp~~dword ptr [rcx + 0x90], 0>', '<mov~~byte ptr [rsp + 6], al>', '<jne~~0x400584>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x38]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rcx, qword ptr [rax + 0x18]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x1af3]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x8c], 0>', '<jne~~0x40044d>']}, {'block_Idx': 115, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rax + 0xa0], rcx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~qword ptr [rax + 0xa0], 0>', '<jne~~0x4006b1>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x88], 0>', '<jne~~0x4004dd>']}, {'block_Idx': 96, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x94], 0>', '<je~~0x400603>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<cmp~~eax, dword ptr [rcx + 0x20]>', '<setne~~al>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x94], ecx>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<xor~~eax, eax>', '<cmp~~dword ptr [rcx + 0x90], 0>', '<mov~~byte ptr [rsp + 6], al>', '<jne~~0x400584>']}, {'block_Idx': 146, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x28], 8>', '<jmp~~0x400364>']}, {'block_Idx': 69, 'blockInsts': ['<cmp~~eax, 0>', '<jne~~0x400431>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~dword ptr [rsp + 0x44], 0xffffffea>', '<jmp~~0x400968>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~al, 1>', '<cmp~~qword ptr [rcx + 0xe8], 0>', '<mov~~byte ptr [rsp + 0x1d], al>', '<jne~~0x4001aa>']}, {'block_Idx': 127, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x30], 7>', '<je~~0x400320>']}, {'block_Idx': 131, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rax + 0xb0], rcx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~qword ptr [rax + 0xb0], 0>', '<jne~~0x400763>']}, {'block_Idx': 147, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x94], 0>', '<je~~0x4008c8>']}, {'block_Idx': 152, 'blockInsts': ['<jmp~~0x400366>']}, {'block_Idx': 196, 'blockInsts': ['<mov~~rax, qword ptr [rsp]>', '<mov~~dword ptr [rax + 0xf0], 0>', '<pop~~rax>', '<ret~~>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x10], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x78], 1>', '<jne~~0x4003de>']}, {'block_Idx': 142, 'blockInsts': ['<push~~rax>', '<mov~~qword ptr [rsp], rdi>', '<mov~~rdi, qword ptr [rsp]>', '<add~~rdi, 0xa0>', '<call~~0x500058>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x74], 0x20>', '<jle~~0x400099>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edi, dword ptr [rax + 0x10]>', '<call~~0x500010>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500028>']}, {'block_Idx': 94, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x78]>', '<mov~~dword ptr [rsp], eax>', '<mov~~edi, dword ptr [rsp]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edx, dword ptr [rax + 0x28]>', '<xor~~esi, esi>', '<lea~~rcx, [rip + 0x159b]>', '<call~~0x500030>']}, {'block_Idx': 197, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<mov~~dword ptr [rsp + 0x44], eax>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 111, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 0x28], eax>', '<cmp~~dword ptr [rsp + 0x28], 2>', '<jg~~0x4002ef>']}, {'block_Idx': 141, 'blockInsts': ['<jmp~~0x400765>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0xf0], 0>', '<je~~0x400431>']}, {'block_Idx': 108, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x98], 0>', '<jne~~0x400643>']}, {'block_Idx': 120, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x28], 8>', '<jmp~~0x400366>']}, {'block_Idx': 113, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edi, dword ptr [rax + 0x78]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edx, dword ptr [rax + 0x20]>', '<xor~~esi, esi>', '<lea~~rcx, [rip + 0x1507]>', '<call~~0x500030>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x8c], 0>', '<jne~~0x4004dd>']}, {'block_Idx': 53, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<cmp~~eax, dword ptr [rcx + 0x28]>', '<setne~~al>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x90], ecx>', '<jmp~~0x4004b3>']}, {'block_Idx': 100, 'blockInsts': ['<mov~~dword ptr [rsp + 0x10], eax>', '<jmp~~0x4002d2>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x88], 0>', '<jne~~0x400431>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x78], 0x20>', '<jle~~0x4000f5>']}, {'block_Idx': 106, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0xf4], 4>', '<jmp~~0x400612>']}, {'block_Idx': 123, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~qword ptr [rax + 0xa8], 0>', '<jne~~0x40070a>']}, {'block_Idx': 157, 'blockInsts': ['<jmp~~0x400364>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~dword ptr [rsp + 0x30], eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500010>']}, {'block_Idx': 184, 'blockInsts': ['<jmp~~0x40094c>']}, {'block_Idx': 165, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x38]>', '<call~~0x500050>']}, {'block_Idx': 144, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x28], 9>', '<jmp~~0x400348>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x1e]>', '<mov~~byte ptr [rsp + 0x1f], al>', '<mov~~al, byte ptr [rsp + 0x1f]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x84], ecx>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~al, 1>', '<cmp~~dword ptr [rcx + 0x80], 0>', '<mov~~byte ptr [rsp + 0x1c], al>', '<jne~~0x4001f5>']}, {'block_Idx': 183, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xfffffff4>', '<jmp~~0x400956>']}, {'block_Idx': 87, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x74]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<cmp~~eax, dword ptr [rcx + 0x78]>', '<jle~~0x400662>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rdi, qword ptr [rax + 8]>', '<call~~0x500008>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x1c]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x88], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rax + 0x14]>', '<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~al, 1>', '<cmp~~ecx, dword ptr [rdx + 0x24]>', '<mov~~byte ptr [rsp + 0x1b], al>', '<jne~~0x400231>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x84], 0>', '<setne~~al>', '<mov~~byte ptr [rsp + 0x1c], al>', '<mov~~al, byte ptr [rsp + 0x1c]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x88], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rax + 0x14]>', '<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~al, 1>', '<cmp~~ecx, dword ptr [rdx + 0x24]>', '<mov~~byte ptr [rsp + 0x1b], al>', '<jne~~0x400231>']}, {'block_Idx': 174, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rax + 0xc8], rcx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~qword ptr [rax + 0xc8], 0>', '<jne~~0x4008c6>']}, {'block_Idx': 118, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edi, dword ptr [rax + 0x28]>', '<call~~0x500020>']}, {'block_Idx': 112, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edi, dword ptr [rax + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~esi, dword ptr [rax + 0x78]>', '<mov~~edx, 0x400>', '<call~~0x500038>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2c], eax>', '<mov~~edi, dword ptr [rsp + 0x30]>', '<call~~0x500018>']}, {'block_Idx': 151, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x28], 7>', '<jmp~~0x400356>']}, {'block_Idx': 181, 'blockInsts': ['<jmp~~0x4008c8>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x48>', '<mov~~qword ptr [rsp + 0x38], rdi>', '<mov~~rdi, qword ptr [rsp + 0x38]>', '<call~~0x400980>']}, {'block_Idx': 95, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x74]>', '<mov~~dword ptr [rsp], eax>', '<jmp~~0x40066d>']}, {'block_Idx': 130, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rax + 0xb8], rcx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~qword ptr [rax + 0xb8], 0>', '<jne~~0x4007aa>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x78], 1>', '<jne~~0x4003de>']}, {'block_Idx': 173, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rax + 0xd0], rcx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~qword ptr [rax + 0xd0], 0>', '<jne~~0x400908>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x1b]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x8c], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x28], -1>', '<jne~~0x40039a>']}, {'block_Idx': 85, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x8c], 0>', '<setne~~al>', '<mov~~byte ptr [rsp + 4], al>', '<mov~~al, byte ptr [rsp + 4]>', '<mov~~byte ptr [rsp + 5], al>', '<mov~~al, byte ptr [rsp + 5]>', '<mov~~byte ptr [rsp + 6], al>', '<mov~~al, byte ptr [rsp + 6]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x98], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0xf0], 0>', '<je~~0x400618>']}, {'block_Idx': 128, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x28], 9>', '<jmp~~0x400366>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~qword ptr [rsp - 8], rdi>', '<mov~~rax, qword ptr [rsp - 8]>', '<cmp~~qword ptr [rax + 0xb8], 0>', '<setne~~al>', '<xor~~al, 0xff>', '<xor~~al, 0xff>', '<and~~al, 1>', '<movzx~~eax, al>', '<ret~~>']}, {'block_Idx': 139, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x90], 0>', '<je~~0x400825>']}, {'block_Idx': 162, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rax + 0xc0], rcx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~qword ptr [rax + 0xc0], 0>', '<jne~~0x400823>']}, {'block_Idx': 164, 'blockInsts': ['<mov~~dword ptr [rsp + 0x44], 0>', '<jmp~~0x400968>']}, {'block_Idx': 75, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500010>']}, {'block_Idx': 93, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x8c], 0>', '<je~~0x40070c>']}, {'block_Idx': 180, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xfffffff4>', '<jmp~~0x400956>']}, {'block_Idx': 136, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x30], 8>', '<je~~0x40032e>']}, {'block_Idx': 109, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x28], 6>', '<jmp~~0x400368>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x74]>', '<mov~~dword ptr [rsp + 0x20], eax>', '<mov~~ecx, dword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x7c], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x74]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<cmp~~eax, dword ptr [rcx + 0x78]>', '<setg~~al>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x80], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rax + 0x78]>', '<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~al, 1>', '<cmp~~ecx, dword ptr [rdx + 0x74]>', '<mov~~byte ptr [rsp + 0x1f], al>', '<jg~~0x4001ba>']}, {'block_Idx': 159, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x38]>', '<call~~0x500048>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x74]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<cmp~~eax, dword ptr [rcx + 0x78]>', '<jle~~0x400115>']}, {'block_Idx': 138, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xfffffff4>', '<jmp~~0x400956>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x8c], 0>', '<je~~0x40039a>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x38]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rcx, qword ptr [rax + 8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x1b2c]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 132, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xffffffea>', '<jmp~~0x400956>']}, {'block_Idx': 65, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], eax>', '<mov~~edi, dword ptr [rsp + 0x2c]>', '<call~~0x500018>']}, {'block_Idx': 99, 'blockInsts': ['<mov~~dword ptr [rsp + 0x10], eax>', '<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 0x28], eax>', '<cmp~~dword ptr [rsp + 0x28], 2>', '<jg~~0x4002ef>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x44]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x74], 1>', '<jne~~0x4003bc>']}, {'block_Idx': 79, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0xf4], 0>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x98], 0>', '<jne~~0x400643>']}, {'block_Idx': 98, 'blockInsts': ['<jmp~~0x400627>']}, {'block_Idx': 177, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rax + 0xd8], rcx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~qword ptr [rax + 0xd8], 0>', '<jne~~0x40094a>']}, {'block_Idx': 105, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0xf4], 3>', '<jmp~~0x400614>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x8c], 0>', '<jne~~0x400431>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edi, dword ptr [rax + 0x10]>', '<call~~0x500010>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500028>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x98], 0>', '<je~~0x4005c5>']}, {'block_Idx': 101, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x94], 0>', '<je~~0x400765>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x88], 0>', '<jne~~0x400274>']}, {'block_Idx': 124, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xffffffea>', '<jmp~~0x400956>']}, {'block_Idx': 88, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x90], 0>', '<je~~0x4005e4>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x20], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0xf0], 0>', '<je~~0x400431>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x78], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x78], 0>', '<jle~~0x4000c7>']}, {'block_Idx': 135, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 8]>', '<mov~~rcx, rax>', '<mov~~esi, 0x30>', '<lea~~rdx, [rip + 0x1865]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x1f]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x84], ecx>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~al, 1>', '<cmp~~dword ptr [rcx + 0x80], 0>', '<mov~~byte ptr [rsp + 0x1c], al>', '<jne~~0x4001f5>']}, {'block_Idx': 71, 'blockInsts': ['<cmp~~eax, 0>', '<setne~~al>', '<xor~~al, 0xff>', '<mov~~byte ptr [rsp + 7], al>', '<mov~~al, byte ptr [rsp + 7]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x90], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x8c], 0>', '<jne~~0x4004dd>']}, {'block_Idx': 148, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x38]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~esi, dword ptr [rax + 0x28]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edx, dword ptr [rax + 0x10]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rax + 0x74]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~r8d, dword ptr [rax + 0x14]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0xf4], 2>', '<sete~~al>', '<and~~al, 1>', '<movzx~~r9d, al>', '<call~~0x500040>']}, {'block_Idx': 63, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x28]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<cmp~~eax, dword ptr [rcx + 0x20]>', '<setne~~al>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x94], ecx>', '<jmp~~0x400525>']}, {'block_Idx': 77, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x38]>', '<xor~~eax, eax>', '<cmp~~dword ptr [rcx + 0xf0], 0>', '<mov~~byte ptr [rsp + 4], al>', '<je~~0x400574>']}, {'block_Idx': 169, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xfffffff4>', '<jmp~~0x400956>']}, {'block_Idx': 110, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x88], 0>', '<je~~0x40030b>']}, {'block_Idx': 134, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x38]>', '<call~~0x4009a0>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~al, byte ptr [rsp + 6]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x98], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0xf0], 0>', '<je~~0x400618>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x88], 0>', '<je~~0x400472>']}, {'block_Idx': 89, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0xf4], 1>', '<jmp~~0x400616>']}, {'block_Idx': 140, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xffffffea>', '<jmp~~0x400956>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x38]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x1b5f]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x4c], 0>', '<setne~~al>', '<mov~~byte ptr [rsp + 0x1b], al>', '<mov~~al, byte ptr [rsp + 0x1b]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x8c], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x28], -1>', '<jne~~0x40039a>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x1d]>', '<mov~~byte ptr [rsp + 0x1e], al>', '<mov~~al, byte ptr [rsp + 0x1e]>', '<mov~~byte ptr [rsp + 0x1f], al>', '<mov~~al, byte ptr [rsp + 0x1f]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x84], ecx>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~al, 1>', '<cmp~~dword ptr [rcx + 0x80], 0>', '<mov~~byte ptr [rsp + 0x1c], al>', '<jne~~0x4001f5>']}, {'block_Idx': 158, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x88], 0>', '<je~~0x40094c>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500010>']}, {'block_Idx': 125, 'blockInsts': ['<jmp~~0x4006b3>']}, {'block_Idx': 160, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x10]>', '<mov~~dword ptr [rsp + 0x24], eax>', '<mov~~rdi, qword ptr [rsp + 0x38]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~esi, dword ptr [rax + 0x20]>', '<mov~~edx, dword ptr [rsp + 0x24]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rax + 0x78]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~r8d, dword ptr [rax + 0x24]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0xf4], 4>', '<sete~~al>', '<and~~al, 1>', '<movzx~~r9d, al>', '<call~~0x500040>']}, {'block_Idx': 83, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0x30]>', '<call~~0x500018>']}, {'block_Idx': 84, 'blockInsts': ['<mov~~al, byte ptr [rsp + 4]>', '<mov~~byte ptr [rsp + 5], al>', '<mov~~al, byte ptr [rsp + 5]>', '<mov~~byte ptr [rsp + 6], al>', '<mov~~al, byte ptr [rsp + 6]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x98], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0xf0], 0>', '<je~~0x400618>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~dword ptr [rsp + 0x44], 0xffffffea>', '<jmp~~0x400968>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<cmp~~rax, qword ptr [rcx + 0x18]>', '<setne~~al>', '<mov~~byte ptr [rsp + 0x1d], al>', '<mov~~al, byte ptr [rsp + 0x1d]>', '<mov~~byte ptr [rsp + 0x1e], al>', '<mov~~al, byte ptr [rsp + 0x1e]>', '<mov~~byte ptr [rsp + 0x1f], al>', '<mov~~al, byte ptr [rsp + 0x1f]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x84], ecx>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~al, 1>', '<cmp~~dword ptr [rcx + 0x80], 0>', '<mov~~byte ptr [rsp + 0x1c], al>', '<jne~~0x4001f5>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~al, 1>', '<cmp~~dword ptr [rcx + 0x88], 0>', '<mov~~byte ptr [rsp + 5], al>', '<jne~~0x40057c>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x38]>', '<xor~~eax, eax>', '<cmp~~dword ptr [rcx + 0x80], 0>', '<mov~~byte ptr [rsp + 0x1e], al>', '<jne~~0x4001b2>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x78]>', '<mov~~dword ptr [rsp + 0x20], eax>', '<jmp~~0x400121>']}, {'block_Idx': 150, 'blockInsts': ['<jmp~~0x400356>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x38]>', '<xor~~eax, eax>', '<cmp~~dword ptr [rcx + 0xf0], 0>', '<mov~~byte ptr [rsp + 7], al>', '<je~~0x40049f>']}, {'block_Idx': 107, 'blockInsts': ['<jmp~~0x400616>']}, {'block_Idx': 97, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0xf4], 2>', '<jmp~~0x400614>']}, {'block_Idx': 178, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xfffffff4>', '<jmp~~0x400956>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x74], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x74], 0>', '<jle~~0x40006b>']}], 'cfg_edge_info': [(120, 129), (72, 73), (33, 36), (105, 107), (160, 174), (18, 17), (99, 109), (31, 29), (144, 150), (17, 21), (196, 197), (28, 30), (112, 130), (111, 110), (75, 90), (32, 30), (7, 10), (177, 183), (96, 106), (162, 170), (139, 147), (20, 22), (173, 179), (90, 53), (29, 34), (134, 197), (8, 11), (127, 136), (134, 142), (40, 43), (2, 4), (80, 88), (130, 138), (123, 132), (113, 131), (174, 180), (151, 157), (62, 67), (24, 28), (67, 63), (84, 79), (56, 60), (26, 25), (35, 37), (119, 128), (136, 144), (44, 49), (179, 158), (147, 153), (46, 43), (165, 177), (77, 85), (39, 46), (49, 48), (178, 134), (53, 57), (158, 165), (30, 34), (16, 17), (93, 102), (25, 29), (73, 78), (88, 97), (154, 161), (102, 123), (82, 99), (60, 62), (101, 112), (180, 134), (0, 2), (9, 14), (57, 63), (85, 79), (74, 79), (140, 134), (131, 140), (27, 31), (181, 153), (54, 58), (45, 55), (33, 35), (79, 87), (55, 65), (110, 120), (145, 151), (22, 25), (129, 118), (78, 79), (48, 53), (95, 104), (161, 168), (164, 11), (115, 125), (13, 16), (125, 93), (108, 86), (7, 9), (72, 74), (145, 144), (96, 105), (162, 169), (21, 11), (146, 152), (99, 110), (173, 178), (52, 53), (58, 69), (29, 33), (67, 72), (31, 30), (38, 45), (23, 26), (49, 54), (159, 173), (132, 134), (118, 135), (141, 112), (76, 83), (119, 127), (3, 7), (20, 23), (139, 148), (86, 87), (77, 84), (138, 134), (87, 95), (80, 89), (153, 159), (130, 139), (106, 117), (123, 133), (133, 101), (71, 62), (65, 76), (158, 164), (36, 40), (30, 33), (93, 101), (83, 100), (56, 61), (73, 77), (88, 96), (136, 145), (154, 160), (51, 49), (147, 154), (46, 44), (4, 8), (1, 2), (34, 36), (135, 36), (28, 29), (54, 48), (111, 109), (110, 119), (69, 48), (32, 29), (183, 134), (137, 146), (14, 11), (60, 63), (69, 75), (61, 71), (90, 52), (104, 115), (2, 3), (115, 124), (27, 32), (62, 63), (100, 111), (24, 27), (26, 24), (177, 184), (18, 20), (78, 80), (86, 93), (127, 137), (10, 9), (89, 98), (37, 36), (108, 87), (76, 82), (128, 129), (174, 181), (148, 162), (168, 174), (94, 115), (84, 80), (35, 38), (170, 147), (43, 51), (124, 134), (87, 94), (184, 164), (0, 1), (153, 158), (57, 62), (36, 39), (37, 38), (97, 107), (109, 118), (16, 18), (51, 48), (79, 86), (25, 30), (52, 56), (98, 108), (101, 113), (22, 24), (34, 35), (48, 52), (10, 13), (71, 63), (85, 80), (74, 80), (68, 73), (131, 141), (63, 68), (137, 136), (169, 134)], 'cdg_edge_info': [(115, 197), (72, 73), (18, 17), (158, 177), (99, 109), (93, 123), (31, 29), (79, 115), (2, 11), (131, 134), (111, 110), (32, 30), (7, 10), (36, 46), (177, 183), (96, 106), (127, 118), (20, 22), (139, 147), (119, 144), (90, 53), (29, 34), (174, 153), (2, 4), (173, 197), (162, 197), (80, 88), (35, 65), (130, 138), (123, 132), (174, 180), (62, 67), (67, 63), (136, 135), (18, 21), (119, 128), (35, 37), (147, 153), (37, 65), (46, 43), (76, 111), (154, 168), (77, 85), (69, 90), (123, 134), (86, 115), (35, 76), (158, 165), (30, 34), (7, 14), (93, 102), (16, 17), (88, 97), (56, 71), (154, 161), (136, 36), (20, 26), (101, 112), (37, 76), (85, 79), (130, 197), (131, 140), (27, 31), (54, 58), (33, 35), (79, 87), (110, 120), (173, 158), (145, 151), (139, 162), (131, 197), (177, 164), (35, 135), (153, 173), (108, 86), (7, 9), (115, 134), (16, 21), (145, 144), (96, 105), (54, 69), (76, 99), (162, 169), (174, 134), (177, 11), (99, 110), (173, 178), (52, 53), (29, 33), (37, 135), (31, 30), (67, 72), (35, 55), (49, 54), (18, 11), (7, 11), (76, 83), (119, 127), (37, 55), (119, 136), (20, 23), (139, 148), (115, 93), (86, 87), (46, 51), (87, 95), (80, 89), (153, 159), (130, 139), (87, 104), (136, 118), (2, 8), (71, 62), (101, 130), (158, 164), (123, 197), (30, 33), (93, 101), (56, 61), (88, 96), (73, 77), (136, 145), (137, 144), (154, 160), (51, 49), (147, 154), (85, 115), (177, 134), (131, 112), (158, 11), (10, 14), (111, 109), (110, 119), (32, 29), (85, 108), (137, 146), (123, 101), (69, 75), (18, 36), (90, 52), (127, 135), (130, 134), (2, 3), (115, 124), (27, 32), (10, 16), (62, 63), (24, 27), (26, 24), (177, 184), (174, 197), (18, 20), (35, 45), (86, 93), (35, 118), (127, 137), (10, 9), (173, 134), (162, 134), (127, 36), (76, 82), (37, 45), (37, 118), (76, 100), (35, 38), (87, 94), (153, 158), (10, 11), (2, 7), (131, 130), (36, 39), (37, 38), (85, 87), (16, 18), (79, 86), (52, 56), (177, 197), (22, 24), (101, 113), (34, 35), (147, 174), (10, 13), (85, 80), (101, 131), (71, 63), (162, 147), (137, 136), (16, 11)], 'ddg_edge_info': [(0, 158), (13, 88), (43, 101), (158, 177), (13, 97), (7, 26), (106, 148), (13, 106), (16, 102), (53, 160), (159, 178), (58, 86), (58, 95), (0, 23), (148, 159), (58, 104), (111, 119), (148, 168), (46, 148), (135, 49), (58, 113), (135, 58), (135, 67), (0, 108), (39, 90), (174, 153), (17, 197), (39, 108), (30, 148), (83, 151), (0, 144), (174, 180), (43, 87), (43, 96), (13, 101), (124, 197), (159, 164), (77, 85), (0, 9), (146, 63), (58, 90), (61, 86), (148, 154), (144, 102), (61, 95), (58, 108), (61, 104), (135, 53), (61, 113), (135, 62), (0, 94), (82, 145), (102, 123), (39, 85), (71, 154), (83, 119), (3, 10), (39, 94), (0, 112), (102, 132), (83, 128), (13, 51), (83, 137), (39, 112), (51, 77), (9, 197), (83, 146), (43, 73), (0, 130), (165, 197), (13, 87), (55, 65), (85, 173), (58, 67), (151, 118), (61, 72), (58, 85), (58, 94), (161, 168), (135, 39), (153, 173), (39, 62), (61, 108), (0, 89), (39, 71), (39, 80), (174, 134), (39, 89), (112, 159), (146, 161), (51, 63), (13, 46), (112, 168), (165, 183), (51, 72), (115, 173), (43, 77), (13, 73), (65, 83), (16, 87), (151, 104), (58, 62), (128, 148), (85, 177), (58, 71), (61, 67), (146, 53), (58, 80), (55, 145), (58, 89), (61, 85), (61, 94), (135, 43), (0, 75), (83, 100), (90, 148), (102, 113), (79, 148), (82, 144), (83, 109), (0, 93), (0, 102), (75, 105), (24, 32), (83, 118), (112, 154), (3, 9), (51, 58), (13, 32), (83, 127), (43, 54), (115, 159), (53, 86), (83, 136), (43, 63), (16, 46), (115, 168), (43, 72), (115, 177), (34, 100), (45, 127), (29, 30), (61, 62), (120, 148), (109, 148), (168, 197), (58, 75), (61, 71), (61, 80), (39, 43), (61, 89), (39, 52), (39, 61), (0, 79), (0, 88), (71, 139), (94, 104), (39, 79), (0, 97), (13, 27), (165, 164), (0, 106), (13, 36), (112, 158), (43, 49), (72, 85), (115, 154), (43, 58), (13, 54), (13, 63), (128, 102), (34, 104), (65, 82), (45, 113), (168, 165), (58, 52), (168, 174), (76, 100), (58, 61), (90, 102), (7, 95), (58, 79), (4, 197), (138, 197), (0, 56), (39, 56), (75, 86), (102, 112), (75, 95), (13, 22), (16, 18), (75, 104), (13, 31), (112, 153), (53, 67), (75, 113), (43, 53), (45, 72), (115, 158), (13, 49), (34, 90), (34, 99), (120, 102), (109, 102), (58, 56), (0, 51), (30, 73), (39, 51), (75, 72), (82, 120), (112, 130), (132, 197), (75, 90), (13, 17), (0, 87), (112, 139), (135, 104), (32, 30), (13, 26), (112, 148), (135, 113), (58, 168), (75, 108), (13, 35), (115, 153), (45, 76), (115, 162), (34, 76), (34, 85), (85, 130), (168, 164), (168, 173), (151, 102), (144, 63), (0, 37), (71, 88), (0, 46), (39, 46), (75, 67), (146, 118), (0, 73), (104, 112), (115, 112), (135, 90), (75, 85), (112, 134), (115, 130), (75, 94), (135, 108), (34, 53), (115, 139), (13, 30), (16, 26), (115, 148), (34, 71), (56, 71), (9, 14), (168, 159), (0, 32), (148, 177), (75, 53), (146, 104), (75, 62), (82, 110), (75, 71), (135, 85), (75, 80), (135, 94), (75, 89), (13, 16), (112, 138), (144, 161), (104, 134), (115, 134), (135, 112), (0, 153), (0, 162), (45, 75), (43, 105), (38, 45), (159, 173), (118, 135), (0, 18), (144, 53), (0, 27), (0, 36), (30, 49), (0, 45), (38, 148), (0, 54), (104, 93), (115, 93), (31, 32), (135, 71), (63, 101), (104, 102), (115, 102), (135, 80), (135, 89), (45, 43), (0, 139), (0, 148), (45, 61), (85, 115), (13, 96), (51, 113), (13, 105), (0, 4), (0, 13), (0, 22), (30, 35), (148, 158), (0, 31), (58, 112), (75, 52), (75, 61), (104, 115), (135, 93), (115, 124), (104, 124), (0, 134), (135, 102), (128, 63), (43, 86), (43, 95), (0, 161), (26, 24), (7, 20), (174, 197), (43, 104), (43, 113), (53, 154), (90, 63), (0, 17), (45, 168), (148, 153), (0, 26), (148, 162), (0, 35), (135, 52), (61, 112), (46, 160), (135, 61), (75, 56), (104, 101), (115, 101), (135, 79), (39, 93), (0, 120), (39, 102), (135, 88), (83, 145), (174, 165), (34, 51), (51, 85), (0, 147), (120, 63), (13, 77), (43, 90), (109, 63), (13, 86), (51, 112), (13, 95), (21, 197), (43, 108), (13, 104), (55, 82), (159, 158), (45, 136), (13, 113), (0, 3), (128, 161), (58, 93), (58, 102), (135, 56), (30, 110), (90, 161), (39, 88), (3, 13), (0, 115), (22, 26), (39, 97), (39, 106), (34, 37), (43, 67), (3, 31), (128, 53), (13, 72), (43, 85), (0, 151), (7, 10), (43, 94), (13, 90), (26, 32), (13, 108), (99, 111), (90, 53), (16, 113), (148, 134), (0, 7), (120, 161), (0, 16), (58, 88), (109, 161), (97, 168), (58, 97), (151, 148), (61, 93), (113, 131), (58, 106), (148, 161), (61, 102), (113, 140), (135, 51), (144, 118), (0, 101), (73, 85), (135, 69), (0, 110), (165, 177), (39, 101), (43, 62), (0, 128), (51, 75), (13, 58), (174, 164), (43, 71), (83, 144), (13, 67), (174, 173), (43, 80), (120, 53), (109, 53), (43, 89), (13, 85), (105, 168), (13, 94), (53, 139), (34, 135), (53, 148), (34, 153), (61, 79), (148, 147), (61, 88), (58, 101), (144, 104), (89, 168), (61, 97), (135, 46), (169, 197), (61, 106), (0, 96), (0, 105), (39, 87), (39, 96), (102, 134), (51, 61), (0, 123), (39, 105), (13, 53), (174, 159), (95, 104), (13, 62), (13, 71), (13, 80), (45, 112), (159, 134), (13, 89), (76, 99), (16, 94), (58, 69), (113, 112), (58, 87), (58, 96), (61, 101), (39, 73), (82, 151), (3, 7), (63, 147), (51, 56), (75, 112), (112, 161), (43, 52), (13, 39), (0, 118), (0, 109), (43, 61), (43, 79), (65, 76), (46, 72), (168, 177), (51, 168), (58, 73), (180, 197), (61, 87), (135, 36), (82, 119), (113, 134), (0, 77), (61, 96), (82, 128), (0, 86), (82, 137), (32, 29), (39, 77), (0, 95), (82, 146), (112, 147), (83, 111), (0, 104), (39, 86), (13, 34), (83, 120), (0, 113), (13, 43), (112, 165), (43, 56), (115, 161), (53, 88), (13, 52), (72, 101), (13, 61), (34, 93), (34, 102), (128, 118), (38, 72), (160, 168), (97, 148), (58, 77), (61, 73), (0, 63), (39, 54), (0, 72), (102, 101), (39, 63), (0, 90), (75, 93), (39, 72), (13, 20), (75, 102), (13, 29), (115, 147), (13, 38), (112, 160), (43, 51), (72, 96), (115, 165), (13, 56), (115, 174), (46, 53), (128, 104), (8, 197), (105, 148), (164, 197), (168, 158), (120, 118), (109, 118), (58, 63), (58, 72), (55, 137), (90, 104), (0, 49), (30, 62), (89, 148), (61, 77), (0, 58), (63, 96), (82, 109), (0, 67), (39, 49), (82, 118), (165, 134), (75, 79), (82, 127), (39, 58), (0, 85), (39, 67), (82, 136), (75, 88), (75, 97), (13, 24), (83, 110), (146, 148), (183, 197), (75, 106), (13, 33), (16, 20), (34, 65), (45, 65), (112, 164), (115, 160), (45, 83), (17, 21), (38, 53), (120, 104), (109, 104), (168, 153), (168, 180), (71, 86), (61, 63), (79, 108), (0, 53), (16, 168), (0, 62), (0, 71), (39, 53), (0, 80), (135, 97), (135, 106), (75, 101), (13, 37), (34, 69), (0, 165), (38, 39), (0, 174), (85, 123), (58, 53), (71, 72), (30, 34), (0, 30), (0, 39), (7, 87), (30, 52), (82, 99), (146, 102), (38, 160), (115, 123), (75, 87), (135, 101), (34, 46), (75, 96), (13, 23), (34, 55), (45, 55), (0, 160), (168, 134), (151, 63), (43, 112), (106, 168), (71, 67), (0, 34), (0, 43), (0, 52), (0, 61), (23, 26), (14, 197), (148, 197), (75, 73), (135, 87), (135, 96), (13, 18), (135, 105), (0, 146), (16, 23), (53, 72), (30, 168), (0, 173), (85, 131), (13, 112), (178, 197), (0, 20), (0, 29), (148, 165), (0, 38), (151, 161), (4, 8), (135, 73), (104, 113), (140, 197), (75, 77), (115, 113), (34, 45), (115, 131), (34, 54), (174, 177), (34, 63), (45, 63), (43, 93), (0, 159), (85, 108), (43, 102), (151, 53), (0, 168), (72, 147), (0, 177), (7, 36), (34, 148), (16, 112), (27, 32), (0, 24), (100, 111), (159, 197), (148, 160), (0, 33), (58, 105), (148, 169), (7, 148), (75, 63), (135, 77), (135, 86), (135, 95), (45, 58), (30, 158), (112, 197), (43, 88), (0, 154), (43, 97), (13, 93), (7, 22), (43, 106), (13, 102), (159, 165), (0, 10), (34, 161), (148, 164), (61, 105), (33, 34), (148, 173), (135, 54), (135, 63), (135, 72), (79, 168), (39, 95), (144, 148), (39, 104), (174, 158), (0, 131), (85, 80), (39, 113), (13, 79)]}]}
{'avresample_open': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'subq\t$0x48, %rsp'}, {'instIndex': 1, 'instruction': 'movq\t%rdi, 0x38(%rsp)'}, {'instIndex': 2, 'instruction': 'movq\t0x38(%rsp), %rdi'}, {'instIndex': 3, 'instruction': 'callq\tavresample_is_open@PLT'}, {'instIndex': 4, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 5, 'instruction': 'je\t.LBB0_2'}, {'instIndex': 6, 'instruction': 'movq\t0x38(%rsp), %rdi'}, {'instIndex': 7, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 8, 'instruction': 'leaq\t.L.str(%rip), %rdx'}, {'instIndex': 9, 'instruction': 'movb\t$0, %al'}, {'instIndex': 10, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 11, 'instruction': 'movl\t$-0x16, 0x44(%rsp)'}, {'instIndex': 12, 'instruction': 'jmp\t.LBB0_122'}, {'instIndex': 13, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 14, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 15, 'instruction': 'callq\tav_get_channel_layout_nb_channels@PLT'}, {'instIndex': 16, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 17, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 18, 'instruction': 'movl\t%ecx, 0x74(%rax)'}, {'instIndex': 19, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 20, 'instruction': 'cmpl\t$0, 0x74(%rax)'}, {'instIndex': 21, 'instruction': 'jle\t.LBB0_4'}, {'instIndex': 22, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 23, 'instruction': 'cmpl\t$0x20, 0x74(%rax)'}, {'instIndex': 24, 'instruction': 'jle\t.LBB0_5'}]}]}
The case of compiler clang with optimization O1.
Patched source code file: utils.c
Patched function: 1---int avresample_open 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_after/O1/utils.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_after/O1/utils.s---avresample_open---after
function id: 0
function flag: True
There are 575 instructions for function: avresample_open in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '36', 'end': 46}, 'before': {'start': '36', 'end': 41}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'subq\t$0xf8, %rsp'}, {'instIndex': 1, 'instruction': 'movq\t%rdi, 0xe8(%rsp)                 # 8-byte Spill'}, {'instIndex': 6, 'instruction': 'je\t.LBB0_2'}, {'instIndex': 8, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 9, 'instruction': 'leaq\t.L.str(%rip), %rdx'}, {'instIndex': 10, 'instruction': 'movb\t$0, %al'}, {'instIndex': 11, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 12, 'instruction': 'movl\t$0xffffffea, %eax               # imm = 0xFFFFFFEA'}, {'instIndex': 13, 'instruction': 'movl\t%eax, 0xe4(%rsp)                 # 4-byte Spill'}, {'instIndex': 14, 'instruction': 'jmp\t.LBB0_64'}, {'instIndex': 16, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 17, 'instruction': 'addq\t$8, %rcx'}, {'instIndex': 18, 'instruction': 'movq\t%rcx, 0xd0(%rsp)                 # 8-byte Spill'}, {'instIndex': 19, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 20, 'instruction': 'callq\tav_get_channel_layout_nb_channels@PLT'}, {'instIndex': 22, 'instruction': 'movq\t%rcx, %rdx'}, {'instIndex': 23, 'instruction': 'addq\t$0x74, %rdx'}, {'instIndex': 24, 'instruction': 'movq\t%rdx, 0xd8(%rsp)                 # 8-byte Spill'}, {'instIndex': 25, 'instruction': 'movl\t%eax, 0x74(%rcx)'}, {'instIndex': 26, 'instruction': 'addl\t$-0x21, %eax'}, {'instIndex': 27, 'instruction': 'cmpl\t$-0x20, %eax'}, {'instIndex': 28, 'instruction': 'jae\t.LBB0_4'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_after/O1/utils.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_after/O1/utils.o---after
The extraction of function: avresample_open
Analyzing the binaries to generate subCFGs from patched function ...
It has 362 nodes and 653 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 575 instructions in binary file.
[4194304, 4194346, 4194373, 4194390, 4194422]
The execution time of patched subCFG information extraction via angr: 0:00:00.626447
{'avresample_open': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a84>, <DisassemblerInsn "add" for 0x400a8b>, <DisassemblerInsn "ret" for 0x400a92>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400076>, <DisassemblerInsn "mov" for 0x40007e>, <DisassemblerInsn "add" for 0x400081>, <DisassemblerInsn "mov" for 0x400085>, <DisassemblerInsn "mov" for 0x40008d>, <DisassemblerInsn "add" for 0x400090>, <DisassemblerInsn "cmp" for 0x400093>, <DisassemblerInsn "jae" for 0x400096>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400007>, <DisassemblerInsn "mov" for 0x40000f>, <DisassemblerInsn "add" for 0x400012>, <DisassemblerInsn "mov" for 0x400018>, <DisassemblerInsn "cmp" for 0x400020>, <DisassemblerInsn "je" for 0x400028>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400045>, <DisassemblerInsn "mov" for 0x40004a>, <DisassemblerInsn "jmp" for 0x400051>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40002a>, <DisassemblerInsn "mov" for 0x400032>, <DisassemblerInsn "lea" for 0x400037>, <DisassemblerInsn "mov" for 0x40003e>, <DisassemblerInsn "call" for 0x400040>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400098>, <DisassemblerInsn "mov" for 0x4000a0>, <DisassemblerInsn "mov" for 0x4000a8>, <DisassemblerInsn "mov" for 0x4000ab>, <DisassemblerInsn "lea" for 0x4000b0>, <DisassemblerInsn "mov" for 0x4000b7>, <DisassemblerInsn "call" for 0x4000b9>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400056>, <DisassemblerInsn "mov" for 0x40005e>, <DisassemblerInsn "add" for 0x400061>, <DisassemblerInsn "mov" for 0x400065>, <DisassemblerInsn "mov" for 0x40006d>, <DisassemblerInsn "call" for 0x400071>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000cf>, <DisassemblerInsn "mov" for 0x4000d7>, <DisassemblerInsn "add" for 0x4000da>, <DisassemblerInsn "mov" for 0x4000de>, <DisassemblerInsn "mov" for 0x4000e6>, <DisassemblerInsn "call" for 0x4000ea>]'}], 'cfg_block_detailed_info': [{'block_Idx': 7, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xe4]>', '<add~~rsp, 0xf8>', '<ret~~>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xe8]>', '<mov~~rdx, rcx>', '<add~~rdx, 0x74>', '<mov~~qword ptr [rsp + 0xd8], rdx>', '<mov~~dword ptr [rcx + 0x74], eax>', '<add~~eax, -0x21>', '<cmp~~eax, -0x20>', '<jae~~0x4000cf>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0xf8>', '<mov~~qword ptr [rsp + 0xe8], rdi>', '<mov~~rax, rdi>', '<add~~rax, 0xb8>', '<mov~~qword ptr [rsp + 0xf0], rax>', '<cmp~~qword ptr [rdi + 0xb8], 0>', '<je~~0x400056>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<jmp~~0x400a84>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xe8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x206a]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd0]>', '<mov~~rdi, qword ptr [rsp + 0xe8]>', '<mov~~rcx, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x201a]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~rcx, rax>', '<add~~rcx, 8>', '<mov~~qword ptr [rsp + 0xd0], rcx>', '<mov~~rdi, qword ptr [rax + 8]>', '<call~~0x500008>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~rcx, rax>', '<add~~rcx, 0x18>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<mov~~rdi, qword ptr [rax + 0x18]>', '<call~~0x500008>']}], 'cfg_edge_info': [(0, 1), (2, 4), (0, 2), (3, 6), (1, 3), (4, 7), (3, 5)]}]}
{'avresample_open': [4194304, 4194346, 4194373, 4194390, 4194422]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_after/O1/utils.o---after
The extraction of function: avresample_open
[4194304, 4194346, 4194373, 4194390, 4194422]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 139 nodes and 225 edges in CFGEmulated.
It has 139 nodes and 266 edges in CDG.
It has 2386 nodes and 3210 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194304, 4194346, 4194373, 4194390, 4194422]
{4194304, 4195330, 4195343, 4195356, 4196894, 4196384, 4195880, 4194346, 4196394, 4195372, 4196914, 4195890, 4194373, 4196934, 4195910, 4194896, 4195920, 4194390, 4195417, 4196954, 4195940, 4194918, 4195430, 4196457, 4196974, 4195443, 4194422, 4195971, 4196996, 4196494, 4195471, 4195984, 4195476, 4194456, 4196504, 4195997, 4195488, 4196015, 4194992, 4195513, 4194494, 4196034, 4195526, 4195014, 4194511, 4195030, 4195556, 4195052, 4194543, 4196594, 4196083, 4195572, 4195065, 4195588, 4195078, 4196631, 4194584, 4196120, 4195102, 4196644, 4196133, 4196657, 4195122, 4194622, 4196167, 4195144, 4195657, 4194639, 4196690, 4195162, 4195683, 4196716, 4196204, 4196729, 4195200, 4196236, 4194718, 4196775, 4196271, 4194745, 4196803, 4195274, 4196308, 4195796, 4196823, 4194777, 4195301, 4195815, 4196843, 4195314, 4196859, 4196351}
[24, 138, 121, 127, 13, 59, 78, 55, 116, 26, 8, 32, 105, 18, 49, 48, 20, 34, 45, 63, 5, 119, 69, 111, 64, 107, 39, 71, 70, 110, 50, 123, 87, 98, 73, 7, 14, 46, 103, 52, 22, 88, 17, 113, 130, 43, 82, 57, 91, 81, 76, 92, 42, 68, 77, 136, 0, 83, 41, 65, 62, 128, 126, 109, 93, 37, 21, 61, 6, 9, 19, 132, 79, 54, 104, 31, 25, 23, 117, 44, 56, 28, 72, 94, 12, 74, 95, 40, 112, 1, 102, 101, 2, 80, 60, 15, 84, 120, 134, 27, 90, 86, 36, 33]
The execution time of patched slicing information extraction via angr: 0:00:18.557393
{'avresample_open': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003e5>, <DisassemblerInsn "cmp" for 0x4003ed>, <DisassemblerInsn "jne" for 0x4003f0>]'}, {'block_Idx': 138, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a6e>, <DisassemblerInsn "mov" for 0x400a73>, <DisassemblerInsn "mov" for 0x400a77>, <DisassemblerInsn "mov" for 0x400a7d>, <DisassemblerInsn "mov" for 0x400a84>, <DisassemblerInsn "add" for 0x400a8b>, <DisassemblerInsn "ret" for 0x400a92>]'}, {'block_Idx': 121, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40096c>, <DisassemblerInsn "call" for 0x400974>]'}, {'block_Idx': 127, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009fb>, <DisassemblerInsn "mov" for 0x400a03>, <DisassemblerInsn "mov" for 0x400a0b>, <DisassemblerInsn "add" for 0x400a12>, <DisassemblerInsn "call" for 0x400a19>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000ef>, <DisassemblerInsn "mov" for 0x4000f7>, <DisassemblerInsn "mov" for 0x4000fe>, <DisassemblerInsn "add" for 0x400101>, <DisassemblerInsn "mov" for 0x400105>, <DisassemblerInsn "mov" for 0x40010d>, <DisassemblerInsn "add" for 0x400110>, <DisassemblerInsn "cmp" for 0x400113>, <DisassemblerInsn "jae" for 0x400116>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x400504>, <DisassemblerInsn "sete" for 0x400507>, <DisassemblerInsn "mov" for 0x40050a>, <DisassemblerInsn "mov" for 0x40050e>, <DisassemblerInsn "mov" for 0x400516>, <DisassemblerInsn "mov" for 0x40051e>, <DisassemblerInsn "mov" for 0x400526>, <DisassemblerInsn "and" for 0x40052b>, <DisassemblerInsn "movzx" for 0x40052f>, <DisassemblerInsn "mov" for 0x400533>, <DisassemblerInsn "mov" for 0x400539>, <DisassemblerInsn "mov" for 0x40053b>, <DisassemblerInsn "cmp" for 0x40053f>, <DisassemblerInsn "mov" for 0x400542>, <DisassemblerInsn "jne" for 0x400547>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003aa>, <DisassemblerInsn "mov" for 0x4003b2>, <DisassemblerInsn "mov" for 0x4003ba>, <DisassemblerInsn "mov" for 0x4003be>, <DisassemblerInsn "mov" for 0x4003c0>, <DisassemblerInsn "call" for 0x4003c5>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4005d2>]'}, {'block_Idx': 116, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400952>, <DisassemblerInsn "xor" for 0x40095a>, <DisassemblerInsn "cmp" for 0x40095c>, <DisassemblerInsn "mov" for 0x40095f>, <DisassemblerInsn "je" for 0x400966>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002c6>, <DisassemblerInsn "mov" for 0x4002ce>, <DisassemblerInsn "call" for 0x4002d1>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000cf>, <DisassemblerInsn "mov" for 0x4000d7>, <DisassemblerInsn "add" for 0x4000da>, <DisassemblerInsn "mov" for 0x4000de>, <DisassemblerInsn "mov" for 0x4000e6>, <DisassemblerInsn "call" for 0x4000ea>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400439>, <DisassemblerInsn "mov" for 0x400441>, <DisassemblerInsn "add" for 0x400444>, <DisassemblerInsn "mov" for 0x40044b>, <DisassemblerInsn "cmp" for 0x400450>, <DisassemblerInsn "je" for 0x400457>]'}, {'block_Idx': 105, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009c3>, <DisassemblerInsn "add" for 0x4009cb>, <DisassemblerInsn "call" for 0x4009d2>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001d9>, <DisassemblerInsn "mov" for 0x4001e1>, <DisassemblerInsn "mov" for 0x4001e8>, <DisassemblerInsn "movzx" for 0x4001ef>, <DisassemblerInsn "and" for 0x4001f2>, <DisassemblerInsn "mov" for 0x4001f5>, <DisassemblerInsn "or" for 0x4001fb>, <DisassemblerInsn "mov" for 0x4001fd>, <DisassemblerInsn "and" for 0x400204>, <DisassemblerInsn "movzx" for 0x400206>, <DisassemblerInsn "mov" for 0x400209>, <DisassemblerInsn "add" for 0x40020c>, <DisassemblerInsn "mov" for 0x400213>, <DisassemblerInsn "mov" for 0x40021b>, <DisassemblerInsn "mov" for 0x400221>, <DisassemblerInsn "add" for 0x400224>, <DisassemblerInsn "mov" for 0x400228>, <DisassemblerInsn "mov" for 0x400230>, <DisassemblerInsn "mov" for 0x400233>, <DisassemblerInsn "add" for 0x400236>, <DisassemblerInsn "mov" for 0x40023a>, <DisassemblerInsn "mov" for 0x400242>, <DisassemblerInsn "cmp" for 0x400244>, <DisassemblerInsn "mov" for 0x400247>, <DisassemblerInsn "jne" for 0x40024e>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400549>, <DisassemblerInsn "mov" for 0x400551>, <DisassemblerInsn "cmp" for 0x400559>, <DisassemblerInsn "mov" for 0x40055c>, <DisassemblerInsn "jne" for 0x400561>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004f4>, <DisassemblerInsn "mov" for 0x4004fc>, <DisassemblerInsn "call" for 0x4004ff>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001b9>, <DisassemblerInsn "mov" for 0x4001c1>, <DisassemblerInsn "mov" for 0x4001c9>, <DisassemblerInsn "cmp" for 0x4001cc>, <DisassemblerInsn "setne" for 0x4001cf>, <DisassemblerInsn "mov" for 0x4001d2>, <DisassemblerInsn "mov" for 0x4001d9>, <DisassemblerInsn "mov" for 0x4001e1>, <DisassemblerInsn "mov" for 0x4001e8>, <DisassemblerInsn "movzx" for 0x4001ef>, <DisassemblerInsn "and" for 0x4001f2>, <DisassemblerInsn "mov" for 0x4001f5>, <DisassemblerInsn "or" for 0x4001fb>, <DisassemblerInsn "mov" for 0x4001fd>, <DisassemblerInsn "and" for 0x400204>, <DisassemblerInsn "movzx" for 0x400206>, <DisassemblerInsn "mov" for 0x400209>, <DisassemblerInsn "add" for 0x40020c>, <DisassemblerInsn "mov" for 0x400213>, <DisassemblerInsn "mov" for 0x40021b>, <DisassemblerInsn "mov" for 0x400221>, <DisassemblerInsn "add" for 0x400224>, <DisassemblerInsn "mov" for 0x400228>, <DisassemblerInsn "mov" for 0x400230>, <DisassemblerInsn "mov" for 0x400233>, <DisassemblerInsn "add" for 0x400236>, <DisassemblerInsn "mov" for 0x40023a>, <DisassemblerInsn "mov" for 0x400242>, <DisassemblerInsn "cmp" for 0x400244>, <DisassemblerInsn "mov" for 0x400247>, <DisassemblerInsn "jne" for 0x40024e>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400402>, <DisassemblerInsn "mov" for 0x400404>, <DisassemblerInsn "mov" for 0x40040c>, <DisassemblerInsn "mov" for 0x40040f>, <DisassemblerInsn "cmp" for 0x400417>, <DisassemblerInsn "jne" for 0x40041a>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40050e>, <DisassemblerInsn "mov" for 0x400516>, <DisassemblerInsn "mov" for 0x40051e>, <DisassemblerInsn "mov" for 0x400526>, <DisassemblerInsn "and" for 0x40052b>, <DisassemblerInsn "movzx" for 0x40052f>, <DisassemblerInsn "mov" for 0x400533>, <DisassemblerInsn "mov" for 0x400539>, <DisassemblerInsn "mov" for 0x40053b>, <DisassemblerInsn "cmp" for 0x40053f>, <DisassemblerInsn "mov" for 0x400542>, <DisassemblerInsn "jne" for 0x400547>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400306>, <DisassemblerInsn "mov" for 0x40030a>, <DisassemblerInsn "mov" for 0x40030e>, <DisassemblerInsn "mov" for 0x400310>, <DisassemblerInsn "cmp" for 0x400314>, <DisassemblerInsn "cmovg" for 0x400316>, <DisassemblerInsn "call" for 0x400319>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400076>, <DisassemblerInsn "mov" for 0x40007e>, <DisassemblerInsn "add" for 0x400081>, <DisassemblerInsn "mov" for 0x400085>, <DisassemblerInsn "mov" for 0x40008d>, <DisassemblerInsn "add" for 0x400090>, <DisassemblerInsn "cmp" for 0x400093>, <DisassemblerInsn "jae" for 0x400096>]'}, {'block_Idx': 119, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400869>, <DisassemblerInsn "mov" for 0x40086c>, <DisassemblerInsn "mov" for 0x400874>, <DisassemblerInsn "mov" for 0x40087b>, <DisassemblerInsn "cmp" for 0x400880>, <DisassemblerInsn "mov" for 0x400884>, <DisassemblerInsn "je" for 0x400888>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006c2>, <DisassemblerInsn "mov" for 0x4006ca>, <DisassemblerInsn "mov" for 0x4006d2>, <DisassemblerInsn "mov" for 0x4006da>, <DisassemblerInsn "mov" for 0x4006dc>, <DisassemblerInsn "cmp" for 0x4006de>, <DisassemblerInsn "cmovg" for 0x4006e0>, <DisassemblerInsn "mov" for 0x4006e3>, <DisassemblerInsn "xor" for 0x4006e5>, <DisassemblerInsn "lea" for 0x4006e7>, <DisassemblerInsn "call" for 0x4006ee>]'}, {'block_Idx': 111, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009d7>, <DisassemblerInsn "add" for 0x4009df>, <DisassemblerInsn "call" for 0x4009e6>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40069d>, <DisassemblerInsn "mov" for 0x4006a5>, <DisassemblerInsn "mov" for 0x4006af>, <DisassemblerInsn "mov" for 0x4006b3>, <DisassemblerInsn "xor" for 0x4006b7>, <DisassemblerInsn "or" for 0x4006ba>, <DisassemblerInsn "test" for 0x4006bc>, <DisassemblerInsn "jne" for 0x4006be>]'}, {'block_Idx': 107, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400820>, <DisassemblerInsn "cmp" for 0x400825>, <DisassemblerInsn "je" for 0x400828>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40042c>, <DisassemblerInsn "mov" for 0x40042e>, <DisassemblerInsn "mov" for 0x400436>, <DisassemblerInsn "mov" for 0x400439>, <DisassemblerInsn "mov" for 0x400441>, <DisassemblerInsn "add" for 0x400444>, <DisassemblerInsn "mov" for 0x40044b>, <DisassemblerInsn "cmp" for 0x400450>, <DisassemblerInsn "je" for 0x400457>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400632>, <DisassemblerInsn "mov" for 0x40063a>, <DisassemblerInsn "jmp" for 0x400644>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400630>]'}, {'block_Idx': 110, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40082a>, <DisassemblerInsn "mov" for 0x400832>, <DisassemblerInsn "mov" for 0x40083a>, <DisassemblerInsn "mov" for 0x400842>, <DisassemblerInsn "mov" for 0x40084a>, <DisassemblerInsn "mov" for 0x40084c>, <DisassemblerInsn "mov" for 0x40084f>, <DisassemblerInsn "mov" for 0x400851>, <DisassemblerInsn "cmp" for 0x400854>, <DisassemblerInsn "sete" for 0x40085b>, <DisassemblerInsn "and" for 0x40085e>, <DisassemblerInsn "movzx" for 0x400860>, <DisassemblerInsn "call" for 0x400864>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400589>, <DisassemblerInsn "mov" for 0x400591>, <DisassemblerInsn "mov" for 0x400596>, <DisassemblerInsn "cmp" for 0x400598>, <DisassemblerInsn "setne" for 0x40059b>, <DisassemblerInsn "and" for 0x40059e>, <DisassemblerInsn "movzx" for 0x4005a1>, <DisassemblerInsn "mov" for 0x4005a4>, <DisassemblerInsn "mov" for 0x4005aa>, <DisassemblerInsn "add" for 0x4005ad>, <DisassemblerInsn "mov" for 0x4005b4>, <DisassemblerInsn "cmp" for 0x4005b9>, <DisassemblerInsn "sete" for 0x4005c0>, <DisassemblerInsn "mov" for 0x4005c3>, <DisassemblerInsn "xor" for 0x4005c7>, <DisassemblerInsn "test" for 0x4005c9>, <DisassemblerInsn "mov" for 0x4005cc>, <DisassemblerInsn "jne" for 0x4005d0>]'}, {'block_Idx': 123, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008f2>, <DisassemblerInsn "mov" for 0x4008f5>, <DisassemblerInsn "mov" for 0x4008fd>, <DisassemblerInsn "mov" for 0x400904>, <DisassemblerInsn "cmp" for 0x400909>, <DisassemblerInsn "mov" for 0x40090d>, <DisassemblerInsn "je" for 0x400911>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007d4>, <DisassemblerInsn "mov" for 0x4007dc>, <DisassemblerInsn "mov" for 0x4007e4>, <DisassemblerInsn "add" for 0x4007e7>, <DisassemblerInsn "mov" for 0x4007eb>, <DisassemblerInsn "mov" for 0x4007f0>, <DisassemblerInsn "mov" for 0x4007f3>, <DisassemblerInsn "mov" for 0x4007f5>, <DisassemblerInsn "call" for 0x4007fa>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400747>, <DisassemblerInsn "mov" for 0x40074a>, <DisassemblerInsn "mov" for 0x400752>, <DisassemblerInsn "mov" for 0x400759>, <DisassemblerInsn "cmp" for 0x40075e>, <DisassemblerInsn "mov" for 0x400762>, <DisassemblerInsn "je" for 0x400766>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40031e>, <DisassemblerInsn "mov" for 0x400320>, <DisassemblerInsn "mov" for 0x400324>, <DisassemblerInsn "cmp" for 0x400329>, <DisassemblerInsn "mov" for 0x40032c>, <DisassemblerInsn "jl" for 0x400330>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400098>, <DisassemblerInsn "mov" for 0x4000a0>, <DisassemblerInsn "mov" for 0x4000a8>, <DisassemblerInsn "mov" for 0x4000ab>, <DisassemblerInsn "lea" for 0x4000b0>, <DisassemblerInsn "mov" for 0x4000b7>, <DisassemblerInsn "call" for 0x4000b9>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400118>, <DisassemblerInsn "mov" for 0x400120>, <DisassemblerInsn "mov" for 0x400128>, <DisassemblerInsn "mov" for 0x40012b>, <DisassemblerInsn "lea" for 0x400130>, <DisassemblerInsn "mov" for 0x400137>, <DisassemblerInsn "call" for 0x400139>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400473>, <DisassemblerInsn "mov" for 0x40047b>, <DisassemblerInsn "add" for 0x40047e>, <DisassemblerInsn "mov" for 0x400482>, <DisassemblerInsn "mov" for 0x400487>, <DisassemblerInsn "call" for 0x40048a>]'}, {'block_Idx': 103, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007ff>, <DisassemblerInsn "mov" for 0x400802>, <DisassemblerInsn "mov" for 0x40080a>, <DisassemblerInsn "mov" for 0x40080d>, <DisassemblerInsn "cmp" for 0x400812>, <DisassemblerInsn "mov" for 0x400816>, <DisassemblerInsn "je" for 0x40081a>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002f9>, <DisassemblerInsn "mov" for 0x4002fd>, <DisassemblerInsn "call" for 0x400301>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400266>, <DisassemblerInsn "mov" for 0x40026e>, <DisassemblerInsn "mov" for 0x400275>, <DisassemblerInsn "and" for 0x400279>, <DisassemblerInsn "movzx" for 0x40027c>, <DisassemblerInsn "mov" for 0x40027f>, <DisassemblerInsn "add" for 0x400282>, <DisassemblerInsn "mov" for 0x400289>, <DisassemblerInsn "mov" for 0x400291>, <DisassemblerInsn "mov" for 0x400297>, <DisassemblerInsn "add" for 0x40029a>, <DisassemblerInsn "mov" for 0x40029e>, <DisassemblerInsn "cmp" for 0x4002a6>, <DisassemblerInsn "jne" for 0x4002aa>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40078c>, <DisassemblerInsn "mov" for 0x400794>, <DisassemblerInsn "mov" for 0x40079c>, <DisassemblerInsn "mov" for 0x40079e>, <DisassemblerInsn "xor" for 0x4007a1>, <DisassemblerInsn "lea" for 0x4007a3>, <DisassemblerInsn "call" for 0x4007aa>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40019e>, <DisassemblerInsn "mov" for 0x4001a6>, <DisassemblerInsn "cmp" for 0x4001a8>, <DisassemblerInsn "mov" for 0x4001b0>, <DisassemblerInsn "jne" for 0x4001b7>]'}, {'block_Idx': 113, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400898>, <DisassemblerInsn "mov" for 0x4008a0>, <DisassemblerInsn "mov" for 0x4008a8>, <DisassemblerInsn "mov" for 0x4008b0>, <DisassemblerInsn "mov" for 0x4008b5>, <DisassemblerInsn "mov" for 0x4008bd>, <DisassemblerInsn "mov" for 0x4008c2>, <DisassemblerInsn "mov" for 0x4008c5>, <DisassemblerInsn "add" for 0x4008c8>, <DisassemblerInsn "cmp" for 0x4008cc>, <DisassemblerInsn "cmove" for 0x4008d0>, <DisassemblerInsn "mov" for 0x4008d4>, <DisassemblerInsn "mov" for 0x4008d6>, <DisassemblerInsn "mov" for 0x4008d8>, <DisassemblerInsn "mov" for 0x4008da>, <DisassemblerInsn "cmp" for 0x4008dd>, <DisassemblerInsn "sete" for 0x4008e4>, <DisassemblerInsn "and" for 0x4008e7>, <DisassemblerInsn "movzx" for 0x4008e9>, <DisassemblerInsn "call" for 0x4008ed>]'}, {'block_Idx': 130, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a1e>, <DisassemblerInsn "add" for 0x400a26>, <DisassemblerInsn "call" for 0x400a2d>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002ec>, <DisassemblerInsn "mov" for 0x4002f0>, <DisassemblerInsn "call" for 0x4002f4>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006f3>, <DisassemblerInsn "mov" for 0x4006f6>, <DisassemblerInsn "mov" for 0x4006fe>, <DisassemblerInsn "mov" for 0x400705>, <DisassemblerInsn "cmp" for 0x40070a>, <DisassemblerInsn "mov" for 0x40070e>, <DisassemblerInsn "je" for 0x400712>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40048f>, <DisassemblerInsn "jne" for 0x400492>]'}, {'block_Idx': 91, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400650>, <DisassemblerInsn "mov" for 0x400658>, <DisassemblerInsn "jmp" for 0x400662>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400725>, <DisassemblerInsn "mov" for 0x40072d>, <DisassemblerInsn "mov" for 0x400735>, <DisassemblerInsn "mov" for 0x400737>, <DisassemblerInsn "xor" for 0x400739>, <DisassemblerInsn "lea" for 0x40073b>, <DisassemblerInsn "call" for 0x400742>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400646>, <DisassemblerInsn "test" for 0x40064a>, <DisassemblerInsn "jne" for 0x40064c>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400690>, <DisassemblerInsn "mov" for 0x400695>, <DisassemblerInsn "jmp" for 0x40069b>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400466>, <DisassemblerInsn "cmp" for 0x40046e>, <DisassemblerInsn "jne" for 0x400471>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4006c0>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006af>, <DisassemblerInsn "mov" for 0x4006b3>, <DisassemblerInsn "xor" for 0x4006b7>, <DisassemblerInsn "or" for 0x4006ba>, <DisassemblerInsn "test" for 0x4006bc>, <DisassemblerInsn "jne" for 0x4006be>]'}, {'block_Idx': 136, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a5a>, <DisassemblerInsn "add" for 0x400a62>, <DisassemblerInsn "call" for 0x400a69>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400007>, <DisassemblerInsn "mov" for 0x40000f>, <DisassemblerInsn "add" for 0x400012>, <DisassemblerInsn "mov" for 0x400018>, <DisassemblerInsn "cmp" for 0x400020>, <DisassemblerInsn "je" for 0x400028>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40064e>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004c6>, <DisassemblerInsn "mov" for 0x4004ce>, <DisassemblerInsn "mov" for 0x4004d6>, <DisassemblerInsn "cmp" for 0x4004d9>, <DisassemblerInsn "setne" for 0x4004db>, <DisassemblerInsn "mov" for 0x4004de>, <DisassemblerInsn "jmp" for 0x4004e2>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400628>, <DisassemblerInsn "test" for 0x40062c>, <DisassemblerInsn "jne" for 0x40062e>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400494>, <DisassemblerInsn "mov" for 0x400499>, <DisassemblerInsn "call" for 0x40049b>]'}, {'block_Idx': 128, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400979>, <DisassemblerInsn "mov" for 0x40097c>, <DisassemblerInsn "mov" for 0x400984>, <DisassemblerInsn "mov" for 0x40098b>, <DisassemblerInsn "xor" for 0x400990>, <DisassemblerInsn "cmp" for 0x400992>, <DisassemblerInsn "mov" for 0x400996>, <DisassemblerInsn "mov" for 0x40099a>, <DisassemblerInsn "jne" for 0x4009a1>]'}, {'block_Idx': 126, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400931>, <DisassemblerInsn "mov" for 0x400934>, <DisassemblerInsn "mov" for 0x40093c>, <DisassemblerInsn "mov" for 0x400943>, <DisassemblerInsn "cmp" for 0x400948>, <DisassemblerInsn "mov" for 0x40094c>, <DisassemblerInsn "je" for 0x400950>]'}, {'block_Idx': 109, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40088e>, <DisassemblerInsn "cmp" for 0x400893>, <DisassemblerInsn "je" for 0x400896>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400683>, <DisassemblerInsn "mov" for 0x400688>, <DisassemblerInsn "jmp" for 0x40068e>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400459>, <DisassemblerInsn "cmp" for 0x400461>, <DisassemblerInsn "jne" for 0x400464>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400250>, <DisassemblerInsn "cmp" for 0x400258>, <DisassemblerInsn "setne" for 0x40025c>, <DisassemblerInsn "mov" for 0x40025f>, <DisassemblerInsn "mov" for 0x400266>, <DisassemblerInsn "mov" for 0x40026e>, <DisassemblerInsn "mov" for 0x400275>, <DisassemblerInsn "and" for 0x400279>, <DisassemblerInsn "movzx" for 0x40027c>, <DisassemblerInsn "mov" for 0x40027f>, <DisassemblerInsn "add" for 0x400282>, <DisassemblerInsn "mov" for 0x400289>, <DisassemblerInsn "mov" for 0x400291>, <DisassemblerInsn "mov" for 0x400297>, <DisassemblerInsn "add" for 0x40029a>, <DisassemblerInsn "mov" for 0x40029e>, <DisassemblerInsn "cmp" for 0x4002a6>, <DisassemblerInsn "jne" for 0x4002aa>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005e7>, <DisassemblerInsn "mov" for 0x4005eb>, <DisassemblerInsn "mov" for 0x4005f0>, <DisassemblerInsn "test" for 0x4005f2>, <DisassemblerInsn "setne" for 0x4005f4>, <DisassemblerInsn "test" for 0x4005f7>, <DisassemblerInsn "setne" for 0x4005f9>, <DisassemblerInsn "and" for 0x4005fc>, <DisassemblerInsn "mov" for 0x4005fe>, <DisassemblerInsn "mov" for 0x400602>, <DisassemblerInsn "mov" for 0x400607>, <DisassemblerInsn "mov" for 0x40060f>, <DisassemblerInsn "mov" for 0x400613>, <DisassemblerInsn "and" for 0x400617>, <DisassemblerInsn "movzx" for 0x40061a>, <DisassemblerInsn "mov" for 0x40061d>, <DisassemblerInsn "cmp" for 0x400623>, <DisassemblerInsn "je" for 0x400626>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400045>, <DisassemblerInsn "mov" for 0x40004a>, <DisassemblerInsn "jmp" for 0x400051>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a84>, <DisassemblerInsn "add" for 0x400a8b>, <DisassemblerInsn "ret" for 0x400a92>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40013e>, <DisassemblerInsn "mov" for 0x400143>, <DisassemblerInsn "jmp" for 0x40014a>]'}, {'block_Idx': 132, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a32>, <DisassemblerInsn "add" for 0x400a3a>, <DisassemblerInsn "call" for 0x400a41>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400332>, <DisassemblerInsn "mov" for 0x40033a>, <DisassemblerInsn "cmp" for 0x40033f>, <DisassemblerInsn "mov" for 0x400342>, <DisassemblerInsn "jne" for 0x400346>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400563>, <DisassemblerInsn "mov" for 0x40056b>, <DisassemblerInsn "mov" for 0x400573>, <DisassemblerInsn "add" for 0x400579>, <DisassemblerInsn "cmp" for 0x40057d>, <DisassemblerInsn "cmove" for 0x400580>, <DisassemblerInsn "mov" for 0x400584>, <DisassemblerInsn "mov" for 0x400589>, <DisassemblerInsn "mov" for 0x400591>, <DisassemblerInsn "mov" for 0x400596>, <DisassemblerInsn "cmp" for 0x400598>, <DisassemblerInsn "setne" for 0x40059b>, <DisassemblerInsn "and" for 0x40059e>, <DisassemblerInsn "movzx" for 0x4005a1>, <DisassemblerInsn "mov" for 0x4005a4>, <DisassemblerInsn "mov" for 0x4005aa>, <DisassemblerInsn "add" for 0x4005ad>, <DisassemblerInsn "mov" for 0x4005b4>, <DisassemblerInsn "cmp" for 0x4005b9>, <DisassemblerInsn "sete" for 0x4005c0>, <DisassemblerInsn "mov" for 0x4005c3>, <DisassemblerInsn "xor" for 0x4005c7>, <DisassemblerInsn "test" for 0x4005c9>, <DisassemblerInsn "mov" for 0x4005cc>, <DisassemblerInsn "jne" for 0x4005d0>]'}, {'block_Idx': 104, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007af>, <DisassemblerInsn "mov" for 0x4007b2>, <DisassemblerInsn "mov" for 0x4007ba>, <DisassemblerInsn "mov" for 0x4007c1>, <DisassemblerInsn "cmp" for 0x4007c6>, <DisassemblerInsn "mov" for 0x4007ca>, <DisassemblerInsn "je" for 0x4007ce>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40041c>, <DisassemblerInsn "mov" for 0x400424>, <DisassemblerInsn "call" for 0x400427>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4002c1>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002b0>, <DisassemblerInsn "mov" for 0x4002b4>, <DisassemblerInsn "or" for 0x4002bb>, <DisassemblerInsn "test" for 0x4002bd>, <DisassemblerInsn "jne" for 0x4002bf>]'}, {'block_Idx': 117, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400924>, <DisassemblerInsn "call" for 0x40092c>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004e4>, <DisassemblerInsn "xor" for 0x4004e9>, <DisassemblerInsn "cmp" for 0x4004eb>, <DisassemblerInsn "mov" for 0x4004ee>, <DisassemblerInsn "je" for 0x4004f2>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005d4>, <DisassemblerInsn "mov" for 0x4005dc>, <DisassemblerInsn "cmp" for 0x4005de>, <DisassemblerInsn "mov" for 0x4005e1>, <DisassemblerInsn "jne" for 0x4005e5>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40040f>, <DisassemblerInsn "cmp" for 0x400417>, <DisassemblerInsn "jne" for 0x40041a>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004a0>, <DisassemblerInsn "mov" for 0x4004a2>, <DisassemblerInsn "mov" for 0x4004aa>, <DisassemblerInsn "mov" for 0x4004ac>, <DisassemblerInsn "cmp" for 0x4004b4>, <DisassemblerInsn "jne" for 0x4004b7>]'}, {'block_Idx': 94, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003ca>, <DisassemblerInsn "mov" for 0x4003cf>, <DisassemblerInsn "mov" for 0x4003d2>, <DisassemblerInsn "lea" for 0x4003d7>, <DisassemblerInsn "mov" for 0x4003de>, <DisassemblerInsn "call" for 0x4003e0>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000be>, <DisassemblerInsn "mov" for 0x4000c3>, <DisassemblerInsn "jmp" for 0x4000ca>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400718>, <DisassemblerInsn "cmp" for 0x400720>, <DisassemblerInsn "je" for 0x400723>]'}, {'block_Idx': 95, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40035a>, <DisassemblerInsn "mov" for 0x40035e>, <DisassemblerInsn "sub" for 0x400362>, <DisassemblerInsn "sete" for 0x400365>, <DisassemblerInsn "sub" for 0x400368>, <DisassemblerInsn "sete" for 0x40036b>, <DisassemblerInsn "or" for 0x40036e>, <DisassemblerInsn "mov" for 0x400370>, <DisassemblerInsn "test" for 0x400375>, <DisassemblerInsn "mov" for 0x400378>, <DisassemblerInsn "jne" for 0x40037c>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004b9>, <DisassemblerInsn "cmp" for 0x4004c1>, <DisassemblerInsn "je" for 0x4004c4>]'}, {'block_Idx': 112, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400917>, <DisassemblerInsn "cmp" for 0x40091f>, <DisassemblerInsn "je" for 0x400922>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400056>, <DisassemblerInsn "mov" for 0x40005e>, <DisassemblerInsn "add" for 0x400061>, <DisassemblerInsn "mov" for 0x400065>, <DisassemblerInsn "mov" for 0x40006d>, <DisassemblerInsn "call" for 0x400071>]'}, {'block_Idx': 102, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400380>, <DisassemblerInsn "mov" for 0x400384>, <DisassemblerInsn "sub" for 0x400388>, <DisassemblerInsn "sete" for 0x40038b>, <DisassemblerInsn "sub" for 0x40038e>, <DisassemblerInsn "sete" for 0x400391>, <DisassemblerInsn "or" for 0x400394>, <DisassemblerInsn "mov" for 0x400396>, <DisassemblerInsn "mov" for 0x40039b>, <DisassemblerInsn "test" for 0x4003a0>, <DisassemblerInsn "cmovne" for 0x4003a3>, <DisassemblerInsn "mov" for 0x4003a6>, <DisassemblerInsn "mov" for 0x4003aa>, <DisassemblerInsn "mov" for 0x4003b2>, <DisassemblerInsn "mov" for 0x4003ba>, <DisassemblerInsn "mov" for 0x4003be>, <DisassemblerInsn "mov" for 0x4003c0>, <DisassemblerInsn "call" for 0x4003c5>]'}, {'block_Idx': 101, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40037e>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40002a>, <DisassemblerInsn "mov" for 0x400032>, <DisassemblerInsn "lea" for 0x400037>, <DisassemblerInsn "mov" for 0x40003e>, <DisassemblerInsn "call" for 0x400040>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40076c>, <DisassemblerInsn "mov" for 0x400774>, <DisassemblerInsn "add" for 0x400777>, <DisassemblerInsn "mov" for 0x40077e>, <DisassemblerInsn "cmp" for 0x400783>, <DisassemblerInsn "je" for 0x40078a>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400602>, <DisassemblerInsn "mov" for 0x400607>, <DisassemblerInsn "mov" for 0x40060f>, <DisassemblerInsn "mov" for 0x400613>, <DisassemblerInsn "and" for 0x400617>, <DisassemblerInsn "movzx" for 0x40061a>, <DisassemblerInsn "mov" for 0x40061d>, <DisassemblerInsn "cmp" for 0x400623>, <DisassemblerInsn "je" for 0x400626>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40014f>, <DisassemblerInsn "mov" for 0x400156>, <DisassemblerInsn "mov" for 0x40015e>, <DisassemblerInsn "mov" for 0x400166>, <DisassemblerInsn "cmp" for 0x400168>, <DisassemblerInsn "setg" for 0x40016a>, <DisassemblerInsn "mov" for 0x40016e>, <DisassemblerInsn "cmp" for 0x400176>, <DisassemblerInsn "mov" for 0x400178>, <DisassemblerInsn "cmovg" for 0x40017a>, <DisassemblerInsn "mov" for 0x40017d>, <DisassemblerInsn "and" for 0x400180>, <DisassemblerInsn "movzx" for 0x400184>, <DisassemblerInsn "mov" for 0x400188>, <DisassemblerInsn "cmp" for 0x40018e>, <DisassemblerInsn "setl" for 0x400190>, <DisassemblerInsn "cmp" for 0x400193>, <DisassemblerInsn "mov" for 0x400195>, <DisassemblerInsn "jne" for 0x40019c>]'}, {'block_Idx': 84, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400664>, <DisassemblerInsn "mov" for 0x40066c>, <DisassemblerInsn "add" for 0x400672>, <DisassemblerInsn "mov" for 0x400679>, <DisassemblerInsn "cmp" for 0x40067e>, <DisassemblerInsn "je" for 0x400681>]'}, {'block_Idx': 120, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009eb>, <DisassemblerInsn "mov" for 0x4009f3>, <DisassemblerInsn "call" for 0x4009f6>]'}, {'block_Idx': 134, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a46>, <DisassemblerInsn "add" for 0x400a4e>, <DisassemblerInsn "call" for 0x400a55>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003f2>, <DisassemblerInsn "mov" for 0x4003fa>, <DisassemblerInsn "call" for 0x4003fd>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009a7>, <DisassemblerInsn "mov" for 0x4009af>, <DisassemblerInsn "mov" for 0x4009b3>, <DisassemblerInsn "add" for 0x4009b7>, <DisassemblerInsn "call" for 0x4009be>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400348>, <DisassemblerInsn "mov" for 0x40034c>, <DisassemblerInsn "cmp" for 0x400351>, <DisassemblerInsn "mov" for 0x400354>, <DisassemblerInsn "jge" for 0x400358>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004ac>, <DisassemblerInsn "cmp" for 0x4004b4>, <DisassemblerInsn "jne" for 0x4004b7>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002d6>, <DisassemblerInsn "mov" for 0x4002d8>, <DisassemblerInsn "mov" for 0x4002e0>, <DisassemblerInsn "mov" for 0x4002e4>, <DisassemblerInsn "call" for 0x4002e7>]'}], 'cfg_block_detailed_info': [{'block_Idx': 24, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd8]>', '<cmp~~dword ptr [rax], 1>', '<jne~~0x40040f>']}, {'block_Idx': 138, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x58]>', '<mov~~eax, dword ptr [rsp + 4]>', '<mov~~dword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<mov~~eax, dword ptr [rsp + 0xe4]>', '<add~~rsp, 0xf8>', '<ret~~>']}, {'block_Idx': 121, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xe8]>', '<call~~0x500050>']}, {'block_Idx': 127, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xf0]>', '<mov~~rdi, qword ptr [rsp + 0xe8]>', '<mov~~qword ptr [rax], 0>', '<add~~rdi, 0xc0>', '<call~~0x500068>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xe8]>', '<mov~~dword ptr [rsp + 0xc4], eax>', '<mov~~rdx, rcx>', '<add~~rdx, 0x78>', '<mov~~qword ptr [rsp + 0xc8], rdx>', '<mov~~dword ptr [rcx + 0x78], eax>', '<add~~eax, -0x21>', '<cmp~~eax, -0x20>', '<jae~~0x40014f>']}, {'block_Idx': 59, 'blockInsts': ['<cmp~~eax, 0>', '<sete~~al>', '<mov~~byte ptr [rsp + 0x4f], al>', '<mov~~rax, qword ptr [rsp + 0x88]>', '<mov~~rcx, qword ptr [rsp + 0x80]>', '<mov~~rdx, qword ptr [rsp + 0xe8]>', '<mov~~sil, byte ptr [rsp + 0x4f]>', '<and~~sil, 1>', '<movzx~~esi, sil>', '<mov~~dword ptr [rdx + 0x90], esi>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x3c], ecx>', '<cmp~~ecx, 0>', '<mov~~qword ptr [rsp + 0x40], rax>', '<jne~~0x400589>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~rcx, qword ptr [rsp + 0x88]>', '<mov~~edi, dword ptr [rsp + 0x78]>', '<mov~~dword ptr [rcx], edi>', '<mov~~qword ptr [rsp + 0x60], rax>', '<call~~0x500020>']}, {'block_Idx': 55, 'blockInsts': ['<jmp~~0x400602>']}, {'block_Idx': 116, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x98]>', '<xor~~eax, eax>', '<cmp~~dword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<je~~0x400a84>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~edi, dword ptr [rax + 0x10]>', '<call~~0x500010>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~rcx, rax>', '<add~~rcx, 0x18>', '<mov~~qword ptr [rsp + 0xb8], rcx>', '<mov~~rdi, qword ptr [rax + 0x18]>', '<call~~0x500008>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~rcx, rax>', '<add~~rcx, 0xf0>', '<mov~~qword ptr [rsp + 0x58], rcx>', '<cmp~~dword ptr [rax + 0xf0], 0>', '<je~~0x4004ac>']}, {'block_Idx': 105, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xe8]>', '<add~~rdi, 0xa8>', '<call~~0x500058>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xe8]>', '<mov~~al, byte ptr [rsp + 0xb6]>', '<mov~~cl, byte ptr [rsp + 0xb7]>', '<movzx~~esi, cl>', '<and~~esi, 1>', '<mov~~dword ptr [rdx + 0x84], esi>', '<or~~al, cl>', '<mov~~byte ptr [rsp + 0x97], al>', '<and~~al, 1>', '<movzx~~eax, al>', '<mov~~rcx, rdx>', '<add~~rcx, 0x88>', '<mov~~qword ptr [rsp + 0x98], rcx>', '<mov~~dword ptr [rdx + 0x88], eax>', '<mov~~rax, rdx>', '<add~~rax, 0x14>', '<mov~~qword ptr [rsp + 0xa0], rax>', '<mov~~ecx, dword ptr [rdx + 0x14]>', '<mov~~rax, rdx>', '<add~~rax, 0x24>', '<mov~~qword ptr [rsp + 0xa8], rax>', '<mov~~al, 1>', '<cmp~~ecx, dword ptr [rdx + 0x24]>', '<mov~~byte ptr [rsp + 0xb5], al>', '<jne~~0x400266>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x88]>', '<mov~~rcx, qword ptr [rsp + 0x98]>', '<cmp~~dword ptr [rcx], 0>', '<mov~~qword ptr [rsp + 0x40], rax>', '<jne~~0x400589>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500028>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xb8]>', '<mov~~rax, qword ptr [rsp + 0xd0]>', '<mov~~rax, qword ptr [rax]>', '<cmp~~rax, qword ptr [rcx]>', '<setne~~al>', '<mov~~byte ptr [rsp + 0xb7], al>', '<mov~~rdx, qword ptr [rsp + 0xe8]>', '<mov~~al, byte ptr [rsp + 0xb6]>', '<mov~~cl, byte ptr [rsp + 0xb7]>', '<movzx~~esi, cl>', '<and~~esi, 1>', '<mov~~dword ptr [rdx + 0x84], esi>', '<or~~al, cl>', '<mov~~byte ptr [rsp + 0x97], al>', '<and~~al, 1>', '<movzx~~eax, al>', '<mov~~rcx, rdx>', '<add~~rcx, 0x88>', '<mov~~qword ptr [rsp + 0x98], rcx>', '<mov~~dword ptr [rdx + 0x88], eax>', '<mov~~rax, rdx>', '<add~~rax, 0x14>', '<mov~~qword ptr [rsp + 0xa0], rax>', '<mov~~ecx, dword ptr [rdx + 0x14]>', '<mov~~rax, rdx>', '<add~~rax, 0x24>', '<mov~~qword ptr [rsp + 0xa8], rax>', '<mov~~al, 1>', '<cmp~~ecx, dword ptr [rdx + 0x24]>', '<mov~~byte ptr [rsp + 0xb5], al>', '<jne~~0x400266>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~dword ptr [rax + 0x10], ecx>', '<mov~~rax, qword ptr [rsp + 0xc8]>', '<cmp~~dword ptr [rax], 1>', '<jne~~0x400439>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x88]>', '<mov~~rcx, qword ptr [rsp + 0x80]>', '<mov~~rdx, qword ptr [rsp + 0xe8]>', '<mov~~sil, byte ptr [rsp + 0x4f]>', '<and~~sil, 1>', '<movzx~~esi, sil>', '<mov~~dword ptr [rdx + 0x90], esi>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x3c], ecx>', '<cmp~~ecx, 0>', '<mov~~qword ptr [rsp + 0x40], rax>', '<jne~~0x400589>']}, {'block_Idx': 63, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x68]>', '<mov~~edi, dword ptr [rsp + 0x6c]>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x70]>', '<cmp~~ecx, edx>', '<cmovg~~edi, eax>', '<call~~0x500018>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xe8]>', '<mov~~rdx, rcx>', '<add~~rdx, 0x74>', '<mov~~qword ptr [rsp + 0xd8], rdx>', '<mov~~dword ptr [rcx + 0x74], eax>', '<add~~eax, -0x21>', '<cmp~~eax, -0x20>', '<jae~~0x4000cf>']}, {'block_Idx': 119, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~qword ptr [rax + 0xc0], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<je~~0x4009a7>']}, {'block_Idx': 69, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x88]>', '<mov~~rdx, qword ptr [rsp + 0xc8]>', '<mov~~rcx, qword ptr [rsp + 0xd8]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~edi, dword ptr [rdx]>', '<cmp~~ecx, edi>', '<cmovg~~edi, ecx>', '<mov~~edx, dword ptr [rax]>', '<xor~~esi, esi>', '<lea~~rcx, [rip + 0x1a4e]>', '<call~~0x500030>']}, {'block_Idx': 111, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xe8]>', '<add~~rdi, 0xb0>', '<call~~0x500058>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~dword ptr [rax + 0xf4], 0>', '<mov~~al, byte ptr [rsp + 0x2f]>', '<mov~~cl, byte ptr [rsp + 0x3a]>', '<xor~~cl, 1>', '<or~~al, cl>', '<test~~al, 1>', '<jne~~0x4006c2>']}, {'block_Idx': 107, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x30]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x40088e>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~dword ptr [rax + 0x20], ecx>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~rcx, rax>', '<add~~rcx, 0xf0>', '<mov~~qword ptr [rsp + 0x58], rcx>', '<cmp~~dword ptr [rax + 0xf0], 0>', '<je~~0x4004ac>']}, {'block_Idx': 71, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~dword ptr [rax + 0xf4], 1>', '<jmp~~0x4006af>']}, {'block_Idx': 70, 'blockInsts': ['<jmp~~0x400646>']}, {'block_Idx': 110, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xe8]>', '<mov~~rax, qword ptr [rsp + 0xa0]>', '<mov~~rcx, qword ptr [rsp + 0xd8]>', '<mov~~rdx, qword ptr [rsp + 0x88]>', '<mov~~esi, dword ptr [rdx]>', '<mov~~edx, dword ptr [rdi + 0x10]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~r8d, dword ptr [rax]>', '<cmp~~dword ptr [rdi + 0xf4], 2>', '<sete~~al>', '<and~~al, 1>', '<movzx~~r9d, al>', '<call~~0x500040>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~rcx, qword ptr [rsp + 0x40]>', '<mov~~ecx, dword ptr [rcx]>', '<cmp~~ecx, dword ptr [rax + 0x20]>', '<setne~~cl>', '<and~~cl, 1>', '<movzx~~ecx, cl>', '<mov~~dword ptr [rax + 0x94], ecx>', '<mov~~rcx, rax>', '<add~~rcx, 0x90>', '<mov~~qword ptr [rsp + 0x30], rcx>', '<cmp~~dword ptr [rax + 0x90], 0>', '<sete~~cl>', '<mov~~byte ptr [rsp + 0x3a], cl>', '<xor~~eax, eax>', '<test~~cl, 1>', '<mov~~byte ptr [rsp + 0x3b], al>', '<jne~~0x4005d4>']}, {'block_Idx': 123, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~qword ptr [rax + 0xc8], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<je~~0x4009a7>']}, {'block_Idx': 87, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xc8]>', '<mov~~rcx, qword ptr [rsp + 0xe8]>', '<mov~~rdx, rcx>', '<add~~rdx, 0x20>', '<mov~~qword ptr [rsp + 8], rdx>', '<mov~~edi, dword ptr [rcx + 0x20]>', '<mov~~esi, dword ptr [rax]>', '<mov~~edx, 0x400>', '<call~~0x500038>']}, {'block_Idx': 98, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<mov~~eax, 0xffffffea>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<je~~0x4009a7>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x74], ecx>', '<mov~~eax, 6>', '<cmp~~ecx, 3>', '<mov~~dword ptr [rsp + 0x78], eax>', '<jl~~0x4003aa>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd0]>', '<mov~~rdi, qword ptr [rsp + 0xe8]>', '<mov~~rcx, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x201a]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xb8]>', '<mov~~rdi, qword ptr [rsp + 0xe8]>', '<mov~~rcx, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x1fbd]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~rcx, rax>', '<add~~rcx, 0x20>', '<mov~~qword ptr [rsp + 0x50], rcx>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500028>']}, {'block_Idx': 103, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0xf0]>', '<mov~~qword ptr [rax], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<je~~0x4009a7>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0x6c]>', '<mov~~dword ptr [rsp + 0x68], eax>', '<call~~0x500018>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~cl, byte ptr [rsp + 0xb5]>', '<mov~~byte ptr [rsp + 0x7f], cl>', '<and~~cl, 1>', '<movzx~~ecx, cl>', '<mov~~rdx, rax>', '<add~~rdx, 0x8c>', '<mov~~qword ptr [rsp + 0x80], rdx>', '<mov~~dword ptr [rax + 0x8c], ecx>', '<mov~~rcx, rax>', '<add~~rcx, 0x28>', '<mov~~qword ptr [rsp + 0x88], rcx>', '<cmp~~dword ptr [rax + 0x28], -1>', '<jne~~0x4003e5>']}, {'block_Idx': 88, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~rcx, qword ptr [rsp + 0xc8]>', '<mov~~edi, dword ptr [rcx]>', '<mov~~edx, dword ptr [rax + 0x20]>', '<xor~~esi, esi>', '<lea~~rcx, [rip + 0x19b0]>', '<call~~0x500030>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xe8]>', '<mov~~al, 1>', '<cmp~~qword ptr [rcx + 0xe8], 0>', '<mov~~byte ptr [rsp + 0xb7], al>', '<jne~~0x4001d9>']}, {'block_Idx': 113, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xe8]>', '<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~rcx, qword ptr [rsp + 0xc8]>', '<mov~~rsi, qword ptr [rsp + 8]>', '<mov~~rdx, qword ptr [rsp + 0x88]>', '<mov~~r8, qword ptr [rsp + 0x30]>', '<mov~~r9d, dword ptr [r8]>', '<mov~~r8, rdi>', '<add~~r8, 0x10>', '<cmp~~r9d, 0>', '<cmove~~rdx, r8>', '<mov~~edx, dword ptr [rdx]>', '<mov~~esi, dword ptr [rsi]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~r8d, dword ptr [rax]>', '<cmp~~dword ptr [rdi + 0xf4], 4>', '<sete~~al>', '<and~~al, 1>', '<movzx~~r9d, al>', '<call~~0x500040>']}, {'block_Idx': 130, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xe8]>', '<add~~rdi, 0xc8>', '<call~~0x500068>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0x70]>', '<mov~~dword ptr [rsp + 0x6c], eax>', '<call~~0x500018>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~qword ptr [rax + 0xa0], rcx>', '<mov~~eax, 0xffffffea>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<je~~0x4009a7>']}, {'block_Idx': 57, 'blockInsts': ['<cmp~~eax, 0>', '<jne~~0x4004ac>']}, {'block_Idx': 91, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~dword ptr [rax + 0xf4], 2>', '<jmp~~0x4006af>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x88]>', '<mov~~rcx, qword ptr [rsp + 0xc8]>', '<mov~~edi, dword ptr [rcx]>', '<mov~~edx, dword ptr [rax]>', '<xor~~esi, esi>', '<lea~~rcx, [rip + 0x1a04]>', '<call~~0x500030>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x3a]>', '<test~~al, 1>', '<jne~~0x400664>']}, {'block_Idx': 92, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~dword ptr [rax], 3>', '<jmp~~0x4006af>']}, {'block_Idx': 42, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x80]>', '<cmp~~dword ptr [rax], 0>', '<jne~~0x4004ac>']}, {'block_Idx': 68, 'blockInsts': ['<jmp~~0x400718>']}, {'block_Idx': 77, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x2f]>', '<mov~~cl, byte ptr [rsp + 0x3a]>', '<xor~~cl, 1>', '<or~~al, cl>', '<test~~al, 1>', '<jne~~0x4006c2>']}, {'block_Idx': 136, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xe8]>', '<add~~rdi, 0xe8>', '<call~~0x500080>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0xf8>', '<mov~~qword ptr [rsp + 0xe8], rdi>', '<mov~~rax, rdi>', '<add~~rax, 0xb8>', '<mov~~qword ptr [rsp + 0xf0], rax>', '<cmp~~qword ptr [rdi + 0xb8], 0>', '<je~~0x400056>']}, {'block_Idx': 83, 'blockInsts': ['<jmp~~0x400650>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x88]>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~eax, dword ptr [rax + 0x10]>', '<cmp~~eax, dword ptr [rcx]>', '<setne~~al>', '<mov~~byte ptr [rsp + 0x4f], al>', '<jmp~~0x40050e>']}, {'block_Idx': 65, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x2f]>', '<test~~al, 1>', '<jne~~0x400632>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x50]>', '<mov~~edi, dword ptr [rax]>', '<call~~0x500010>']}, {'block_Idx': 128, 'blockInsts': ['<mov~~rdx, rax>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~qword ptr [rax + 0xd8], rdx>', '<mov~~ecx, 0xfffffff4>', '<xor~~eax, eax>', '<cmp~~rdx, 0>', '<mov~~dword ptr [rsp + 0x1c], ecx>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<jne~~0x400a84>']}, {'block_Idx': 126, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~qword ptr [rax + 0xd0], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<je~~0x4009a7>']}, {'block_Idx': 109, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x400917>']}, {'block_Idx': 93, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<mov~~dword ptr [rax], 4>', '<jmp~~0x4006af>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x98]>', '<cmp~~dword ptr [rax], 0>', '<jne~~0x4004ac>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<cmp~~dword ptr [rax + 0x4c], 0>', '<setne~~al>', '<mov~~byte ptr [rsp + 0xb5], al>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~cl, byte ptr [rsp + 0xb5]>', '<mov~~byte ptr [rsp + 0x7f], cl>', '<and~~cl, 1>', '<movzx~~ecx, cl>', '<mov~~rdx, rax>', '<add~~rdx, 0x8c>', '<mov~~qword ptr [rsp + 0x80], rdx>', '<mov~~dword ptr [rax + 0x8c], ecx>', '<mov~~rcx, rax>', '<add~~rcx, 0x28>', '<mov~~qword ptr [rsp + 0x88], rcx>', '<cmp~~dword ptr [rax + 0x28], -1>', '<jne~~0x4003e5>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x3c]>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~eax, dword ptr [rax]>', '<test~~eax, eax>', '<setne~~al>', '<test~~ecx, ecx>', '<setne~~cl>', '<and~~al, cl>', '<mov~~byte ptr [rsp + 0x3b], al>', '<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~rcx, qword ptr [rsp + 0xe8]>', '<mov~~dl, byte ptr [rsp + 0x3b]>', '<mov~~byte ptr [rsp + 0x2f], dl>', '<and~~dl, 1>', '<movzx~~edx, dl>', '<mov~~dword ptr [rcx + 0x98], edx>', '<cmp~~dword ptr [rax], 0>', '<je~~0x40069d>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<jmp~~0x400a84>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xe4]>', '<add~~rsp, 0xf8>', '<ret~~>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<jmp~~0x400a84>']}, {'block_Idx': 132, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xe8]>', '<add~~rdi, 0xd0>', '<call~~0x500070>']}, {'block_Idx': 79, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x98]>', '<mov~~eax, 8>', '<cmp~~dword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0x78], eax>', '<jne~~0x4003aa>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x88]>', '<mov~~rcx, qword ptr [rsp + 0xe8]>', '<mov~~edx, dword ptr [rcx + 0x90]>', '<add~~rcx, 0x10>', '<cmp~~edx, 0>', '<cmove~~rax, rcx>', '<mov~~qword ptr [rsp + 0x40], rax>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~rcx, qword ptr [rsp + 0x40]>', '<mov~~ecx, dword ptr [rcx]>', '<cmp~~ecx, dword ptr [rax + 0x20]>', '<setne~~cl>', '<and~~cl, 1>', '<movzx~~ecx, cl>', '<mov~~dword ptr [rax + 0x94], ecx>', '<mov~~rcx, rax>', '<add~~rcx, 0x90>', '<mov~~qword ptr [rsp + 0x30], rcx>', '<cmp~~dword ptr [rax + 0x90], 0>', '<sete~~cl>', '<mov~~byte ptr [rsp + 0x3a], cl>', '<xor~~eax, eax>', '<test~~cl, 1>', '<mov~~byte ptr [rsp + 0x3b], al>', '<jne~~0x4005d4>']}, {'block_Idx': 104, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~qword ptr [rax + 0xb0], rcx>', '<mov~~eax, 0xffffffea>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x1c], eax>', '<je~~0x4009a7>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500010>']}, {'block_Idx': 25, 'blockInsts': ['<jmp~~0x4003e5>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x7f]>', '<mov~~al, byte ptr [rsp + 0x97]>', '<or~~al, cl>', '<test~~al, 1>', '<jne~~0x4002c6>']}, {'block_Idx': 117, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xe8]>', '<call~~0x500048>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x58]>', '<xor~~eax, eax>', '<cmp~~dword ptr [rcx], 0>', '<mov~~byte ptr [rsp + 0x4f], al>', '<je~~0x40050e>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x98]>', '<mov~~al, 1>', '<cmp~~dword ptr [rcx], 0>', '<mov~~byte ptr [rsp + 0x3b], al>', '<jne~~0x400602>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xc8]>', '<cmp~~dword ptr [rax], 1>', '<jne~~0x400439>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x88]>', '<mov~~dword ptr [rax], ecx>', '<mov~~rax, qword ptr [rsp + 0x80]>', '<cmp~~dword ptr [rax], 0>', '<jne~~0x4004c6>']}, {'block_Idx': 94, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x60]>', '<mov~~rcx, rax>', '<mov~~esi, 0x30>', '<lea~~rdx, [rip + 0x1d3a]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<jmp~~0x400a84>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x80]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x40076c>']}, {'block_Idx': 95, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x6c]>', '<mov~~ecx, dword ptr [rsp + 0x70]>', '<sub~~ecx, 7>', '<sete~~cl>', '<sub~~eax, 7>', '<sete~~al>', '<or~~cl, al>', '<mov~~eax, 8>', '<test~~cl, 1>', '<mov~~dword ptr [rsp + 0x78], eax>', '<jne~~0x400380>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x98]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x4004e4>']}, {'block_Idx': 112, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x80]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x400952>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~rcx, rax>', '<add~~rcx, 8>', '<mov~~qword ptr [rsp + 0xd0], rcx>', '<mov~~rdi, qword ptr [rax + 8]>', '<call~~0x500008>']}, {'block_Idx': 102, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x6c]>', '<mov~~ecx, dword ptr [rsp + 0x70]>', '<sub~~ecx, 8>', '<sete~~dl>', '<sub~~eax, 8>', '<sete~~al>', '<or~~dl, al>', '<mov~~eax, 7>', '<mov~~ecx, 9>', '<test~~dl, 1>', '<cmovne~~eax, ecx>', '<mov~~dword ptr [rsp + 0x78], eax>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~rcx, qword ptr [rsp + 0x88]>', '<mov~~edi, dword ptr [rsp + 0x78]>', '<mov~~dword ptr [rcx], edi>', '<mov~~qword ptr [rsp + 0x60], rax>', '<call~~0x500020>']}, {'block_Idx': 101, 'blockInsts': ['<jmp~~0x4003aa>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xe8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x206a]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~rcx, rax>', '<add~~rcx, 0x94>', '<mov~~qword ptr [rsp + 0x10], rcx>', '<cmp~~dword ptr [rax + 0x94], 0>', '<je~~0x4007d4>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~rcx, qword ptr [rsp + 0xe8]>', '<mov~~dl, byte ptr [rsp + 0x3b]>', '<mov~~byte ptr [rsp + 0x2f], dl>', '<and~~dl, 1>', '<movzx~~edx, dl>', '<mov~~dword ptr [rcx + 0x98], edx>', '<cmp~~dword ptr [rax], 0>', '<je~~0x40069d>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0xc4]>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~rcx, qword ptr [rsp + 0xd8]>', '<mov~~ecx, dword ptr [rcx]>', '<cmp~~ecx, edx>', '<setg~~sil>', '<mov~~byte ptr [rsp + 0xb6], sil>', '<cmp~~ecx, edx>', '<mov~~edi, ecx>', '<cmovg~~edi, edx>', '<mov~~dword ptr [rax + 0x7c], edi>', '<and~~sil, 1>', '<movzx~~esi, sil>', '<mov~~dword ptr [rax + 0x80], esi>', '<cmp~~ecx, edx>', '<setl~~al>', '<cmp~~ecx, edx>', '<mov~~byte ptr [rsp + 0xb7], al>', '<jne~~0x4001d9>']}, {'block_Idx': 84, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xe8]>', '<mov~~eax, dword ptr [rcx + 0x94]>', '<add~~rcx, 0xf4>', '<mov~~qword ptr [rsp + 0x20], rcx>', '<cmp~~eax, 0>', '<je~~0x400690>']}, {'block_Idx': 120, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xf0]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500060>']}, {'block_Idx': 134, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xe8]>', '<add~~rdi, 0xd8>', '<call~~0x500078>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~edi, dword ptr [rax + 0x10]>', '<call~~0x500010>']}, {'block_Idx': 90, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xe8]>', '<mov~~eax, dword ptr [rsp + 0x1c]>', '<mov~~dword ptr [rsp + 4], eax>', '<add~~rdi, 0xa0>', '<call~~0x500058>']}, {'block_Idx': 86, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x74]>', '<mov~~eax, 9>', '<cmp~~ecx, 5>', '<mov~~dword ptr [rsp + 0x78], eax>', '<jge~~0x4003aa>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x80]>', '<cmp~~dword ptr [rax], 0>', '<jne~~0x4004c6>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~dword ptr [rsp + 0x70], ecx>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500010>']}], 'cfg_edge_info': [(32, 37), (62, 72), (64, 69), (104, 87), (44, 45), (128, 90), (19, 9), (93, 77), (23, 25), (46, 57), (40, 41), (65, 70), (37, 42), (109, 113), (27, 34), (20, 22), (86, 95), (80, 88), (7, 12), (24, 28), (59, 50), (56, 60), (18, 21), (105, 111), (50, 56), (88, 104), (81, 98), (39, 37), (112, 116), (121, 128), (98, 80), (36, 41), (15, 18), (42, 36), (73, 78), (107, 110), (82, 90), (57, 36), (77, 69), (5, 7), (22, 23), (91, 77), (0, 2), (84, 93), (14, 19), (49, 50), (95, 102), (83, 91), (13, 14), (79, 78), (82, 74), (117, 126), (64, 68), (103, 90), (90, 105), (60, 64), (1, 5), (28, 32), (25, 24), (128, 9), (20, 21), (61, 65), (23, 26), (31, 39), (72, 40), (49, 54), (80, 87), (34, 32), (8, 13), (132, 134), (2, 6), (119, 109), (76, 83), (59, 49), (86, 78), (43, 52), (40, 44), (17, 18), (113, 123), (36, 40), (54, 55), (56, 61), (123, 90), (77, 68), (134, 136), (126, 116), (21, 24), (84, 92), (69, 82), (112, 117), (95, 101), (130, 132), (78, 94), (17, 20), (74, 81), (109, 112), (68, 74), (110, 119), (136, 138), (92, 77), (103, 107), (65, 71), (28, 31), (111, 120), (24, 27), (26, 33), (104, 90), (60, 65), (44, 48), (61, 64), (123, 112), (70, 76), (116, 9), (39, 36), (119, 90), (34, 31), (94, 24), (37, 36), (45, 49), (71, 77), (63, 73), (15, 17), (12, 9), (41, 45), (18, 22), (107, 109), (116, 121), (52, 63), (72, 41), (127, 130), (0, 1), (87, 103), (57, 62), (48, 59), (102, 94), (76, 84), (120, 127), (98, 90), (79, 86), (42, 46), (33, 43), (21, 23), (73, 79), (5, 8), (22, 24), (74, 80), (54, 56), (126, 90), (13, 15), (6, 9)], 'cdg_edge_info': [(64, 69), (104, 87), (42, 57), (128, 90), (0, 5), (40, 41), (23, 43), (37, 42), (109, 113), (112, 130), (23, 52), (80, 104), (13, 136), (13, 90), (20, 22), (5, 12), (86, 95), (80, 88), (112, 132), (13, 19), (13, 138), (107, 90), (23, 63), (24, 28), (18, 21), (64, 82), (39, 37), (109, 90), (0, 9), (112, 116), (112, 134), (98, 80), (15, 18), (107, 110), (77, 69), (107, 119), (109, 138), (5, 7), (22, 23), (0, 2), (84, 93), (128, 105), (95, 102), (112, 127), (57, 72), (13, 14), (112, 136), (28, 39), (82, 74), (5, 9), (112, 111), (23, 33), (112, 120), (34, 39), (80, 103), (112, 138), (128, 9), (107, 105), (20, 21), (77, 82), (61, 65), (23, 26), (72, 40), (49, 54), (80, 87), (13, 9), (119, 109), (59, 49), (128, 130), (5, 13), (40, 44), (17, 18), (13, 130), (65, 76), (56, 61), (128, 132), (112, 90), (126, 116), (84, 92), (13, 105), (112, 117), (23, 94), (107, 130), (112, 126), (17, 20), (13, 132), (74, 81), (109, 112), (128, 134), (109, 130), (24, 34), (103, 107), (107, 132), (0, 6), (65, 71), (13, 134), (28, 31), (109, 105), (128, 127), (109, 123), (128, 136), (24, 27), (109, 132), (44, 48), (61, 64), (123, 112), (116, 9), (116, 128), (34, 31), (107, 134), (13, 127), (128, 111), (128, 120), (76, 91), (15, 17), (128, 138), (109, 134), (23, 73), (64, 74), (107, 109), (77, 74), (112, 105), (18, 22), (116, 121), (13, 111), (72, 41), (44, 59), (107, 127), (0, 1), (13, 120), (107, 136), (57, 62), (76, 84), (109, 127), (79, 86), (109, 136), (42, 46), (73, 79), (21, 23), (107, 111), (107, 120), (104, 103), (5, 8), (61, 77), (107, 138), (74, 80), (54, 56), (109, 111), (13, 15), (109, 120), (74, 98), (13, 24)], 'ddg_edge_info': [(13, 88), (0, 5), (48, 54), (0, 14), (92, 88), (94, 39), (113, 138), (77, 126), (62, 74), (7, 138), (81, 87), (62, 92), (0, 117), (0, 126), (93, 88), (20, 113), (87, 112), (87, 121), (7, 12), (88, 104), (5, 69), (92, 74), (48, 49), (69, 81), (121, 128), (69, 90), (77, 103), (94, 34), (21, 59), (27, 93), (92, 110), (110, 109), (62, 69), (31, 72), (20, 72), (62, 87), (31, 81), (22, 23), (93, 74), (14, 19), (84, 93), (0, 121), (95, 102), (0, 130), (87, 107), (13, 69), (87, 116), (13, 87), (117, 126), (59, 54), (88, 90), (46, 93), (92, 87), (77, 98), (27, 88), (113, 128), (8, 84), (62, 64), (39, 62), (8, 93), (110, 113), (91, 109), (0, 98), (31, 76), (62, 91), (23, 72), (64, 109), (117, 121), (22, 112), (46, 88), (21, 22), (69, 80), (98, 116), (27, 74), (62, 41), (110, 90), (42, 72), (113, 123), (39, 48), (27, 92), (62, 59), (8, 88), (0, 84), (110, 117), (62, 77), (91, 113), (110, 126), (31, 71), (0, 102), (31, 80), (0, 111), (84, 92), (43, 63), (23, 94), (17, 20), (64, 113), (117, 116), (46, 74), (2, 138), (136, 138), (46, 92), (27, 69), (8, 65), (91, 81), (8, 74), (20, 39), (71, 112), (27, 87), (62, 54), (31, 48), (39, 61), (8, 92), (20, 57), (110, 112), (0, 88), (110, 121), (31, 84), (64, 81), (116, 128), (87, 110), (22, 102), (46, 69), (46, 87), (121, 90), (117, 138), (128, 138), (27, 64), (79, 102), (62, 40), (8, 69), (20, 34), (71, 107), (62, 49), (71, 116), (94, 81), (27, 91), (102, 94), (23, 39), (8, 87), (31, 61), (91, 112), (23, 57), (46, 64), (27, 41), (113, 90), (8, 46), (27, 59), (98, 110), (8, 64), (27, 77), (91, 80), (62, 44), (113, 117), (94, 76), (23, 34), (23, 43), (31, 56), (20, 56), (0, 87), (23, 52), (31, 65), (33, 102), (64, 80), (93, 116), (22, 74), (46, 41), (46, 59), (22, 110), (46, 77), (98, 87), (8, 41), (27, 54), (71, 88), (0, 46), (8, 59), (27, 72), (94, 71), (0, 64), (63, 102), (39, 46), (94, 80), (123, 116), (31, 42), (104, 112), (22, 69), (46, 54), (27, 31), (8, 27), (27, 40), (71, 74), (27, 49), (48, 81), (94, 48), (5, 110), (63, 79), (0, 41), (8, 54), (94, 57), (90, 105), (0, 59), (31, 37), (20, 37), (23, 33), (104, 107), (94, 84), (104, 116), (1, 5), (46, 40), (46, 49), (49, 54), (8, 13), (8, 22), (119, 109), (8, 31), (27, 44), (0, 27), (8, 40), (48, 76), (8, 49), (71, 87), (20, 23), (94, 61), (91, 74), (0, 54), (22, 41), (22, 59), (56, 61), (93, 110), (15, 20), (126, 116), (46, 44), (130, 132), (8, 17), (0, 13), (8, 26), (27, 39), (0, 22), (119, 113), (48, 71), (0, 31), (8, 44), (48, 80), (94, 56), (21, 72), (94, 65), (33, 46), (41, 59), (19, 138), (93, 87), (0, 134), (22, 54), (43, 95), (22, 72), (26, 33), (87, 138), (119, 90), (0, 8), (8, 21), (94, 24), (0, 17), (0, 26), (94, 42), (92, 109), (63, 73), (48, 84), (81, 90), (41, 54), (73, 86), (52, 63), (44, 59), (72, 41), (104, 110), (22, 49), (20, 116), (13, 113), (48, 61), (119, 112), (102, 41), (0, 21), (94, 37), (94, 46), (92, 113), (62, 72), (104, 87), (62, 81), (54, 77), (33, 54), (33, 63), (31, 93), (54, 113), (13, 81), (92, 81), (0, 7), (48, 56), (21, 39), (69, 88), (48, 65), (21, 57), (90, 138), (33, 31), (81, 80), (110, 116), (62, 76), (81, 98), (20, 79), (0, 110), (31, 88), (0, 119), (93, 81), (0, 128), (64, 112), (59, 61), (46, 91), (0, 2), (14, 138), (69, 74), (21, 34), (94, 27), (113, 126), (8, 91), (62, 71), (91, 107), (62, 80), (91, 116), (31, 74), (54, 76), (0, 105), (103, 90), (110, 138), (31, 92), (0, 123), (0, 132), (64, 107), (87, 109), (64, 116), (77, 82), (61, 65), (92, 80), (113, 112), (69, 87), (27, 81), (62, 48), (113, 121), (8, 77), (2, 6), (132, 134), (0, 82), (0, 91), (31, 69), (62, 84), (31, 87), (43, 52), (87, 113), (46, 72), (88, 87), (46, 81), (98, 109), (69, 82), (113, 116), (27, 76), (71, 110), (8, 72), (91, 88), (121, 138), (8, 81), (31, 46), (62, 61), (94, 93), (110, 119), (31, 64), (0, 104), (6, 138), (13, 34), (0, 113), (95, 94), (87, 90), (64, 88), (46, 76), (98, 113), (27, 71), (27, 80), (8, 76), (31, 41), (62, 56), (39, 54), (94, 88), (62, 65), (54, 61), (20, 59), (0, 90), (91, 110), (31, 59), (72, 69), (31, 77), (23, 73), (64, 74), (127, 130), (5, 15), (87, 103), (5, 24), (64, 110), (46, 62), (46, 71), (22, 113), (46, 80), (120, 127), (98, 90), (27, 48), (102, 69), (61, 77), (71, 109), (8, 71), (27, 84), (94, 74), (91, 87), (8, 80), (31, 54), (94, 92), (13, 15), (23, 59), (64, 87), (117, 90), (128, 90), (22, 81), (46, 48), (46, 57), (86, 102), (27, 34), (46, 84), (8, 39), (8, 48), (27, 61), (98, 112), (48, 93), (42, 59), (20, 22), (94, 69), (39, 44), (71, 113), (20, 40), (31, 40), (0, 71), (94, 87), (20, 49), (31, 49), (0, 80), (1, 8), (72, 59), (23, 63), (33, 95), (105, 111), (93, 109), (39, 138), (116, 138), (46, 61), (98, 80), (8, 34), (71, 81), (27, 56), (0, 39), (98, 107), (48, 88), (82, 90), (27, 65), (63, 86), (0, 48), (8, 61), (94, 64), (63, 95), (31, 44), (94, 91), (72, 54), (64, 77), (93, 113), (26, 41), (46, 56), (46, 65), (8, 20), (27, 42), (119, 116), (48, 74), (94, 41), (102, 54), (0, 34), (48, 92), (77, 128), (8, 56), (94, 59), (0, 61), (94, 77), (31, 39), (104, 109), (1, 7), (34, 41), (26, 27), (12, 138), (26, 54), (8, 15), (8, 24), (27, 37), (0, 20), (98, 88), (48, 69), (27, 46), (8, 42), (71, 80), (92, 112), (48, 87), (94, 54), (123, 90), (134, 136), (94, 72), (33, 62), (104, 113), (112, 126), (20, 110), (1, 20), (34, 54), (93, 112), (43, 102), (0, 15), (48, 64), (94, 31), (8, 37), (94, 40), (0, 33), (92, 107), (111, 120), (94, 49), (92, 116), (48, 91), (104, 90), (81, 88), (33, 48), (123, 112), (62, 93), (73, 102), (93, 80), (0, 127), (54, 107), (0, 136), (93, 107), (0, 1), (8, 14), (48, 59), (8, 23), (77, 104), (48, 77), (94, 44), (80, 109), (33, 43), (110, 128), (62, 88), (33, 52), (44, 61), (31, 91), (22, 42), (126, 90), (87, 117)]}]}
{'avresample_open': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'subq\t$0xf8, %rsp'}, {'instIndex': 1, 'instruction': 'movq\t%rdi, 0xe8(%rsp)                 # 8-byte Spill'}, {'instIndex': 6, 'instruction': 'je\t.LBB0_2'}, {'instIndex': 8, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 9, 'instruction': 'leaq\t.L.str(%rip), %rdx'}, {'instIndex': 10, 'instruction': 'movb\t$0, %al'}, {'instIndex': 11, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 12, 'instruction': 'movl\t$0xffffffea, %eax               # imm = 0xFFFFFFEA'}, {'instIndex': 13, 'instruction': 'movl\t%eax, 0xe4(%rsp)                 # 4-byte Spill'}, {'instIndex': 14, 'instruction': 'jmp\t.LBB0_64'}, {'instIndex': 16, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 17, 'instruction': 'addq\t$8, %rcx'}, {'instIndex': 18, 'instruction': 'movq\t%rcx, 0xd0(%rsp)                 # 8-byte Spill'}, {'instIndex': 19, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 20, 'instruction': 'callq\tav_get_channel_layout_nb_channels@PLT'}, {'instIndex': 22, 'instruction': 'movq\t%rcx, %rdx'}, {'instIndex': 23, 'instruction': 'addq\t$0x74, %rdx'}, {'instIndex': 24, 'instruction': 'movq\t%rdx, 0xd8(%rsp)                 # 8-byte Spill'}, {'instIndex': 25, 'instruction': 'movl\t%eax, 0x74(%rcx)'}, {'instIndex': 26, 'instruction': 'addl\t$-0x21, %eax'}, {'instIndex': 27, 'instruction': 'cmpl\t$-0x20, %eax'}, {'instIndex': 28, 'instruction': 'jae\t.LBB0_4'}]}]}
The case of compiler clang with optimization O2.
Patched source code file: utils.c
Patched function: 1---int avresample_open 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_after/O2/utils.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_after/O2/utils.s---avresample_open---after
function id: 0
function flag: True
There are 686 instructions for function: avresample_open in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '36', 'end': 46}, 'before': {'start': '36', 'end': 41}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'subq\t$0x188, %rsp                      # imm = 0x0xbc'}, {'instIndex': 1, 'instruction': 'movq\t%rdi, 0x178(%rsp)                 # 8-byte Spill'}, {'instIndex': 6, 'instruction': 'je\t.LBB0_2'}, {'instIndex': 8, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 9, 'instruction': 'leaq\t.L.str(%rip), %rdx'}, {'instIndex': 10, 'instruction': 'movb\t$0, %al'}, {'instIndex': 11, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 12, 'instruction': 'movl\t$0xffffffea, %eax               # imm = 0xFFFFFFEA'}, {'instIndex': 13, 'instruction': 'movl\t%eax, 0x174(%rsp)                 # 4-byte Spill'}, {'instIndex': 14, 'instruction': 'jmp\t.LBB0_68'}, {'instIndex': 16, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 17, 'instruction': 'addq\t$8, %rcx'}, {'instIndex': 18, 'instruction': 'movq\t%rcx, 0x160(%rsp)                 # 8-byte Spill'}, {'instIndex': 19, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 20, 'instruction': 'callq\tav_get_channel_layout_nb_channels@PLT'}, {'instIndex': 22, 'instruction': 'movq\t%rcx, %rdx'}, {'instIndex': 23, 'instruction': 'addq\t$0x74, %rdx'}, {'instIndex': 24, 'instruction': 'movq\t%rdx, 0x168(%rsp)                 # 8-byte Spill'}, {'instIndex': 25, 'instruction': 'movl\t%eax, 0x74(%rcx)'}, {'instIndex': 26, 'instruction': 'addl\t$-0x21, %eax'}, {'instIndex': 27, 'instruction': 'cmpl\t$-0x20, %eax'}, {'instIndex': 28, 'instruction': 'jae\t.LBB0_4'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_after/O2/utils.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_after/O2/utils.o---after
The extraction of function: avresample_open
Analyzing the binaries to generate subCFGs from patched function ...
It has 372 nodes and 670 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 686 instructions in binary file.
[4194304, 4194346, 4194373, 4194390, 4194422]
The execution time of patched subCFG information extraction via angr: 0:00:00.581846
{'avresample_open': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400056>, <DisassemblerInsn "mov" for 0x40005e>, <DisassemblerInsn "add" for 0x400061>, <DisassemblerInsn "mov" for 0x400065>, <DisassemblerInsn "mov" for 0x40006d>, <DisassemblerInsn "call" for 0x400071>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400045>, <DisassemblerInsn "mov" for 0x40004a>, <DisassemblerInsn "jmp" for 0x400051>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400076>, <DisassemblerInsn "mov" for 0x40007e>, <DisassemblerInsn "add" for 0x400081>, <DisassemblerInsn "mov" for 0x400085>, <DisassemblerInsn "mov" for 0x40008d>, <DisassemblerInsn "add" for 0x400090>, <DisassemblerInsn "cmp" for 0x400093>, <DisassemblerInsn "jae" for 0x400096>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000cf>, <DisassemblerInsn "mov" for 0x4000d7>, <DisassemblerInsn "add" for 0x4000da>, <DisassemblerInsn "mov" for 0x4000de>, <DisassemblerInsn "mov" for 0x4000e6>, <DisassemblerInsn "call" for 0x4000ea>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400098>, <DisassemblerInsn "mov" for 0x4000a0>, <DisassemblerInsn "mov" for 0x4000a8>, <DisassemblerInsn "mov" for 0x4000ab>, <DisassemblerInsn "lea" for 0x4000b0>, <DisassemblerInsn "mov" for 0x4000b7>, <DisassemblerInsn "call" for 0x4000b9>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40002a>, <DisassemblerInsn "mov" for 0x400032>, <DisassemblerInsn "lea" for 0x400037>, <DisassemblerInsn "mov" for 0x40003e>, <DisassemblerInsn "call" for 0x400040>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d84>, <DisassemblerInsn "add" for 0x400d8b>, <DisassemblerInsn "ret" for 0x400d92>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400007>, <DisassemblerInsn "mov" for 0x40000f>, <DisassemblerInsn "add" for 0x400012>, <DisassemblerInsn "mov" for 0x400018>, <DisassemblerInsn "cmp" for 0x400020>, <DisassemblerInsn "je" for 0x400028>]'}], 'cfg_block_detailed_info': [{'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, rax>', '<add~~rcx, 8>', '<mov~~qword ptr [rsp + 0x160], rcx>', '<mov~~rdi, qword ptr [rax + 8]>', '<call~~0x500008>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x174], eax>', '<jmp~~0x400d84>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~rdx, rcx>', '<add~~rdx, 0x74>', '<mov~~qword ptr [rsp + 0x168], rdx>', '<mov~~dword ptr [rcx + 0x74], eax>', '<add~~eax, -0x21>', '<cmp~~eax, -0x20>', '<jae~~0x4000cf>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, rax>', '<add~~rcx, 0x18>', '<mov~~qword ptr [rsp + 0x148], rcx>', '<mov~~rdi, qword ptr [rax + 0x18]>', '<call~~0x500008>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x160]>', '<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x29ca]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x2a1a]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x174]>', '<add~~rsp, 0x188>', '<ret~~>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x188>', '<mov~~qword ptr [rsp + 0x178], rdi>', '<mov~~rax, rdi>', '<add~~rax, 0xb8>', '<mov~~qword ptr [rsp + 0x180], rax>', '<cmp~~qword ptr [rdi + 0xb8], 0>', '<je~~0x400056>']}], 'cfg_edge_info': [(0, 1), (2, 4), (0, 2), (3, 6), (1, 3), (4, 7), (3, 5)]}]}
{'avresample_open': [4194304, 4194346, 4194373, 4194390, 4194422]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_after/O2/utils.o---after
The extraction of function: avresample_open
[4194304, 4194346, 4194373, 4194390, 4194422]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 145 nodes and 234 edges in CFGEmulated.
It has 145 nodes and 303 edges in CDG.
It has 2757 nodes and 3730 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194304, 4194346, 4194373, 4194390, 4194422]
{4194304, 4197396, 4197409, 4196898, 4194346, 4195882, 4197422, 4195383, 4195899, 4196932, 4194373, 4195912, 4196427, 4197455, 4195413, 4194390, 4194903, 4197481, 4196969, 4194925, 4196462, 4195442, 4194422, 4197494, 4195458, 4195976, 4197001, 4194456, 4195484, 4196512, 4197540, 4195500, 4197036, 4196028, 4194494, 4197568, 4196544, 4195016, 4194511, 4197073, 4197588, 4195548, 4196582, 4197608, 4195561, 4194543, 4195056, 4197624, 4197116, 4195583, 4195072, 4196620, 4194584, 4195097, 4197659, 4196123, 4197149, 4195614, 4195619, 4197159, 4195116, 4197679, 4195634, 4194622, 4195135, 4196673, 4197699, 4194639, 4195668, 4197719, 4196187, 4195168, 4197222, 4196200, 4195690, 4197739, 4196731, 4195198, 4197764, 4197259, 4197269, 4195223, 4195737, 4196257, 4194725, 4195247, 4195770, 4194752, 4195786, 4196818, 4195294, 4194784, 4196334, 4197359, 4196855}
[20, 69, 93, 13, 45, 36, 73, 8, 33, 50, 23, 37, 5, 72, 43, 18, 138, 46, 9, 136, 114, 59, 103, 62, 64, 133, 7, 67, 14, 41, 40, 52, 82, 31, 110, 129, 34, 49, 112, 28, 71, 22, 77, 60, 131, 68, 24, 0, 70, 17, 122, 55, 140, 104, 76, 65, 61, 120, 6, 105, 109, 128, 19, 83, 101, 56, 100, 111, 25, 121, 97, 94, 126, 48, 117, 87, 66, 21, 84, 57, 86, 44, 26, 142, 79, 81, 12, 32, 42, 90, 107, 1, 144, 91, 2, 15, 63, 118, 102, 78, 99, 124, 113, 134, 54, 92, 27, 39, 80]
The execution time of patched slicing information extraction via angr: 0:00:17.974699
{'avresample_open': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001c0>, <DisassemblerInsn "mov" for 0x4001c8>, <DisassemblerInsn "mov" for 0x4001d0>, <DisassemblerInsn "cmp" for 0x4001d3>, <DisassemblerInsn "setne" for 0x4001d6>, <DisassemblerInsn "mov" for 0x4001d9>, <DisassemblerInsn "mov" for 0x4001e0>, <DisassemblerInsn "mov" for 0x4001e8>, <DisassemblerInsn "mov" for 0x4001ef>, <DisassemblerInsn "movzx" for 0x4001f6>, <DisassemblerInsn "and" for 0x4001f9>, <DisassemblerInsn "mov" for 0x4001fc>, <DisassemblerInsn "or" for 0x400202>, <DisassemblerInsn "mov" for 0x400204>, <DisassemblerInsn "and" for 0x40020b>, <DisassemblerInsn "movzx" for 0x40020d>, <DisassemblerInsn "mov" for 0x400210>, <DisassemblerInsn "add" for 0x400213>, <DisassemblerInsn "mov" for 0x40021a>, <DisassemblerInsn "mov" for 0x400222>, <DisassemblerInsn "mov" for 0x400228>, <DisassemblerInsn "add" for 0x40022b>, <DisassemblerInsn "mov" for 0x40022f>, <DisassemblerInsn "mov" for 0x400237>, <DisassemblerInsn "mov" for 0x40023a>, <DisassemblerInsn "add" for 0x40023d>, <DisassemblerInsn "mov" for 0x400241>, <DisassemblerInsn "mov" for 0x400249>, <DisassemblerInsn "cmp" for 0x40024b>, <DisassemblerInsn "mov" for 0x40024e>, <DisassemblerInsn "jne" for 0x400255>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007a1>, <DisassemblerInsn "mov" for 0x4007a9>, <DisassemblerInsn "mov" for 0x4007b1>, <DisassemblerInsn "cmp" for 0x4007b8>, <DisassemblerInsn "setne" for 0x4007bb>, <DisassemblerInsn "mov" for 0x4007be>, <DisassemblerInsn "and" for 0x4007c1>, <DisassemblerInsn "movzx" for 0x4007c5>, <DisassemblerInsn "mov" for 0x4007c9>, <DisassemblerInsn "mov" for 0x4007cf>, <DisassemblerInsn "test" for 0x4007d4>, <DisassemblerInsn "mov" for 0x4007d7>, <DisassemblerInsn "mov" for 0x4007dc>, <DisassemblerInsn "jne" for 0x4007e3>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008c0>, <DisassemblerInsn "mov" for 0x4008c8>, <DisassemblerInsn "mov" for 0x4008cd>, <DisassemblerInsn "mov" for 0x4008d3>, <DisassemblerInsn "xor" for 0x4008d5>, <DisassemblerInsn "mov" for 0x4008d7>, <DisassemblerInsn "mov" for 0x4008db>, <DisassemblerInsn "mov" for 0x4008e0>, <DisassemblerInsn "jmp" for 0x4008e4>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000ef>, <DisassemblerInsn "mov" for 0x4000f7>, <DisassemblerInsn "mov" for 0x4000fe>, <DisassemblerInsn "add" for 0x400101>, <DisassemblerInsn "mov" for 0x400105>, <DisassemblerInsn "mov" for 0x40010d>, <DisassemblerInsn "add" for 0x400110>, <DisassemblerInsn "cmp" for 0x400113>, <DisassemblerInsn "jae" for 0x400116>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005ea>, <DisassemblerInsn "mov" for 0x4005f2>, <DisassemblerInsn "mov" for 0x4005f9>, <DisassemblerInsn "mov" for 0x400600>, <DisassemblerInsn "mov" for 0x400607>, <DisassemblerInsn "and" for 0x40060e>, <DisassemblerInsn "movzx" for 0x400611>, <DisassemblerInsn "mov" for 0x400614>, <DisassemblerInsn "mov" for 0x40061b>, <DisassemblerInsn "cmp" for 0x400621>, <DisassemblerInsn "jne" for 0x400624>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40053e>, <DisassemblerInsn "mov" for 0x400546>, <DisassemblerInsn "cmp" for 0x400548>, <DisassemblerInsn "mov" for 0x40054b>, <DisassemblerInsn "jne" for 0x400552>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40086e>, <DisassemblerInsn "mov" for 0x400876>, <DisassemblerInsn "mov" for 0x40087b>, <DisassemblerInsn "mov" for 0x400882>, <DisassemblerInsn "mov" for 0x40088c>, <DisassemblerInsn "mov" for 0x40088e>, <DisassemblerInsn "mov" for 0x400892>, <DisassemblerInsn "mov" for 0x400897>, <DisassemblerInsn "jmp" for 0x40089b>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000cf>, <DisassemblerInsn "mov" for 0x4000d7>, <DisassemblerInsn "add" for 0x4000da>, <DisassemblerInsn "mov" for 0x4000de>, <DisassemblerInsn "mov" for 0x4000e6>, <DisassemblerInsn "call" for 0x4000ea>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400300>, <DisassemblerInsn "mov" for 0x400302>, <DisassemblerInsn "mov" for 0x40030a>, <DisassemblerInsn "mov" for 0x400311>, <DisassemblerInsn "call" for 0x400314>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006bc>, <DisassemblerInsn "mov" for 0x4006c4>, <DisassemblerInsn "mov" for 0x4006cc>, <DisassemblerInsn "mov" for 0x4006d4>, <DisassemblerInsn "cmp" for 0x4006d6>, <DisassemblerInsn "setne" for 0x4006d9>, <DisassemblerInsn "and" for 0x4006dc>, <DisassemblerInsn "movzx" for 0x4006df>, <DisassemblerInsn "mov" for 0x4006e2>, <DisassemblerInsn "add" for 0x4006e8>, <DisassemblerInsn "xor" for 0x4006ee>, <DisassemblerInsn "test" for 0x4006f0>, <DisassemblerInsn "mov" for 0x4006f4>, <DisassemblerInsn "mov" for 0x4006f7>, <DisassemblerInsn "mov" for 0x4006ff>, <DisassemblerInsn "mov" for 0x400706>, <DisassemblerInsn "mov" for 0x40070d>, <DisassemblerInsn "jne" for 0x400715>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002c8>, <DisassemblerInsn "mov" for 0x4002cf>, <DisassemblerInsn "mov" for 0x4002d6>, <DisassemblerInsn "or" for 0x4002dd>, <DisassemblerInsn "test" for 0x4002df>, <DisassemblerInsn "mov" for 0x4002e2>, <DisassemblerInsn "jne" for 0x4002e9>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004dc>, <DisassemblerInsn "cmp" for 0x4004e4>, <DisassemblerInsn "jne" for 0x4004e7>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400076>, <DisassemblerInsn "mov" for 0x40007e>, <DisassemblerInsn "add" for 0x400081>, <DisassemblerInsn "mov" for 0x400085>, <DisassemblerInsn "mov" for 0x40008d>, <DisassemblerInsn "add" for 0x400090>, <DisassemblerInsn "cmp" for 0x400093>, <DisassemblerInsn "jae" for 0x400096>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400869>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400319>, <DisassemblerInsn "mov" for 0x400320>, <DisassemblerInsn "call" for 0x400327>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001e0>, <DisassemblerInsn "mov" for 0x4001e8>, <DisassemblerInsn "mov" for 0x4001ef>, <DisassemblerInsn "movzx" for 0x4001f6>, <DisassemblerInsn "and" for 0x4001f9>, <DisassemblerInsn "mov" for 0x4001fc>, <DisassemblerInsn "or" for 0x400202>, <DisassemblerInsn "mov" for 0x400204>, <DisassemblerInsn "and" for 0x40020b>, <DisassemblerInsn "movzx" for 0x40020d>, <DisassemblerInsn "mov" for 0x400210>, <DisassemblerInsn "add" for 0x400213>, <DisassemblerInsn "mov" for 0x40021a>, <DisassemblerInsn "mov" for 0x400222>, <DisassemblerInsn "mov" for 0x400228>, <DisassemblerInsn "add" for 0x40022b>, <DisassemblerInsn "mov" for 0x40022f>, <DisassemblerInsn "mov" for 0x400237>, <DisassemblerInsn "mov" for 0x40023a>, <DisassemblerInsn "add" for 0x40023d>, <DisassemblerInsn "mov" for 0x400241>, <DisassemblerInsn "mov" for 0x400249>, <DisassemblerInsn "cmp" for 0x40024b>, <DisassemblerInsn "mov" for 0x40024e>, <DisassemblerInsn "jne" for 0x400255>]'}, {'block_Idx': 138, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d2f>, <DisassemblerInsn "add" for 0x400d37>, <DisassemblerInsn "call" for 0x400d3e>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004ff>, <DisassemblerInsn "mov" for 0x400507>, <DisassemblerInsn "add" for 0x40050a>, <DisassemblerInsn "mov" for 0x40050e>, <DisassemblerInsn "mov" for 0x400516>, <DisassemblerInsn "call" for 0x400519>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d84>, <DisassemblerInsn "add" for 0x400d8b>, <DisassemblerInsn "ret" for 0x400d92>]'}, {'block_Idx': 136, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d1b>, <DisassemblerInsn "add" for 0x400d23>, <DisassemblerInsn "call" for 0x400d2a>]'}, {'block_Idx': 114, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400455>, <DisassemblerInsn "mov" for 0x40045d>, <DisassemblerInsn "mov" for 0x40045f>, <DisassemblerInsn "mov" for 0x400466>, <DisassemblerInsn "cmp" for 0x40046d>, <DisassemblerInsn "jne" for 0x400470>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005ca>, <DisassemblerInsn "mov" for 0x4005cc>, <DisassemblerInsn "cmp" for 0x4005d4>, <DisassemblerInsn "sete" for 0x4005d7>, <DisassemblerInsn "mov" for 0x4005da>, <DisassemblerInsn "mov" for 0x4005dc>, <DisassemblerInsn "mov" for 0x4005e3>, <DisassemblerInsn "mov" for 0x4005ea>, <DisassemblerInsn "mov" for 0x4005f2>, <DisassemblerInsn "mov" for 0x4005f9>, <DisassemblerInsn "mov" for 0x400600>, <DisassemblerInsn "mov" for 0x400607>, <DisassemblerInsn "and" for 0x40060e>, <DisassemblerInsn "movzx" for 0x400611>, <DisassemblerInsn "mov" for 0x400614>, <DisassemblerInsn "mov" for 0x40061b>, <DisassemblerInsn "cmp" for 0x400621>, <DisassemblerInsn "jne" for 0x400624>]'}, {'block_Idx': 103, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400aac>, <DisassemblerInsn "mov" for 0x400aaf>, <DisassemblerInsn "mov" for 0x400ab7>, <DisassemblerInsn "mov" for 0x400abe>, <DisassemblerInsn "cmp" for 0x400ac3>, <DisassemblerInsn "mov" for 0x400ac7>, <DisassemblerInsn "je" for 0x400acb>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40075b>, <DisassemblerInsn "cmp" for 0x400763>, <DisassemblerInsn "jne" for 0x400766>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40084b>, <DisassemblerInsn "mov" for 0x40084f>, <DisassemblerInsn "mov" for 0x400854>, <DisassemblerInsn "test" for 0x400858>, <DisassemblerInsn "mov" for 0x40085b>, <DisassemblerInsn "mov" for 0x400860>, <DisassemblerInsn "jne" for 0x400867>]'}, {'block_Idx': 133, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c76>, <DisassemblerInsn "mov" for 0x400c79>, <DisassemblerInsn "mov" for 0x400c81>, <DisassemblerInsn "mov" for 0x400c88>, <DisassemblerInsn "xor" for 0x400c8d>, <DisassemblerInsn "cmp" for 0x400c8f>, <DisassemblerInsn "mov" for 0x400c93>, <DisassemblerInsn "mov" for 0x400c97>, <DisassemblerInsn "jne" for 0x400c9e>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400098>, <DisassemblerInsn "mov" for 0x4000a0>, <DisassemblerInsn "mov" for 0x4000a8>, <DisassemblerInsn "mov" for 0x4000ab>, <DisassemblerInsn "lea" for 0x4000b0>, <DisassemblerInsn "mov" for 0x4000b7>, <DisassemblerInsn "call" for 0x4000b9>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400688>, <DisassemblerInsn "mov" for 0x400690>, <DisassemblerInsn "cmp" for 0x400693>, <DisassemblerInsn "setne" for 0x400696>, <DisassemblerInsn "and" for 0x400699>, <DisassemblerInsn "movzx" for 0x40069b>, <DisassemblerInsn "mov" for 0x40069e>, <DisassemblerInsn "add" for 0x4006a4>, <DisassemblerInsn "mov" for 0x4006ab>, <DisassemblerInsn "mov" for 0x4006b3>, <DisassemblerInsn "jmp" for 0x4006ba>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400118>, <DisassemblerInsn "mov" for 0x400120>, <DisassemblerInsn "mov" for 0x400128>, <DisassemblerInsn "mov" for 0x40012b>, <DisassemblerInsn "lea" for 0x400130>, <DisassemblerInsn "mov" for 0x400137>, <DisassemblerInsn "call" for 0x400139>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40056a>, <DisassemblerInsn "mov" for 0x400572>, <DisassemblerInsn "mov" for 0x40057a>, <DisassemblerInsn "mov" for 0x400581>, <DisassemblerInsn "cmp" for 0x400584>, <DisassemblerInsn "setne" for 0x400586>, <DisassemblerInsn "mov" for 0x400589>, <DisassemblerInsn "mov" for 0x400590>, <DisassemblerInsn "jmp" for 0x400597>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400554>, <DisassemblerInsn "xor" for 0x40055c>, <DisassemblerInsn "cmp" for 0x40055e>, <DisassemblerInsn "mov" for 0x400561>, <DisassemblerInsn "je" for 0x400568>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40032c>, <DisassemblerInsn "mov" for 0x400333>, <DisassemblerInsn "call" for 0x40033a>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400532>, <DisassemblerInsn "mov" for 0x400534>, <DisassemblerInsn "mov" for 0x40053c>, <DisassemblerInsn "mov" for 0x40053e>, <DisassemblerInsn "mov" for 0x400546>, <DisassemblerInsn "cmp" for 0x400548>, <DisassemblerInsn "mov" for 0x40054b>, <DisassemblerInsn "jne" for 0x400552>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40049c>, <DisassemblerInsn "mov" for 0x4004a4>, <DisassemblerInsn "call" for 0x4004a7>]'}, {'block_Idx': 110, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003de>, <DisassemblerInsn "mov" for 0x4003e5>, <DisassemblerInsn "sub" for 0x4003ec>, <DisassemblerInsn "sete" for 0x4003ef>, <DisassemblerInsn "sub" for 0x4003f2>, <DisassemblerInsn "sete" for 0x4003f5>, <DisassemblerInsn "or" for 0x4003f8>, <DisassemblerInsn "mov" for 0x4003fa>, <DisassemblerInsn "mov" for 0x4003ff>, <DisassemblerInsn "test" for 0x400404>, <DisassemblerInsn "cmovne" for 0x400407>, <DisassemblerInsn "mov" for 0x40040a>, <DisassemblerInsn "mov" for 0x400411>, <DisassemblerInsn "mov" for 0x400419>, <DisassemblerInsn "mov" for 0x400421>, <DisassemblerInsn "mov" for 0x400428>, <DisassemblerInsn "mov" for 0x40042a>, <DisassemblerInsn "call" for 0x400432>]'}, {'block_Idx': 129, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ce8>, <DisassemblerInsn "mov" for 0x400cf0>, <DisassemblerInsn "call" for 0x400cf3>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400482>, <DisassemblerInsn "mov" for 0x400484>, <DisassemblerInsn "mov" for 0x40048c>, <DisassemblerInsn "mov" for 0x40048f>, <DisassemblerInsn "cmp" for 0x400497>, <DisassemblerInsn "jne" for 0x40049a>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40062a>, <DisassemblerInsn "cmp" for 0x400632>, <DisassemblerInsn "jne" for 0x400635>]'}, {'block_Idx': 112, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b8b>, <DisassemblerInsn "cmp" for 0x400b90>, <DisassemblerInsn "je" for 0x400b93>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40048f>, <DisassemblerInsn "cmp" for 0x400497>, <DisassemblerInsn "jne" for 0x40049a>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a0f>, <DisassemblerInsn "mov" for 0x400a14>, <DisassemblerInsn "mov" for 0x400a18>, <DisassemblerInsn "cmp" for 0x400a1d>, <DisassemblerInsn "je" for 0x400a20>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40026d>, <DisassemblerInsn "mov" for 0x400274>, <DisassemblerInsn "mov" for 0x40027c>, <DisassemblerInsn "mov" for 0x400283>, <DisassemblerInsn "and" for 0x40028a>, <DisassemblerInsn "movzx" for 0x40028d>, <DisassemblerInsn "mov" for 0x400290>, <DisassemblerInsn "add" for 0x400293>, <DisassemblerInsn "mov" for 0x40029a>, <DisassemblerInsn "mov" for 0x4002a2>, <DisassemblerInsn "mov" for 0x4002a8>, <DisassemblerInsn "add" for 0x4002ab>, <DisassemblerInsn "mov" for 0x4002af>, <DisassemblerInsn "cmp" for 0x4002b7>, <DisassemblerInsn "mov" for 0x4002bb>, <DisassemblerInsn "jne" for 0x4002c2>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400997>, <DisassemblerInsn "mov" for 0x40099f>, <DisassemblerInsn "mov" for 0x4009a7>, <DisassemblerInsn "mov" for 0x4009af>, <DisassemblerInsn "mov" for 0x4009b4>, <DisassemblerInsn "mov" for 0x4009b9>, <DisassemblerInsn "mov" for 0x4009bb>, <DisassemblerInsn "cmp" for 0x4009bd>, <DisassemblerInsn "cmovg" for 0x4009bf>, <DisassemblerInsn "mov" for 0x4009c2>, <DisassemblerInsn "xor" for 0x4009c4>, <DisassemblerInsn "lea" for 0x4009c6>, <DisassemblerInsn "call" for 0x4009cd>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400646>]'}, {'block_Idx': 131, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c2e>, <DisassemblerInsn "mov" for 0x400c31>, <DisassemblerInsn "mov" for 0x400c39>, <DisassemblerInsn "mov" for 0x400c40>, <DisassemblerInsn "cmp" for 0x400c45>, <DisassemblerInsn "mov" for 0x400c49>, <DisassemblerInsn "je" for 0x400c4d>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400768>, <DisassemblerInsn "mov" for 0x400770>, <DisassemblerInsn "mov" for 0x400778>, <DisassemblerInsn "mov" for 0x400782>, <DisassemblerInsn "xor" for 0x400784>, <DisassemblerInsn "mov" for 0x400786>, <DisassemblerInsn "mov" for 0x40078d>, <DisassemblerInsn "mov" for 0x400795>, <DisassemblerInsn "jmp" for 0x40079c>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400466>, <DisassemblerInsn "cmp" for 0x40046d>, <DisassemblerInsn "jne" for 0x400470>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400007>, <DisassemblerInsn "mov" for 0x40000f>, <DisassemblerInsn "add" for 0x400012>, <DisassemblerInsn "mov" for 0x400018>, <DisassemblerInsn "cmp" for 0x400020>, <DisassemblerInsn "je" for 0x400028>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400979>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a5>, <DisassemblerInsn "mov" for 0x4001ad>, <DisassemblerInsn "cmp" for 0x4001af>, <DisassemblerInsn "mov" for 0x4001b7>, <DisassemblerInsn "jne" for 0x4001be>]'}, {'block_Idx': 122, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c21>, <DisassemblerInsn "call" for 0x400c29>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40071b>, <DisassemblerInsn "mov" for 0x400723>, <DisassemblerInsn "mov" for 0x40072b>, <DisassemblerInsn "mov" for 0x400732>, <DisassemblerInsn "mov" for 0x400739>, <DisassemblerInsn "mov" for 0x400741>, <DisassemblerInsn "cmp" for 0x400743>, <DisassemblerInsn "mov" for 0x400746>, <DisassemblerInsn "mov" for 0x40074d>, <DisassemblerInsn "jne" for 0x400755>]'}, {'block_Idx': 140, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d43>, <DisassemblerInsn "add" for 0x400d4b>, <DisassemblerInsn "call" for 0x400d52>]'}, {'block_Idx': 104, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400437>, <DisassemblerInsn "mov" for 0x40043f>, <DisassemblerInsn "mov" for 0x400442>, <DisassemblerInsn "lea" for 0x400447>, <DisassemblerInsn "mov" for 0x40044e>, <DisassemblerInsn "call" for 0x400450>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4007e9>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400523>, <DisassemblerInsn "mov" for 0x40052b>, <DisassemblerInsn "call" for 0x40052d>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400648>, <DisassemblerInsn "mov" for 0x400650>, <DisassemblerInsn "mov" for 0x400658>, <DisassemblerInsn "cmp" for 0x40065a>, <DisassemblerInsn "setne" for 0x40065d>, <DisassemblerInsn "and" for 0x400660>, <DisassemblerInsn "movzx" for 0x400663>, <DisassemblerInsn "mov" for 0x400666>, <DisassemblerInsn "add" for 0x40066c>, <DisassemblerInsn "xor" for 0x400672>, <DisassemblerInsn "mov" for 0x400674>, <DisassemblerInsn "mov" for 0x40067b>, <DisassemblerInsn "jmp" for 0x400683>]'}, {'block_Idx': 120, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400cd4>, <DisassemblerInsn "add" for 0x400cdc>, <DisassemblerInsn "call" for 0x400ce3>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400045>, <DisassemblerInsn "mov" for 0x40004a>, <DisassemblerInsn "jmp" for 0x400051>]'}, {'block_Idx': 105, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003af>, <DisassemblerInsn "mov" for 0x4003b6>, <DisassemblerInsn "sub" for 0x4003bd>, <DisassemblerInsn "sete" for 0x4003c0>, <DisassemblerInsn "sub" for 0x4003c3>, <DisassemblerInsn "sete" for 0x4003c6>, <DisassemblerInsn "or" for 0x4003c9>, <DisassemblerInsn "mov" for 0x4003cb>, <DisassemblerInsn "test" for 0x4003d0>, <DisassemblerInsn "mov" for 0x4003d3>, <DisassemblerInsn "jne" for 0x4003da>]'}, {'block_Idx': 109, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4003dc>]'}, {'block_Idx': 128, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400bef>, <DisassemblerInsn "mov" for 0x400bf2>, <DisassemblerInsn "mov" for 0x400bfa>, <DisassemblerInsn "mov" for 0x400c01>, <DisassemblerInsn "cmp" for 0x400c06>, <DisassemblerInsn "mov" for 0x400c0a>, <DisassemblerInsn "je" for 0x400c0e>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40013e>, <DisassemblerInsn "mov" for 0x400143>, <DisassemblerInsn "jmp" for 0x40014a>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400360>, <DisassemblerInsn "mov" for 0x400362>, <DisassemblerInsn "mov" for 0x400369>, <DisassemblerInsn "cmp" for 0x40036e>, <DisassemblerInsn "mov" for 0x400371>, <DisassemblerInsn "jl" for 0x400378>]'}, {'block_Idx': 101, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009f7>, <DisassemblerInsn "mov" for 0x4009fc>, <DisassemblerInsn "mov" for 0x400a04>, <DisassemblerInsn "mov" for 0x400a06>, <DisassemblerInsn "mov" for 0x400a0b>, <DisassemblerInsn "mov" for 0x400a0f>, <DisassemblerInsn "mov" for 0x400a14>, <DisassemblerInsn "mov" for 0x400a18>, <DisassemblerInsn "cmp" for 0x400a1d>, <DisassemblerInsn "je" for 0x400a20>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007ee>, <DisassemblerInsn "mov" for 0x4007f6>, <DisassemblerInsn "mov" for 0x4007fd>, <DisassemblerInsn "mov" for 0x400805>, <DisassemblerInsn "mov" for 0x40080c>, <DisassemblerInsn "mov" for 0x400814>, <DisassemblerInsn "mov" for 0x400819>, <DisassemblerInsn "mov" for 0x40081d>, <DisassemblerInsn "xor" for 0x40081f>, <DisassemblerInsn "mov" for 0x400822>, <DisassemblerInsn "mov" for 0x400826>, <DisassemblerInsn "cmp" for 0x40082c>, <DisassemblerInsn "mov" for 0x40082f>, <DisassemblerInsn "mov" for 0x400836>, <DisassemblerInsn "mov" for 0x40083e>, <DisassemblerInsn "je" for 0x400845>]'}, {'block_Idx': 100, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ca4>, <DisassemblerInsn "mov" for 0x400cac>, <DisassemblerInsn "mov" for 0x400cb0>, <DisassemblerInsn "add" for 0x400cb4>, <DisassemblerInsn "call" for 0x400cbb>]'}, {'block_Idx': 111, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400cc0>, <DisassemblerInsn "add" for 0x400cc8>, <DisassemblerInsn "call" for 0x400ccf>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4002eb>]'}, {'block_Idx': 121, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c4f>, <DisassemblerInsn "xor" for 0x400c57>, <DisassemblerInsn "cmp" for 0x400c59>, <DisassemblerInsn "mov" for 0x400c5c>, <DisassemblerInsn "je" for 0x400c63>]'}, {'block_Idx': 97, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a44>, <DisassemblerInsn "mov" for 0x400a47>, <DisassemblerInsn "mov" for 0x400a4f>, <DisassemblerInsn "mov" for 0x400a56>, <DisassemblerInsn "cmp" for 0x400a5b>, <DisassemblerInsn "mov" for 0x400a5f>, <DisassemblerInsn "je" for 0x400a63>]'}, {'block_Idx': 94, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009d2>, <DisassemblerInsn "mov" for 0x4009d5>, <DisassemblerInsn "mov" for 0x4009dd>, <DisassemblerInsn "mov" for 0x4009e4>, <DisassemblerInsn "cmp" for 0x4009e9>, <DisassemblerInsn "mov" for 0x4009ed>, <DisassemblerInsn "je" for 0x4009f1>]'}, {'block_Idx': 126, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c69>, <DisassemblerInsn "call" for 0x400c71>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005ba>, <DisassemblerInsn "mov" for 0x4005c2>, <DisassemblerInsn "call" for 0x4005c5>]'}, {'block_Idx': 117, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c14>, <DisassemblerInsn "cmp" for 0x400c1c>, <DisassemblerInsn "je" for 0x400c1f>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a89>, <DisassemblerInsn "mov" for 0x400a91>, <DisassemblerInsn "mov" for 0x400a99>, <DisassemblerInsn "mov" for 0x400a9b>, <DisassemblerInsn "xor" for 0x400a9e>, <DisassemblerInsn "lea" for 0x400aa0>, <DisassemblerInsn "call" for 0x400aa7>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40033f>, <DisassemblerInsn "mov" for 0x400346>, <DisassemblerInsn "mov" for 0x40034d>, <DisassemblerInsn "mov" for 0x40034f>, <DisassemblerInsn "cmp" for 0x400356>, <DisassemblerInsn "cmovg" for 0x400358>, <DisassemblerInsn "call" for 0x40035b>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400257>, <DisassemblerInsn "cmp" for 0x40025f>, <DisassemblerInsn "setne" for 0x400263>, <DisassemblerInsn "mov" for 0x400266>, <DisassemblerInsn "mov" for 0x40026d>, <DisassemblerInsn "mov" for 0x400274>, <DisassemblerInsn "mov" for 0x40027c>, <DisassemblerInsn "mov" for 0x400283>, <DisassemblerInsn "and" for 0x40028a>, <DisassemblerInsn "movzx" for 0x40028d>, <DisassemblerInsn "mov" for 0x400290>, <DisassemblerInsn "add" for 0x400293>, <DisassemblerInsn "mov" for 0x40029a>, <DisassemblerInsn "mov" for 0x4002a2>, <DisassemblerInsn "mov" for 0x4002a8>, <DisassemblerInsn "add" for 0x4002ab>, <DisassemblerInsn "mov" for 0x4002af>, <DisassemblerInsn "cmp" for 0x4002b7>, <DisassemblerInsn "mov" for 0x4002bb>, <DisassemblerInsn "jne" for 0x4002c2>]'}, {'block_Idx': 84, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008a0>, <DisassemblerInsn "mov" for 0x4008a7>, <DisassemblerInsn "add" for 0x4008af>, <DisassemblerInsn "mov" for 0x4008b6>, <DisassemblerInsn "cmp" for 0x4008bb>, <DisassemblerInsn "je" for 0x4008be>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40051e>, <DisassemblerInsn "jne" for 0x400521>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ad1>, <DisassemblerInsn "mov" for 0x400ad9>, <DisassemblerInsn "mov" for 0x400ae1>, <DisassemblerInsn "add" for 0x400ae4>, <DisassemblerInsn "mov" for 0x400ae8>, <DisassemblerInsn "mov" for 0x400aed>, <DisassemblerInsn "mov" for 0x400af0>, <DisassemblerInsn "mov" for 0x400af2>, <DisassemblerInsn "call" for 0x400af7>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400599>, <DisassemblerInsn "xor" for 0x4005a1>, <DisassemblerInsn "mov" for 0x4005a3>, <DisassemblerInsn "xor" for 0x4005a5>, <DisassemblerInsn "cmp" for 0x4005a7>, <DisassemblerInsn "mov" for 0x4005aa>, <DisassemblerInsn "mov" for 0x4005b1>, <DisassemblerInsn "je" for 0x4005b8>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002f0>, <DisassemblerInsn "mov" for 0x4002f8>, <DisassemblerInsn "call" for 0x4002fb>]'}, {'block_Idx': 142, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d57>, <DisassemblerInsn "add" for 0x400d5f>, <DisassemblerInsn "call" for 0x400d66>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a22>, <DisassemblerInsn "mov" for 0x400a2a>, <DisassemblerInsn "mov" for 0x400a32>, <DisassemblerInsn "mov" for 0x400a34>, <DisassemblerInsn "xor" for 0x400a36>, <DisassemblerInsn "lea" for 0x400a38>, <DisassemblerInsn "call" for 0x400a3f>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400941>, <DisassemblerInsn "mov" for 0x400948>, <DisassemblerInsn "mov" for 0x40094c>, <DisassemblerInsn "mov" for 0x400951>, <DisassemblerInsn "cmp" for 0x400955>, <DisassemblerInsn "sete" for 0x400958>, <DisassemblerInsn "and" for 0x40095c>, <DisassemblerInsn "test" for 0x40095f>, <DisassemblerInsn "mov" for 0x400962>, <DisassemblerInsn "mov" for 0x400965>, <DisassemblerInsn "mov" for 0x40096a>, <DisassemblerInsn "mov" for 0x40096f>, <DisassemblerInsn "jne" for 0x400973>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000be>, <DisassemblerInsn "mov" for 0x4000c3>, <DisassemblerInsn "jmp" for 0x4000ca>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004b9>, <DisassemblerInsn "mov" for 0x4004c1>, <DisassemblerInsn "add" for 0x4004c4>, <DisassemblerInsn "mov" for 0x4004cb>, <DisassemblerInsn "cmp" for 0x4004d3>, <DisassemblerInsn "je" for 0x4004da>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004e9>, <DisassemblerInsn "mov" for 0x4004f1>, <DisassemblerInsn "cmp" for 0x4004f3>, <DisassemblerInsn "mov" for 0x4004f6>, <DisassemblerInsn "jne" for 0x4004fd>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400411>, <DisassemblerInsn "mov" for 0x400419>, <DisassemblerInsn "mov" for 0x400421>, <DisassemblerInsn "mov" for 0x400428>, <DisassemblerInsn "mov" for 0x40042a>, <DisassemblerInsn "call" for 0x400432>]'}, {'block_Idx': 107, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b1d>, <DisassemblerInsn "cmp" for 0x400b22>, <DisassemblerInsn "je" for 0x400b25>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400056>, <DisassemblerInsn "mov" for 0x40005e>, <DisassemblerInsn "add" for 0x400061>, <DisassemblerInsn "mov" for 0x400065>, <DisassemblerInsn "mov" for 0x40006d>, <DisassemblerInsn "call" for 0x400071>]'}, {'block_Idx': 144, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d6b>, <DisassemblerInsn "mov" for 0x400d73>, <DisassemblerInsn "mov" for 0x400d77>, <DisassemblerInsn "mov" for 0x400d7d>, <DisassemblerInsn "mov" for 0x400d84>, <DisassemblerInsn "add" for 0x400d8b>, <DisassemblerInsn "ret" for 0x400d92>]'}, {'block_Idx': 91, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40037e>, <DisassemblerInsn "mov" for 0x400386>, <DisassemblerInsn "cmp" for 0x40038b>, <DisassemblerInsn "mov" for 0x40038e>, <DisassemblerInsn "jne" for 0x400395>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40002a>, <DisassemblerInsn "mov" for 0x400032>, <DisassemblerInsn "lea" for 0x400037>, <DisassemblerInsn "mov" for 0x40003e>, <DisassemblerInsn "call" for 0x400040>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40014f>, <DisassemblerInsn "mov" for 0x400156>, <DisassemblerInsn "mov" for 0x40015e>, <DisassemblerInsn "mov" for 0x400166>, <DisassemblerInsn "mov" for 0x400168>, <DisassemblerInsn "cmp" for 0x40016f>, <DisassemblerInsn "setg" for 0x400171>, <DisassemblerInsn "mov" for 0x400175>, <DisassemblerInsn "cmp" for 0x40017d>, <DisassemblerInsn "mov" for 0x40017f>, <DisassemblerInsn "cmovg" for 0x400181>, <DisassemblerInsn "mov" for 0x400184>, <DisassemblerInsn "and" for 0x400187>, <DisassemblerInsn "movzx" for 0x40018b>, <DisassemblerInsn "mov" for 0x40018f>, <DisassemblerInsn "cmp" for 0x400195>, <DisassemblerInsn "setl" for 0x400197>, <DisassemblerInsn "cmp" for 0x40019a>, <DisassemblerInsn "mov" for 0x40019c>, <DisassemblerInsn "jne" for 0x4001a3>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40090c>, <DisassemblerInsn "mov" for 0x400914>, <DisassemblerInsn "mov" for 0x40091b>, <DisassemblerInsn "mov" for 0x400923>, <DisassemblerInsn "mov" for 0x40092a>, <DisassemblerInsn "mov" for 0x400934>, <DisassemblerInsn "mov" for 0x400938>, <DisassemblerInsn "mov" for 0x40093d>, <DisassemblerInsn "mov" for 0x400941>, <DisassemblerInsn "mov" for 0x400948>, <DisassemblerInsn "mov" for 0x40094c>, <DisassemblerInsn "mov" for 0x400951>, <DisassemblerInsn "cmp" for 0x400955>, <DisassemblerInsn "sete" for 0x400958>, <DisassemblerInsn "and" for 0x40095c>, <DisassemblerInsn "test" for 0x40095f>, <DisassemblerInsn "mov" for 0x400962>, <DisassemblerInsn "mov" for 0x400965>, <DisassemblerInsn "mov" for 0x40096a>, <DisassemblerInsn "mov" for 0x40096f>, <DisassemblerInsn "jne" for 0x400973>]'}, {'block_Idx': 118, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b95>, <DisassemblerInsn "mov" for 0x400b9d>, <DisassemblerInsn "mov" for 0x400ba5>, <DisassemblerInsn "mov" for 0x400bad>, <DisassemblerInsn "mov" for 0x400bb2>, <DisassemblerInsn "mov" for 0x400bba>, <DisassemblerInsn "mov" for 0x400bbf>, <DisassemblerInsn "mov" for 0x400bc2>, <DisassemblerInsn "add" for 0x400bc5>, <DisassemblerInsn "cmp" for 0x400bc9>, <DisassemblerInsn "cmove" for 0x400bcd>, <DisassemblerInsn "mov" for 0x400bd1>, <DisassemblerInsn "mov" for 0x400bd3>, <DisassemblerInsn "mov" for 0x400bd5>, <DisassemblerInsn "mov" for 0x400bd7>, <DisassemblerInsn "cmp" for 0x400bda>, <DisassemblerInsn "sete" for 0x400be1>, <DisassemblerInsn "and" for 0x400be4>, <DisassemblerInsn "movzx" for 0x400be6>, <DisassemblerInsn "call" for 0x400bea>]'}, {'block_Idx': 102, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400afc>, <DisassemblerInsn "mov" for 0x400aff>, <DisassemblerInsn "mov" for 0x400b07>, <DisassemblerInsn "mov" for 0x400b0a>, <DisassemblerInsn "cmp" for 0x400b0f>, <DisassemblerInsn "mov" for 0x400b13>, <DisassemblerInsn "je" for 0x400b17>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a69>, <DisassemblerInsn "mov" for 0x400a71>, <DisassemblerInsn "add" for 0x400a74>, <DisassemblerInsn "mov" for 0x400a7b>, <DisassemblerInsn "cmp" for 0x400a80>, <DisassemblerInsn "je" for 0x400a87>]'}, {'block_Idx': 99, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400397>, <DisassemblerInsn "mov" for 0x40039e>, <DisassemblerInsn "cmp" for 0x4003a3>, <DisassemblerInsn "mov" for 0x4003a6>, <DisassemblerInsn "jae" for 0x4003ad>]'}, {'block_Idx': 124, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b66>, <DisassemblerInsn "mov" for 0x400b69>, <DisassemblerInsn "mov" for 0x400b71>, <DisassemblerInsn "mov" for 0x400b78>, <DisassemblerInsn "cmp" for 0x400b7d>, <DisassemblerInsn "mov" for 0x400b81>, <DisassemblerInsn "je" for 0x400b85>]'}, {'block_Idx': 113, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b27>, <DisassemblerInsn "mov" for 0x400b2f>, <DisassemblerInsn "mov" for 0x400b37>, <DisassemblerInsn "mov" for 0x400b3f>, <DisassemblerInsn "mov" for 0x400b47>, <DisassemblerInsn "mov" for 0x400b49>, <DisassemblerInsn "mov" for 0x400b4c>, <DisassemblerInsn "mov" for 0x400b4e>, <DisassemblerInsn "cmp" for 0x400b51>, <DisassemblerInsn "sete" for 0x400b58>, <DisassemblerInsn "and" for 0x400b5b>, <DisassemblerInsn "movzx" for 0x400b5d>, <DisassemblerInsn "call" for 0x400b61>]'}, {'block_Idx': 134, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400cf8>, <DisassemblerInsn "mov" for 0x400d00>, <DisassemblerInsn "mov" for 0x400d08>, <DisassemblerInsn "add" for 0x400d0f>, <DisassemblerInsn "call" for 0x400d16>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40063b>, <DisassemblerInsn "test" for 0x400642>, <DisassemblerInsn "jne" for 0x400644>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008e6>, <DisassemblerInsn "mov" for 0x4008ee>, <DisassemblerInsn "mov" for 0x4008f3>, <DisassemblerInsn "mov" for 0x4008f9>, <DisassemblerInsn "xor" for 0x4008fb>, <DisassemblerInsn "mov" for 0x4008fd>, <DisassemblerInsn "mov" for 0x400901>, <DisassemblerInsn "mov" for 0x400906>, <DisassemblerInsn "jmp" for 0x40090a>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400472>, <DisassemblerInsn "mov" for 0x40047a>, <DisassemblerInsn "call" for 0x40047d>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004ac>, <DisassemblerInsn "mov" for 0x4004ae>, <DisassemblerInsn "mov" for 0x4004b6>, <DisassemblerInsn "mov" for 0x4004b9>, <DisassemblerInsn "mov" for 0x4004c1>, <DisassemblerInsn "add" for 0x4004c4>, <DisassemblerInsn "mov" for 0x4004cb>, <DisassemblerInsn "cmp" for 0x4004d3>, <DisassemblerInsn "je" for 0x4004da>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40097b>, <DisassemblerInsn "mov" for 0x400980>, <DisassemblerInsn "mov" for 0x400988>, <DisassemblerInsn "mov" for 0x400992>, <DisassemblerInsn "mov" for 0x400997>, <DisassemblerInsn "mov" for 0x40099f>, <DisassemblerInsn "mov" for 0x4009a7>, <DisassemblerInsn "mov" for 0x4009af>, <DisassemblerInsn "mov" for 0x4009b4>, <DisassemblerInsn "mov" for 0x4009b9>, <DisassemblerInsn "mov" for 0x4009bb>, <DisassemblerInsn "cmp" for 0x4009bd>, <DisassemblerInsn "cmovg" for 0x4009bf>, <DisassemblerInsn "mov" for 0x4009c2>, <DisassemblerInsn "xor" for 0x4009c4>, <DisassemblerInsn "lea" for 0x4009c6>, <DisassemblerInsn "call" for 0x4009cd>]'}], 'cfg_block_detailed_info': [{'block_Idx': 20, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x148]>', '<mov~~rax, qword ptr [rsp + 0x160]>', '<mov~~rax, qword ptr [rax]>', '<cmp~~rax, qword ptr [rcx]>', '<setne~~al>', '<mov~~byte ptr [rsp + 0x147], al>', '<mov~~rdx, qword ptr [rsp + 0x178]>', '<mov~~al, byte ptr [rsp + 0x146]>', '<mov~~cl, byte ptr [rsp + 0x147]>', '<movzx~~esi, cl>', '<and~~esi, 1>', '<mov~~dword ptr [rdx + 0x84], esi>', '<or~~al, cl>', '<mov~~byte ptr [rsp + 0x11f], al>', '<and~~al, 1>', '<movzx~~eax, al>', '<mov~~rcx, rdx>', '<add~~rcx, 0x88>', '<mov~~qword ptr [rsp + 0x120], rcx>', '<mov~~dword ptr [rdx + 0x88], eax>', '<mov~~rax, rdx>', '<add~~rax, 0x14>', '<mov~~qword ptr [rsp + 0x128], rax>', '<mov~~ecx, dword ptr [rdx + 0x14]>', '<mov~~rax, rdx>', '<add~~rax, 0x24>', '<mov~~qword ptr [rsp + 0x130], rax>', '<mov~~al, 1>', '<cmp~~ecx, dword ptr [rdx + 0x24]>', '<mov~~byte ptr [rsp + 0x13f], al>', '<jne~~0x40026d>']}, {'block_Idx': 69, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x98]>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~edx, dword ptr [rsp + 0xbc]>', '<cmp~~edx, 0>', '<setne~~dl>', '<mov~~sil, dl>', '<and~~sil, 1>', '<movzx~~esi, sil>', '<mov~~dword ptr [rax + 0x98], esi>', '<mov~~eax, 1>', '<test~~dl, 1>', '<mov~~qword ptr [rsp + 0x78], rcx>', '<mov~~dword ptr [rsp + 0x80], eax>', '<jne~~0x40086e>']}, {'block_Idx': 93, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x98]>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~dword ptr [rax], 4>', '<mov~~dl, 1>', '<xor~~eax, eax>', '<mov~~byte ptr [rsp + 0x57], dl>', '<mov~~qword ptr [rsp + 0x58], rcx>', '<mov~~dword ptr [rsp + 0x64], eax>', '<jmp~~0x400941>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~dword ptr [rsp + 0x154], eax>', '<mov~~rdx, rcx>', '<add~~rdx, 0x78>', '<mov~~qword ptr [rsp + 0x158], rdx>', '<mov~~dword ptr [rcx + 0x78], eax>', '<add~~eax, -0x21>', '<cmp~~eax, -0x20>', '<jae~~0x40014f>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~dl, byte ptr [rsp + 0xcb]>', '<mov~~eax, dword ptr [rsp + 0xcc]>', '<mov~~dword ptr [rsp + 0xbc], eax>', '<mov~~byte ptr [rsp + 0xc3], dl>', '<and~~dl, 1>', '<movzx~~edx, dl>', '<mov~~dword ptr [rsp + 0xc4], edx>', '<mov~~dword ptr [rcx + 0x90], edx>', '<cmp~~eax, 0>', '<jne~~0x4006bc>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x108]>', '<mov~~eax, dword ptr [rax]>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0xdc], eax>', '<jne~~0x40056a>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x78]>', '<mov~~eax, dword ptr [rsp + 0x80]>', '<mov~~dword ptr [rdx + 0xf4], 1>', '<mov~~dl, 1>', '<mov~~byte ptr [rsp + 0x57], dl>', '<mov~~qword ptr [rsp + 0x58], rcx>', '<mov~~dword ptr [rsp + 0x64], eax>', '<jmp~~0x400941>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, rax>', '<add~~rcx, 0x18>', '<mov~~qword ptr [rsp + 0x148], rcx>', '<mov~~rdi, qword ptr [rax + 0x18]>', '<call~~0x500008>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~dword ptr [rsp + 0xf8], ecx>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500010>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~sil, byte ptr [rsp + 0xc3]>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x110]>', '<mov~~ecx, dword ptr [rcx]>', '<cmp~~ecx, dword ptr [rax + 0x20]>', '<setne~~cl>', '<and~~cl, 1>', '<movzx~~edx, cl>', '<mov~~dword ptr [rax + 0x94], edx>', '<add~~rax, 0x90>', '<xor~~ecx, ecx>', '<test~~sil, 1>', '<mov~~rsi, rax>', '<mov~~qword ptr [rsp + 0xa0], rsi>', '<mov~~dword ptr [rsp + 0xa8], edx>', '<mov~~byte ptr [rsp + 0xaf], cl>', '<mov~~qword ptr [rsp + 0xb0], rax>', '<jne~~0x4007ee>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x140]>', '<mov~~dl, byte ptr [rsp + 0x107]>', '<mov~~cl, byte ptr [rsp + 0x11f]>', '<or~~cl, dl>', '<test~~cl, 1>', '<mov~~dword ptr [rsp + 0x118], eax>', '<jne~~0x4002f0>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x120]>', '<cmp~~dword ptr [rax], 0>', '<jne~~0x40053e>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~rdx, rcx>', '<add~~rdx, 0x74>', '<mov~~qword ptr [rsp + 0x168], rdx>', '<mov~~dword ptr [rcx + 0x74], eax>', '<add~~eax, -0x21>', '<cmp~~eax, -0x20>', '<jae~~0x4000cf>']}, {'block_Idx': 72, 'blockInsts': ['<jmp~~0x40097b>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0xf8]>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<call~~0x500018>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x178]>', '<mov~~al, byte ptr [rsp + 0x146]>', '<mov~~cl, byte ptr [rsp + 0x147]>', '<movzx~~esi, cl>', '<and~~esi, 1>', '<mov~~dword ptr [rdx + 0x84], esi>', '<or~~al, cl>', '<mov~~byte ptr [rsp + 0x11f], al>', '<and~~al, 1>', '<movzx~~eax, al>', '<mov~~rcx, rdx>', '<add~~rcx, 0x88>', '<mov~~qword ptr [rsp + 0x120], rcx>', '<mov~~dword ptr [rdx + 0x88], eax>', '<mov~~rax, rdx>', '<add~~rax, 0x14>', '<mov~~qword ptr [rsp + 0x128], rax>', '<mov~~ecx, dword ptr [rdx + 0x14]>', '<mov~~rax, rdx>', '<add~~rax, 0x24>', '<mov~~qword ptr [rsp + 0x130], rax>', '<mov~~al, 1>', '<cmp~~ecx, dword ptr [rdx + 0x24]>', '<mov~~byte ptr [rsp + 0x13f], al>', '<jne~~0x40026d>']}, {'block_Idx': 138, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<add~~rdi, 0xd0>', '<call~~0x500070>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, rax>', '<add~~rcx, 0x20>', '<mov~~qword ptr [rsp + 0xd0], rcx>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500028>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x174]>', '<add~~rsp, 0x188>', '<ret~~>']}, {'block_Idx': 136, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<add~~rdi, 0xc8>', '<call~~0x500068>']}, {'block_Idx': 114, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x168]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x118], eax>', '<mov~~eax, dword ptr [rsp + 0x118]>', '<cmp~~eax, 1>', '<jne~~0x40048f>']}, {'block_Idx': 59, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x108]>', '<cmp~~ecx, 0>', '<sete~~cl>', '<mov~~eax, dword ptr [rax]>', '<mov~~byte ptr [rsp + 0xcb], cl>', '<mov~~dword ptr [rsp + 0xcc], eax>', '<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~dl, byte ptr [rsp + 0xcb]>', '<mov~~eax, dword ptr [rsp + 0xcc]>', '<mov~~dword ptr [rsp + 0xbc], eax>', '<mov~~byte ptr [rsp + 0xc3], dl>', '<and~~dl, 1>', '<movzx~~edx, dl>', '<mov~~dword ptr [rsp + 0xc4], edx>', '<mov~~dword ptr [rcx + 0x90], edx>', '<cmp~~eax, 0>', '<jne~~0x4006bc>']}, {'block_Idx': 103, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rax + 0xb0], rcx>', '<mov~~eax, 0xffffffea>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<je~~0x400ca4>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe0]>', '<cmp~~dword ptr [rax], 0>', '<jne~~0x4007a1>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x74]>', '<mov~~rcx, qword ptr [rsp + 0x68]>', '<mov~~dl, byte ptr [rsp + 0x73]>', '<test~~dl, 1>', '<mov~~qword ptr [rsp + 0x78], rcx>', '<mov~~dword ptr [rsp + 0x80], eax>', '<jne~~0x40086e>']}, {'block_Idx': 133, 'blockInsts': ['<mov~~rdx, rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rax + 0xd8], rdx>', '<mov~~ecx, 0xfffffff4>', '<xor~~eax, eax>', '<cmp~~rdx, 0>', '<mov~~dword ptr [rsp + 0x2c], ecx>', '<mov~~dword ptr [rsp + 0x174], eax>', '<jne~~0x400d84>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x160]>', '<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x29ca]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~eax, dword ptr [rcx + 0x10]>', '<cmp~~eax, dword ptr [rcx + 0x20]>', '<setne~~al>', '<and~~al, 1>', '<movzx~~eax, al>', '<mov~~dword ptr [rcx + 0x94], eax>', '<add~~rcx, 0x90>', '<mov~~qword ptr [rsp + 0xa0], rcx>', '<mov~~dword ptr [rsp + 0xa8], eax>', '<jmp~~0x40071b>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x148]>', '<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x296d]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x110]>', '<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~eax, dword ptr [rsp + 0xdc]>', '<mov~~ecx, dword ptr [rcx + 0x10]>', '<cmp~~ecx, dword ptr [rdx]>', '<setne~~cl>', '<mov~~byte ptr [rsp + 0xcb], cl>', '<mov~~dword ptr [rsp + 0xcc], eax>', '<jmp~~0x4005ea>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x120]>', '<xor~~eax, eax>', '<cmp~~dword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0xdc], eax>', '<je~~0x400599>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0xf4]>', '<mov~~dword ptr [rsp + 0xf0], eax>', '<call~~0x500018>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x110]>', '<mov~~dword ptr [rax], ecx>', '<mov~~rax, qword ptr [rsp + 0x108]>', '<mov~~eax, dword ptr [rax]>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0xdc], eax>', '<jne~~0x40056a>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500010>']}, {'block_Idx': 110, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xf4]>', '<mov~~ecx, dword ptr [rsp + 0xf8]>', '<sub~~ecx, 8>', '<sete~~dl>', '<sub~~eax, 8>', '<sete~~al>', '<or~~dl, al>', '<mov~~eax, 7>', '<mov~~ecx, 9>', '<test~~dl, 1>', '<cmovne~~eax, ecx>', '<mov~~dword ptr [rsp + 0x100], eax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x110]>', '<mov~~edi, dword ptr [rsp + 0x100]>', '<mov~~dword ptr [rcx], edi>', '<mov~~qword ptr [rsp + 0xe8], rax>', '<call~~0x500020>']}, {'block_Idx': 129, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x180]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500060>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~dword ptr [rax + 0x10], ecx>', '<mov~~rax, qword ptr [rsp + 0x158]>', '<cmp~~dword ptr [rax], 1>', '<jne~~0x4004b9>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x120]>', '<cmp~~dword ptr [rax], 0>', '<jne~~0x4006bc>']}, {'block_Idx': 112, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x400c14>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x158]>', '<cmp~~dword ptr [rax], 1>', '<jne~~0x4004b9>']}, {'block_Idx': 71, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~qword ptr [rsp + 0x18], rcx>', '<cmp~~eax, 0>', '<je~~0x400a69>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x140]>', '<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~dl, byte ptr [rsp + 0x13f]>', '<mov~~byte ptr [rsp + 0x107], dl>', '<and~~dl, 1>', '<movzx~~edx, dl>', '<mov~~rsi, rcx>', '<add~~rsi, 0x8c>', '<mov~~qword ptr [rsp + 0x108], rsi>', '<mov~~dword ptr [rcx + 0x8c], edx>', '<mov~~rdx, rcx>', '<add~~rdx, 0x28>', '<mov~~qword ptr [rsp + 0x110], rdx>', '<cmp~~dword ptr [rcx + 0x28], -1>', '<mov~~dword ptr [rsp + 0x118], eax>', '<jne~~0x400466>']}, {'block_Idx': 77, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x110]>', '<mov~~rdx, qword ptr [rsp + 0x158]>', '<mov~~rcx, qword ptr [rsp + 0x168]>', '<mov~~rsi, qword ptr [rsp + 0x30]>', '<mov~~qword ptr [rsp + 0x20], rsi>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~edi, dword ptr [rdx]>', '<cmp~~ecx, edi>', '<cmovg~~edi, ecx>', '<mov~~edx, dword ptr [rax]>', '<xor~~esi, esi>', '<lea~~rcx, [rip + 0x211f]>', '<call~~0x500030>']}, {'block_Idx': 60, 'blockInsts': ['<jmp~~0x400688>']}, {'block_Idx': 131, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rax + 0xd0], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<je~~0x400ca4>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x98]>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~dword ptr [rax + 0x98], 0>', '<mov~~dl, 1>', '<xor~~eax, eax>', '<mov~~byte ptr [rsp + 0x87], dl>', '<mov~~qword ptr [rsp + 0x88], rcx>', '<mov~~dword ptr [rsp + 0x90], eax>', '<jmp~~0x40090c>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x118]>', '<cmp~~eax, 1>', '<jne~~0x40048f>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x188>', '<mov~~qword ptr [rsp + 0x178], rdi>', '<mov~~rax, rdi>', '<add~~rax, 0xb8>', '<mov~~qword ptr [rsp + 0x180], rax>', '<cmp~~qword ptr [rdi + 0xb8], 0>', '<je~~0x400056>']}, {'block_Idx': 70, 'blockInsts': ['<jmp~~0x400997>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~al, 1>', '<cmp~~qword ptr [rcx + 0xe8], 0>', '<mov~~byte ptr [rsp + 0x147], al>', '<jne~~0x4001e0>']}, {'block_Idx': 122, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<call~~0x500048>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x120]>', '<mov~~rax, qword ptr [rsp + 0xa0]>', '<mov~~ecx, dword ptr [rsp + 0xa8]>', '<mov~~dword ptr [rsp + 0x94], ecx>', '<mov~~qword ptr [rsp + 0x98], rax>', '<mov~~cl, 1>', '<cmp~~dword ptr [rdx], 0>', '<mov~~byte ptr [rsp + 0xaf], cl>', '<mov~~qword ptr [rsp + 0xb0], rax>', '<jne~~0x4007ee>']}, {'block_Idx': 140, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<add~~rdi, 0xd8>', '<call~~0x500078>']}, {'block_Idx': 104, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xe8]>', '<mov~~rcx, rax>', '<mov~~esi, 0x30>', '<lea~~rdx, [rip + 0x267a]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 76, 'blockInsts': ['<jmp~~0x4008a0>']}, {'block_Idx': 65, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd0]>', '<mov~~edi, dword ptr [rax]>', '<call~~0x500010>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x110]>', '<mov~~ecx, dword ptr [rcx]>', '<cmp~~ecx, dword ptr [rax + 0x20]>', '<setne~~cl>', '<and~~cl, 1>', '<movzx~~ecx, cl>', '<mov~~dword ptr [rax + 0x94], ecx>', '<add~~rax, 0x90>', '<xor~~ecx, ecx>', '<mov~~byte ptr [rsp + 0xaf], cl>', '<mov~~qword ptr [rsp + 0xb0], rax>', '<jmp~~0x4007ee>']}, {'block_Idx': 120, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<add~~rdi, 0xb0>', '<call~~0x500058>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x174], eax>', '<jmp~~0x400d84>']}, {'block_Idx': 105, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xf4]>', '<mov~~ecx, dword ptr [rsp + 0xf8]>', '<sub~~ecx, 7>', '<sete~~cl>', '<sub~~eax, 7>', '<sete~~al>', '<or~~cl, al>', '<mov~~eax, 8>', '<test~~cl, 1>', '<mov~~dword ptr [rsp + 0x100], eax>', '<jne~~0x4003de>']}, {'block_Idx': 109, 'blockInsts': ['<jmp~~0x400411>']}, {'block_Idx': 128, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rax + 0xc8], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<je~~0x400ca4>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x174], eax>', '<jmp~~0x400d84>']}, {'block_Idx': 83, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0xfc], ecx>', '<mov~~eax, 6>', '<cmp~~ecx, 3>', '<mov~~dword ptr [rsp + 0x100], eax>', '<jl~~0x400411>']}, {'block_Idx': 101, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x108]>', '<mov~~eax, dword ptr [rax]>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~qword ptr [rsp + 0x18], rcx>', '<cmp~~eax, 0>', '<je~~0x400a69>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~eax, dword ptr [rsp + 0xc4]>', '<mov~~rsi, qword ptr [rsp + 0xe0]>', '<mov~~dl, byte ptr [rsp + 0xaf]>', '<mov~~rcx, qword ptr [rsp + 0xb0]>', '<mov~~qword ptr [rsp + 0x68], rcx>', '<mov~~byte ptr [rsp + 0x73], dl>', '<mov~~esi, dword ptr [rsi]>', '<xor~~eax, 1>', '<mov~~dword ptr [rsp + 0x74], eax>', '<mov~~dword ptr [rdi + 0x98], eax>', '<cmp~~esi, 0>', '<mov~~byte ptr [rsp + 0x87], dl>', '<mov~~qword ptr [rsp + 0x88], rcx>', '<mov~~dword ptr [rsp + 0x90], eax>', '<je~~0x40090c>']}, {'block_Idx': 100, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<mov~~dword ptr [rsp + 4], eax>', '<add~~rdi, 0xa0>', '<call~~0x500058>']}, {'block_Idx': 111, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<add~~rdi, 0xa8>', '<call~~0x500058>']}, {'block_Idx': 25, 'blockInsts': ['<jmp~~0x400466>']}, {'block_Idx': 121, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x120]>', '<xor~~eax, eax>', '<cmp~~dword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0x174], eax>', '<je~~0x400d84>']}, {'block_Idx': 97, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<mov~~eax, 0xffffffea>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<je~~0x400ca4>']}, {'block_Idx': 94, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rax + 0xa0], rcx>', '<mov~~eax, 0xffffffea>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<je~~0x400ca4>']}, {'block_Idx': 126, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<call~~0x500050>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500028>']}, {'block_Idx': 117, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x108]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x400c4f>']}, {'block_Idx': 87, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x158]>', '<mov~~edi, dword ptr [rcx]>', '<mov~~edx, dword ptr [rax + 0x20]>', '<xor~~esi, esi>', '<lea~~rcx, [rip + 0x2063]>', '<call~~0x500030>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xf0]>', '<mov~~edi, dword ptr [rsp + 0xf4]>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0xf8]>', '<cmp~~ecx, edx>', '<cmovg~~edi, eax>', '<call~~0x500018>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<cmp~~dword ptr [rax + 0x4c], 0>', '<setne~~al>', '<mov~~byte ptr [rsp + 0x13f], al>', '<mov~~eax, dword ptr [rsp + 0x140]>', '<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~dl, byte ptr [rsp + 0x13f]>', '<mov~~byte ptr [rsp + 0x107], dl>', '<and~~dl, 1>', '<movzx~~edx, dl>', '<mov~~rsi, rcx>', '<add~~rsi, 0x8c>', '<mov~~qword ptr [rsp + 0x108], rsi>', '<mov~~dword ptr [rcx + 0x8c], edx>', '<mov~~rdx, rcx>', '<add~~rdx, 0x28>', '<mov~~qword ptr [rsp + 0x110], rdx>', '<cmp~~dword ptr [rcx + 0x28], -1>', '<mov~~dword ptr [rsp + 0x118], eax>', '<jne~~0x400466>']}, {'block_Idx': 84, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x94]>', '<mov~~rcx, qword ptr [rsp + 0x178]>', '<add~~rcx, 0xf4>', '<mov~~qword ptr [rsp + 0x48], rcx>', '<cmp~~eax, 0>', '<je~~0x4008e6>']}, {'block_Idx': 57, 'blockInsts': ['<cmp~~eax, 0>', '<jne~~0x40053e>']}, {'block_Idx': 86, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~rdx, rcx>', '<add~~rdx, 0x20>', '<mov~~qword ptr [rsp + 8], rdx>', '<mov~~edi, dword ptr [rcx + 0x20]>', '<mov~~esi, dword ptr [rax]>', '<mov~~edx, 0x400>', '<call~~0x500038>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xe0]>', '<xor~~eax, eax>', '<mov~~cl, al>', '<xor~~eax, eax>', '<cmp~~dword ptr [rdx], 0>', '<mov~~byte ptr [rsp + 0xcb], cl>', '<mov~~dword ptr [rsp + 0xcc], eax>', '<je~~0x4005ea>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~edi, dword ptr [rax + 0x10]>', '<call~~0x500010>']}, {'block_Idx': 142, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<add~~rdi, 0xe8>', '<call~~0x500080>']}, {'block_Idx': 79, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x110]>', '<mov~~rcx, qword ptr [rsp + 0x158]>', '<mov~~edi, dword ptr [rcx]>', '<mov~~edx, dword ptr [rax]>', '<xor~~esi, esi>', '<lea~~rcx, [rip + 0x20b7]>', '<call~~0x500030>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xbc]>', '<mov~~dl, byte ptr [rsp + 0x57]>', '<mov~~rcx, qword ptr [rsp + 0x58]>', '<mov~~esi, dword ptr [rsp + 0x64]>', '<cmp~~esi, 0>', '<sete~~sil>', '<and~~dl, sil>', '<test~~dl, 1>', '<mov~~rdx, rcx>', '<mov~~qword ptr [rsp + 0x30], rdx>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<jne~~0x400a0f>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x174], eax>', '<jmp~~0x400d84>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, rax>', '<add~~rcx, 0xf0>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<cmp~~dword ptr [rax + 0xf0], 0>', '<je~~0x40053e>']}, {'block_Idx': 42, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x108]>', '<mov~~eax, dword ptr [rax]>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0xdc], eax>', '<jne~~0x40056a>']}, {'block_Idx': 90, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x110]>', '<mov~~edi, dword ptr [rsp + 0x100]>', '<mov~~dword ptr [rcx], edi>', '<mov~~qword ptr [rsp + 0xe8], rax>', '<call~~0x500020>']}, {'block_Idx': 107, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x400b8b>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, rax>', '<add~~rcx, 8>', '<mov~~qword ptr [rsp + 0x160], rcx>', '<mov~~rdi, qword ptr [rax + 8]>', '<call~~0x500008>']}, {'block_Idx': 144, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xe0]>', '<mov~~eax, dword ptr [rsp + 4]>', '<mov~~dword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0x174], eax>', '<mov~~eax, dword ptr [rsp + 0x174]>', '<add~~rsp, 0x188>', '<ret~~>']}, {'block_Idx': 91, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x120]>', '<mov~~eax, 8>', '<cmp~~dword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0x100], eax>', '<jne~~0x400411>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x2a1a]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x154]>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x168]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x140], ecx>', '<cmp~~ecx, edx>', '<setg~~sil>', '<mov~~byte ptr [rsp + 0x146], sil>', '<cmp~~ecx, edx>', '<mov~~edi, ecx>', '<cmovg~~edi, edx>', '<mov~~dword ptr [rax + 0x7c], edi>', '<and~~sil, 1>', '<movzx~~esi, sil>', '<mov~~dword ptr [rax + 0x80], esi>', '<cmp~~ecx, edx>', '<setl~~al>', '<cmp~~ecx, edx>', '<mov~~byte ptr [rsp + 0x147], al>', '<jne~~0x4001e0>']}, {'block_Idx': 63, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x178]>', '<mov~~dl, byte ptr [rsp + 0x87]>', '<mov~~rcx, qword ptr [rsp + 0x88]>', '<mov~~eax, dword ptr [rsp + 0x90]>', '<mov~~dword ptr [rsi + 0xf4], 0>', '<mov~~byte ptr [rsp + 0x57], dl>', '<mov~~qword ptr [rsp + 0x58], rcx>', '<mov~~dword ptr [rsp + 0x64], eax>', '<mov~~eax, dword ptr [rsp + 0xbc]>', '<mov~~dl, byte ptr [rsp + 0x57]>', '<mov~~rcx, qword ptr [rsp + 0x58]>', '<mov~~esi, dword ptr [rsp + 0x64]>', '<cmp~~esi, 0>', '<sete~~sil>', '<and~~dl, sil>', '<test~~dl, 1>', '<mov~~rdx, rcx>', '<mov~~qword ptr [rsp + 0x30], rdx>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<jne~~0x400a0f>']}, {'block_Idx': 118, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~rax, qword ptr [rsp + 0x130]>', '<mov~~rcx, qword ptr [rsp + 0x158]>', '<mov~~rsi, qword ptr [rsp + 8]>', '<mov~~rdx, qword ptr [rsp + 0x110]>', '<mov~~r8, qword ptr [rsp + 0x18]>', '<mov~~r9d, dword ptr [r8]>', '<mov~~r8, rdi>', '<add~~r8, 0x10>', '<cmp~~r9d, 0>', '<cmove~~rdx, r8>', '<mov~~edx, dword ptr [rdx]>', '<mov~~esi, dword ptr [rsi]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~r8d, dword ptr [rax]>', '<cmp~~dword ptr [rdi + 0xf4], 4>', '<sete~~al>', '<and~~al, 1>', '<movzx~~r9d, al>', '<call~~0x500040>']}, {'block_Idx': 102, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x180]>', '<mov~~qword ptr [rax], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<je~~0x400ca4>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, rax>', '<add~~rcx, 0x94>', '<mov~~qword ptr [rsp + 0x10], rcx>', '<cmp~~dword ptr [rax + 0x94], 0>', '<je~~0x400ad1>']}, {'block_Idx': 99, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xfc]>', '<mov~~eax, 9>', '<cmp~~ecx, 5>', '<mov~~dword ptr [rsp + 0x100], eax>', '<jae~~0x400411>']}, {'block_Idx': 124, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rax + 0xc0], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<je~~0x400ca4>']}, {'block_Idx': 113, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~rax, qword ptr [rsp + 0x128]>', '<mov~~rcx, qword ptr [rsp + 0x168]>', '<mov~~rdx, qword ptr [rsp + 0x110]>', '<mov~~esi, dword ptr [rdx]>', '<mov~~edx, dword ptr [rdi + 0x10]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~r8d, dword ptr [rax]>', '<cmp~~dword ptr [rdi + 0xf4], 2>', '<sete~~al>', '<and~~al, 1>', '<movzx~~r9d, al>', '<call~~0x500040>']}, {'block_Idx': 134, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x180]>', '<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rax], 0>', '<add~~rdi, 0xc0>', '<call~~0x500068>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0xc3]>', '<test~~al, 1>', '<jne~~0x400648>']}, {'block_Idx': 92, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x98]>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~dword ptr [rax], 3>', '<mov~~dl, 1>', '<xor~~eax, eax>', '<mov~~byte ptr [rsp + 0x57], dl>', '<mov~~qword ptr [rsp + 0x58], rcx>', '<mov~~dword ptr [rsp + 0x64], eax>', '<jmp~~0x400941>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~edi, dword ptr [rax + 0x10]>', '<call~~0x500010>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~dword ptr [rax + 0x20], ecx>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, rax>', '<add~~rcx, 0xf0>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<cmp~~dword ptr [rax + 0xf0], 0>', '<je~~0x40053e>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x68]>', '<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~dword ptr [rcx + 0xf4], 2>', '<mov~~qword ptr [rsp + 0x30], rax>', '<mov~~rax, qword ptr [rsp + 0x110]>', '<mov~~rdx, qword ptr [rsp + 0x158]>', '<mov~~rcx, qword ptr [rsp + 0x168]>', '<mov~~rsi, qword ptr [rsp + 0x30]>', '<mov~~qword ptr [rsp + 0x20], rsi>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~edi, dword ptr [rdx]>', '<cmp~~ecx, edi>', '<cmovg~~edi, ecx>', '<mov~~edx, dword ptr [rax]>', '<xor~~esi, esi>', '<lea~~rcx, [rip + 0x211f]>', '<call~~0x500030>']}], 'cfg_edge_info': [(120, 129), (32, 37), (73, 81), (79, 97), (107, 113), (44, 45), (142, 144), (19, 9), (23, 25), (40, 41), (46, 57), (86, 102), (138, 140), (128, 117), (122, 131), (37, 42), (27, 34), (42, 41), (105, 109), (20, 22), (82, 40), (92, 81), (121, 126), (102, 100), (81, 71), (7, 12), (59, 50), (71, 79), (18, 21), (61, 56), (64, 73), (50, 56), (39, 37), (93, 81), (77, 94), (121, 9), (113, 124), (36, 41), (15, 18), (62, 69), (57, 36), (5, 7), (22, 23), (0, 2), (84, 93), (14, 19), (49, 50), (78, 86), (68, 63), (129, 134), (112, 118), (104, 114), (83, 91), (13, 14), (101, 78), (55, 56), (102, 107), (99, 90), (63, 70), (56, 64), (107, 112), (69, 76), (57, 65), (1, 5), (80, 94), (110, 104), (54, 60), (124, 112), (114, 28), (20, 21), (128, 100), (23, 26), (31, 39), (49, 54), (34, 32), (8, 13), (2, 6), (81, 70), (45, 50), (117, 121), (59, 49), (71, 78), (64, 72), (105, 110), (97, 78), (43, 52), (40, 44), (118, 128), (17, 18), (36, 40), (62, 68), (94, 100), (99, 105), (134, 136), (21, 24), (69, 73), (84, 92), (131, 121), (52, 66), (112, 117), (17, 20), (124, 100), (136, 138), (56, 63), (78, 87), (97, 100), (91, 90), (28, 31), (91, 99), (101, 79), (100, 111), (63, 71), (111, 120), (24, 27), (114, 27), (50, 55), (26, 33), (103, 100), (44, 48), (82, 41), (39, 36), (34, 31), (37, 36), (45, 49), (65, 82), (54, 61), (67, 55), (15, 17), (131, 100), (12, 9), (55, 62), (41, 45), (18, 22), (133, 9), (60, 67), (0, 1), (87, 103), (133, 100), (48, 59), (83, 90), (140, 142), (117, 122), (76, 84), (66, 83), (103, 86), (72, 80), (42, 46), (33, 43), (21, 23), (90, 104), (126, 133), (5, 8), (22, 24), (13, 15), (94, 101), (6, 9)], 'cdg_edge_info': [(112, 100), (62, 81), (101, 97), (107, 113), (81, 94), (42, 57), (50, 134), (40, 41), (0, 5), (128, 117), (23, 43), (37, 42), (121, 133), (23, 52), (13, 136), (50, 100), (42, 41), (64, 80), (133, 134), (20, 22), (82, 40), (107, 124), (5, 12), (103, 102), (121, 126), (13, 129), (13, 19), (13, 138), (59, 50), (50, 111), (18, 21), (64, 73), (50, 120), (117, 140), (133, 136), (39, 37), (0, 9), (121, 9), (78, 102), (112, 134), (15, 18), (13, 140), (133, 111), (62, 69), (133, 120), (133, 129), (117, 142), (133, 138), (5, 7), (22, 23), (0, 2), (84, 93), (78, 86), (49, 50), (112, 118), (83, 91), (23, 104), (107, 140), (13, 14), (112, 136), (101, 78), (55, 56), (13, 142), (102, 107), (54, 67), (56, 64), (107, 112), (117, 144), (5, 9), (112, 111), (23, 33), (50, 136), (57, 65), (112, 120), (112, 129), (34, 39), (107, 142), (112, 138), (13, 144), (124, 112), (59, 56), (20, 21), (117, 100), (23, 26), (50, 129), (49, 54), (50, 138), (13, 9), (107, 144), (59, 49), (117, 121), (105, 110), (97, 78), (5, 13), (23, 83), (40, 44), (49, 56), (50, 140), (17, 18), (54, 55), (62, 68), (107, 100), (99, 105), (63, 94), (84, 92), (69, 73), (131, 121), (133, 140), (112, 117), (50, 142), (17, 20), (78, 103), (56, 63), (117, 134), (114, 34), (133, 142), (69, 84), (78, 87), (50, 144), (0, 6), (13, 134), (91, 99), (101, 79), (62, 63), (112, 140), (117, 136), (114, 27), (50, 55), (13, 100), (44, 48), (64, 81), (82, 41), (133, 144), (34, 31), (107, 134), (117, 111), (117, 120), (54, 61), (117, 129), (15, 17), (112, 142), (117, 138), (55, 62), (18, 22), (133, 9), (13, 111), (44, 59), (0, 1), (13, 120), (107, 136), (133, 100), (117, 122), (117, 131), (112, 144), (94, 101), (23, 66), (103, 86), (42, 46), (21, 23), (107, 111), (107, 120), (5, 8), (64, 94), (107, 129), (107, 138), (54, 56), (112, 128), (13, 15), (57, 82), (23, 114)], 'ddg_edge_info': [(43, 110), (55, 84), (118, 122), (118, 131), (55, 93), (92, 79), (40, 41), (0, 5), (48, 54), (0, 14), (48, 63), (121, 133), (104, 62), (80, 113), (104, 80), (44, 56), (31, 86), (93, 79), (54, 97), (0, 126), (20, 104), (20, 113), (7, 12), (59, 50), (118, 117), (118, 126), (48, 49), (104, 48), (104, 57), (113, 124), (27, 93), (21, 59), (113, 133), (80, 117), (104, 84), (73, 78), (0, 94), (73, 87), (0, 103), (31, 81), (22, 23), (84, 93), (14, 19), (55, 56), (13, 87), (59, 54), (46, 93), (92, 78), (92, 87), (27, 79), (80, 94), (104, 61), (110, 104), (8, 84), (39, 62), (80, 112), (104, 79), (8, 93), (31, 67), (20, 94), (20, 103), (128, 121), (59, 49), (46, 79), (65, 92), (65, 101), (21, 22), (14, 144), (104, 56), (39, 48), (8, 79), (27, 92), (27, 101), (0, 84), (31, 62), (94, 100), (31, 80), (122, 100), (0, 111), (84, 92), (17, 20), (65, 69), (65, 78), (65, 87), (136, 138), (46, 92), (46, 101), (67, 133), (113, 100), (104, 42), (101, 107), (27, 69), (113, 118), (27, 78), (20, 39), (27, 87), (31, 48), (63, 117), (8, 92), (20, 57), (8, 101), (20, 66), (0, 97), (31, 84), (103, 100), (65, 55), (65, 64), (65, 73), (46, 69), (65, 82), (46, 78), (46, 87), (27, 55), (104, 37), (27, 64), (80, 79), (110, 80), (104, 46), (27, 73), (0, 56), (8, 69), (20, 34), (27, 82), (113, 122), (8, 78), (133, 100), (20, 43), (63, 112), (39, 56), (8, 87), (20, 52), (39, 65), (63, 121), (31, 61), (83, 99), (104, 131), (103, 86), (21, 133), (124, 118), (6, 144), (93, 121), (65, 50), (22, 79), (65, 59), (46, 55), (65, 68), (46, 64), (86, 100), (46, 73), (65, 86), (46, 82), (86, 118), (97, 118), (27, 41), (120, 129), (27, 50), (8, 46), (79, 97), (27, 59), (8, 55), (142, 144), (27, 68), (8, 64), (113, 117), (8, 73), (63, 107), (0, 69), (8, 82), (0, 78), (31, 56), (0, 87), (46, 41), (65, 54), (46, 50), (65, 63), (46, 59), (22, 101), (46, 68), (22, 110), (97, 113), (86, 113), (86, 122), (8, 41), (104, 27), (50, 56), (61, 56), (27, 54), (48, 86), (8, 50), (27, 63), (0, 46), (8, 59), (8, 68), (20, 33), (39, 46), (31, 42), (0, 73), (105, 104), (124, 117), (65, 40), (65, 49), (56, 80), (46, 54), (65, 67), (68, 63), (46, 63), (126, 144), (27, 31), (97, 117), (86, 117), (8, 27), (27, 40), (79, 78), (27, 49), (79, 87), (48, 81), (63, 79), (0, 41), (8, 54), (0, 50), (8, 63), (21, 82), (0, 59), (20, 37), (31, 37), (0, 68), (33, 65), (1, 5), (124, 112), (54, 133), (65, 44), (20, 131), (39, 144), (46, 40), (43, 105), (22, 82), (46, 49), (128, 100), (8, 13), (86, 112), (97, 112), (8, 22), (118, 144), (48, 67), (8, 31), (27, 44), (0, 27), (8, 40), (8, 49), (5, 114), (20, 23), (104, 93), (104, 102), (21, 104), (22, 41), (22, 50), (22, 59), (15, 20), (65, 48), (46, 44), (118, 121), (59, 81), (55, 92), (67, 94), (8, 17), (67, 103), (0, 13), (48, 62), (8, 26), (27, 39), (0, 22), (0, 31), (8, 44), (48, 80), (63, 78), (63, 87), (80, 121), (33, 46), (104, 97), (41, 59), (93, 78), (93, 87), (73, 118), (0, 134), (20, 121), (55, 69), (26, 33), (59, 67), (12, 144), (82, 41), (13, 118), (82, 50), (0, 8), (110, 41), (8, 21), (0, 17), (110, 50), (0, 26), (80, 107), (48, 84), (5, 113), (131, 100), (92, 118), (104, 92), (33, 50), (73, 86), (104, 101), (21, 94), (44, 59), (0, 120), (73, 113), (0, 138), (66, 83), (13, 86), (126, 133), (92, 86), (48, 61), (0, 21), (104, 69), (48, 79), (92, 113), (104, 78), (104, 87), (73, 81), (31, 93), (0, 124), (20, 102), (93, 86), (0, 133), (103, 118), (73, 117), (122, 131), (0, 142), (15, 23), (55, 68), (118, 133), (92, 81), (0, 7), (48, 56), (21, 39), (104, 55), (104, 64), (113, 131), (21, 57), (121, 144), (104, 73), (21, 66), (33, 31), (104, 82), (81, 80), (8, 114), (31, 79), (0, 110), (93, 81), (20, 97), (0, 128), (103, 113), (122, 126), (59, 61), (0, 2), (104, 41), (21, 34), (5, 80), (104, 50), (129, 134), (21, 43), (104, 59), (113, 126), (21, 52), (27, 86), (104, 68), (80, 101), (113, 144), (7, 144), (20, 83), (31, 92), (54, 94), (122, 121), (43, 66), (31, 101), (103, 117), (87, 100), (13, 80), (65, 81), (126, 100), (59, 56), (46, 86), (99, 110), (80, 78), (113, 112), (80, 87), (104, 54), (27, 81), (113, 121), (104, 63), (2, 6), (8, 86), (31, 69), (0, 100), (31, 78), (31, 87), (43, 52), (0, 118), (87, 86), (103, 112), (22, 114), (118, 100), (46, 81), (86, 126), (104, 31), (67, 131), (86, 144), (69, 73), (104, 40), (27, 67), (21, 33), (104, 49), (39, 50), (8, 81), (31, 46), (31, 55), (20, 55), (0, 86), (31, 64), (31, 73), (13, 34), (20, 82), (124, 121), (0, 113), (31, 82), (33, 110), (103, 107), (65, 62), (46, 67), (65, 80), (22, 118), (86, 121), (97, 121), (50, 55), (27, 62), (79, 100), (104, 44), (80, 86), (8, 67), (101, 118), (0, 63), (27, 80), (31, 41), (31, 50), (20, 59), (31, 59), (91, 110), (31, 68), (21, 131), (33, 105), (5, 15), (87, 103), (46, 62), (97, 107), (86, 107), (65, 84), (22, 113), (46, 80), (2, 144), (65, 93), (78, 112), (117, 131), (79, 86), (27, 48), (104, 39), (8, 62), (27, 84), (0, 67), (8, 80), (31, 54), (13, 15), (31, 63), (104, 133), (83, 110), (46, 48), (65, 61), (46, 57), (86, 102), (138, 140), (65, 79), (128, 117), (22, 117), (46, 84), (27, 34), (8, 39), (42, 41), (8, 48), (104, 34), (27, 61), (48, 93), (20, 22), (39, 44), (20, 40), (31, 40), (20, 49), (21, 103), (63, 118), (0, 80), (1, 8), (102, 100), (31, 49), (64, 73), (93, 118), (66, 110), (65, 56), (46, 61), (67, 102), (8, 34), (27, 56), (0, 39), (0, 48), (63, 86), (8, 61), (100, 144), (31, 44), (63, 113), (104, 114), (56, 64), (93, 113), (54, 131), (66, 105), (22, 80), (26, 41), (46, 56), (46, 65), (67, 97), (8, 20), (27, 42), (0, 34), (63, 81), (92, 117), (48, 92), (8, 56), (48, 101), (0, 61), (31, 39), (21, 102), (1, 7), (73, 112), (34, 41), (73, 121), (105, 110), (122, 144), (66, 91), (20, 133), (93, 117), (26, 27), (97, 78), (97, 87), (118, 128), (8, 15), (27, 37), (0, 20), (48, 69), (27, 46), (8, 42), (82, 80), (48, 78), (92, 112), (48, 87), (92, 121), (104, 86), (134, 136), (131, 121), (52, 66), (21, 97), (44, 62), (73, 107), (54, 103), (124, 100), (1, 20), (22, 61), (56, 63), (93, 112), (65, 41), (15, 22), (97, 100), (48, 55), (0, 15), (48, 64), (100, 111), (48, 73), (8, 37), (92, 107), (0, 33), (111, 120), (104, 81), (21, 83), (33, 48), (133, 144), (33, 66), (0, 136), (103, 121), (93, 107), (67, 55), (66, 99), (97, 86), (59, 69), (0, 1), (48, 50), (8, 14), (48, 59), (8, 23), (48, 68), (140, 142), (80, 100), (104, 67), (80, 118), (33, 43), (73, 79), (104, 94), (33, 52), (81, 101), (104, 103), (20, 91), (0, 122), (54, 102), (0, 131), (22, 42), (19, 144), (0, 140), (20, 118), (23, 114), (13, 79)]}]}
{'avresample_open': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'subq\t$0x188, %rsp                      # imm = 0x0xbc'}, {'instIndex': 1, 'instruction': 'movq\t%rdi, 0x178(%rsp)                 # 8-byte Spill'}, {'instIndex': 6, 'instruction': 'je\t.LBB0_2'}, {'instIndex': 8, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 9, 'instruction': 'leaq\t.L.str(%rip), %rdx'}, {'instIndex': 10, 'instruction': 'movb\t$0, %al'}, {'instIndex': 11, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 12, 'instruction': 'movl\t$0xffffffea, %eax               # imm = 0xFFFFFFEA'}, {'instIndex': 13, 'instruction': 'movl\t%eax, 0x174(%rsp)                 # 4-byte Spill'}, {'instIndex': 14, 'instruction': 'jmp\t.LBB0_68'}, {'instIndex': 16, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 17, 'instruction': 'addq\t$8, %rcx'}, {'instIndex': 18, 'instruction': 'movq\t%rcx, 0x160(%rsp)                 # 8-byte Spill'}, {'instIndex': 19, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 20, 'instruction': 'callq\tav_get_channel_layout_nb_channels@PLT'}, {'instIndex': 22, 'instruction': 'movq\t%rcx, %rdx'}, {'instIndex': 23, 'instruction': 'addq\t$0x74, %rdx'}, {'instIndex': 24, 'instruction': 'movq\t%rdx, 0x168(%rsp)                 # 8-byte Spill'}, {'instIndex': 25, 'instruction': 'movl\t%eax, 0x74(%rcx)'}, {'instIndex': 26, 'instruction': 'addl\t$-0x21, %eax'}, {'instIndex': 27, 'instruction': 'cmpl\t$-0x20, %eax'}, {'instIndex': 28, 'instruction': 'jae\t.LBB0_4'}]}]}
The case of compiler clang with optimization O3.
Patched source code file: utils.c
Patched function: 1---int avresample_open 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_after/O3/utils.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_after/O3/utils.s---avresample_open---after
function id: 0
function flag: True
There are 686 instructions for function: avresample_open in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '36', 'end': 46}, 'before': {'start': '36', 'end': 41}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'subq\t$0x188, %rsp                      # imm = 0x0xbc'}, {'instIndex': 1, 'instruction': 'movq\t%rdi, 0x178(%rsp)                 # 8-byte Spill'}, {'instIndex': 6, 'instruction': 'je\t.LBB0_2'}, {'instIndex': 8, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 9, 'instruction': 'leaq\t.L.str(%rip), %rdx'}, {'instIndex': 10, 'instruction': 'movb\t$0, %al'}, {'instIndex': 11, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 12, 'instruction': 'movl\t$0xffffffea, %eax               # imm = 0xFFFFFFEA'}, {'instIndex': 13, 'instruction': 'movl\t%eax, 0x174(%rsp)                 # 4-byte Spill'}, {'instIndex': 14, 'instruction': 'jmp\t.LBB0_68'}, {'instIndex': 16, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 17, 'instruction': 'addq\t$8, %rcx'}, {'instIndex': 18, 'instruction': 'movq\t%rcx, 0x160(%rsp)                 # 8-byte Spill'}, {'instIndex': 19, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 20, 'instruction': 'callq\tav_get_channel_layout_nb_channels@PLT'}, {'instIndex': 22, 'instruction': 'movq\t%rcx, %rdx'}, {'instIndex': 23, 'instruction': 'addq\t$0x74, %rdx'}, {'instIndex': 24, 'instruction': 'movq\t%rdx, 0x168(%rsp)                 # 8-byte Spill'}, {'instIndex': 25, 'instruction': 'movl\t%eax, 0x74(%rcx)'}, {'instIndex': 26, 'instruction': 'addl\t$-0x21, %eax'}, {'instIndex': 27, 'instruction': 'cmpl\t$-0x20, %eax'}, {'instIndex': 28, 'instruction': 'jae\t.LBB0_4'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_after/O3/utils.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_after/O3/utils.o---after
The extraction of function: avresample_open
Analyzing the binaries to generate subCFGs from patched function ...
It has 374 nodes and 672 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 686 instructions in binary file.
[4194304, 4194346, 4194373, 4194390, 4194422]
The execution time of patched subCFG information extraction via angr: 0:00:00.605004
{'avresample_open': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400056>, <DisassemblerInsn "mov" for 0x40005e>, <DisassemblerInsn "add" for 0x400061>, <DisassemblerInsn "mov" for 0x400065>, <DisassemblerInsn "mov" for 0x40006d>, <DisassemblerInsn "call" for 0x400071>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400045>, <DisassemblerInsn "mov" for 0x40004a>, <DisassemblerInsn "jmp" for 0x400051>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400076>, <DisassemblerInsn "mov" for 0x40007e>, <DisassemblerInsn "add" for 0x400081>, <DisassemblerInsn "mov" for 0x400085>, <DisassemblerInsn "mov" for 0x40008d>, <DisassemblerInsn "add" for 0x400090>, <DisassemblerInsn "cmp" for 0x400093>, <DisassemblerInsn "jae" for 0x400096>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000cf>, <DisassemblerInsn "mov" for 0x4000d7>, <DisassemblerInsn "add" for 0x4000da>, <DisassemblerInsn "mov" for 0x4000de>, <DisassemblerInsn "mov" for 0x4000e6>, <DisassemblerInsn "call" for 0x4000ea>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400098>, <DisassemblerInsn "mov" for 0x4000a0>, <DisassemblerInsn "mov" for 0x4000a8>, <DisassemblerInsn "mov" for 0x4000ab>, <DisassemblerInsn "lea" for 0x4000b0>, <DisassemblerInsn "mov" for 0x4000b7>, <DisassemblerInsn "call" for 0x4000b9>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40002a>, <DisassemblerInsn "mov" for 0x400032>, <DisassemblerInsn "lea" for 0x400037>, <DisassemblerInsn "mov" for 0x40003e>, <DisassemblerInsn "call" for 0x400040>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d84>, <DisassemblerInsn "add" for 0x400d8b>, <DisassemblerInsn "ret" for 0x400d92>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400007>, <DisassemblerInsn "mov" for 0x40000f>, <DisassemblerInsn "add" for 0x400012>, <DisassemblerInsn "mov" for 0x400018>, <DisassemblerInsn "cmp" for 0x400020>, <DisassemblerInsn "je" for 0x400028>]'}], 'cfg_block_detailed_info': [{'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, rax>', '<add~~rcx, 8>', '<mov~~qword ptr [rsp + 0x160], rcx>', '<mov~~rdi, qword ptr [rax + 8]>', '<call~~0x500008>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x174], eax>', '<jmp~~0x400d84>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~rdx, rcx>', '<add~~rdx, 0x74>', '<mov~~qword ptr [rsp + 0x168], rdx>', '<mov~~dword ptr [rcx + 0x74], eax>', '<add~~eax, -0x21>', '<cmp~~eax, -0x20>', '<jae~~0x4000cf>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, rax>', '<add~~rcx, 0x18>', '<mov~~qword ptr [rsp + 0x148], rcx>', '<mov~~rdi, qword ptr [rax + 0x18]>', '<call~~0x500008>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x160]>', '<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x29ca]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x2a1a]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x174]>', '<add~~rsp, 0x188>', '<ret~~>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x188>', '<mov~~qword ptr [rsp + 0x178], rdi>', '<mov~~rax, rdi>', '<add~~rax, 0xb8>', '<mov~~qword ptr [rsp + 0x180], rax>', '<cmp~~qword ptr [rdi + 0xb8], 0>', '<je~~0x400056>']}], 'cfg_edge_info': [(0, 1), (2, 4), (0, 2), (3, 6), (1, 3), (4, 7), (3, 5)]}]}
{'avresample_open': [4194304, 4194346, 4194373, 4194390, 4194422]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_after/O3/utils.o---after
The extraction of function: avresample_open
[4194304, 4194346, 4194373, 4194390, 4194422]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 145 nodes and 234 edges in CFGEmulated.
It has 145 nodes and 303 edges in CDG.
It has 2757 nodes and 3730 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194304, 4194346, 4194373, 4194390, 4194422]
{4194304, 4197396, 4197409, 4196898, 4194346, 4195882, 4197422, 4195383, 4195899, 4196932, 4194373, 4195912, 4196427, 4197455, 4195413, 4194390, 4194903, 4197481, 4196969, 4194925, 4196462, 4195442, 4194422, 4197494, 4195458, 4195976, 4197001, 4194456, 4195484, 4196512, 4197540, 4195500, 4197036, 4196028, 4194494, 4197568, 4196544, 4195016, 4194511, 4197073, 4197588, 4195548, 4196582, 4197608, 4195561, 4194543, 4195056, 4197624, 4197116, 4195583, 4195072, 4196620, 4194584, 4195097, 4197659, 4196123, 4197149, 4195614, 4195619, 4197159, 4195116, 4197679, 4195634, 4194622, 4195135, 4196673, 4197699, 4194639, 4195668, 4197719, 4196187, 4195168, 4197222, 4196200, 4195690, 4197739, 4196731, 4195198, 4197764, 4197259, 4197269, 4195223, 4195737, 4196257, 4194725, 4195247, 4195770, 4194752, 4195786, 4196818, 4195294, 4194784, 4196334, 4197359, 4196855}
[20, 69, 93, 13, 45, 36, 73, 8, 33, 50, 23, 37, 5, 72, 43, 18, 138, 46, 9, 136, 114, 59, 103, 62, 64, 133, 7, 67, 14, 41, 40, 52, 82, 31, 110, 129, 34, 49, 112, 28, 71, 22, 77, 60, 131, 68, 24, 0, 70, 17, 122, 55, 140, 104, 76, 65, 61, 120, 6, 105, 109, 128, 19, 83, 101, 56, 100, 111, 25, 121, 97, 94, 126, 48, 117, 87, 66, 21, 84, 57, 86, 44, 26, 142, 79, 81, 12, 32, 42, 90, 107, 1, 144, 91, 2, 15, 63, 118, 102, 78, 99, 124, 113, 134, 54, 92, 27, 39, 80]
The execution time of patched slicing information extraction via angr: 0:00:17.952120
{'avresample_open': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001c0>, <DisassemblerInsn "mov" for 0x4001c8>, <DisassemblerInsn "mov" for 0x4001d0>, <DisassemblerInsn "cmp" for 0x4001d3>, <DisassemblerInsn "setne" for 0x4001d6>, <DisassemblerInsn "mov" for 0x4001d9>, <DisassemblerInsn "mov" for 0x4001e0>, <DisassemblerInsn "mov" for 0x4001e8>, <DisassemblerInsn "mov" for 0x4001ef>, <DisassemblerInsn "movzx" for 0x4001f6>, <DisassemblerInsn "and" for 0x4001f9>, <DisassemblerInsn "mov" for 0x4001fc>, <DisassemblerInsn "or" for 0x400202>, <DisassemblerInsn "mov" for 0x400204>, <DisassemblerInsn "and" for 0x40020b>, <DisassemblerInsn "movzx" for 0x40020d>, <DisassemblerInsn "mov" for 0x400210>, <DisassemblerInsn "add" for 0x400213>, <DisassemblerInsn "mov" for 0x40021a>, <DisassemblerInsn "mov" for 0x400222>, <DisassemblerInsn "mov" for 0x400228>, <DisassemblerInsn "add" for 0x40022b>, <DisassemblerInsn "mov" for 0x40022f>, <DisassemblerInsn "mov" for 0x400237>, <DisassemblerInsn "mov" for 0x40023a>, <DisassemblerInsn "add" for 0x40023d>, <DisassemblerInsn "mov" for 0x400241>, <DisassemblerInsn "mov" for 0x400249>, <DisassemblerInsn "cmp" for 0x40024b>, <DisassemblerInsn "mov" for 0x40024e>, <DisassemblerInsn "jne" for 0x400255>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007a1>, <DisassemblerInsn "mov" for 0x4007a9>, <DisassemblerInsn "mov" for 0x4007b1>, <DisassemblerInsn "cmp" for 0x4007b8>, <DisassemblerInsn "setne" for 0x4007bb>, <DisassemblerInsn "mov" for 0x4007be>, <DisassemblerInsn "and" for 0x4007c1>, <DisassemblerInsn "movzx" for 0x4007c5>, <DisassemblerInsn "mov" for 0x4007c9>, <DisassemblerInsn "mov" for 0x4007cf>, <DisassemblerInsn "test" for 0x4007d4>, <DisassemblerInsn "mov" for 0x4007d7>, <DisassemblerInsn "mov" for 0x4007dc>, <DisassemblerInsn "jne" for 0x4007e3>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008c0>, <DisassemblerInsn "mov" for 0x4008c8>, <DisassemblerInsn "mov" for 0x4008cd>, <DisassemblerInsn "mov" for 0x4008d3>, <DisassemblerInsn "xor" for 0x4008d5>, <DisassemblerInsn "mov" for 0x4008d7>, <DisassemblerInsn "mov" for 0x4008db>, <DisassemblerInsn "mov" for 0x4008e0>, <DisassemblerInsn "jmp" for 0x4008e4>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000ef>, <DisassemblerInsn "mov" for 0x4000f7>, <DisassemblerInsn "mov" for 0x4000fe>, <DisassemblerInsn "add" for 0x400101>, <DisassemblerInsn "mov" for 0x400105>, <DisassemblerInsn "mov" for 0x40010d>, <DisassemblerInsn "add" for 0x400110>, <DisassemblerInsn "cmp" for 0x400113>, <DisassemblerInsn "jae" for 0x400116>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005ea>, <DisassemblerInsn "mov" for 0x4005f2>, <DisassemblerInsn "mov" for 0x4005f9>, <DisassemblerInsn "mov" for 0x400600>, <DisassemblerInsn "mov" for 0x400607>, <DisassemblerInsn "and" for 0x40060e>, <DisassemblerInsn "movzx" for 0x400611>, <DisassemblerInsn "mov" for 0x400614>, <DisassemblerInsn "mov" for 0x40061b>, <DisassemblerInsn "cmp" for 0x400621>, <DisassemblerInsn "jne" for 0x400624>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40053e>, <DisassemblerInsn "mov" for 0x400546>, <DisassemblerInsn "cmp" for 0x400548>, <DisassemblerInsn "mov" for 0x40054b>, <DisassemblerInsn "jne" for 0x400552>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40086e>, <DisassemblerInsn "mov" for 0x400876>, <DisassemblerInsn "mov" for 0x40087b>, <DisassemblerInsn "mov" for 0x400882>, <DisassemblerInsn "mov" for 0x40088c>, <DisassemblerInsn "mov" for 0x40088e>, <DisassemblerInsn "mov" for 0x400892>, <DisassemblerInsn "mov" for 0x400897>, <DisassemblerInsn "jmp" for 0x40089b>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000cf>, <DisassemblerInsn "mov" for 0x4000d7>, <DisassemblerInsn "add" for 0x4000da>, <DisassemblerInsn "mov" for 0x4000de>, <DisassemblerInsn "mov" for 0x4000e6>, <DisassemblerInsn "call" for 0x4000ea>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400300>, <DisassemblerInsn "mov" for 0x400302>, <DisassemblerInsn "mov" for 0x40030a>, <DisassemblerInsn "mov" for 0x400311>, <DisassemblerInsn "call" for 0x400314>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006bc>, <DisassemblerInsn "mov" for 0x4006c4>, <DisassemblerInsn "mov" for 0x4006cc>, <DisassemblerInsn "mov" for 0x4006d4>, <DisassemblerInsn "cmp" for 0x4006d6>, <DisassemblerInsn "setne" for 0x4006d9>, <DisassemblerInsn "and" for 0x4006dc>, <DisassemblerInsn "movzx" for 0x4006df>, <DisassemblerInsn "mov" for 0x4006e2>, <DisassemblerInsn "add" for 0x4006e8>, <DisassemblerInsn "xor" for 0x4006ee>, <DisassemblerInsn "test" for 0x4006f0>, <DisassemblerInsn "mov" for 0x4006f4>, <DisassemblerInsn "mov" for 0x4006f7>, <DisassemblerInsn "mov" for 0x4006ff>, <DisassemblerInsn "mov" for 0x400706>, <DisassemblerInsn "mov" for 0x40070d>, <DisassemblerInsn "jne" for 0x400715>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002c8>, <DisassemblerInsn "mov" for 0x4002cf>, <DisassemblerInsn "mov" for 0x4002d6>, <DisassemblerInsn "or" for 0x4002dd>, <DisassemblerInsn "test" for 0x4002df>, <DisassemblerInsn "mov" for 0x4002e2>, <DisassemblerInsn "jne" for 0x4002e9>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004dc>, <DisassemblerInsn "cmp" for 0x4004e4>, <DisassemblerInsn "jne" for 0x4004e7>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400076>, <DisassemblerInsn "mov" for 0x40007e>, <DisassemblerInsn "add" for 0x400081>, <DisassemblerInsn "mov" for 0x400085>, <DisassemblerInsn "mov" for 0x40008d>, <DisassemblerInsn "add" for 0x400090>, <DisassemblerInsn "cmp" for 0x400093>, <DisassemblerInsn "jae" for 0x400096>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400869>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400319>, <DisassemblerInsn "mov" for 0x400320>, <DisassemblerInsn "call" for 0x400327>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001e0>, <DisassemblerInsn "mov" for 0x4001e8>, <DisassemblerInsn "mov" for 0x4001ef>, <DisassemblerInsn "movzx" for 0x4001f6>, <DisassemblerInsn "and" for 0x4001f9>, <DisassemblerInsn "mov" for 0x4001fc>, <DisassemblerInsn "or" for 0x400202>, <DisassemblerInsn "mov" for 0x400204>, <DisassemblerInsn "and" for 0x40020b>, <DisassemblerInsn "movzx" for 0x40020d>, <DisassemblerInsn "mov" for 0x400210>, <DisassemblerInsn "add" for 0x400213>, <DisassemblerInsn "mov" for 0x40021a>, <DisassemblerInsn "mov" for 0x400222>, <DisassemblerInsn "mov" for 0x400228>, <DisassemblerInsn "add" for 0x40022b>, <DisassemblerInsn "mov" for 0x40022f>, <DisassemblerInsn "mov" for 0x400237>, <DisassemblerInsn "mov" for 0x40023a>, <DisassemblerInsn "add" for 0x40023d>, <DisassemblerInsn "mov" for 0x400241>, <DisassemblerInsn "mov" for 0x400249>, <DisassemblerInsn "cmp" for 0x40024b>, <DisassemblerInsn "mov" for 0x40024e>, <DisassemblerInsn "jne" for 0x400255>]'}, {'block_Idx': 138, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d2f>, <DisassemblerInsn "add" for 0x400d37>, <DisassemblerInsn "call" for 0x400d3e>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004ff>, <DisassemblerInsn "mov" for 0x400507>, <DisassemblerInsn "add" for 0x40050a>, <DisassemblerInsn "mov" for 0x40050e>, <DisassemblerInsn "mov" for 0x400516>, <DisassemblerInsn "call" for 0x400519>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d84>, <DisassemblerInsn "add" for 0x400d8b>, <DisassemblerInsn "ret" for 0x400d92>]'}, {'block_Idx': 136, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d1b>, <DisassemblerInsn "add" for 0x400d23>, <DisassemblerInsn "call" for 0x400d2a>]'}, {'block_Idx': 114, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400455>, <DisassemblerInsn "mov" for 0x40045d>, <DisassemblerInsn "mov" for 0x40045f>, <DisassemblerInsn "mov" for 0x400466>, <DisassemblerInsn "cmp" for 0x40046d>, <DisassemblerInsn "jne" for 0x400470>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005ca>, <DisassemblerInsn "mov" for 0x4005cc>, <DisassemblerInsn "cmp" for 0x4005d4>, <DisassemblerInsn "sete" for 0x4005d7>, <DisassemblerInsn "mov" for 0x4005da>, <DisassemblerInsn "mov" for 0x4005dc>, <DisassemblerInsn "mov" for 0x4005e3>, <DisassemblerInsn "mov" for 0x4005ea>, <DisassemblerInsn "mov" for 0x4005f2>, <DisassemblerInsn "mov" for 0x4005f9>, <DisassemblerInsn "mov" for 0x400600>, <DisassemblerInsn "mov" for 0x400607>, <DisassemblerInsn "and" for 0x40060e>, <DisassemblerInsn "movzx" for 0x400611>, <DisassemblerInsn "mov" for 0x400614>, <DisassemblerInsn "mov" for 0x40061b>, <DisassemblerInsn "cmp" for 0x400621>, <DisassemblerInsn "jne" for 0x400624>]'}, {'block_Idx': 103, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400aac>, <DisassemblerInsn "mov" for 0x400aaf>, <DisassemblerInsn "mov" for 0x400ab7>, <DisassemblerInsn "mov" for 0x400abe>, <DisassemblerInsn "cmp" for 0x400ac3>, <DisassemblerInsn "mov" for 0x400ac7>, <DisassemblerInsn "je" for 0x400acb>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40075b>, <DisassemblerInsn "cmp" for 0x400763>, <DisassemblerInsn "jne" for 0x400766>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40084b>, <DisassemblerInsn "mov" for 0x40084f>, <DisassemblerInsn "mov" for 0x400854>, <DisassemblerInsn "test" for 0x400858>, <DisassemblerInsn "mov" for 0x40085b>, <DisassemblerInsn "mov" for 0x400860>, <DisassemblerInsn "jne" for 0x400867>]'}, {'block_Idx': 133, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c76>, <DisassemblerInsn "mov" for 0x400c79>, <DisassemblerInsn "mov" for 0x400c81>, <DisassemblerInsn "mov" for 0x400c88>, <DisassemblerInsn "xor" for 0x400c8d>, <DisassemblerInsn "cmp" for 0x400c8f>, <DisassemblerInsn "mov" for 0x400c93>, <DisassemblerInsn "mov" for 0x400c97>, <DisassemblerInsn "jne" for 0x400c9e>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400098>, <DisassemblerInsn "mov" for 0x4000a0>, <DisassemblerInsn "mov" for 0x4000a8>, <DisassemblerInsn "mov" for 0x4000ab>, <DisassemblerInsn "lea" for 0x4000b0>, <DisassemblerInsn "mov" for 0x4000b7>, <DisassemblerInsn "call" for 0x4000b9>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400688>, <DisassemblerInsn "mov" for 0x400690>, <DisassemblerInsn "cmp" for 0x400693>, <DisassemblerInsn "setne" for 0x400696>, <DisassemblerInsn "and" for 0x400699>, <DisassemblerInsn "movzx" for 0x40069b>, <DisassemblerInsn "mov" for 0x40069e>, <DisassemblerInsn "add" for 0x4006a4>, <DisassemblerInsn "mov" for 0x4006ab>, <DisassemblerInsn "mov" for 0x4006b3>, <DisassemblerInsn "jmp" for 0x4006ba>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400118>, <DisassemblerInsn "mov" for 0x400120>, <DisassemblerInsn "mov" for 0x400128>, <DisassemblerInsn "mov" for 0x40012b>, <DisassemblerInsn "lea" for 0x400130>, <DisassemblerInsn "mov" for 0x400137>, <DisassemblerInsn "call" for 0x400139>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40056a>, <DisassemblerInsn "mov" for 0x400572>, <DisassemblerInsn "mov" for 0x40057a>, <DisassemblerInsn "mov" for 0x400581>, <DisassemblerInsn "cmp" for 0x400584>, <DisassemblerInsn "setne" for 0x400586>, <DisassemblerInsn "mov" for 0x400589>, <DisassemblerInsn "mov" for 0x400590>, <DisassemblerInsn "jmp" for 0x400597>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400554>, <DisassemblerInsn "xor" for 0x40055c>, <DisassemblerInsn "cmp" for 0x40055e>, <DisassemblerInsn "mov" for 0x400561>, <DisassemblerInsn "je" for 0x400568>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40032c>, <DisassemblerInsn "mov" for 0x400333>, <DisassemblerInsn "call" for 0x40033a>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400532>, <DisassemblerInsn "mov" for 0x400534>, <DisassemblerInsn "mov" for 0x40053c>, <DisassemblerInsn "mov" for 0x40053e>, <DisassemblerInsn "mov" for 0x400546>, <DisassemblerInsn "cmp" for 0x400548>, <DisassemblerInsn "mov" for 0x40054b>, <DisassemblerInsn "jne" for 0x400552>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40049c>, <DisassemblerInsn "mov" for 0x4004a4>, <DisassemblerInsn "call" for 0x4004a7>]'}, {'block_Idx': 110, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003de>, <DisassemblerInsn "mov" for 0x4003e5>, <DisassemblerInsn "sub" for 0x4003ec>, <DisassemblerInsn "sete" for 0x4003ef>, <DisassemblerInsn "sub" for 0x4003f2>, <DisassemblerInsn "sete" for 0x4003f5>, <DisassemblerInsn "or" for 0x4003f8>, <DisassemblerInsn "mov" for 0x4003fa>, <DisassemblerInsn "mov" for 0x4003ff>, <DisassemblerInsn "test" for 0x400404>, <DisassemblerInsn "cmovne" for 0x400407>, <DisassemblerInsn "mov" for 0x40040a>, <DisassemblerInsn "mov" for 0x400411>, <DisassemblerInsn "mov" for 0x400419>, <DisassemblerInsn "mov" for 0x400421>, <DisassemblerInsn "mov" for 0x400428>, <DisassemblerInsn "mov" for 0x40042a>, <DisassemblerInsn "call" for 0x400432>]'}, {'block_Idx': 129, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ce8>, <DisassemblerInsn "mov" for 0x400cf0>, <DisassemblerInsn "call" for 0x400cf3>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400482>, <DisassemblerInsn "mov" for 0x400484>, <DisassemblerInsn "mov" for 0x40048c>, <DisassemblerInsn "mov" for 0x40048f>, <DisassemblerInsn "cmp" for 0x400497>, <DisassemblerInsn "jne" for 0x40049a>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40062a>, <DisassemblerInsn "cmp" for 0x400632>, <DisassemblerInsn "jne" for 0x400635>]'}, {'block_Idx': 112, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b8b>, <DisassemblerInsn "cmp" for 0x400b90>, <DisassemblerInsn "je" for 0x400b93>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40048f>, <DisassemblerInsn "cmp" for 0x400497>, <DisassemblerInsn "jne" for 0x40049a>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a0f>, <DisassemblerInsn "mov" for 0x400a14>, <DisassemblerInsn "mov" for 0x400a18>, <DisassemblerInsn "cmp" for 0x400a1d>, <DisassemblerInsn "je" for 0x400a20>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40026d>, <DisassemblerInsn "mov" for 0x400274>, <DisassemblerInsn "mov" for 0x40027c>, <DisassemblerInsn "mov" for 0x400283>, <DisassemblerInsn "and" for 0x40028a>, <DisassemblerInsn "movzx" for 0x40028d>, <DisassemblerInsn "mov" for 0x400290>, <DisassemblerInsn "add" for 0x400293>, <DisassemblerInsn "mov" for 0x40029a>, <DisassemblerInsn "mov" for 0x4002a2>, <DisassemblerInsn "mov" for 0x4002a8>, <DisassemblerInsn "add" for 0x4002ab>, <DisassemblerInsn "mov" for 0x4002af>, <DisassemblerInsn "cmp" for 0x4002b7>, <DisassemblerInsn "mov" for 0x4002bb>, <DisassemblerInsn "jne" for 0x4002c2>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400997>, <DisassemblerInsn "mov" for 0x40099f>, <DisassemblerInsn "mov" for 0x4009a7>, <DisassemblerInsn "mov" for 0x4009af>, <DisassemblerInsn "mov" for 0x4009b4>, <DisassemblerInsn "mov" for 0x4009b9>, <DisassemblerInsn "mov" for 0x4009bb>, <DisassemblerInsn "cmp" for 0x4009bd>, <DisassemblerInsn "cmovg" for 0x4009bf>, <DisassemblerInsn "mov" for 0x4009c2>, <DisassemblerInsn "xor" for 0x4009c4>, <DisassemblerInsn "lea" for 0x4009c6>, <DisassemblerInsn "call" for 0x4009cd>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400646>]'}, {'block_Idx': 131, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c2e>, <DisassemblerInsn "mov" for 0x400c31>, <DisassemblerInsn "mov" for 0x400c39>, <DisassemblerInsn "mov" for 0x400c40>, <DisassemblerInsn "cmp" for 0x400c45>, <DisassemblerInsn "mov" for 0x400c49>, <DisassemblerInsn "je" for 0x400c4d>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400768>, <DisassemblerInsn "mov" for 0x400770>, <DisassemblerInsn "mov" for 0x400778>, <DisassemblerInsn "mov" for 0x400782>, <DisassemblerInsn "xor" for 0x400784>, <DisassemblerInsn "mov" for 0x400786>, <DisassemblerInsn "mov" for 0x40078d>, <DisassemblerInsn "mov" for 0x400795>, <DisassemblerInsn "jmp" for 0x40079c>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400466>, <DisassemblerInsn "cmp" for 0x40046d>, <DisassemblerInsn "jne" for 0x400470>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400007>, <DisassemblerInsn "mov" for 0x40000f>, <DisassemblerInsn "add" for 0x400012>, <DisassemblerInsn "mov" for 0x400018>, <DisassemblerInsn "cmp" for 0x400020>, <DisassemblerInsn "je" for 0x400028>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400979>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a5>, <DisassemblerInsn "mov" for 0x4001ad>, <DisassemblerInsn "cmp" for 0x4001af>, <DisassemblerInsn "mov" for 0x4001b7>, <DisassemblerInsn "jne" for 0x4001be>]'}, {'block_Idx': 122, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c21>, <DisassemblerInsn "call" for 0x400c29>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40071b>, <DisassemblerInsn "mov" for 0x400723>, <DisassemblerInsn "mov" for 0x40072b>, <DisassemblerInsn "mov" for 0x400732>, <DisassemblerInsn "mov" for 0x400739>, <DisassemblerInsn "mov" for 0x400741>, <DisassemblerInsn "cmp" for 0x400743>, <DisassemblerInsn "mov" for 0x400746>, <DisassemblerInsn "mov" for 0x40074d>, <DisassemblerInsn "jne" for 0x400755>]'}, {'block_Idx': 140, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d43>, <DisassemblerInsn "add" for 0x400d4b>, <DisassemblerInsn "call" for 0x400d52>]'}, {'block_Idx': 104, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400437>, <DisassemblerInsn "mov" for 0x40043f>, <DisassemblerInsn "mov" for 0x400442>, <DisassemblerInsn "lea" for 0x400447>, <DisassemblerInsn "mov" for 0x40044e>, <DisassemblerInsn "call" for 0x400450>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4007e9>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400523>, <DisassemblerInsn "mov" for 0x40052b>, <DisassemblerInsn "call" for 0x40052d>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400648>, <DisassemblerInsn "mov" for 0x400650>, <DisassemblerInsn "mov" for 0x400658>, <DisassemblerInsn "cmp" for 0x40065a>, <DisassemblerInsn "setne" for 0x40065d>, <DisassemblerInsn "and" for 0x400660>, <DisassemblerInsn "movzx" for 0x400663>, <DisassemblerInsn "mov" for 0x400666>, <DisassemblerInsn "add" for 0x40066c>, <DisassemblerInsn "xor" for 0x400672>, <DisassemblerInsn "mov" for 0x400674>, <DisassemblerInsn "mov" for 0x40067b>, <DisassemblerInsn "jmp" for 0x400683>]'}, {'block_Idx': 120, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400cd4>, <DisassemblerInsn "add" for 0x400cdc>, <DisassemblerInsn "call" for 0x400ce3>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400045>, <DisassemblerInsn "mov" for 0x40004a>, <DisassemblerInsn "jmp" for 0x400051>]'}, {'block_Idx': 105, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003af>, <DisassemblerInsn "mov" for 0x4003b6>, <DisassemblerInsn "sub" for 0x4003bd>, <DisassemblerInsn "sete" for 0x4003c0>, <DisassemblerInsn "sub" for 0x4003c3>, <DisassemblerInsn "sete" for 0x4003c6>, <DisassemblerInsn "or" for 0x4003c9>, <DisassemblerInsn "mov" for 0x4003cb>, <DisassemblerInsn "test" for 0x4003d0>, <DisassemblerInsn "mov" for 0x4003d3>, <DisassemblerInsn "jne" for 0x4003da>]'}, {'block_Idx': 109, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4003dc>]'}, {'block_Idx': 128, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400bef>, <DisassemblerInsn "mov" for 0x400bf2>, <DisassemblerInsn "mov" for 0x400bfa>, <DisassemblerInsn "mov" for 0x400c01>, <DisassemblerInsn "cmp" for 0x400c06>, <DisassemblerInsn "mov" for 0x400c0a>, <DisassemblerInsn "je" for 0x400c0e>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40013e>, <DisassemblerInsn "mov" for 0x400143>, <DisassemblerInsn "jmp" for 0x40014a>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400360>, <DisassemblerInsn "mov" for 0x400362>, <DisassemblerInsn "mov" for 0x400369>, <DisassemblerInsn "cmp" for 0x40036e>, <DisassemblerInsn "mov" for 0x400371>, <DisassemblerInsn "jl" for 0x400378>]'}, {'block_Idx': 101, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009f7>, <DisassemblerInsn "mov" for 0x4009fc>, <DisassemblerInsn "mov" for 0x400a04>, <DisassemblerInsn "mov" for 0x400a06>, <DisassemblerInsn "mov" for 0x400a0b>, <DisassemblerInsn "mov" for 0x400a0f>, <DisassemblerInsn "mov" for 0x400a14>, <DisassemblerInsn "mov" for 0x400a18>, <DisassemblerInsn "cmp" for 0x400a1d>, <DisassemblerInsn "je" for 0x400a20>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007ee>, <DisassemblerInsn "mov" for 0x4007f6>, <DisassemblerInsn "mov" for 0x4007fd>, <DisassemblerInsn "mov" for 0x400805>, <DisassemblerInsn "mov" for 0x40080c>, <DisassemblerInsn "mov" for 0x400814>, <DisassemblerInsn "mov" for 0x400819>, <DisassemblerInsn "mov" for 0x40081d>, <DisassemblerInsn "xor" for 0x40081f>, <DisassemblerInsn "mov" for 0x400822>, <DisassemblerInsn "mov" for 0x400826>, <DisassemblerInsn "cmp" for 0x40082c>, <DisassemblerInsn "mov" for 0x40082f>, <DisassemblerInsn "mov" for 0x400836>, <DisassemblerInsn "mov" for 0x40083e>, <DisassemblerInsn "je" for 0x400845>]'}, {'block_Idx': 100, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ca4>, <DisassemblerInsn "mov" for 0x400cac>, <DisassemblerInsn "mov" for 0x400cb0>, <DisassemblerInsn "add" for 0x400cb4>, <DisassemblerInsn "call" for 0x400cbb>]'}, {'block_Idx': 111, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400cc0>, <DisassemblerInsn "add" for 0x400cc8>, <DisassemblerInsn "call" for 0x400ccf>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4002eb>]'}, {'block_Idx': 121, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c4f>, <DisassemblerInsn "xor" for 0x400c57>, <DisassemblerInsn "cmp" for 0x400c59>, <DisassemblerInsn "mov" for 0x400c5c>, <DisassemblerInsn "je" for 0x400c63>]'}, {'block_Idx': 97, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a44>, <DisassemblerInsn "mov" for 0x400a47>, <DisassemblerInsn "mov" for 0x400a4f>, <DisassemblerInsn "mov" for 0x400a56>, <DisassemblerInsn "cmp" for 0x400a5b>, <DisassemblerInsn "mov" for 0x400a5f>, <DisassemblerInsn "je" for 0x400a63>]'}, {'block_Idx': 94, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009d2>, <DisassemblerInsn "mov" for 0x4009d5>, <DisassemblerInsn "mov" for 0x4009dd>, <DisassemblerInsn "mov" for 0x4009e4>, <DisassemblerInsn "cmp" for 0x4009e9>, <DisassemblerInsn "mov" for 0x4009ed>, <DisassemblerInsn "je" for 0x4009f1>]'}, {'block_Idx': 126, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c69>, <DisassemblerInsn "call" for 0x400c71>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005ba>, <DisassemblerInsn "mov" for 0x4005c2>, <DisassemblerInsn "call" for 0x4005c5>]'}, {'block_Idx': 117, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c14>, <DisassemblerInsn "cmp" for 0x400c1c>, <DisassemblerInsn "je" for 0x400c1f>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a89>, <DisassemblerInsn "mov" for 0x400a91>, <DisassemblerInsn "mov" for 0x400a99>, <DisassemblerInsn "mov" for 0x400a9b>, <DisassemblerInsn "xor" for 0x400a9e>, <DisassemblerInsn "lea" for 0x400aa0>, <DisassemblerInsn "call" for 0x400aa7>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40033f>, <DisassemblerInsn "mov" for 0x400346>, <DisassemblerInsn "mov" for 0x40034d>, <DisassemblerInsn "mov" for 0x40034f>, <DisassemblerInsn "cmp" for 0x400356>, <DisassemblerInsn "cmovg" for 0x400358>, <DisassemblerInsn "call" for 0x40035b>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400257>, <DisassemblerInsn "cmp" for 0x40025f>, <DisassemblerInsn "setne" for 0x400263>, <DisassemblerInsn "mov" for 0x400266>, <DisassemblerInsn "mov" for 0x40026d>, <DisassemblerInsn "mov" for 0x400274>, <DisassemblerInsn "mov" for 0x40027c>, <DisassemblerInsn "mov" for 0x400283>, <DisassemblerInsn "and" for 0x40028a>, <DisassemblerInsn "movzx" for 0x40028d>, <DisassemblerInsn "mov" for 0x400290>, <DisassemblerInsn "add" for 0x400293>, <DisassemblerInsn "mov" for 0x40029a>, <DisassemblerInsn "mov" for 0x4002a2>, <DisassemblerInsn "mov" for 0x4002a8>, <DisassemblerInsn "add" for 0x4002ab>, <DisassemblerInsn "mov" for 0x4002af>, <DisassemblerInsn "cmp" for 0x4002b7>, <DisassemblerInsn "mov" for 0x4002bb>, <DisassemblerInsn "jne" for 0x4002c2>]'}, {'block_Idx': 84, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008a0>, <DisassemblerInsn "mov" for 0x4008a7>, <DisassemblerInsn "add" for 0x4008af>, <DisassemblerInsn "mov" for 0x4008b6>, <DisassemblerInsn "cmp" for 0x4008bb>, <DisassemblerInsn "je" for 0x4008be>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40051e>, <DisassemblerInsn "jne" for 0x400521>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ad1>, <DisassemblerInsn "mov" for 0x400ad9>, <DisassemblerInsn "mov" for 0x400ae1>, <DisassemblerInsn "add" for 0x400ae4>, <DisassemblerInsn "mov" for 0x400ae8>, <DisassemblerInsn "mov" for 0x400aed>, <DisassemblerInsn "mov" for 0x400af0>, <DisassemblerInsn "mov" for 0x400af2>, <DisassemblerInsn "call" for 0x400af7>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400599>, <DisassemblerInsn "xor" for 0x4005a1>, <DisassemblerInsn "mov" for 0x4005a3>, <DisassemblerInsn "xor" for 0x4005a5>, <DisassemblerInsn "cmp" for 0x4005a7>, <DisassemblerInsn "mov" for 0x4005aa>, <DisassemblerInsn "mov" for 0x4005b1>, <DisassemblerInsn "je" for 0x4005b8>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002f0>, <DisassemblerInsn "mov" for 0x4002f8>, <DisassemblerInsn "call" for 0x4002fb>]'}, {'block_Idx': 142, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d57>, <DisassemblerInsn "add" for 0x400d5f>, <DisassemblerInsn "call" for 0x400d66>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a22>, <DisassemblerInsn "mov" for 0x400a2a>, <DisassemblerInsn "mov" for 0x400a32>, <DisassemblerInsn "mov" for 0x400a34>, <DisassemblerInsn "xor" for 0x400a36>, <DisassemblerInsn "lea" for 0x400a38>, <DisassemblerInsn "call" for 0x400a3f>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400941>, <DisassemblerInsn "mov" for 0x400948>, <DisassemblerInsn "mov" for 0x40094c>, <DisassemblerInsn "mov" for 0x400951>, <DisassemblerInsn "cmp" for 0x400955>, <DisassemblerInsn "sete" for 0x400958>, <DisassemblerInsn "and" for 0x40095c>, <DisassemblerInsn "test" for 0x40095f>, <DisassemblerInsn "mov" for 0x400962>, <DisassemblerInsn "mov" for 0x400965>, <DisassemblerInsn "mov" for 0x40096a>, <DisassemblerInsn "mov" for 0x40096f>, <DisassemblerInsn "jne" for 0x400973>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000be>, <DisassemblerInsn "mov" for 0x4000c3>, <DisassemblerInsn "jmp" for 0x4000ca>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004b9>, <DisassemblerInsn "mov" for 0x4004c1>, <DisassemblerInsn "add" for 0x4004c4>, <DisassemblerInsn "mov" for 0x4004cb>, <DisassemblerInsn "cmp" for 0x4004d3>, <DisassemblerInsn "je" for 0x4004da>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004e9>, <DisassemblerInsn "mov" for 0x4004f1>, <DisassemblerInsn "cmp" for 0x4004f3>, <DisassemblerInsn "mov" for 0x4004f6>, <DisassemblerInsn "jne" for 0x4004fd>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400411>, <DisassemblerInsn "mov" for 0x400419>, <DisassemblerInsn "mov" for 0x400421>, <DisassemblerInsn "mov" for 0x400428>, <DisassemblerInsn "mov" for 0x40042a>, <DisassemblerInsn "call" for 0x400432>]'}, {'block_Idx': 107, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b1d>, <DisassemblerInsn "cmp" for 0x400b22>, <DisassemblerInsn "je" for 0x400b25>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400056>, <DisassemblerInsn "mov" for 0x40005e>, <DisassemblerInsn "add" for 0x400061>, <DisassemblerInsn "mov" for 0x400065>, <DisassemblerInsn "mov" for 0x40006d>, <DisassemblerInsn "call" for 0x400071>]'}, {'block_Idx': 144, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d6b>, <DisassemblerInsn "mov" for 0x400d73>, <DisassemblerInsn "mov" for 0x400d77>, <DisassemblerInsn "mov" for 0x400d7d>, <DisassemblerInsn "mov" for 0x400d84>, <DisassemblerInsn "add" for 0x400d8b>, <DisassemblerInsn "ret" for 0x400d92>]'}, {'block_Idx': 91, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40037e>, <DisassemblerInsn "mov" for 0x400386>, <DisassemblerInsn "cmp" for 0x40038b>, <DisassemblerInsn "mov" for 0x40038e>, <DisassemblerInsn "jne" for 0x400395>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40002a>, <DisassemblerInsn "mov" for 0x400032>, <DisassemblerInsn "lea" for 0x400037>, <DisassemblerInsn "mov" for 0x40003e>, <DisassemblerInsn "call" for 0x400040>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40014f>, <DisassemblerInsn "mov" for 0x400156>, <DisassemblerInsn "mov" for 0x40015e>, <DisassemblerInsn "mov" for 0x400166>, <DisassemblerInsn "mov" for 0x400168>, <DisassemblerInsn "cmp" for 0x40016f>, <DisassemblerInsn "setg" for 0x400171>, <DisassemblerInsn "mov" for 0x400175>, <DisassemblerInsn "cmp" for 0x40017d>, <DisassemblerInsn "mov" for 0x40017f>, <DisassemblerInsn "cmovg" for 0x400181>, <DisassemblerInsn "mov" for 0x400184>, <DisassemblerInsn "and" for 0x400187>, <DisassemblerInsn "movzx" for 0x40018b>, <DisassemblerInsn "mov" for 0x40018f>, <DisassemblerInsn "cmp" for 0x400195>, <DisassemblerInsn "setl" for 0x400197>, <DisassemblerInsn "cmp" for 0x40019a>, <DisassemblerInsn "mov" for 0x40019c>, <DisassemblerInsn "jne" for 0x4001a3>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40090c>, <DisassemblerInsn "mov" for 0x400914>, <DisassemblerInsn "mov" for 0x40091b>, <DisassemblerInsn "mov" for 0x400923>, <DisassemblerInsn "mov" for 0x40092a>, <DisassemblerInsn "mov" for 0x400934>, <DisassemblerInsn "mov" for 0x400938>, <DisassemblerInsn "mov" for 0x40093d>, <DisassemblerInsn "mov" for 0x400941>, <DisassemblerInsn "mov" for 0x400948>, <DisassemblerInsn "mov" for 0x40094c>, <DisassemblerInsn "mov" for 0x400951>, <DisassemblerInsn "cmp" for 0x400955>, <DisassemblerInsn "sete" for 0x400958>, <DisassemblerInsn "and" for 0x40095c>, <DisassemblerInsn "test" for 0x40095f>, <DisassemblerInsn "mov" for 0x400962>, <DisassemblerInsn "mov" for 0x400965>, <DisassemblerInsn "mov" for 0x40096a>, <DisassemblerInsn "mov" for 0x40096f>, <DisassemblerInsn "jne" for 0x400973>]'}, {'block_Idx': 118, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b95>, <DisassemblerInsn "mov" for 0x400b9d>, <DisassemblerInsn "mov" for 0x400ba5>, <DisassemblerInsn "mov" for 0x400bad>, <DisassemblerInsn "mov" for 0x400bb2>, <DisassemblerInsn "mov" for 0x400bba>, <DisassemblerInsn "mov" for 0x400bbf>, <DisassemblerInsn "mov" for 0x400bc2>, <DisassemblerInsn "add" for 0x400bc5>, <DisassemblerInsn "cmp" for 0x400bc9>, <DisassemblerInsn "cmove" for 0x400bcd>, <DisassemblerInsn "mov" for 0x400bd1>, <DisassemblerInsn "mov" for 0x400bd3>, <DisassemblerInsn "mov" for 0x400bd5>, <DisassemblerInsn "mov" for 0x400bd7>, <DisassemblerInsn "cmp" for 0x400bda>, <DisassemblerInsn "sete" for 0x400be1>, <DisassemblerInsn "and" for 0x400be4>, <DisassemblerInsn "movzx" for 0x400be6>, <DisassemblerInsn "call" for 0x400bea>]'}, {'block_Idx': 102, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400afc>, <DisassemblerInsn "mov" for 0x400aff>, <DisassemblerInsn "mov" for 0x400b07>, <DisassemblerInsn "mov" for 0x400b0a>, <DisassemblerInsn "cmp" for 0x400b0f>, <DisassemblerInsn "mov" for 0x400b13>, <DisassemblerInsn "je" for 0x400b17>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a69>, <DisassemblerInsn "mov" for 0x400a71>, <DisassemblerInsn "add" for 0x400a74>, <DisassemblerInsn "mov" for 0x400a7b>, <DisassemblerInsn "cmp" for 0x400a80>, <DisassemblerInsn "je" for 0x400a87>]'}, {'block_Idx': 99, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400397>, <DisassemblerInsn "mov" for 0x40039e>, <DisassemblerInsn "cmp" for 0x4003a3>, <DisassemblerInsn "mov" for 0x4003a6>, <DisassemblerInsn "jae" for 0x4003ad>]'}, {'block_Idx': 124, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b66>, <DisassemblerInsn "mov" for 0x400b69>, <DisassemblerInsn "mov" for 0x400b71>, <DisassemblerInsn "mov" for 0x400b78>, <DisassemblerInsn "cmp" for 0x400b7d>, <DisassemblerInsn "mov" for 0x400b81>, <DisassemblerInsn "je" for 0x400b85>]'}, {'block_Idx': 113, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b27>, <DisassemblerInsn "mov" for 0x400b2f>, <DisassemblerInsn "mov" for 0x400b37>, <DisassemblerInsn "mov" for 0x400b3f>, <DisassemblerInsn "mov" for 0x400b47>, <DisassemblerInsn "mov" for 0x400b49>, <DisassemblerInsn "mov" for 0x400b4c>, <DisassemblerInsn "mov" for 0x400b4e>, <DisassemblerInsn "cmp" for 0x400b51>, <DisassemblerInsn "sete" for 0x400b58>, <DisassemblerInsn "and" for 0x400b5b>, <DisassemblerInsn "movzx" for 0x400b5d>, <DisassemblerInsn "call" for 0x400b61>]'}, {'block_Idx': 134, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400cf8>, <DisassemblerInsn "mov" for 0x400d00>, <DisassemblerInsn "mov" for 0x400d08>, <DisassemblerInsn "add" for 0x400d0f>, <DisassemblerInsn "call" for 0x400d16>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40063b>, <DisassemblerInsn "test" for 0x400642>, <DisassemblerInsn "jne" for 0x400644>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008e6>, <DisassemblerInsn "mov" for 0x4008ee>, <DisassemblerInsn "mov" for 0x4008f3>, <DisassemblerInsn "mov" for 0x4008f9>, <DisassemblerInsn "xor" for 0x4008fb>, <DisassemblerInsn "mov" for 0x4008fd>, <DisassemblerInsn "mov" for 0x400901>, <DisassemblerInsn "mov" for 0x400906>, <DisassemblerInsn "jmp" for 0x40090a>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400472>, <DisassemblerInsn "mov" for 0x40047a>, <DisassemblerInsn "call" for 0x40047d>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004ac>, <DisassemblerInsn "mov" for 0x4004ae>, <DisassemblerInsn "mov" for 0x4004b6>, <DisassemblerInsn "mov" for 0x4004b9>, <DisassemblerInsn "mov" for 0x4004c1>, <DisassemblerInsn "add" for 0x4004c4>, <DisassemblerInsn "mov" for 0x4004cb>, <DisassemblerInsn "cmp" for 0x4004d3>, <DisassemblerInsn "je" for 0x4004da>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40097b>, <DisassemblerInsn "mov" for 0x400980>, <DisassemblerInsn "mov" for 0x400988>, <DisassemblerInsn "mov" for 0x400992>, <DisassemblerInsn "mov" for 0x400997>, <DisassemblerInsn "mov" for 0x40099f>, <DisassemblerInsn "mov" for 0x4009a7>, <DisassemblerInsn "mov" for 0x4009af>, <DisassemblerInsn "mov" for 0x4009b4>, <DisassemblerInsn "mov" for 0x4009b9>, <DisassemblerInsn "mov" for 0x4009bb>, <DisassemblerInsn "cmp" for 0x4009bd>, <DisassemblerInsn "cmovg" for 0x4009bf>, <DisassemblerInsn "mov" for 0x4009c2>, <DisassemblerInsn "xor" for 0x4009c4>, <DisassemblerInsn "lea" for 0x4009c6>, <DisassemblerInsn "call" for 0x4009cd>]'}], 'cfg_block_detailed_info': [{'block_Idx': 20, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x148]>', '<mov~~rax, qword ptr [rsp + 0x160]>', '<mov~~rax, qword ptr [rax]>', '<cmp~~rax, qword ptr [rcx]>', '<setne~~al>', '<mov~~byte ptr [rsp + 0x147], al>', '<mov~~rdx, qword ptr [rsp + 0x178]>', '<mov~~al, byte ptr [rsp + 0x146]>', '<mov~~cl, byte ptr [rsp + 0x147]>', '<movzx~~esi, cl>', '<and~~esi, 1>', '<mov~~dword ptr [rdx + 0x84], esi>', '<or~~al, cl>', '<mov~~byte ptr [rsp + 0x11f], al>', '<and~~al, 1>', '<movzx~~eax, al>', '<mov~~rcx, rdx>', '<add~~rcx, 0x88>', '<mov~~qword ptr [rsp + 0x120], rcx>', '<mov~~dword ptr [rdx + 0x88], eax>', '<mov~~rax, rdx>', '<add~~rax, 0x14>', '<mov~~qword ptr [rsp + 0x128], rax>', '<mov~~ecx, dword ptr [rdx + 0x14]>', '<mov~~rax, rdx>', '<add~~rax, 0x24>', '<mov~~qword ptr [rsp + 0x130], rax>', '<mov~~al, 1>', '<cmp~~ecx, dword ptr [rdx + 0x24]>', '<mov~~byte ptr [rsp + 0x13f], al>', '<jne~~0x40026d>']}, {'block_Idx': 69, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x98]>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~edx, dword ptr [rsp + 0xbc]>', '<cmp~~edx, 0>', '<setne~~dl>', '<mov~~sil, dl>', '<and~~sil, 1>', '<movzx~~esi, sil>', '<mov~~dword ptr [rax + 0x98], esi>', '<mov~~eax, 1>', '<test~~dl, 1>', '<mov~~qword ptr [rsp + 0x78], rcx>', '<mov~~dword ptr [rsp + 0x80], eax>', '<jne~~0x40086e>']}, {'block_Idx': 93, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x98]>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~dword ptr [rax], 4>', '<mov~~dl, 1>', '<xor~~eax, eax>', '<mov~~byte ptr [rsp + 0x57], dl>', '<mov~~qword ptr [rsp + 0x58], rcx>', '<mov~~dword ptr [rsp + 0x64], eax>', '<jmp~~0x400941>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~dword ptr [rsp + 0x154], eax>', '<mov~~rdx, rcx>', '<add~~rdx, 0x78>', '<mov~~qword ptr [rsp + 0x158], rdx>', '<mov~~dword ptr [rcx + 0x78], eax>', '<add~~eax, -0x21>', '<cmp~~eax, -0x20>', '<jae~~0x40014f>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~dl, byte ptr [rsp + 0xcb]>', '<mov~~eax, dword ptr [rsp + 0xcc]>', '<mov~~dword ptr [rsp + 0xbc], eax>', '<mov~~byte ptr [rsp + 0xc3], dl>', '<and~~dl, 1>', '<movzx~~edx, dl>', '<mov~~dword ptr [rsp + 0xc4], edx>', '<mov~~dword ptr [rcx + 0x90], edx>', '<cmp~~eax, 0>', '<jne~~0x4006bc>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x108]>', '<mov~~eax, dword ptr [rax]>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0xdc], eax>', '<jne~~0x40056a>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x78]>', '<mov~~eax, dword ptr [rsp + 0x80]>', '<mov~~dword ptr [rdx + 0xf4], 1>', '<mov~~dl, 1>', '<mov~~byte ptr [rsp + 0x57], dl>', '<mov~~qword ptr [rsp + 0x58], rcx>', '<mov~~dword ptr [rsp + 0x64], eax>', '<jmp~~0x400941>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, rax>', '<add~~rcx, 0x18>', '<mov~~qword ptr [rsp + 0x148], rcx>', '<mov~~rdi, qword ptr [rax + 0x18]>', '<call~~0x500008>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~dword ptr [rsp + 0xf8], ecx>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500010>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~sil, byte ptr [rsp + 0xc3]>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x110]>', '<mov~~ecx, dword ptr [rcx]>', '<cmp~~ecx, dword ptr [rax + 0x20]>', '<setne~~cl>', '<and~~cl, 1>', '<movzx~~edx, cl>', '<mov~~dword ptr [rax + 0x94], edx>', '<add~~rax, 0x90>', '<xor~~ecx, ecx>', '<test~~sil, 1>', '<mov~~rsi, rax>', '<mov~~qword ptr [rsp + 0xa0], rsi>', '<mov~~dword ptr [rsp + 0xa8], edx>', '<mov~~byte ptr [rsp + 0xaf], cl>', '<mov~~qword ptr [rsp + 0xb0], rax>', '<jne~~0x4007ee>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x140]>', '<mov~~dl, byte ptr [rsp + 0x107]>', '<mov~~cl, byte ptr [rsp + 0x11f]>', '<or~~cl, dl>', '<test~~cl, 1>', '<mov~~dword ptr [rsp + 0x118], eax>', '<jne~~0x4002f0>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x120]>', '<cmp~~dword ptr [rax], 0>', '<jne~~0x40053e>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~rdx, rcx>', '<add~~rdx, 0x74>', '<mov~~qword ptr [rsp + 0x168], rdx>', '<mov~~dword ptr [rcx + 0x74], eax>', '<add~~eax, -0x21>', '<cmp~~eax, -0x20>', '<jae~~0x4000cf>']}, {'block_Idx': 72, 'blockInsts': ['<jmp~~0x40097b>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0xf8]>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<call~~0x500018>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x178]>', '<mov~~al, byte ptr [rsp + 0x146]>', '<mov~~cl, byte ptr [rsp + 0x147]>', '<movzx~~esi, cl>', '<and~~esi, 1>', '<mov~~dword ptr [rdx + 0x84], esi>', '<or~~al, cl>', '<mov~~byte ptr [rsp + 0x11f], al>', '<and~~al, 1>', '<movzx~~eax, al>', '<mov~~rcx, rdx>', '<add~~rcx, 0x88>', '<mov~~qword ptr [rsp + 0x120], rcx>', '<mov~~dword ptr [rdx + 0x88], eax>', '<mov~~rax, rdx>', '<add~~rax, 0x14>', '<mov~~qword ptr [rsp + 0x128], rax>', '<mov~~ecx, dword ptr [rdx + 0x14]>', '<mov~~rax, rdx>', '<add~~rax, 0x24>', '<mov~~qword ptr [rsp + 0x130], rax>', '<mov~~al, 1>', '<cmp~~ecx, dword ptr [rdx + 0x24]>', '<mov~~byte ptr [rsp + 0x13f], al>', '<jne~~0x40026d>']}, {'block_Idx': 138, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<add~~rdi, 0xd0>', '<call~~0x500070>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, rax>', '<add~~rcx, 0x20>', '<mov~~qword ptr [rsp + 0xd0], rcx>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500028>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x174]>', '<add~~rsp, 0x188>', '<ret~~>']}, {'block_Idx': 136, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<add~~rdi, 0xc8>', '<call~~0x500068>']}, {'block_Idx': 114, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x168]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x118], eax>', '<mov~~eax, dword ptr [rsp + 0x118]>', '<cmp~~eax, 1>', '<jne~~0x40048f>']}, {'block_Idx': 59, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x108]>', '<cmp~~ecx, 0>', '<sete~~cl>', '<mov~~eax, dword ptr [rax]>', '<mov~~byte ptr [rsp + 0xcb], cl>', '<mov~~dword ptr [rsp + 0xcc], eax>', '<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~dl, byte ptr [rsp + 0xcb]>', '<mov~~eax, dword ptr [rsp + 0xcc]>', '<mov~~dword ptr [rsp + 0xbc], eax>', '<mov~~byte ptr [rsp + 0xc3], dl>', '<and~~dl, 1>', '<movzx~~edx, dl>', '<mov~~dword ptr [rsp + 0xc4], edx>', '<mov~~dword ptr [rcx + 0x90], edx>', '<cmp~~eax, 0>', '<jne~~0x4006bc>']}, {'block_Idx': 103, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rax + 0xb0], rcx>', '<mov~~eax, 0xffffffea>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<je~~0x400ca4>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe0]>', '<cmp~~dword ptr [rax], 0>', '<jne~~0x4007a1>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x74]>', '<mov~~rcx, qword ptr [rsp + 0x68]>', '<mov~~dl, byte ptr [rsp + 0x73]>', '<test~~dl, 1>', '<mov~~qword ptr [rsp + 0x78], rcx>', '<mov~~dword ptr [rsp + 0x80], eax>', '<jne~~0x40086e>']}, {'block_Idx': 133, 'blockInsts': ['<mov~~rdx, rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rax + 0xd8], rdx>', '<mov~~ecx, 0xfffffff4>', '<xor~~eax, eax>', '<cmp~~rdx, 0>', '<mov~~dword ptr [rsp + 0x2c], ecx>', '<mov~~dword ptr [rsp + 0x174], eax>', '<jne~~0x400d84>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x160]>', '<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x29ca]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~eax, dword ptr [rcx + 0x10]>', '<cmp~~eax, dword ptr [rcx + 0x20]>', '<setne~~al>', '<and~~al, 1>', '<movzx~~eax, al>', '<mov~~dword ptr [rcx + 0x94], eax>', '<add~~rcx, 0x90>', '<mov~~qword ptr [rsp + 0xa0], rcx>', '<mov~~dword ptr [rsp + 0xa8], eax>', '<jmp~~0x40071b>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x148]>', '<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x296d]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x110]>', '<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~eax, dword ptr [rsp + 0xdc]>', '<mov~~ecx, dword ptr [rcx + 0x10]>', '<cmp~~ecx, dword ptr [rdx]>', '<setne~~cl>', '<mov~~byte ptr [rsp + 0xcb], cl>', '<mov~~dword ptr [rsp + 0xcc], eax>', '<jmp~~0x4005ea>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x120]>', '<xor~~eax, eax>', '<cmp~~dword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0xdc], eax>', '<je~~0x400599>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0xf4]>', '<mov~~dword ptr [rsp + 0xf0], eax>', '<call~~0x500018>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x110]>', '<mov~~dword ptr [rax], ecx>', '<mov~~rax, qword ptr [rsp + 0x108]>', '<mov~~eax, dword ptr [rax]>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0xdc], eax>', '<jne~~0x40056a>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500010>']}, {'block_Idx': 110, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xf4]>', '<mov~~ecx, dword ptr [rsp + 0xf8]>', '<sub~~ecx, 8>', '<sete~~dl>', '<sub~~eax, 8>', '<sete~~al>', '<or~~dl, al>', '<mov~~eax, 7>', '<mov~~ecx, 9>', '<test~~dl, 1>', '<cmovne~~eax, ecx>', '<mov~~dword ptr [rsp + 0x100], eax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x110]>', '<mov~~edi, dword ptr [rsp + 0x100]>', '<mov~~dword ptr [rcx], edi>', '<mov~~qword ptr [rsp + 0xe8], rax>', '<call~~0x500020>']}, {'block_Idx': 129, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x180]>', '<mov~~rdi, qword ptr [rax]>', '<call~~0x500060>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~dword ptr [rax + 0x10], ecx>', '<mov~~rax, qword ptr [rsp + 0x158]>', '<cmp~~dword ptr [rax], 1>', '<jne~~0x4004b9>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x120]>', '<cmp~~dword ptr [rax], 0>', '<jne~~0x4006bc>']}, {'block_Idx': 112, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x400c14>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x158]>', '<cmp~~dword ptr [rax], 1>', '<jne~~0x4004b9>']}, {'block_Idx': 71, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~qword ptr [rsp + 0x18], rcx>', '<cmp~~eax, 0>', '<je~~0x400a69>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x140]>', '<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~dl, byte ptr [rsp + 0x13f]>', '<mov~~byte ptr [rsp + 0x107], dl>', '<and~~dl, 1>', '<movzx~~edx, dl>', '<mov~~rsi, rcx>', '<add~~rsi, 0x8c>', '<mov~~qword ptr [rsp + 0x108], rsi>', '<mov~~dword ptr [rcx + 0x8c], edx>', '<mov~~rdx, rcx>', '<add~~rdx, 0x28>', '<mov~~qword ptr [rsp + 0x110], rdx>', '<cmp~~dword ptr [rcx + 0x28], -1>', '<mov~~dword ptr [rsp + 0x118], eax>', '<jne~~0x400466>']}, {'block_Idx': 77, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x110]>', '<mov~~rdx, qword ptr [rsp + 0x158]>', '<mov~~rcx, qword ptr [rsp + 0x168]>', '<mov~~rsi, qword ptr [rsp + 0x30]>', '<mov~~qword ptr [rsp + 0x20], rsi>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~edi, dword ptr [rdx]>', '<cmp~~ecx, edi>', '<cmovg~~edi, ecx>', '<mov~~edx, dword ptr [rax]>', '<xor~~esi, esi>', '<lea~~rcx, [rip + 0x211f]>', '<call~~0x500030>']}, {'block_Idx': 60, 'blockInsts': ['<jmp~~0x400688>']}, {'block_Idx': 131, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rax + 0xd0], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<je~~0x400ca4>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x98]>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~dword ptr [rax + 0x98], 0>', '<mov~~dl, 1>', '<xor~~eax, eax>', '<mov~~byte ptr [rsp + 0x87], dl>', '<mov~~qword ptr [rsp + 0x88], rcx>', '<mov~~dword ptr [rsp + 0x90], eax>', '<jmp~~0x40090c>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x118]>', '<cmp~~eax, 1>', '<jne~~0x40048f>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x188>', '<mov~~qword ptr [rsp + 0x178], rdi>', '<mov~~rax, rdi>', '<add~~rax, 0xb8>', '<mov~~qword ptr [rsp + 0x180], rax>', '<cmp~~qword ptr [rdi + 0xb8], 0>', '<je~~0x400056>']}, {'block_Idx': 70, 'blockInsts': ['<jmp~~0x400997>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~al, 1>', '<cmp~~qword ptr [rcx + 0xe8], 0>', '<mov~~byte ptr [rsp + 0x147], al>', '<jne~~0x4001e0>']}, {'block_Idx': 122, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<call~~0x500048>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x120]>', '<mov~~rax, qword ptr [rsp + 0xa0]>', '<mov~~ecx, dword ptr [rsp + 0xa8]>', '<mov~~dword ptr [rsp + 0x94], ecx>', '<mov~~qword ptr [rsp + 0x98], rax>', '<mov~~cl, 1>', '<cmp~~dword ptr [rdx], 0>', '<mov~~byte ptr [rsp + 0xaf], cl>', '<mov~~qword ptr [rsp + 0xb0], rax>', '<jne~~0x4007ee>']}, {'block_Idx': 140, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<add~~rdi, 0xd8>', '<call~~0x500078>']}, {'block_Idx': 104, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xe8]>', '<mov~~rcx, rax>', '<mov~~esi, 0x30>', '<lea~~rdx, [rip + 0x267a]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 76, 'blockInsts': ['<jmp~~0x4008a0>']}, {'block_Idx': 65, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd0]>', '<mov~~edi, dword ptr [rax]>', '<call~~0x500010>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x110]>', '<mov~~ecx, dword ptr [rcx]>', '<cmp~~ecx, dword ptr [rax + 0x20]>', '<setne~~cl>', '<and~~cl, 1>', '<movzx~~ecx, cl>', '<mov~~dword ptr [rax + 0x94], ecx>', '<add~~rax, 0x90>', '<xor~~ecx, ecx>', '<mov~~byte ptr [rsp + 0xaf], cl>', '<mov~~qword ptr [rsp + 0xb0], rax>', '<jmp~~0x4007ee>']}, {'block_Idx': 120, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<add~~rdi, 0xb0>', '<call~~0x500058>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x174], eax>', '<jmp~~0x400d84>']}, {'block_Idx': 105, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xf4]>', '<mov~~ecx, dword ptr [rsp + 0xf8]>', '<sub~~ecx, 7>', '<sete~~cl>', '<sub~~eax, 7>', '<sete~~al>', '<or~~cl, al>', '<mov~~eax, 8>', '<test~~cl, 1>', '<mov~~dword ptr [rsp + 0x100], eax>', '<jne~~0x4003de>']}, {'block_Idx': 109, 'blockInsts': ['<jmp~~0x400411>']}, {'block_Idx': 128, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rax + 0xc8], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<je~~0x400ca4>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x174], eax>', '<jmp~~0x400d84>']}, {'block_Idx': 83, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0xfc], ecx>', '<mov~~eax, 6>', '<cmp~~ecx, 3>', '<mov~~dword ptr [rsp + 0x100], eax>', '<jl~~0x400411>']}, {'block_Idx': 101, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x108]>', '<mov~~eax, dword ptr [rax]>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~qword ptr [rsp + 0x18], rcx>', '<cmp~~eax, 0>', '<je~~0x400a69>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~eax, dword ptr [rsp + 0xc4]>', '<mov~~rsi, qword ptr [rsp + 0xe0]>', '<mov~~dl, byte ptr [rsp + 0xaf]>', '<mov~~rcx, qword ptr [rsp + 0xb0]>', '<mov~~qword ptr [rsp + 0x68], rcx>', '<mov~~byte ptr [rsp + 0x73], dl>', '<mov~~esi, dword ptr [rsi]>', '<xor~~eax, 1>', '<mov~~dword ptr [rsp + 0x74], eax>', '<mov~~dword ptr [rdi + 0x98], eax>', '<cmp~~esi, 0>', '<mov~~byte ptr [rsp + 0x87], dl>', '<mov~~qword ptr [rsp + 0x88], rcx>', '<mov~~dword ptr [rsp + 0x90], eax>', '<je~~0x40090c>']}, {'block_Idx': 100, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<mov~~dword ptr [rsp + 4], eax>', '<add~~rdi, 0xa0>', '<call~~0x500058>']}, {'block_Idx': 111, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<add~~rdi, 0xa8>', '<call~~0x500058>']}, {'block_Idx': 25, 'blockInsts': ['<jmp~~0x400466>']}, {'block_Idx': 121, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x120]>', '<xor~~eax, eax>', '<cmp~~dword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0x174], eax>', '<je~~0x400d84>']}, {'block_Idx': 97, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<mov~~eax, 0xffffffea>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<je~~0x400ca4>']}, {'block_Idx': 94, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rax + 0xa0], rcx>', '<mov~~eax, 0xffffffea>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<je~~0x400ca4>']}, {'block_Idx': 126, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<call~~0x500050>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500028>']}, {'block_Idx': 117, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x108]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x400c4f>']}, {'block_Idx': 87, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x158]>', '<mov~~edi, dword ptr [rcx]>', '<mov~~edx, dword ptr [rax + 0x20]>', '<xor~~esi, esi>', '<lea~~rcx, [rip + 0x2063]>', '<call~~0x500030>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xf0]>', '<mov~~edi, dword ptr [rsp + 0xf4]>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0xf8]>', '<cmp~~ecx, edx>', '<cmovg~~edi, eax>', '<call~~0x500018>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<cmp~~dword ptr [rax + 0x4c], 0>', '<setne~~al>', '<mov~~byte ptr [rsp + 0x13f], al>', '<mov~~eax, dword ptr [rsp + 0x140]>', '<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~dl, byte ptr [rsp + 0x13f]>', '<mov~~byte ptr [rsp + 0x107], dl>', '<and~~dl, 1>', '<movzx~~edx, dl>', '<mov~~rsi, rcx>', '<add~~rsi, 0x8c>', '<mov~~qword ptr [rsp + 0x108], rsi>', '<mov~~dword ptr [rcx + 0x8c], edx>', '<mov~~rdx, rcx>', '<add~~rdx, 0x28>', '<mov~~qword ptr [rsp + 0x110], rdx>', '<cmp~~dword ptr [rcx + 0x28], -1>', '<mov~~dword ptr [rsp + 0x118], eax>', '<jne~~0x400466>']}, {'block_Idx': 84, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x94]>', '<mov~~rcx, qword ptr [rsp + 0x178]>', '<add~~rcx, 0xf4>', '<mov~~qword ptr [rsp + 0x48], rcx>', '<cmp~~eax, 0>', '<je~~0x4008e6>']}, {'block_Idx': 57, 'blockInsts': ['<cmp~~eax, 0>', '<jne~~0x40053e>']}, {'block_Idx': 86, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~rdx, rcx>', '<add~~rdx, 0x20>', '<mov~~qword ptr [rsp + 8], rdx>', '<mov~~edi, dword ptr [rcx + 0x20]>', '<mov~~esi, dword ptr [rax]>', '<mov~~edx, 0x400>', '<call~~0x500038>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xe0]>', '<xor~~eax, eax>', '<mov~~cl, al>', '<xor~~eax, eax>', '<cmp~~dword ptr [rdx], 0>', '<mov~~byte ptr [rsp + 0xcb], cl>', '<mov~~dword ptr [rsp + 0xcc], eax>', '<je~~0x4005ea>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~edi, dword ptr [rax + 0x10]>', '<call~~0x500010>']}, {'block_Idx': 142, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<add~~rdi, 0xe8>', '<call~~0x500080>']}, {'block_Idx': 79, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x110]>', '<mov~~rcx, qword ptr [rsp + 0x158]>', '<mov~~edi, dword ptr [rcx]>', '<mov~~edx, dword ptr [rax]>', '<xor~~esi, esi>', '<lea~~rcx, [rip + 0x20b7]>', '<call~~0x500030>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xbc]>', '<mov~~dl, byte ptr [rsp + 0x57]>', '<mov~~rcx, qword ptr [rsp + 0x58]>', '<mov~~esi, dword ptr [rsp + 0x64]>', '<cmp~~esi, 0>', '<sete~~sil>', '<and~~dl, sil>', '<test~~dl, 1>', '<mov~~rdx, rcx>', '<mov~~qword ptr [rsp + 0x30], rdx>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<jne~~0x400a0f>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x174], eax>', '<jmp~~0x400d84>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, rax>', '<add~~rcx, 0xf0>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<cmp~~dword ptr [rax + 0xf0], 0>', '<je~~0x40053e>']}, {'block_Idx': 42, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x108]>', '<mov~~eax, dword ptr [rax]>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0xdc], eax>', '<jne~~0x40056a>']}, {'block_Idx': 90, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x110]>', '<mov~~edi, dword ptr [rsp + 0x100]>', '<mov~~dword ptr [rcx], edi>', '<mov~~qword ptr [rsp + 0xe8], rax>', '<call~~0x500020>']}, {'block_Idx': 107, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x400b8b>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, rax>', '<add~~rcx, 8>', '<mov~~qword ptr [rsp + 0x160], rcx>', '<mov~~rdi, qword ptr [rax + 8]>', '<call~~0x500008>']}, {'block_Idx': 144, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xe0]>', '<mov~~eax, dword ptr [rsp + 4]>', '<mov~~dword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0x174], eax>', '<mov~~eax, dword ptr [rsp + 0x174]>', '<add~~rsp, 0x188>', '<ret~~>']}, {'block_Idx': 91, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x120]>', '<mov~~eax, 8>', '<cmp~~dword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0x100], eax>', '<jne~~0x400411>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x2a1a]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x154]>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x168]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x140], ecx>', '<cmp~~ecx, edx>', '<setg~~sil>', '<mov~~byte ptr [rsp + 0x146], sil>', '<cmp~~ecx, edx>', '<mov~~edi, ecx>', '<cmovg~~edi, edx>', '<mov~~dword ptr [rax + 0x7c], edi>', '<and~~sil, 1>', '<movzx~~esi, sil>', '<mov~~dword ptr [rax + 0x80], esi>', '<cmp~~ecx, edx>', '<setl~~al>', '<cmp~~ecx, edx>', '<mov~~byte ptr [rsp + 0x147], al>', '<jne~~0x4001e0>']}, {'block_Idx': 63, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x178]>', '<mov~~dl, byte ptr [rsp + 0x87]>', '<mov~~rcx, qword ptr [rsp + 0x88]>', '<mov~~eax, dword ptr [rsp + 0x90]>', '<mov~~dword ptr [rsi + 0xf4], 0>', '<mov~~byte ptr [rsp + 0x57], dl>', '<mov~~qword ptr [rsp + 0x58], rcx>', '<mov~~dword ptr [rsp + 0x64], eax>', '<mov~~eax, dword ptr [rsp + 0xbc]>', '<mov~~dl, byte ptr [rsp + 0x57]>', '<mov~~rcx, qword ptr [rsp + 0x58]>', '<mov~~esi, dword ptr [rsp + 0x64]>', '<cmp~~esi, 0>', '<sete~~sil>', '<and~~dl, sil>', '<test~~dl, 1>', '<mov~~rdx, rcx>', '<mov~~qword ptr [rsp + 0x30], rdx>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<jne~~0x400a0f>']}, {'block_Idx': 118, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~rax, qword ptr [rsp + 0x130]>', '<mov~~rcx, qword ptr [rsp + 0x158]>', '<mov~~rsi, qword ptr [rsp + 8]>', '<mov~~rdx, qword ptr [rsp + 0x110]>', '<mov~~r8, qword ptr [rsp + 0x18]>', '<mov~~r9d, dword ptr [r8]>', '<mov~~r8, rdi>', '<add~~r8, 0x10>', '<cmp~~r9d, 0>', '<cmove~~rdx, r8>', '<mov~~edx, dword ptr [rdx]>', '<mov~~esi, dword ptr [rsi]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~r8d, dword ptr [rax]>', '<cmp~~dword ptr [rdi + 0xf4], 4>', '<sete~~al>', '<and~~al, 1>', '<movzx~~r9d, al>', '<call~~0x500040>']}, {'block_Idx': 102, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x180]>', '<mov~~qword ptr [rax], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<je~~0x400ca4>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, rax>', '<add~~rcx, 0x94>', '<mov~~qword ptr [rsp + 0x10], rcx>', '<cmp~~dword ptr [rax + 0x94], 0>', '<je~~0x400ad1>']}, {'block_Idx': 99, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xfc]>', '<mov~~eax, 9>', '<cmp~~ecx, 5>', '<mov~~dword ptr [rsp + 0x100], eax>', '<jae~~0x400411>']}, {'block_Idx': 124, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rax + 0xc0], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<je~~0x400ca4>']}, {'block_Idx': 113, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~rax, qword ptr [rsp + 0x128]>', '<mov~~rcx, qword ptr [rsp + 0x168]>', '<mov~~rdx, qword ptr [rsp + 0x110]>', '<mov~~esi, dword ptr [rdx]>', '<mov~~edx, dword ptr [rdi + 0x10]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~r8d, dword ptr [rax]>', '<cmp~~dword ptr [rdi + 0xf4], 2>', '<sete~~al>', '<and~~al, 1>', '<movzx~~r9d, al>', '<call~~0x500040>']}, {'block_Idx': 134, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x180]>', '<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rax], 0>', '<add~~rdi, 0xc0>', '<call~~0x500068>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0xc3]>', '<test~~al, 1>', '<jne~~0x400648>']}, {'block_Idx': 92, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x98]>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~dword ptr [rax], 3>', '<mov~~dl, 1>', '<xor~~eax, eax>', '<mov~~byte ptr [rsp + 0x57], dl>', '<mov~~qword ptr [rsp + 0x58], rcx>', '<mov~~dword ptr [rsp + 0x64], eax>', '<jmp~~0x400941>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~edi, dword ptr [rax + 0x10]>', '<call~~0x500010>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~dword ptr [rax + 0x20], ecx>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, rax>', '<add~~rcx, 0xf0>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<cmp~~dword ptr [rax + 0xf0], 0>', '<je~~0x40053e>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x68]>', '<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~dword ptr [rcx + 0xf4], 2>', '<mov~~qword ptr [rsp + 0x30], rax>', '<mov~~rax, qword ptr [rsp + 0x110]>', '<mov~~rdx, qword ptr [rsp + 0x158]>', '<mov~~rcx, qword ptr [rsp + 0x168]>', '<mov~~rsi, qword ptr [rsp + 0x30]>', '<mov~~qword ptr [rsp + 0x20], rsi>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~edi, dword ptr [rdx]>', '<cmp~~ecx, edi>', '<cmovg~~edi, ecx>', '<mov~~edx, dword ptr [rax]>', '<xor~~esi, esi>', '<lea~~rcx, [rip + 0x211f]>', '<call~~0x500030>']}], 'cfg_edge_info': [(120, 129), (32, 37), (73, 81), (79, 97), (107, 113), (44, 45), (142, 144), (19, 9), (23, 25), (40, 41), (46, 57), (86, 102), (138, 140), (128, 117), (122, 131), (37, 42), (27, 34), (42, 41), (105, 109), (20, 22), (82, 40), (92, 81), (121, 126), (102, 100), (81, 71), (7, 12), (59, 50), (71, 79), (18, 21), (61, 56), (64, 73), (50, 56), (39, 37), (93, 81), (77, 94), (121, 9), (113, 124), (36, 41), (15, 18), (62, 69), (57, 36), (5, 7), (22, 23), (0, 2), (84, 93), (14, 19), (49, 50), (78, 86), (68, 63), (129, 134), (112, 118), (104, 114), (83, 91), (13, 14), (101, 78), (55, 56), (102, 107), (99, 90), (63, 70), (56, 64), (107, 112), (69, 76), (57, 65), (1, 5), (80, 94), (110, 104), (54, 60), (124, 112), (114, 28), (20, 21), (128, 100), (23, 26), (31, 39), (49, 54), (34, 32), (8, 13), (2, 6), (81, 70), (45, 50), (117, 121), (59, 49), (71, 78), (64, 72), (105, 110), (97, 78), (43, 52), (40, 44), (118, 128), (17, 18), (36, 40), (62, 68), (94, 100), (99, 105), (134, 136), (21, 24), (69, 73), (84, 92), (131, 121), (52, 66), (112, 117), (17, 20), (124, 100), (136, 138), (56, 63), (78, 87), (97, 100), (91, 90), (28, 31), (91, 99), (101, 79), (100, 111), (63, 71), (111, 120), (24, 27), (114, 27), (50, 55), (26, 33), (103, 100), (44, 48), (82, 41), (39, 36), (34, 31), (37, 36), (45, 49), (65, 82), (54, 61), (67, 55), (15, 17), (131, 100), (12, 9), (55, 62), (41, 45), (18, 22), (133, 9), (60, 67), (0, 1), (87, 103), (133, 100), (48, 59), (83, 90), (140, 142), (117, 122), (76, 84), (66, 83), (103, 86), (72, 80), (42, 46), (33, 43), (21, 23), (90, 104), (126, 133), (5, 8), (22, 24), (13, 15), (94, 101), (6, 9)], 'cdg_edge_info': [(112, 100), (62, 81), (101, 97), (107, 113), (81, 94), (42, 57), (50, 134), (40, 41), (0, 5), (128, 117), (23, 43), (37, 42), (121, 133), (23, 52), (13, 136), (50, 100), (42, 41), (64, 80), (133, 134), (20, 22), (82, 40), (107, 124), (5, 12), (103, 102), (121, 126), (13, 129), (13, 19), (13, 138), (59, 50), (50, 111), (18, 21), (64, 73), (50, 120), (117, 140), (133, 136), (39, 37), (0, 9), (121, 9), (78, 102), (112, 134), (15, 18), (13, 140), (133, 111), (62, 69), (133, 120), (133, 129), (117, 142), (133, 138), (5, 7), (22, 23), (0, 2), (84, 93), (78, 86), (49, 50), (112, 118), (83, 91), (23, 104), (107, 140), (13, 14), (112, 136), (101, 78), (55, 56), (13, 142), (102, 107), (54, 67), (56, 64), (107, 112), (117, 144), (5, 9), (112, 111), (23, 33), (50, 136), (57, 65), (112, 120), (112, 129), (34, 39), (107, 142), (112, 138), (13, 144), (124, 112), (59, 56), (20, 21), (117, 100), (23, 26), (50, 129), (49, 54), (50, 138), (13, 9), (107, 144), (59, 49), (117, 121), (105, 110), (97, 78), (5, 13), (23, 83), (40, 44), (49, 56), (50, 140), (17, 18), (54, 55), (62, 68), (107, 100), (99, 105), (63, 94), (84, 92), (69, 73), (131, 121), (133, 140), (112, 117), (50, 142), (17, 20), (78, 103), (56, 63), (117, 134), (114, 34), (133, 142), (69, 84), (78, 87), (50, 144), (0, 6), (13, 134), (91, 99), (101, 79), (62, 63), (112, 140), (117, 136), (114, 27), (50, 55), (13, 100), (44, 48), (64, 81), (82, 41), (133, 144), (34, 31), (107, 134), (117, 111), (117, 120), (54, 61), (117, 129), (15, 17), (112, 142), (117, 138), (55, 62), (18, 22), (133, 9), (13, 111), (44, 59), (0, 1), (13, 120), (107, 136), (133, 100), (117, 122), (117, 131), (112, 144), (94, 101), (23, 66), (103, 86), (42, 46), (21, 23), (107, 111), (107, 120), (5, 8), (64, 94), (107, 129), (107, 138), (54, 56), (112, 128), (13, 15), (57, 82), (23, 114)], 'ddg_edge_info': [(43, 110), (55, 84), (118, 122), (118, 131), (55, 93), (92, 79), (40, 41), (0, 5), (48, 54), (0, 14), (48, 63), (121, 133), (104, 62), (80, 113), (104, 80), (44, 56), (31, 86), (93, 79), (54, 97), (0, 126), (20, 104), (20, 113), (7, 12), (59, 50), (118, 117), (118, 126), (48, 49), (104, 48), (104, 57), (113, 124), (27, 93), (21, 59), (113, 133), (80, 117), (104, 84), (73, 78), (0, 94), (73, 87), (0, 103), (31, 81), (22, 23), (84, 93), (14, 19), (55, 56), (13, 87), (59, 54), (46, 93), (92, 78), (92, 87), (27, 79), (80, 94), (104, 61), (110, 104), (8, 84), (39, 62), (80, 112), (104, 79), (8, 93), (31, 67), (20, 94), (20, 103), (128, 121), (59, 49), (46, 79), (65, 92), (65, 101), (21, 22), (14, 144), (104, 56), (39, 48), (8, 79), (27, 92), (27, 101), (0, 84), (31, 62), (94, 100), (31, 80), (122, 100), (0, 111), (84, 92), (17, 20), (65, 69), (65, 78), (65, 87), (136, 138), (46, 92), (46, 101), (67, 133), (113, 100), (104, 42), (101, 107), (27, 69), (113, 118), (27, 78), (20, 39), (27, 87), (31, 48), (63, 117), (8, 92), (20, 57), (8, 101), (20, 66), (0, 97), (31, 84), (103, 100), (65, 55), (65, 64), (65, 73), (46, 69), (65, 82), (46, 78), (46, 87), (27, 55), (104, 37), (27, 64), (80, 79), (110, 80), (104, 46), (27, 73), (0, 56), (8, 69), (20, 34), (27, 82), (113, 122), (8, 78), (133, 100), (20, 43), (63, 112), (39, 56), (8, 87), (20, 52), (39, 65), (63, 121), (31, 61), (83, 99), (104, 131), (103, 86), (21, 133), (124, 118), (6, 144), (93, 121), (65, 50), (22, 79), (65, 59), (46, 55), (65, 68), (46, 64), (86, 100), (46, 73), (65, 86), (46, 82), (86, 118), (97, 118), (27, 41), (120, 129), (27, 50), (8, 46), (79, 97), (27, 59), (8, 55), (142, 144), (27, 68), (8, 64), (113, 117), (8, 73), (63, 107), (0, 69), (8, 82), (0, 78), (31, 56), (0, 87), (46, 41), (65, 54), (46, 50), (65, 63), (46, 59), (22, 101), (46, 68), (22, 110), (97, 113), (86, 113), (86, 122), (8, 41), (104, 27), (50, 56), (61, 56), (27, 54), (48, 86), (8, 50), (27, 63), (0, 46), (8, 59), (8, 68), (20, 33), (39, 46), (31, 42), (0, 73), (105, 104), (124, 117), (65, 40), (65, 49), (56, 80), (46, 54), (65, 67), (68, 63), (46, 63), (126, 144), (27, 31), (97, 117), (86, 117), (8, 27), (27, 40), (79, 78), (27, 49), (79, 87), (48, 81), (63, 79), (0, 41), (8, 54), (0, 50), (8, 63), (21, 82), (0, 59), (20, 37), (31, 37), (0, 68), (33, 65), (1, 5), (124, 112), (54, 133), (65, 44), (20, 131), (39, 144), (46, 40), (43, 105), (22, 82), (46, 49), (128, 100), (8, 13), (86, 112), (97, 112), (8, 22), (118, 144), (48, 67), (8, 31), (27, 44), (0, 27), (8, 40), (8, 49), (5, 114), (20, 23), (104, 93), (104, 102), (21, 104), (22, 41), (22, 50), (22, 59), (15, 20), (65, 48), (46, 44), (118, 121), (59, 81), (55, 92), (67, 94), (8, 17), (67, 103), (0, 13), (48, 62), (8, 26), (27, 39), (0, 22), (0, 31), (8, 44), (48, 80), (63, 78), (63, 87), (80, 121), (33, 46), (104, 97), (41, 59), (93, 78), (93, 87), (73, 118), (0, 134), (20, 121), (55, 69), (26, 33), (59, 67), (12, 144), (82, 41), (13, 118), (82, 50), (0, 8), (110, 41), (8, 21), (0, 17), (110, 50), (0, 26), (80, 107), (48, 84), (5, 113), (131, 100), (92, 118), (104, 92), (33, 50), (73, 86), (104, 101), (21, 94), (44, 59), (0, 120), (73, 113), (0, 138), (66, 83), (13, 86), (126, 133), (92, 86), (48, 61), (0, 21), (104, 69), (48, 79), (92, 113), (104, 78), (104, 87), (73, 81), (31, 93), (0, 124), (20, 102), (93, 86), (0, 133), (103, 118), (73, 117), (122, 131), (0, 142), (15, 23), (55, 68), (118, 133), (92, 81), (0, 7), (48, 56), (21, 39), (104, 55), (104, 64), (113, 131), (21, 57), (121, 144), (104, 73), (21, 66), (33, 31), (104, 82), (81, 80), (8, 114), (31, 79), (0, 110), (93, 81), (20, 97), (0, 128), (103, 113), (122, 126), (59, 61), (0, 2), (104, 41), (21, 34), (5, 80), (104, 50), (129, 134), (21, 43), (104, 59), (113, 126), (21, 52), (27, 86), (104, 68), (80, 101), (113, 144), (7, 144), (20, 83), (31, 92), (54, 94), (122, 121), (43, 66), (31, 101), (103, 117), (87, 100), (13, 80), (65, 81), (126, 100), (59, 56), (46, 86), (99, 110), (80, 78), (113, 112), (80, 87), (104, 54), (27, 81), (113, 121), (104, 63), (2, 6), (8, 86), (31, 69), (0, 100), (31, 78), (31, 87), (43, 52), (0, 118), (87, 86), (103, 112), (22, 114), (118, 100), (46, 81), (86, 126), (104, 31), (67, 131), (86, 144), (69, 73), (104, 40), (27, 67), (21, 33), (104, 49), (39, 50), (8, 81), (31, 46), (31, 55), (20, 55), (0, 86), (31, 64), (31, 73), (13, 34), (20, 82), (124, 121), (0, 113), (31, 82), (33, 110), (103, 107), (65, 62), (46, 67), (65, 80), (22, 118), (86, 121), (97, 121), (50, 55), (27, 62), (79, 100), (104, 44), (80, 86), (8, 67), (101, 118), (0, 63), (27, 80), (31, 41), (31, 50), (20, 59), (31, 59), (91, 110), (31, 68), (21, 131), (33, 105), (5, 15), (87, 103), (46, 62), (97, 107), (86, 107), (65, 84), (22, 113), (46, 80), (2, 144), (65, 93), (78, 112), (117, 131), (79, 86), (27, 48), (104, 39), (8, 62), (27, 84), (0, 67), (8, 80), (31, 54), (13, 15), (31, 63), (104, 133), (83, 110), (46, 48), (65, 61), (46, 57), (86, 102), (138, 140), (65, 79), (128, 117), (22, 117), (46, 84), (27, 34), (8, 39), (42, 41), (8, 48), (104, 34), (27, 61), (48, 93), (20, 22), (39, 44), (20, 40), (31, 40), (20, 49), (21, 103), (63, 118), (0, 80), (1, 8), (102, 100), (31, 49), (64, 73), (93, 118), (66, 110), (65, 56), (46, 61), (67, 102), (8, 34), (27, 56), (0, 39), (0, 48), (63, 86), (8, 61), (100, 144), (31, 44), (63, 113), (104, 114), (56, 64), (93, 113), (54, 131), (66, 105), (22, 80), (26, 41), (46, 56), (46, 65), (67, 97), (8, 20), (27, 42), (0, 34), (63, 81), (92, 117), (48, 92), (8, 56), (48, 101), (0, 61), (31, 39), (21, 102), (1, 7), (73, 112), (34, 41), (73, 121), (105, 110), (122, 144), (66, 91), (20, 133), (93, 117), (26, 27), (97, 78), (97, 87), (118, 128), (8, 15), (27, 37), (0, 20), (48, 69), (27, 46), (8, 42), (82, 80), (48, 78), (92, 112), (48, 87), (92, 121), (104, 86), (134, 136), (131, 121), (52, 66), (21, 97), (44, 62), (73, 107), (54, 103), (124, 100), (1, 20), (22, 61), (56, 63), (93, 112), (65, 41), (15, 22), (97, 100), (48, 55), (0, 15), (48, 64), (100, 111), (48, 73), (8, 37), (92, 107), (0, 33), (111, 120), (104, 81), (21, 83), (33, 48), (133, 144), (33, 66), (0, 136), (103, 121), (93, 107), (67, 55), (66, 99), (97, 86), (59, 69), (0, 1), (48, 50), (8, 14), (48, 59), (8, 23), (48, 68), (140, 142), (80, 100), (104, 67), (80, 118), (33, 43), (73, 79), (104, 94), (33, 52), (81, 101), (104, 103), (20, 91), (0, 122), (54, 102), (0, 131), (22, 42), (19, 144), (0, 140), (20, 118), (23, 114), (13, 79)]}]}
{'avresample_open': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'subq\t$0x188, %rsp                      # imm = 0x0xbc'}, {'instIndex': 1, 'instruction': 'movq\t%rdi, 0x178(%rsp)                 # 8-byte Spill'}, {'instIndex': 6, 'instruction': 'je\t.LBB0_2'}, {'instIndex': 8, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 9, 'instruction': 'leaq\t.L.str(%rip), %rdx'}, {'instIndex': 10, 'instruction': 'movb\t$0, %al'}, {'instIndex': 11, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 12, 'instruction': 'movl\t$0xffffffea, %eax               # imm = 0xFFFFFFEA'}, {'instIndex': 13, 'instruction': 'movl\t%eax, 0x174(%rsp)                 # 4-byte Spill'}, {'instIndex': 14, 'instruction': 'jmp\t.LBB0_68'}, {'instIndex': 16, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 17, 'instruction': 'addq\t$8, %rcx'}, {'instIndex': 18, 'instruction': 'movq\t%rcx, 0x160(%rsp)                 # 8-byte Spill'}, {'instIndex': 19, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 20, 'instruction': 'callq\tav_get_channel_layout_nb_channels@PLT'}, {'instIndex': 22, 'instruction': 'movq\t%rcx, %rdx'}, {'instIndex': 23, 'instruction': 'addq\t$0x74, %rdx'}, {'instIndex': 24, 'instruction': 'movq\t%rdx, 0x168(%rsp)                 # 8-byte Spill'}, {'instIndex': 25, 'instruction': 'movl\t%eax, 0x74(%rcx)'}, {'instIndex': 26, 'instruction': 'addl\t$-0x21, %eax'}, {'instIndex': 27, 'instruction': 'cmpl\t$-0x20, %eax'}, {'instIndex': 28, 'instruction': 'jae\t.LBB0_4'}]}]}
The case of compiler clang with optimization Os.
Patched source code file: utils.c
Patched function: 1---int avresample_open 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_after/Os/utils.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_after/Os/utils.s---avresample_open---after
function id: 0
function flag: True
There are 657 instructions for function: avresample_open in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '36', 'end': 46}, 'before': {'start': '36', 'end': 41}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'subq\t$0x188, %rsp                      # imm = 0x0xbc'}, {'instIndex': 1, 'instruction': 'movq\t%rdi, 0x178(%rsp)                 # 8-byte Spill'}, {'instIndex': 6, 'instruction': 'je\t.LBB0_2'}, {'instIndex': 8, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 9, 'instruction': 'leaq\t.L.str(%rip), %rdx'}, {'instIndex': 10, 'instruction': 'movb\t$0, %al'}, {'instIndex': 11, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 12, 'instruction': 'movl\t$0xffffffea, %eax               # imm = 0xFFFFFFEA'}, {'instIndex': 13, 'instruction': 'movl\t%eax, 0x174(%rsp)                 # 4-byte Spill'}, {'instIndex': 14, 'instruction': 'jmp\t.LBB0_68'}, {'instIndex': 16, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 17, 'instruction': 'addq\t$8, %rcx'}, {'instIndex': 18, 'instruction': 'movq\t%rcx, 0x160(%rsp)                 # 8-byte Spill'}, {'instIndex': 19, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 20, 'instruction': 'callq\tav_get_channel_layout_nb_channels@PLT'}, {'instIndex': 22, 'instruction': 'movq\t%rcx, %rdx'}, {'instIndex': 23, 'instruction': 'addq\t$0x74, %rdx'}, {'instIndex': 24, 'instruction': 'movq\t%rdx, 0x168(%rsp)                 # 8-byte Spill'}, {'instIndex': 25, 'instruction': 'movl\t%eax, 0x74(%rcx)'}, {'instIndex': 26, 'instruction': 'addl\t$-0x21, %eax'}, {'instIndex': 27, 'instruction': 'cmpl\t$-0x20, %eax'}, {'instIndex': 28, 'instruction': 'jae\t.LBB0_4'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_after/Os/utils.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_after/Os/utils.o---after
The extraction of function: avresample_open
Analyzing the binaries to generate subCFGs from patched function ...
It has 326 nodes and 575 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 657 instructions in binary file.
[4194304, 4194346, 4194373, 4194390, 4194422]
The execution time of patched subCFG information extraction via angr: 0:00:00.561037
{'avresample_open': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400056>, <DisassemblerInsn "mov" for 0x40005e>, <DisassemblerInsn "add" for 0x400061>, <DisassemblerInsn "mov" for 0x400065>, <DisassemblerInsn "mov" for 0x40006d>, <DisassemblerInsn "call" for 0x400071>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400098>, <DisassemblerInsn "mov" for 0x4000a0>, <DisassemblerInsn "mov" for 0x4000a8>, <DisassemblerInsn "mov" for 0x4000ab>, <DisassemblerInsn "lea" for 0x4000b0>, <DisassemblerInsn "mov" for 0x4000b7>, <DisassemblerInsn "call" for 0x4000b9>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400045>, <DisassemblerInsn "mov" for 0x40004a>, <DisassemblerInsn "jmp" for 0x400051>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400076>, <DisassemblerInsn "mov" for 0x40007e>, <DisassemblerInsn "add" for 0x400081>, <DisassemblerInsn "mov" for 0x400085>, <DisassemblerInsn "mov" for 0x40008d>, <DisassemblerInsn "add" for 0x400090>, <DisassemblerInsn "cmp" for 0x400093>, <DisassemblerInsn "jae" for 0x400096>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000cf>, <DisassemblerInsn "mov" for 0x4000d7>, <DisassemblerInsn "add" for 0x4000da>, <DisassemblerInsn "mov" for 0x4000de>, <DisassemblerInsn "mov" for 0x4000e6>, <DisassemblerInsn "call" for 0x4000ea>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400007>, <DisassemblerInsn "mov" for 0x40000f>, <DisassemblerInsn "add" for 0x400012>, <DisassemblerInsn "mov" for 0x400018>, <DisassemblerInsn "cmp" for 0x400020>, <DisassemblerInsn "je" for 0x400028>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400cbc>, <DisassemblerInsn "add" for 0x400cc3>, <DisassemblerInsn "ret" for 0x400cca>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40002a>, <DisassemblerInsn "mov" for 0x400032>, <DisassemblerInsn "lea" for 0x400037>, <DisassemblerInsn "mov" for 0x40003e>, <DisassemblerInsn "call" for 0x400040>]'}], 'cfg_block_detailed_info': [{'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, rax>', '<add~~rcx, 8>', '<mov~~qword ptr [rsp + 0x160], rcx>', '<mov~~rdi, qword ptr [rax + 8]>', '<call~~0x500008>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x160]>', '<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x1f9c]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x174], eax>', '<jmp~~0x400cbc>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~rdx, rcx>', '<add~~rdx, 0x74>', '<mov~~qword ptr [rsp + 0x168], rdx>', '<mov~~dword ptr [rcx + 0x74], eax>', '<add~~eax, -0x21>', '<cmp~~eax, -0x20>', '<jae~~0x4000cf>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, rax>', '<add~~rcx, 0x18>', '<mov~~qword ptr [rsp + 0x148], rcx>', '<mov~~rdi, qword ptr [rax + 0x18]>', '<call~~0x500008>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x188>', '<mov~~qword ptr [rsp + 0x178], rdi>', '<mov~~rax, rdi>', '<add~~rax, 0xb8>', '<mov~~qword ptr [rsp + 0x180], rax>', '<cmp~~qword ptr [rdi + 0xb8], 0>', '<je~~0x400056>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x174]>', '<add~~rsp, 0x188>', '<ret~~>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x1fec]>', '<mov~~al, 0>', '<call~~0x500000>']}], 'cfg_edge_info': [(0, 1), (2, 4), (0, 2), (3, 6), (1, 3), (4, 7), (3, 5)]}]}
{'avresample_open': [4194304, 4194346, 4194373, 4194390, 4194422]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_after/Os/utils.o---after
The extraction of function: avresample_open
[4194304, 4194346, 4194373, 4194390, 4194422]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 147 nodes and 237 edges in CFGEmulated.
It has 147 nodes and 315 edges in CDG.
It has 2769 nodes and 3751 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194304, 4194346, 4194373, 4194390, 4194422]
{4194304, 4197396, 4197409, 4196898, 4194346, 4195882, 4197422, 4195383, 4195899, 4196932, 4194373, 4195912, 4196427, 4197455, 4195413, 4194390, 4194903, 4197477, 4196969, 4194925, 4196462, 4197490, 4195442, 4194422, 4195458, 4195976, 4197001, 4194456, 4197532, 4195484, 4196512, 4195500, 4197036, 4197553, 4197564, 4196028, 4194494, 4196544, 4195016, 4194511, 4197073, 4195548, 4196582, 4195561, 4194543, 4195056, 4197116, 4195583, 4195072, 4196620, 4194584, 4195097, 4196123, 4197149, 4195614, 4195619, 4197159, 4195116, 4195634, 4194622, 4195135, 4196673, 4194639, 4195668, 4196187, 4195168, 4197222, 4196200, 4195690, 4196731, 4195198, 4197259, 4197269, 4195223, 4195737, 4196257, 4194725, 4195247, 4195770, 4194752, 4195786, 4196818, 4195294, 4194784, 4196334, 4197359, 4196855}
[20, 126, 69, 93, 13, 45, 36, 73, 146, 8, 33, 50, 23, 37, 5, 72, 43, 18, 46, 114, 59, 103, 62, 64, 106, 7, 67, 14, 41, 40, 52, 82, 31, 110, 34, 49, 112, 28, 71, 22, 77, 60, 131, 68, 24, 0, 70, 17, 122, 55, 104, 76, 65, 61, 133, 6, 105, 109, 128, 19, 9, 83, 101, 56, 25, 121, 97, 94, 48, 117, 87, 66, 21, 84, 57, 86, 44, 26, 79, 81, 12, 100, 32, 42, 90, 107, 1, 145, 91, 2, 15, 63, 118, 102, 78, 99, 124, 113, 54, 92, 27, 39, 80]
The execution time of patched slicing information extraction via angr: 0:00:17.682419
{'avresample_open': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001c0>, <DisassemblerInsn "mov" for 0x4001c8>, <DisassemblerInsn "mov" for 0x4001d0>, <DisassemblerInsn "cmp" for 0x4001d3>, <DisassemblerInsn "setne" for 0x4001d6>, <DisassemblerInsn "mov" for 0x4001d9>, <DisassemblerInsn "mov" for 0x4001e0>, <DisassemblerInsn "mov" for 0x4001e8>, <DisassemblerInsn "mov" for 0x4001ef>, <DisassemblerInsn "movzx" for 0x4001f6>, <DisassemblerInsn "and" for 0x4001f9>, <DisassemblerInsn "mov" for 0x4001fc>, <DisassemblerInsn "or" for 0x400202>, <DisassemblerInsn "mov" for 0x400204>, <DisassemblerInsn "and" for 0x40020b>, <DisassemblerInsn "movzx" for 0x40020d>, <DisassemblerInsn "mov" for 0x400210>, <DisassemblerInsn "add" for 0x400213>, <DisassemblerInsn "mov" for 0x40021a>, <DisassemblerInsn "mov" for 0x400222>, <DisassemblerInsn "mov" for 0x400228>, <DisassemblerInsn "add" for 0x40022b>, <DisassemblerInsn "mov" for 0x40022f>, <DisassemblerInsn "mov" for 0x400237>, <DisassemblerInsn "mov" for 0x40023a>, <DisassemblerInsn "add" for 0x40023d>, <DisassemblerInsn "mov" for 0x400241>, <DisassemblerInsn "mov" for 0x400249>, <DisassemblerInsn "cmp" for 0x40024b>, <DisassemblerInsn "mov" for 0x40024e>, <DisassemblerInsn "jne" for 0x400255>]'}, {'block_Idx': 126, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c65>, <DisassemblerInsn "call" for 0x400c6d>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007a1>, <DisassemblerInsn "mov" for 0x4007a9>, <DisassemblerInsn "mov" for 0x4007b1>, <DisassemblerInsn "cmp" for 0x4007b8>, <DisassemblerInsn "setne" for 0x4007bb>, <DisassemblerInsn "mov" for 0x4007be>, <DisassemblerInsn "and" for 0x4007c1>, <DisassemblerInsn "movzx" for 0x4007c5>, <DisassemblerInsn "mov" for 0x4007c9>, <DisassemblerInsn "mov" for 0x4007cf>, <DisassemblerInsn "test" for 0x4007d4>, <DisassemblerInsn "mov" for 0x4007d7>, <DisassemblerInsn "mov" for 0x4007dc>, <DisassemblerInsn "jne" for 0x4007e3>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008c0>, <DisassemblerInsn "mov" for 0x4008c8>, <DisassemblerInsn "mov" for 0x4008cd>, <DisassemblerInsn "mov" for 0x4008d3>, <DisassemblerInsn "xor" for 0x4008d5>, <DisassemblerInsn "mov" for 0x4008d7>, <DisassemblerInsn "mov" for 0x4008db>, <DisassemblerInsn "mov" for 0x4008e0>, <DisassemblerInsn "jmp" for 0x4008e4>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000ef>, <DisassemblerInsn "mov" for 0x4000f7>, <DisassemblerInsn "mov" for 0x4000fe>, <DisassemblerInsn "add" for 0x400101>, <DisassemblerInsn "mov" for 0x400105>, <DisassemblerInsn "mov" for 0x40010d>, <DisassemblerInsn "add" for 0x400110>, <DisassemblerInsn "cmp" for 0x400113>, <DisassemblerInsn "jae" for 0x400116>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005ea>, <DisassemblerInsn "mov" for 0x4005f2>, <DisassemblerInsn "mov" for 0x4005f9>, <DisassemblerInsn "mov" for 0x400600>, <DisassemblerInsn "mov" for 0x400607>, <DisassemblerInsn "and" for 0x40060e>, <DisassemblerInsn "movzx" for 0x400611>, <DisassemblerInsn "mov" for 0x400614>, <DisassemblerInsn "mov" for 0x40061b>, <DisassemblerInsn "cmp" for 0x400621>, <DisassemblerInsn "jne" for 0x400624>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40053e>, <DisassemblerInsn "mov" for 0x400546>, <DisassemblerInsn "cmp" for 0x400548>, <DisassemblerInsn "mov" for 0x40054b>, <DisassemblerInsn "jne" for 0x400552>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40086e>, <DisassemblerInsn "mov" for 0x400876>, <DisassemblerInsn "mov" for 0x40087b>, <DisassemblerInsn "mov" for 0x400882>, <DisassemblerInsn "mov" for 0x40088c>, <DisassemblerInsn "mov" for 0x40088e>, <DisassemblerInsn "mov" for 0x400892>, <DisassemblerInsn "mov" for 0x400897>, <DisassemblerInsn "jmp" for 0x40089b>]'}, {'block_Idx': 146, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400cb1>, <DisassemblerInsn "mov" for 0x400cb5>, <DisassemblerInsn "mov" for 0x400cbc>, <DisassemblerInsn "add" for 0x400cc3>, <DisassemblerInsn "ret" for 0x400cca>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000cf>, <DisassemblerInsn "mov" for 0x4000d7>, <DisassemblerInsn "add" for 0x4000da>, <DisassemblerInsn "mov" for 0x4000de>, <DisassemblerInsn "mov" for 0x4000e6>, <DisassemblerInsn "call" for 0x4000ea>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400300>, <DisassemblerInsn "mov" for 0x400302>, <DisassemblerInsn "mov" for 0x40030a>, <DisassemblerInsn "mov" for 0x400311>, <DisassemblerInsn "call" for 0x400314>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006bc>, <DisassemblerInsn "mov" for 0x4006c4>, <DisassemblerInsn "mov" for 0x4006cc>, <DisassemblerInsn "mov" for 0x4006d4>, <DisassemblerInsn "cmp" for 0x4006d6>, <DisassemblerInsn "setne" for 0x4006d9>, <DisassemblerInsn "and" for 0x4006dc>, <DisassemblerInsn "movzx" for 0x4006df>, <DisassemblerInsn "mov" for 0x4006e2>, <DisassemblerInsn "add" for 0x4006e8>, <DisassemblerInsn "xor" for 0x4006ee>, <DisassemblerInsn "test" for 0x4006f0>, <DisassemblerInsn "mov" for 0x4006f4>, <DisassemblerInsn "mov" for 0x4006f7>, <DisassemblerInsn "mov" for 0x4006ff>, <DisassemblerInsn "mov" for 0x400706>, <DisassemblerInsn "mov" for 0x40070d>, <DisassemblerInsn "jne" for 0x400715>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002c8>, <DisassemblerInsn "mov" for 0x4002cf>, <DisassemblerInsn "mov" for 0x4002d6>, <DisassemblerInsn "or" for 0x4002dd>, <DisassemblerInsn "test" for 0x4002df>, <DisassemblerInsn "mov" for 0x4002e2>, <DisassemblerInsn "jne" for 0x4002e9>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004dc>, <DisassemblerInsn "cmp" for 0x4004e4>, <DisassemblerInsn "jne" for 0x4004e7>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400076>, <DisassemblerInsn "mov" for 0x40007e>, <DisassemblerInsn "add" for 0x400081>, <DisassemblerInsn "mov" for 0x400085>, <DisassemblerInsn "mov" for 0x40008d>, <DisassemblerInsn "add" for 0x400090>, <DisassemblerInsn "cmp" for 0x400093>, <DisassemblerInsn "jae" for 0x400096>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400869>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400319>, <DisassemblerInsn "mov" for 0x400320>, <DisassemblerInsn "call" for 0x400327>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001e0>, <DisassemblerInsn "mov" for 0x4001e8>, <DisassemblerInsn "mov" for 0x4001ef>, <DisassemblerInsn "movzx" for 0x4001f6>, <DisassemblerInsn "and" for 0x4001f9>, <DisassemblerInsn "mov" for 0x4001fc>, <DisassemblerInsn "or" for 0x400202>, <DisassemblerInsn "mov" for 0x400204>, <DisassemblerInsn "and" for 0x40020b>, <DisassemblerInsn "movzx" for 0x40020d>, <DisassemblerInsn "mov" for 0x400210>, <DisassemblerInsn "add" for 0x400213>, <DisassemblerInsn "mov" for 0x40021a>, <DisassemblerInsn "mov" for 0x400222>, <DisassemblerInsn "mov" for 0x400228>, <DisassemblerInsn "add" for 0x40022b>, <DisassemblerInsn "mov" for 0x40022f>, <DisassemblerInsn "mov" for 0x400237>, <DisassemblerInsn "mov" for 0x40023a>, <DisassemblerInsn "add" for 0x40023d>, <DisassemblerInsn "mov" for 0x400241>, <DisassemblerInsn "mov" for 0x400249>, <DisassemblerInsn "cmp" for 0x40024b>, <DisassemblerInsn "mov" for 0x40024e>, <DisassemblerInsn "jne" for 0x400255>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004ff>, <DisassemblerInsn "mov" for 0x400507>, <DisassemblerInsn "add" for 0x40050a>, <DisassemblerInsn "mov" for 0x40050e>, <DisassemblerInsn "mov" for 0x400516>, <DisassemblerInsn "call" for 0x400519>]'}, {'block_Idx': 114, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400455>, <DisassemblerInsn "mov" for 0x40045d>, <DisassemblerInsn "mov" for 0x40045f>, <DisassemblerInsn "mov" for 0x400466>, <DisassemblerInsn "cmp" for 0x40046d>, <DisassemblerInsn "jne" for 0x400470>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005ca>, <DisassemblerInsn "mov" for 0x4005cc>, <DisassemblerInsn "cmp" for 0x4005d4>, <DisassemblerInsn "sete" for 0x4005d7>, <DisassemblerInsn "mov" for 0x4005da>, <DisassemblerInsn "mov" for 0x4005dc>, <DisassemblerInsn "mov" for 0x4005e3>, <DisassemblerInsn "mov" for 0x4005ea>, <DisassemblerInsn "mov" for 0x4005f2>, <DisassemblerInsn "mov" for 0x4005f9>, <DisassemblerInsn "mov" for 0x400600>, <DisassemblerInsn "mov" for 0x400607>, <DisassemblerInsn "and" for 0x40060e>, <DisassemblerInsn "movzx" for 0x400611>, <DisassemblerInsn "mov" for 0x400614>, <DisassemblerInsn "mov" for 0x40061b>, <DisassemblerInsn "cmp" for 0x400621>, <DisassemblerInsn "jne" for 0x400624>]'}, {'block_Idx': 103, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400aac>, <DisassemblerInsn "mov" for 0x400aaf>, <DisassemblerInsn "mov" for 0x400ab7>, <DisassemblerInsn "mov" for 0x400abe>, <DisassemblerInsn "cmp" for 0x400ac3>, <DisassemblerInsn "mov" for 0x400ac7>, <DisassemblerInsn "je" for 0x400acb>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40075b>, <DisassemblerInsn "cmp" for 0x400763>, <DisassemblerInsn "jne" for 0x400766>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40084b>, <DisassemblerInsn "mov" for 0x40084f>, <DisassemblerInsn "mov" for 0x400854>, <DisassemblerInsn "test" for 0x400858>, <DisassemblerInsn "mov" for 0x40085b>, <DisassemblerInsn "mov" for 0x400860>, <DisassemblerInsn "jne" for 0x400867>]'}, {'block_Idx': 106, 'blockInsts': '[<DisassemblerInsn "push" for 0x400cdc>, <DisassemblerInsn "mov" for 0x400cdd>, <DisassemblerInsn "add" for 0x400ce1>, <DisassemblerInsn "call" for 0x400ce8>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400098>, <DisassemblerInsn "mov" for 0x4000a0>, <DisassemblerInsn "mov" for 0x4000a8>, <DisassemblerInsn "mov" for 0x4000ab>, <DisassemblerInsn "lea" for 0x4000b0>, <DisassemblerInsn "mov" for 0x4000b7>, <DisassemblerInsn "call" for 0x4000b9>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400688>, <DisassemblerInsn "mov" for 0x400690>, <DisassemblerInsn "cmp" for 0x400693>, <DisassemblerInsn "setne" for 0x400696>, <DisassemblerInsn "and" for 0x400699>, <DisassemblerInsn "movzx" for 0x40069b>, <DisassemblerInsn "mov" for 0x40069e>, <DisassemblerInsn "add" for 0x4006a4>, <DisassemblerInsn "mov" for 0x4006ab>, <DisassemblerInsn "mov" for 0x4006b3>, <DisassemblerInsn "jmp" for 0x4006ba>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400118>, <DisassemblerInsn "mov" for 0x400120>, <DisassemblerInsn "mov" for 0x400128>, <DisassemblerInsn "mov" for 0x40012b>, <DisassemblerInsn "lea" for 0x400130>, <DisassemblerInsn "mov" for 0x400137>, <DisassemblerInsn "call" for 0x400139>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40056a>, <DisassemblerInsn "mov" for 0x400572>, <DisassemblerInsn "mov" for 0x40057a>, <DisassemblerInsn "mov" for 0x400581>, <DisassemblerInsn "cmp" for 0x400584>, <DisassemblerInsn "setne" for 0x400586>, <DisassemblerInsn "mov" for 0x400589>, <DisassemblerInsn "mov" for 0x400590>, <DisassemblerInsn "jmp" for 0x400597>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400554>, <DisassemblerInsn "xor" for 0x40055c>, <DisassemblerInsn "cmp" for 0x40055e>, <DisassemblerInsn "mov" for 0x400561>, <DisassemblerInsn "je" for 0x400568>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40032c>, <DisassemblerInsn "mov" for 0x400333>, <DisassemblerInsn "call" for 0x40033a>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400532>, <DisassemblerInsn "mov" for 0x400534>, <DisassemblerInsn "mov" for 0x40053c>, <DisassemblerInsn "mov" for 0x40053e>, <DisassemblerInsn "mov" for 0x400546>, <DisassemblerInsn "cmp" for 0x400548>, <DisassemblerInsn "mov" for 0x40054b>, <DisassemblerInsn "jne" for 0x400552>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40049c>, <DisassemblerInsn "mov" for 0x4004a4>, <DisassemblerInsn "call" for 0x4004a7>]'}, {'block_Idx': 110, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003de>, <DisassemblerInsn "mov" for 0x4003e5>, <DisassemblerInsn "sub" for 0x4003ec>, <DisassemblerInsn "sete" for 0x4003ef>, <DisassemblerInsn "sub" for 0x4003f2>, <DisassemblerInsn "sete" for 0x4003f5>, <DisassemblerInsn "or" for 0x4003f8>, <DisassemblerInsn "mov" for 0x4003fa>, <DisassemblerInsn "mov" for 0x4003ff>, <DisassemblerInsn "test" for 0x400404>, <DisassemblerInsn "cmovne" for 0x400407>, <DisassemblerInsn "mov" for 0x40040a>, <DisassemblerInsn "mov" for 0x400411>, <DisassemblerInsn "mov" for 0x400419>, <DisassemblerInsn "mov" for 0x400421>, <DisassemblerInsn "mov" for 0x400428>, <DisassemblerInsn "mov" for 0x40042a>, <DisassemblerInsn "call" for 0x400432>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400482>, <DisassemblerInsn "mov" for 0x400484>, <DisassemblerInsn "mov" for 0x40048c>, <DisassemblerInsn "mov" for 0x40048f>, <DisassemblerInsn "cmp" for 0x400497>, <DisassemblerInsn "jne" for 0x40049a>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40062a>, <DisassemblerInsn "cmp" for 0x400632>, <DisassemblerInsn "jne" for 0x400635>]'}, {'block_Idx': 112, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b8b>, <DisassemblerInsn "cmp" for 0x400b90>, <DisassemblerInsn "je" for 0x400b93>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40048f>, <DisassemblerInsn "cmp" for 0x400497>, <DisassemblerInsn "jne" for 0x40049a>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a0f>, <DisassemblerInsn "mov" for 0x400a14>, <DisassemblerInsn "mov" for 0x400a18>, <DisassemblerInsn "cmp" for 0x400a1d>, <DisassemblerInsn "je" for 0x400a20>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40026d>, <DisassemblerInsn "mov" for 0x400274>, <DisassemblerInsn "mov" for 0x40027c>, <DisassemblerInsn "mov" for 0x400283>, <DisassemblerInsn "and" for 0x40028a>, <DisassemblerInsn "movzx" for 0x40028d>, <DisassemblerInsn "mov" for 0x400290>, <DisassemblerInsn "add" for 0x400293>, <DisassemblerInsn "mov" for 0x40029a>, <DisassemblerInsn "mov" for 0x4002a2>, <DisassemblerInsn "mov" for 0x4002a8>, <DisassemblerInsn "add" for 0x4002ab>, <DisassemblerInsn "mov" for 0x4002af>, <DisassemblerInsn "cmp" for 0x4002b7>, <DisassemblerInsn "mov" for 0x4002bb>, <DisassemblerInsn "jne" for 0x4002c2>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400997>, <DisassemblerInsn "mov" for 0x40099f>, <DisassemblerInsn "mov" for 0x4009a7>, <DisassemblerInsn "mov" for 0x4009af>, <DisassemblerInsn "mov" for 0x4009b4>, <DisassemblerInsn "mov" for 0x4009b9>, <DisassemblerInsn "mov" for 0x4009bb>, <DisassemblerInsn "cmp" for 0x4009bd>, <DisassemblerInsn "cmovg" for 0x4009bf>, <DisassemblerInsn "mov" for 0x4009c2>, <DisassemblerInsn "xor" for 0x4009c4>, <DisassemblerInsn "lea" for 0x4009c6>, <DisassemblerInsn "call" for 0x4009cd>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400646>]'}, {'block_Idx': 131, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c2e>, <DisassemblerInsn "mov" for 0x400c31>, <DisassemblerInsn "mov" for 0x400c39>, <DisassemblerInsn "mov" for 0x400c40>, <DisassemblerInsn "cmp" for 0x400c45>, <DisassemblerInsn "mov" for 0x400c49>, <DisassemblerInsn "je" for 0x400c4d>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400768>, <DisassemblerInsn "mov" for 0x400770>, <DisassemblerInsn "mov" for 0x400778>, <DisassemblerInsn "mov" for 0x400782>, <DisassemblerInsn "xor" for 0x400784>, <DisassemblerInsn "mov" for 0x400786>, <DisassemblerInsn "mov" for 0x40078d>, <DisassemblerInsn "mov" for 0x400795>, <DisassemblerInsn "jmp" for 0x40079c>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400466>, <DisassemblerInsn "cmp" for 0x40046d>, <DisassemblerInsn "jne" for 0x400470>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400007>, <DisassemblerInsn "mov" for 0x40000f>, <DisassemblerInsn "add" for 0x400012>, <DisassemblerInsn "mov" for 0x400018>, <DisassemblerInsn "cmp" for 0x400020>, <DisassemblerInsn "je" for 0x400028>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400979>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001a5>, <DisassemblerInsn "mov" for 0x4001ad>, <DisassemblerInsn "cmp" for 0x4001af>, <DisassemblerInsn "mov" for 0x4001b7>, <DisassemblerInsn "jne" for 0x4001be>]'}, {'block_Idx': 122, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c21>, <DisassemblerInsn "call" for 0x400c29>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40071b>, <DisassemblerInsn "mov" for 0x400723>, <DisassemblerInsn "mov" for 0x40072b>, <DisassemblerInsn "mov" for 0x400732>, <DisassemblerInsn "mov" for 0x400739>, <DisassemblerInsn "mov" for 0x400741>, <DisassemblerInsn "cmp" for 0x400743>, <DisassemblerInsn "mov" for 0x400746>, <DisassemblerInsn "mov" for 0x40074d>, <DisassemblerInsn "jne" for 0x400755>]'}, {'block_Idx': 104, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400437>, <DisassemblerInsn "mov" for 0x40043f>, <DisassemblerInsn "mov" for 0x400442>, <DisassemblerInsn "lea" for 0x400447>, <DisassemblerInsn "mov" for 0x40044e>, <DisassemblerInsn "call" for 0x400450>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4007e9>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400523>, <DisassemblerInsn "mov" for 0x40052b>, <DisassemblerInsn "call" for 0x40052d>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400648>, <DisassemblerInsn "mov" for 0x400650>, <DisassemblerInsn "mov" for 0x400658>, <DisassemblerInsn "cmp" for 0x40065a>, <DisassemblerInsn "setne" for 0x40065d>, <DisassemblerInsn "and" for 0x400660>, <DisassemblerInsn "movzx" for 0x400663>, <DisassemblerInsn "mov" for 0x400666>, <DisassemblerInsn "add" for 0x40066c>, <DisassemblerInsn "xor" for 0x400672>, <DisassemblerInsn "mov" for 0x400674>, <DisassemblerInsn "mov" for 0x40067b>, <DisassemblerInsn "jmp" for 0x400683>]'}, {'block_Idx': 133, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c72>, <DisassemblerInsn "mov" for 0x400c75>, <DisassemblerInsn "mov" for 0x400c7d>, <DisassemblerInsn "mov" for 0x400c84>, <DisassemblerInsn "xor" for 0x400c89>, <DisassemblerInsn "cmp" for 0x400c8b>, <DisassemblerInsn "mov" for 0x400c8f>, <DisassemblerInsn "mov" for 0x400c93>, <DisassemblerInsn "jne" for 0x400c9a>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400045>, <DisassemblerInsn "mov" for 0x40004a>, <DisassemblerInsn "jmp" for 0x400051>]'}, {'block_Idx': 105, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003af>, <DisassemblerInsn "mov" for 0x4003b6>, <DisassemblerInsn "sub" for 0x4003bd>, <DisassemblerInsn "sete" for 0x4003c0>, <DisassemblerInsn "sub" for 0x4003c3>, <DisassemblerInsn "sete" for 0x4003c6>, <DisassemblerInsn "or" for 0x4003c9>, <DisassemblerInsn "mov" for 0x4003cb>, <DisassemblerInsn "test" for 0x4003d0>, <DisassemblerInsn "mov" for 0x4003d3>, <DisassemblerInsn "jne" for 0x4003da>]'}, {'block_Idx': 109, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4003dc>]'}, {'block_Idx': 128, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400bef>, <DisassemblerInsn "mov" for 0x400bf2>, <DisassemblerInsn "mov" for 0x400bfa>, <DisassemblerInsn "mov" for 0x400c01>, <DisassemblerInsn "cmp" for 0x400c06>, <DisassemblerInsn "mov" for 0x400c0a>, <DisassemblerInsn "je" for 0x400c0e>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40013e>, <DisassemblerInsn "mov" for 0x400143>, <DisassemblerInsn "jmp" for 0x40014a>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400cbc>, <DisassemblerInsn "add" for 0x400cc3>, <DisassemblerInsn "ret" for 0x400cca>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400360>, <DisassemblerInsn "mov" for 0x400362>, <DisassemblerInsn "mov" for 0x400369>, <DisassemblerInsn "cmp" for 0x40036e>, <DisassemblerInsn "mov" for 0x400371>, <DisassemblerInsn "jl" for 0x400378>]'}, {'block_Idx': 101, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009f7>, <DisassemblerInsn "mov" for 0x4009fc>, <DisassemblerInsn "mov" for 0x400a04>, <DisassemblerInsn "mov" for 0x400a06>, <DisassemblerInsn "mov" for 0x400a0b>, <DisassemblerInsn "mov" for 0x400a0f>, <DisassemblerInsn "mov" for 0x400a14>, <DisassemblerInsn "mov" for 0x400a18>, <DisassemblerInsn "cmp" for 0x400a1d>, <DisassemblerInsn "je" for 0x400a20>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007ee>, <DisassemblerInsn "mov" for 0x4007f6>, <DisassemblerInsn "mov" for 0x4007fd>, <DisassemblerInsn "mov" for 0x400805>, <DisassemblerInsn "mov" for 0x40080c>, <DisassemblerInsn "mov" for 0x400814>, <DisassemblerInsn "mov" for 0x400819>, <DisassemblerInsn "mov" for 0x40081d>, <DisassemblerInsn "xor" for 0x40081f>, <DisassemblerInsn "mov" for 0x400822>, <DisassemblerInsn "mov" for 0x400826>, <DisassemblerInsn "cmp" for 0x40082c>, <DisassemblerInsn "mov" for 0x40082f>, <DisassemblerInsn "mov" for 0x400836>, <DisassemblerInsn "mov" for 0x40083e>, <DisassemblerInsn "je" for 0x400845>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4002eb>]'}, {'block_Idx': 121, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c4f>, <DisassemblerInsn "xor" for 0x400c57>, <DisassemblerInsn "cmp" for 0x400c59>, <DisassemblerInsn "mov" for 0x400c5c>, <DisassemblerInsn "je" for 0x400c63>]'}, {'block_Idx': 97, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a44>, <DisassemblerInsn "mov" for 0x400a47>, <DisassemblerInsn "mov" for 0x400a4f>, <DisassemblerInsn "mov" for 0x400a56>, <DisassemblerInsn "cmp" for 0x400a5b>, <DisassemblerInsn "mov" for 0x400a5f>, <DisassemblerInsn "je" for 0x400a63>]'}, {'block_Idx': 94, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009d2>, <DisassemblerInsn "mov" for 0x4009d5>, <DisassemblerInsn "mov" for 0x4009dd>, <DisassemblerInsn "mov" for 0x4009e4>, <DisassemblerInsn "cmp" for 0x4009e9>, <DisassemblerInsn "mov" for 0x4009ed>, <DisassemblerInsn "je" for 0x4009f1>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005ba>, <DisassemblerInsn "mov" for 0x4005c2>, <DisassemblerInsn "call" for 0x4005c5>]'}, {'block_Idx': 117, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c14>, <DisassemblerInsn "cmp" for 0x400c1c>, <DisassemblerInsn "je" for 0x400c1f>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a89>, <DisassemblerInsn "mov" for 0x400a91>, <DisassemblerInsn "mov" for 0x400a99>, <DisassemblerInsn "mov" for 0x400a9b>, <DisassemblerInsn "xor" for 0x400a9e>, <DisassemblerInsn "lea" for 0x400aa0>, <DisassemblerInsn "call" for 0x400aa7>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40033f>, <DisassemblerInsn "mov" for 0x400346>, <DisassemblerInsn "mov" for 0x40034d>, <DisassemblerInsn "mov" for 0x40034f>, <DisassemblerInsn "cmp" for 0x400356>, <DisassemblerInsn "cmovg" for 0x400358>, <DisassemblerInsn "call" for 0x40035b>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400257>, <DisassemblerInsn "cmp" for 0x40025f>, <DisassemblerInsn "setne" for 0x400263>, <DisassemblerInsn "mov" for 0x400266>, <DisassemblerInsn "mov" for 0x40026d>, <DisassemblerInsn "mov" for 0x400274>, <DisassemblerInsn "mov" for 0x40027c>, <DisassemblerInsn "mov" for 0x400283>, <DisassemblerInsn "and" for 0x40028a>, <DisassemblerInsn "movzx" for 0x40028d>, <DisassemblerInsn "mov" for 0x400290>, <DisassemblerInsn "add" for 0x400293>, <DisassemblerInsn "mov" for 0x40029a>, <DisassemblerInsn "mov" for 0x4002a2>, <DisassemblerInsn "mov" for 0x4002a8>, <DisassemblerInsn "add" for 0x4002ab>, <DisassemblerInsn "mov" for 0x4002af>, <DisassemblerInsn "cmp" for 0x4002b7>, <DisassemblerInsn "mov" for 0x4002bb>, <DisassemblerInsn "jne" for 0x4002c2>]'}, {'block_Idx': 84, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008a0>, <DisassemblerInsn "mov" for 0x4008a7>, <DisassemblerInsn "add" for 0x4008af>, <DisassemblerInsn "mov" for 0x4008b6>, <DisassemblerInsn "cmp" for 0x4008bb>, <DisassemblerInsn "je" for 0x4008be>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40051e>, <DisassemblerInsn "jne" for 0x400521>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ad1>, <DisassemblerInsn "mov" for 0x400ad9>, <DisassemblerInsn "mov" for 0x400ae1>, <DisassemblerInsn "add" for 0x400ae4>, <DisassemblerInsn "mov" for 0x400ae8>, <DisassemblerInsn "mov" for 0x400aed>, <DisassemblerInsn "mov" for 0x400af0>, <DisassemblerInsn "mov" for 0x400af2>, <DisassemblerInsn "call" for 0x400af7>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400599>, <DisassemblerInsn "xor" for 0x4005a1>, <DisassemblerInsn "mov" for 0x4005a3>, <DisassemblerInsn "xor" for 0x4005a5>, <DisassemblerInsn "cmp" for 0x4005a7>, <DisassemblerInsn "mov" for 0x4005aa>, <DisassemblerInsn "mov" for 0x4005b1>, <DisassemblerInsn "je" for 0x4005b8>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002f0>, <DisassemblerInsn "mov" for 0x4002f8>, <DisassemblerInsn "call" for 0x4002fb>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a22>, <DisassemblerInsn "mov" for 0x400a2a>, <DisassemblerInsn "mov" for 0x400a32>, <DisassemblerInsn "mov" for 0x400a34>, <DisassemblerInsn "xor" for 0x400a36>, <DisassemblerInsn "lea" for 0x400a38>, <DisassemblerInsn "call" for 0x400a3f>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400941>, <DisassemblerInsn "mov" for 0x400948>, <DisassemblerInsn "mov" for 0x40094c>, <DisassemblerInsn "mov" for 0x400951>, <DisassemblerInsn "cmp" for 0x400955>, <DisassemblerInsn "sete" for 0x400958>, <DisassemblerInsn "and" for 0x40095c>, <DisassemblerInsn "test" for 0x40095f>, <DisassemblerInsn "mov" for 0x400962>, <DisassemblerInsn "mov" for 0x400965>, <DisassemblerInsn "mov" for 0x40096a>, <DisassemblerInsn "mov" for 0x40096f>, <DisassemblerInsn "jne" for 0x400973>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000be>, <DisassemblerInsn "mov" for 0x4000c3>, <DisassemblerInsn "jmp" for 0x4000ca>]'}, {'block_Idx': 100, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c9c>, <DisassemblerInsn "mov" for 0x400ca4>, <DisassemblerInsn "mov" for 0x400ca8>, <DisassemblerInsn "call" for 0x400cac>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004b9>, <DisassemblerInsn "mov" for 0x4004c1>, <DisassemblerInsn "add" for 0x4004c4>, <DisassemblerInsn "mov" for 0x4004cb>, <DisassemblerInsn "cmp" for 0x4004d3>, <DisassemblerInsn "je" for 0x4004da>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004e9>, <DisassemblerInsn "mov" for 0x4004f1>, <DisassemblerInsn "cmp" for 0x4004f3>, <DisassemblerInsn "mov" for 0x4004f6>, <DisassemblerInsn "jne" for 0x4004fd>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400411>, <DisassemblerInsn "mov" for 0x400419>, <DisassemblerInsn "mov" for 0x400421>, <DisassemblerInsn "mov" for 0x400428>, <DisassemblerInsn "mov" for 0x40042a>, <DisassemblerInsn "call" for 0x400432>]'}, {'block_Idx': 107, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b1d>, <DisassemblerInsn "cmp" for 0x400b22>, <DisassemblerInsn "je" for 0x400b25>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400056>, <DisassemblerInsn "mov" for 0x40005e>, <DisassemblerInsn "add" for 0x400061>, <DisassemblerInsn "mov" for 0x400065>, <DisassemblerInsn "mov" for 0x40006d>, <DisassemblerInsn "call" for 0x400071>]'}, {'block_Idx': 145, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d78>, <DisassemblerInsn "mov" for 0x400d7c>, <DisassemblerInsn "pop" for 0x400d86>, <DisassemblerInsn "ret" for 0x400d87>]'}, {'block_Idx': 91, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40037e>, <DisassemblerInsn "mov" for 0x400386>, <DisassemblerInsn "cmp" for 0x40038b>, <DisassemblerInsn "mov" for 0x40038e>, <DisassemblerInsn "jne" for 0x400395>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40002a>, <DisassemblerInsn "mov" for 0x400032>, <DisassemblerInsn "lea" for 0x400037>, <DisassemblerInsn "mov" for 0x40003e>, <DisassemblerInsn "call" for 0x400040>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40014f>, <DisassemblerInsn "mov" for 0x400156>, <DisassemblerInsn "mov" for 0x40015e>, <DisassemblerInsn "mov" for 0x400166>, <DisassemblerInsn "mov" for 0x400168>, <DisassemblerInsn "cmp" for 0x40016f>, <DisassemblerInsn "setg" for 0x400171>, <DisassemblerInsn "mov" for 0x400175>, <DisassemblerInsn "cmp" for 0x40017d>, <DisassemblerInsn "mov" for 0x40017f>, <DisassemblerInsn "cmovg" for 0x400181>, <DisassemblerInsn "mov" for 0x400184>, <DisassemblerInsn "and" for 0x400187>, <DisassemblerInsn "movzx" for 0x40018b>, <DisassemblerInsn "mov" for 0x40018f>, <DisassemblerInsn "cmp" for 0x400195>, <DisassemblerInsn "setl" for 0x400197>, <DisassemblerInsn "cmp" for 0x40019a>, <DisassemblerInsn "mov" for 0x40019c>, <DisassemblerInsn "jne" for 0x4001a3>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40090c>, <DisassemblerInsn "mov" for 0x400914>, <DisassemblerInsn "mov" for 0x40091b>, <DisassemblerInsn "mov" for 0x400923>, <DisassemblerInsn "mov" for 0x40092a>, <DisassemblerInsn "mov" for 0x400934>, <DisassemblerInsn "mov" for 0x400938>, <DisassemblerInsn "mov" for 0x40093d>, <DisassemblerInsn "mov" for 0x400941>, <DisassemblerInsn "mov" for 0x400948>, <DisassemblerInsn "mov" for 0x40094c>, <DisassemblerInsn "mov" for 0x400951>, <DisassemblerInsn "cmp" for 0x400955>, <DisassemblerInsn "sete" for 0x400958>, <DisassemblerInsn "and" for 0x40095c>, <DisassemblerInsn "test" for 0x40095f>, <DisassemblerInsn "mov" for 0x400962>, <DisassemblerInsn "mov" for 0x400965>, <DisassemblerInsn "mov" for 0x40096a>, <DisassemblerInsn "mov" for 0x40096f>, <DisassemblerInsn "jne" for 0x400973>]'}, {'block_Idx': 118, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b95>, <DisassemblerInsn "mov" for 0x400b9d>, <DisassemblerInsn "mov" for 0x400ba5>, <DisassemblerInsn "mov" for 0x400bad>, <DisassemblerInsn "mov" for 0x400bb2>, <DisassemblerInsn "mov" for 0x400bba>, <DisassemblerInsn "mov" for 0x400bbf>, <DisassemblerInsn "mov" for 0x400bc2>, <DisassemblerInsn "add" for 0x400bc5>, <DisassemblerInsn "cmp" for 0x400bc9>, <DisassemblerInsn "cmove" for 0x400bcd>, <DisassemblerInsn "mov" for 0x400bd1>, <DisassemblerInsn "mov" for 0x400bd3>, <DisassemblerInsn "mov" for 0x400bd5>, <DisassemblerInsn "mov" for 0x400bd7>, <DisassemblerInsn "cmp" for 0x400bda>, <DisassemblerInsn "sete" for 0x400be1>, <DisassemblerInsn "and" for 0x400be4>, <DisassemblerInsn "movzx" for 0x400be6>, <DisassemblerInsn "call" for 0x400bea>]'}, {'block_Idx': 102, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400afc>, <DisassemblerInsn "mov" for 0x400aff>, <DisassemblerInsn "mov" for 0x400b07>, <DisassemblerInsn "mov" for 0x400b0a>, <DisassemblerInsn "cmp" for 0x400b0f>, <DisassemblerInsn "mov" for 0x400b13>, <DisassemblerInsn "je" for 0x400b17>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a69>, <DisassemblerInsn "mov" for 0x400a71>, <DisassemblerInsn "add" for 0x400a74>, <DisassemblerInsn "mov" for 0x400a7b>, <DisassemblerInsn "cmp" for 0x400a80>, <DisassemblerInsn "je" for 0x400a87>]'}, {'block_Idx': 99, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400397>, <DisassemblerInsn "mov" for 0x40039e>, <DisassemblerInsn "cmp" for 0x4003a3>, <DisassemblerInsn "mov" for 0x4003a6>, <DisassemblerInsn "jae" for 0x4003ad>]'}, {'block_Idx': 124, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b66>, <DisassemblerInsn "mov" for 0x400b69>, <DisassemblerInsn "mov" for 0x400b71>, <DisassemblerInsn "mov" for 0x400b78>, <DisassemblerInsn "cmp" for 0x400b7d>, <DisassemblerInsn "mov" for 0x400b81>, <DisassemblerInsn "je" for 0x400b85>]'}, {'block_Idx': 113, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b27>, <DisassemblerInsn "mov" for 0x400b2f>, <DisassemblerInsn "mov" for 0x400b37>, <DisassemblerInsn "mov" for 0x400b3f>, <DisassemblerInsn "mov" for 0x400b47>, <DisassemblerInsn "mov" for 0x400b49>, <DisassemblerInsn "mov" for 0x400b4c>, <DisassemblerInsn "mov" for 0x400b4e>, <DisassemblerInsn "cmp" for 0x400b51>, <DisassemblerInsn "sete" for 0x400b58>, <DisassemblerInsn "and" for 0x400b5b>, <DisassemblerInsn "movzx" for 0x400b5d>, <DisassemblerInsn "call" for 0x400b61>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40063b>, <DisassemblerInsn "test" for 0x400642>, <DisassemblerInsn "jne" for 0x400644>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008e6>, <DisassemblerInsn "mov" for 0x4008ee>, <DisassemblerInsn "mov" for 0x4008f3>, <DisassemblerInsn "mov" for 0x4008f9>, <DisassemblerInsn "xor" for 0x4008fb>, <DisassemblerInsn "mov" for 0x4008fd>, <DisassemblerInsn "mov" for 0x400901>, <DisassemblerInsn "mov" for 0x400906>, <DisassemblerInsn "jmp" for 0x40090a>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400472>, <DisassemblerInsn "mov" for 0x40047a>, <DisassemblerInsn "call" for 0x40047d>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004ac>, <DisassemblerInsn "mov" for 0x4004ae>, <DisassemblerInsn "mov" for 0x4004b6>, <DisassemblerInsn "mov" for 0x4004b9>, <DisassemblerInsn "mov" for 0x4004c1>, <DisassemblerInsn "add" for 0x4004c4>, <DisassemblerInsn "mov" for 0x4004cb>, <DisassemblerInsn "cmp" for 0x4004d3>, <DisassemblerInsn "je" for 0x4004da>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40097b>, <DisassemblerInsn "mov" for 0x400980>, <DisassemblerInsn "mov" for 0x400988>, <DisassemblerInsn "mov" for 0x400992>, <DisassemblerInsn "mov" for 0x400997>, <DisassemblerInsn "mov" for 0x40099f>, <DisassemblerInsn "mov" for 0x4009a7>, <DisassemblerInsn "mov" for 0x4009af>, <DisassemblerInsn "mov" for 0x4009b4>, <DisassemblerInsn "mov" for 0x4009b9>, <DisassemblerInsn "mov" for 0x4009bb>, <DisassemblerInsn "cmp" for 0x4009bd>, <DisassemblerInsn "cmovg" for 0x4009bf>, <DisassemblerInsn "mov" for 0x4009c2>, <DisassemblerInsn "xor" for 0x4009c4>, <DisassemblerInsn "lea" for 0x4009c6>, <DisassemblerInsn "call" for 0x4009cd>]'}], 'cfg_block_detailed_info': [{'block_Idx': 20, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x148]>', '<mov~~rax, qword ptr [rsp + 0x160]>', '<mov~~rax, qword ptr [rax]>', '<cmp~~rax, qword ptr [rcx]>', '<setne~~al>', '<mov~~byte ptr [rsp + 0x147], al>', '<mov~~rdx, qword ptr [rsp + 0x178]>', '<mov~~al, byte ptr [rsp + 0x146]>', '<mov~~cl, byte ptr [rsp + 0x147]>', '<movzx~~esi, cl>', '<and~~esi, 1>', '<mov~~dword ptr [rdx + 0x84], esi>', '<or~~al, cl>', '<mov~~byte ptr [rsp + 0x11f], al>', '<and~~al, 1>', '<movzx~~eax, al>', '<mov~~rcx, rdx>', '<add~~rcx, 0x88>', '<mov~~qword ptr [rsp + 0x120], rcx>', '<mov~~dword ptr [rdx + 0x88], eax>', '<mov~~rax, rdx>', '<add~~rax, 0x14>', '<mov~~qword ptr [rsp + 0x128], rax>', '<mov~~ecx, dword ptr [rdx + 0x14]>', '<mov~~rax, rdx>', '<add~~rax, 0x24>', '<mov~~qword ptr [rsp + 0x130], rax>', '<mov~~al, 1>', '<cmp~~ecx, dword ptr [rdx + 0x24]>', '<mov~~byte ptr [rsp + 0x13f], al>', '<jne~~0x40026d>']}, {'block_Idx': 126, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<call~~0x500050>']}, {'block_Idx': 69, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x98]>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~edx, dword ptr [rsp + 0xbc]>', '<cmp~~edx, 0>', '<setne~~dl>', '<mov~~sil, dl>', '<and~~sil, 1>', '<movzx~~esi, sil>', '<mov~~dword ptr [rax + 0x98], esi>', '<mov~~eax, 1>', '<test~~dl, 1>', '<mov~~qword ptr [rsp + 0x78], rcx>', '<mov~~dword ptr [rsp + 0x80], eax>', '<jne~~0x40086e>']}, {'block_Idx': 93, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x98]>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~dword ptr [rax], 4>', '<mov~~dl, 1>', '<xor~~eax, eax>', '<mov~~byte ptr [rsp + 0x57], dl>', '<mov~~qword ptr [rsp + 0x58], rcx>', '<mov~~dword ptr [rsp + 0x64], eax>', '<jmp~~0x400941>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~dword ptr [rsp + 0x154], eax>', '<mov~~rdx, rcx>', '<add~~rdx, 0x78>', '<mov~~qword ptr [rsp + 0x158], rdx>', '<mov~~dword ptr [rcx + 0x78], eax>', '<add~~eax, -0x21>', '<cmp~~eax, -0x20>', '<jae~~0x40014f>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~dl, byte ptr [rsp + 0xcb]>', '<mov~~eax, dword ptr [rsp + 0xcc]>', '<mov~~dword ptr [rsp + 0xbc], eax>', '<mov~~byte ptr [rsp + 0xc3], dl>', '<and~~dl, 1>', '<movzx~~edx, dl>', '<mov~~dword ptr [rsp + 0xc4], edx>', '<mov~~dword ptr [rcx + 0x90], edx>', '<cmp~~eax, 0>', '<jne~~0x4006bc>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x108]>', '<mov~~eax, dword ptr [rax]>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0xdc], eax>', '<jne~~0x40056a>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x78]>', '<mov~~eax, dword ptr [rsp + 0x80]>', '<mov~~dword ptr [rdx + 0xf4], 1>', '<mov~~dl, 1>', '<mov~~byte ptr [rsp + 0x57], dl>', '<mov~~qword ptr [rsp + 0x58], rcx>', '<mov~~dword ptr [rsp + 0x64], eax>', '<jmp~~0x400941>']}, {'block_Idx': 146, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 4]>', '<mov~~dword ptr [rsp + 0x174], eax>', '<mov~~eax, dword ptr [rsp + 0x174]>', '<add~~rsp, 0x188>', '<ret~~>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, rax>', '<add~~rcx, 0x18>', '<mov~~qword ptr [rsp + 0x148], rcx>', '<mov~~rdi, qword ptr [rax + 0x18]>', '<call~~0x500008>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~dword ptr [rsp + 0xf8], ecx>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500010>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~sil, byte ptr [rsp + 0xc3]>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x110]>', '<mov~~ecx, dword ptr [rcx]>', '<cmp~~ecx, dword ptr [rax + 0x20]>', '<setne~~cl>', '<and~~cl, 1>', '<movzx~~edx, cl>', '<mov~~dword ptr [rax + 0x94], edx>', '<add~~rax, 0x90>', '<xor~~ecx, ecx>', '<test~~sil, 1>', '<mov~~rsi, rax>', '<mov~~qword ptr [rsp + 0xa0], rsi>', '<mov~~dword ptr [rsp + 0xa8], edx>', '<mov~~byte ptr [rsp + 0xaf], cl>', '<mov~~qword ptr [rsp + 0xb0], rax>', '<jne~~0x4007ee>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x140]>', '<mov~~dl, byte ptr [rsp + 0x107]>', '<mov~~cl, byte ptr [rsp + 0x11f]>', '<or~~cl, dl>', '<test~~cl, 1>', '<mov~~dword ptr [rsp + 0x118], eax>', '<jne~~0x4002f0>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x120]>', '<cmp~~dword ptr [rax], 0>', '<jne~~0x40053e>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~rdx, rcx>', '<add~~rdx, 0x74>', '<mov~~qword ptr [rsp + 0x168], rdx>', '<mov~~dword ptr [rcx + 0x74], eax>', '<add~~eax, -0x21>', '<cmp~~eax, -0x20>', '<jae~~0x4000cf>']}, {'block_Idx': 72, 'blockInsts': ['<jmp~~0x40097b>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0xf8]>', '<mov~~dword ptr [rsp + 0xf4], eax>', '<call~~0x500018>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x178]>', '<mov~~al, byte ptr [rsp + 0x146]>', '<mov~~cl, byte ptr [rsp + 0x147]>', '<movzx~~esi, cl>', '<and~~esi, 1>', '<mov~~dword ptr [rdx + 0x84], esi>', '<or~~al, cl>', '<mov~~byte ptr [rsp + 0x11f], al>', '<and~~al, 1>', '<movzx~~eax, al>', '<mov~~rcx, rdx>', '<add~~rcx, 0x88>', '<mov~~qword ptr [rsp + 0x120], rcx>', '<mov~~dword ptr [rdx + 0x88], eax>', '<mov~~rax, rdx>', '<add~~rax, 0x14>', '<mov~~qword ptr [rsp + 0x128], rax>', '<mov~~ecx, dword ptr [rdx + 0x14]>', '<mov~~rax, rdx>', '<add~~rax, 0x24>', '<mov~~qword ptr [rsp + 0x130], rax>', '<mov~~al, 1>', '<cmp~~ecx, dword ptr [rdx + 0x24]>', '<mov~~byte ptr [rsp + 0x13f], al>', '<jne~~0x40026d>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, rax>', '<add~~rcx, 0x20>', '<mov~~qword ptr [rsp + 0xd0], rcx>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500028>']}, {'block_Idx': 114, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x168]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x118], eax>', '<mov~~eax, dword ptr [rsp + 0x118]>', '<cmp~~eax, 1>', '<jne~~0x40048f>']}, {'block_Idx': 59, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x108]>', '<cmp~~ecx, 0>', '<sete~~cl>', '<mov~~eax, dword ptr [rax]>', '<mov~~byte ptr [rsp + 0xcb], cl>', '<mov~~dword ptr [rsp + 0xcc], eax>', '<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~dl, byte ptr [rsp + 0xcb]>', '<mov~~eax, dword ptr [rsp + 0xcc]>', '<mov~~dword ptr [rsp + 0xbc], eax>', '<mov~~byte ptr [rsp + 0xc3], dl>', '<and~~dl, 1>', '<movzx~~edx, dl>', '<mov~~dword ptr [rsp + 0xc4], edx>', '<mov~~dword ptr [rcx + 0x90], edx>', '<cmp~~eax, 0>', '<jne~~0x4006bc>']}, {'block_Idx': 103, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rax + 0xb0], rcx>', '<mov~~eax, 0xffffffea>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<je~~0x400c9c>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe0]>', '<cmp~~dword ptr [rax], 0>', '<jne~~0x4007a1>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x74]>', '<mov~~rcx, qword ptr [rsp + 0x68]>', '<mov~~dl, byte ptr [rsp + 0x73]>', '<test~~dl, 1>', '<mov~~qword ptr [rsp + 0x78], rcx>', '<mov~~dword ptr [rsp + 0x80], eax>', '<jne~~0x40086e>']}, {'block_Idx': 106, 'blockInsts': ['<push~~rax>', '<mov~~qword ptr [rsp], rdi>', '<add~~rdi, 0xa0>', '<call~~0x500058>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x160]>', '<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x1f9c]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~eax, dword ptr [rcx + 0x10]>', '<cmp~~eax, dword ptr [rcx + 0x20]>', '<setne~~al>', '<and~~al, 1>', '<movzx~~eax, al>', '<mov~~dword ptr [rcx + 0x94], eax>', '<add~~rcx, 0x90>', '<mov~~qword ptr [rsp + 0xa0], rcx>', '<mov~~dword ptr [rsp + 0xa8], eax>', '<jmp~~0x40071b>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x148]>', '<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x1f3f]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x110]>', '<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~eax, dword ptr [rsp + 0xdc]>', '<mov~~ecx, dword ptr [rcx + 0x10]>', '<cmp~~ecx, dword ptr [rdx]>', '<setne~~cl>', '<mov~~byte ptr [rsp + 0xcb], cl>', '<mov~~dword ptr [rsp + 0xcc], eax>', '<jmp~~0x4005ea>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x120]>', '<xor~~eax, eax>', '<cmp~~dword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0xdc], eax>', '<je~~0x400599>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0xf4]>', '<mov~~dword ptr [rsp + 0xf0], eax>', '<call~~0x500018>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x110]>', '<mov~~dword ptr [rax], ecx>', '<mov~~rax, qword ptr [rsp + 0x108]>', '<mov~~eax, dword ptr [rax]>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0xdc], eax>', '<jne~~0x40056a>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500010>']}, {'block_Idx': 110, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xf4]>', '<mov~~ecx, dword ptr [rsp + 0xf8]>', '<sub~~ecx, 8>', '<sete~~dl>', '<sub~~eax, 8>', '<sete~~al>', '<or~~dl, al>', '<mov~~eax, 7>', '<mov~~ecx, 9>', '<test~~dl, 1>', '<cmovne~~eax, ecx>', '<mov~~dword ptr [rsp + 0x100], eax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x110]>', '<mov~~edi, dword ptr [rsp + 0x100]>', '<mov~~dword ptr [rcx], edi>', '<mov~~qword ptr [rsp + 0xe8], rax>', '<call~~0x500020>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~dword ptr [rax + 0x10], ecx>', '<mov~~rax, qword ptr [rsp + 0x158]>', '<cmp~~dword ptr [rax], 1>', '<jne~~0x4004b9>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x120]>', '<cmp~~dword ptr [rax], 0>', '<jne~~0x4006bc>']}, {'block_Idx': 112, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x10]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x400c14>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x158]>', '<cmp~~dword ptr [rax], 1>', '<jne~~0x4004b9>']}, {'block_Idx': 71, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~qword ptr [rsp + 0x18], rcx>', '<cmp~~eax, 0>', '<je~~0x400a69>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x140]>', '<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~dl, byte ptr [rsp + 0x13f]>', '<mov~~byte ptr [rsp + 0x107], dl>', '<and~~dl, 1>', '<movzx~~edx, dl>', '<mov~~rsi, rcx>', '<add~~rsi, 0x8c>', '<mov~~qword ptr [rsp + 0x108], rsi>', '<mov~~dword ptr [rcx + 0x8c], edx>', '<mov~~rdx, rcx>', '<add~~rdx, 0x28>', '<mov~~qword ptr [rsp + 0x110], rdx>', '<cmp~~dword ptr [rcx + 0x28], -1>', '<mov~~dword ptr [rsp + 0x118], eax>', '<jne~~0x400466>']}, {'block_Idx': 77, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x110]>', '<mov~~rdx, qword ptr [rsp + 0x158]>', '<mov~~rcx, qword ptr [rsp + 0x168]>', '<mov~~rsi, qword ptr [rsp + 0x30]>', '<mov~~qword ptr [rsp + 0x20], rsi>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~edi, dword ptr [rdx]>', '<cmp~~ecx, edi>', '<cmovg~~edi, ecx>', '<mov~~edx, dword ptr [rax]>', '<xor~~esi, esi>', '<lea~~rcx, [rip + 0x16f1]>', '<call~~0x500030>']}, {'block_Idx': 60, 'blockInsts': ['<jmp~~0x400688>']}, {'block_Idx': 131, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rax + 0xd0], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<je~~0x400c9c>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x98]>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~dword ptr [rax + 0x98], 0>', '<mov~~dl, 1>', '<xor~~eax, eax>', '<mov~~byte ptr [rsp + 0x87], dl>', '<mov~~qword ptr [rsp + 0x88], rcx>', '<mov~~dword ptr [rsp + 0x90], eax>', '<jmp~~0x40090c>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x118]>', '<cmp~~eax, 1>', '<jne~~0x40048f>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x188>', '<mov~~qword ptr [rsp + 0x178], rdi>', '<mov~~rax, rdi>', '<add~~rax, 0xb8>', '<mov~~qword ptr [rsp + 0x180], rax>', '<cmp~~qword ptr [rdi + 0xb8], 0>', '<je~~0x400056>']}, {'block_Idx': 70, 'blockInsts': ['<jmp~~0x400997>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~al, 1>', '<cmp~~qword ptr [rcx + 0xe8], 0>', '<mov~~byte ptr [rsp + 0x147], al>', '<jne~~0x4001e0>']}, {'block_Idx': 122, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<call~~0x500048>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x120]>', '<mov~~rax, qword ptr [rsp + 0xa0]>', '<mov~~ecx, dword ptr [rsp + 0xa8]>', '<mov~~dword ptr [rsp + 0x94], ecx>', '<mov~~qword ptr [rsp + 0x98], rax>', '<mov~~cl, 1>', '<cmp~~dword ptr [rdx], 0>', '<mov~~byte ptr [rsp + 0xaf], cl>', '<mov~~qword ptr [rsp + 0xb0], rax>', '<jne~~0x4007ee>']}, {'block_Idx': 104, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xe8]>', '<mov~~rcx, rax>', '<mov~~esi, 0x30>', '<lea~~rdx, [rip + 0x1c4c]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 76, 'blockInsts': ['<jmp~~0x4008a0>']}, {'block_Idx': 65, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd0]>', '<mov~~edi, dword ptr [rax]>', '<call~~0x500010>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x110]>', '<mov~~ecx, dword ptr [rcx]>', '<cmp~~ecx, dword ptr [rax + 0x20]>', '<setne~~cl>', '<and~~cl, 1>', '<movzx~~ecx, cl>', '<mov~~dword ptr [rax + 0x94], ecx>', '<add~~rax, 0x90>', '<xor~~ecx, ecx>', '<mov~~byte ptr [rsp + 0xaf], cl>', '<mov~~qword ptr [rsp + 0xb0], rax>', '<jmp~~0x4007ee>']}, {'block_Idx': 133, 'blockInsts': ['<mov~~rdx, rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rax + 0xd8], rdx>', '<mov~~ecx, 0xfffffff4>', '<xor~~eax, eax>', '<cmp~~rdx, 0>', '<mov~~dword ptr [rsp + 0x2c], ecx>', '<mov~~dword ptr [rsp + 0x174], eax>', '<jne~~0x400cbc>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x174], eax>', '<jmp~~0x400cbc>']}, {'block_Idx': 105, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xf4]>', '<mov~~ecx, dword ptr [rsp + 0xf8]>', '<sub~~ecx, 7>', '<sete~~cl>', '<sub~~eax, 7>', '<sete~~al>', '<or~~cl, al>', '<mov~~eax, 8>', '<test~~cl, 1>', '<mov~~dword ptr [rsp + 0x100], eax>', '<jne~~0x4003de>']}, {'block_Idx': 109, 'blockInsts': ['<jmp~~0x400411>']}, {'block_Idx': 128, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rax + 0xc8], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<je~~0x400c9c>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x174], eax>', '<jmp~~0x400cbc>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x174]>', '<add~~rsp, 0x188>', '<ret~~>']}, {'block_Idx': 83, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0xfc], ecx>', '<mov~~eax, 6>', '<cmp~~ecx, 3>', '<mov~~dword ptr [rsp + 0x100], eax>', '<jl~~0x400411>']}, {'block_Idx': 101, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x108]>', '<mov~~eax, dword ptr [rax]>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<mov~~qword ptr [rsp + 0x18], rcx>', '<cmp~~eax, 0>', '<je~~0x400a69>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~eax, dword ptr [rsp + 0xc4]>', '<mov~~rsi, qword ptr [rsp + 0xe0]>', '<mov~~dl, byte ptr [rsp + 0xaf]>', '<mov~~rcx, qword ptr [rsp + 0xb0]>', '<mov~~qword ptr [rsp + 0x68], rcx>', '<mov~~byte ptr [rsp + 0x73], dl>', '<mov~~esi, dword ptr [rsi]>', '<xor~~eax, 1>', '<mov~~dword ptr [rsp + 0x74], eax>', '<mov~~dword ptr [rdi + 0x98], eax>', '<cmp~~esi, 0>', '<mov~~byte ptr [rsp + 0x87], dl>', '<mov~~qword ptr [rsp + 0x88], rcx>', '<mov~~dword ptr [rsp + 0x90], eax>', '<je~~0x40090c>']}, {'block_Idx': 25, 'blockInsts': ['<jmp~~0x400466>']}, {'block_Idx': 121, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x120]>', '<xor~~eax, eax>', '<cmp~~dword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0x174], eax>', '<je~~0x400cbc>']}, {'block_Idx': 97, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<mov~~eax, 0xffffffea>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<je~~0x400c9c>']}, {'block_Idx': 94, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rax + 0xa0], rcx>', '<mov~~eax, 0xffffffea>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<je~~0x400c9c>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500028>']}, {'block_Idx': 117, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x108]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x400c4f>']}, {'block_Idx': 87, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x158]>', '<mov~~edi, dword ptr [rcx]>', '<mov~~edx, dword ptr [rax + 0x20]>', '<xor~~esi, esi>', '<lea~~rcx, [rip + 0x1635]>', '<call~~0x500030>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xf0]>', '<mov~~edi, dword ptr [rsp + 0xf4]>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0xf8]>', '<cmp~~ecx, edx>', '<cmovg~~edi, eax>', '<call~~0x500018>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<cmp~~dword ptr [rax + 0x4c], 0>', '<setne~~al>', '<mov~~byte ptr [rsp + 0x13f], al>', '<mov~~eax, dword ptr [rsp + 0x140]>', '<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~dl, byte ptr [rsp + 0x13f]>', '<mov~~byte ptr [rsp + 0x107], dl>', '<and~~dl, 1>', '<movzx~~edx, dl>', '<mov~~rsi, rcx>', '<add~~rsi, 0x8c>', '<mov~~qword ptr [rsp + 0x108], rsi>', '<mov~~dword ptr [rcx + 0x8c], edx>', '<mov~~rdx, rcx>', '<add~~rdx, 0x28>', '<mov~~qword ptr [rsp + 0x110], rdx>', '<cmp~~dword ptr [rcx + 0x28], -1>', '<mov~~dword ptr [rsp + 0x118], eax>', '<jne~~0x400466>']}, {'block_Idx': 84, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x94]>', '<mov~~rcx, qword ptr [rsp + 0x178]>', '<add~~rcx, 0xf4>', '<mov~~qword ptr [rsp + 0x48], rcx>', '<cmp~~eax, 0>', '<je~~0x4008e6>']}, {'block_Idx': 57, 'blockInsts': ['<cmp~~eax, 0>', '<jne~~0x40053e>']}, {'block_Idx': 86, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x158]>', '<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~rdx, rcx>', '<add~~rdx, 0x20>', '<mov~~qword ptr [rsp + 8], rdx>', '<mov~~edi, dword ptr [rcx + 0x20]>', '<mov~~esi, dword ptr [rax]>', '<mov~~edx, 0x400>', '<call~~0x500038>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xe0]>', '<xor~~eax, eax>', '<mov~~cl, al>', '<xor~~eax, eax>', '<cmp~~dword ptr [rdx], 0>', '<mov~~byte ptr [rsp + 0xcb], cl>', '<mov~~dword ptr [rsp + 0xcc], eax>', '<je~~0x4005ea>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~edi, dword ptr [rax + 0x10]>', '<call~~0x500010>']}, {'block_Idx': 79, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x110]>', '<mov~~rcx, qword ptr [rsp + 0x158]>', '<mov~~edi, dword ptr [rcx]>', '<mov~~edx, dword ptr [rax]>', '<xor~~esi, esi>', '<lea~~rcx, [rip + 0x1689]>', '<call~~0x500030>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xbc]>', '<mov~~dl, byte ptr [rsp + 0x57]>', '<mov~~rcx, qword ptr [rsp + 0x58]>', '<mov~~esi, dword ptr [rsp + 0x64]>', '<cmp~~esi, 0>', '<sete~~sil>', '<and~~dl, sil>', '<test~~dl, 1>', '<mov~~rdx, rcx>', '<mov~~qword ptr [rsp + 0x30], rdx>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<jne~~0x400a0f>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x174], eax>', '<jmp~~0x400cbc>']}, {'block_Idx': 100, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~eax, dword ptr [rsp + 0x2c]>', '<mov~~dword ptr [rsp + 4], eax>', '<call~~0x400cdc>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, rax>', '<add~~rcx, 0xf0>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<cmp~~dword ptr [rax + 0xf0], 0>', '<je~~0x40053e>']}, {'block_Idx': 42, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x108]>', '<mov~~eax, dword ptr [rax]>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0xdc], eax>', '<jne~~0x40056a>']}, {'block_Idx': 90, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x110]>', '<mov~~edi, dword ptr [rsp + 0x100]>', '<mov~~dword ptr [rcx], edi>', '<mov~~qword ptr [rsp + 0xe8], rax>', '<call~~0x500020>']}, {'block_Idx': 107, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x400b8b>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, rax>', '<add~~rcx, 8>', '<mov~~qword ptr [rsp + 0x160], rcx>', '<mov~~rdi, qword ptr [rax + 8]>', '<call~~0x500008>']}, {'block_Idx': 145, 'blockInsts': ['<mov~~rdi, qword ptr [rsp]>', '<mov~~dword ptr [rdi + 0xf0], 0>', '<pop~~rax>', '<ret~~>']}, {'block_Idx': 91, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x120]>', '<mov~~eax, 8>', '<cmp~~dword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0x100], eax>', '<jne~~0x400411>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x1fec]>', '<mov~~al, 0>', '<call~~0x500000>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x154]>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x168]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x140], ecx>', '<cmp~~ecx, edx>', '<setg~~sil>', '<mov~~byte ptr [rsp + 0x146], sil>', '<cmp~~ecx, edx>', '<mov~~edi, ecx>', '<cmovg~~edi, edx>', '<mov~~dword ptr [rax + 0x7c], edi>', '<and~~sil, 1>', '<movzx~~esi, sil>', '<mov~~dword ptr [rax + 0x80], esi>', '<cmp~~ecx, edx>', '<setl~~al>', '<cmp~~ecx, edx>', '<mov~~byte ptr [rsp + 0x147], al>', '<jne~~0x4001e0>']}, {'block_Idx': 63, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x178]>', '<mov~~dl, byte ptr [rsp + 0x87]>', '<mov~~rcx, qword ptr [rsp + 0x88]>', '<mov~~eax, dword ptr [rsp + 0x90]>', '<mov~~dword ptr [rsi + 0xf4], 0>', '<mov~~byte ptr [rsp + 0x57], dl>', '<mov~~qword ptr [rsp + 0x58], rcx>', '<mov~~dword ptr [rsp + 0x64], eax>', '<mov~~eax, dword ptr [rsp + 0xbc]>', '<mov~~dl, byte ptr [rsp + 0x57]>', '<mov~~rcx, qword ptr [rsp + 0x58]>', '<mov~~esi, dword ptr [rsp + 0x64]>', '<cmp~~esi, 0>', '<sete~~sil>', '<and~~dl, sil>', '<test~~dl, 1>', '<mov~~rdx, rcx>', '<mov~~qword ptr [rsp + 0x30], rdx>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<mov~~dword ptr [rsp + 0x44], eax>', '<jne~~0x400a0f>']}, {'block_Idx': 118, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~rax, qword ptr [rsp + 0x130]>', '<mov~~rcx, qword ptr [rsp + 0x158]>', '<mov~~rsi, qword ptr [rsp + 8]>', '<mov~~rdx, qword ptr [rsp + 0x110]>', '<mov~~r8, qword ptr [rsp + 0x18]>', '<mov~~r9d, dword ptr [r8]>', '<mov~~r8, rdi>', '<add~~r8, 0x10>', '<cmp~~r9d, 0>', '<cmove~~rdx, r8>', '<mov~~edx, dword ptr [rdx]>', '<mov~~esi, dword ptr [rsi]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~r8d, dword ptr [rax]>', '<cmp~~dword ptr [rdi + 0xf4], 4>', '<sete~~al>', '<and~~al, 1>', '<movzx~~r9d, al>', '<call~~0x500040>']}, {'block_Idx': 102, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x180]>', '<mov~~qword ptr [rax], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<je~~0x400c9c>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, rax>', '<add~~rcx, 0x94>', '<mov~~qword ptr [rsp + 0x10], rcx>', '<cmp~~dword ptr [rax + 0x94], 0>', '<je~~0x400ad1>']}, {'block_Idx': 99, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xfc]>', '<mov~~eax, 9>', '<cmp~~ecx, 5>', '<mov~~dword ptr [rsp + 0x100], eax>', '<jae~~0x400411>']}, {'block_Idx': 124, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rax + 0xc0], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x2c], eax>', '<je~~0x400c9c>']}, {'block_Idx': 113, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~rax, qword ptr [rsp + 0x128]>', '<mov~~rcx, qword ptr [rsp + 0x168]>', '<mov~~rdx, qword ptr [rsp + 0x110]>', '<mov~~esi, dword ptr [rdx]>', '<mov~~edx, dword ptr [rdi + 0x10]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~r8d, dword ptr [rax]>', '<cmp~~dword ptr [rdi + 0xf4], 2>', '<sete~~al>', '<and~~al, 1>', '<movzx~~r9d, al>', '<call~~0x500040>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0xc3]>', '<test~~al, 1>', '<jne~~0x400648>']}, {'block_Idx': 92, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x98]>', '<mov~~rax, qword ptr [rsp + 0x48]>', '<mov~~dword ptr [rax], 3>', '<mov~~dl, 1>', '<xor~~eax, eax>', '<mov~~byte ptr [rsp + 0x57], dl>', '<mov~~qword ptr [rsp + 0x58], rcx>', '<mov~~dword ptr [rsp + 0x64], eax>', '<jmp~~0x400941>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~edi, dword ptr [rax + 0x10]>', '<call~~0x500010>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~dword ptr [rax + 0x20], ecx>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, rax>', '<add~~rcx, 0xf0>', '<mov~~qword ptr [rsp + 0xe0], rcx>', '<cmp~~dword ptr [rax + 0xf0], 0>', '<je~~0x40053e>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x68]>', '<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~dword ptr [rcx + 0xf4], 2>', '<mov~~qword ptr [rsp + 0x30], rax>', '<mov~~rax, qword ptr [rsp + 0x110]>', '<mov~~rdx, qword ptr [rsp + 0x158]>', '<mov~~rcx, qword ptr [rsp + 0x168]>', '<mov~~rsi, qword ptr [rsp + 0x30]>', '<mov~~qword ptr [rsp + 0x20], rsi>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~edi, dword ptr [rdx]>', '<cmp~~ecx, edi>', '<cmovg~~edi, ecx>', '<mov~~edx, dword ptr [rax]>', '<xor~~esi, esi>', '<lea~~rcx, [rip + 0x16f1]>', '<call~~0x500030>']}], 'cfg_edge_info': [(32, 37), (73, 81), (79, 97), (107, 113), (44, 45), (19, 9), (23, 25), (40, 41), (46, 57), (86, 102), (128, 117), (122, 131), (37, 42), (27, 34), (42, 41), (105, 109), (20, 22), (82, 40), (92, 81), (121, 126), (102, 100), (81, 71), (7, 12), (59, 50), (71, 79), (18, 21), (61, 56), (64, 73), (50, 56), (39, 37), (93, 81), (77, 94), (121, 9), (113, 124), (36, 41), (15, 18), (62, 69), (57, 36), (5, 7), (22, 23), (0, 2), (84, 93), (14, 19), (49, 50), (78, 86), (68, 63), (112, 118), (104, 114), (83, 91), (13, 14), (101, 78), (55, 56), (102, 107), (99, 90), (63, 70), (56, 64), (107, 112), (100, 146), (69, 76), (57, 65), (1, 5), (80, 94), (110, 104), (54, 60), (124, 112), (114, 28), (20, 21), (128, 100), (23, 26), (31, 39), (49, 54), (34, 32), (8, 13), (2, 6), (81, 70), (45, 50), (117, 121), (59, 49), (71, 78), (64, 72), (145, 146), (105, 110), (97, 78), (43, 52), (40, 44), (118, 128), (17, 18), (36, 40), (62, 68), (94, 100), (99, 105), (21, 24), (69, 73), (84, 92), (131, 121), (52, 66), (112, 117), (17, 20), (124, 100), (56, 63), (78, 87), (97, 100), (91, 90), (28, 31), (91, 99), (101, 79), (63, 71), (24, 27), (114, 27), (50, 55), (26, 33), (103, 100), (44, 48), (82, 41), (39, 36), (34, 31), (37, 36), (45, 49), (65, 82), (54, 61), (67, 55), (15, 17), (131, 100), (12, 9), (55, 62), (41, 45), (18, 22), (133, 9), (60, 67), (0, 1), (87, 103), (133, 100), (48, 59), (83, 90), (100, 106), (117, 122), (76, 84), (66, 83), (103, 86), (72, 80), (42, 46), (33, 43), (21, 23), (90, 104), (126, 133), (5, 8), (22, 24), (13, 15), (94, 101), (6, 9)], 'cdg_edge_info': [(112, 146), (112, 100), (62, 81), (101, 97), (107, 113), (81, 94), (42, 57), (40, 41), (0, 5), (128, 117), (23, 43), (121, 133), (37, 42), (23, 52), (50, 100), (42, 41), (64, 80), (20, 22), (82, 40), (107, 124), (5, 12), (103, 102), (121, 126), (13, 19), (59, 50), (18, 21), (64, 73), (39, 37), (0, 9), (121, 9), (78, 102), (15, 18), (62, 69), (5, 7), (22, 23), (0, 2), (84, 93), (78, 86), (49, 50), (112, 118), (83, 91), (23, 104), (13, 14), (101, 78), (55, 56), (102, 107), (54, 67), (56, 64), (107, 112), (5, 9), (23, 33), (57, 65), (34, 39), (124, 112), (59, 56), (117, 146), (20, 21), (117, 100), (23, 26), (49, 54), (13, 9), (59, 49), (117, 121), (13, 146), (105, 110), (97, 78), (5, 13), (23, 83), (40, 44), (49, 56), (17, 18), (107, 146), (54, 55), (62, 68), (107, 100), (99, 105), (63, 94), (84, 92), (69, 73), (131, 121), (112, 117), (17, 20), (78, 103), (56, 63), (114, 34), (78, 87), (69, 84), (0, 6), (91, 99), (101, 79), (62, 63), (114, 27), (50, 55), (13, 100), (44, 48), (64, 81), (82, 41), (34, 31), (50, 146), (54, 61), (15, 17), (55, 62), (18, 22), (133, 9), (44, 59), (133, 146), (0, 1), (133, 100), (117, 122), (117, 131), (94, 101), (23, 66), (103, 86), (42, 46), (21, 23), (5, 8), (64, 94), (54, 56), (112, 128), (13, 15), (57, 82), (23, 114)], 'ddg_edge_info': [(43, 110), (55, 84), (118, 122), (118, 131), (55, 93), (92, 79), (40, 41), (0, 5), (48, 54), (0, 14), (48, 63), (121, 133), (104, 62), (80, 113), (104, 80), (44, 56), (31, 86), (93, 79), (54, 97), (0, 126), (20, 104), (20, 113), (7, 12), (59, 50), (118, 117), (118, 126), (48, 49), (104, 48), (104, 57), (113, 124), (27, 93), (21, 59), (121, 146), (113, 133), (80, 117), (104, 84), (73, 78), (0, 94), (73, 87), (0, 103), (31, 81), (22, 23), (84, 93), (14, 19), (55, 56), (13, 87), (59, 54), (46, 93), (92, 78), (92, 87), (27, 79), (80, 94), (104, 61), (110, 104), (8, 84), (39, 62), (80, 112), (104, 79), (8, 93), (113, 146), (31, 67), (7, 146), (20, 94), (20, 103), (128, 121), (59, 49), (46, 79), (65, 92), (65, 101), (21, 22), (104, 56), (39, 48), (8, 79), (27, 92), (27, 101), (0, 84), (94, 100), (31, 62), (31, 80), (122, 100), (84, 92), (17, 20), (65, 69), (65, 78), (65, 87), (46, 92), (46, 101), (67, 133), (113, 100), (86, 146), (104, 42), (101, 107), (27, 69), (113, 118), (27, 78), (20, 39), (27, 87), (31, 48), (63, 117), (8, 92), (20, 57), (8, 101), (20, 66), (0, 97), (31, 84), (103, 100), (65, 55), (65, 64), (65, 73), (46, 69), (65, 82), (46, 78), (46, 87), (27, 55), (104, 37), (27, 64), (80, 79), (110, 80), (104, 46), (27, 73), (0, 56), (8, 69), (20, 34), (27, 82), (113, 122), (8, 78), (20, 43), (133, 100), (63, 112), (39, 56), (8, 87), (20, 52), (39, 65), (63, 121), (31, 61), (83, 99), (104, 131), (103, 86), (21, 133), (124, 118), (93, 121), (65, 50), (22, 79), (65, 59), (46, 55), (65, 68), (86, 100), (46, 64), (46, 73), (65, 86), (46, 82), (2, 146), (86, 118), (97, 118), (27, 41), (27, 50), (8, 46), (79, 97), (27, 59), (8, 55), (27, 68), (8, 64), (113, 117), (8, 73), (63, 107), (0, 69), (8, 82), (0, 78), (31, 56), (0, 87), (46, 41), (65, 54), (46, 50), (65, 63), (46, 59), (22, 101), (46, 68), (22, 110), (97, 113), (86, 113), (86, 122), (8, 41), (104, 27), (50, 56), (61, 56), (27, 54), (48, 86), (8, 50), (27, 63), (0, 46), (8, 59), (8, 68), (20, 33), (39, 46), (31, 42), (0, 73), (105, 104), (124, 117), (65, 40), (65, 49), (56, 80), (46, 54), (65, 67), (68, 63), (46, 63), (27, 31), (97, 117), (86, 117), (8, 27), (27, 40), (79, 78), (27, 49), (79, 87), (48, 81), (63, 79), (0, 41), (8, 54), (0, 50), (8, 63), (21, 82), (0, 59), (100, 146), (20, 37), (31, 37), (0, 68), (33, 65), (1, 5), (124, 112), (54, 133), (65, 44), (20, 131), (46, 40), (43, 105), (22, 82), (46, 49), (128, 100), (8, 13), (86, 112), (97, 112), (8, 22), (48, 67), (8, 31), (27, 44), (0, 27), (8, 40), (8, 49), (5, 114), (20, 23), (104, 93), (104, 102), (21, 104), (22, 41), (22, 50), (22, 59), (122, 146), (15, 20), (65, 48), (46, 44), (118, 121), (59, 81), (55, 92), (67, 94), (8, 17), (67, 103), (0, 13), (48, 62), (8, 26), (27, 39), (0, 22), (0, 31), (8, 44), (48, 80), (63, 78), (63, 87), (80, 121), (33, 46), (104, 97), (41, 59), (93, 78), (93, 87), (73, 118), (20, 121), (55, 69), (26, 33), (59, 67), (82, 41), (13, 118), (82, 50), (0, 8), (110, 41), (8, 21), (0, 17), (110, 50), (0, 26), (80, 107), (48, 84), (5, 113), (92, 118), (131, 100), (104, 92), (33, 50), (73, 86), (104, 101), (21, 94), (44, 59), (133, 146), (73, 113), (66, 83), (13, 86), (126, 133), (92, 86), (48, 61), (0, 21), (104, 69), (48, 79), (92, 113), (104, 78), (104, 87), (73, 81), (31, 93), (0, 124), (20, 102), (93, 86), (0, 133), (103, 118), (19, 146), (122, 131), (73, 117), (15, 23), (55, 68), (118, 133), (92, 81), (0, 7), (48, 56), (21, 39), (104, 55), (104, 64), (113, 131), (21, 57), (104, 73), (21, 66), (33, 31), (104, 82), (81, 80), (8, 114), (31, 79), (0, 110), (93, 81), (20, 97), (0, 128), (103, 113), (122, 126), (59, 61), (0, 2), (104, 41), (21, 34), (5, 80), (104, 50), (21, 43), (104, 59), (113, 126), (21, 52), (27, 86), (104, 68), (80, 101), (20, 83), (31, 92), (54, 94), (122, 121), (43, 66), (31, 101), (103, 117), (87, 100), (13, 80), (65, 81), (126, 100), (59, 56), (46, 86), (99, 110), (80, 78), (113, 112), (80, 87), (104, 54), (27, 81), (113, 121), (104, 63), (2, 6), (8, 86), (31, 69), (0, 100), (31, 78), (31, 87), (43, 52), (0, 118), (87, 86), (103, 112), (118, 100), (22, 114), (46, 81), (86, 126), (104, 31), (67, 131), (69, 73), (104, 40), (27, 67), (21, 33), (14, 146), (104, 49), (39, 50), (8, 81), (31, 46), (31, 55), (20, 55), (0, 86), (31, 64), (31, 73), (13, 34), (20, 82), (124, 121), (0, 113), (31, 82), (33, 110), (103, 107), (65, 62), (46, 67), (65, 80), (22, 118), (86, 121), (97, 121), (50, 55), (79, 100), (27, 62), (104, 44), (80, 86), (8, 67), (101, 118), (0, 63), (27, 80), (31, 41), (31, 50), (20, 59), (31, 59), (91, 110), (31, 68), (21, 131), (33, 105), (5, 15), (87, 103), (46, 62), (97, 107), (86, 107), (65, 84), (22, 113), (46, 80), (65, 93), (78, 112), (117, 131), (79, 86), (27, 48), (104, 39), (8, 62), (27, 84), (0, 67), (8, 80), (31, 54), (13, 15), (31, 63), (104, 133), (83, 110), (6, 146), (46, 48), (65, 61), (46, 57), (86, 102), (65, 79), (128, 117), (22, 117), (46, 84), (27, 34), (8, 39), (42, 41), (8, 48), (104, 34), (27, 61), (48, 93), (20, 22), (39, 44), (20, 40), (31, 40), (20, 49), (21, 103), (63, 118), (102, 100), (1, 8), (0, 80), (31, 49), (64, 73), (93, 118), (66, 110), (65, 56), (46, 61), (67, 102), (8, 34), (27, 56), (0, 39), (0, 48), (63, 86), (8, 61), (31, 44), (63, 113), (104, 114), (56, 64), (93, 113), (54, 131), (66, 105), (22, 80), (26, 41), (46, 56), (46, 65), (67, 97), (126, 146), (8, 20), (27, 42), (0, 34), (63, 81), (92, 117), (48, 92), (8, 56), (48, 101), (0, 61), (31, 39), (21, 102), (1, 7), (73, 112), (34, 41), (73, 121), (105, 110), (66, 91), (93, 117), (20, 133), (26, 27), (97, 78), (97, 87), (118, 128), (8, 15), (118, 146), (27, 37), (0, 20), (48, 69), (27, 46), (8, 42), (82, 80), (48, 78), (92, 112), (48, 87), (92, 121), (104, 86), (131, 121), (52, 66), (21, 97), (44, 62), (73, 107), (54, 103), (124, 100), (1, 20), (22, 61), (56, 63), (93, 112), (65, 41), (15, 22), (97, 100), (48, 55), (0, 15), (48, 64), (48, 73), (8, 37), (92, 107), (0, 33), (104, 81), (21, 83), (33, 48), (33, 66), (103, 121), (93, 107), (67, 55), (66, 99), (97, 86), (59, 69), (12, 146), (0, 1), (48, 50), (8, 14), (48, 59), (8, 23), (48, 68), (80, 100), (104, 67), (80, 118), (33, 43), (73, 79), (104, 94), (33, 52), (81, 101), (104, 103), (20, 91), (0, 122), (54, 102), (0, 131), (22, 42), (20, 118), (23, 114), (13, 79)]}]}
{'avresample_open': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 0, 'instruction': 'subq\t$0x188, %rsp                      # imm = 0x0xbc'}, {'instIndex': 1, 'instruction': 'movq\t%rdi, 0x178(%rsp)                 # 8-byte Spill'}, {'instIndex': 6, 'instruction': 'je\t.LBB0_2'}, {'instIndex': 8, 'instruction': 'movl\t$0x10, %esi'}, {'instIndex': 9, 'instruction': 'leaq\t.L.str(%rip), %rdx'}, {'instIndex': 10, 'instruction': 'movb\t$0, %al'}, {'instIndex': 11, 'instruction': 'callq\tav_log@PLT'}, {'instIndex': 12, 'instruction': 'movl\t$0xffffffea, %eax               # imm = 0xFFFFFFEA'}, {'instIndex': 13, 'instruction': 'movl\t%eax, 0x174(%rsp)                 # 4-byte Spill'}, {'instIndex': 14, 'instruction': 'jmp\t.LBB0_68'}, {'instIndex': 16, 'instruction': 'movq\t%rax, %rcx'}, {'instIndex': 17, 'instruction': 'addq\t$8, %rcx'}, {'instIndex': 18, 'instruction': 'movq\t%rcx, 0x160(%rsp)                 # 8-byte Spill'}, {'instIndex': 19, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 20, 'instruction': 'callq\tav_get_channel_layout_nb_channels@PLT'}, {'instIndex': 22, 'instruction': 'movq\t%rcx, %rdx'}, {'instIndex': 23, 'instruction': 'addq\t$0x74, %rdx'}, {'instIndex': 24, 'instruction': 'movq\t%rdx, 0x168(%rsp)                 # 8-byte Spill'}, {'instIndex': 25, 'instruction': 'movl\t%eax, 0x74(%rcx)'}, {'instIndex': 26, 'instruction': 'addl\t$-0x21, %eax'}, {'instIndex': 27, 'instruction': 'cmpl\t$-0x20, %eax'}, {'instIndex': 28, 'instruction': 'jae\t.LBB0_4'}]}]}
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310---a/libavresample/utils.c
The case of compiler gcc with optimization no.
Patched source code file: utils.c
Patched function: 1---int avresample_open 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/gcc_before/no/utils_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/gcc_before/no/utils_gcc.s---avresample_open---before
function id: 24
function flag: True
There are 562 instructions for function: avresample_open in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '36', 'end': 46}, 'before': {'start': '36', 'end': 41}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'endbr64'}, {'instIndex': 1, 'instruction': 'pushq\t%rbx'}, {'instIndex': 2, 'instruction': 'subq\t$0x30, %rsp'}, {'instIndex': 3, 'instruction': 'movq\t%rdi, 8(%rsp)'}, {'instIndex': 4, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 5, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 6, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 7, 'instruction': 'call\tav_get_channel_layout_nb_channels@PLT'}, {'instIndex': 8, 'instruction': 'movq\t8(%rsp), %rdx'}, {'instIndex': 9, 'instruction': 'movl\t%eax, 0x74(%rdx)'}, {'instIndex': 10, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 11, 'instruction': 'movl\t0x74(%rax), %eax'}, {'instIndex': 12, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 13, 'instruction': 'jle\t.L2'}, {'instIndex': 14, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 15, 'instruction': 'movl\t0x74(%rax), %eax'}, {'instIndex': 16, 'instruction': 'cmpl\t$0x20, %eax'}, {'instIndex': 17, 'instruction': 'jle\t.L3'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/gcc_before/no/utils.o
Binary file does not exist.
{'avresample_open': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'endbr64'}, {'instIndex': 1, 'instruction': 'pushq\t%rbx'}, {'instIndex': 2, 'instruction': 'subq\t$0x30, %rsp'}, {'instIndex': 3, 'instruction': 'movq\t%rdi, 8(%rsp)'}, {'instIndex': 4, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 5, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 6, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 7, 'instruction': 'call\tav_get_channel_layout_nb_channels@PLT'}, {'instIndex': 8, 'instruction': 'movq\t8(%rsp), %rdx'}, {'instIndex': 9, 'instruction': 'movl\t%eax, 0x74(%rdx)'}, {'instIndex': 10, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 11, 'instruction': 'movl\t0x74(%rax), %eax'}, {'instIndex': 12, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 13, 'instruction': 'jle\t.L2'}, {'instIndex': 14, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 15, 'instruction': 'movl\t0x74(%rax), %eax'}, {'instIndex': 16, 'instruction': 'cmpl\t$0x20, %eax'}, {'instIndex': 17, 'instruction': 'jle\t.L3'}]}]}
The case of compiler gcc with optimization O0.
Patched source code file: utils.c
Patched function: 1---int avresample_open 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/gcc_before/O0/utils_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/gcc_before/O0/utils_gcc.s---avresample_open---before
function id: 24
function flag: True
There are 562 instructions for function: avresample_open in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '36', 'end': 46}, 'before': {'start': '36', 'end': 41}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'endbr64'}, {'instIndex': 1, 'instruction': 'pushq\t%rbx'}, {'instIndex': 2, 'instruction': 'subq\t$0x30, %rsp'}, {'instIndex': 3, 'instruction': 'movq\t%rdi, 8(%rsp)'}, {'instIndex': 4, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 5, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 6, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 7, 'instruction': 'call\tav_get_channel_layout_nb_channels@PLT'}, {'instIndex': 8, 'instruction': 'movq\t8(%rsp), %rdx'}, {'instIndex': 9, 'instruction': 'movl\t%eax, 0x74(%rdx)'}, {'instIndex': 10, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 11, 'instruction': 'movl\t0x74(%rax), %eax'}, {'instIndex': 12, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 13, 'instruction': 'jle\t.L2'}, {'instIndex': 14, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 15, 'instruction': 'movl\t0x74(%rax), %eax'}, {'instIndex': 16, 'instruction': 'cmpl\t$0x20, %eax'}, {'instIndex': 17, 'instruction': 'jle\t.L3'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/gcc_before/O0/utils.o
Binary file does not exist.
{'avresample_open': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'endbr64'}, {'instIndex': 1, 'instruction': 'pushq\t%rbx'}, {'instIndex': 2, 'instruction': 'subq\t$0x30, %rsp'}, {'instIndex': 3, 'instruction': 'movq\t%rdi, 8(%rsp)'}, {'instIndex': 4, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 5, 'instruction': 'movq\t8(%rax), %rax'}, {'instIndex': 6, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 7, 'instruction': 'call\tav_get_channel_layout_nb_channels@PLT'}, {'instIndex': 8, 'instruction': 'movq\t8(%rsp), %rdx'}, {'instIndex': 9, 'instruction': 'movl\t%eax, 0x74(%rdx)'}, {'instIndex': 10, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 11, 'instruction': 'movl\t0x74(%rax), %eax'}, {'instIndex': 12, 'instruction': 'testl\t%eax, %eax'}, {'instIndex': 13, 'instruction': 'jle\t.L2'}, {'instIndex': 14, 'instruction': 'movq\t8(%rsp), %rax'}, {'instIndex': 15, 'instruction': 'movl\t0x74(%rax), %eax'}, {'instIndex': 16, 'instruction': 'cmpl\t$0x20, %eax'}, {'instIndex': 17, 'instruction': 'jle\t.L3'}]}]}
The case of compiler gcc with optimization O1.
Patched source code file: utils.c
Patched function: 1---int avresample_open 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/gcc_before/O1/utils_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/gcc_before/O1/utils_gcc.s---avresample_open---before
function id: 13
function flag: True
There are 989 instructions for function: avresample_open in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '36', 'end': 46}, 'before': {'start': '36', 'end': 41}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'endbr64'}, {'instIndex': 1, 'instruction': 'pushq\t%r13'}, {'instIndex': 2, 'instruction': 'pushq\t%r12'}, {'instIndex': 3, 'instruction': 'pushq\t%rbp'}, {'instIndex': 4, 'instruction': 'pushq\t%rbx'}, {'instIndex': 5, 'instruction': 'subq\t$8, %rsp'}, {'instIndex': 6, 'instruction': 'movq\t%rdi, %rbx'}, {'instIndex': 7, 'instruction': 'movq\t8(%rdi), %rdi'}, {'instIndex': 8, 'instruction': 'call\tav_get_channel_layout_nb_channels@PLT'}, {'instIndex': 9, 'instruction': 'movl\t%eax, 0x74(%rbx)'}, {'instIndex': 10, 'instruction': 'subl\t$1, %eax'}, {'instIndex': 11, 'instruction': 'cmpl\t$0x1f, %eax'}, {'instIndex': 12, 'instruction': 'ja\t.L72'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/gcc_before/O1/utils.o
Binary file does not exist.
{'avresample_open': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'endbr64'}, {'instIndex': 1, 'instruction': 'pushq\t%r13'}, {'instIndex': 2, 'instruction': 'pushq\t%r12'}, {'instIndex': 3, 'instruction': 'pushq\t%rbp'}, {'instIndex': 4, 'instruction': 'pushq\t%rbx'}, {'instIndex': 5, 'instruction': 'subq\t$8, %rsp'}, {'instIndex': 6, 'instruction': 'movq\t%rdi, %rbx'}, {'instIndex': 7, 'instruction': 'movq\t8(%rdi), %rdi'}, {'instIndex': 8, 'instruction': 'call\tav_get_channel_layout_nb_channels@PLT'}, {'instIndex': 9, 'instruction': 'movl\t%eax, 0x74(%rbx)'}, {'instIndex': 10, 'instruction': 'subl\t$1, %eax'}, {'instIndex': 11, 'instruction': 'cmpl\t$0x1f, %eax'}, {'instIndex': 12, 'instruction': 'ja\t.L72'}]}]}
The case of compiler gcc with optimization O2.
Patched source code file: utils.c
Patched function: 1---int avresample_open 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/gcc_before/O2/utils_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/gcc_before/O2/utils_gcc.s---avresample_open---before
function id: 13
function flag: True
There are 974 instructions for function: avresample_open in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '36', 'end': 46}, 'before': {'start': '36', 'end': 41}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'endbr64'}, {'instIndex': 1, 'instruction': 'pushq\t%r13'}, {'instIndex': 2, 'instruction': 'pushq\t%r12'}, {'instIndex': 3, 'instruction': 'pushq\t%rbp'}, {'instIndex': 4, 'instruction': 'movq\t%rdi, %rbp'}, {'instIndex': 5, 'instruction': 'pushq\t%rbx'}, {'instIndex': 6, 'instruction': 'subq\t$8, %rsp'}, {'instIndex': 7, 'instruction': 'movq\t8(%rdi), %rdi'}, {'instIndex': 8, 'instruction': 'call\tav_get_channel_layout_nb_channels@PLT'}, {'instIndex': 9, 'instruction': 'movl\t%eax, 0x74(%rbp)'}, {'instIndex': 10, 'instruction': 'subl\t$1, %eax'}, {'instIndex': 11, 'instruction': 'cmpl\t$0x1f, %eax'}, {'instIndex': 12, 'instruction': 'ja\t.L99'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/gcc_before/O2/utils.o
Binary file does not exist.
{'avresample_open': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'endbr64'}, {'instIndex': 1, 'instruction': 'pushq\t%r13'}, {'instIndex': 2, 'instruction': 'pushq\t%r12'}, {'instIndex': 3, 'instruction': 'pushq\t%rbp'}, {'instIndex': 4, 'instruction': 'movq\t%rdi, %rbp'}, {'instIndex': 5, 'instruction': 'pushq\t%rbx'}, {'instIndex': 6, 'instruction': 'subq\t$8, %rsp'}, {'instIndex': 7, 'instruction': 'movq\t8(%rdi), %rdi'}, {'instIndex': 8, 'instruction': 'call\tav_get_channel_layout_nb_channels@PLT'}, {'instIndex': 9, 'instruction': 'movl\t%eax, 0x74(%rbp)'}, {'instIndex': 10, 'instruction': 'subl\t$1, %eax'}, {'instIndex': 11, 'instruction': 'cmpl\t$0x1f, %eax'}, {'instIndex': 12, 'instruction': 'ja\t.L99'}]}]}
The case of compiler gcc with optimization O3.
Patched source code file: utils.c
Patched function: 1---int avresample_open 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/gcc_before/O3/utils_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/gcc_before/O3/utils_gcc.s---avresample_open---before
function id: 13
function flag: True
There are 980 instructions for function: avresample_open in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '36', 'end': 46}, 'before': {'start': '36', 'end': 41}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'endbr64'}, {'instIndex': 1, 'instruction': 'pushq\t%r13'}, {'instIndex': 2, 'instruction': 'pushq\t%r12'}, {'instIndex': 3, 'instruction': 'pushq\t%rbp'}, {'instIndex': 4, 'instruction': 'movq\t%rdi, %rbp'}, {'instIndex': 5, 'instruction': 'pushq\t%rbx'}, {'instIndex': 6, 'instruction': 'subq\t$8, %rsp'}, {'instIndex': 7, 'instruction': 'movq\t8(%rdi), %rdi'}, {'instIndex': 8, 'instruction': 'call\tav_get_channel_layout_nb_channels@PLT'}, {'instIndex': 9, 'instruction': 'movl\t%eax, 0x74(%rbp)'}, {'instIndex': 10, 'instruction': 'subl\t$1, %eax'}, {'instIndex': 11, 'instruction': 'cmpl\t$0x1f, %eax'}, {'instIndex': 12, 'instruction': 'ja\t.L99'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/gcc_before/O3/utils.o
Binary file does not exist.
{'avresample_open': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'endbr64'}, {'instIndex': 1, 'instruction': 'pushq\t%r13'}, {'instIndex': 2, 'instruction': 'pushq\t%r12'}, {'instIndex': 3, 'instruction': 'pushq\t%rbp'}, {'instIndex': 4, 'instruction': 'movq\t%rdi, %rbp'}, {'instIndex': 5, 'instruction': 'pushq\t%rbx'}, {'instIndex': 6, 'instruction': 'subq\t$8, %rsp'}, {'instIndex': 7, 'instruction': 'movq\t8(%rdi), %rdi'}, {'instIndex': 8, 'instruction': 'call\tav_get_channel_layout_nb_channels@PLT'}, {'instIndex': 9, 'instruction': 'movl\t%eax, 0x74(%rbp)'}, {'instIndex': 10, 'instruction': 'subl\t$1, %eax'}, {'instIndex': 11, 'instruction': 'cmpl\t$0x1f, %eax'}, {'instIndex': 12, 'instruction': 'ja\t.L99'}]}]}
The case of compiler gcc with optimization Os.
Patched source code file: utils.c
Patched function: 1---int avresample_open 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/gcc_before/Os/utils_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/gcc_before/Os/utils_gcc.s---avresample_open---before
function id: 13
function flag: True
There are 873 instructions for function: avresample_open in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '36', 'end': 46}, 'before': {'start': '36', 'end': 41}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'endbr64'}, {'instIndex': 1, 'instruction': 'pushq\t%r13'}, {'instIndex': 2, 'instruction': 'pushq\t%r12'}, {'instIndex': 3, 'instruction': 'pushq\t%rbp'}, {'instIndex': 4, 'instruction': 'movq\t%rdi, %rbp'}, {'instIndex': 5, 'instruction': 'pushq\t%rbx'}, {'instIndex': 6, 'instruction': 'subq\t$0x18, %rsp'}, {'instIndex': 7, 'instruction': 'movq\t8(%rdi), %rdi'}, {'instIndex': 8, 'instruction': 'call\tav_get_channel_layout_nb_channels@PLT'}, {'instIndex': 9, 'instruction': 'movl\t%eax, 0x74(%rbp)'}, {'instIndex': 10, 'instruction': 'decl\t%eax'}, {'instIndex': 11, 'instruction': 'cmpl\t$0x1f, %eax'}, {'instIndex': 12, 'instruction': 'jbe\t.L5'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/gcc_before/Os/utils.o
Binary file does not exist.
{'avresample_open': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'endbr64'}, {'instIndex': 1, 'instruction': 'pushq\t%r13'}, {'instIndex': 2, 'instruction': 'pushq\t%r12'}, {'instIndex': 3, 'instruction': 'pushq\t%rbp'}, {'instIndex': 4, 'instruction': 'movq\t%rdi, %rbp'}, {'instIndex': 5, 'instruction': 'pushq\t%rbx'}, {'instIndex': 6, 'instruction': 'subq\t$0x18, %rsp'}, {'instIndex': 7, 'instruction': 'movq\t8(%rdi), %rdi'}, {'instIndex': 8, 'instruction': 'call\tav_get_channel_layout_nb_channels@PLT'}, {'instIndex': 9, 'instruction': 'movl\t%eax, 0x74(%rbp)'}, {'instIndex': 10, 'instruction': 'decl\t%eax'}, {'instIndex': 11, 'instruction': 'cmpl\t$0x1f, %eax'}, {'instIndex': 12, 'instruction': 'jbe\t.L5'}]}]}
The case of compiler clang with optimization no.
Patched source code file: utils.c
Patched function: 1---int avresample_open 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_before/no/utils.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_before/no/utils.s---avresample_open---before
function id: 0
function flag: True
There are 550 instructions for function: avresample_open in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '36', 'end': 46}, 'before': {'start': '36', 'end': 41}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'subq\t$0x48, %rsp'}, {'instIndex': 1, 'instruction': 'movq\t%rdi, 0x38(%rsp)'}, {'instIndex': 2, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 3, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 4, 'instruction': 'callq\tav_get_channel_layout_nb_channels@PLT'}, {'instIndex': 5, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 6, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 7, 'instruction': 'movl\t%ecx, 0x74(%rax)'}, {'instIndex': 8, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 9, 'instruction': 'cmpl\t$0, 0x74(%rax)'}, {'instIndex': 10, 'instruction': 'jle\t.LBB0_2'}, {'instIndex': 11, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 12, 'instruction': 'cmpl\t$0x20, 0x74(%rax)'}, {'instIndex': 13, 'instruction': 'jle\t.LBB0_3'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_before/no/utils.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_before/no/utils.o---before
The extraction of function: avresample_open
Analyzing the binaries to generate subCFGs from patched function ...
It has 449 nodes and 740 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 550 instructions in binary file.
[4194304, 4194327, 4194348]
The execution time of patched subCFG information extraction via angr: 0:00:00.627881
{'avresample_open': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40002c>, <DisassemblerInsn "cmp" for 0x400031>, <DisassemblerInsn "jle" for 0x400035>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400037>, <DisassemblerInsn "mov" for 0x40003c>, <DisassemblerInsn "mov" for 0x400041>, <DisassemblerInsn "mov" for 0x400045>, <DisassemblerInsn "lea" for 0x40004a>, <DisassemblerInsn "mov" for 0x400051>, <DisassemblerInsn "call" for 0x400053>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400065>, <DisassemblerInsn "mov" for 0x40006a>, <DisassemblerInsn "call" for 0x40006e>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400004>, <DisassemblerInsn "mov" for 0x400009>, <DisassemblerInsn "mov" for 0x40000e>, <DisassemblerInsn "call" for 0x400012>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400017>, <DisassemblerInsn "mov" for 0x400019>, <DisassemblerInsn "mov" for 0x40001e>, <DisassemblerInsn "mov" for 0x400021>, <DisassemblerInsn "cmp" for 0x400026>, <DisassemblerInsn "jle" for 0x40002a>]'}], 'cfg_block_detailed_info': [{'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x74], 0x20>', '<jle~~0x400065>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x38]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rcx, qword ptr [rax + 8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x1af7]>', '<mov~~al, 0>', '<call~~0x500008>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rdi, qword ptr [rax + 0x18]>', '<call~~0x500000>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x48>', '<mov~~qword ptr [rsp + 0x38], rdi>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rdi, qword ptr [rax + 8]>', '<call~~0x500000>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x74], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x74], 0>', '<jle~~0x400037>']}], 'cfg_edge_info': [(0, 1), (1, 2), (3, 2), (1, 3), (3, 5)]}]}
{'avresample_open': [4194304, 4194327, 4194348]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_before/no/utils.o---before
The extraction of function: avresample_open
[4194304, 4194327, 4194348]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 192 nodes and 302 edges in CFGEmulated.
It has 190 nodes and 453 edges in CDG.
It has 2817 nodes and 3870 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194304, 4194327, 4194348]
{4194304, 4195841, 4196355, 4195339, 4195855, 4196369, 4194327, 4195353, 4196383, 4194848, 4195873, 4196395, 4194348, 4195886, 4194862, 4194359, 4195897, 4195390, 4194880, 4194893, 4195410, 4195922, 4194392, 4194910, 4195423, 4194405, 4196455, 4194923, 4195952, 4194419, 4194936, 4195967, 4194946, 4196485, 4194440, 4194955, 4195469, 4195981, 4194961, 4194451, 4196500, 4194970, 4195483, 4194974, 4196514, 4195497, 4196011, 4196524, 4194989, 4194484, 4195003, 4194497, 4195017, 4196041, 4196554, 4195534, 4194515, 4196566, 4195031, 4196056, 4195038, 4194529, 4196580, 4195045, 4196070, 4195052, 4194541, 4196590, 4195059, 4195066, 4196100, 4195589, 4195080, 4196620, 4196630, 4195094, 4196632, 4195609, 4196642, 4196130, 4195108, 4196652, 4195629, 4196145, 4196660, 4194612, 4195124, 4194632, 4196171, 4195147, 4194653, 4195174, 4196201, 4195185, 4195698, 4194678, 4196214, 4195198, 4195712, 4196228, 4195729, 4195219, 4195743, 4195232, 4194734, 4195760, 4195256, 4195774, 4194753, 4196292, 4195270, 4195791, 4195284, 4195297, 4196322, 4195812, 4195302, 4194797, 4196337, 4195315, 4195827, 4194813}
[32, 96, 88, 31, 135, 59, 126, 38, 65, 79, 113, 114, 76, 168, 148, 171, 19, 74, 4, 95, 20, 118, 57, 50, 10, 30, 49, 136, 91, 28, 146, 159, 138, 162, 73, 68, 23, 112, 15, 175, 106, 26, 142, 77, 78, 99, 133, 156, 100, 25, 174, 45, 67, 178, 130, 173, 18, 164, 17, 48, 69, 144, 11, 172, 158, 163, 140, 92, 90, 66, 139, 121, 37, 0, 94, 93, 14, 29, 24, 46, 22, 9, 152, 147, 129, 47, 98, 131, 54, 101, 80, 39, 123, 71, 84, 62, 141, 128, 42, 43, 83, 134, 151, 109, 81, 27, 2, 63, 72, 119, 124, 21, 155, 61, 191, 52, 104, 105, 154, 102, 3, 107, 51, 6, 111, 12, 153, 117, 40, 132, 56, 87, 127, 177, 103, 55, 33, 145, 190, 82, 89, 34, 167, 7, 122, 70, 16, 125]
The execution time of patched slicing information extraction via angr: 0:00:38.246808
{'avresample_open': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400240>, <DisassemblerInsn "mov" for 0x400245>, <DisassemblerInsn "call" for 0x400248>]'}, {'block_Idx': 96, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40068d>, <DisassemblerInsn "mov" for 0x400692>, <DisassemblerInsn "mov" for 0x400695>, <DisassemblerInsn "mov" for 0x40069a>, <DisassemblerInsn "xor" for 0x40069d>, <DisassemblerInsn "lea" for 0x40069f>, <DisassemblerInsn "call" for 0x4006a6>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40062e>, <DisassemblerInsn "mov" for 0x400633>, <DisassemblerInsn "mov" for 0x400636>, <DisassemblerInsn "mov" for 0x400639>, <DisassemblerInsn "mov" for 0x40063c>, <DisassemblerInsn "mov" for 0x400641>, <DisassemblerInsn "xor" for 0x400644>, <DisassemblerInsn "lea" for 0x400646>, <DisassemblerInsn "call" for 0x40064d>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40022e>, <DisassemblerInsn "cmp" for 0x400233>, <DisassemblerInsn "je" for 0x40023a>]'}, {'block_Idx': 135, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40072f>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40026b>, <DisassemblerInsn "mov" for 0x40026f>, <DisassemblerInsn "call" for 0x400273>]'}, {'block_Idx': 126, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006c9>, <DisassemblerInsn "jmp" for 0x4006d1>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003aa>, <DisassemblerInsn "cmp" for 0x4003af>, <DisassemblerInsn "je" for 0x4003b6>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40045f>, <DisassemblerInsn "setne" for 0x400462>, <DisassemblerInsn "xor" for 0x400465>, <DisassemblerInsn "mov" for 0x400467>, <DisassemblerInsn "mov" for 0x40046b>, <DisassemblerInsn "and" for 0x40046f>, <DisassemblerInsn "movzx" for 0x400471>, <DisassemblerInsn "mov" for 0x400474>, <DisassemblerInsn "mov" for 0x400479>, <DisassemblerInsn "mov" for 0x40047f>, <DisassemblerInsn "cmp" for 0x400484>, <DisassemblerInsn "jne" for 0x40048b>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40052d>, <DisassemblerInsn "cmp" for 0x400532>, <DisassemblerInsn "setne" for 0x400539>, <DisassemblerInsn "mov" for 0x40053c>, <DisassemblerInsn "mov" for 0x400540>, <DisassemblerInsn "mov" for 0x400544>, <DisassemblerInsn "mov" for 0x400548>, <DisassemblerInsn "mov" for 0x40054c>, <DisassemblerInsn "mov" for 0x400550>, <DisassemblerInsn "and" for 0x400554>, <DisassemblerInsn "movzx" for 0x400556>, <DisassemblerInsn "mov" for 0x400559>, <DisassemblerInsn "mov" for 0x40055e>, <DisassemblerInsn "mov" for 0x400564>, <DisassemblerInsn "cmp" for 0x400569>, <DisassemblerInsn "je" for 0x400570>]'}, {'block_Idx': 113, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4002d7>, <DisassemblerInsn "jg" for 0x4002dc>]'}, {'block_Idx': 114, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002c9>, <DisassemblerInsn "mov" for 0x4002ce>, <DisassemblerInsn "jmp" for 0x4002d5>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400291>, <DisassemblerInsn "call" for 0x400295>]'}, {'block_Idx': 168, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400867>, <DisassemblerInsn "mov" for 0x40086a>, <DisassemblerInsn "mov" for 0x40086f>, <DisassemblerInsn "mov" for 0x400876>, <DisassemblerInsn "cmp" for 0x40087b>, <DisassemblerInsn "jne" for 0x400883>]'}, {'block_Idx': 148, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400803>, <DisassemblerInsn "cmp" for 0x400808>, <DisassemblerInsn "je" for 0x40080f>]'}, {'block_Idx': 171, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008ee>, <DisassemblerInsn "mov" for 0x4008f1>, <DisassemblerInsn "mov" for 0x4008f6>, <DisassemblerInsn "mov" for 0x4008fd>, <DisassemblerInsn "cmp" for 0x400902>, <DisassemblerInsn "jne" for 0x40090a>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400186>, <DisassemblerInsn "and" for 0x40018a>, <DisassemblerInsn "movzx" for 0x40018c>, <DisassemblerInsn "mov" for 0x40018f>, <DisassemblerInsn "mov" for 0x400194>, <DisassemblerInsn "mov" for 0x40019a>, <DisassemblerInsn "mov" for 0x40019f>, <DisassemblerInsn "cmp" for 0x4001a1>, <DisassemblerInsn "mov" for 0x4001a8>, <DisassemblerInsn "jne" for 0x4001ac>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400572>, <DisassemblerInsn "cmp" for 0x400577>, <DisassemblerInsn "je" for 0x40057e>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40002c>, <DisassemblerInsn "cmp" for 0x400031>, <DisassemblerInsn "jle" for 0x400035>]'}, {'block_Idx': 95, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006d8>, <DisassemblerInsn "cmp" for 0x4006dd>, <DisassemblerInsn "je" for 0x4006e4>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000ed>, <DisassemblerInsn "mov" for 0x4000f1>, <DisassemblerInsn "mov" for 0x4000f6>, <DisassemblerInsn "mov" for 0x4000f9>, <DisassemblerInsn "mov" for 0x4000fe>, <DisassemblerInsn "mov" for 0x400101>, <DisassemblerInsn "cmp" for 0x400106>, <DisassemblerInsn "setg" for 0x400109>, <DisassemblerInsn "and" for 0x40010c>, <DisassemblerInsn "movzx" for 0x40010e>, <DisassemblerInsn "mov" for 0x400111>, <DisassemblerInsn "mov" for 0x400116>, <DisassemblerInsn "mov" for 0x40011c>, <DisassemblerInsn "mov" for 0x400121>, <DisassemblerInsn "mov" for 0x400124>, <DisassemblerInsn "mov" for 0x400129>, <DisassemblerInsn "cmp" for 0x40012b>, <DisassemblerInsn "mov" for 0x40012e>, <DisassemblerInsn "jg" for 0x400132>]'}, {'block_Idx': 118, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400670>, <DisassemblerInsn "jmp" for 0x400678>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004a9>, <DisassemblerInsn "mov" for 0x4004ae>, <DisassemblerInsn "mov" for 0x4004b1>, <DisassemblerInsn "cmp" for 0x4004b6>, <DisassemblerInsn "setne" for 0x4004b9>, <DisassemblerInsn "and" for 0x4004bc>, <DisassemblerInsn "movzx" for 0x4004be>, <DisassemblerInsn "mov" for 0x4004c1>, <DisassemblerInsn "mov" for 0x4004c6>, <DisassemblerInsn "jmp" for 0x4004cc>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40043e>, <DisassemblerInsn "xor" for 0x400443>, <DisassemblerInsn "cmp" for 0x400445>, <DisassemblerInsn "mov" for 0x40044c>, <DisassemblerInsn "je" for 0x400450>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400073>, <DisassemblerInsn "mov" for 0x400075>, <DisassemblerInsn "mov" for 0x40007a>, <DisassemblerInsn "mov" for 0x40007d>, <DisassemblerInsn "cmp" for 0x400082>, <DisassemblerInsn "jle" for 0x400086>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400366>, <DisassemblerInsn "cmp" for 0x40036b>, <DisassemblerInsn "jne" for 0x40036f>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40025e>, <DisassemblerInsn "mov" for 0x400262>, <DisassemblerInsn "call" for 0x400266>]'}, {'block_Idx': 136, 'blockInsts': '[<DisassemblerInsn "push" for 0x400940>, <DisassemblerInsn "mov" for 0x400941>, <DisassemblerInsn "mov" for 0x400945>, <DisassemblerInsn "add" for 0x400949>, <DisassemblerInsn "call" for 0x400950>]'}, {'block_Idx': 91, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40059f>, <DisassemblerInsn "mov" for 0x4005a4>, <DisassemblerInsn "jmp" for 0x4005ae>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001fd>, <DisassemblerInsn "and" for 0x400201>, <DisassemblerInsn "movzx" for 0x400203>, <DisassemblerInsn "mov" for 0x400206>, <DisassemblerInsn "mov" for 0x40020b>, <DisassemblerInsn "mov" for 0x400211>, <DisassemblerInsn "cmp" for 0x400216>, <DisassemblerInsn "jne" for 0x40021a>]'}, {'block_Idx': 146, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400330>]'}, {'block_Idx': 159, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008e4>, <DisassemblerInsn "call" for 0x4008e9>]'}, {'block_Idx': 138, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002fa>, <DisassemblerInsn "mov" for 0x4002ff>, <DisassemblerInsn "jmp" for 0x400306>]'}, {'block_Idx': 162, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40082b>, <DisassemblerInsn "mov" for 0x400830>, <DisassemblerInsn "mov" for 0x400835>, <DisassemblerInsn "mov" for 0x400838>, <DisassemblerInsn "mov" for 0x40083c>, <DisassemblerInsn "mov" for 0x400841>, <DisassemblerInsn "mov" for 0x400844>, <DisassemblerInsn "mov" for 0x400849>, <DisassemblerInsn "mov" for 0x40084d>, <DisassemblerInsn "cmp" for 0x400852>, <DisassemblerInsn "sete" for 0x400859>, <DisassemblerInsn "and" for 0x40085c>, <DisassemblerInsn "movzx" for 0x40085e>, <DisassemblerInsn "call" for 0x400862>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005e4>, <DisassemblerInsn "mov" for 0x4005e9>, <DisassemblerInsn "mov" for 0x4005f3>, <DisassemblerInsn "cmp" for 0x4005f8>, <DisassemblerInsn "jne" for 0x4005ff>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400550>, <DisassemblerInsn "and" for 0x400554>, <DisassemblerInsn "movzx" for 0x400556>, <DisassemblerInsn "mov" for 0x400559>, <DisassemblerInsn "mov" for 0x40055e>, <DisassemblerInsn "mov" for 0x400564>, <DisassemblerInsn "cmp" for 0x400569>, <DisassemblerInsn "je" for 0x400570>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001ae>, <DisassemblerInsn "cmp" for 0x4001b3>, <DisassemblerInsn "setne" for 0x4001ba>, <DisassemblerInsn "mov" for 0x4001bd>, <DisassemblerInsn "mov" for 0x4001c1>, <DisassemblerInsn "and" for 0x4001c5>, <DisassemblerInsn "movzx" for 0x4001c7>, <DisassemblerInsn "mov" for 0x4001ca>, <DisassemblerInsn "mov" for 0x4001cf>, <DisassemblerInsn "mov" for 0x4001d5>, <DisassemblerInsn "mov" for 0x4001da>, <DisassemblerInsn "mov" for 0x4001dd>, <DisassemblerInsn "mov" for 0x4001e2>, <DisassemblerInsn "cmp" for 0x4001e4>, <DisassemblerInsn "mov" for 0x4001e7>, <DisassemblerInsn "jne" for 0x4001eb>]'}, {'block_Idx': 112, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400334>, <DisassemblerInsn "mov" for 0x400339>, <DisassemblerInsn "mov" for 0x40033e>, <DisassemblerInsn "mov" for 0x400343>, <DisassemblerInsn "call" for 0x400346>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000b4>, <DisassemblerInsn "jmp" for 0x4000bc>]'}, {'block_Idx': 175, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400892>]'}, {'block_Idx': 106, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400731>, <DisassemblerInsn "mov" for 0x400736>, <DisassemblerInsn "mov" for 0x400739>, <DisassemblerInsn "mov" for 0x40073e>, <DisassemblerInsn "mov" for 0x400741>, <DisassemblerInsn "call" for 0x400746>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400176>, <DisassemblerInsn "mov" for 0x40017a>, <DisassemblerInsn "mov" for 0x40017e>, <DisassemblerInsn "mov" for 0x400182>, <DisassemblerInsn "mov" for 0x400186>, <DisassemblerInsn "and" for 0x40018a>, <DisassemblerInsn "movzx" for 0x40018c>, <DisassemblerInsn "mov" for 0x40018f>, <DisassemblerInsn "mov" for 0x400194>, <DisassemblerInsn "mov" for 0x40019a>, <DisassemblerInsn "mov" for 0x40019f>, <DisassemblerInsn "cmp" for 0x4001a1>, <DisassemblerInsn "mov" for 0x4001a8>, <DisassemblerInsn "jne" for 0x4001ac>]'}, {'block_Idx': 142, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400784>, <DisassemblerInsn "mov" for 0x400789>, <DisassemblerInsn "mov" for 0x40078e>, <DisassemblerInsn "mov" for 0x400791>, <DisassemblerInsn "mov" for 0x400796>, <DisassemblerInsn "mov" for 0x400799>, <DisassemblerInsn "mov" for 0x40079e>, <DisassemblerInsn "mov" for 0x4007a1>, <DisassemblerInsn "mov" for 0x4007a6>, <DisassemblerInsn "mov" for 0x4007aa>, <DisassemblerInsn "cmp" for 0x4007af>, <DisassemblerInsn "sete" for 0x4007b6>, <DisassemblerInsn "and" for 0x4007b9>, <DisassemblerInsn "movzx" for 0x4007bb>, <DisassemblerInsn "call" for 0x4007bf>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400282>, <DisassemblerInsn "call" for 0x400286>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400540>, <DisassemblerInsn "mov" for 0x400544>, <DisassemblerInsn "mov" for 0x400548>, <DisassemblerInsn "mov" for 0x40054c>, <DisassemblerInsn "mov" for 0x400550>, <DisassemblerInsn "and" for 0x400554>, <DisassemblerInsn "movzx" for 0x400556>, <DisassemblerInsn "mov" for 0x400559>, <DisassemblerInsn "mov" for 0x40055e>, <DisassemblerInsn "mov" for 0x400564>, <DisassemblerInsn "cmp" for 0x400569>, <DisassemblerInsn "je" for 0x400570>]'}, {'block_Idx': 99, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005cf>, <DisassemblerInsn "mov" for 0x4005d4>, <DisassemblerInsn "jmp" for 0x4005de>]'}, {'block_Idx': 133, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400776>, <DisassemblerInsn "cmp" for 0x40077b>, <DisassemblerInsn "je" for 0x400782>]'}, {'block_Idx': 156, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007c4>, <DisassemblerInsn "mov" for 0x4007c7>, <DisassemblerInsn "mov" for 0x4007cc>, <DisassemblerInsn "mov" for 0x4007d3>, <DisassemblerInsn "cmp" for 0x4007d8>, <DisassemblerInsn "jne" for 0x4007e0>]'}, {'block_Idx': 100, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005be>, <DisassemblerInsn "mov" for 0x4005c3>, <DisassemblerInsn "jmp" for 0x4005cd>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40015d>, <DisassemblerInsn "mov" for 0x400162>, <DisassemblerInsn "mov" for 0x400166>, <DisassemblerInsn "cmp" for 0x40016b>, <DisassemblerInsn "setne" for 0x40016f>, <DisassemblerInsn "mov" for 0x400172>, <DisassemblerInsn "mov" for 0x400176>, <DisassemblerInsn "mov" for 0x40017a>, <DisassemblerInsn "mov" for 0x40017e>, <DisassemblerInsn "mov" for 0x400182>, <DisassemblerInsn "mov" for 0x400186>, <DisassemblerInsn "and" for 0x40018a>, <DisassemblerInsn "movzx" for 0x40018c>, <DisassemblerInsn "mov" for 0x40018f>, <DisassemblerInsn "mov" for 0x400194>, <DisassemblerInsn "mov" for 0x40019a>, <DisassemblerInsn "mov" for 0x40019f>, <DisassemblerInsn "cmp" for 0x4001a1>, <DisassemblerInsn "mov" for 0x4001a8>, <DisassemblerInsn "jne" for 0x4001ac>]'}, {'block_Idx': 174, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400885>, <DisassemblerInsn "jmp" for 0x40088d>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003a0>, <DisassemblerInsn "mov" for 0x4003a2>, <DisassemblerInsn "mov" for 0x4003a7>, <DisassemblerInsn "mov" for 0x4003aa>, <DisassemblerInsn "cmp" for 0x4003af>, <DisassemblerInsn "je" for 0x4003b6>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400505>, <DisassemblerInsn "mov" for 0x40050a>, <DisassemblerInsn "cmp" for 0x40050c>, <DisassemblerInsn "mov" for 0x400513>, <DisassemblerInsn "jne" for 0x400517>]'}, {'block_Idx': 178, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400916>]'}, {'block_Idx': 130, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4002ec>, <DisassemblerInsn "je" for 0x4002f1>]'}, {'block_Idx': 173, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4008d4>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400134>, <DisassemblerInsn "xor" for 0x400139>, <DisassemblerInsn "cmp" for 0x40013b>, <DisassemblerInsn "mov" for 0x400142>, <DisassemblerInsn "jne" for 0x400146>]'}, {'block_Idx': 164, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4007ef>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000d3>, <DisassemblerInsn "mov" for 0x4000d8>, <DisassemblerInsn "mov" for 0x4000db>, <DisassemblerInsn "jmp" for 0x4000df>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003c6>, <DisassemblerInsn "cmp" for 0x4003cb>, <DisassemblerInsn "jne" for 0x4003d2>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003e6>, <DisassemblerInsn "mov" for 0x4003eb>, <DisassemblerInsn "call" for 0x4003ee>]'}, {'block_Idx': 144, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400314>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400093>, <DisassemblerInsn "mov" for 0x400098>, <DisassemblerInsn "mov" for 0x40009d>, <DisassemblerInsn "mov" for 0x4000a1>, <DisassemblerInsn "lea" for 0x4000a6>, <DisassemblerInsn "mov" for 0x4000ad>, <DisassemblerInsn "call" for 0x4000af>]'}, {'block_Idx': 172, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008ca>, <DisassemblerInsn "jmp" for 0x4008d2>]'}, {'block_Idx': 158, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400918>, <DisassemblerInsn "jmp" for 0x400920>]'}, {'block_Idx': 163, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007e2>, <DisassemblerInsn "jmp" for 0x4007ea>]'}, {'block_Idx': 140, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400316>, <DisassemblerInsn "mov" for 0x40031b>, <DisassemblerInsn "jmp" for 0x400322>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4005e2>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005b0>, <DisassemblerInsn "cmp" for 0x4005b5>, <DisassemblerInsn "je" for 0x4005bc>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004ce>, <DisassemblerInsn "mov" for 0x4004d3>, <DisassemblerInsn "mov" for 0x4004d6>, <DisassemblerInsn "cmp" for 0x4004db>, <DisassemblerInsn "setne" for 0x4004de>, <DisassemblerInsn "and" for 0x4004e1>, <DisassemblerInsn "movzx" for 0x4004e3>, <DisassemblerInsn "mov" for 0x4004e6>, <DisassemblerInsn "mov" for 0x4004eb>, <DisassemblerInsn "mov" for 0x4004f1>, <DisassemblerInsn "xor" for 0x4004f6>, <DisassemblerInsn "cmp" for 0x4004f8>, <DisassemblerInsn "mov" for 0x4004ff>, <DisassemblerInsn "jne" for 0x400503>]'}, {'block_Idx': 139, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4002f3>, <DisassemblerInsn "jne" for 0x4002f8>]'}, {'block_Idx': 121, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4002de>, <DisassemblerInsn "je" for 0x4002e3>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400393>, <DisassemblerInsn "mov" for 0x400398>, <DisassemblerInsn "call" for 0x40039b>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400004>, <DisassemblerInsn "mov" for 0x400009>, <DisassemblerInsn "mov" for 0x40000e>, <DisassemblerInsn "call" for 0x400012>]'}, {'block_Idx': 94, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40028b>, <DisassemblerInsn "jmp" for 0x40028f>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40029a>, <DisassemblerInsn "mov" for 0x40029e>, <DisassemblerInsn "mov" for 0x4002a2>, <DisassemblerInsn "cmp" for 0x4002a6>, <DisassemblerInsn "jg" for 0x4002ab>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c1>, <DisassemblerInsn "mov" for 0x4000c6>, <DisassemblerInsn "mov" for 0x4000c9>, <DisassemblerInsn "cmp" for 0x4000ce>, <DisassemblerInsn "jle" for 0x4000d1>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400220>, <DisassemblerInsn "cmp" for 0x400225>, <DisassemblerInsn "jne" for 0x40022c>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001c1>, <DisassemblerInsn "and" for 0x4001c5>, <DisassemblerInsn "movzx" for 0x4001c7>, <DisassemblerInsn "mov" for 0x4001ca>, <DisassemblerInsn "mov" for 0x4001cf>, <DisassemblerInsn "mov" for 0x4001d5>, <DisassemblerInsn "mov" for 0x4001da>, <DisassemblerInsn "mov" for 0x4001dd>, <DisassemblerInsn "mov" for 0x4001e2>, <DisassemblerInsn "cmp" for 0x4001e4>, <DisassemblerInsn "mov" for 0x4001e7>, <DisassemblerInsn "jne" for 0x4001eb>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40040b>, <DisassemblerInsn "cmp" for 0x400410>, <DisassemblerInsn "je" for 0x400417>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40017e>, <DisassemblerInsn "mov" for 0x400182>, <DisassemblerInsn "mov" for 0x400186>, <DisassemblerInsn "and" for 0x40018a>, <DisassemblerInsn "movzx" for 0x40018c>, <DisassemblerInsn "mov" for 0x40018f>, <DisassemblerInsn "mov" for 0x400194>, <DisassemblerInsn "mov" for 0x40019a>, <DisassemblerInsn "mov" for 0x40019f>, <DisassemblerInsn "cmp" for 0x4001a1>, <DisassemblerInsn "mov" for 0x4001a8>, <DisassemblerInsn "jne" for 0x4001ac>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400934>, <DisassemblerInsn "add" for 0x400938>, <DisassemblerInsn "ret" for 0x40093c>]'}, {'block_Idx': 152, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008d6>, <DisassemblerInsn "cmp" for 0x4008db>, <DisassemblerInsn "je" for 0x4008e2>]'}, {'block_Idx': 147, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400894>, <DisassemblerInsn "cmp" for 0x400899>, <DisassemblerInsn "je" for 0x4008a0>]'}, {'block_Idx': 129, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40034b>, <DisassemblerInsn "mov" for 0x400350>, <DisassemblerInsn "mov" for 0x400353>, <DisassemblerInsn "lea" for 0x400358>, <DisassemblerInsn "mov" for 0x40035f>, <DisassemblerInsn "call" for 0x400361>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400419>, <DisassemblerInsn "mov" for 0x40041e>, <DisassemblerInsn "mov" for 0x400421>, <DisassemblerInsn "cmp" for 0x400426>, <DisassemblerInsn "setne" for 0x400429>, <DisassemblerInsn "and" for 0x40042c>, <DisassemblerInsn "movzx" for 0x40042e>, <DisassemblerInsn "mov" for 0x400431>, <DisassemblerInsn "mov" for 0x400436>, <DisassemblerInsn "jmp" for 0x40043c>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400639>, <DisassemblerInsn "mov" for 0x40063c>, <DisassemblerInsn "mov" for 0x400641>, <DisassemblerInsn "xor" for 0x400644>, <DisassemblerInsn "lea" for 0x400646>, <DisassemblerInsn "call" for 0x40064d>]'}, {'block_Idx': 131, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4002e5>, <DisassemblerInsn "jne" for 0x4002ea>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40046b>, <DisassemblerInsn "and" for 0x40046f>, <DisassemblerInsn "movzx" for 0x400471>, <DisassemblerInsn "mov" for 0x400474>, <DisassemblerInsn "mov" for 0x400479>, <DisassemblerInsn "mov" for 0x40047f>, <DisassemblerInsn "cmp" for 0x400484>, <DisassemblerInsn "jne" for 0x40048b>]'}, {'block_Idx': 101, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4005e0>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400601>, <DisassemblerInsn "cmp" for 0x400606>, <DisassemblerInsn "je" for 0x40060d>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40024d>, <DisassemblerInsn "mov" for 0x400251>, <DisassemblerInsn "mov" for 0x400256>, <DisassemblerInsn "call" for 0x400259>]'}, {'block_Idx': 123, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400332>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400519>, <DisassemblerInsn "xor" for 0x40051e>, <DisassemblerInsn "cmp" for 0x400520>, <DisassemblerInsn "mov" for 0x400527>, <DisassemblerInsn "je" for 0x40052b>]'}, {'block_Idx': 84, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003f3>, <DisassemblerInsn "mov" for 0x4003f5>, <DisassemblerInsn "mov" for 0x4003fa>, <DisassemblerInsn "mov" for 0x4003fd>, <DisassemblerInsn "cmp" for 0x400402>, <DisassemblerInsn "jne" for 0x400409>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004f1>, <DisassemblerInsn "xor" for 0x4004f6>, <DisassemblerInsn "cmp" for 0x4004f8>, <DisassemblerInsn "mov" for 0x4004ff>, <DisassemblerInsn "jne" for 0x400503>]'}, {'block_Idx': 141, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007f1>, <DisassemblerInsn "cmp" for 0x4007f6>, <DisassemblerInsn "je" for 0x4007fd>]'}, {'block_Idx': 128, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400922>, <DisassemblerInsn "call" for 0x400927>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003fd>, <DisassemblerInsn "cmp" for 0x400402>, <DisassemblerInsn "jne" for 0x400409>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003b8>, <DisassemblerInsn "cmp" for 0x4003bd>, <DisassemblerInsn "jne" for 0x4003c4>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400580>, <DisassemblerInsn "mov" for 0x400585>, <DisassemblerInsn "jmp" for 0x40058f>]'}, {'block_Idx': 134, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400722>, <DisassemblerInsn "jmp" for 0x40072a>]'}, {'block_Idx': 151, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400322>]'}, {'block_Idx': 109, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400652>, <DisassemblerInsn "mov" for 0x400655>, <DisassemblerInsn "mov" for 0x40065a>, <DisassemblerInsn "mov" for 0x400661>, <DisassemblerInsn "cmp" for 0x400666>, <DisassemblerInsn "jne" for 0x40066e>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40060f>, <DisassemblerInsn "mov" for 0x400614>, <DisassemblerInsn "mov" for 0x400617>, <DisassemblerInsn "cmp" for 0x40061c>, <DisassemblerInsn "jle" for 0x40061f>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001ed>, <DisassemblerInsn "cmp" for 0x4001f2>, <DisassemblerInsn "setne" for 0x4001f6>, <DisassemblerInsn "mov" for 0x4001f9>, <DisassemblerInsn "mov" for 0x4001fd>, <DisassemblerInsn "and" for 0x400201>, <DisassemblerInsn "movzx" for 0x400203>, <DisassemblerInsn "mov" for 0x400206>, <DisassemblerInsn "mov" for 0x40020b>, <DisassemblerInsn "mov" for 0x400211>, <DisassemblerInsn "cmp" for 0x400216>, <DisassemblerInsn "jne" for 0x40021a>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400017>, <DisassemblerInsn "mov" for 0x400019>, <DisassemblerInsn "mov" for 0x40001e>, <DisassemblerInsn "mov" for 0x400021>, <DisassemblerInsn "cmp" for 0x400026>, <DisassemblerInsn "jle" for 0x40002a>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4003e1>, <DisassemblerInsn "jne" for 0x4003e4>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400548>, <DisassemblerInsn "mov" for 0x40054c>, <DisassemblerInsn "mov" for 0x400550>, <DisassemblerInsn "and" for 0x400554>, <DisassemblerInsn "movzx" for 0x400556>, <DisassemblerInsn "mov" for 0x400559>, <DisassemblerInsn "mov" for 0x40055e>, <DisassemblerInsn "mov" for 0x400564>, <DisassemblerInsn "cmp" for 0x400569>, <DisassemblerInsn "je" for 0x400570>]'}, {'block_Idx': 119, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40067d>]'}, {'block_Idx': 124, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40074b>, <DisassemblerInsn "mov" for 0x40074e>, <DisassemblerInsn "mov" for 0x400753>, <DisassemblerInsn "mov" for 0x40075a>, <DisassemblerInsn "cmp" for 0x40075f>, <DisassemblerInsn "jne" for 0x400767>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400148>, <DisassemblerInsn "mov" for 0x40014d>, <DisassemblerInsn "cmp" for 0x40014f>, <DisassemblerInsn "mov" for 0x400157>, <DisassemblerInsn "jne" for 0x40015b>]'}, {'block_Idx': 155, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400811>, <DisassemblerInsn "mov" for 0x400816>, <DisassemblerInsn "mov" for 0x400819>, <DisassemblerInsn "jmp" for 0x40081d>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40049b>, <DisassemblerInsn "cmp" for 0x4004a0>, <DisassemblerInsn "je" for 0x4004a7>]'}, {'block_Idx': 191, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40092c>, <DisassemblerInsn "mov" for 0x400930>, <DisassemblerInsn "mov" for 0x400934>, <DisassemblerInsn "add" for 0x400938>, <DisassemblerInsn "ret" for 0x40093c>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003d4>, <DisassemblerInsn "mov" for 0x4003d9>, <DisassemblerInsn "call" for 0x4003dc>]'}, {'block_Idx': 104, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002bb>, <DisassemblerInsn "cmp" for 0x4002c0>, <DisassemblerInsn "je" for 0x4002c7>]'}, {'block_Idx': 105, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40029e>, <DisassemblerInsn "mov" for 0x4002a2>, <DisassemblerInsn "cmp" for 0x4002a6>, <DisassemblerInsn "jg" for 0x4002ab>]'}, {'block_Idx': 154, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40081f>, <DisassemblerInsn "mov" for 0x400824>, <DisassemblerInsn "mov" for 0x400827>, <DisassemblerInsn "mov" for 0x40082b>, <DisassemblerInsn "mov" for 0x400830>, <DisassemblerInsn "mov" for 0x400835>, <DisassemblerInsn "mov" for 0x400838>, <DisassemblerInsn "mov" for 0x40083c>, <DisassemblerInsn "mov" for 0x400841>, <DisassemblerInsn "mov" for 0x400844>, <DisassemblerInsn "mov" for 0x400849>, <DisassemblerInsn "mov" for 0x40084d>, <DisassemblerInsn "cmp" for 0x400852>, <DisassemblerInsn "sete" for 0x400859>, <DisassemblerInsn "and" for 0x40085c>, <DisassemblerInsn "movzx" for 0x40085e>, <DisassemblerInsn "call" for 0x400862>]'}, {'block_Idx': 102, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005f3>, <DisassemblerInsn "cmp" for 0x4005f8>, <DisassemblerInsn "jne" for 0x4005ff>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400037>, <DisassemblerInsn "mov" for 0x40003c>, <DisassemblerInsn "mov" for 0x400041>, <DisassemblerInsn "mov" for 0x400045>, <DisassemblerInsn "lea" for 0x40004a>, <DisassemblerInsn "mov" for 0x400051>, <DisassemblerInsn "call" for 0x400053>]'}, {'block_Idx': 107, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006e6>, <DisassemblerInsn "mov" for 0x4006eb>, <DisassemblerInsn "mov" for 0x4006ee>, <DisassemblerInsn "mov" for 0x4006f3>, <DisassemblerInsn "xor" for 0x4006f6>, <DisassemblerInsn "lea" for 0x4006f8>, <DisassemblerInsn "call" for 0x4006ff>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40047f>, <DisassemblerInsn "cmp" for 0x400484>, <DisassemblerInsn "jne" for 0x40048b>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400065>, <DisassemblerInsn "mov" for 0x40006a>, <DisassemblerInsn "call" for 0x40006e>]'}, {'block_Idx': 111, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4005de>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400088>, <DisassemblerInsn "cmp" for 0x40008d>, <DisassemblerInsn "jle" for 0x400091>]'}, {'block_Idx': 153, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008a2>, <DisassemblerInsn "call" for 0x4008a7>]'}, {'block_Idx': 117, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006ab>, <DisassemblerInsn "mov" for 0x4006ae>, <DisassemblerInsn "mov" for 0x4006b3>, <DisassemblerInsn "mov" for 0x4006ba>, <DisassemblerInsn "cmp" for 0x4006bf>, <DisassemblerInsn "jne" for 0x4006c7>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40037e>, <DisassemblerInsn "mov" for 0x400380>, <DisassemblerInsn "mov" for 0x400385>, <DisassemblerInsn "mov" for 0x400388>, <DisassemblerInsn "cmp" for 0x40038d>, <DisassemblerInsn "jne" for 0x400391>]'}, {'block_Idx': 132, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400769>, <DisassemblerInsn "jmp" for 0x400771>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40048d>, <DisassemblerInsn "cmp" for 0x400492>, <DisassemblerInsn "jne" for 0x400499>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40067f>, <DisassemblerInsn "cmp" for 0x400684>, <DisassemblerInsn "je" for 0x40068b>]'}, {'block_Idx': 127, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4006d6>]'}, {'block_Idx': 177, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40090c>, <DisassemblerInsn "jmp" for 0x400914>]'}, {'block_Idx': 103, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002ad>, <DisassemblerInsn "mov" for 0x4002b2>, <DisassemblerInsn "jmp" for 0x4002b9>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400452>, <DisassemblerInsn "mov" for 0x400457>, <DisassemblerInsn "call" for 0x40045a>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400371>, <DisassemblerInsn "mov" for 0x400376>, <DisassemblerInsn "call" for 0x400379>]'}, {'block_Idx': 145, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400308>, <DisassemblerInsn "mov" for 0x40030d>, <DisassemblerInsn "jmp" for 0x400314>]'}, {'block_Idx': 190, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009e4>, <DisassemblerInsn "mov" for 0x4009e8>, <DisassemblerInsn "pop" for 0x4009f2>, <DisassemblerInsn "ret" for 0x4009f3>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400591>, <DisassemblerInsn "cmp" for 0x400596>, <DisassemblerInsn "je" for 0x40059d>]'}, {'block_Idx': 89, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400621>, <DisassemblerInsn "mov" for 0x400626>, <DisassemblerInsn "mov" for 0x400629>, <DisassemblerInsn "jmp" for 0x40062c>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400388>, <DisassemblerInsn "cmp" for 0x40038d>, <DisassemblerInsn "jne" for 0x400391>]'}, {'block_Idx': 167, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008ac>, <DisassemblerInsn "mov" for 0x4008af>, <DisassemblerInsn "mov" for 0x4008b4>, <DisassemblerInsn "mov" for 0x4008bb>, <DisassemblerInsn "cmp" for 0x4008c0>, <DisassemblerInsn "jne" for 0x4008c8>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400058>, <DisassemblerInsn "jmp" for 0x400060>]'}, {'block_Idx': 122, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400324>, <DisassemblerInsn "mov" for 0x400329>, <DisassemblerInsn "jmp" for 0x400330>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400278>, <DisassemblerInsn "mov" for 0x40027a>, <DisassemblerInsn "cmp" for 0x40027e>, <DisassemblerInsn "jle" for 0x400280>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000e1>, <DisassemblerInsn "mov" for 0x4000e6>, <DisassemblerInsn "mov" for 0x4000e9>, <DisassemblerInsn "mov" for 0x4000ed>, <DisassemblerInsn "mov" for 0x4000f1>, <DisassemblerInsn "mov" for 0x4000f6>, <DisassemblerInsn "mov" for 0x4000f9>, <DisassemblerInsn "mov" for 0x4000fe>, <DisassemblerInsn "mov" for 0x400101>, <DisassemblerInsn "cmp" for 0x400106>, <DisassemblerInsn "setg" for 0x400109>, <DisassemblerInsn "and" for 0x40010c>, <DisassemblerInsn "movzx" for 0x40010e>, <DisassemblerInsn "mov" for 0x400111>, <DisassemblerInsn "mov" for 0x400116>, <DisassemblerInsn "mov" for 0x40011c>, <DisassemblerInsn "mov" for 0x400121>, <DisassemblerInsn "mov" for 0x400124>, <DisassemblerInsn "mov" for 0x400129>, <DisassemblerInsn "cmp" for 0x40012b>, <DisassemblerInsn "mov" for 0x40012e>, <DisassemblerInsn "jg" for 0x400132>]'}, {'block_Idx': 125, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400704>, <DisassemblerInsn "mov" for 0x400707>, <DisassemblerInsn "mov" for 0x40070c>, <DisassemblerInsn "mov" for 0x400713>, <DisassemblerInsn "cmp" for 0x400718>, <DisassemblerInsn "jne" for 0x400720>]'}], 'cfg_block_detailed_info': [{'block_Idx': 32, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edi, dword ptr [rax + 0x10]>', '<call~~0x500010>']}, {'block_Idx': 96, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edi, dword ptr [rax + 0x78]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edx, dword ptr [rax + 0x28]>', '<xor~~esi, esi>', '<lea~~rcx, [rip + 0x1517]>', '<call~~0x500030>']}, {'block_Idx': 88, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x78]>', '<mov~~dword ptr [rsp], eax>', '<mov~~edi, dword ptr [rsp]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edx, dword ptr [rax + 0x28]>', '<xor~~esi, esi>', '<lea~~rcx, [rip + 0x1566]>', '<call~~0x500030>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x8c], 0>', '<je~~0x400366>']}, {'block_Idx': 135, 'blockInsts': ['<jmp~~0x400731>']}, {'block_Idx': 59, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], eax>', '<mov~~edi, dword ptr [rsp + 0x2c]>', '<call~~0x500018>']}, {'block_Idx': 126, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xffffffea>', '<jmp~~0x400922>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0xf0], 0>', '<je~~0x4003fd>']}, {'block_Idx': 65, 'blockInsts': ['<cmp~~eax, 0>', '<setne~~al>', '<xor~~al, 0xff>', '<mov~~byte ptr [rsp + 7], al>', '<mov~~al, byte ptr [rsp + 7]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x90], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x8c], 0>', '<jne~~0x4004a9>']}, {'block_Idx': 79, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x8c], 0>', '<setne~~al>', '<mov~~byte ptr [rsp + 4], al>', '<mov~~al, byte ptr [rsp + 4]>', '<mov~~byte ptr [rsp + 5], al>', '<mov~~al, byte ptr [rsp + 5]>', '<mov~~byte ptr [rsp + 6], al>', '<mov~~al, byte ptr [rsp + 6]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x98], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0xf0], 0>', '<je~~0x4005e4>']}, {'block_Idx': 113, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x28], 4>', '<jg~~0x400324>']}, {'block_Idx': 114, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x28], 8>', '<jmp~~0x400332>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0x2c]>', '<call~~0x500018>']}, {'block_Idx': 168, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rax + 0xc8], rcx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~qword ptr [rax + 0xc8], 0>', '<jne~~0x400892>']}, {'block_Idx': 148, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x90], 0>', '<je~~0x40081f>']}, {'block_Idx': 171, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rax + 0xd8], rcx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~qword ptr [rax + 0xd8], 0>', '<jne~~0x400916>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x1f]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x84], ecx>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~al, 1>', '<cmp~~dword ptr [rcx + 0x80], 0>', '<mov~~byte ptr [rsp + 0x1c], al>', '<jne~~0x4001c1>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x98], 0>', '<je~~0x400591>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x74], 0x20>', '<jle~~0x400065>']}, {'block_Idx': 95, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x94], 0>', '<je~~0x400731>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x7c], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x74]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<cmp~~eax, dword ptr [rcx + 0x78]>', '<setg~~al>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x80], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rax + 0x78]>', '<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~al, 1>', '<cmp~~ecx, dword ptr [rdx + 0x74]>', '<mov~~byte ptr [rsp + 0x1f], al>', '<jg~~0x400186>']}, {'block_Idx': 118, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xffffffea>', '<jmp~~0x400922>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x28]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<cmp~~eax, dword ptr [rcx + 0x20]>', '<setne~~al>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x94], ecx>', '<jmp~~0x4004f1>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x38]>', '<xor~~eax, eax>', '<cmp~~dword ptr [rcx + 0xf0], 0>', '<mov~~byte ptr [rsp + 7], al>', '<je~~0x40046b>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x78], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x78], 0>', '<jle~~0x400093>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x74], 1>', '<jne~~0x400388>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2c], eax>', '<mov~~edi, dword ptr [rsp + 0x30]>', '<call~~0x500018>']}, {'block_Idx': 136, 'blockInsts': ['<push~~rax>', '<mov~~qword ptr [rsp], rdi>', '<mov~~rdi, qword ptr [rsp]>', '<add~~rdi, 0xa0>', '<call~~0x500058>']}, {'block_Idx': 91, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0xf4], 2>', '<jmp~~0x4005e0>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x1b]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x8c], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x28], -1>', '<jne~~0x400366>']}, {'block_Idx': 146, 'blockInsts': ['<jmp~~0x400332>']}, {'block_Idx': 159, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x38]>', '<call~~0x500050>']}, {'block_Idx': 138, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x28], 9>', '<jmp~~0x400314>']}, {'block_Idx': 162, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x38]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~esi, dword ptr [rax + 0x20]>', '<mov~~edx, dword ptr [rsp + 0x24]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rax + 0x78]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~r8d, dword ptr [rax + 0x24]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0xf4], 4>', '<sete~~al>', '<and~~al, 1>', '<movzx~~r9d, al>', '<call~~0x500040>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0xf4], 0>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x98], 0>', '<jne~~0x40060f>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~al, byte ptr [rsp + 6]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x98], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0xf0], 0>', '<je~~0x4005e4>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x84], 0>', '<setne~~al>', '<mov~~byte ptr [rsp + 0x1c], al>', '<mov~~al, byte ptr [rsp + 0x1c]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x88], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rax + 0x14]>', '<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~al, 1>', '<cmp~~ecx, dword ptr [rdx + 0x24]>', '<mov~~byte ptr [rsp + 0x1b], al>', '<jne~~0x4001fd>']}, {'block_Idx': 112, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edi, dword ptr [rax + 0x28]>', '<call~~0x500020>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~dword ptr [rsp + 0x44], 0xffffffea>', '<jmp~~0x400934>']}, {'block_Idx': 175, 'blockInsts': ['<jmp~~0x400894>']}, {'block_Idx': 106, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edi, dword ptr [rax + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~esi, dword ptr [rax + 0x78]>', '<mov~~edx, 0x400>', '<call~~0x500038>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x1d]>', '<mov~~byte ptr [rsp + 0x1e], al>', '<mov~~al, byte ptr [rsp + 0x1e]>', '<mov~~byte ptr [rsp + 0x1f], al>', '<mov~~al, byte ptr [rsp + 0x1f]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x84], ecx>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~al, 1>', '<cmp~~dword ptr [rcx + 0x80], 0>', '<mov~~byte ptr [rsp + 0x1c], al>', '<jne~~0x4001c1>']}, {'block_Idx': 142, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x38]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~esi, dword ptr [rax + 0x28]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edx, dword ptr [rax + 0x10]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rax + 0x74]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~r8d, dword ptr [rax + 0x14]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0xf4], 2>', '<sete~~al>', '<and~~al, 1>', '<movzx~~r9d, al>', '<call~~0x500040>']}, {'block_Idx': 77, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0x30]>', '<call~~0x500018>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~al, byte ptr [rsp + 4]>', '<mov~~byte ptr [rsp + 5], al>', '<mov~~al, byte ptr [rsp + 5]>', '<mov~~byte ptr [rsp + 6], al>', '<mov~~al, byte ptr [rsp + 6]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x98], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0xf0], 0>', '<je~~0x4005e4>']}, {'block_Idx': 99, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0xf4], 3>', '<jmp~~0x4005e0>']}, {'block_Idx': 133, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x90], 0>', '<je~~0x4007f1>']}, {'block_Idx': 156, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rax + 0xc0], rcx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~qword ptr [rax + 0xc0], 0>', '<jne~~0x4007ef>']}, {'block_Idx': 100, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0xf4], 4>', '<jmp~~0x4005de>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<cmp~~rax, qword ptr [rcx + 0x18]>', '<setne~~al>', '<mov~~byte ptr [rsp + 0x1d], al>', '<mov~~al, byte ptr [rsp + 0x1d]>', '<mov~~byte ptr [rsp + 0x1e], al>', '<mov~~al, byte ptr [rsp + 0x1e]>', '<mov~~byte ptr [rsp + 0x1f], al>', '<mov~~al, byte ptr [rsp + 0x1f]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x84], ecx>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~al, 1>', '<cmp~~dword ptr [rcx + 0x80], 0>', '<mov~~byte ptr [rsp + 0x1c], al>', '<jne~~0x4001c1>']}, {'block_Idx': 174, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xfffffff4>', '<jmp~~0x400922>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x20], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0xf0], 0>', '<je~~0x4003fd>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~al, 1>', '<cmp~~dword ptr [rcx + 0x88], 0>', '<mov~~byte ptr [rsp + 5], al>', '<jne~~0x400548>']}, {'block_Idx': 178, 'blockInsts': ['<jmp~~0x400918>']}, {'block_Idx': 130, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x30], 8>', '<je~~0x4002fa>']}, {'block_Idx': 173, 'blockInsts': ['<jmp~~0x4008d6>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x38]>', '<xor~~eax, eax>', '<cmp~~dword ptr [rcx + 0x80], 0>', '<mov~~byte ptr [rsp + 0x1e], al>', '<jne~~0x40017e>']}, {'block_Idx': 164, 'blockInsts': ['<jmp~~0x4007f1>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x78]>', '<mov~~dword ptr [rsp + 0x20], eax>', '<jmp~~0x4000ed>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x8c], 0>', '<jne~~0x4003fd>']}, {'block_Idx': 69, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500010>']}, {'block_Idx': 144, 'blockInsts': ['<jmp~~0x400322>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x38]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rcx, qword ptr [rax + 0x18]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x1abe]>', '<mov~~al, 0>', '<call~~0x500008>']}, {'block_Idx': 172, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xfffffff4>', '<jmp~~0x400922>']}, {'block_Idx': 158, 'blockInsts': ['<mov~~dword ptr [rsp + 0x44], 0>', '<jmp~~0x400934>']}, {'block_Idx': 163, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xfffffff4>', '<jmp~~0x400922>']}, {'block_Idx': 140, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x28], 8>', '<jmp~~0x400330>']}, {'block_Idx': 92, 'blockInsts': ['<jmp~~0x4005f3>']}, {'block_Idx': 90, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x94], 0>', '<je~~0x4005cf>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<cmp~~eax, dword ptr [rcx + 0x20]>', '<setne~~al>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x94], ecx>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<xor~~eax, eax>', '<cmp~~dword ptr [rcx + 0x90], 0>', '<mov~~byte ptr [rsp + 6], al>', '<jne~~0x400550>']}, {'block_Idx': 139, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x2c], 8>', '<jne~~0x400308>']}, {'block_Idx': 121, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x30], 7>', '<je~~0x4002ec>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500010>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x48>', '<mov~~qword ptr [rsp + 0x38], rdi>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rdi, qword ptr [rax + 8]>', '<call~~0x500000>']}, {'block_Idx': 94, 'blockInsts': ['<mov~~dword ptr [rsp + 0x10], eax>', '<jmp~~0x40029e>']}, {'block_Idx': 93, 'blockInsts': ['<mov~~dword ptr [rsp + 0x10], eax>', '<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 0x28], eax>', '<cmp~~dword ptr [rsp + 0x28], 2>', '<jg~~0x4002bb>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x74]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<cmp~~eax, dword ptr [rcx + 0x78]>', '<jle~~0x4000e1>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x88], 0>', '<jne~~0x400240>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x1c]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x88], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rax + 0x14]>', '<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~al, 1>', '<cmp~~ecx, dword ptr [rdx + 0x24]>', '<mov~~byte ptr [rsp + 0x1b], al>', '<jne~~0x4001fd>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x88], 0>', '<je~~0x40043e>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x1e]>', '<mov~~byte ptr [rsp + 0x1f], al>', '<mov~~al, byte ptr [rsp + 0x1f]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x84], ecx>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~al, 1>', '<cmp~~dword ptr [rcx + 0x80], 0>', '<mov~~byte ptr [rsp + 0x1c], al>', '<jne~~0x4001c1>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x44]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 152, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x88], 0>', '<je~~0x400918>']}, {'block_Idx': 147, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x8c], 0>', '<je~~0x4008d6>']}, {'block_Idx': 129, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 8]>', '<mov~~rcx, rax>', '<mov~~esi, 0x30>', '<lea~~rdx, [rip + 0x1830]>', '<mov~~al, 0>', '<call~~0x500008>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<cmp~~eax, dword ptr [rcx + 0x28]>', '<setne~~al>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x90], ecx>', '<jmp~~0x40047f>']}, {'block_Idx': 98, 'blockInsts': ['<mov~~edi, dword ptr [rsp]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edx, dword ptr [rax + 0x28]>', '<xor~~esi, esi>', '<lea~~rcx, [rip + 0x1566]>', '<call~~0x500030>']}, {'block_Idx': 131, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x2c], 7>', '<jne~~0x400316>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~al, byte ptr [rsp + 7]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x90], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x8c], 0>', '<jne~~0x4004a9>']}, {'block_Idx': 101, 'blockInsts': ['<jmp~~0x4005e2>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x90], 0>', '<je~~0x40067f>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~dword ptr [rsp + 0x30], eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500010>']}, {'block_Idx': 123, 'blockInsts': ['<jmp~~0x400334>']}, {'block_Idx': 71, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x38]>', '<xor~~eax, eax>', '<cmp~~dword ptr [rcx + 0xf0], 0>', '<mov~~byte ptr [rsp + 4], al>', '<je~~0x400540>']}, {'block_Idx': 84, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x28], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x8c], 0>', '<jne~~0x400419>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x38]>', '<xor~~eax, eax>', '<cmp~~dword ptr [rcx + 0x90], 0>', '<mov~~byte ptr [rsp + 6], al>', '<jne~~0x400550>']}, {'block_Idx': 141, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x94], 0>', '<je~~0x400894>']}, {'block_Idx': 128, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x38]>', '<call~~0x400940>']}, {'block_Idx': 42, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x8c], 0>', '<jne~~0x400419>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x88], 0>', '<jne~~0x4003fd>']}, {'block_Idx': 83, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0xf4], 1>', '<jmp~~0x4005e2>']}, {'block_Idx': 134, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xffffffea>', '<jmp~~0x400922>']}, {'block_Idx': 151, 'blockInsts': ['<jmp~~0x400330>']}, {'block_Idx': 109, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rax + 0xa0], rcx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~qword ptr [rax + 0xa0], 0>', '<jne~~0x40067d>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x74]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<cmp~~eax, dword ptr [rcx + 0x78]>', '<jle~~0x40062e>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x4c], 0>', '<setne~~al>', '<mov~~byte ptr [rsp + 0x1b], al>', '<mov~~al, byte ptr [rsp + 0x1b]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x8c], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x28], -1>', '<jne~~0x400366>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x74], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x74], 0>', '<jle~~0x400037>']}, {'block_Idx': 63, 'blockInsts': ['<cmp~~eax, 0>', '<jne~~0x4003fd>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~al, byte ptr [rsp + 5]>', '<mov~~byte ptr [rsp + 6], al>', '<mov~~al, byte ptr [rsp + 6]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x98], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0xf0], 0>', '<je~~0x4005e4>']}, {'block_Idx': 119, 'blockInsts': ['<jmp~~0x40067f>']}, {'block_Idx': 124, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rax + 0xb8], rcx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~qword ptr [rax + 0xb8], 0>', '<jne~~0x400776>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~al, 1>', '<cmp~~qword ptr [rcx + 0xe8], 0>', '<mov~~byte ptr [rsp + 0x1d], al>', '<jne~~0x400176>']}, {'block_Idx': 155, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x28]>', '<mov~~dword ptr [rsp + 0x24], eax>', '<jmp~~0x40082b>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x90], 0>', '<je~~0x4004ce>']}, {'block_Idx': 191, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<mov~~dword ptr [rsp + 0x44], eax>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500028>']}, {'block_Idx': 104, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x88], 0>', '<je~~0x4002d7>']}, {'block_Idx': 105, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 0x28], eax>', '<cmp~~dword ptr [rsp + 0x28], 2>', '<jg~~0x4002bb>']}, {'block_Idx': 154, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x10]>', '<mov~~dword ptr [rsp + 0x24], eax>', '<mov~~rdi, qword ptr [rsp + 0x38]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~esi, dword ptr [rax + 0x20]>', '<mov~~edx, dword ptr [rsp + 0x24]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rax + 0x78]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~r8d, dword ptr [rax + 0x24]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0xf4], 4>', '<sete~~al>', '<and~~al, 1>', '<movzx~~r9d, al>', '<call~~0x500040>']}, {'block_Idx': 102, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x98], 0>', '<jne~~0x40060f>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x38]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rcx, qword ptr [rax + 8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x1af7]>', '<mov~~al, 0>', '<call~~0x500008>']}, {'block_Idx': 107, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edi, dword ptr [rax + 0x78]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edx, dword ptr [rax + 0x20]>', '<xor~~esi, esi>', '<lea~~rcx, [rip + 0x14d2]>', '<call~~0x500030>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x8c], 0>', '<jne~~0x4004a9>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rdi, qword ptr [rax + 0x18]>', '<call~~0x500000>']}, {'block_Idx': 111, 'blockInsts': ['<jmp~~0x4005e0>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x78], 0x20>', '<jle~~0x4000c1>']}, {'block_Idx': 153, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x38]>', '<call~~0x500048>']}, {'block_Idx': 117, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~qword ptr [rax + 0xa8], 0>', '<jne~~0x4006d6>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x10], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x78], 1>', '<jne~~0x4003aa>']}, {'block_Idx': 132, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xfffffff4>', '<jmp~~0x400922>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x88], 0>', '<jne~~0x4004a9>']}, {'block_Idx': 87, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x8c], 0>', '<je~~0x4006d8>']}, {'block_Idx': 127, 'blockInsts': ['<jmp~~0x4006d8>']}, {'block_Idx': 177, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xfffffff4>', '<jmp~~0x400922>']}, {'block_Idx': 103, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x28], 6>', '<jmp~~0x400334>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500028>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edi, dword ptr [rax + 0x10]>', '<call~~0x500010>']}, {'block_Idx': 145, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x28], 7>', '<jmp~~0x400322>']}, {'block_Idx': 190, 'blockInsts': ['<mov~~rax, qword ptr [rsp]>', '<mov~~dword ptr [rax + 0xf0], 0>', '<pop~~rax>', '<ret~~>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x90], 0>', '<je~~0x4005b0>']}, {'block_Idx': 89, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x74]>', '<mov~~dword ptr [rsp], eax>', '<jmp~~0x400639>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x78], 1>', '<jne~~0x4003aa>']}, {'block_Idx': 167, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rax + 0xd0], rcx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~qword ptr [rax + 0xd0], 0>', '<jne~~0x4008d4>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~dword ptr [rsp + 0x44], 0xffffffea>', '<jmp~~0x400934>']}, {'block_Idx': 122, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x28], 9>', '<jmp~~0x400332>']}, {'block_Idx': 70, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0x14]>', '<cmp~~eax, ecx>', '<jle~~0x400291>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x74]>', '<mov~~dword ptr [rsp + 0x20], eax>', '<mov~~ecx, dword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x7c], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x74]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<cmp~~eax, dword ptr [rcx + 0x78]>', '<setg~~al>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x80], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rax + 0x78]>', '<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~al, 1>', '<cmp~~ecx, dword ptr [rdx + 0x74]>', '<mov~~byte ptr [rsp + 0x1f], al>', '<jg~~0x400186>']}, {'block_Idx': 125, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rax + 0xb0], rcx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~qword ptr [rax + 0xb0], 0>', '<jne~~0x40072f>']}], 'cfg_edge_info': [(25, 23), (72, 73), (73, 81), (162, 168), (88, 109), (133, 141), (119, 87), (29, 32), (167, 173), (102, 80), (34, 37), (28, 30), (74, 82), (140, 146), (26, 23), (32, 39), (177, 128), (50, 54), (90, 99), (141, 147), (126, 128), (156, 163), (46, 50), (159, 171), (23, 27), (2, 4), (95, 107), (130, 138), (79, 74), (94, 105), (135, 106), (62, 67), (24, 28), (71, 79), (18, 21), (33, 40), (81, 89), (96, 117), (147, 153), (124, 133), (154, 168), (70, 77), (65, 56), (51, 57), (14, 17), (80, 81), (77, 94), (132, 128), (138, 144), (148, 154), (27, 29), (15, 9), (127, 95), (30, 34), (105, 104), (134, 128), (59, 70), (171, 177), (82, 90), (125, 134), (22, 23), (21, 25), (48, 42), (0, 2), (175, 147), (40, 38), (84, 47), (49, 59), (104, 114), (121, 130), (155, 162), (131, 140), (16, 19), (117, 126), (93, 104), (55, 65), (42, 47), (73, 80), (145, 151), (20, 19), (29, 31), (46, 47), (43, 48), (38, 43), (63, 42), (66, 68), (112, 129), (7, 9), (25, 24), (56, 57), (72, 74), (99, 101), (67, 72), (31, 30), (102, 81), (80, 87), (152, 158), (95, 106), (113, 121), (79, 73), (106, 124), (164, 141), (71, 78), (168, 175), (147, 152), (3, 7), (4, 6), (51, 56), (158, 9), (14, 16), (31, 32), (78, 74), (156, 164), (23, 28), (103, 112), (87, 95), (118, 128), (10, 12), (130, 139), (45, 43), (19, 24), (30, 33), (105, 103), (109, 119), (56, 61), (98, 109), (40, 37), (167, 172), (84, 46), (104, 113), (17, 20), (27, 30), (28, 29), (54, 57), (172, 128), (47, 51), (93, 103), (68, 74), (63, 69), (6, 10), (82, 91), (20, 18), (171, 178), (12, 14), (21, 26), (133, 142), (69, 84), (121, 131), (2, 3), (122, 123), (11, 15), (74, 83), (100, 111), (117, 127), (128, 191), (128, 136), (24, 27), (26, 24), (139, 145), (4, 3), (50, 55), (81, 88), (67, 71), (178, 158), (90, 100), (124, 132), (141, 148), (70, 76), (123, 112), (107, 125), (142, 156), (89, 98), (91, 101), (173, 152), (129, 30), (37, 45), (168, 174), (139, 138), (43, 42), (18, 22), (61, 57), (78, 73), (61, 66), (52, 63), (65, 57), (152, 159), (113, 122), (10, 11), (57, 62), (153, 167), (131, 130), (45, 42), (19, 23), (114, 123), (148, 155), (92, 102), (109, 118), (76, 93), (174, 128), (16, 18), (12, 11), (42, 46), (190, 191), (125, 135), (87, 96), (22, 24), (163, 128), (39, 49), (48, 52), (66, 67), (54, 56), (83, 92), (68, 73)], 'cdg_edge_info': [(25, 23), (4, 9), (73, 81), (121, 112), (125, 128), (133, 141), (29, 32), (147, 167), (102, 80), (74, 82), (48, 63), (29, 59), (113, 138), (31, 129), (79, 81), (26, 23), (90, 99), (141, 147), (156, 163), (46, 50), (171, 191), (23, 27), (2, 4), (95, 107), (31, 49), (141, 168), (95, 125), (79, 74), (70, 105), (29, 70), (24, 28), (71, 79), (18, 21), (81, 89), (147, 153), (124, 133), (81, 98), (70, 77), (63, 84), (65, 56), (14, 17), (80, 81), (40, 45), (156, 128), (131, 138), (148, 154), (27, 29), (130, 30), (105, 104), (167, 152), (82, 90), (171, 177), (125, 134), (21, 25), (84, 47), (104, 114), (131, 140), (10, 15), (167, 191), (117, 126), (93, 104), (73, 80), (12, 15), (43, 48), (46, 47), (29, 31), (125, 191), (29, 49), (70, 93), (25, 24), (56, 57), (117, 128), (109, 87), (168, 191), (50, 65), (31, 39), (80, 87), (152, 158), (95, 106), (113, 121), (113, 130), (95, 124), (79, 73), (30, 40), (147, 152), (4, 6), (130, 112), (14, 16), (31, 32), (171, 128), (23, 28), (87, 95), (168, 147), (130, 139), (10, 12), (133, 156), (45, 43), (30, 33), (125, 106), (171, 158), (105, 103), (56, 61), (29, 129), (109, 128), (125, 124), (124, 128), (40, 37), (12, 30), (167, 172), (84, 46), (104, 113), (121, 129), (152, 171), (28, 29), (93, 103), (156, 141), (63, 69), (152, 9), (82, 91), (171, 178), (20, 18), (12, 14), (4, 10), (21, 26), (133, 142), (121, 131), (2, 3), (73, 109), (167, 128), (74, 83), (31, 112), (117, 191), (24, 27), (26, 24), (139, 145), (4, 3), (50, 55), (81, 88), (67, 71), (90, 100), (124, 132), (141, 148), (70, 76), (79, 109), (171, 9), (10, 9), (70, 94), (156, 191), (31, 59), (148, 162), (139, 138), (168, 174), (12, 9), (61, 57), (168, 128), (61, 66), (79, 102), (65, 57), (130, 129), (152, 159), (117, 95), (113, 122), (10, 11), (2, 7), (131, 130), (148, 155), (109, 118), (80, 109), (31, 70), (16, 18), (109, 191), (12, 11), (4, 7), (124, 191), (87, 96), (14, 20), (29, 39), (48, 52), (66, 67), (2, 9), (29, 112), (87, 117), (121, 30)], 'ddg_edge_info': [(55, 57), (96, 95), (129, 43), (55, 66), (18, 26), (10, 162), (106, 148), (47, 80), (147, 167), (109, 159), (0, 14), (6, 48), (109, 168), (0, 23), (69, 95), (28, 94), (6, 57), (6, 66), (140, 155), (6, 84), (33, 47), (33, 56), (0, 117), (83, 142), (138, 96), (159, 128), (55, 61), (47, 66), (55, 79), (96, 117), (109, 154), (69, 81), (6, 43), (77, 94), (69, 90), (76, 138), (77, 103), (6, 52), (69, 99), (6, 61), (77, 112), (49, 139), (172, 191), (52, 46), (10, 40), (0, 103), (162, 174), (79, 167), (0, 112), (145, 112), (155, 162), (55, 56), (28, 39), (55, 65), (28, 48), (47, 61), (28, 57), (6, 29), (69, 67), (6, 47), (109, 167), (6, 56), (10, 17), (6, 65), (33, 37), (0, 89), (142, 191), (0, 98), (153, 191), (145, 98), (122, 96), (0, 107), (24, 46), (0, 125), (106, 124), (52, 162), (6, 24), (69, 71), (6, 33), (109, 153), (69, 80), (109, 162), (69, 89), (145, 57), (153, 159), (10, 12), (142, 159), (69, 98), (39, 57), (28, 155), (39, 66), (0, 84), (0, 102), (134, 191), (114, 96), (103, 96), (17, 20), (37, 96), (129, 90), (28, 47), (6, 10), (88, 98), (129, 99), (69, 57), (69, 66), (6, 28), (21, 26), (24, 162), (6, 37), (109, 148), (126, 191), (6, 46), (69, 84), (142, 154), (79, 125), (39, 52), (142, 163), (47, 154), (153, 172), (0, 79), (0, 88), (39, 70), (162, 159), (2, 30), (52, 98), (40, 142), (52, 107), (0, 106), (84, 96), (37, 82), (37, 91), (11, 191), (109, 107), (65, 82), (37, 100), (2, 142), (109, 125), (6, 14), (168, 174), (69, 61), (6, 23), (140, 112), (6, 32), (98, 106), (79, 102), (69, 79), (145, 47), (0, 56), (118, 191), (153, 158), (142, 158), (0, 65), (153, 167), (0, 74), (142, 167), (2, 16), (0, 83), (52, 102), (33, 98), (33, 107), (129, 71), (37, 95), (129, 80), (129, 89), (69, 47), (140, 98), (129, 98), (69, 56), (6, 18), (129, 107), (24, 152), (69, 65), (142, 153), (142, 162), (79, 124), (0, 69), (52, 79), (0, 87), (52, 88), (33, 84), (32, 39), (52, 106), (33, 102), (129, 57), (37, 81), (129, 66), (37, 90), (138, 142), (109, 106), (37, 99), (129, 84), (32, 142), (55, 107), (79, 74), (109, 124), (98, 87), (98, 96), (71, 79), (0, 37), (0, 46), (142, 148), (39, 37), (0, 55), (100, 142), (77, 140), (6, 98), (47, 148), (0, 73), (52, 74), (6, 107), (52, 83), (33, 79), (33, 88), (105, 113), (73, 142), (45, 71), (33, 106), (37, 67), (0, 167), (129, 52), (129, 61), (49, 59), (129, 79), (168, 159), (129, 88), (55, 102), (138, 155), (69, 46), (24, 142), (0, 32), (0, 50), (153, 152), (23, 24), (122, 57), (6, 102), (52, 69), (33, 65), (112, 129), (33, 74), (52, 87), (10, 81), (33, 83), (52, 96), (45, 57), (122, 142), (0, 153), (45, 66), (140, 47), (0, 162), (129, 47), (37, 71), (129, 56), (0, 171), (109, 87), (37, 80), (129, 65), (39, 162), (106, 152), (59, 77), (109, 96), (129, 74), (55, 88), (96, 126), (55, 106), (0, 18), (159, 191), (28, 98), (0, 27), (77, 121), (6, 79), (0, 45), (77, 130), (6, 88), (52, 55), (77, 139), (6, 106), (52, 73), (132, 191), (52, 82), (52, 91), (15, 191), (39, 121), (33, 87), (45, 52), (2, 81), (37, 48), (0, 148), (39, 130), (129, 33), (37, 57), (114, 142), (103, 142), (122, 155), (37, 66), (106, 147), (55, 74), (55, 83), (0, 4), (159, 177), (28, 84), (65, 133), (28, 93), (0, 31), (6, 74), (99, 162), (0, 40), (20, 18), (6, 83), (52, 50), (33, 46), (33, 55), (79, 171), (33, 73), (39, 107), (33, 82), (37, 43), (66, 79), (7, 191), (93, 105), (37, 52), (0, 152), (129, 37), (37, 61), (106, 133), (129, 46), (26, 24), (84, 142), (129, 55), (114, 155), (106, 142), (103, 155), (96, 107), (59, 76), (55, 87), (107, 125), (28, 70), (89, 98), (55, 96), (107, 134), (70, 94), (28, 79), (0, 17), (109, 171), (0, 26), (69, 107), (6, 87), (77, 138), (33, 50), (6, 96), (52, 63), (162, 191), (0, 138), (37, 47), (0, 147), (37, 56), (0, 156), (106, 128), (129, 50), (55, 73), (24, 104), (106, 155), (55, 82), (28, 65), (159, 158), (76, 114), (84, 155), (55, 91), (0, 3), (0, 12), (6, 55), (0, 21), (40, 66), (69, 102), (6, 73), (6, 82), (33, 45), (6, 91), (162, 168), (0, 124), (39, 106), (0, 133), (91, 162), (0, 142), (106, 132), (26, 23), (138, 112), (106, 141), (96, 106), (107, 106), (47, 82), (159, 171), (109, 152), (28, 87), (6, 50), (0, 16), (69, 88), (76, 145), (10, 20), (69, 106), (57, 141), (33, 40), (0, 128), (24, 67), (138, 98), (83, 162), (59, 70), (76, 104), (6, 27), (76, 113), (109, 147), (0, 2), (76, 122), (69, 74), (109, 156), (69, 83), (40, 47), (6, 45), (76, 131), (98, 128), (77, 105), (142, 171), (2, 20), (39, 69), (162, 158), (0, 96), (162, 167), (145, 96), (138, 57), (0, 114), (122, 112), (32, 66), (55, 67), (129, 102), (109, 133), (57, 95), (28, 59), (109, 142), (6, 31), (168, 191), (50, 65), (6, 40), (69, 87), (69, 96), (39, 55), (0, 82), (162, 153), (25, 26), (0, 91), (0, 100), (162, 171), (122, 98), (3, 7), (0, 109), (40, 154), (103, 112), (114, 112), (45, 107), (28, 45), (57, 90), (69, 55), (6, 17), (129, 106), (76, 103), (28, 63), (6, 26), (76, 112), (109, 128), (69, 73), (98, 109), (109, 155), (98, 118), (69, 82), (142, 152), (69, 91), (10, 14), (39, 59), (39, 77), (0, 95), (138, 47), (0, 104), (154, 162), (32, 47), (103, 98), (24, 43), (114, 98), (37, 89), (28, 31), (65, 80), (37, 98), (129, 83), (28, 40), (37, 107), (28, 49), (6, 12), (69, 50), (6, 21), (98, 95), (109, 141), (6, 30), (79, 109), (142, 147), (142, 156), (103, 57), (114, 57), (2, 14), (0, 81), (162, 152), (0, 90), (32, 33), (0, 99), (52, 100), (24, 29), (33, 96), (84, 98), (45, 79), (24, 56), (65, 66), (37, 84), (45, 106), (168, 158), (37, 102), (129, 87), (109, 118), (168, 167), (49, 76), (140, 96), (76, 93), (6, 16), (32, 154), (129, 96), (6, 25), (47, 133), (122, 47), (28, 129), (47, 142), (0, 67), (39, 49), (28, 147), (162, 147), (84, 57), (52, 95), (33, 91), (16, 20), (33, 100), (10, 107), (65, 61), (37, 79), (109, 95), (37, 88), (129, 73), (168, 153), (129, 82), (37, 106), (129, 91), (6, 11), (168, 171), (129, 100), (6, 20), (153, 128), (142, 128), (79, 117), (142, 155), (103, 47), (114, 47), (2, 4), (28, 142), (0, 71), (0, 80), (52, 81), (52, 90), (94, 105), (52, 99), (24, 28), (33, 95), (2, 89), (45, 69), (37, 65), (37, 74), (37, 83), (55, 100), (109, 117), (129, 95), (106, 191), (0, 30), (0, 39), (98, 107), (142, 141), (0, 48), (20, 26), (0, 57), (162, 128), (6, 100), (52, 67), (163, 191), (0, 66), (84, 47), (100, 162), (33, 81), (33, 90), (10, 88), (45, 55), (145, 142), (33, 99), (10, 106), (129, 45), (67, 79), (129, 63), (73, 162), (37, 87), (106, 159), (168, 152), (55, 95), (129, 81), (70, 93), (66, 141), (28, 96), (0, 25), (0, 43), (0, 52), (0, 61), (6, 95), (52, 71), (33, 67), (52, 80), (52, 89), (45, 50), (37, 46), (37, 55), (129, 40), (0, 155), (174, 191), (145, 155), (37, 73), (106, 154), (129, 67), (55, 81), (168, 147), (107, 128), (96, 128), (55, 90), (55, 99), (27, 28), (0, 11), (45, 162), (0, 20), (76, 140), (99, 142), (0, 29), (77, 114), (6, 81), (0, 47), (6, 90), (52, 57), (6, 99), (52, 66), (33, 71), (52, 84), (152, 171), (33, 80), (0, 141), (33, 89), (37, 50), (10, 96), (66, 95), (0, 159), (0, 168), (177, 191), (106, 158), (0, 6), (11, 15), (0, 24), (6, 67), (0, 33), (33, 48), (52, 61), (77, 145), (33, 57), (33, 66), (73, 102), (37, 45), (129, 30), (0, 145), (66, 90), (0, 154), (129, 48), (168, 128), (55, 71), (140, 57), (158, 191), (106, 153), (55, 80), (106, 162), (55, 89), (76, 121), (55, 98), (0, 10), (76, 130), (76, 139), (77, 104), (140, 142), (69, 100), (65, 148), (49, 131), (77, 113), (0, 28), (6, 71), (77, 122), (6, 80), (52, 47), (77, 131), (33, 43), (6, 89), (52, 56), (3, 191), (33, 52), (52, 65), (33, 61), (0, 122), (91, 142), (0, 140)]}]}
{'avresample_open': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'subq\t$0x48, %rsp'}, {'instIndex': 1, 'instruction': 'movq\t%rdi, 0x38(%rsp)'}, {'instIndex': 2, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 3, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 4, 'instruction': 'callq\tav_get_channel_layout_nb_channels@PLT'}, {'instIndex': 5, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 6, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 7, 'instruction': 'movl\t%ecx, 0x74(%rax)'}, {'instIndex': 8, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 9, 'instruction': 'cmpl\t$0, 0x74(%rax)'}, {'instIndex': 10, 'instruction': 'jle\t.LBB0_2'}, {'instIndex': 11, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 12, 'instruction': 'cmpl\t$0x20, 0x74(%rax)'}, {'instIndex': 13, 'instruction': 'jle\t.LBB0_3'}]}]}
The case of compiler clang with optimization O0.
Patched source code file: utils.c
Patched function: 1---int avresample_open 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_before/O0/utils.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_before/O0/utils.s---avresample_open---before
function id: 0
function flag: True
There are 550 instructions for function: avresample_open in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '36', 'end': 46}, 'before': {'start': '36', 'end': 41}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'subq\t$0x48, %rsp'}, {'instIndex': 1, 'instruction': 'movq\t%rdi, 0x38(%rsp)'}, {'instIndex': 2, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 3, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 4, 'instruction': 'callq\tav_get_channel_layout_nb_channels@PLT'}, {'instIndex': 5, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 6, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 7, 'instruction': 'movl\t%ecx, 0x74(%rax)'}, {'instIndex': 8, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 9, 'instruction': 'cmpl\t$0, 0x74(%rax)'}, {'instIndex': 10, 'instruction': 'jle\t.LBB0_2'}, {'instIndex': 11, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 12, 'instruction': 'cmpl\t$0x20, 0x74(%rax)'}, {'instIndex': 13, 'instruction': 'jle\t.LBB0_3'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_before/O0/utils.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_before/O0/utils.o---before
The extraction of function: avresample_open
Analyzing the binaries to generate subCFGs from patched function ...
It has 449 nodes and 740 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 550 instructions in binary file.
[4194304, 4194327, 4194348]
The execution time of patched subCFG information extraction via angr: 0:00:00.669429
{'avresample_open': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40002c>, <DisassemblerInsn "cmp" for 0x400031>, <DisassemblerInsn "jle" for 0x400035>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400037>, <DisassemblerInsn "mov" for 0x40003c>, <DisassemblerInsn "mov" for 0x400041>, <DisassemblerInsn "mov" for 0x400045>, <DisassemblerInsn "lea" for 0x40004a>, <DisassemblerInsn "mov" for 0x400051>, <DisassemblerInsn "call" for 0x400053>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400065>, <DisassemblerInsn "mov" for 0x40006a>, <DisassemblerInsn "call" for 0x40006e>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400004>, <DisassemblerInsn "mov" for 0x400009>, <DisassemblerInsn "mov" for 0x40000e>, <DisassemblerInsn "call" for 0x400012>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400017>, <DisassemblerInsn "mov" for 0x400019>, <DisassemblerInsn "mov" for 0x40001e>, <DisassemblerInsn "mov" for 0x400021>, <DisassemblerInsn "cmp" for 0x400026>, <DisassemblerInsn "jle" for 0x40002a>]'}], 'cfg_block_detailed_info': [{'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x74], 0x20>', '<jle~~0x400065>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x38]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rcx, qword ptr [rax + 8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x1af7]>', '<mov~~al, 0>', '<call~~0x500008>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rdi, qword ptr [rax + 0x18]>', '<call~~0x500000>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x48>', '<mov~~qword ptr [rsp + 0x38], rdi>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rdi, qword ptr [rax + 8]>', '<call~~0x500000>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x74], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x74], 0>', '<jle~~0x400037>']}], 'cfg_edge_info': [(0, 1), (1, 2), (3, 2), (1, 3), (3, 5)]}]}
{'avresample_open': [4194304, 4194327, 4194348]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_before/O0/utils.o---before
The extraction of function: avresample_open
[4194304, 4194327, 4194348]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 192 nodes and 302 edges in CFGEmulated.
It has 190 nodes and 453 edges in CDG.
It has 2817 nodes and 3870 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194304, 4194327, 4194348]
{4194304, 4195841, 4196355, 4195339, 4195855, 4196369, 4194327, 4195353, 4196383, 4194848, 4195873, 4196395, 4194348, 4195886, 4194862, 4194359, 4195897, 4195390, 4194880, 4194893, 4195410, 4195922, 4194392, 4194910, 4195423, 4194405, 4196455, 4194923, 4195952, 4194419, 4194936, 4195967, 4194946, 4196485, 4194440, 4194955, 4195469, 4195981, 4194961, 4194451, 4196500, 4194970, 4195483, 4194974, 4196514, 4195497, 4196011, 4196524, 4194989, 4194484, 4195003, 4194497, 4195017, 4196041, 4196554, 4195534, 4194515, 4196566, 4195031, 4196056, 4195038, 4194529, 4196580, 4195045, 4196070, 4195052, 4194541, 4196590, 4195059, 4195066, 4196100, 4195589, 4195080, 4196620, 4196630, 4195094, 4196632, 4195609, 4196642, 4196130, 4195108, 4196652, 4195629, 4196145, 4196660, 4194612, 4195124, 4194632, 4196171, 4195147, 4194653, 4195174, 4196201, 4195185, 4195698, 4194678, 4196214, 4195198, 4195712, 4196228, 4195729, 4195219, 4195743, 4195232, 4194734, 4195760, 4195256, 4195774, 4194753, 4196292, 4195270, 4195791, 4195284, 4195297, 4196322, 4195812, 4195302, 4194797, 4196337, 4195315, 4195827, 4194813}
[32, 96, 88, 31, 135, 59, 126, 38, 65, 79, 113, 114, 76, 168, 148, 171, 19, 74, 4, 95, 20, 118, 57, 50, 10, 30, 49, 136, 91, 28, 146, 159, 138, 162, 73, 68, 23, 112, 15, 175, 106, 26, 142, 77, 78, 99, 133, 156, 100, 25, 174, 45, 67, 178, 130, 173, 18, 164, 17, 48, 69, 144, 11, 172, 158, 163, 140, 92, 90, 66, 139, 121, 37, 0, 94, 93, 14, 29, 24, 46, 22, 9, 152, 147, 129, 47, 98, 131, 54, 101, 80, 39, 123, 71, 84, 62, 141, 128, 42, 43, 83, 134, 151, 109, 81, 27, 2, 63, 72, 119, 124, 21, 155, 61, 191, 52, 104, 105, 154, 102, 3, 107, 51, 6, 111, 12, 153, 117, 40, 132, 56, 87, 127, 177, 103, 55, 33, 145, 190, 82, 89, 34, 167, 7, 122, 70, 16, 125]
The execution time of patched slicing information extraction via angr: 0:00:38.150398
{'avresample_open': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400240>, <DisassemblerInsn "mov" for 0x400245>, <DisassemblerInsn "call" for 0x400248>]'}, {'block_Idx': 96, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40068d>, <DisassemblerInsn "mov" for 0x400692>, <DisassemblerInsn "mov" for 0x400695>, <DisassemblerInsn "mov" for 0x40069a>, <DisassemblerInsn "xor" for 0x40069d>, <DisassemblerInsn "lea" for 0x40069f>, <DisassemblerInsn "call" for 0x4006a6>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40062e>, <DisassemblerInsn "mov" for 0x400633>, <DisassemblerInsn "mov" for 0x400636>, <DisassemblerInsn "mov" for 0x400639>, <DisassemblerInsn "mov" for 0x40063c>, <DisassemblerInsn "mov" for 0x400641>, <DisassemblerInsn "xor" for 0x400644>, <DisassemblerInsn "lea" for 0x400646>, <DisassemblerInsn "call" for 0x40064d>]'}, {'block_Idx': 31, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40022e>, <DisassemblerInsn "cmp" for 0x400233>, <DisassemblerInsn "je" for 0x40023a>]'}, {'block_Idx': 135, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40072f>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40026b>, <DisassemblerInsn "mov" for 0x40026f>, <DisassemblerInsn "call" for 0x400273>]'}, {'block_Idx': 126, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006c9>, <DisassemblerInsn "jmp" for 0x4006d1>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003aa>, <DisassemblerInsn "cmp" for 0x4003af>, <DisassemblerInsn "je" for 0x4003b6>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40045f>, <DisassemblerInsn "setne" for 0x400462>, <DisassemblerInsn "xor" for 0x400465>, <DisassemblerInsn "mov" for 0x400467>, <DisassemblerInsn "mov" for 0x40046b>, <DisassemblerInsn "and" for 0x40046f>, <DisassemblerInsn "movzx" for 0x400471>, <DisassemblerInsn "mov" for 0x400474>, <DisassemblerInsn "mov" for 0x400479>, <DisassemblerInsn "mov" for 0x40047f>, <DisassemblerInsn "cmp" for 0x400484>, <DisassemblerInsn "jne" for 0x40048b>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40052d>, <DisassemblerInsn "cmp" for 0x400532>, <DisassemblerInsn "setne" for 0x400539>, <DisassemblerInsn "mov" for 0x40053c>, <DisassemblerInsn "mov" for 0x400540>, <DisassemblerInsn "mov" for 0x400544>, <DisassemblerInsn "mov" for 0x400548>, <DisassemblerInsn "mov" for 0x40054c>, <DisassemblerInsn "mov" for 0x400550>, <DisassemblerInsn "and" for 0x400554>, <DisassemblerInsn "movzx" for 0x400556>, <DisassemblerInsn "mov" for 0x400559>, <DisassemblerInsn "mov" for 0x40055e>, <DisassemblerInsn "mov" for 0x400564>, <DisassemblerInsn "cmp" for 0x400569>, <DisassemblerInsn "je" for 0x400570>]'}, {'block_Idx': 113, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4002d7>, <DisassemblerInsn "jg" for 0x4002dc>]'}, {'block_Idx': 114, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002c9>, <DisassemblerInsn "mov" for 0x4002ce>, <DisassemblerInsn "jmp" for 0x4002d5>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400291>, <DisassemblerInsn "call" for 0x400295>]'}, {'block_Idx': 168, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400867>, <DisassemblerInsn "mov" for 0x40086a>, <DisassemblerInsn "mov" for 0x40086f>, <DisassemblerInsn "mov" for 0x400876>, <DisassemblerInsn "cmp" for 0x40087b>, <DisassemblerInsn "jne" for 0x400883>]'}, {'block_Idx': 148, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400803>, <DisassemblerInsn "cmp" for 0x400808>, <DisassemblerInsn "je" for 0x40080f>]'}, {'block_Idx': 171, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008ee>, <DisassemblerInsn "mov" for 0x4008f1>, <DisassemblerInsn "mov" for 0x4008f6>, <DisassemblerInsn "mov" for 0x4008fd>, <DisassemblerInsn "cmp" for 0x400902>, <DisassemblerInsn "jne" for 0x40090a>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400186>, <DisassemblerInsn "and" for 0x40018a>, <DisassemblerInsn "movzx" for 0x40018c>, <DisassemblerInsn "mov" for 0x40018f>, <DisassemblerInsn "mov" for 0x400194>, <DisassemblerInsn "mov" for 0x40019a>, <DisassemblerInsn "mov" for 0x40019f>, <DisassemblerInsn "cmp" for 0x4001a1>, <DisassemblerInsn "mov" for 0x4001a8>, <DisassemblerInsn "jne" for 0x4001ac>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400572>, <DisassemblerInsn "cmp" for 0x400577>, <DisassemblerInsn "je" for 0x40057e>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40002c>, <DisassemblerInsn "cmp" for 0x400031>, <DisassemblerInsn "jle" for 0x400035>]'}, {'block_Idx': 95, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006d8>, <DisassemblerInsn "cmp" for 0x4006dd>, <DisassemblerInsn "je" for 0x4006e4>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000ed>, <DisassemblerInsn "mov" for 0x4000f1>, <DisassemblerInsn "mov" for 0x4000f6>, <DisassemblerInsn "mov" for 0x4000f9>, <DisassemblerInsn "mov" for 0x4000fe>, <DisassemblerInsn "mov" for 0x400101>, <DisassemblerInsn "cmp" for 0x400106>, <DisassemblerInsn "setg" for 0x400109>, <DisassemblerInsn "and" for 0x40010c>, <DisassemblerInsn "movzx" for 0x40010e>, <DisassemblerInsn "mov" for 0x400111>, <DisassemblerInsn "mov" for 0x400116>, <DisassemblerInsn "mov" for 0x40011c>, <DisassemblerInsn "mov" for 0x400121>, <DisassemblerInsn "mov" for 0x400124>, <DisassemblerInsn "mov" for 0x400129>, <DisassemblerInsn "cmp" for 0x40012b>, <DisassemblerInsn "mov" for 0x40012e>, <DisassemblerInsn "jg" for 0x400132>]'}, {'block_Idx': 118, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400670>, <DisassemblerInsn "jmp" for 0x400678>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004a9>, <DisassemblerInsn "mov" for 0x4004ae>, <DisassemblerInsn "mov" for 0x4004b1>, <DisassemblerInsn "cmp" for 0x4004b6>, <DisassemblerInsn "setne" for 0x4004b9>, <DisassemblerInsn "and" for 0x4004bc>, <DisassemblerInsn "movzx" for 0x4004be>, <DisassemblerInsn "mov" for 0x4004c1>, <DisassemblerInsn "mov" for 0x4004c6>, <DisassemblerInsn "jmp" for 0x4004cc>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40043e>, <DisassemblerInsn "xor" for 0x400443>, <DisassemblerInsn "cmp" for 0x400445>, <DisassemblerInsn "mov" for 0x40044c>, <DisassemblerInsn "je" for 0x400450>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400073>, <DisassemblerInsn "mov" for 0x400075>, <DisassemblerInsn "mov" for 0x40007a>, <DisassemblerInsn "mov" for 0x40007d>, <DisassemblerInsn "cmp" for 0x400082>, <DisassemblerInsn "jle" for 0x400086>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400366>, <DisassemblerInsn "cmp" for 0x40036b>, <DisassemblerInsn "jne" for 0x40036f>]'}, {'block_Idx': 49, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40025e>, <DisassemblerInsn "mov" for 0x400262>, <DisassemblerInsn "call" for 0x400266>]'}, {'block_Idx': 136, 'blockInsts': '[<DisassemblerInsn "push" for 0x400940>, <DisassemblerInsn "mov" for 0x400941>, <DisassemblerInsn "mov" for 0x400945>, <DisassemblerInsn "add" for 0x400949>, <DisassemblerInsn "call" for 0x400950>]'}, {'block_Idx': 91, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40059f>, <DisassemblerInsn "mov" for 0x4005a4>, <DisassemblerInsn "jmp" for 0x4005ae>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001fd>, <DisassemblerInsn "and" for 0x400201>, <DisassemblerInsn "movzx" for 0x400203>, <DisassemblerInsn "mov" for 0x400206>, <DisassemblerInsn "mov" for 0x40020b>, <DisassemblerInsn "mov" for 0x400211>, <DisassemblerInsn "cmp" for 0x400216>, <DisassemblerInsn "jne" for 0x40021a>]'}, {'block_Idx': 146, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400330>]'}, {'block_Idx': 159, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008e4>, <DisassemblerInsn "call" for 0x4008e9>]'}, {'block_Idx': 138, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002fa>, <DisassemblerInsn "mov" for 0x4002ff>, <DisassemblerInsn "jmp" for 0x400306>]'}, {'block_Idx': 162, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40082b>, <DisassemblerInsn "mov" for 0x400830>, <DisassemblerInsn "mov" for 0x400835>, <DisassemblerInsn "mov" for 0x400838>, <DisassemblerInsn "mov" for 0x40083c>, <DisassemblerInsn "mov" for 0x400841>, <DisassemblerInsn "mov" for 0x400844>, <DisassemblerInsn "mov" for 0x400849>, <DisassemblerInsn "mov" for 0x40084d>, <DisassemblerInsn "cmp" for 0x400852>, <DisassemblerInsn "sete" for 0x400859>, <DisassemblerInsn "and" for 0x40085c>, <DisassemblerInsn "movzx" for 0x40085e>, <DisassemblerInsn "call" for 0x400862>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005e4>, <DisassemblerInsn "mov" for 0x4005e9>, <DisassemblerInsn "mov" for 0x4005f3>, <DisassemblerInsn "cmp" for 0x4005f8>, <DisassemblerInsn "jne" for 0x4005ff>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400550>, <DisassemblerInsn "and" for 0x400554>, <DisassemblerInsn "movzx" for 0x400556>, <DisassemblerInsn "mov" for 0x400559>, <DisassemblerInsn "mov" for 0x40055e>, <DisassemblerInsn "mov" for 0x400564>, <DisassemblerInsn "cmp" for 0x400569>, <DisassemblerInsn "je" for 0x400570>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001ae>, <DisassemblerInsn "cmp" for 0x4001b3>, <DisassemblerInsn "setne" for 0x4001ba>, <DisassemblerInsn "mov" for 0x4001bd>, <DisassemblerInsn "mov" for 0x4001c1>, <DisassemblerInsn "and" for 0x4001c5>, <DisassemblerInsn "movzx" for 0x4001c7>, <DisassemblerInsn "mov" for 0x4001ca>, <DisassemblerInsn "mov" for 0x4001cf>, <DisassemblerInsn "mov" for 0x4001d5>, <DisassemblerInsn "mov" for 0x4001da>, <DisassemblerInsn "mov" for 0x4001dd>, <DisassemblerInsn "mov" for 0x4001e2>, <DisassemblerInsn "cmp" for 0x4001e4>, <DisassemblerInsn "mov" for 0x4001e7>, <DisassemblerInsn "jne" for 0x4001eb>]'}, {'block_Idx': 112, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400334>, <DisassemblerInsn "mov" for 0x400339>, <DisassemblerInsn "mov" for 0x40033e>, <DisassemblerInsn "mov" for 0x400343>, <DisassemblerInsn "call" for 0x400346>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000b4>, <DisassemblerInsn "jmp" for 0x4000bc>]'}, {'block_Idx': 175, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400892>]'}, {'block_Idx': 106, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400731>, <DisassemblerInsn "mov" for 0x400736>, <DisassemblerInsn "mov" for 0x400739>, <DisassemblerInsn "mov" for 0x40073e>, <DisassemblerInsn "mov" for 0x400741>, <DisassemblerInsn "call" for 0x400746>]'}, {'block_Idx': 26, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400176>, <DisassemblerInsn "mov" for 0x40017a>, <DisassemblerInsn "mov" for 0x40017e>, <DisassemblerInsn "mov" for 0x400182>, <DisassemblerInsn "mov" for 0x400186>, <DisassemblerInsn "and" for 0x40018a>, <DisassemblerInsn "movzx" for 0x40018c>, <DisassemblerInsn "mov" for 0x40018f>, <DisassemblerInsn "mov" for 0x400194>, <DisassemblerInsn "mov" for 0x40019a>, <DisassemblerInsn "mov" for 0x40019f>, <DisassemblerInsn "cmp" for 0x4001a1>, <DisassemblerInsn "mov" for 0x4001a8>, <DisassemblerInsn "jne" for 0x4001ac>]'}, {'block_Idx': 142, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400784>, <DisassemblerInsn "mov" for 0x400789>, <DisassemblerInsn "mov" for 0x40078e>, <DisassemblerInsn "mov" for 0x400791>, <DisassemblerInsn "mov" for 0x400796>, <DisassemblerInsn "mov" for 0x400799>, <DisassemblerInsn "mov" for 0x40079e>, <DisassemblerInsn "mov" for 0x4007a1>, <DisassemblerInsn "mov" for 0x4007a6>, <DisassemblerInsn "mov" for 0x4007aa>, <DisassemblerInsn "cmp" for 0x4007af>, <DisassemblerInsn "sete" for 0x4007b6>, <DisassemblerInsn "and" for 0x4007b9>, <DisassemblerInsn "movzx" for 0x4007bb>, <DisassemblerInsn "call" for 0x4007bf>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400282>, <DisassemblerInsn "call" for 0x400286>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400540>, <DisassemblerInsn "mov" for 0x400544>, <DisassemblerInsn "mov" for 0x400548>, <DisassemblerInsn "mov" for 0x40054c>, <DisassemblerInsn "mov" for 0x400550>, <DisassemblerInsn "and" for 0x400554>, <DisassemblerInsn "movzx" for 0x400556>, <DisassemblerInsn "mov" for 0x400559>, <DisassemblerInsn "mov" for 0x40055e>, <DisassemblerInsn "mov" for 0x400564>, <DisassemblerInsn "cmp" for 0x400569>, <DisassemblerInsn "je" for 0x400570>]'}, {'block_Idx': 99, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005cf>, <DisassemblerInsn "mov" for 0x4005d4>, <DisassemblerInsn "jmp" for 0x4005de>]'}, {'block_Idx': 133, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400776>, <DisassemblerInsn "cmp" for 0x40077b>, <DisassemblerInsn "je" for 0x400782>]'}, {'block_Idx': 156, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007c4>, <DisassemblerInsn "mov" for 0x4007c7>, <DisassemblerInsn "mov" for 0x4007cc>, <DisassemblerInsn "mov" for 0x4007d3>, <DisassemblerInsn "cmp" for 0x4007d8>, <DisassemblerInsn "jne" for 0x4007e0>]'}, {'block_Idx': 100, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005be>, <DisassemblerInsn "mov" for 0x4005c3>, <DisassemblerInsn "jmp" for 0x4005cd>]'}, {'block_Idx': 25, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40015d>, <DisassemblerInsn "mov" for 0x400162>, <DisassemblerInsn "mov" for 0x400166>, <DisassemblerInsn "cmp" for 0x40016b>, <DisassemblerInsn "setne" for 0x40016f>, <DisassemblerInsn "mov" for 0x400172>, <DisassemblerInsn "mov" for 0x400176>, <DisassemblerInsn "mov" for 0x40017a>, <DisassemblerInsn "mov" for 0x40017e>, <DisassemblerInsn "mov" for 0x400182>, <DisassemblerInsn "mov" for 0x400186>, <DisassemblerInsn "and" for 0x40018a>, <DisassemblerInsn "movzx" for 0x40018c>, <DisassemblerInsn "mov" for 0x40018f>, <DisassemblerInsn "mov" for 0x400194>, <DisassemblerInsn "mov" for 0x40019a>, <DisassemblerInsn "mov" for 0x40019f>, <DisassemblerInsn "cmp" for 0x4001a1>, <DisassemblerInsn "mov" for 0x4001a8>, <DisassemblerInsn "jne" for 0x4001ac>]'}, {'block_Idx': 174, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400885>, <DisassemblerInsn "jmp" for 0x40088d>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003a0>, <DisassemblerInsn "mov" for 0x4003a2>, <DisassemblerInsn "mov" for 0x4003a7>, <DisassemblerInsn "mov" for 0x4003aa>, <DisassemblerInsn "cmp" for 0x4003af>, <DisassemblerInsn "je" for 0x4003b6>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400505>, <DisassemblerInsn "mov" for 0x40050a>, <DisassemblerInsn "cmp" for 0x40050c>, <DisassemblerInsn "mov" for 0x400513>, <DisassemblerInsn "jne" for 0x400517>]'}, {'block_Idx': 178, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400916>]'}, {'block_Idx': 130, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4002ec>, <DisassemblerInsn "je" for 0x4002f1>]'}, {'block_Idx': 173, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4008d4>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400134>, <DisassemblerInsn "xor" for 0x400139>, <DisassemblerInsn "cmp" for 0x40013b>, <DisassemblerInsn "mov" for 0x400142>, <DisassemblerInsn "jne" for 0x400146>]'}, {'block_Idx': 164, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4007ef>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000d3>, <DisassemblerInsn "mov" for 0x4000d8>, <DisassemblerInsn "mov" for 0x4000db>, <DisassemblerInsn "jmp" for 0x4000df>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003c6>, <DisassemblerInsn "cmp" for 0x4003cb>, <DisassemblerInsn "jne" for 0x4003d2>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003e6>, <DisassemblerInsn "mov" for 0x4003eb>, <DisassemblerInsn "call" for 0x4003ee>]'}, {'block_Idx': 144, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400314>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400093>, <DisassemblerInsn "mov" for 0x400098>, <DisassemblerInsn "mov" for 0x40009d>, <DisassemblerInsn "mov" for 0x4000a1>, <DisassemblerInsn "lea" for 0x4000a6>, <DisassemblerInsn "mov" for 0x4000ad>, <DisassemblerInsn "call" for 0x4000af>]'}, {'block_Idx': 172, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008ca>, <DisassemblerInsn "jmp" for 0x4008d2>]'}, {'block_Idx': 158, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400918>, <DisassemblerInsn "jmp" for 0x400920>]'}, {'block_Idx': 163, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007e2>, <DisassemblerInsn "jmp" for 0x4007ea>]'}, {'block_Idx': 140, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400316>, <DisassemblerInsn "mov" for 0x40031b>, <DisassemblerInsn "jmp" for 0x400322>]'}, {'block_Idx': 92, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4005e2>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005b0>, <DisassemblerInsn "cmp" for 0x4005b5>, <DisassemblerInsn "je" for 0x4005bc>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004ce>, <DisassemblerInsn "mov" for 0x4004d3>, <DisassemblerInsn "mov" for 0x4004d6>, <DisassemblerInsn "cmp" for 0x4004db>, <DisassemblerInsn "setne" for 0x4004de>, <DisassemblerInsn "and" for 0x4004e1>, <DisassemblerInsn "movzx" for 0x4004e3>, <DisassemblerInsn "mov" for 0x4004e6>, <DisassemblerInsn "mov" for 0x4004eb>, <DisassemblerInsn "mov" for 0x4004f1>, <DisassemblerInsn "xor" for 0x4004f6>, <DisassemblerInsn "cmp" for 0x4004f8>, <DisassemblerInsn "mov" for 0x4004ff>, <DisassemblerInsn "jne" for 0x400503>]'}, {'block_Idx': 139, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4002f3>, <DisassemblerInsn "jne" for 0x4002f8>]'}, {'block_Idx': 121, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4002de>, <DisassemblerInsn "je" for 0x4002e3>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400393>, <DisassemblerInsn "mov" for 0x400398>, <DisassemblerInsn "call" for 0x40039b>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400004>, <DisassemblerInsn "mov" for 0x400009>, <DisassemblerInsn "mov" for 0x40000e>, <DisassemblerInsn "call" for 0x400012>]'}, {'block_Idx': 94, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40028b>, <DisassemblerInsn "jmp" for 0x40028f>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40029a>, <DisassemblerInsn "mov" for 0x40029e>, <DisassemblerInsn "mov" for 0x4002a2>, <DisassemblerInsn "cmp" for 0x4002a6>, <DisassemblerInsn "jg" for 0x4002ab>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c1>, <DisassemblerInsn "mov" for 0x4000c6>, <DisassemblerInsn "mov" for 0x4000c9>, <DisassemblerInsn "cmp" for 0x4000ce>, <DisassemblerInsn "jle" for 0x4000d1>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400220>, <DisassemblerInsn "cmp" for 0x400225>, <DisassemblerInsn "jne" for 0x40022c>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001c1>, <DisassemblerInsn "and" for 0x4001c5>, <DisassemblerInsn "movzx" for 0x4001c7>, <DisassemblerInsn "mov" for 0x4001ca>, <DisassemblerInsn "mov" for 0x4001cf>, <DisassemblerInsn "mov" for 0x4001d5>, <DisassemblerInsn "mov" for 0x4001da>, <DisassemblerInsn "mov" for 0x4001dd>, <DisassemblerInsn "mov" for 0x4001e2>, <DisassemblerInsn "cmp" for 0x4001e4>, <DisassemblerInsn "mov" for 0x4001e7>, <DisassemblerInsn "jne" for 0x4001eb>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40040b>, <DisassemblerInsn "cmp" for 0x400410>, <DisassemblerInsn "je" for 0x400417>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40017e>, <DisassemblerInsn "mov" for 0x400182>, <DisassemblerInsn "mov" for 0x400186>, <DisassemblerInsn "and" for 0x40018a>, <DisassemblerInsn "movzx" for 0x40018c>, <DisassemblerInsn "mov" for 0x40018f>, <DisassemblerInsn "mov" for 0x400194>, <DisassemblerInsn "mov" for 0x40019a>, <DisassemblerInsn "mov" for 0x40019f>, <DisassemblerInsn "cmp" for 0x4001a1>, <DisassemblerInsn "mov" for 0x4001a8>, <DisassemblerInsn "jne" for 0x4001ac>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400934>, <DisassemblerInsn "add" for 0x400938>, <DisassemblerInsn "ret" for 0x40093c>]'}, {'block_Idx': 152, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008d6>, <DisassemblerInsn "cmp" for 0x4008db>, <DisassemblerInsn "je" for 0x4008e2>]'}, {'block_Idx': 147, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400894>, <DisassemblerInsn "cmp" for 0x400899>, <DisassemblerInsn "je" for 0x4008a0>]'}, {'block_Idx': 129, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40034b>, <DisassemblerInsn "mov" for 0x400350>, <DisassemblerInsn "mov" for 0x400353>, <DisassemblerInsn "lea" for 0x400358>, <DisassemblerInsn "mov" for 0x40035f>, <DisassemblerInsn "call" for 0x400361>]'}, {'block_Idx': 47, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400419>, <DisassemblerInsn "mov" for 0x40041e>, <DisassemblerInsn "mov" for 0x400421>, <DisassemblerInsn "cmp" for 0x400426>, <DisassemblerInsn "setne" for 0x400429>, <DisassemblerInsn "and" for 0x40042c>, <DisassemblerInsn "movzx" for 0x40042e>, <DisassemblerInsn "mov" for 0x400431>, <DisassemblerInsn "mov" for 0x400436>, <DisassemblerInsn "jmp" for 0x40043c>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400639>, <DisassemblerInsn "mov" for 0x40063c>, <DisassemblerInsn "mov" for 0x400641>, <DisassemblerInsn "xor" for 0x400644>, <DisassemblerInsn "lea" for 0x400646>, <DisassemblerInsn "call" for 0x40064d>]'}, {'block_Idx': 131, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4002e5>, <DisassemblerInsn "jne" for 0x4002ea>]'}, {'block_Idx': 54, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40046b>, <DisassemblerInsn "and" for 0x40046f>, <DisassemblerInsn "movzx" for 0x400471>, <DisassemblerInsn "mov" for 0x400474>, <DisassemblerInsn "mov" for 0x400479>, <DisassemblerInsn "mov" for 0x40047f>, <DisassemblerInsn "cmp" for 0x400484>, <DisassemblerInsn "jne" for 0x40048b>]'}, {'block_Idx': 101, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4005e0>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400601>, <DisassemblerInsn "cmp" for 0x400606>, <DisassemblerInsn "je" for 0x40060d>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40024d>, <DisassemblerInsn "mov" for 0x400251>, <DisassemblerInsn "mov" for 0x400256>, <DisassemblerInsn "call" for 0x400259>]'}, {'block_Idx': 123, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400332>]'}, {'block_Idx': 71, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400519>, <DisassemblerInsn "xor" for 0x40051e>, <DisassemblerInsn "cmp" for 0x400520>, <DisassemblerInsn "mov" for 0x400527>, <DisassemblerInsn "je" for 0x40052b>]'}, {'block_Idx': 84, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003f3>, <DisassemblerInsn "mov" for 0x4003f5>, <DisassemblerInsn "mov" for 0x4003fa>, <DisassemblerInsn "mov" for 0x4003fd>, <DisassemblerInsn "cmp" for 0x400402>, <DisassemblerInsn "jne" for 0x400409>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004f1>, <DisassemblerInsn "xor" for 0x4004f6>, <DisassemblerInsn "cmp" for 0x4004f8>, <DisassemblerInsn "mov" for 0x4004ff>, <DisassemblerInsn "jne" for 0x400503>]'}, {'block_Idx': 141, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007f1>, <DisassemblerInsn "cmp" for 0x4007f6>, <DisassemblerInsn "je" for 0x4007fd>]'}, {'block_Idx': 128, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400922>, <DisassemblerInsn "call" for 0x400927>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003fd>, <DisassemblerInsn "cmp" for 0x400402>, <DisassemblerInsn "jne" for 0x400409>]'}, {'block_Idx': 43, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003b8>, <DisassemblerInsn "cmp" for 0x4003bd>, <DisassemblerInsn "jne" for 0x4003c4>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400580>, <DisassemblerInsn "mov" for 0x400585>, <DisassemblerInsn "jmp" for 0x40058f>]'}, {'block_Idx': 134, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400722>, <DisassemblerInsn "jmp" for 0x40072a>]'}, {'block_Idx': 151, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400322>]'}, {'block_Idx': 109, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400652>, <DisassemblerInsn "mov" for 0x400655>, <DisassemblerInsn "mov" for 0x40065a>, <DisassemblerInsn "mov" for 0x400661>, <DisassemblerInsn "cmp" for 0x400666>, <DisassemblerInsn "jne" for 0x40066e>]'}, {'block_Idx': 81, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40060f>, <DisassemblerInsn "mov" for 0x400614>, <DisassemblerInsn "mov" for 0x400617>, <DisassemblerInsn "cmp" for 0x40061c>, <DisassemblerInsn "jle" for 0x40061f>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4001ed>, <DisassemblerInsn "cmp" for 0x4001f2>, <DisassemblerInsn "setne" for 0x4001f6>, <DisassemblerInsn "mov" for 0x4001f9>, <DisassemblerInsn "mov" for 0x4001fd>, <DisassemblerInsn "and" for 0x400201>, <DisassemblerInsn "movzx" for 0x400203>, <DisassemblerInsn "mov" for 0x400206>, <DisassemblerInsn "mov" for 0x40020b>, <DisassemblerInsn "mov" for 0x400211>, <DisassemblerInsn "cmp" for 0x400216>, <DisassemblerInsn "jne" for 0x40021a>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400017>, <DisassemblerInsn "mov" for 0x400019>, <DisassemblerInsn "mov" for 0x40001e>, <DisassemblerInsn "mov" for 0x400021>, <DisassemblerInsn "cmp" for 0x400026>, <DisassemblerInsn "jle" for 0x40002a>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4003e1>, <DisassemblerInsn "jne" for 0x4003e4>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400548>, <DisassemblerInsn "mov" for 0x40054c>, <DisassemblerInsn "mov" for 0x400550>, <DisassemblerInsn "and" for 0x400554>, <DisassemblerInsn "movzx" for 0x400556>, <DisassemblerInsn "mov" for 0x400559>, <DisassemblerInsn "mov" for 0x40055e>, <DisassemblerInsn "mov" for 0x400564>, <DisassemblerInsn "cmp" for 0x400569>, <DisassemblerInsn "je" for 0x400570>]'}, {'block_Idx': 119, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40067d>]'}, {'block_Idx': 124, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40074b>, <DisassemblerInsn "mov" for 0x40074e>, <DisassemblerInsn "mov" for 0x400753>, <DisassemblerInsn "mov" for 0x40075a>, <DisassemblerInsn "cmp" for 0x40075f>, <DisassemblerInsn "jne" for 0x400767>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400148>, <DisassemblerInsn "mov" for 0x40014d>, <DisassemblerInsn "cmp" for 0x40014f>, <DisassemblerInsn "mov" for 0x400157>, <DisassemblerInsn "jne" for 0x40015b>]'}, {'block_Idx': 155, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400811>, <DisassemblerInsn "mov" for 0x400816>, <DisassemblerInsn "mov" for 0x400819>, <DisassemblerInsn "jmp" for 0x40081d>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40049b>, <DisassemblerInsn "cmp" for 0x4004a0>, <DisassemblerInsn "je" for 0x4004a7>]'}, {'block_Idx': 191, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40092c>, <DisassemblerInsn "mov" for 0x400930>, <DisassemblerInsn "mov" for 0x400934>, <DisassemblerInsn "add" for 0x400938>, <DisassemblerInsn "ret" for 0x40093c>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003d4>, <DisassemblerInsn "mov" for 0x4003d9>, <DisassemblerInsn "call" for 0x4003dc>]'}, {'block_Idx': 104, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002bb>, <DisassemblerInsn "cmp" for 0x4002c0>, <DisassemblerInsn "je" for 0x4002c7>]'}, {'block_Idx': 105, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40029e>, <DisassemblerInsn "mov" for 0x4002a2>, <DisassemblerInsn "cmp" for 0x4002a6>, <DisassemblerInsn "jg" for 0x4002ab>]'}, {'block_Idx': 154, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40081f>, <DisassemblerInsn "mov" for 0x400824>, <DisassemblerInsn "mov" for 0x400827>, <DisassemblerInsn "mov" for 0x40082b>, <DisassemblerInsn "mov" for 0x400830>, <DisassemblerInsn "mov" for 0x400835>, <DisassemblerInsn "mov" for 0x400838>, <DisassemblerInsn "mov" for 0x40083c>, <DisassemblerInsn "mov" for 0x400841>, <DisassemblerInsn "mov" for 0x400844>, <DisassemblerInsn "mov" for 0x400849>, <DisassemblerInsn "mov" for 0x40084d>, <DisassemblerInsn "cmp" for 0x400852>, <DisassemblerInsn "sete" for 0x400859>, <DisassemblerInsn "and" for 0x40085c>, <DisassemblerInsn "movzx" for 0x40085e>, <DisassemblerInsn "call" for 0x400862>]'}, {'block_Idx': 102, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005f3>, <DisassemblerInsn "cmp" for 0x4005f8>, <DisassemblerInsn "jne" for 0x4005ff>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400037>, <DisassemblerInsn "mov" for 0x40003c>, <DisassemblerInsn "mov" for 0x400041>, <DisassemblerInsn "mov" for 0x400045>, <DisassemblerInsn "lea" for 0x40004a>, <DisassemblerInsn "mov" for 0x400051>, <DisassemblerInsn "call" for 0x400053>]'}, {'block_Idx': 107, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006e6>, <DisassemblerInsn "mov" for 0x4006eb>, <DisassemblerInsn "mov" for 0x4006ee>, <DisassemblerInsn "mov" for 0x4006f3>, <DisassemblerInsn "xor" for 0x4006f6>, <DisassemblerInsn "lea" for 0x4006f8>, <DisassemblerInsn "call" for 0x4006ff>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40047f>, <DisassemblerInsn "cmp" for 0x400484>, <DisassemblerInsn "jne" for 0x40048b>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400065>, <DisassemblerInsn "mov" for 0x40006a>, <DisassemblerInsn "call" for 0x40006e>]'}, {'block_Idx': 111, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4005de>]'}, {'block_Idx': 12, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400088>, <DisassemblerInsn "cmp" for 0x40008d>, <DisassemblerInsn "jle" for 0x400091>]'}, {'block_Idx': 153, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008a2>, <DisassemblerInsn "call" for 0x4008a7>]'}, {'block_Idx': 117, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006ab>, <DisassemblerInsn "mov" for 0x4006ae>, <DisassemblerInsn "mov" for 0x4006b3>, <DisassemblerInsn "mov" for 0x4006ba>, <DisassemblerInsn "cmp" for 0x4006bf>, <DisassemblerInsn "jne" for 0x4006c7>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40037e>, <DisassemblerInsn "mov" for 0x400380>, <DisassemblerInsn "mov" for 0x400385>, <DisassemblerInsn "mov" for 0x400388>, <DisassemblerInsn "cmp" for 0x40038d>, <DisassemblerInsn "jne" for 0x400391>]'}, {'block_Idx': 132, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400769>, <DisassemblerInsn "jmp" for 0x400771>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40048d>, <DisassemblerInsn "cmp" for 0x400492>, <DisassemblerInsn "jne" for 0x400499>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40067f>, <DisassemblerInsn "cmp" for 0x400684>, <DisassemblerInsn "je" for 0x40068b>]'}, {'block_Idx': 127, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4006d6>]'}, {'block_Idx': 177, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40090c>, <DisassemblerInsn "jmp" for 0x400914>]'}, {'block_Idx': 103, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002ad>, <DisassemblerInsn "mov" for 0x4002b2>, <DisassemblerInsn "jmp" for 0x4002b9>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400452>, <DisassemblerInsn "mov" for 0x400457>, <DisassemblerInsn "call" for 0x40045a>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400371>, <DisassemblerInsn "mov" for 0x400376>, <DisassemblerInsn "call" for 0x400379>]'}, {'block_Idx': 145, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400308>, <DisassemblerInsn "mov" for 0x40030d>, <DisassemblerInsn "jmp" for 0x400314>]'}, {'block_Idx': 190, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009e4>, <DisassemblerInsn "mov" for 0x4009e8>, <DisassemblerInsn "pop" for 0x4009f2>, <DisassemblerInsn "ret" for 0x4009f3>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400591>, <DisassemblerInsn "cmp" for 0x400596>, <DisassemblerInsn "je" for 0x40059d>]'}, {'block_Idx': 89, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400621>, <DisassemblerInsn "mov" for 0x400626>, <DisassemblerInsn "mov" for 0x400629>, <DisassemblerInsn "jmp" for 0x40062c>]'}, {'block_Idx': 34, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400388>, <DisassemblerInsn "cmp" for 0x40038d>, <DisassemblerInsn "jne" for 0x400391>]'}, {'block_Idx': 167, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008ac>, <DisassemblerInsn "mov" for 0x4008af>, <DisassemblerInsn "mov" for 0x4008b4>, <DisassemblerInsn "mov" for 0x4008bb>, <DisassemblerInsn "cmp" for 0x4008c0>, <DisassemblerInsn "jne" for 0x4008c8>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400058>, <DisassemblerInsn "jmp" for 0x400060>]'}, {'block_Idx': 122, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400324>, <DisassemblerInsn "mov" for 0x400329>, <DisassemblerInsn "jmp" for 0x400330>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400278>, <DisassemblerInsn "mov" for 0x40027a>, <DisassemblerInsn "cmp" for 0x40027e>, <DisassemblerInsn "jle" for 0x400280>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000e1>, <DisassemblerInsn "mov" for 0x4000e6>, <DisassemblerInsn "mov" for 0x4000e9>, <DisassemblerInsn "mov" for 0x4000ed>, <DisassemblerInsn "mov" for 0x4000f1>, <DisassemblerInsn "mov" for 0x4000f6>, <DisassemblerInsn "mov" for 0x4000f9>, <DisassemblerInsn "mov" for 0x4000fe>, <DisassemblerInsn "mov" for 0x400101>, <DisassemblerInsn "cmp" for 0x400106>, <DisassemblerInsn "setg" for 0x400109>, <DisassemblerInsn "and" for 0x40010c>, <DisassemblerInsn "movzx" for 0x40010e>, <DisassemblerInsn "mov" for 0x400111>, <DisassemblerInsn "mov" for 0x400116>, <DisassemblerInsn "mov" for 0x40011c>, <DisassemblerInsn "mov" for 0x400121>, <DisassemblerInsn "mov" for 0x400124>, <DisassemblerInsn "mov" for 0x400129>, <DisassemblerInsn "cmp" for 0x40012b>, <DisassemblerInsn "mov" for 0x40012e>, <DisassemblerInsn "jg" for 0x400132>]'}, {'block_Idx': 125, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400704>, <DisassemblerInsn "mov" for 0x400707>, <DisassemblerInsn "mov" for 0x40070c>, <DisassemblerInsn "mov" for 0x400713>, <DisassemblerInsn "cmp" for 0x400718>, <DisassemblerInsn "jne" for 0x400720>]'}], 'cfg_block_detailed_info': [{'block_Idx': 32, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edi, dword ptr [rax + 0x10]>', '<call~~0x500010>']}, {'block_Idx': 96, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edi, dword ptr [rax + 0x78]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edx, dword ptr [rax + 0x28]>', '<xor~~esi, esi>', '<lea~~rcx, [rip + 0x1517]>', '<call~~0x500030>']}, {'block_Idx': 88, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x78]>', '<mov~~dword ptr [rsp], eax>', '<mov~~edi, dword ptr [rsp]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edx, dword ptr [rax + 0x28]>', '<xor~~esi, esi>', '<lea~~rcx, [rip + 0x1566]>', '<call~~0x500030>']}, {'block_Idx': 31, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x8c], 0>', '<je~~0x400366>']}, {'block_Idx': 135, 'blockInsts': ['<jmp~~0x400731>']}, {'block_Idx': 59, 'blockInsts': ['<mov~~dword ptr [rsp + 0x14], eax>', '<mov~~edi, dword ptr [rsp + 0x2c]>', '<call~~0x500018>']}, {'block_Idx': 126, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xffffffea>', '<jmp~~0x400922>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0xf0], 0>', '<je~~0x4003fd>']}, {'block_Idx': 65, 'blockInsts': ['<cmp~~eax, 0>', '<setne~~al>', '<xor~~al, 0xff>', '<mov~~byte ptr [rsp + 7], al>', '<mov~~al, byte ptr [rsp + 7]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x90], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x8c], 0>', '<jne~~0x4004a9>']}, {'block_Idx': 79, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x8c], 0>', '<setne~~al>', '<mov~~byte ptr [rsp + 4], al>', '<mov~~al, byte ptr [rsp + 4]>', '<mov~~byte ptr [rsp + 5], al>', '<mov~~al, byte ptr [rsp + 5]>', '<mov~~byte ptr [rsp + 6], al>', '<mov~~al, byte ptr [rsp + 6]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x98], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0xf0], 0>', '<je~~0x4005e4>']}, {'block_Idx': 113, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x28], 4>', '<jg~~0x400324>']}, {'block_Idx': 114, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x28], 8>', '<jmp~~0x400332>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0x2c]>', '<call~~0x500018>']}, {'block_Idx': 168, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rax + 0xc8], rcx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~qword ptr [rax + 0xc8], 0>', '<jne~~0x400892>']}, {'block_Idx': 148, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x90], 0>', '<je~~0x40081f>']}, {'block_Idx': 171, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rax + 0xd8], rcx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~qword ptr [rax + 0xd8], 0>', '<jne~~0x400916>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x1f]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x84], ecx>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~al, 1>', '<cmp~~dword ptr [rcx + 0x80], 0>', '<mov~~byte ptr [rsp + 0x1c], al>', '<jne~~0x4001c1>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x98], 0>', '<je~~0x400591>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x74], 0x20>', '<jle~~0x400065>']}, {'block_Idx': 95, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x94], 0>', '<je~~0x400731>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x7c], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x74]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<cmp~~eax, dword ptr [rcx + 0x78]>', '<setg~~al>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x80], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rax + 0x78]>', '<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~al, 1>', '<cmp~~ecx, dword ptr [rdx + 0x74]>', '<mov~~byte ptr [rsp + 0x1f], al>', '<jg~~0x400186>']}, {'block_Idx': 118, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xffffffea>', '<jmp~~0x400922>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x28]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<cmp~~eax, dword ptr [rcx + 0x20]>', '<setne~~al>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x94], ecx>', '<jmp~~0x4004f1>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x38]>', '<xor~~eax, eax>', '<cmp~~dword ptr [rcx + 0xf0], 0>', '<mov~~byte ptr [rsp + 7], al>', '<je~~0x40046b>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x78], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x78], 0>', '<jle~~0x400093>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x74], 1>', '<jne~~0x400388>']}, {'block_Idx': 49, 'blockInsts': ['<mov~~dword ptr [rsp + 0x2c], eax>', '<mov~~edi, dword ptr [rsp + 0x30]>', '<call~~0x500018>']}, {'block_Idx': 136, 'blockInsts': ['<push~~rax>', '<mov~~qword ptr [rsp], rdi>', '<mov~~rdi, qword ptr [rsp]>', '<add~~rdi, 0xa0>', '<call~~0x500058>']}, {'block_Idx': 91, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0xf4], 2>', '<jmp~~0x4005e0>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x1b]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x8c], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x28], -1>', '<jne~~0x400366>']}, {'block_Idx': 146, 'blockInsts': ['<jmp~~0x400332>']}, {'block_Idx': 159, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x38]>', '<call~~0x500050>']}, {'block_Idx': 138, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x28], 9>', '<jmp~~0x400314>']}, {'block_Idx': 162, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x38]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~esi, dword ptr [rax + 0x20]>', '<mov~~edx, dword ptr [rsp + 0x24]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rax + 0x78]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~r8d, dword ptr [rax + 0x24]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0xf4], 4>', '<sete~~al>', '<and~~al, 1>', '<movzx~~r9d, al>', '<call~~0x500040>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0xf4], 0>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x98], 0>', '<jne~~0x40060f>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~al, byte ptr [rsp + 6]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x98], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0xf0], 0>', '<je~~0x4005e4>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x84], 0>', '<setne~~al>', '<mov~~byte ptr [rsp + 0x1c], al>', '<mov~~al, byte ptr [rsp + 0x1c]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x88], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rax + 0x14]>', '<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~al, 1>', '<cmp~~ecx, dword ptr [rdx + 0x24]>', '<mov~~byte ptr [rsp + 0x1b], al>', '<jne~~0x4001fd>']}, {'block_Idx': 112, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rsp + 8], rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edi, dword ptr [rax + 0x28]>', '<call~~0x500020>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~dword ptr [rsp + 0x44], 0xffffffea>', '<jmp~~0x400934>']}, {'block_Idx': 175, 'blockInsts': ['<jmp~~0x400894>']}, {'block_Idx': 106, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edi, dword ptr [rax + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~esi, dword ptr [rax + 0x78]>', '<mov~~edx, 0x400>', '<call~~0x500038>']}, {'block_Idx': 26, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x1d]>', '<mov~~byte ptr [rsp + 0x1e], al>', '<mov~~al, byte ptr [rsp + 0x1e]>', '<mov~~byte ptr [rsp + 0x1f], al>', '<mov~~al, byte ptr [rsp + 0x1f]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x84], ecx>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~al, 1>', '<cmp~~dword ptr [rcx + 0x80], 0>', '<mov~~byte ptr [rsp + 0x1c], al>', '<jne~~0x4001c1>']}, {'block_Idx': 142, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x38]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~esi, dword ptr [rax + 0x28]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edx, dword ptr [rax + 0x10]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rax + 0x74]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~r8d, dword ptr [rax + 0x14]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0xf4], 2>', '<sete~~al>', '<and~~al, 1>', '<movzx~~r9d, al>', '<call~~0x500040>']}, {'block_Idx': 77, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0x30]>', '<call~~0x500018>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~al, byte ptr [rsp + 4]>', '<mov~~byte ptr [rsp + 5], al>', '<mov~~al, byte ptr [rsp + 5]>', '<mov~~byte ptr [rsp + 6], al>', '<mov~~al, byte ptr [rsp + 6]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x98], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0xf0], 0>', '<je~~0x4005e4>']}, {'block_Idx': 99, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0xf4], 3>', '<jmp~~0x4005e0>']}, {'block_Idx': 133, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x90], 0>', '<je~~0x4007f1>']}, {'block_Idx': 156, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rax + 0xc0], rcx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~qword ptr [rax + 0xc0], 0>', '<jne~~0x4007ef>']}, {'block_Idx': 100, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0xf4], 4>', '<jmp~~0x4005de>']}, {'block_Idx': 25, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rax, qword ptr [rax + 8]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<cmp~~rax, qword ptr [rcx + 0x18]>', '<setne~~al>', '<mov~~byte ptr [rsp + 0x1d], al>', '<mov~~al, byte ptr [rsp + 0x1d]>', '<mov~~byte ptr [rsp + 0x1e], al>', '<mov~~al, byte ptr [rsp + 0x1e]>', '<mov~~byte ptr [rsp + 0x1f], al>', '<mov~~al, byte ptr [rsp + 0x1f]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x84], ecx>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~al, 1>', '<cmp~~dword ptr [rcx + 0x80], 0>', '<mov~~byte ptr [rsp + 0x1c], al>', '<jne~~0x4001c1>']}, {'block_Idx': 174, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xfffffff4>', '<jmp~~0x400922>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x20], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0xf0], 0>', '<je~~0x4003fd>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~al, 1>', '<cmp~~dword ptr [rcx + 0x88], 0>', '<mov~~byte ptr [rsp + 5], al>', '<jne~~0x400548>']}, {'block_Idx': 178, 'blockInsts': ['<jmp~~0x400918>']}, {'block_Idx': 130, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x30], 8>', '<je~~0x4002fa>']}, {'block_Idx': 173, 'blockInsts': ['<jmp~~0x4008d6>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x38]>', '<xor~~eax, eax>', '<cmp~~dword ptr [rcx + 0x80], 0>', '<mov~~byte ptr [rsp + 0x1e], al>', '<jne~~0x40017e>']}, {'block_Idx': 164, 'blockInsts': ['<jmp~~0x4007f1>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x78]>', '<mov~~dword ptr [rsp + 0x20], eax>', '<jmp~~0x4000ed>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x8c], 0>', '<jne~~0x4003fd>']}, {'block_Idx': 69, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500010>']}, {'block_Idx': 144, 'blockInsts': ['<jmp~~0x400322>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x38]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rcx, qword ptr [rax + 0x18]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x1abe]>', '<mov~~al, 0>', '<call~~0x500008>']}, {'block_Idx': 172, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xfffffff4>', '<jmp~~0x400922>']}, {'block_Idx': 158, 'blockInsts': ['<mov~~dword ptr [rsp + 0x44], 0>', '<jmp~~0x400934>']}, {'block_Idx': 163, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xfffffff4>', '<jmp~~0x400922>']}, {'block_Idx': 140, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x28], 8>', '<jmp~~0x400330>']}, {'block_Idx': 92, 'blockInsts': ['<jmp~~0x4005f3>']}, {'block_Idx': 90, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x94], 0>', '<je~~0x4005cf>']}, {'block_Idx': 66, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<cmp~~eax, dword ptr [rcx + 0x20]>', '<setne~~al>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x94], ecx>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<xor~~eax, eax>', '<cmp~~dword ptr [rcx + 0x90], 0>', '<mov~~byte ptr [rsp + 6], al>', '<jne~~0x400550>']}, {'block_Idx': 139, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x2c], 8>', '<jne~~0x400308>']}, {'block_Idx': 121, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x30], 7>', '<je~~0x4002ec>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500010>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x48>', '<mov~~qword ptr [rsp + 0x38], rdi>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rdi, qword ptr [rax + 8]>', '<call~~0x500000>']}, {'block_Idx': 94, 'blockInsts': ['<mov~~dword ptr [rsp + 0x10], eax>', '<jmp~~0x40029e>']}, {'block_Idx': 93, 'blockInsts': ['<mov~~dword ptr [rsp + 0x10], eax>', '<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 0x28], eax>', '<cmp~~dword ptr [rsp + 0x28], 2>', '<jg~~0x4002bb>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x74]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<cmp~~eax, dword ptr [rcx + 0x78]>', '<jle~~0x4000e1>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x88], 0>', '<jne~~0x400240>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x1c]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x88], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rax + 0x14]>', '<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~al, 1>', '<cmp~~ecx, dword ptr [rdx + 0x24]>', '<mov~~byte ptr [rsp + 0x1b], al>', '<jne~~0x4001fd>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x88], 0>', '<je~~0x40043e>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x1e]>', '<mov~~byte ptr [rsp + 0x1f], al>', '<mov~~al, byte ptr [rsp + 0x1f]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x84], ecx>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~al, 1>', '<cmp~~dword ptr [rcx + 0x80], 0>', '<mov~~byte ptr [rsp + 0x1c], al>', '<jne~~0x4001c1>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x44]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 152, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x88], 0>', '<je~~0x400918>']}, {'block_Idx': 147, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x8c], 0>', '<je~~0x4008d6>']}, {'block_Idx': 129, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 8]>', '<mov~~rcx, rax>', '<mov~~esi, 0x30>', '<lea~~rdx, [rip + 0x1830]>', '<mov~~al, 0>', '<call~~0x500008>']}, {'block_Idx': 47, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x10]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<cmp~~eax, dword ptr [rcx + 0x28]>', '<setne~~al>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x90], ecx>', '<jmp~~0x40047f>']}, {'block_Idx': 98, 'blockInsts': ['<mov~~edi, dword ptr [rsp]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edx, dword ptr [rax + 0x28]>', '<xor~~esi, esi>', '<lea~~rcx, [rip + 0x1566]>', '<call~~0x500030>']}, {'block_Idx': 131, 'blockInsts': ['<cmp~~dword ptr [rsp + 0x2c], 7>', '<jne~~0x400316>']}, {'block_Idx': 54, 'blockInsts': ['<mov~~al, byte ptr [rsp + 7]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x90], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x8c], 0>', '<jne~~0x4004a9>']}, {'block_Idx': 101, 'blockInsts': ['<jmp~~0x4005e2>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x90], 0>', '<je~~0x40067f>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~dword ptr [rsp + 0x30], eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500010>']}, {'block_Idx': 123, 'blockInsts': ['<jmp~~0x400334>']}, {'block_Idx': 71, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x38]>', '<xor~~eax, eax>', '<cmp~~dword ptr [rcx + 0xf0], 0>', '<mov~~byte ptr [rsp + 4], al>', '<je~~0x400540>']}, {'block_Idx': 84, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x28], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x8c], 0>', '<jne~~0x400419>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x38]>', '<xor~~eax, eax>', '<cmp~~dword ptr [rcx + 0x90], 0>', '<mov~~byte ptr [rsp + 6], al>', '<jne~~0x400550>']}, {'block_Idx': 141, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x94], 0>', '<je~~0x400894>']}, {'block_Idx': 128, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x38]>', '<call~~0x400940>']}, {'block_Idx': 42, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x8c], 0>', '<jne~~0x400419>']}, {'block_Idx': 43, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x88], 0>', '<jne~~0x4003fd>']}, {'block_Idx': 83, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0xf4], 1>', '<jmp~~0x4005e2>']}, {'block_Idx': 134, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xffffffea>', '<jmp~~0x400922>']}, {'block_Idx': 151, 'blockInsts': ['<jmp~~0x400330>']}, {'block_Idx': 109, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rax + 0xa0], rcx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~qword ptr [rax + 0xa0], 0>', '<jne~~0x40067d>']}, {'block_Idx': 81, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x74]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<cmp~~eax, dword ptr [rcx + 0x78]>', '<jle~~0x40062e>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x4c], 0>', '<setne~~al>', '<mov~~byte ptr [rsp + 0x1b], al>', '<mov~~al, byte ptr [rsp + 0x1b]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x8c], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x28], -1>', '<jne~~0x400366>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x74], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x74], 0>', '<jle~~0x400037>']}, {'block_Idx': 63, 'blockInsts': ['<cmp~~eax, 0>', '<jne~~0x4003fd>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~al, byte ptr [rsp + 5]>', '<mov~~byte ptr [rsp + 6], al>', '<mov~~al, byte ptr [rsp + 6]>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x98], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0xf0], 0>', '<je~~0x4005e4>']}, {'block_Idx': 119, 'blockInsts': ['<jmp~~0x40067f>']}, {'block_Idx': 124, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rax + 0xb8], rcx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~qword ptr [rax + 0xb8], 0>', '<jne~~0x400776>']}, {'block_Idx': 21, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x38]>', '<mov~~al, 1>', '<cmp~~qword ptr [rcx + 0xe8], 0>', '<mov~~byte ptr [rsp + 0x1d], al>', '<jne~~0x400176>']}, {'block_Idx': 155, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x28]>', '<mov~~dword ptr [rsp + 0x24], eax>', '<jmp~~0x40082b>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x90], 0>', '<je~~0x4004ce>']}, {'block_Idx': 191, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x34]>', '<mov~~dword ptr [rsp + 0x44], eax>', '<mov~~eax, dword ptr [rsp + 0x44]>', '<add~~rsp, 0x48>', '<ret~~>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500028>']}, {'block_Idx': 104, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x88], 0>', '<je~~0x4002d7>']}, {'block_Idx': 105, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x10]>', '<mov~~dword ptr [rsp + 0x28], eax>', '<cmp~~dword ptr [rsp + 0x28], 2>', '<jg~~0x4002bb>']}, {'block_Idx': 154, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x10]>', '<mov~~dword ptr [rsp + 0x24], eax>', '<mov~~rdi, qword ptr [rsp + 0x38]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~esi, dword ptr [rax + 0x20]>', '<mov~~edx, dword ptr [rsp + 0x24]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rax + 0x78]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~r8d, dword ptr [rax + 0x24]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0xf4], 4>', '<sete~~al>', '<and~~al, 1>', '<movzx~~r9d, al>', '<call~~0x500040>']}, {'block_Idx': 102, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x98], 0>', '<jne~~0x40060f>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x38]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rcx, qword ptr [rax + 8]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x1af7]>', '<mov~~al, 0>', '<call~~0x500008>']}, {'block_Idx': 107, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edi, dword ptr [rax + 0x78]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edx, dword ptr [rax + 0x20]>', '<xor~~esi, esi>', '<lea~~rcx, [rip + 0x14d2]>', '<call~~0x500030>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x8c], 0>', '<jne~~0x4004a9>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~rdi, qword ptr [rax + 0x18]>', '<call~~0x500000>']}, {'block_Idx': 111, 'blockInsts': ['<jmp~~0x4005e0>']}, {'block_Idx': 12, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x78], 0x20>', '<jle~~0x4000c1>']}, {'block_Idx': 153, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x38]>', '<call~~0x500048>']}, {'block_Idx': 117, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~qword ptr [rax + 0xa8], 0>', '<jne~~0x4006d6>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x10], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x78], 1>', '<jne~~0x4003aa>']}, {'block_Idx': 132, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xfffffff4>', '<jmp~~0x400922>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x88], 0>', '<jne~~0x4004a9>']}, {'block_Idx': 87, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x8c], 0>', '<je~~0x4006d8>']}, {'block_Idx': 127, 'blockInsts': ['<jmp~~0x4006d8>']}, {'block_Idx': 177, 'blockInsts': ['<mov~~dword ptr [rsp + 0x34], 0xfffffff4>', '<jmp~~0x400922>']}, {'block_Idx': 103, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x28], 6>', '<jmp~~0x400334>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500028>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~edi, dword ptr [rax + 0x10]>', '<call~~0x500010>']}, {'block_Idx': 145, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x28], 7>', '<jmp~~0x400322>']}, {'block_Idx': 190, 'blockInsts': ['<mov~~rax, qword ptr [rsp]>', '<mov~~dword ptr [rax + 0xf0], 0>', '<pop~~rax>', '<ret~~>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x90], 0>', '<je~~0x4005b0>']}, {'block_Idx': 89, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x74]>', '<mov~~dword ptr [rsp], eax>', '<jmp~~0x400639>']}, {'block_Idx': 34, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax + 0x78], 1>', '<jne~~0x4003aa>']}, {'block_Idx': 167, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rax + 0xd0], rcx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~qword ptr [rax + 0xd0], 0>', '<jne~~0x4008d4>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~dword ptr [rsp + 0x44], 0xffffffea>', '<jmp~~0x400934>']}, {'block_Idx': 122, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x28], 9>', '<jmp~~0x400332>']}, {'block_Idx': 70, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~eax, dword ptr [rsp + 0x14]>', '<cmp~~eax, ecx>', '<jle~~0x400291>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x74]>', '<mov~~dword ptr [rsp + 0x20], eax>', '<mov~~ecx, dword ptr [rsp + 0x20]>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x7c], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~eax, dword ptr [rax + 0x74]>', '<mov~~rcx, qword ptr [rsp + 0x38]>', '<cmp~~eax, dword ptr [rcx + 0x78]>', '<setg~~al>', '<and~~al, 1>', '<movzx~~ecx, al>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~dword ptr [rax + 0x80], ecx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~ecx, dword ptr [rax + 0x78]>', '<mov~~rdx, qword ptr [rsp + 0x38]>', '<mov~~al, 1>', '<cmp~~ecx, dword ptr [rdx + 0x74]>', '<mov~~byte ptr [rsp + 0x1f], al>', '<jg~~0x400186>']}, {'block_Idx': 125, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rax + 0xb0], rcx>', '<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~qword ptr [rax + 0xb0], 0>', '<jne~~0x40072f>']}], 'cfg_edge_info': [(25, 23), (72, 73), (73, 81), (162, 168), (88, 109), (133, 141), (119, 87), (29, 32), (167, 173), (102, 80), (34, 37), (28, 30), (74, 82), (140, 146), (26, 23), (32, 39), (177, 128), (50, 54), (90, 99), (141, 147), (126, 128), (156, 163), (46, 50), (159, 171), (23, 27), (2, 4), (95, 107), (130, 138), (79, 74), (94, 105), (135, 106), (62, 67), (24, 28), (71, 79), (18, 21), (33, 40), (81, 89), (96, 117), (147, 153), (124, 133), (154, 168), (70, 77), (65, 56), (51, 57), (14, 17), (80, 81), (77, 94), (132, 128), (138, 144), (148, 154), (27, 29), (15, 9), (127, 95), (30, 34), (105, 104), (134, 128), (59, 70), (171, 177), (82, 90), (125, 134), (22, 23), (21, 25), (48, 42), (0, 2), (175, 147), (40, 38), (84, 47), (49, 59), (104, 114), (121, 130), (155, 162), (131, 140), (16, 19), (117, 126), (93, 104), (55, 65), (42, 47), (73, 80), (145, 151), (20, 19), (29, 31), (46, 47), (43, 48), (38, 43), (63, 42), (66, 68), (112, 129), (7, 9), (25, 24), (56, 57), (72, 74), (99, 101), (67, 72), (31, 30), (102, 81), (80, 87), (152, 158), (95, 106), (113, 121), (79, 73), (106, 124), (164, 141), (71, 78), (168, 175), (147, 152), (3, 7), (4, 6), (51, 56), (158, 9), (14, 16), (31, 32), (78, 74), (156, 164), (23, 28), (103, 112), (87, 95), (118, 128), (10, 12), (130, 139), (45, 43), (19, 24), (30, 33), (105, 103), (109, 119), (56, 61), (98, 109), (40, 37), (167, 172), (84, 46), (104, 113), (17, 20), (27, 30), (28, 29), (54, 57), (172, 128), (47, 51), (93, 103), (68, 74), (63, 69), (6, 10), (82, 91), (20, 18), (171, 178), (12, 14), (21, 26), (133, 142), (69, 84), (121, 131), (2, 3), (122, 123), (11, 15), (74, 83), (100, 111), (117, 127), (128, 191), (128, 136), (24, 27), (26, 24), (139, 145), (4, 3), (50, 55), (81, 88), (67, 71), (178, 158), (90, 100), (124, 132), (141, 148), (70, 76), (123, 112), (107, 125), (142, 156), (89, 98), (91, 101), (173, 152), (129, 30), (37, 45), (168, 174), (139, 138), (43, 42), (18, 22), (61, 57), (78, 73), (61, 66), (52, 63), (65, 57), (152, 159), (113, 122), (10, 11), (57, 62), (153, 167), (131, 130), (45, 42), (19, 23), (114, 123), (148, 155), (92, 102), (109, 118), (76, 93), (174, 128), (16, 18), (12, 11), (42, 46), (190, 191), (125, 135), (87, 96), (22, 24), (163, 128), (39, 49), (48, 52), (66, 67), (54, 56), (83, 92), (68, 73)], 'cdg_edge_info': [(25, 23), (4, 9), (73, 81), (121, 112), (125, 128), (133, 141), (29, 32), (147, 167), (102, 80), (74, 82), (48, 63), (29, 59), (113, 138), (31, 129), (79, 81), (26, 23), (90, 99), (141, 147), (156, 163), (46, 50), (171, 191), (23, 27), (2, 4), (95, 107), (31, 49), (141, 168), (95, 125), (79, 74), (70, 105), (29, 70), (24, 28), (71, 79), (18, 21), (81, 89), (147, 153), (124, 133), (81, 98), (70, 77), (63, 84), (65, 56), (14, 17), (80, 81), (40, 45), (156, 128), (131, 138), (148, 154), (27, 29), (130, 30), (105, 104), (167, 152), (82, 90), (171, 177), (125, 134), (21, 25), (84, 47), (104, 114), (131, 140), (10, 15), (167, 191), (117, 126), (93, 104), (73, 80), (12, 15), (43, 48), (46, 47), (29, 31), (125, 191), (29, 49), (70, 93), (25, 24), (56, 57), (117, 128), (109, 87), (168, 191), (50, 65), (31, 39), (80, 87), (152, 158), (95, 106), (113, 121), (113, 130), (95, 124), (79, 73), (30, 40), (147, 152), (4, 6), (130, 112), (14, 16), (31, 32), (171, 128), (23, 28), (87, 95), (168, 147), (130, 139), (10, 12), (133, 156), (45, 43), (30, 33), (125, 106), (171, 158), (105, 103), (56, 61), (29, 129), (109, 128), (125, 124), (124, 128), (40, 37), (12, 30), (167, 172), (84, 46), (104, 113), (121, 129), (152, 171), (28, 29), (93, 103), (156, 141), (63, 69), (152, 9), (82, 91), (171, 178), (20, 18), (12, 14), (4, 10), (21, 26), (133, 142), (121, 131), (2, 3), (73, 109), (167, 128), (74, 83), (31, 112), (117, 191), (24, 27), (26, 24), (139, 145), (4, 3), (50, 55), (81, 88), (67, 71), (90, 100), (124, 132), (141, 148), (70, 76), (79, 109), (171, 9), (10, 9), (70, 94), (156, 191), (31, 59), (148, 162), (139, 138), (168, 174), (12, 9), (61, 57), (168, 128), (61, 66), (79, 102), (65, 57), (130, 129), (152, 159), (117, 95), (113, 122), (10, 11), (2, 7), (131, 130), (148, 155), (109, 118), (80, 109), (31, 70), (16, 18), (109, 191), (12, 11), (4, 7), (124, 191), (87, 96), (14, 20), (29, 39), (48, 52), (66, 67), (2, 9), (29, 112), (87, 117), (121, 30)], 'ddg_edge_info': [(55, 57), (96, 95), (129, 43), (55, 66), (18, 26), (10, 162), (106, 148), (47, 80), (147, 167), (109, 159), (0, 14), (6, 48), (109, 168), (0, 23), (69, 95), (28, 94), (6, 57), (6, 66), (140, 155), (6, 84), (33, 47), (33, 56), (0, 117), (83, 142), (138, 96), (159, 128), (55, 61), (47, 66), (55, 79), (96, 117), (109, 154), (69, 81), (6, 43), (77, 94), (69, 90), (76, 138), (77, 103), (6, 52), (69, 99), (6, 61), (77, 112), (49, 139), (172, 191), (52, 46), (10, 40), (0, 103), (162, 174), (79, 167), (0, 112), (145, 112), (155, 162), (55, 56), (28, 39), (55, 65), (28, 48), (47, 61), (28, 57), (6, 29), (69, 67), (6, 47), (109, 167), (6, 56), (10, 17), (6, 65), (33, 37), (0, 89), (142, 191), (0, 98), (153, 191), (145, 98), (122, 96), (0, 107), (24, 46), (0, 125), (106, 124), (52, 162), (6, 24), (69, 71), (6, 33), (109, 153), (69, 80), (109, 162), (69, 89), (145, 57), (153, 159), (10, 12), (142, 159), (69, 98), (39, 57), (28, 155), (39, 66), (0, 84), (0, 102), (134, 191), (114, 96), (103, 96), (17, 20), (37, 96), (129, 90), (28, 47), (6, 10), (88, 98), (129, 99), (69, 57), (69, 66), (6, 28), (21, 26), (24, 162), (6, 37), (109, 148), (126, 191), (6, 46), (69, 84), (142, 154), (79, 125), (39, 52), (142, 163), (47, 154), (153, 172), (0, 79), (0, 88), (39, 70), (162, 159), (2, 30), (52, 98), (40, 142), (52, 107), (0, 106), (84, 96), (37, 82), (37, 91), (11, 191), (109, 107), (65, 82), (37, 100), (2, 142), (109, 125), (6, 14), (168, 174), (69, 61), (6, 23), (140, 112), (6, 32), (98, 106), (79, 102), (69, 79), (145, 47), (0, 56), (118, 191), (153, 158), (142, 158), (0, 65), (153, 167), (0, 74), (142, 167), (2, 16), (0, 83), (52, 102), (33, 98), (33, 107), (129, 71), (37, 95), (129, 80), (129, 89), (69, 47), (140, 98), (129, 98), (69, 56), (6, 18), (129, 107), (24, 152), (69, 65), (142, 153), (142, 162), (79, 124), (0, 69), (52, 79), (0, 87), (52, 88), (33, 84), (32, 39), (52, 106), (33, 102), (129, 57), (37, 81), (129, 66), (37, 90), (138, 142), (109, 106), (37, 99), (129, 84), (32, 142), (55, 107), (79, 74), (109, 124), (98, 87), (98, 96), (71, 79), (0, 37), (0, 46), (142, 148), (39, 37), (0, 55), (100, 142), (77, 140), (6, 98), (47, 148), (0, 73), (52, 74), (6, 107), (52, 83), (33, 79), (33, 88), (105, 113), (73, 142), (45, 71), (33, 106), (37, 67), (0, 167), (129, 52), (129, 61), (49, 59), (129, 79), (168, 159), (129, 88), (55, 102), (138, 155), (69, 46), (24, 142), (0, 32), (0, 50), (153, 152), (23, 24), (122, 57), (6, 102), (52, 69), (33, 65), (112, 129), (33, 74), (52, 87), (10, 81), (33, 83), (52, 96), (45, 57), (122, 142), (0, 153), (45, 66), (140, 47), (0, 162), (129, 47), (37, 71), (129, 56), (0, 171), (109, 87), (37, 80), (129, 65), (39, 162), (106, 152), (59, 77), (109, 96), (129, 74), (55, 88), (96, 126), (55, 106), (0, 18), (159, 191), (28, 98), (0, 27), (77, 121), (6, 79), (0, 45), (77, 130), (6, 88), (52, 55), (77, 139), (6, 106), (52, 73), (132, 191), (52, 82), (52, 91), (15, 191), (39, 121), (33, 87), (45, 52), (2, 81), (37, 48), (0, 148), (39, 130), (129, 33), (37, 57), (114, 142), (103, 142), (122, 155), (37, 66), (106, 147), (55, 74), (55, 83), (0, 4), (159, 177), (28, 84), (65, 133), (28, 93), (0, 31), (6, 74), (99, 162), (0, 40), (20, 18), (6, 83), (52, 50), (33, 46), (33, 55), (79, 171), (33, 73), (39, 107), (33, 82), (37, 43), (66, 79), (7, 191), (93, 105), (37, 52), (0, 152), (129, 37), (37, 61), (106, 133), (129, 46), (26, 24), (84, 142), (129, 55), (114, 155), (106, 142), (103, 155), (96, 107), (59, 76), (55, 87), (107, 125), (28, 70), (89, 98), (55, 96), (107, 134), (70, 94), (28, 79), (0, 17), (109, 171), (0, 26), (69, 107), (6, 87), (77, 138), (33, 50), (6, 96), (52, 63), (162, 191), (0, 138), (37, 47), (0, 147), (37, 56), (0, 156), (106, 128), (129, 50), (55, 73), (24, 104), (106, 155), (55, 82), (28, 65), (159, 158), (76, 114), (84, 155), (55, 91), (0, 3), (0, 12), (6, 55), (0, 21), (40, 66), (69, 102), (6, 73), (6, 82), (33, 45), (6, 91), (162, 168), (0, 124), (39, 106), (0, 133), (91, 162), (0, 142), (106, 132), (26, 23), (138, 112), (106, 141), (96, 106), (107, 106), (47, 82), (159, 171), (109, 152), (28, 87), (6, 50), (0, 16), (69, 88), (76, 145), (10, 20), (69, 106), (57, 141), (33, 40), (0, 128), (24, 67), (138, 98), (83, 162), (59, 70), (76, 104), (6, 27), (76, 113), (109, 147), (0, 2), (76, 122), (69, 74), (109, 156), (69, 83), (40, 47), (6, 45), (76, 131), (98, 128), (77, 105), (142, 171), (2, 20), (39, 69), (162, 158), (0, 96), (162, 167), (145, 96), (138, 57), (0, 114), (122, 112), (32, 66), (55, 67), (129, 102), (109, 133), (57, 95), (28, 59), (109, 142), (6, 31), (168, 191), (50, 65), (6, 40), (69, 87), (69, 96), (39, 55), (0, 82), (162, 153), (25, 26), (0, 91), (0, 100), (162, 171), (122, 98), (3, 7), (0, 109), (40, 154), (103, 112), (114, 112), (45, 107), (28, 45), (57, 90), (69, 55), (6, 17), (129, 106), (76, 103), (28, 63), (6, 26), (76, 112), (109, 128), (69, 73), (98, 109), (109, 155), (98, 118), (69, 82), (142, 152), (69, 91), (10, 14), (39, 59), (39, 77), (0, 95), (138, 47), (0, 104), (154, 162), (32, 47), (103, 98), (24, 43), (114, 98), (37, 89), (28, 31), (65, 80), (37, 98), (129, 83), (28, 40), (37, 107), (28, 49), (6, 12), (69, 50), (6, 21), (98, 95), (109, 141), (6, 30), (79, 109), (142, 147), (142, 156), (103, 57), (114, 57), (2, 14), (0, 81), (162, 152), (0, 90), (32, 33), (0, 99), (52, 100), (24, 29), (33, 96), (84, 98), (45, 79), (24, 56), (65, 66), (37, 84), (45, 106), (168, 158), (37, 102), (129, 87), (109, 118), (168, 167), (49, 76), (140, 96), (76, 93), (6, 16), (32, 154), (129, 96), (6, 25), (47, 133), (122, 47), (28, 129), (47, 142), (0, 67), (39, 49), (28, 147), (162, 147), (84, 57), (52, 95), (33, 91), (16, 20), (33, 100), (10, 107), (65, 61), (37, 79), (109, 95), (37, 88), (129, 73), (168, 153), (129, 82), (37, 106), (129, 91), (6, 11), (168, 171), (129, 100), (6, 20), (153, 128), (142, 128), (79, 117), (142, 155), (103, 47), (114, 47), (2, 4), (28, 142), (0, 71), (0, 80), (52, 81), (52, 90), (94, 105), (52, 99), (24, 28), (33, 95), (2, 89), (45, 69), (37, 65), (37, 74), (37, 83), (55, 100), (109, 117), (129, 95), (106, 191), (0, 30), (0, 39), (98, 107), (142, 141), (0, 48), (20, 26), (0, 57), (162, 128), (6, 100), (52, 67), (163, 191), (0, 66), (84, 47), (100, 162), (33, 81), (33, 90), (10, 88), (45, 55), (145, 142), (33, 99), (10, 106), (129, 45), (67, 79), (129, 63), (73, 162), (37, 87), (106, 159), (168, 152), (55, 95), (129, 81), (70, 93), (66, 141), (28, 96), (0, 25), (0, 43), (0, 52), (0, 61), (6, 95), (52, 71), (33, 67), (52, 80), (52, 89), (45, 50), (37, 46), (37, 55), (129, 40), (0, 155), (174, 191), (145, 155), (37, 73), (106, 154), (129, 67), (55, 81), (168, 147), (107, 128), (96, 128), (55, 90), (55, 99), (27, 28), (0, 11), (45, 162), (0, 20), (76, 140), (99, 142), (0, 29), (77, 114), (6, 81), (0, 47), (6, 90), (52, 57), (6, 99), (52, 66), (33, 71), (52, 84), (152, 171), (33, 80), (0, 141), (33, 89), (37, 50), (10, 96), (66, 95), (0, 159), (0, 168), (177, 191), (106, 158), (0, 6), (11, 15), (0, 24), (6, 67), (0, 33), (33, 48), (52, 61), (77, 145), (33, 57), (33, 66), (73, 102), (37, 45), (129, 30), (0, 145), (66, 90), (0, 154), (129, 48), (168, 128), (55, 71), (140, 57), (158, 191), (106, 153), (55, 80), (106, 162), (55, 89), (76, 121), (55, 98), (0, 10), (76, 130), (76, 139), (77, 104), (140, 142), (69, 100), (65, 148), (49, 131), (77, 113), (0, 28), (6, 71), (77, 122), (6, 80), (52, 47), (77, 131), (33, 43), (6, 89), (52, 56), (3, 191), (33, 52), (52, 65), (33, 61), (0, 122), (91, 142), (0, 140)]}]}
{'avresample_open': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'subq\t$0x48, %rsp'}, {'instIndex': 1, 'instruction': 'movq\t%rdi, 0x38(%rsp)'}, {'instIndex': 2, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 3, 'instruction': 'movq\t8(%rax), %rdi'}, {'instIndex': 4, 'instruction': 'callq\tav_get_channel_layout_nb_channels@PLT'}, {'instIndex': 5, 'instruction': 'movl\t%eax, %ecx'}, {'instIndex': 6, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 7, 'instruction': 'movl\t%ecx, 0x74(%rax)'}, {'instIndex': 8, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 9, 'instruction': 'cmpl\t$0, 0x74(%rax)'}, {'instIndex': 10, 'instruction': 'jle\t.LBB0_2'}, {'instIndex': 11, 'instruction': 'movq\t0x38(%rsp), %rax'}, {'instIndex': 12, 'instruction': 'cmpl\t$0x20, 0x74(%rax)'}, {'instIndex': 13, 'instruction': 'jle\t.LBB0_3'}]}]}
The case of compiler clang with optimization O1.
Patched source code file: utils.c
Patched function: 1---int avresample_open 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_before/O1/utils.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_before/O1/utils.s---avresample_open---before
function id: 0
function flag: True
There are 560 instructions for function: avresample_open in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '36', 'end': 46}, 'before': {'start': '36', 'end': 41}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'subq\t$0xf8, %rsp'}, {'instIndex': 1, 'instruction': 'movq\t%rdi, 0xe8(%rsp)                 # 8-byte Spill'}, {'instIndex': 2, 'instruction': 'movq\t%rdi, %rax'}, {'instIndex': 3, 'instruction': 'addq\t$8, %rax'}, {'instIndex': 4, 'instruction': 'movq\t%rax, 0xe0(%rsp)                 # 8-byte Spill'}, {'instIndex': 5, 'instruction': 'movq\t8(%rdi), %rdi'}, {'instIndex': 6, 'instruction': 'callq\tav_get_channel_layout_nb_channels@PLT'}, {'instIndex': 8, 'instruction': 'movq\t%rdi, %rcx'}, {'instIndex': 9, 'instruction': 'addq\t$0x74, %rcx'}, {'instIndex': 10, 'instruction': 'movq\t%rcx, 0xf0(%rsp)                 # 8-byte Spill'}, {'instIndex': 11, 'instruction': 'movl\t%eax, 0x74(%rdi)'}, {'instIndex': 12, 'instruction': 'addl\t$-0x21, %eax'}, {'instIndex': 13, 'instruction': 'cmpl\t$-0x20, %eax'}, {'instIndex': 14, 'instruction': 'jae\t.LBB0_2'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_before/O1/utils.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_before/O1/utils.o---before
The extraction of function: avresample_open
Analyzing the binaries to generate subCFGs from patched function ...
It has 359 nodes and 647 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 560 instructions in binary file.
[4194304, 4194343]
The execution time of patched subCFG information extraction via angr: 0:00:00.628628
{'avresample_open': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400080>, <DisassemblerInsn "mov" for 0x400088>, <DisassemblerInsn "add" for 0x40008b>, <DisassemblerInsn "mov" for 0x40008f>, <DisassemblerInsn "mov" for 0x400097>, <DisassemblerInsn "call" for 0x40009b>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400007>, <DisassemblerInsn "mov" for 0x40000f>, <DisassemblerInsn "add" for 0x400012>, <DisassemblerInsn "mov" for 0x400016>, <DisassemblerInsn "mov" for 0x40001e>, <DisassemblerInsn "call" for 0x400022>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400027>, <DisassemblerInsn "mov" for 0x40002f>, <DisassemblerInsn "add" for 0x400032>, <DisassemblerInsn "mov" for 0x400036>, <DisassemblerInsn "mov" for 0x40003e>, <DisassemblerInsn "add" for 0x400041>, <DisassemblerInsn "cmp" for 0x400044>, <DisassemblerInsn "jae" for 0x400047>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400049>, <DisassemblerInsn "mov" for 0x400051>, <DisassemblerInsn "mov" for 0x400059>, <DisassemblerInsn "mov" for 0x40005c>, <DisassemblerInsn "lea" for 0x400061>, <DisassemblerInsn "mov" for 0x400068>, <DisassemblerInsn "call" for 0x40006a>]'}], 'cfg_block_detailed_info': [{'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~rcx, rax>', '<add~~rcx, 0x18>', '<mov~~qword ptr [rsp + 0xc0], rcx>', '<mov~~rdi, qword ptr [rax + 0x18]>', '<call~~0x500000>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0xf8>', '<mov~~qword ptr [rsp + 0xe8], rdi>', '<mov~~rax, rdi>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0xe0], rax>', '<mov~~rdi, qword ptr [rdi + 8]>', '<call~~0x500000>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xe8]>', '<mov~~rcx, rdi>', '<add~~rcx, 0x74>', '<mov~~qword ptr [rsp + 0xf0], rcx>', '<mov~~dword ptr [rdi + 0x74], eax>', '<add~~eax, -0x21>', '<cmp~~eax, -0x20>', '<jae~~0x400080>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe0]>', '<mov~~rdi, qword ptr [rsp + 0xe8]>', '<mov~~rcx, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x2010]>', '<mov~~al, 0>', '<call~~0x500008>']}], 'cfg_edge_info': [(0, 1), (1, 2), (1, 3)]}]}
{'avresample_open': [4194304, 4194343]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_before/O1/utils.o---before
The extraction of function: avresample_open
[4194304, 4194343]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 135 nodes and 219 edges in CFGEmulated.
It has 133 nodes and 259 edges in CDG.
It has 2358 nodes and 3189 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194304, 4194343]
{4194304, 4194817, 4196867, 4195859, 4196887, 4194839, 4195869, 4195366, 4194343, 4196907, 4195889, 4195379, 4196410, 4196927, 4195392, 4194377, 4195920, 4196949, 4195420, 4195933, 4196447, 4195425, 4194916, 4196457, 4195946, 4195437, 4194415, 4195964, 4194941, 4194432, 4195462, 4194957, 4195983, 4195475, 4194464, 4194979, 4194992, 4195505, 4195005, 4196032, 4195521, 4196547, 4194505, 4195537, 4195029, 4196069, 4196584, 4194543, 4195056, 4196082, 4196597, 4194560, 4196610, 4195081, 4196116, 4195606, 4195102, 4196643, 4195632, 4196153, 4196669, 4195143, 4196682, 4194639, 4196185, 4194666, 4196728, 4196220, 4194698, 4196756, 4195223, 4196257, 4195745, 4196776, 4195250, 4195764, 4196796, 4195263, 4196300, 4195279, 4196816, 4195292, 4195305, 4196847, 4196337, 4195829, 4195321, 4196347, 4195839}
[123, 64, 73, 83, 119, 15, 105, 50, 99, 70, 58, 130, 79, 109, 97, 60, 28, 42, 122, 100, 84, 51, 132, 88, 16, 38, 45, 44, 98, 41, 69, 91, 59, 20, 116, 52, 56, 10, 35, 8, 53, 89, 29, 117, 94, 27, 124, 87, 101, 2, 3, 80, 39, 66, 78, 4, 0, 7, 33, 126, 14, 134, 86, 24, 55, 112, 17, 74, 108, 30, 103, 65, 36, 48, 46, 23, 107, 68, 75, 37, 22, 82, 40, 72, 57, 32, 13, 128, 106, 19, 11, 61, 9, 90, 67, 77, 113, 21, 18, 115, 76]
The execution time of patched slicing information extraction via angr: 0:00:23.743813
{'avresample_open': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 123, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009d0>, <DisassemblerInsn "mov" for 0x4009d8>, <DisassemblerInsn "add" for 0x4009e3>, <DisassemblerInsn "call" for 0x4009ea>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40068d>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40067c>, <DisassemblerInsn "mov" for 0x400680>, <DisassemblerInsn "xor" for 0x400684>, <DisassemblerInsn "or" for 0x400687>, <DisassemblerInsn "test" for 0x400689>, <DisassemblerInsn "jne" for 0x40068b>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007a1>, <DisassemblerInsn "mov" for 0x4007a9>, <DisassemblerInsn "mov" for 0x4007b1>, <DisassemblerInsn "add" for 0x4007b4>, <DisassemblerInsn "mov" for 0x4007b8>, <DisassemblerInsn "mov" for 0x4007bd>, <DisassemblerInsn "mov" for 0x4007c0>, <DisassemblerInsn "mov" for 0x4007c2>, <DisassemblerInsn "call" for 0x4007c7>]'}, {'block_Idx': 119, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008c3>, <DisassemblerInsn "mov" for 0x4008c6>, <DisassemblerInsn "mov" for 0x4008ce>, <DisassemblerInsn "mov" for 0x4008d5>, <DisassemblerInsn "cmp" for 0x4008da>, <DisassemblerInsn "mov" for 0x4008de>, <DisassemblerInsn "je" for 0x4008e2>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000ef>, <DisassemblerInsn "mov" for 0x4000f4>, <DisassemblerInsn "jmp" for 0x4000fb>]'}, {'block_Idx': 105, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40085f>, <DisassemblerInsn "cmp" for 0x400864>, <DisassemblerInsn "je" for 0x400867>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400530>, <DisassemblerInsn "mov" for 0x400538>, <DisassemblerInsn "mov" for 0x400540>, <DisassemblerInsn "add" for 0x400546>, <DisassemblerInsn "cmp" for 0x40054a>, <DisassemblerInsn "cmove" for 0x40054d>, <DisassemblerInsn "mov" for 0x400551>, <DisassemblerInsn "mov" for 0x400556>, <DisassemblerInsn "mov" for 0x40055e>, <DisassemblerInsn "mov" for 0x400563>, <DisassemblerInsn "cmp" for 0x400565>, <DisassemblerInsn "setne" for 0x400568>, <DisassemblerInsn "and" for 0x40056b>, <DisassemblerInsn "movzx" for 0x40056e>, <DisassemblerInsn "mov" for 0x400571>, <DisassemblerInsn "mov" for 0x400577>, <DisassemblerInsn "add" for 0x40057a>, <DisassemblerInsn "mov" for 0x400581>, <DisassemblerInsn "cmp" for 0x400586>, <DisassemblerInsn "sete" for 0x40058d>, <DisassemblerInsn "mov" for 0x400590>, <DisassemblerInsn "xor" for 0x400594>, <DisassemblerInsn "test" for 0x400596>, <DisassemblerInsn "mov" for 0x400599>, <DisassemblerInsn "jne" for 0x40059d>]'}, {'block_Idx': 99, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007cc>, <DisassemblerInsn "mov" for 0x4007cf>, <DisassemblerInsn "mov" for 0x4007d7>, <DisassemblerInsn "mov" for 0x4007de>, <DisassemblerInsn "cmp" for 0x4007e3>, <DisassemblerInsn "mov" for 0x4007e7>, <DisassemblerInsn "je" for 0x4007eb>]'}, {'block_Idx': 70, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006e5>, <DisassemblerInsn "cmp" for 0x4006ed>, <DisassemblerInsn "je" for 0x4006f0>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400461>, <DisassemblerInsn "mov" for 0x400466>, <DisassemblerInsn "call" for 0x400468>]'}, {'block_Idx': 130, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a17>, <DisassemblerInsn "add" for 0x400a1f>, <DisassemblerInsn "call" for 0x400a26>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40061b>]'}, {'block_Idx': 109, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400869>, <DisassemblerInsn "mov" for 0x400871>, <DisassemblerInsn "mov" for 0x400879>, <DisassemblerInsn "mov" for 0x400881>, <DisassemblerInsn "mov" for 0x400886>, <DisassemblerInsn "mov" for 0x40088e>, <DisassemblerInsn "mov" for 0x400893>, <DisassemblerInsn "mov" for 0x400896>, <DisassemblerInsn "add" for 0x400899>, <DisassemblerInsn "cmp" for 0x40089d>, <DisassemblerInsn "cmove" for 0x4008a1>, <DisassemblerInsn "mov" for 0x4008a5>, <DisassemblerInsn "mov" for 0x4008a7>, <DisassemblerInsn "mov" for 0x4008a9>, <DisassemblerInsn "mov" for 0x4008ab>, <DisassemblerInsn "cmp" for 0x4008ae>, <DisassemblerInsn "sete" for 0x4008b5>, <DisassemblerInsn "and" for 0x4008b8>, <DisassemblerInsn "movzx" for 0x4008ba>, <DisassemblerInsn "call" for 0x4008be>]'}, {'block_Idx': 97, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400345>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40066a>, <DisassemblerInsn "mov" for 0x400672>, <DisassemblerInsn "mov" for 0x40067c>, <DisassemblerInsn "mov" for 0x400680>, <DisassemblerInsn "xor" for 0x400684>, <DisassemblerInsn "or" for 0x400687>, <DisassemblerInsn "test" for 0x400689>, <DisassemblerInsn "jne" for 0x40068b>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400406>, <DisassemblerInsn "mov" for 0x40040e>, <DisassemblerInsn "add" for 0x400411>, <DisassemblerInsn "mov" for 0x400418>, <DisassemblerInsn "cmp" for 0x40041d>, <DisassemblerInsn "je" for 0x400424>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400440>, <DisassemblerInsn "mov" for 0x400448>, <DisassemblerInsn "add" for 0x40044b>, <DisassemblerInsn "mov" for 0x40044f>, <DisassemblerInsn "mov" for 0x400454>, <DisassemblerInsn "call" for 0x400457>]'}, {'block_Idx': 122, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400902>, <DisassemblerInsn "mov" for 0x400905>, <DisassemblerInsn "mov" for 0x40090d>, <DisassemblerInsn "mov" for 0x400914>, <DisassemblerInsn "cmp" for 0x400919>, <DisassemblerInsn "mov" for 0x40091d>, <DisassemblerInsn "je" for 0x400921>]'}, {'block_Idx': 100, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40077c>, <DisassemblerInsn "mov" for 0x40077f>, <DisassemblerInsn "mov" for 0x400787>, <DisassemblerInsn "mov" for 0x40078e>, <DisassemblerInsn "cmp" for 0x400793>, <DisassemblerInsn "mov" for 0x400797>, <DisassemblerInsn "je" for 0x40079b>]'}, {'block_Idx': 84, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400759>, <DisassemblerInsn "mov" for 0x400761>, <DisassemblerInsn "mov" for 0x400769>, <DisassemblerInsn "mov" for 0x40076b>, <DisassemblerInsn "xor" for 0x40076e>, <DisassemblerInsn "lea" for 0x400770>, <DisassemblerInsn "call" for 0x400777>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40059f>]'}, {'block_Idx': 132, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a2b>, <DisassemblerInsn "add" for 0x400a33>, <DisassemblerInsn "call" for 0x400a3a>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40065d>, <DisassemblerInsn "mov" for 0x400662>, <DisassemblerInsn "jmp" for 0x400668>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40016a>, <DisassemblerInsn "mov" for 0x400172>, <DisassemblerInsn "mov" for 0x40017a>, <DisassemblerInsn "cmp" for 0x40017d>, <DisassemblerInsn "setne" for 0x400180>, <DisassemblerInsn "mov" for 0x400183>, <DisassemblerInsn "mov" for 0x40018a>, <DisassemblerInsn "mov" for 0x400192>, <DisassemblerInsn "mov" for 0x400199>, <DisassemblerInsn "movzx" for 0x4001a0>, <DisassemblerInsn "and" for 0x4001a3>, <DisassemblerInsn "mov" for 0x4001a6>, <DisassemblerInsn "or" for 0x4001ac>, <DisassemblerInsn "mov" for 0x4001ae>, <DisassemblerInsn "and" for 0x4001b5>, <DisassemblerInsn "movzx" for 0x4001b7>, <DisassemblerInsn "mov" for 0x4001ba>, <DisassemblerInsn "add" for 0x4001bd>, <DisassemblerInsn "mov" for 0x4001c4>, <DisassemblerInsn "mov" for 0x4001cc>, <DisassemblerInsn "mov" for 0x4001d2>, <DisassemblerInsn "add" for 0x4001d5>, <DisassemblerInsn "mov" for 0x4001d9>, <DisassemblerInsn "mov" for 0x4001e1>, <DisassemblerInsn "mov" for 0x4001e4>, <DisassemblerInsn "add" for 0x4001e7>, <DisassemblerInsn "mov" for 0x4001eb>, <DisassemblerInsn "mov" for 0x4001f3>, <DisassemblerInsn "cmp" for 0x4001f5>, <DisassemblerInsn "mov" for 0x4001f8>, <DisassemblerInsn "jne" for 0x4001ff>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400433>, <DisassemblerInsn "cmp" for 0x40043b>, <DisassemblerInsn "jne" for 0x40043e>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400516>, <DisassemblerInsn "mov" for 0x40051e>, <DisassemblerInsn "cmp" for 0x400526>, <DisassemblerInsn "mov" for 0x400529>, <DisassemblerInsn "jne" for 0x40052e>]'}, {'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004c1>, <DisassemblerInsn "mov" for 0x4004c9>, <DisassemblerInsn "call" for 0x4004cc>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400347>, <DisassemblerInsn "mov" for 0x40034b>, <DisassemblerInsn "sub" for 0x40034f>, <DisassemblerInsn "sete" for 0x400352>, <DisassemblerInsn "sub" for 0x400355>, <DisassemblerInsn "sete" for 0x400358>, <DisassemblerInsn "or" for 0x40035b>, <DisassemblerInsn "mov" for 0x40035d>, <DisassemblerInsn "mov" for 0x400362>, <DisassemblerInsn "test" for 0x400367>, <DisassemblerInsn "cmovne" for 0x40036a>, <DisassemblerInsn "mov" for 0x40036d>, <DisassemblerInsn "mov" for 0x400374>, <DisassemblerInsn "mov" for 0x40037c>, <DisassemblerInsn "mov" for 0x400384>, <DisassemblerInsn "mov" for 0x40038b>, <DisassemblerInsn "mov" for 0x40038d>, <DisassemblerInsn "call" for 0x400392>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004db>, <DisassemblerInsn "mov" for 0x4004e3>, <DisassemblerInsn "mov" for 0x4004eb>, <DisassemblerInsn "mov" for 0x4004f3>, <DisassemblerInsn "and" for 0x4004f8>, <DisassemblerInsn "movzx" for 0x4004fc>, <DisassemblerInsn "mov" for 0x400500>, <DisassemblerInsn "mov" for 0x400506>, <DisassemblerInsn "mov" for 0x400508>, <DisassemblerInsn "cmp" for 0x40050c>, <DisassemblerInsn "mov" for 0x40050f>, <DisassemblerInsn "jne" for 0x400514>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002d5>, <DisassemblerInsn "mov" for 0x4002d7>, <DisassemblerInsn "mov" for 0x4002db>, <DisassemblerInsn "cmp" for 0x4002e0>, <DisassemblerInsn "mov" for 0x4002e3>, <DisassemblerInsn "jl" for 0x4002ea>]'}, {'block_Idx': 91, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40031e>, <DisassemblerInsn "mov" for 0x400322>, <DisassemblerInsn "sub" for 0x400326>, <DisassemblerInsn "sete" for 0x400329>, <DisassemblerInsn "sub" for 0x40032c>, <DisassemblerInsn "sete" for 0x40032f>, <DisassemblerInsn "or" for 0x400332>, <DisassemblerInsn "mov" for 0x400334>, <DisassemblerInsn "test" for 0x400339>, <DisassemblerInsn "mov" for 0x40033c>, <DisassemblerInsn "jne" for 0x400343>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002bd>, <DisassemblerInsn "mov" for 0x4002c1>, <DisassemblerInsn "mov" for 0x4002c5>, <DisassemblerInsn "mov" for 0x4002c7>, <DisassemblerInsn "cmp" for 0x4002cb>, <DisassemblerInsn "cmovg" for 0x4002cd>, <DisassemblerInsn "call" for 0x4002d0>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003b2>, <DisassemblerInsn "cmp" for 0x4003ba>, <DisassemblerInsn "jne" for 0x4003bd>]'}, {'block_Idx': 116, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009bc>, <DisassemblerInsn "mov" for 0x4009c4>, <DisassemblerInsn "call" for 0x4009cb>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005a1>, <DisassemblerInsn "mov" for 0x4005a9>, <DisassemblerInsn "cmp" for 0x4005ab>, <DisassemblerInsn "mov" for 0x4005ae>, <DisassemblerInsn "jne" for 0x4005b2>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005cf>, <DisassemblerInsn "mov" for 0x4005d4>, <DisassemblerInsn "mov" for 0x4005dc>, <DisassemblerInsn "mov" for 0x4005e0>, <DisassemblerInsn "and" for 0x4005e4>, <DisassemblerInsn "movzx" for 0x4005e7>, <DisassemblerInsn "mov" for 0x4005ea>, <DisassemblerInsn "cmp" for 0x4005f0>, <DisassemblerInsn "je" for 0x4005f3>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c9>, <DisassemblerInsn "mov" for 0x4000d1>, <DisassemblerInsn "mov" for 0x4000d9>, <DisassemblerInsn "mov" for 0x4000dc>, <DisassemblerInsn "lea" for 0x4000e1>, <DisassemblerInsn "mov" for 0x4000e8>, <DisassemblerInsn "call" for 0x4000ea>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003f9>, <DisassemblerInsn "mov" for 0x4003fb>, <DisassemblerInsn "mov" for 0x400403>, <DisassemblerInsn "mov" for 0x400406>, <DisassemblerInsn "mov" for 0x40040e>, <DisassemblerInsn "add" for 0x400411>, <DisassemblerInsn "mov" for 0x400418>, <DisassemblerInsn "cmp" for 0x40041d>, <DisassemblerInsn "je" for 0x400424>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000a0>, <DisassemblerInsn "mov" for 0x4000a8>, <DisassemblerInsn "mov" for 0x4000af>, <DisassemblerInsn "add" for 0x4000b2>, <DisassemblerInsn "mov" for 0x4000b6>, <DisassemblerInsn "mov" for 0x4000be>, <DisassemblerInsn "add" for 0x4000c1>, <DisassemblerInsn "cmp" for 0x4000c4>, <DisassemblerInsn "jae" for 0x4000c7>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x40045c>, <DisassemblerInsn "jne" for 0x40045f>]'}, {'block_Idx': 89, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400650>, <DisassemblerInsn "mov" for 0x400655>, <DisassemblerInsn "jmp" for 0x40065b>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40028d>, <DisassemblerInsn "mov" for 0x40028f>, <DisassemblerInsn "mov" for 0x400297>, <DisassemblerInsn "mov" for 0x40029b>, <DisassemblerInsn "call" for 0x40029e>]'}, {'block_Idx': 117, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40093d>, <DisassemblerInsn "call" for 0x400945>]'}, {'block_Idx': 94, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400714>, <DisassemblerInsn "mov" for 0x400717>, <DisassemblerInsn "mov" for 0x40071f>, <DisassemblerInsn "mov" for 0x400726>, <DisassemblerInsn "cmp" for 0x40072b>, <DisassemblerInsn "mov" for 0x40072f>, <DisassemblerInsn "je" for 0x400733>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003e9>, <DisassemblerInsn "mov" for 0x4003f1>, <DisassemblerInsn "call" for 0x4003f4>]'}, {'block_Idx': 124, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40094a>, <DisassemblerInsn "mov" for 0x40094d>, <DisassemblerInsn "mov" for 0x400955>, <DisassemblerInsn "mov" for 0x40095c>, <DisassemblerInsn "xor" for 0x400961>, <DisassemblerInsn "cmp" for 0x400963>, <DisassemblerInsn "mov" for 0x400967>, <DisassemblerInsn "mov" for 0x40096b>, <DisassemblerInsn "jne" for 0x400972>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40061d>, <DisassemblerInsn "mov" for 0x400625>, <DisassemblerInsn "jmp" for 0x40062f>]'}, {'block_Idx': 101, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400994>, <DisassemblerInsn "add" for 0x40099c>, <DisassemblerInsn "call" for 0x4009a3>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400027>, <DisassemblerInsn "mov" for 0x40002f>, <DisassemblerInsn "add" for 0x400032>, <DisassemblerInsn "mov" for 0x400036>, <DisassemblerInsn "mov" for 0x40003e>, <DisassemblerInsn "add" for 0x400041>, <DisassemblerInsn "cmp" for 0x400044>, <DisassemblerInsn "jae" for 0x400047>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400049>, <DisassemblerInsn "mov" for 0x400051>, <DisassemblerInsn "mov" for 0x400059>, <DisassemblerInsn "mov" for 0x40005c>, <DisassemblerInsn "lea" for 0x400061>, <DisassemblerInsn "mov" for 0x400068>, <DisassemblerInsn "call" for 0x40006a>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400631>, <DisassemblerInsn "mov" for 0x400639>, <DisassemblerInsn "add" for 0x40063f>, <DisassemblerInsn "mov" for 0x400646>, <DisassemblerInsn "cmp" for 0x40064b>, <DisassemblerInsn "je" for 0x40064e>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002a3>, <DisassemblerInsn "mov" for 0x4002a7>, <DisassemblerInsn "call" for 0x4002ab>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4005fd>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006c0>, <DisassemblerInsn "mov" for 0x4006c3>, <DisassemblerInsn "mov" for 0x4006cb>, <DisassemblerInsn "mov" for 0x4006d2>, <DisassemblerInsn "cmp" for 0x4006d7>, <DisassemblerInsn "mov" for 0x4006db>, <DisassemblerInsn "je" for 0x4006df>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400080>, <DisassemblerInsn "mov" for 0x400088>, <DisassemblerInsn "add" for 0x40008b>, <DisassemblerInsn "mov" for 0x40008f>, <DisassemblerInsn "mov" for 0x400097>, <DisassemblerInsn "call" for 0x40009b>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400007>, <DisassemblerInsn "mov" for 0x40000f>, <DisassemblerInsn "add" for 0x400012>, <DisassemblerInsn "mov" for 0x400016>, <DisassemblerInsn "mov" for 0x40001e>, <DisassemblerInsn "call" for 0x400022>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40006f>, <DisassemblerInsn "mov" for 0x400074>, <DisassemblerInsn "jmp" for 0x40007b>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400426>, <DisassemblerInsn "cmp" for 0x40042e>, <DisassemblerInsn "jne" for 0x400431>]'}, {'block_Idx': 126, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009ef>, <DisassemblerInsn "add" for 0x4009f7>, <DisassemblerInsn "call" for 0x4009fe>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40018a>, <DisassemblerInsn "mov" for 0x400192>, <DisassemblerInsn "mov" for 0x400199>, <DisassemblerInsn "movzx" for 0x4001a0>, <DisassemblerInsn "and" for 0x4001a3>, <DisassemblerInsn "mov" for 0x4001a6>, <DisassemblerInsn "or" for 0x4001ac>, <DisassemblerInsn "mov" for 0x4001ae>, <DisassemblerInsn "and" for 0x4001b5>, <DisassemblerInsn "movzx" for 0x4001b7>, <DisassemblerInsn "mov" for 0x4001ba>, <DisassemblerInsn "add" for 0x4001bd>, <DisassemblerInsn "mov" for 0x4001c4>, <DisassemblerInsn "mov" for 0x4001cc>, <DisassemblerInsn "mov" for 0x4001d2>, <DisassemblerInsn "add" for 0x4001d5>, <DisassemblerInsn "mov" for 0x4001d9>, <DisassemblerInsn "mov" for 0x4001e1>, <DisassemblerInsn "mov" for 0x4001e4>, <DisassemblerInsn "add" for 0x4001e7>, <DisassemblerInsn "mov" for 0x4001eb>, <DisassemblerInsn "mov" for 0x4001f3>, <DisassemblerInsn "cmp" for 0x4001f5>, <DisassemblerInsn "mov" for 0x4001f8>, <DisassemblerInsn "jne" for 0x4001ff>]'}, {'block_Idx': 134, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a3f>, <DisassemblerInsn "mov" for 0x400a44>, <DisassemblerInsn "mov" for 0x400a48>, <DisassemblerInsn "mov" for 0x400a4e>, <DisassemblerInsn "mov" for 0x400a55>, <DisassemblerInsn "add" for 0x400a5c>, <DisassemblerInsn "ret" for 0x400a63>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400978>, <DisassemblerInsn "mov" for 0x400980>, <DisassemblerInsn "mov" for 0x400984>, <DisassemblerInsn "add" for 0x400988>, <DisassemblerInsn "call" for 0x40098f>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003dc>, <DisassemblerInsn "cmp" for 0x4003e4>, <DisassemblerInsn "jne" for 0x4003e7>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4004d1>, <DisassemblerInsn "sete" for 0x4004d4>, <DisassemblerInsn "mov" for 0x4004d7>, <DisassemblerInsn "mov" for 0x4004db>, <DisassemblerInsn "mov" for 0x4004e3>, <DisassemblerInsn "mov" for 0x4004eb>, <DisassemblerInsn "mov" for 0x4004f3>, <DisassemblerInsn "and" for 0x4004f8>, <DisassemblerInsn "movzx" for 0x4004fc>, <DisassemblerInsn "mov" for 0x400500>, <DisassemblerInsn "mov" for 0x400506>, <DisassemblerInsn "mov" for 0x400508>, <DisassemblerInsn "cmp" for 0x40050c>, <DisassemblerInsn "mov" for 0x40050f>, <DisassemblerInsn "jne" for 0x400514>]'}, {'block_Idx': 112, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400923>, <DisassemblerInsn "xor" for 0x40092b>, <DisassemblerInsn "cmp" for 0x40092d>, <DisassemblerInsn "mov" for 0x400930>, <DisassemblerInsn "je" for 0x400937>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400201>, <DisassemblerInsn "cmp" for 0x400209>, <DisassemblerInsn "setne" for 0x40020d>, <DisassemblerInsn "mov" for 0x400210>, <DisassemblerInsn "mov" for 0x400217>, <DisassemblerInsn "mov" for 0x40021f>, <DisassemblerInsn "mov" for 0x400226>, <DisassemblerInsn "and" for 0x40022d>, <DisassemblerInsn "movzx" for 0x400230>, <DisassemblerInsn "mov" for 0x400233>, <DisassemblerInsn "add" for 0x400236>, <DisassemblerInsn "mov" for 0x40023d>, <DisassemblerInsn "mov" for 0x400245>, <DisassemblerInsn "mov" for 0x40024b>, <DisassemblerInsn "add" for 0x40024e>, <DisassemblerInsn "mov" for 0x400252>, <DisassemblerInsn "cmp" for 0x40025a>, <DisassemblerInsn "jne" for 0x40025e>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400374>, <DisassemblerInsn "mov" for 0x40037c>, <DisassemblerInsn "mov" for 0x400384>, <DisassemblerInsn "mov" for 0x40038b>, <DisassemblerInsn "mov" for 0x40038d>, <DisassemblerInsn "call" for 0x400392>]'}, {'block_Idx': 108, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008e8>, <DisassemblerInsn "cmp" for 0x4008f0>, <DisassemblerInsn "je" for 0x4008f3>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003cf>, <DisassemblerInsn "mov" for 0x4003d1>, <DisassemblerInsn "mov" for 0x4003d9>, <DisassemblerInsn "mov" for 0x4003dc>, <DisassemblerInsn "cmp" for 0x4003e4>, <DisassemblerInsn "jne" for 0x4003e7>]'}, {'block_Idx': 103, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007f1>, <DisassemblerInsn "cmp" for 0x4007f6>, <DisassemblerInsn "je" for 0x4007f9>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40068f>, <DisassemblerInsn "mov" for 0x400697>, <DisassemblerInsn "mov" for 0x40069f>, <DisassemblerInsn "mov" for 0x4006a7>, <DisassemblerInsn "mov" for 0x4006a9>, <DisassemblerInsn "cmp" for 0x4006ab>, <DisassemblerInsn "cmovg" for 0x4006ad>, <DisassemblerInsn "mov" for 0x4006b0>, <DisassemblerInsn "xor" for 0x4006b2>, <DisassemblerInsn "lea" for 0x4006b4>, <DisassemblerInsn "call" for 0x4006bb>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400486>, <DisassemblerInsn "cmp" for 0x40048e>, <DisassemblerInsn "je" for 0x400491>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002b0>, <DisassemblerInsn "mov" for 0x4002b4>, <DisassemblerInsn "call" for 0x4002b8>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400556>, <DisassemblerInsn "mov" for 0x40055e>, <DisassemblerInsn "mov" for 0x400563>, <DisassemblerInsn "cmp" for 0x400565>, <DisassemblerInsn "setne" for 0x400568>, <DisassemblerInsn "and" for 0x40056b>, <DisassemblerInsn "movzx" for 0x40056e>, <DisassemblerInsn "mov" for 0x400571>, <DisassemblerInsn "mov" for 0x400577>, <DisassemblerInsn "add" for 0x40057a>, <DisassemblerInsn "mov" for 0x400581>, <DisassemblerInsn "cmp" for 0x400586>, <DisassemblerInsn "sete" for 0x40058d>, <DisassemblerInsn "mov" for 0x400590>, <DisassemblerInsn "xor" for 0x400594>, <DisassemblerInsn "test" for 0x400596>, <DisassemblerInsn "mov" for 0x400599>, <DisassemblerInsn "jne" for 0x40059d>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003bf>, <DisassemblerInsn "mov" for 0x4003c7>, <DisassemblerInsn "call" for 0x4003ca>]'}, {'block_Idx': 107, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009a8>, <DisassemblerInsn "add" for 0x4009b0>, <DisassemblerInsn "call" for 0x4009b7>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40046d>, <DisassemblerInsn "mov" for 0x40046f>, <DisassemblerInsn "mov" for 0x400477>, <DisassemblerInsn "mov" for 0x400479>, <DisassemblerInsn "cmp" for 0x400481>, <DisassemblerInsn "jne" for 0x400484>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002f0>, <DisassemblerInsn "mov" for 0x4002f8>, <DisassemblerInsn "cmp" for 0x4002fd>, <DisassemblerInsn "mov" for 0x400300>, <DisassemblerInsn "jne" for 0x400307>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400493>, <DisassemblerInsn "mov" for 0x40049b>, <DisassemblerInsn "mov" for 0x4004a3>, <DisassemblerInsn "cmp" for 0x4004a6>, <DisassemblerInsn "setne" for 0x4004a8>, <DisassemblerInsn "mov" for 0x4004ab>, <DisassemblerInsn "jmp" for 0x4004af>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40027d>, <DisassemblerInsn "mov" for 0x400285>, <DisassemblerInsn "call" for 0x400288>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400309>, <DisassemblerInsn "mov" for 0x40030d>, <DisassemblerInsn "cmp" for 0x400312>, <DisassemblerInsn "mov" for 0x400315>, <DisassemblerInsn "jge" for 0x40031c>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004b1>, <DisassemblerInsn "xor" for 0x4004b6>, <DisassemblerInsn "cmp" for 0x4004b8>, <DisassemblerInsn "mov" for 0x4004bb>, <DisassemblerInsn "je" for 0x4004bf>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400613>, <DisassemblerInsn "test" for 0x400617>, <DisassemblerInsn "jne" for 0x400619>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005b4>, <DisassemblerInsn "mov" for 0x4005b8>, <DisassemblerInsn "mov" for 0x4005bd>, <DisassemblerInsn "test" for 0x4005bf>, <DisassemblerInsn "setne" for 0x4005c1>, <DisassemblerInsn "test" for 0x4005c4>, <DisassemblerInsn "setne" for 0x4005c6>, <DisassemblerInsn "and" for 0x4005c9>, <DisassemblerInsn "mov" for 0x4005cb>, <DisassemblerInsn "mov" for 0x4005cf>, <DisassemblerInsn "mov" for 0x4005d4>, <DisassemblerInsn "mov" for 0x4005dc>, <DisassemblerInsn "mov" for 0x4005e0>, <DisassemblerInsn "and" for 0x4005e4>, <DisassemblerInsn "movzx" for 0x4005e7>, <DisassemblerInsn "mov" for 0x4005ea>, <DisassemblerInsn "cmp" for 0x4005f0>, <DisassemblerInsn "je" for 0x4005f3>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400479>, <DisassemblerInsn "cmp" for 0x400481>, <DisassemblerInsn "jne" for 0x400484>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40014f>, <DisassemblerInsn "mov" for 0x400157>, <DisassemblerInsn "cmp" for 0x400159>, <DisassemblerInsn "mov" for 0x400161>, <DisassemblerInsn "jne" for 0x400168>]'}, {'block_Idx': 128, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a03>, <DisassemblerInsn "add" for 0x400a0b>, <DisassemblerInsn "call" for 0x400a12>]'}, {'block_Idx': 106, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007fb>, <DisassemblerInsn "mov" for 0x400803>, <DisassemblerInsn "mov" for 0x40080b>, <DisassemblerInsn "mov" for 0x400813>, <DisassemblerInsn "mov" for 0x40081b>, <DisassemblerInsn "mov" for 0x40081d>, <DisassemblerInsn "mov" for 0x400820>, <DisassemblerInsn "mov" for 0x400822>, <DisassemblerInsn "cmp" for 0x400825>, <DisassemblerInsn "sete" for 0x40082c>, <DisassemblerInsn "and" for 0x40082f>, <DisassemblerInsn "movzx" for 0x400831>, <DisassemblerInsn "call" for 0x400835>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400264>, <DisassemblerInsn "mov" for 0x40026b>, <DisassemblerInsn "or" for 0x400272>, <DisassemblerInsn "test" for 0x400274>, <DisassemblerInsn "jne" for 0x400276>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400100>, <DisassemblerInsn "mov" for 0x400107>, <DisassemblerInsn "mov" for 0x40010f>, <DisassemblerInsn "mov" for 0x400117>, <DisassemblerInsn "cmp" for 0x400119>, <DisassemblerInsn "setg" for 0x40011b>, <DisassemblerInsn "mov" for 0x40011f>, <DisassemblerInsn "cmp" for 0x400127>, <DisassemblerInsn "mov" for 0x400129>, <DisassemblerInsn "cmovg" for 0x40012b>, <DisassemblerInsn "mov" for 0x40012e>, <DisassemblerInsn "and" for 0x400131>, <DisassemblerInsn "movzx" for 0x400135>, <DisassemblerInsn "mov" for 0x400139>, <DisassemblerInsn "cmp" for 0x40013f>, <DisassemblerInsn "setl" for 0x400141>, <DisassemblerInsn "cmp" for 0x400144>, <DisassemblerInsn "mov" for 0x400146>, <DisassemblerInsn "jne" for 0x40014d>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005f5>, <DisassemblerInsn "test" for 0x4005f9>, <DisassemblerInsn "jne" for 0x4005fb>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a55>, <DisassemblerInsn "add" for 0x400a5c>, <DisassemblerInsn "ret" for 0x400a63>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400397>, <DisassemblerInsn "mov" for 0x40039c>, <DisassemblerInsn "mov" for 0x40039f>, <DisassemblerInsn "lea" for 0x4003a4>, <DisassemblerInsn "mov" for 0x4003ab>, <DisassemblerInsn "call" for 0x4003ad>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005ff>, <DisassemblerInsn "mov" for 0x400607>, <DisassemblerInsn "jmp" for 0x400611>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006f2>, <DisassemblerInsn "mov" for 0x4006fa>, <DisassemblerInsn "mov" for 0x400702>, <DisassemblerInsn "mov" for 0x400704>, <DisassemblerInsn "xor" for 0x400706>, <DisassemblerInsn "lea" for 0x400708>, <DisassemblerInsn "call" for 0x40070f>]'}, {'block_Idx': 113, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008f5>, <DisassemblerInsn "call" for 0x4008fd>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400278>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400217>, <DisassemblerInsn "mov" for 0x40021f>, <DisassemblerInsn "mov" for 0x400226>, <DisassemblerInsn "and" for 0x40022d>, <DisassemblerInsn "movzx" for 0x400230>, <DisassemblerInsn "mov" for 0x400233>, <DisassemblerInsn "add" for 0x400236>, <DisassemblerInsn "mov" for 0x40023d>, <DisassemblerInsn "mov" for 0x400245>, <DisassemblerInsn "mov" for 0x40024b>, <DisassemblerInsn "add" for 0x40024e>, <DisassemblerInsn "mov" for 0x400252>, <DisassemblerInsn "cmp" for 0x40025a>, <DisassemblerInsn "jne" for 0x40025e>]'}, {'block_Idx': 115, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40083a>, <DisassemblerInsn "mov" for 0x40083d>, <DisassemblerInsn "mov" for 0x400845>, <DisassemblerInsn "mov" for 0x40084c>, <DisassemblerInsn "cmp" for 0x400851>, <DisassemblerInsn "mov" for 0x400855>, <DisassemblerInsn "je" for 0x400859>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400739>, <DisassemblerInsn "mov" for 0x400741>, <DisassemblerInsn "add" for 0x400744>, <DisassemblerInsn "mov" for 0x40074b>, <DisassemblerInsn "cmp" for 0x400750>, <DisassemblerInsn "je" for 0x400757>]'}], 'cfg_block_detailed_info': [{'block_Idx': 123, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xe8]>', '<mov~~qword ptr [rdi + 0xb8], 0>', '<add~~rdi, 0xc0>', '<call~~0x500068>']}, {'block_Idx': 64, 'blockInsts': ['<jmp~~0x4006e5>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x37]>', '<mov~~cl, byte ptr [rsp + 0x42]>', '<xor~~cl, 1>', '<or~~al, cl>', '<test~~al, 1>', '<jne~~0x40068f>']}, {'block_Idx': 83, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xe8]>', '<mov~~rax, qword ptr [rsp + 0xd0]>', '<mov~~rdx, rcx>', '<add~~rdx, 0x20>', '<mov~~qword ptr [rsp + 0x10], rdx>', '<mov~~edi, dword ptr [rcx + 0x20]>', '<mov~~esi, dword ptr [rax]>', '<mov~~edx, 0x400>', '<call~~0x500038>']}, {'block_Idx': 119, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~qword ptr [rax + 0xc8], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x24], eax>', '<je~~0x400978>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0xdc], eax>', '<jmp~~0x400a55>']}, {'block_Idx': 105, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x4008e8>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x90]>', '<mov~~rcx, qword ptr [rsp + 0xe8]>', '<mov~~edx, dword ptr [rcx + 0x90]>', '<add~~rcx, 0x10>', '<cmp~~edx, 0>', '<cmove~~rax, rcx>', '<mov~~qword ptr [rsp + 0x48], rax>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~rcx, qword ptr [rsp + 0x48]>', '<mov~~ecx, dword ptr [rcx]>', '<cmp~~ecx, dword ptr [rax + 0x20]>', '<setne~~cl>', '<and~~cl, 1>', '<movzx~~ecx, cl>', '<mov~~dword ptr [rax + 0x94], ecx>', '<mov~~rcx, rax>', '<add~~rcx, 0x90>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<cmp~~dword ptr [rax + 0x90], 0>', '<sete~~cl>', '<mov~~byte ptr [rsp + 0x42], cl>', '<xor~~eax, eax>', '<test~~cl, 1>', '<mov~~byte ptr [rsp + 0x43], al>', '<jne~~0x4005a1>']}, {'block_Idx': 99, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~qword ptr [rax + 0xb8], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x24], eax>', '<je~~0x400978>']}, {'block_Idx': 70, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x88]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x400739>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x58]>', '<mov~~edi, dword ptr [rax]>', '<call~~0x500010>']}, {'block_Idx': 130, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xe8]>', '<add~~rdi, 0xd8>', '<call~~0x500078>']}, {'block_Idx': 79, 'blockInsts': ['<jmp~~0x40061d>']}, {'block_Idx': 109, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xe8]>', '<mov~~rax, qword ptr [rsp + 0xb0]>', '<mov~~rcx, qword ptr [rsp + 0xd0]>', '<mov~~rsi, qword ptr [rsp + 0x10]>', '<mov~~rdx, qword ptr [rsp + 0x90]>', '<mov~~r8, qword ptr [rsp + 0x38]>', '<mov~~r9d, dword ptr [r8]>', '<mov~~r8, rdi>', '<add~~r8, 0x10>', '<cmp~~r9d, 0>', '<cmove~~rdx, r8>', '<mov~~edx, dword ptr [rdx]>', '<mov~~esi, dword ptr [rsi]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~r8d, dword ptr [rax]>', '<cmp~~dword ptr [rdi + 0xf4], 4>', '<sete~~al>', '<and~~al, 1>', '<movzx~~r9d, al>', '<call~~0x500040>']}, {'block_Idx': 97, 'blockInsts': ['<jmp~~0x400374>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~dword ptr [rax + 0xf4], 0>', '<mov~~al, byte ptr [rsp + 0x37]>', '<mov~~cl, byte ptr [rsp + 0x42]>', '<xor~~cl, 1>', '<or~~al, cl>', '<test~~al, 1>', '<jne~~0x40068f>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~rcx, rax>', '<add~~rcx, 0xf0>', '<mov~~qword ptr [rsp + 0x60], rcx>', '<cmp~~dword ptr [rax + 0xf0], 0>', '<je~~0x400479>']}, {'block_Idx': 42, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~rcx, rax>', '<add~~rcx, 0x20>', '<mov~~qword ptr [rsp + 0x58], rcx>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500028>']}, {'block_Idx': 122, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~qword ptr [rax + 0xd0], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x24], eax>', '<je~~0x400978>']}, {'block_Idx': 100, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~qword ptr [rax + 0xb0], rcx>', '<mov~~eax, 0xffffffea>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x24], eax>', '<je~~0x400978>']}, {'block_Idx': 84, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~rcx, qword ptr [rsp + 0xd0]>', '<mov~~edi, dword ptr [rcx]>', '<mov~~edx, dword ptr [rax + 0x20]>', '<xor~~esi, esi>', '<lea~~rcx, [rip + 0x198a]>', '<call~~0x500030>']}, {'block_Idx': 51, 'blockInsts': ['<jmp~~0x4005cf>']}, {'block_Idx': 132, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xe8]>', '<add~~rdi, 0xe8>', '<call~~0x500080>']}, {'block_Idx': 88, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax], 3>', '<jmp~~0x40067c>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xc0]>', '<mov~~rax, qword ptr [rsp + 0xe0]>', '<mov~~rax, qword ptr [rax]>', '<cmp~~rax, qword ptr [rcx]>', '<setne~~al>', '<mov~~byte ptr [rsp + 0xbf], al>', '<mov~~rdx, qword ptr [rsp + 0xe8]>', '<mov~~al, byte ptr [rsp + 0xbe]>', '<mov~~cl, byte ptr [rsp + 0xbf]>', '<movzx~~esi, cl>', '<and~~esi, 1>', '<mov~~dword ptr [rdx + 0x84], esi>', '<or~~al, cl>', '<mov~~byte ptr [rsp + 0x9f], al>', '<and~~al, 1>', '<movzx~~eax, al>', '<mov~~rcx, rdx>', '<add~~rcx, 0x88>', '<mov~~qword ptr [rsp + 0xa0], rcx>', '<mov~~dword ptr [rdx + 0x88], eax>', '<mov~~rax, rdx>', '<add~~rax, 0x14>', '<mov~~qword ptr [rsp + 0xa8], rax>', '<mov~~ecx, dword ptr [rdx + 0x14]>', '<mov~~rax, rdx>', '<add~~rax, 0x24>', '<mov~~qword ptr [rsp + 0xb0], rax>', '<mov~~al, 1>', '<cmp~~ecx, dword ptr [rdx + 0x24]>', '<mov~~byte ptr [rsp + 0xbd], al>', '<jne~~0x400217>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x88]>', '<cmp~~dword ptr [rax], 0>', '<jne~~0x400479>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x90]>', '<mov~~rcx, qword ptr [rsp + 0xa0]>', '<cmp~~dword ptr [rcx], 0>', '<mov~~qword ptr [rsp + 0x48], rax>', '<jne~~0x400556>']}, {'block_Idx': 44, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500028>']}, {'block_Idx': 98, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x74]>', '<mov~~ecx, dword ptr [rsp + 0x78]>', '<sub~~ecx, 8>', '<sete~~dl>', '<sub~~eax, 8>', '<sete~~al>', '<or~~dl, al>', '<mov~~eax, 7>', '<mov~~ecx, 9>', '<test~~dl, 1>', '<cmovne~~eax, ecx>', '<mov~~dword ptr [rsp + 0x80], eax>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~rcx, qword ptr [rsp + 0x90]>', '<mov~~edi, dword ptr [rsp + 0x80]>', '<mov~~dword ptr [rcx], edi>', '<mov~~qword ptr [rsp + 0x68], rax>', '<call~~0x500020>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x90]>', '<mov~~rcx, qword ptr [rsp + 0x88]>', '<mov~~rdx, qword ptr [rsp + 0xe8]>', '<mov~~sil, byte ptr [rsp + 0x57]>', '<and~~sil, 1>', '<movzx~~esi, sil>', '<mov~~dword ptr [rdx + 0x90], esi>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x44], ecx>', '<cmp~~ecx, 0>', '<mov~~qword ptr [rsp + 0x48], rax>', '<jne~~0x400556>']}, {'block_Idx': 69, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x7c], ecx>', '<mov~~eax, 6>', '<cmp~~ecx, 3>', '<mov~~dword ptr [rsp + 0x80], eax>', '<jl~~0x400374>']}, {'block_Idx': 91, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x74]>', '<mov~~ecx, dword ptr [rsp + 0x78]>', '<sub~~ecx, 7>', '<sete~~cl>', '<sub~~eax, 7>', '<sete~~al>', '<or~~cl, al>', '<mov~~eax, 8>', '<test~~cl, 1>', '<mov~~dword ptr [rsp + 0x80], eax>', '<jne~~0x400347>']}, {'block_Idx': 59, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x70]>', '<mov~~edi, dword ptr [rsp + 0x74]>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x78]>', '<cmp~~ecx, edx>', '<cmovg~~edi, eax>', '<call~~0x500018>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xf0]>', '<cmp~~dword ptr [rax], 1>', '<jne~~0x4003dc>']}, {'block_Idx': 116, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~rdi, qword ptr [rax + 0xb8]>', '<call~~0x500060>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xa0]>', '<mov~~al, 1>', '<cmp~~dword ptr [rcx], 0>', '<mov~~byte ptr [rsp + 0x43], al>', '<jne~~0x4005cf>']}, {'block_Idx': 56, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x60]>', '<mov~~rcx, qword ptr [rsp + 0xe8]>', '<mov~~dl, byte ptr [rsp + 0x43]>', '<mov~~byte ptr [rsp + 0x37], dl>', '<and~~dl, 1>', '<movzx~~edx, dl>', '<mov~~dword ptr [rcx + 0x98], edx>', '<cmp~~dword ptr [rax], 0>', '<je~~0x40066a>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xc0]>', '<mov~~rdi, qword ptr [rsp + 0xe8]>', '<mov~~rcx, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x1fb3]>', '<mov~~al, 0>', '<call~~0x500008>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~dword ptr [rax + 0x20], ecx>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~rcx, rax>', '<add~~rcx, 0xf0>', '<mov~~qword ptr [rsp + 0x60], rcx>', '<cmp~~dword ptr [rax + 0xf0], 0>', '<je~~0x400479>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xe8]>', '<mov~~dword ptr [rsp + 0xcc], eax>', '<mov~~rdx, rcx>', '<add~~rdx, 0x78>', '<mov~~qword ptr [rsp + 0xd0], rdx>', '<mov~~dword ptr [rcx + 0x78], eax>', '<add~~eax, -0x21>', '<cmp~~eax, -0x20>', '<jae~~0x400100>']}, {'block_Idx': 53, 'blockInsts': ['<cmp~~eax, 0>', '<jne~~0x400479>']}, {'block_Idx': 89, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x28]>', '<mov~~dword ptr [rax], 4>', '<jmp~~0x40067c>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~dword ptr [rsp + 0x78], ecx>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500010>']}, {'block_Idx': 117, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xe8]>', '<call~~0x500050>']}, {'block_Idx': 94, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<mov~~eax, 0xffffffea>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x24], eax>', '<je~~0x400978>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500010>']}, {'block_Idx': 124, 'blockInsts': ['<mov~~rdx, rax>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~qword ptr [rax + 0xd8], rdx>', '<mov~~ecx, 0xfffffff4>', '<xor~~eax, eax>', '<cmp~~rdx, 0>', '<mov~~dword ptr [rsp + 0x24], ecx>', '<mov~~dword ptr [rsp + 0xdc], eax>', '<jne~~0x400a55>']}, {'block_Idx': 87, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~dword ptr [rax + 0xf4], 2>', '<jmp~~0x40067c>']}, {'block_Idx': 101, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xe8]>', '<add~~rdi, 0xa8>', '<call~~0x500058>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xe8]>', '<mov~~rcx, rdi>', '<add~~rcx, 0x74>', '<mov~~qword ptr [rsp + 0xf0], rcx>', '<mov~~dword ptr [rdi + 0x74], eax>', '<add~~eax, -0x21>', '<cmp~~eax, -0x20>', '<jae~~0x400080>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe0]>', '<mov~~rdi, qword ptr [rsp + 0xe8]>', '<mov~~rcx, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x2010]>', '<mov~~al, 0>', '<call~~0x500008>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xe8]>', '<mov~~eax, dword ptr [rcx + 0x94]>', '<add~~rcx, 0xf4>', '<mov~~qword ptr [rsp + 0x28], rcx>', '<cmp~~eax, 0>', '<je~~0x40065d>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0x78]>', '<mov~~dword ptr [rsp + 0x74], eax>', '<call~~0x500018>']}, {'block_Idx': 66, 'blockInsts': ['<jmp~~0x400613>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~qword ptr [rax + 0xa0], rcx>', '<mov~~eax, 0xffffffea>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x24], eax>', '<je~~0x400978>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~rcx, rax>', '<add~~rcx, 0x18>', '<mov~~qword ptr [rsp + 0xc0], rcx>', '<mov~~rdi, qword ptr [rax + 0x18]>', '<call~~0x500000>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0xf8>', '<mov~~qword ptr [rsp + 0xe8], rdi>', '<mov~~rax, rdi>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0xe0], rax>', '<mov~~rdi, qword ptr [rdi + 8]>', '<call~~0x500000>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0xdc], eax>', '<jmp~~0x400a55>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa0]>', '<cmp~~dword ptr [rax], 0>', '<jne~~0x400479>']}, {'block_Idx': 126, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xe8]>', '<add~~rdi, 0xc8>', '<call~~0x500068>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xe8]>', '<mov~~al, byte ptr [rsp + 0xbe]>', '<mov~~cl, byte ptr [rsp + 0xbf]>', '<movzx~~esi, cl>', '<and~~esi, 1>', '<mov~~dword ptr [rdx + 0x84], esi>', '<or~~al, cl>', '<mov~~byte ptr [rsp + 0x9f], al>', '<and~~al, 1>', '<movzx~~eax, al>', '<mov~~rcx, rdx>', '<add~~rcx, 0x88>', '<mov~~qword ptr [rsp + 0xa0], rcx>', '<mov~~dword ptr [rdx + 0x88], eax>', '<mov~~rax, rdx>', '<add~~rax, 0x14>', '<mov~~qword ptr [rsp + 0xa8], rax>', '<mov~~ecx, dword ptr [rdx + 0x14]>', '<mov~~rax, rdx>', '<add~~rax, 0x24>', '<mov~~qword ptr [rsp + 0xb0], rax>', '<mov~~al, 1>', '<cmp~~ecx, dword ptr [rdx + 0x24]>', '<mov~~byte ptr [rsp + 0xbd], al>', '<jne~~0x400217>']}, {'block_Idx': 134, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x60]>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<mov~~dword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0xdc], eax>', '<mov~~eax, dword ptr [rsp + 0xdc]>', '<add~~rsp, 0xf8>', '<ret~~>']}, {'block_Idx': 86, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xe8]>', '<mov~~eax, dword ptr [rsp + 0x24]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<add~~rdi, 0xa0>', '<call~~0x500058>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd0]>', '<cmp~~dword ptr [rax], 1>', '<jne~~0x400406>']}, {'block_Idx': 55, 'blockInsts': ['<cmp~~eax, 0>', '<sete~~al>', '<mov~~byte ptr [rsp + 0x57], al>', '<mov~~rax, qword ptr [rsp + 0x90]>', '<mov~~rcx, qword ptr [rsp + 0x88]>', '<mov~~rdx, qword ptr [rsp + 0xe8]>', '<mov~~sil, byte ptr [rsp + 0x57]>', '<and~~sil, 1>', '<movzx~~esi, sil>', '<mov~~dword ptr [rdx + 0x90], esi>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x44], ecx>', '<cmp~~ecx, 0>', '<mov~~qword ptr [rsp + 0x48], rax>', '<jne~~0x400556>']}, {'block_Idx': 112, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xa0]>', '<xor~~eax, eax>', '<cmp~~dword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0xdc], eax>', '<je~~0x400a55>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<cmp~~dword ptr [rax + 0x4c], 0>', '<setne~~al>', '<mov~~byte ptr [rsp + 0xbd], al>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~cl, byte ptr [rsp + 0xbd]>', '<mov~~byte ptr [rsp + 0x87], cl>', '<and~~cl, 1>', '<movzx~~ecx, cl>', '<mov~~rdx, rax>', '<add~~rdx, 0x8c>', '<mov~~qword ptr [rsp + 0x88], rdx>', '<mov~~dword ptr [rax + 0x8c], ecx>', '<mov~~rcx, rax>', '<add~~rcx, 0x28>', '<mov~~qword ptr [rsp + 0x90], rcx>', '<cmp~~dword ptr [rax + 0x28], -1>', '<jne~~0x4003b2>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~rcx, qword ptr [rsp + 0x90]>', '<mov~~edi, dword ptr [rsp + 0x80]>', '<mov~~dword ptr [rcx], edi>', '<mov~~qword ptr [rsp + 0x68], rax>', '<call~~0x500020>']}, {'block_Idx': 108, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x88]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x400923>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~dword ptr [rax + 0x10], ecx>', '<mov~~rax, qword ptr [rsp + 0xd0]>', '<cmp~~dword ptr [rax], 1>', '<jne~~0x400406>']}, {'block_Idx': 103, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x38]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x40085f>']}, {'block_Idx': 65, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x90]>', '<mov~~rdx, qword ptr [rsp + 0xd0]>', '<mov~~rcx, qword ptr [rsp + 0xf0]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~edi, dword ptr [rdx]>', '<cmp~~ecx, edi>', '<cmovg~~edi, ecx>', '<mov~~edx, dword ptr [rax]>', '<xor~~esi, esi>', '<lea~~rcx, [rip + 0x1a28]>', '<call~~0x500030>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xa0]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x4004b1>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0x74]>', '<mov~~dword ptr [rsp + 0x70], eax>', '<call~~0x500018>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~rcx, qword ptr [rsp + 0x48]>', '<mov~~ecx, dword ptr [rcx]>', '<cmp~~ecx, dword ptr [rax + 0x20]>', '<setne~~cl>', '<and~~cl, 1>', '<movzx~~ecx, cl>', '<mov~~dword ptr [rax + 0x94], ecx>', '<mov~~rcx, rax>', '<add~~rcx, 0x90>', '<mov~~qword ptr [rsp + 0x38], rcx>', '<cmp~~dword ptr [rax + 0x90], 0>', '<sete~~cl>', '<mov~~byte ptr [rsp + 0x42], cl>', '<xor~~eax, eax>', '<test~~cl, 1>', '<mov~~byte ptr [rsp + 0x43], al>', '<jne~~0x4005a1>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~edi, dword ptr [rax + 0x10]>', '<call~~0x500010>']}, {'block_Idx': 107, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xe8]>', '<add~~rdi, 0xb0>', '<call~~0x500058>']}, {'block_Idx': 68, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x90]>', '<mov~~dword ptr [rax], ecx>', '<mov~~rax, qword ptr [rsp + 0x88]>', '<cmp~~dword ptr [rax], 0>', '<jne~~0x400493>']}, {'block_Idx': 75, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xa0]>', '<mov~~eax, 8>', '<cmp~~dword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0x80], eax>', '<jne~~0x400374>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x90]>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~eax, dword ptr [rax + 0x10]>', '<cmp~~eax, dword ptr [rcx]>', '<setne~~al>', '<mov~~byte ptr [rsp + 0x57], al>', '<jmp~~0x4004db>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~edi, dword ptr [rax + 0x10]>', '<call~~0x500010>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x7c]>', '<mov~~eax, 9>', '<cmp~~ecx, 5>', '<mov~~dword ptr [rsp + 0x80], eax>', '<jge~~0x400374>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x60]>', '<xor~~eax, eax>', '<cmp~~dword ptr [rcx], 0>', '<mov~~byte ptr [rsp + 0x57], al>', '<je~~0x4004db>']}, {'block_Idx': 72, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x42]>', '<test~~al, 1>', '<jne~~0x400631>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x44]>', '<mov~~rax, qword ptr [rsp + 0x60]>', '<mov~~eax, dword ptr [rax]>', '<test~~eax, eax>', '<setne~~al>', '<test~~ecx, ecx>', '<setne~~cl>', '<and~~al, cl>', '<mov~~byte ptr [rsp + 0x43], al>', '<mov~~rax, qword ptr [rsp + 0x60]>', '<mov~~rcx, qword ptr [rsp + 0xe8]>', '<mov~~dl, byte ptr [rsp + 0x43]>', '<mov~~byte ptr [rsp + 0x37], dl>', '<and~~dl, 1>', '<movzx~~edx, dl>', '<mov~~dword ptr [rcx + 0x98], edx>', '<cmp~~dword ptr [rax], 0>', '<je~~0x40066a>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x88]>', '<cmp~~dword ptr [rax], 0>', '<jne~~0x400493>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xe8]>', '<mov~~al, 1>', '<cmp~~qword ptr [rcx + 0xe8], 0>', '<mov~~byte ptr [rsp + 0xbf], al>', '<jne~~0x40018a>']}, {'block_Idx': 128, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xe8]>', '<add~~rdi, 0xd0>', '<call~~0x500070>']}, {'block_Idx': 106, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xe8]>', '<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~rcx, qword ptr [rsp + 0xf0]>', '<mov~~rdx, qword ptr [rsp + 0x90]>', '<mov~~esi, dword ptr [rdx]>', '<mov~~edx, dword ptr [rdi + 0x10]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~r8d, dword ptr [rax]>', '<cmp~~dword ptr [rdi + 0xf4], 2>', '<sete~~al>', '<and~~al, 1>', '<movzx~~r9d, al>', '<call~~0x500040>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~cl, byte ptr [rsp + 0x87]>', '<mov~~al, byte ptr [rsp + 0x9f]>', '<or~~al, cl>', '<test~~al, 1>', '<jne~~0x40027d>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0xcc]>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~rcx, qword ptr [rsp + 0xf0]>', '<mov~~ecx, dword ptr [rcx]>', '<cmp~~ecx, edx>', '<setg~~sil>', '<mov~~byte ptr [rsp + 0xbe], sil>', '<cmp~~ecx, edx>', '<mov~~edi, ecx>', '<cmovg~~edi, edx>', '<mov~~dword ptr [rax + 0x7c], edi>', '<and~~sil, 1>', '<movzx~~esi, sil>', '<mov~~dword ptr [rax + 0x80], esi>', '<cmp~~ecx, edx>', '<setl~~al>', '<cmp~~ecx, edx>', '<mov~~byte ptr [rsp + 0xbf], al>', '<jne~~0x40018a>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0x37]>', '<test~~al, 1>', '<jne~~0x4005ff>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xdc]>', '<add~~rsp, 0xf8>', '<ret~~>']}, {'block_Idx': 90, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x68]>', '<mov~~rcx, rax>', '<mov~~esi, 0x30>', '<lea~~rdx, [rip + 0x1d14]>', '<mov~~al, 0>', '<call~~0x500008>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~dword ptr [rax + 0xf4], 1>', '<jmp~~0x40067c>']}, {'block_Idx': 77, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x90]>', '<mov~~rcx, qword ptr [rsp + 0xd0]>', '<mov~~edi, dword ptr [rcx]>', '<mov~~edx, dword ptr [rax]>', '<xor~~esi, esi>', '<lea~~rcx, [rip + 0x19de]>', '<call~~0x500030>']}, {'block_Idx': 113, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xe8]>', '<call~~0x500048>']}, {'block_Idx': 21, 'blockInsts': ['<jmp~~0x4003b2>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~cl, byte ptr [rsp + 0xbd]>', '<mov~~byte ptr [rsp + 0x87], cl>', '<and~~cl, 1>', '<movzx~~ecx, cl>', '<mov~~rdx, rax>', '<add~~rdx, 0x8c>', '<mov~~qword ptr [rsp + 0x88], rdx>', '<mov~~dword ptr [rax + 0x8c], ecx>', '<mov~~rcx, rax>', '<add~~rcx, 0x28>', '<mov~~qword ptr [rsp + 0x90], rcx>', '<cmp~~dword ptr [rax + 0x28], -1>', '<jne~~0x4003b2>']}, {'block_Idx': 115, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~qword ptr [rax + 0xc0], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x24], eax>', '<je~~0x400978>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<mov~~rcx, rax>', '<add~~rcx, 0x94>', '<mov~~qword ptr [rsp + 0x18], rcx>', '<cmp~~dword ptr [rax + 0x94], 0>', '<je~~0x4007a1>']}], 'cfg_edge_info': [(32, 37), (35, 33), (50, 52), (108, 112), (115, 105), (53, 32), (100, 83), (40, 41), (94, 76), (11, 14), (91, 98), (18, 19), (87, 73), (33, 38), (105, 109), (78, 70), (126, 128), (8, 11), (2, 4), (75, 74), (80, 88), (99, 86), (24, 28), (56, 60), (70, 77), (20, 24), (14, 17), (46, 52), (84, 100), (57, 61), (77, 94), (15, 9), (55, 45), (16, 17), (72, 79), (68, 36), (38, 32), (0, 2), (69, 74), (103, 106), (78, 86), (10, 15), (13, 14), (45, 46), (30, 27), (82, 74), (79, 87), (115, 86), (50, 51), (35, 32), (119, 86), (60, 64), (122, 112), (86, 101), (13, 16), (7, 9), (73, 64), (105, 108), (64, 70), (108, 113), (21, 20), (75, 82), (132, 134), (106, 115), (19, 22), (27, 35), (45, 50), (76, 83), (128, 130), (99, 103), (3, 7), (20, 23), (100, 86), (61, 67), (40, 44), (80, 89), (39, 48), (36, 40), (90, 20), (109, 119), (56, 61), (32, 36), (4, 8), (124, 9), (14, 18), (52, 57), (103, 105), (23, 30), (112, 117), (130, 132), (123, 126), (17, 20), (55, 46), (11, 13), (65, 78), (53, 58), (37, 41), (91, 97), (74, 90), (82, 91), (68, 37), (38, 42), (69, 75), (44, 55), (101, 107), (8, 10), (2, 3), (88, 73), (94, 86), (30, 28), (122, 86), (24, 27), (18, 20), (58, 68), (60, 65), (107, 116), (70, 76), (124, 86), (22, 29), (57, 60), (19, 21), (36, 37), (119, 108), (66, 72), (28, 33), (73, 65), (33, 32), (41, 45), (89, 73), (67, 73), (42, 53), (59, 69), (61, 66), (113, 122), (48, 59), (76, 84), (83, 99), (98, 90), (16, 18), (72, 80), (52, 56), (116, 123), (29, 39), (17, 19), (112, 9), (117, 124)], 'cdg_edge_info': [(105, 107), (35, 33), (50, 52), (105, 116), (108, 112), (115, 105), (105, 134), (100, 83), (8, 9), (108, 130), (94, 76), (8, 128), (38, 53), (11, 14), (91, 98), (19, 39), (18, 19), (105, 109), (24, 35), (33, 38), (19, 48), (78, 70), (108, 123), (8, 11), (8, 130), (108, 132), (2, 4), (80, 88), (108, 107), (19, 59), (20, 24), (108, 116), (8, 123), (70, 77), (14, 17), (8, 132), (108, 134), (60, 78), (57, 61), (55, 45), (16, 17), (73, 78), (8, 107), (124, 126), (68, 36), (8, 116), (103, 106), (8, 134), (103, 115), (13, 14), (124, 101), (30, 27), (53, 68), (122, 112), (61, 72), (103, 126), (8, 20), (13, 16), (19, 29), (108, 86), (105, 108), (76, 99), (108, 113), (108, 122), (20, 30), (103, 101), (75, 82), (19, 22), (8, 86), (45, 50), (76, 83), (105, 101), (99, 103), (20, 23), (61, 67), (40, 44), (80, 89), (112, 124), (8, 15), (2, 8), (36, 40), (124, 107), (52, 57), (14, 18), (60, 70), (103, 105), (124, 128), (124, 9), (112, 117), (11, 13), (53, 58), (19, 90), (30, 35), (73, 70), (108, 101), (82, 91), (68, 37), (38, 42), (124, 130), (69, 75), (103, 107), (105, 126), (8, 10), (2, 3), (103, 128), (8, 101), (24, 27), (124, 123), (60, 65), (105, 119), (124, 132), (70, 76), (105, 128), (124, 86), (70, 94), (57, 60), (36, 37), (119, 108), (73, 65), (103, 130), (76, 100), (124, 116), (72, 87), (124, 134), (105, 130), (108, 126), (19, 69), (2, 7), (40, 55), (103, 123), (76, 84), (103, 132), (16, 18), (103, 86), (72, 80), (105, 123), (105, 132), (8, 126), (108, 128), (17, 19), (105, 86), (2, 9), (100, 99), (103, 116), (112, 9), (57, 73), (103, 134)], 'ddg_edge_info': [(55, 57), (98, 37), (90, 33), (89, 77), (90, 42), (67, 77), (99, 109), (88, 109), (59, 82), (100, 83), (90, 60), (29, 50), (0, 23), (29, 59), (50, 109), (0, 117), (0, 126), (22, 37), (4, 87), (87, 112), (99, 86), (106, 134), (90, 37), (17, 53), (29, 27), (77, 76), (16, 106), (77, 94), (100, 105), (73, 78), (0, 94), (22, 23), (23, 77), (0, 130), (90, 23), (88, 108), (99, 108), (119, 86), (58, 67), (58, 76), (50, 72), (42, 77), (27, 88), (8, 84), (83, 105), (0, 98), (0, 107), (23, 72), (4, 68), (39, 98), (0, 116), (4, 77), (106, 115), (88, 76), (106, 124), (65, 83), (90, 27), (128, 130), (88, 103), (99, 103), (100, 86), (77, 84), (29, 44), (58, 80), (80, 89), (58, 89), (42, 72), (27, 83), (39, 48), (69, 98), (0, 84), (83, 109), (94, 109), (23, 67), (84, 83), (23, 76), (4, 72), (35, 50), (16, 55), (87, 106), (65, 78), (109, 112), (117, 134), (58, 57), (76, 105), (27, 60), (42, 58), (101, 107), (58, 84), (42, 67), (8, 65), (18, 109), (42, 76), (27, 87), (91, 90), (8, 83), (83, 86), (94, 86), (122, 86), (83, 113), (0, 106), (4, 67), (23, 80), (87, 83), (4, 76), (23, 89), (106, 105), (16, 68), (88, 84), (58, 52), (113, 86), (109, 134), (58, 61), (42, 44), (18, 77), (27, 55), (50, 57), (58, 70), (3, 134), (42, 53), (82, 98), (27, 73), (19, 69), (113, 122), (42, 80), (0, 83), (83, 99), (4, 44), (23, 57), (83, 108), (60, 106), (16, 18), (94, 108), (83, 117), (35, 40), (16, 36), (116, 123), (4, 80), (16, 45), (35, 58), (68, 55), (88, 70), (65, 77), (57, 73), (117, 124), (67, 105), (65, 86), (90, 88), (27, 50), (58, 65), (42, 57), (19, 55), (27, 68), (27, 77), (0, 60), (18, 108), (113, 117), (94, 76), (2, 11), (60, 83), (91, 98), (4, 30), (0, 78), (0, 87), (23, 52), (83, 103), (44, 84), (94, 103), (23, 61), (4, 57), (106, 86), (35, 44), (68, 50), (38, 55), (67, 109), (27, 36), (109, 124), (89, 109), (90, 83), (27, 45), (0, 37), (30, 50), (42, 52), (19, 59), (42, 61), (27, 72), (0, 55), (29, 91), (19, 68), (115, 112), (23, 38), (112, 134), (60, 105), (44, 88), (4, 52), (73, 124), (4, 61), (87, 77), (16, 35), (78, 86), (58, 37), (59, 91), (38, 68), (27, 40), (90, 87), (0, 50), (4, 11), (60, 73), (4, 20), (23, 33), (94, 84), (44, 65), (23, 42), (4, 38), (13, 16), (44, 83), (16, 30), (108, 122), (98, 50), (90, 55), (67, 108), (90, 73), (0, 18), (27, 35), (89, 108), (27, 44), (0, 27), (60, 77), (44, 60), (23, 37), (112, 124), (4, 33), (44, 87), (22, 50), (117, 86), (89, 76), (67, 76), (90, 50), (130, 132), (0, 4), (67, 103), (90, 68), (0, 13), (89, 103), (90, 77), (0, 22), (29, 58), (19, 35), (100, 109), (4, 10), (44, 55), (4, 19), (73, 100), (44, 73), (90, 36), (107, 116), (90, 45), (99, 112), (18, 38), (88, 112), (0, 8), (119, 108), (0, 17), (90, 72), (19, 30), (8, 30), (0, 35), (50, 103), (44, 50), (73, 122), (90, 40), (89, 84), (67, 84), (16, 109), (0, 3), (29, 39), (90, 67), (29, 48), (119, 112), (40, 57), (100, 108), (44, 45), (115, 105), (0, 115), (73, 99), (0, 124), (55, 50), (18, 19), (89, 70), (90, 35), (67, 70), (90, 44), (126, 128), (18, 37), (59, 75), (90, 53), (77, 83), (8, 11), (58, 88), (11, 16), (0, 16), (80, 88), (100, 103), (100, 112), (42, 89), (0, 101), (73, 94), (0, 119), (23, 84), (84, 100), (0, 128), (106, 109), (4, 89), (87, 105), (90, 30), (17, 55), (88, 106), (99, 106), (0, 2), (58, 83), (10, 15), (42, 84), (2, 20), (115, 86), (8, 109), (83, 112), (94, 112), (23, 70), (84, 86), (122, 112), (0, 123), (23, 88), (4, 84), (0, 132), (106, 113), (87, 109), (106, 122), (88, 83), (58, 60), (17, 68), (29, 42), (113, 112), (58, 87), (42, 70), (132, 134), (8, 77), (42, 88), (15, 134), (0, 100), (23, 65), (3, 7), (39, 91), (0, 109), (4, 70), (23, 83), (83, 134), (35, 57), (4, 88), (16, 53), (106, 108), (17, 18), (106, 117), (65, 76), (90, 20), (109, 119), (58, 55), (99, 105), (58, 73), (77, 86), (27, 67), (18, 98), (42, 65), (69, 82), (27, 76), (42, 83), (113, 134), (39, 59), (19, 90), (0, 86), (75, 98), (23, 60), (60, 109), (4, 65), (0, 113), (23, 87), (4, 83), (106, 112), (87, 108), (16, 75), (58, 50), (58, 68), (58, 77), (42, 60), (50, 73), (27, 80), (27, 89), (42, 87), (4, 42), (23, 55), (83, 106), (94, 106), (0, 99), (4, 60), (23, 73), (87, 76), (124, 134), (16, 52), (87, 103), (88, 77), (17, 35), (58, 36), (65, 84), (58, 45), (67, 112), (89, 112), (18, 70), (98, 90), (42, 37), (86, 134), (27, 57), (58, 72), (42, 55), (19, 53), (18, 106), (42, 73), (27, 84), (0, 67), (94, 83), (0, 76), (4, 37), (23, 50), (60, 108), (4, 55), (23, 68), (35, 42), (4, 73), (109, 86), (65, 70), (10, 134), (17, 30), (109, 113), (58, 40), (109, 122), (18, 65), (19, 39), (27, 52), (42, 50), (19, 48), (27, 61), (0, 44), (27, 70), (42, 68), (29, 98), (23, 27), (60, 76), (4, 23), (23, 36), (0, 80), (23, 45), (44, 77), (94, 105), (60, 103), (4, 50), (60, 112), (16, 33), (87, 84), (57, 61), (109, 108), (109, 117), (58, 44), (59, 98), (27, 38), (90, 76), (42, 36), (0, 30), (42, 45), (27, 65), (0, 57), (4, 18), (4, 27), (23, 40), (44, 72), (4, 36), (4, 45), (16, 19), (87, 70), (68, 65), (86, 101), (18, 55), (89, 106), (27, 33), (67, 106), (19, 29), (27, 42), (90, 80), (42, 40), (90, 89), (4, 13), (4, 22), (23, 35), (115, 109), (60, 84), (44, 67), (23, 44), (44, 76), (4, 40), (45, 50), (37, 55), (2, 106), (89, 83), (67, 83), (90, 57), (18, 50), (0, 11), (27, 37), (18, 68), (90, 84), (0, 29), (4, 8), (52, 57), (60, 70), (4, 17), (23, 30), (123, 126), (4, 35), (2, 65), (44, 80), (44, 89), (37, 50), (68, 37), (90, 52), (18, 45), (98, 65), (16, 112), (90, 61), (89, 105), (90, 70), (35, 134), (30, 37), (0, 42), (44, 57), (115, 108), (124, 86), (22, 29), (90, 38), (59, 69), (88, 105), (90, 65), (0, 10), (48, 59), (40, 55), (100, 106), (7, 134), (4, 16), (44, 52), (44, 61), (44, 70), (0, 122)]}]}
{'avresample_open': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'subq\t$0xf8, %rsp'}, {'instIndex': 1, 'instruction': 'movq\t%rdi, 0xe8(%rsp)                 # 8-byte Spill'}, {'instIndex': 2, 'instruction': 'movq\t%rdi, %rax'}, {'instIndex': 3, 'instruction': 'addq\t$8, %rax'}, {'instIndex': 4, 'instruction': 'movq\t%rax, 0xe0(%rsp)                 # 8-byte Spill'}, {'instIndex': 5, 'instruction': 'movq\t8(%rdi), %rdi'}, {'instIndex': 6, 'instruction': 'callq\tav_get_channel_layout_nb_channels@PLT'}, {'instIndex': 8, 'instruction': 'movq\t%rdi, %rcx'}, {'instIndex': 9, 'instruction': 'addq\t$0x74, %rcx'}, {'instIndex': 10, 'instruction': 'movq\t%rcx, 0xf0(%rsp)                 # 8-byte Spill'}, {'instIndex': 11, 'instruction': 'movl\t%eax, 0x74(%rdi)'}, {'instIndex': 12, 'instruction': 'addl\t$-0x21, %eax'}, {'instIndex': 13, 'instruction': 'cmpl\t$-0x20, %eax'}, {'instIndex': 14, 'instruction': 'jae\t.LBB0_2'}]}]}
The case of compiler clang with optimization O2.
Patched source code file: utils.c
Patched function: 1---int avresample_open 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_before/O2/utils.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_before/O2/utils.s---avresample_open---before
function id: 0
function flag: True
There are 671 instructions for function: avresample_open in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '36', 'end': 46}, 'before': {'start': '36', 'end': 41}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'subq\t$0x188, %rsp                      # imm = 0x0xbc'}, {'instIndex': 1, 'instruction': 'movq\t%rdi, 0x178(%rsp)                 # 8-byte Spill'}, {'instIndex': 2, 'instruction': 'movq\t%rdi, %rax'}, {'instIndex': 3, 'instruction': 'addq\t$8, %rax'}, {'instIndex': 4, 'instruction': 'movq\t%rax, 0x170(%rsp)                 # 8-byte Spill'}, {'instIndex': 5, 'instruction': 'movq\t8(%rdi), %rdi'}, {'instIndex': 6, 'instruction': 'callq\tav_get_channel_layout_nb_channels@PLT'}, {'instIndex': 8, 'instruction': 'movq\t%rdi, %rcx'}, {'instIndex': 9, 'instruction': 'addq\t$0x74, %rcx'}, {'instIndex': 10, 'instruction': 'movq\t%rcx, 0x180(%rsp)                 # 8-byte Spill'}, {'instIndex': 11, 'instruction': 'movl\t%eax, 0x74(%rdi)'}, {'instIndex': 12, 'instruction': 'addl\t$-0x21, %eax'}, {'instIndex': 13, 'instruction': 'cmpl\t$-0x20, %eax'}, {'instIndex': 14, 'instruction': 'jae\t.LBB0_2'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_before/O2/utils.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_before/O2/utils.o---before
The extraction of function: avresample_open
Analyzing the binaries to generate subCFGs from patched function ...
It has 369 nodes and 664 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 671 instructions in binary file.
[4194304, 4194343]
The execution time of patched subCFG information extraction via angr: 0:00:00.609177
{'avresample_open': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400049>, <DisassemblerInsn "mov" for 0x400051>, <DisassemblerInsn "mov" for 0x400059>, <DisassemblerInsn "mov" for 0x40005c>, <DisassemblerInsn "lea" for 0x400061>, <DisassemblerInsn "mov" for 0x400068>, <DisassemblerInsn "call" for 0x40006a>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400080>, <DisassemblerInsn "mov" for 0x400088>, <DisassemblerInsn "add" for 0x40008b>, <DisassemblerInsn "mov" for 0x40008f>, <DisassemblerInsn "mov" for 0x400097>, <DisassemblerInsn "call" for 0x40009b>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400027>, <DisassemblerInsn "mov" for 0x40002f>, <DisassemblerInsn "add" for 0x400032>, <DisassemblerInsn "mov" for 0x400036>, <DisassemblerInsn "mov" for 0x40003e>, <DisassemblerInsn "add" for 0x400041>, <DisassemblerInsn "cmp" for 0x400044>, <DisassemblerInsn "jae" for 0x400047>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400007>, <DisassemblerInsn "mov" for 0x40000f>, <DisassemblerInsn "add" for 0x400012>, <DisassemblerInsn "mov" for 0x400016>, <DisassemblerInsn "mov" for 0x40001e>, <DisassemblerInsn "call" for 0x400022>]'}], 'cfg_block_detailed_info': [{'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x170]>', '<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x29b0]>', '<mov~~al, 0>', '<call~~0x500008>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, rax>', '<add~~rcx, 0x18>', '<mov~~qword ptr [rsp + 0x150], rcx>', '<mov~~rdi, qword ptr [rax + 0x18]>', '<call~~0x500000>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~rcx, rdi>', '<add~~rcx, 0x74>', '<mov~~qword ptr [rsp + 0x180], rcx>', '<mov~~dword ptr [rdi + 0x74], eax>', '<add~~eax, -0x21>', '<cmp~~eax, -0x20>', '<jae~~0x400080>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x188>', '<mov~~qword ptr [rsp + 0x178], rdi>', '<mov~~rax, rdi>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x170], rax>', '<mov~~rdi, qword ptr [rdi + 8]>', '<call~~0x500000>']}], 'cfg_edge_info': [(0, 1), (1, 2), (1, 3)]}]}
{'avresample_open': [4194304, 4194343]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_before/O2/utils.o---before
The extraction of function: avresample_open
[4194304, 4194343]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 141 nodes and 228 edges in CFGEmulated.
It has 139 nodes and 296 edges in CDG.
It has 2729 nodes and 3709 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194304, 4194343]
{4194304, 4195334, 4194824, 4197389, 4194846, 4195363, 4196899, 4196389, 4194343, 4197415, 4195379, 4197428, 4195897, 4196931, 4194377, 4195405, 4196442, 4195421, 4197474, 4196966, 4195949, 4194415, 4194937, 4196474, 4197502, 4194432, 4197003, 4195469, 4197522, 4195482, 4194464, 4194977, 4196512, 4197542, 4195504, 4194993, 4197046, 4197562, 4196550, 4194505, 4195018, 4196044, 4195535, 4195540, 4197593, 4197083, 4195037, 4195555, 4197093, 4197613, 4194543, 4195056, 4196603, 4194560, 4197633, 4195589, 4196108, 4195089, 4197653, 4196121, 4195611, 4197156, 4197673, 4195119, 4196661, 4197698, 4195144, 4197193, 4195658, 4196178, 4197203, 4194646, 4195168, 4195691, 4194673, 4195707, 4196748, 4195215, 4194705, 4196258, 4197293, 4196785, 4197330, 4195803, 4196828, 4197343, 4195304, 4197356, 4195820, 4195833, 4196862, 4196351}
[44, 130, 96, 41, 93, 15, 38, 109, 21, 65, 132, 106, 45, 29, 18, 46, 110, 87, 24, 68, 53, 30, 39, 103, 75, 69, 61, 57, 60, 19, 116, 80, 107, 10, 122, 36, 8, 99, 127, 48, 27, 20, 138, 42, 129, 118, 16, 108, 136, 2, 100, 97, 3, 120, 82, 59, 4, 0, 7, 56, 78, 28, 55, 86, 63, 72, 77, 67, 101, 51, 73, 64, 98, 50, 23, 105, 52, 58, 74, 88, 37, 134, 140, 125, 62, 17, 117, 40, 89, 113, 9, 33, 90, 76, 11, 66, 14, 35, 114, 83, 79, 13, 124, 95, 32, 22]
The execution time of patched slicing information extraction via angr: 0:00:19.933444
{'avresample_open': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40056b>, <DisassemblerInsn "mov" for 0x400573>, <DisassemblerInsn "call" for 0x400576>]'}, {'block_Idx': 130, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400cba>, <DisassemblerInsn "mov" for 0x400cc2>, <DisassemblerInsn "add" for 0x400ccd>, <DisassemblerInsn "call" for 0x400cd4>]'}, {'block_Idx': 96, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c62>, <DisassemblerInsn "mov" for 0x400c6a>, <DisassemblerInsn "mov" for 0x400c6e>, <DisassemblerInsn "add" for 0x400c72>, <DisassemblerInsn "call" for 0x400c79>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40059b>, <DisassemblerInsn "mov" for 0x4005a3>, <DisassemblerInsn "mov" for 0x4005aa>, <DisassemblerInsn "mov" for 0x4005b1>, <DisassemblerInsn "mov" for 0x4005b8>, <DisassemblerInsn "and" for 0x4005bf>, <DisassemblerInsn "movzx" for 0x4005c2>, <DisassemblerInsn "mov" for 0x4005c5>, <DisassemblerInsn "mov" for 0x4005cc>, <DisassemblerInsn "cmp" for 0x4005d2>, <DisassemblerInsn "jne" for 0x4005d5>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009fe>, <DisassemblerInsn "mov" for 0x400a01>, <DisassemblerInsn "mov" for 0x400a09>, <DisassemblerInsn "mov" for 0x400a10>, <DisassemblerInsn "cmp" for 0x400a15>, <DisassemblerInsn "mov" for 0x400a19>, <DisassemblerInsn "je" for 0x400a1d>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000ef>, <DisassemblerInsn "mov" for 0x4000f4>, <DisassemblerInsn "jmp" for 0x4000fb>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40049a>, <DisassemblerInsn "mov" for 0x4004a2>, <DisassemblerInsn "cmp" for 0x4004a4>, <DisassemblerInsn "mov" for 0x4004a7>, <DisassemblerInsn "jne" for 0x4004ae>]'}, {'block_Idx': 109, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ae5>, <DisassemblerInsn "mov" for 0x400aed>, <DisassemblerInsn "mov" for 0x400af5>, <DisassemblerInsn "mov" for 0x400afd>, <DisassemblerInsn "mov" for 0x400b05>, <DisassemblerInsn "mov" for 0x400b07>, <DisassemblerInsn "mov" for 0x400b0a>, <DisassemblerInsn "mov" for 0x400b0c>, <DisassemblerInsn "cmp" for 0x400b0f>, <DisassemblerInsn "sete" for 0x400b16>, <DisassemblerInsn "and" for 0x400b19>, <DisassemblerInsn "movzx" for 0x400b1b>, <DisassemblerInsn "call" for 0x400b1f>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40029c>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400752>, <DisassemblerInsn "mov" for 0x40075a>, <DisassemblerInsn "mov" for 0x400762>, <DisassemblerInsn "cmp" for 0x400769>, <DisassemblerInsn "setne" for 0x40076c>, <DisassemblerInsn "mov" for 0x40076f>, <DisassemblerInsn "and" for 0x400772>, <DisassemblerInsn "movzx" for 0x400776>, <DisassemblerInsn "mov" for 0x40077a>, <DisassemblerInsn "mov" for 0x400780>, <DisassemblerInsn "test" for 0x400785>, <DisassemblerInsn "mov" for 0x400788>, <DisassemblerInsn "mov" for 0x400790>, <DisassemblerInsn "jne" for 0x400797>]'}, {'block_Idx': 132, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400cd9>, <DisassemblerInsn "add" for 0x400ce1>, <DisassemblerInsn "call" for 0x400ce8>]'}, {'block_Idx': 106, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40038f>, <DisassemblerInsn "mov" for 0x400396>, <DisassemblerInsn "sub" for 0x40039d>, <DisassemblerInsn "sete" for 0x4003a0>, <DisassemblerInsn "sub" for 0x4003a3>, <DisassemblerInsn "sete" for 0x4003a6>, <DisassemblerInsn "or" for 0x4003a9>, <DisassemblerInsn "mov" for 0x4003ab>, <DisassemblerInsn "mov" for 0x4003b0>, <DisassemblerInsn "test" for 0x4003b5>, <DisassemblerInsn "cmovne" for 0x4003b8>, <DisassemblerInsn "mov" for 0x4003bb>, <DisassemblerInsn "mov" for 0x4003c2>, <DisassemblerInsn "mov" for 0x4003ca>, <DisassemblerInsn "mov" for 0x4003d2>, <DisassemblerInsn "mov" for 0x4003d9>, <DisassemblerInsn "mov" for 0x4003db>, <DisassemblerInsn "call" for 0x4003e3>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005db>, <DisassemblerInsn "cmp" for 0x4005e3>, <DisassemblerInsn "jne" for 0x4005e6>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002b1>, <DisassemblerInsn "mov" for 0x4002b3>, <DisassemblerInsn "mov" for 0x4002bb>, <DisassemblerInsn "mov" for 0x4002c2>, <DisassemblerInsn "call" for 0x4002c5>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40021e>, <DisassemblerInsn "mov" for 0x400225>, <DisassemblerInsn "mov" for 0x40022d>, <DisassemblerInsn "mov" for 0x400234>, <DisassemblerInsn "and" for 0x40023b>, <DisassemblerInsn "movzx" for 0x40023e>, <DisassemblerInsn "mov" for 0x400241>, <DisassemblerInsn "add" for 0x400244>, <DisassemblerInsn "mov" for 0x40024b>, <DisassemblerInsn "mov" for 0x400253>, <DisassemblerInsn "mov" for 0x400259>, <DisassemblerInsn "add" for 0x40025c>, <DisassemblerInsn "mov" for 0x400260>, <DisassemblerInsn "cmp" for 0x400268>, <DisassemblerInsn "mov" for 0x40026c>, <DisassemblerInsn "jne" for 0x400273>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40066d>, <DisassemblerInsn "mov" for 0x400675>, <DisassemblerInsn "mov" for 0x40067d>, <DisassemblerInsn "mov" for 0x400685>, <DisassemblerInsn "cmp" for 0x400687>, <DisassemblerInsn "setne" for 0x40068a>, <DisassemblerInsn "and" for 0x40068d>, <DisassemblerInsn "movzx" for 0x400690>, <DisassemblerInsn "mov" for 0x400693>, <DisassemblerInsn "add" for 0x400699>, <DisassemblerInsn "xor" for 0x40069f>, <DisassemblerInsn "test" for 0x4006a1>, <DisassemblerInsn "mov" for 0x4006a5>, <DisassemblerInsn "mov" for 0x4006a8>, <DisassemblerInsn "mov" for 0x4006b0>, <DisassemblerInsn "mov" for 0x4006b7>, <DisassemblerInsn "mov" for 0x4006be>, <DisassemblerInsn "jne" for 0x4006c6>]'}, {'block_Idx': 110, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400406>, <DisassemblerInsn "mov" for 0x40040e>, <DisassemblerInsn "mov" for 0x400410>, <DisassemblerInsn "mov" for 0x400417>, <DisassemblerInsn "cmp" for 0x40041e>, <DisassemblerInsn "jne" for 0x400421>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40032f>, <DisassemblerInsn "mov" for 0x400337>, <DisassemblerInsn "cmp" for 0x40033c>, <DisassemblerInsn "mov" for 0x40033f>, <DisassemblerInsn "jne" for 0x400346>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400440>, <DisassemblerInsn "cmp" for 0x400448>, <DisassemblerInsn "jne" for 0x40044b>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400820>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4004cf>, <DisassemblerInsn "jne" for 0x4004d2>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400433>, <DisassemblerInsn "mov" for 0x400435>, <DisassemblerInsn "mov" for 0x40043d>, <DisassemblerInsn "mov" for 0x400440>, <DisassemblerInsn "cmp" for 0x400448>, <DisassemblerInsn "jne" for 0x40044b>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002ca>, <DisassemblerInsn "mov" for 0x4002d1>, <DisassemblerInsn "call" for 0x4002d8>]'}, {'block_Idx': 103, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400adb>, <DisassemblerInsn "cmp" for 0x400ae0>, <DisassemblerInsn "je" for 0x400ae3>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009dc>, <DisassemblerInsn "mov" for 0x4009e4>, <DisassemblerInsn "mov" for 0x4009ec>, <DisassemblerInsn "mov" for 0x4009ee>, <DisassemblerInsn "xor" for 0x4009f0>, <DisassemblerInsn "lea" for 0x4009f2>, <DisassemblerInsn "call" for 0x4009f9>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400825>, <DisassemblerInsn "mov" for 0x40082d>, <DisassemblerInsn "mov" for 0x400835>, <DisassemblerInsn "mov" for 0x40083c>, <DisassemblerInsn "mov" for 0x400846>, <DisassemblerInsn "mov" for 0x400848>, <DisassemblerInsn "mov" for 0x40084c>, <DisassemblerInsn "mov" for 0x400851>, <DisassemblerInsn "jmp" for 0x400855>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004d4>, <DisassemblerInsn "mov" for 0x4004dc>, <DisassemblerInsn "call" for 0x4004de>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005f9>, <DisassemblerInsn "mov" for 0x400601>, <DisassemblerInsn "mov" for 0x400609>, <DisassemblerInsn "cmp" for 0x40060b>, <DisassemblerInsn "setne" for 0x40060e>, <DisassemblerInsn "and" for 0x400611>, <DisassemblerInsn "movzx" for 0x400614>, <DisassemblerInsn "mov" for 0x400617>, <DisassemblerInsn "add" for 0x40061d>, <DisassemblerInsn "xor" for 0x400623>, <DisassemblerInsn "mov" for 0x400625>, <DisassemblerInsn "mov" for 0x40062c>, <DisassemblerInsn "jmp" for 0x400634>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007ff>, <DisassemblerInsn "mov" for 0x400803>, <DisassemblerInsn "mov" for 0x400808>, <DisassemblerInsn "test" for 0x40080c>, <DisassemblerInsn "mov" for 0x40080f>, <DisassemblerInsn "mov" for 0x400817>, <DisassemblerInsn "jne" for 0x40081e>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400279>, <DisassemblerInsn "mov" for 0x400280>, <DisassemblerInsn "mov" for 0x400287>, <DisassemblerInsn "or" for 0x40028e>, <DisassemblerInsn "test" for 0x400290>, <DisassemblerInsn "mov" for 0x400293>, <DisassemblerInsn "jne" for 0x40029a>]'}, {'block_Idx': 116, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c92>, <DisassemblerInsn "add" for 0x400c9a>, <DisassemblerInsn "call" for 0x400ca1>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40085a>, <DisassemblerInsn "mov" for 0x400861>, <DisassemblerInsn "add" for 0x400869>, <DisassemblerInsn "mov" for 0x400870>, <DisassemblerInsn "cmp" for 0x400875>, <DisassemblerInsn "je" for 0x400878>]'}, {'block_Idx': 107, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c7e>, <DisassemblerInsn "add" for 0x400c86>, <DisassemblerInsn "call" for 0x400c8d>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c9>, <DisassemblerInsn "mov" for 0x4000d1>, <DisassemblerInsn "mov" for 0x4000d9>, <DisassemblerInsn "mov" for 0x4000dc>, <DisassemblerInsn "lea" for 0x4000e1>, <DisassemblerInsn "mov" for 0x4000e8>, <DisassemblerInsn "call" for 0x4000ea>]'}, {'block_Idx': 122, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c27>, <DisassemblerInsn "call" for 0x400c2f>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400505>, <DisassemblerInsn "xor" for 0x40050d>, <DisassemblerInsn "cmp" for 0x40050f>, <DisassemblerInsn "mov" for 0x400512>, <DisassemblerInsn "je" for 0x400519>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000a0>, <DisassemblerInsn "mov" for 0x4000a8>, <DisassemblerInsn "mov" for 0x4000af>, <DisassemblerInsn "add" for 0x4000b2>, <DisassemblerInsn "mov" for 0x4000b6>, <DisassemblerInsn "mov" for 0x4000be>, <DisassemblerInsn "add" for 0x4000c1>, <DisassemblerInsn "cmp" for 0x4000c4>, <DisassemblerInsn "jae" for 0x4000c7>]'}, {'block_Idx': 99, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a66>, <DisassemblerInsn "mov" for 0x400a69>, <DisassemblerInsn "mov" for 0x400a71>, <DisassemblerInsn "mov" for 0x400a78>, <DisassemblerInsn "cmp" for 0x400a7d>, <DisassemblerInsn "mov" for 0x400a81>, <DisassemblerInsn "je" for 0x400a85>]'}, {'block_Idx': 127, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400bec>, <DisassemblerInsn "mov" for 0x400bef>, <DisassemblerInsn "mov" for 0x400bf7>, <DisassemblerInsn "mov" for 0x400bfe>, <DisassemblerInsn "cmp" for 0x400c03>, <DisassemblerInsn "mov" for 0x400c07>, <DisassemblerInsn "je" for 0x400c0b>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002dd>, <DisassemblerInsn "mov" for 0x4002e4>, <DisassemblerInsn "call" for 0x4002eb>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40044d>, <DisassemblerInsn "mov" for 0x400455>, <DisassemblerInsn "call" for 0x400458>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400417>, <DisassemblerInsn "cmp" for 0x40041e>, <DisassemblerInsn "jne" for 0x400421>]'}, {'block_Idx': 138, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d15>, <DisassemblerInsn "add" for 0x400d1d>, <DisassemblerInsn "call" for 0x400d24>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004b0>, <DisassemblerInsn "mov" for 0x4004b8>, <DisassemblerInsn "add" for 0x4004bb>, <DisassemblerInsn "mov" for 0x4004bf>, <DisassemblerInsn "mov" for 0x4004c7>, <DisassemblerInsn "call" for 0x4004ca>]'}, {'block_Idx': 129, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c34>, <DisassemblerInsn "mov" for 0x400c37>, <DisassemblerInsn "mov" for 0x400c3f>, <DisassemblerInsn "mov" for 0x400c46>, <DisassemblerInsn "xor" for 0x400c4b>, <DisassemblerInsn "cmp" for 0x400c4d>, <DisassemblerInsn "mov" for 0x400c51>, <DisassemblerInsn "mov" for 0x400c55>, <DisassemblerInsn "jne" for 0x400c5c>]'}, {'block_Idx': 118, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400bdf>, <DisassemblerInsn "call" for 0x400be7>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400171>, <DisassemblerInsn "mov" for 0x400179>, <DisassemblerInsn "mov" for 0x400181>, <DisassemblerInsn "cmp" for 0x400184>, <DisassemblerInsn "setne" for 0x400187>, <DisassemblerInsn "mov" for 0x40018a>, <DisassemblerInsn "mov" for 0x400191>, <DisassemblerInsn "mov" for 0x400199>, <DisassemblerInsn "mov" for 0x4001a0>, <DisassemblerInsn "movzx" for 0x4001a7>, <DisassemblerInsn "and" for 0x4001aa>, <DisassemblerInsn "mov" for 0x4001ad>, <DisassemblerInsn "or" for 0x4001b3>, <DisassemblerInsn "mov" for 0x4001b5>, <DisassemblerInsn "and" for 0x4001bc>, <DisassemblerInsn "movzx" for 0x4001be>, <DisassemblerInsn "mov" for 0x4001c1>, <DisassemblerInsn "add" for 0x4001c4>, <DisassemblerInsn "mov" for 0x4001cb>, <DisassemblerInsn "mov" for 0x4001d3>, <DisassemblerInsn "mov" for 0x4001d9>, <DisassemblerInsn "add" for 0x4001dc>, <DisassemblerInsn "mov" for 0x4001e0>, <DisassemblerInsn "mov" for 0x4001e8>, <DisassemblerInsn "mov" for 0x4001eb>, <DisassemblerInsn "add" for 0x4001ee>, <DisassemblerInsn "mov" for 0x4001f2>, <DisassemblerInsn "mov" for 0x4001fa>, <DisassemblerInsn "cmp" for 0x4001fc>, <DisassemblerInsn "mov" for 0x4001ff>, <DisassemblerInsn "jne" for 0x400206>]'}, {'block_Idx': 108, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b49>, <DisassemblerInsn "cmp" for 0x400b4e>, <DisassemblerInsn "je" for 0x400b51>]'}, {'block_Idx': 136, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d01>, <DisassemblerInsn "add" for 0x400d09>, <DisassemblerInsn "call" for 0x400d10>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400027>, <DisassemblerInsn "mov" for 0x40002f>, <DisassemblerInsn "add" for 0x400032>, <DisassemblerInsn "mov" for 0x400036>, <DisassemblerInsn "mov" for 0x40003e>, <DisassemblerInsn "add" for 0x400041>, <DisassemblerInsn "cmp" for 0x400044>, <DisassemblerInsn "jae" for 0x400047>]'}, {'block_Idx': 100, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003e8>, <DisassemblerInsn "mov" for 0x4003f0>, <DisassemblerInsn "mov" for 0x4003f3>, <DisassemblerInsn "lea" for 0x4003f8>, <DisassemblerInsn "mov" for 0x4003ff>, <DisassemblerInsn "call" for 0x400401>]'}, {'block_Idx': 97, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009b1>, <DisassemblerInsn "mov" for 0x4009b6>, <DisassemblerInsn "mov" for 0x4009be>, <DisassemblerInsn "mov" for 0x4009c0>, <DisassemblerInsn "mov" for 0x4009c5>, <DisassemblerInsn "mov" for 0x4009c9>, <DisassemblerInsn "mov" for 0x4009ce>, <DisassemblerInsn "mov" for 0x4009d2>, <DisassemblerInsn "cmp" for 0x4009d7>, <DisassemblerInsn "je" for 0x4009da>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400049>, <DisassemblerInsn "mov" for 0x400051>, <DisassemblerInsn "mov" for 0x400059>, <DisassemblerInsn "mov" for 0x40005c>, <DisassemblerInsn "lea" for 0x400061>, <DisassemblerInsn "mov" for 0x400068>, <DisassemblerInsn "call" for 0x40006a>]'}, {'block_Idx': 120, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b24>, <DisassemblerInsn "mov" for 0x400b27>, <DisassemblerInsn "mov" for 0x400b2f>, <DisassemblerInsn "mov" for 0x400b36>, <DisassemblerInsn "cmp" for 0x400b3b>, <DisassemblerInsn "mov" for 0x400b3f>, <DisassemblerInsn "je" for 0x400b43>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a8b>, <DisassemblerInsn "mov" for 0x400a93>, <DisassemblerInsn "mov" for 0x400a9b>, <DisassemblerInsn "add" for 0x400a9e>, <DisassemblerInsn "mov" for 0x400aa2>, <DisassemblerInsn "mov" for 0x400aa7>, <DisassemblerInsn "mov" for 0x400aaa>, <DisassemblerInsn "mov" for 0x400aac>, <DisassemblerInsn "call" for 0x400ab1>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008c6>, <DisassemblerInsn "mov" for 0x4008ce>, <DisassemblerInsn "mov" for 0x4008d5>, <DisassemblerInsn "mov" for 0x4008dd>, <DisassemblerInsn "mov" for 0x4008e4>, <DisassemblerInsn "mov" for 0x4008ee>, <DisassemblerInsn "mov" for 0x4008f2>, <DisassemblerInsn "mov" for 0x4008f7>, <DisassemblerInsn "mov" for 0x4008fb>, <DisassemblerInsn "mov" for 0x400902>, <DisassemblerInsn "mov" for 0x400906>, <DisassemblerInsn "mov" for 0x40090b>, <DisassemblerInsn "cmp" for 0x40090f>, <DisassemblerInsn "sete" for 0x400912>, <DisassemblerInsn "and" for 0x400916>, <DisassemblerInsn "test" for 0x400919>, <DisassemblerInsn "mov" for 0x40091c>, <DisassemblerInsn "mov" for 0x40091f>, <DisassemblerInsn "mov" for 0x400924>, <DisassemblerInsn "mov" for 0x400929>, <DisassemblerInsn "jne" for 0x40092d>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400080>, <DisassemblerInsn "mov" for 0x400088>, <DisassemblerInsn "add" for 0x40008b>, <DisassemblerInsn "mov" for 0x40008f>, <DisassemblerInsn "mov" for 0x400097>, <DisassemblerInsn "call" for 0x40009b>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400007>, <DisassemblerInsn "mov" for 0x40000f>, <DisassemblerInsn "add" for 0x400012>, <DisassemblerInsn "mov" for 0x400016>, <DisassemblerInsn "mov" for 0x40001e>, <DisassemblerInsn "call" for 0x400022>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40006f>, <DisassemblerInsn "mov" for 0x400074>, <DisassemblerInsn "jmp" for 0x40007b>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4005f7>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004e3>, <DisassemblerInsn "mov" for 0x4004e5>, <DisassemblerInsn "mov" for 0x4004ed>, <DisassemblerInsn "mov" for 0x4004ef>, <DisassemblerInsn "mov" for 0x4004f7>, <DisassemblerInsn "cmp" for 0x4004f9>, <DisassemblerInsn "mov" for 0x4004fc>, <DisassemblerInsn "jne" for 0x400503>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40046a>, <DisassemblerInsn "mov" for 0x400472>, <DisassemblerInsn "add" for 0x400475>, <DisassemblerInsn "mov" for 0x40047c>, <DisassemblerInsn "cmp" for 0x400484>, <DisassemblerInsn "je" for 0x40048b>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40057b>, <DisassemblerInsn "mov" for 0x40057d>, <DisassemblerInsn "cmp" for 0x400585>, <DisassemblerInsn "sete" for 0x400588>, <DisassemblerInsn "mov" for 0x40058b>, <DisassemblerInsn "mov" for 0x40058d>, <DisassemblerInsn "mov" for 0x400594>, <DisassemblerInsn "mov" for 0x40059b>, <DisassemblerInsn "mov" for 0x4005a3>, <DisassemblerInsn "mov" for 0x4005aa>, <DisassemblerInsn "mov" for 0x4005b1>, <DisassemblerInsn "mov" for 0x4005b8>, <DisassemblerInsn "and" for 0x4005bf>, <DisassemblerInsn "movzx" for 0x4005c2>, <DisassemblerInsn "mov" for 0x4005c5>, <DisassemblerInsn "mov" for 0x4005cc>, <DisassemblerInsn "cmp" for 0x4005d2>, <DisassemblerInsn "jne" for 0x4005d5>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003c2>, <DisassemblerInsn "mov" for 0x4003ca>, <DisassemblerInsn "mov" for 0x4003d2>, <DisassemblerInsn "mov" for 0x4003d9>, <DisassemblerInsn "mov" for 0x4003db>, <DisassemblerInsn "call" for 0x4003e3>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400639>, <DisassemblerInsn "mov" for 0x400641>, <DisassemblerInsn "cmp" for 0x400644>, <DisassemblerInsn "setne" for 0x400647>, <DisassemblerInsn "and" for 0x40064a>, <DisassemblerInsn "movzx" for 0x40064c>, <DisassemblerInsn "mov" for 0x40064f>, <DisassemblerInsn "add" for 0x400655>, <DisassemblerInsn "mov" for 0x40065c>, <DisassemblerInsn "mov" for 0x400664>, <DisassemblerInsn "jmp" for 0x40066b>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40079d>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008fb>, <DisassemblerInsn "mov" for 0x400902>, <DisassemblerInsn "mov" for 0x400906>, <DisassemblerInsn "mov" for 0x40090b>, <DisassemblerInsn "cmp" for 0x40090f>, <DisassemblerInsn "sete" for 0x400912>, <DisassemblerInsn "and" for 0x400916>, <DisassemblerInsn "test" for 0x400919>, <DisassemblerInsn "mov" for 0x40091c>, <DisassemblerInsn "mov" for 0x40091f>, <DisassemblerInsn "mov" for 0x400924>, <DisassemblerInsn "mov" for 0x400929>, <DisassemblerInsn "jne" for 0x40092d>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009c9>, <DisassemblerInsn "mov" for 0x4009ce>, <DisassemblerInsn "mov" for 0x4009d2>, <DisassemblerInsn "cmp" for 0x4009d7>, <DisassemblerInsn "je" for 0x4009da>]'}, {'block_Idx': 101, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400360>, <DisassemblerInsn "mov" for 0x400367>, <DisassemblerInsn "sub" for 0x40036e>, <DisassemblerInsn "sete" for 0x400371>, <DisassemblerInsn "sub" for 0x400374>, <DisassemblerInsn "sete" for 0x400377>, <DisassemblerInsn "or" for 0x40037a>, <DisassemblerInsn "mov" for 0x40037c>, <DisassemblerInsn "test" for 0x400381>, <DisassemblerInsn "mov" for 0x400384>, <DisassemblerInsn "jne" for 0x40038b>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006cc>, <DisassemblerInsn "mov" for 0x4006d4>, <DisassemblerInsn "mov" for 0x4006dc>, <DisassemblerInsn "mov" for 0x4006e3>, <DisassemblerInsn "mov" for 0x4006ea>, <DisassemblerInsn "mov" for 0x4006f2>, <DisassemblerInsn "cmp" for 0x4006f4>, <DisassemblerInsn "mov" for 0x4006f7>, <DisassemblerInsn "mov" for 0x4006fe>, <DisassemblerInsn "jne" for 0x400706>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400951>, <DisassemblerInsn "mov" for 0x400959>, <DisassemblerInsn "mov" for 0x400961>, <DisassemblerInsn "mov" for 0x400969>, <DisassemblerInsn "mov" for 0x40096e>, <DisassemblerInsn "mov" for 0x400973>, <DisassemblerInsn "mov" for 0x400975>, <DisassemblerInsn "cmp" for 0x400977>, <DisassemblerInsn "cmovg" for 0x400979>, <DisassemblerInsn "mov" for 0x40097c>, <DisassemblerInsn "xor" for 0x40097e>, <DisassemblerInsn "lea" for 0x400980>, <DisassemblerInsn "call" for 0x400987>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400719>, <DisassemblerInsn "mov" for 0x400721>, <DisassemblerInsn "mov" for 0x400729>, <DisassemblerInsn "mov" for 0x400733>, <DisassemblerInsn "xor" for 0x400735>, <DisassemblerInsn "mov" for 0x400737>, <DisassemblerInsn "mov" for 0x40073e>, <DisassemblerInsn "mov" for 0x400746>, <DisassemblerInsn "jmp" for 0x40074d>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ab6>, <DisassemblerInsn "mov" for 0x400ab9>, <DisassemblerInsn "mov" for 0x400ac1>, <DisassemblerInsn "mov" for 0x400ac8>, <DisassemblerInsn "cmp" for 0x400acd>, <DisassemblerInsn "mov" for 0x400ad1>, <DisassemblerInsn "je" for 0x400ad5>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005ec>, <DisassemblerInsn "test" for 0x4005f3>, <DisassemblerInsn "jne" for 0x4005f5>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400423>, <DisassemblerInsn "mov" for 0x40042b>, <DisassemblerInsn "call" for 0x40042e>]'}, {'block_Idx': 105, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40038d>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007a2>, <DisassemblerInsn "mov" for 0x4007aa>, <DisassemblerInsn "mov" for 0x4007b1>, <DisassemblerInsn "mov" for 0x4007b9>, <DisassemblerInsn "mov" for 0x4007c0>, <DisassemblerInsn "mov" for 0x4007c8>, <DisassemblerInsn "mov" for 0x4007cd>, <DisassemblerInsn "mov" for 0x4007d1>, <DisassemblerInsn "xor" for 0x4007d3>, <DisassemblerInsn "mov" for 0x4007d6>, <DisassemblerInsn "mov" for 0x4007da>, <DisassemblerInsn "cmp" for 0x4007e0>, <DisassemblerInsn "mov" for 0x4007e3>, <DisassemblerInsn "mov" for 0x4007ea>, <DisassemblerInsn "mov" for 0x4007f2>, <DisassemblerInsn "je" for 0x4007f9>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40070c>, <DisassemblerInsn "cmp" for 0x400714>, <DisassemblerInsn "jne" for 0x400717>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a23>, <DisassemblerInsn "mov" for 0x400a2b>, <DisassemblerInsn "add" for 0x400a2e>, <DisassemblerInsn "mov" for 0x400a35>, <DisassemblerInsn "cmp" for 0x400a3a>, <DisassemblerInsn "je" for 0x400a41>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008a0>, <DisassemblerInsn "mov" for 0x4008a8>, <DisassemblerInsn "mov" for 0x4008ad>, <DisassemblerInsn "mov" for 0x4008b3>, <DisassemblerInsn "xor" for 0x4008b5>, <DisassemblerInsn "mov" for 0x4008b7>, <DisassemblerInsn "mov" for 0x4008bb>, <DisassemblerInsn "mov" for 0x4008c0>, <DisassemblerInsn "jmp" for 0x4008c4>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40051b>, <DisassemblerInsn "mov" for 0x400523>, <DisassemblerInsn "mov" for 0x40052b>, <DisassemblerInsn "mov" for 0x400532>, <DisassemblerInsn "cmp" for 0x400535>, <DisassemblerInsn "setne" for 0x400537>, <DisassemblerInsn "mov" for 0x40053a>, <DisassemblerInsn "mov" for 0x400541>, <DisassemblerInsn "jmp" for 0x400548>]'}, {'block_Idx': 134, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ced>, <DisassemblerInsn "add" for 0x400cf5>, <DisassemblerInsn "call" for 0x400cfc>]'}, {'block_Idx': 140, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d29>, <DisassemblerInsn "mov" for 0x400d31>, <DisassemblerInsn "mov" for 0x400d35>, <DisassemblerInsn "mov" for 0x400d3b>, <DisassemblerInsn "mov" for 0x400d42>, <DisassemblerInsn "add" for 0x400d49>, <DisassemblerInsn "ret" for 0x400d50>]'}, {'block_Idx': 125, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ca6>, <DisassemblerInsn "mov" for 0x400cae>, <DisassemblerInsn "call" for 0x400cb5>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002f0>, <DisassemblerInsn "mov" for 0x4002f7>, <DisassemblerInsn "mov" for 0x4002fe>, <DisassemblerInsn "mov" for 0x400300>, <DisassemblerInsn "cmp" for 0x400307>, <DisassemblerInsn "cmovg" for 0x400309>, <DisassemblerInsn "call" for 0x40030c>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400208>, <DisassemblerInsn "cmp" for 0x400210>, <DisassemblerInsn "setne" for 0x400214>, <DisassemblerInsn "mov" for 0x400217>, <DisassemblerInsn "mov" for 0x40021e>, <DisassemblerInsn "mov" for 0x400225>, <DisassemblerInsn "mov" for 0x40022d>, <DisassemblerInsn "mov" for 0x400234>, <DisassemblerInsn "and" for 0x40023b>, <DisassemblerInsn "movzx" for 0x40023e>, <DisassemblerInsn "mov" for 0x400241>, <DisassemblerInsn "add" for 0x400244>, <DisassemblerInsn "mov" for 0x40024b>, <DisassemblerInsn "mov" for 0x400253>, <DisassemblerInsn "mov" for 0x400259>, <DisassemblerInsn "add" for 0x40025c>, <DisassemblerInsn "mov" for 0x400260>, <DisassemblerInsn "cmp" for 0x400268>, <DisassemblerInsn "mov" for 0x40026c>, <DisassemblerInsn "jne" for 0x400273>]'}, {'block_Idx': 117, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c0d>, <DisassemblerInsn "xor" for 0x400c15>, <DisassemblerInsn "cmp" for 0x400c17>, <DisassemblerInsn "mov" for 0x400c1a>, <DisassemblerInsn "je" for 0x400c21>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40054a>, <DisassemblerInsn "xor" for 0x400552>, <DisassemblerInsn "mov" for 0x400554>, <DisassemblerInsn "xor" for 0x400556>, <DisassemblerInsn "cmp" for 0x400558>, <DisassemblerInsn "mov" for 0x40055b>, <DisassemblerInsn "mov" for 0x400562>, <DisassemblerInsn "je" for 0x400569>]'}, {'block_Idx': 89, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40087a>, <DisassemblerInsn "mov" for 0x400882>, <DisassemblerInsn "mov" for 0x400887>, <DisassemblerInsn "mov" for 0x40088d>, <DisassemblerInsn "xor" for 0x40088f>, <DisassemblerInsn "mov" for 0x400891>, <DisassemblerInsn "mov" for 0x400895>, <DisassemblerInsn "mov" for 0x40089a>, <DisassemblerInsn "jmp" for 0x40089e>]'}, {'block_Idx': 113, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400bd2>, <DisassemblerInsn "cmp" for 0x400bda>, <DisassemblerInsn "je" for 0x400bdd>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d42>, <DisassemblerInsn "add" for 0x400d49>, <DisassemblerInsn "ret" for 0x400d50>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40048d>, <DisassemblerInsn "cmp" for 0x400495>, <DisassemblerInsn "jne" for 0x400498>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40098c>, <DisassemblerInsn "mov" for 0x40098f>, <DisassemblerInsn "mov" for 0x400997>, <DisassemblerInsn "mov" for 0x40099e>, <DisassemblerInsn "cmp" for 0x4009a3>, <DisassemblerInsn "mov" for 0x4009a7>, <DisassemblerInsn "je" for 0x4009ab>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400935>, <DisassemblerInsn "mov" for 0x40093a>, <DisassemblerInsn "mov" for 0x400942>, <DisassemblerInsn "mov" for 0x40094c>, <DisassemblerInsn "mov" for 0x400951>, <DisassemblerInsn "mov" for 0x400959>, <DisassemblerInsn "mov" for 0x400961>, <DisassemblerInsn "mov" for 0x400969>, <DisassemblerInsn "mov" for 0x40096e>, <DisassemblerInsn "mov" for 0x400973>, <DisassemblerInsn "mov" for 0x400975>, <DisassemblerInsn "cmp" for 0x400977>, <DisassemblerInsn "cmovg" for 0x400979>, <DisassemblerInsn "mov" for 0x40097c>, <DisassemblerInsn "xor" for 0x40097e>, <DisassemblerInsn "lea" for 0x400980>, <DisassemblerInsn "call" for 0x400987>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400100>, <DisassemblerInsn "mov" for 0x400107>, <DisassemblerInsn "mov" for 0x40010f>, <DisassemblerInsn "mov" for 0x400117>, <DisassemblerInsn "mov" for 0x400119>, <DisassemblerInsn "cmp" for 0x400120>, <DisassemblerInsn "setg" for 0x400122>, <DisassemblerInsn "mov" for 0x400126>, <DisassemblerInsn "cmp" for 0x40012e>, <DisassemblerInsn "mov" for 0x400130>, <DisassemblerInsn "cmovg" for 0x400132>, <DisassemblerInsn "mov" for 0x400135>, <DisassemblerInsn "and" for 0x400138>, <DisassemblerInsn "movzx" for 0x40013c>, <DisassemblerInsn "mov" for 0x400140>, <DisassemblerInsn "cmp" for 0x400146>, <DisassemblerInsn "setl" for 0x400148>, <DisassemblerInsn "cmp" for 0x40014b>, <DisassemblerInsn "mov" for 0x40014d>, <DisassemblerInsn "jne" for 0x400154>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400933>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400191>, <DisassemblerInsn "mov" for 0x400199>, <DisassemblerInsn "mov" for 0x4001a0>, <DisassemblerInsn "movzx" for 0x4001a7>, <DisassemblerInsn "and" for 0x4001aa>, <DisassemblerInsn "mov" for 0x4001ad>, <DisassemblerInsn "or" for 0x4001b3>, <DisassemblerInsn "mov" for 0x4001b5>, <DisassemblerInsn "and" for 0x4001bc>, <DisassemblerInsn "movzx" for 0x4001be>, <DisassemblerInsn "mov" for 0x4001c1>, <DisassemblerInsn "add" for 0x4001c4>, <DisassemblerInsn "mov" for 0x4001cb>, <DisassemblerInsn "mov" for 0x4001d3>, <DisassemblerInsn "mov" for 0x4001d9>, <DisassemblerInsn "add" for 0x4001dc>, <DisassemblerInsn "mov" for 0x4001e0>, <DisassemblerInsn "mov" for 0x4001e8>, <DisassemblerInsn "mov" for 0x4001eb>, <DisassemblerInsn "add" for 0x4001ee>, <DisassemblerInsn "mov" for 0x4001f2>, <DisassemblerInsn "mov" for 0x4001fa>, <DisassemblerInsn "cmp" for 0x4001fc>, <DisassemblerInsn "mov" for 0x4001ff>, <DisassemblerInsn "jne" for 0x400206>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40045d>, <DisassemblerInsn "mov" for 0x40045f>, <DisassemblerInsn "mov" for 0x400467>, <DisassemblerInsn "mov" for 0x40046a>, <DisassemblerInsn "mov" for 0x400472>, <DisassemblerInsn "add" for 0x400475>, <DisassemblerInsn "mov" for 0x40047c>, <DisassemblerInsn "cmp" for 0x400484>, <DisassemblerInsn "je" for 0x40048b>]'}, {'block_Idx': 114, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b53>, <DisassemblerInsn "mov" for 0x400b5b>, <DisassemblerInsn "mov" for 0x400b63>, <DisassemblerInsn "mov" for 0x400b6b>, <DisassemblerInsn "mov" for 0x400b70>, <DisassemblerInsn "mov" for 0x400b78>, <DisassemblerInsn "mov" for 0x400b7d>, <DisassemblerInsn "mov" for 0x400b80>, <DisassemblerInsn "add" for 0x400b83>, <DisassemblerInsn "cmp" for 0x400b87>, <DisassemblerInsn "cmove" for 0x400b8b>, <DisassemblerInsn "mov" for 0x400b8f>, <DisassemblerInsn "mov" for 0x400b91>, <DisassemblerInsn "mov" for 0x400b93>, <DisassemblerInsn "mov" for 0x400b95>, <DisassemblerInsn "cmp" for 0x400b98>, <DisassemblerInsn "sete" for 0x400b9f>, <DisassemblerInsn "and" for 0x400ba2>, <DisassemblerInsn "movzx" for 0x400ba4>, <DisassemblerInsn "call" for 0x400ba8>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a43>, <DisassemblerInsn "mov" for 0x400a4b>, <DisassemblerInsn "mov" for 0x400a53>, <DisassemblerInsn "mov" for 0x400a55>, <DisassemblerInsn "xor" for 0x400a58>, <DisassemblerInsn "lea" for 0x400a5a>, <DisassemblerInsn "call" for 0x400a61>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400311>, <DisassemblerInsn "mov" for 0x400313>, <DisassemblerInsn "mov" for 0x40031a>, <DisassemblerInsn "cmp" for 0x40031f>, <DisassemblerInsn "mov" for 0x400322>, <DisassemblerInsn "jl" for 0x400329>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400156>, <DisassemblerInsn "mov" for 0x40015e>, <DisassemblerInsn "cmp" for 0x400160>, <DisassemblerInsn "mov" for 0x400168>, <DisassemblerInsn "jne" for 0x40016f>]'}, {'block_Idx': 124, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400bad>, <DisassemblerInsn "mov" for 0x400bb0>, <DisassemblerInsn "mov" for 0x400bb8>, <DisassemblerInsn "mov" for 0x400bbf>, <DisassemblerInsn "cmp" for 0x400bc4>, <DisassemblerInsn "mov" for 0x400bc8>, <DisassemblerInsn "je" for 0x400bcc>]'}, {'block_Idx': 95, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400348>, <DisassemblerInsn "mov" for 0x40034f>, <DisassemblerInsn "cmp" for 0x400354>, <DisassemblerInsn "mov" for 0x400357>, <DisassemblerInsn "jae" for 0x40035e>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004ef>, <DisassemblerInsn "mov" for 0x4004f7>, <DisassemblerInsn "cmp" for 0x4004f9>, <DisassemblerInsn "mov" for 0x4004fc>, <DisassemblerInsn "jne" for 0x400503>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002a1>, <DisassemblerInsn "mov" for 0x4002a9>, <DisassemblerInsn "call" for 0x4002ac>]'}], 'cfg_block_detailed_info': [{'block_Idx': 44, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500028>']}, {'block_Idx': 130, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rdi + 0xb8], 0>', '<add~~rdi, 0xc0>', '<call~~0x500068>']}, {'block_Idx': 96, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<add~~rdi, 0xa0>', '<call~~0x500058>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~dl, byte ptr [rsp + 0xd3]>', '<mov~~eax, dword ptr [rsp + 0xd4]>', '<mov~~dword ptr [rsp + 0xc4], eax>', '<mov~~byte ptr [rsp + 0xcb], dl>', '<and~~dl, 1>', '<movzx~~edx, dl>', '<mov~~dword ptr [rsp + 0xcc], edx>', '<mov~~dword ptr [rcx + 0x90], edx>', '<cmp~~eax, 0>', '<jne~~0x40066d>']}, {'block_Idx': 93, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<mov~~eax, 0xffffffea>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<je~~0x400c62>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x16c], eax>', '<jmp~~0x400d42>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x110]>', '<mov~~eax, dword ptr [rax]>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<jne~~0x40051b>']}, {'block_Idx': 109, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~rax, qword ptr [rsp + 0x130]>', '<mov~~rcx, qword ptr [rsp + 0x180]>', '<mov~~rdx, qword ptr [rsp + 0x118]>', '<mov~~esi, dword ptr [rdx]>', '<mov~~edx, dword ptr [rdi + 0x10]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~r8d, dword ptr [rax]>', '<cmp~~dword ptr [rdi + 0xf4], 2>', '<sete~~al>', '<and~~al, 1>', '<movzx~~r9d, al>', '<call~~0x500040>']}, {'block_Idx': 21, 'blockInsts': ['<jmp~~0x400417>']}, {'block_Idx': 65, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xa0]>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~edx, dword ptr [rsp + 0xc4]>', '<cmp~~edx, 0>', '<setne~~dl>', '<mov~~sil, dl>', '<and~~sil, 1>', '<movzx~~esi, sil>', '<mov~~dword ptr [rax + 0x98], esi>', '<mov~~eax, 1>', '<test~~dl, 1>', '<mov~~qword ptr [rsp + 0x80], rcx>', '<mov~~dword ptr [rsp + 0x88], eax>', '<jne~~0x400825>']}, {'block_Idx': 132, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<add~~rdi, 0xc8>', '<call~~0x500068>']}, {'block_Idx': 106, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xfc]>', '<mov~~ecx, dword ptr [rsp + 0x100]>', '<sub~~ecx, 8>', '<sete~~dl>', '<sub~~eax, 8>', '<sete~~al>', '<or~~dl, al>', '<mov~~eax, 7>', '<mov~~ecx, 9>', '<test~~dl, 1>', '<cmovne~~eax, ecx>', '<mov~~dword ptr [rsp + 0x108], eax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x118]>', '<mov~~edi, dword ptr [rsp + 0x108]>', '<mov~~dword ptr [rcx], edi>', '<mov~~qword ptr [rsp + 0xf0], rax>', '<call~~0x500020>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x128]>', '<cmp~~dword ptr [rax], 0>', '<jne~~0x40066d>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~dword ptr [rsp + 0x100], ecx>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500010>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x148]>', '<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~dl, byte ptr [rsp + 0x147]>', '<mov~~byte ptr [rsp + 0x10f], dl>', '<and~~dl, 1>', '<movzx~~edx, dl>', '<mov~~rsi, rcx>', '<add~~rsi, 0x8c>', '<mov~~qword ptr [rsp + 0x110], rsi>', '<mov~~dword ptr [rcx + 0x8c], edx>', '<mov~~rdx, rcx>', '<add~~rdx, 0x28>', '<mov~~qword ptr [rsp + 0x118], rdx>', '<cmp~~dword ptr [rcx + 0x28], -1>', '<mov~~dword ptr [rsp + 0x120], eax>', '<jne~~0x400417>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~sil, byte ptr [rsp + 0xcb]>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x118]>', '<mov~~ecx, dword ptr [rcx]>', '<cmp~~ecx, dword ptr [rax + 0x20]>', '<setne~~cl>', '<and~~cl, 1>', '<movzx~~edx, cl>', '<mov~~dword ptr [rax + 0x94], edx>', '<add~~rax, 0x90>', '<xor~~ecx, ecx>', '<test~~sil, 1>', '<mov~~rsi, rax>', '<mov~~qword ptr [rsp + 0xa8], rsi>', '<mov~~dword ptr [rsp + 0xb0], edx>', '<mov~~byte ptr [rsp + 0xb7], cl>', '<mov~~qword ptr [rsp + 0xb8], rax>', '<jne~~0x4007a2>']}, {'block_Idx': 110, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x180]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x120], eax>', '<mov~~eax, dword ptr [rsp + 0x120]>', '<cmp~~eax, 1>', '<jne~~0x400440>']}, {'block_Idx': 87, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x128]>', '<mov~~eax, 8>', '<cmp~~dword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0x108], eax>', '<jne~~0x4003c2>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x160]>', '<cmp~~dword ptr [rax], 1>', '<jne~~0x40046a>']}, {'block_Idx': 68, 'blockInsts': ['<jmp~~0x400935>']}, {'block_Idx': 53, 'blockInsts': ['<cmp~~eax, 0>', '<jne~~0x4004ef>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~dword ptr [rax + 0x10], ecx>', '<mov~~rax, qword ptr [rsp + 0x160]>', '<cmp~~dword ptr [rax], 1>', '<jne~~0x40046a>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0x100]>', '<mov~~dword ptr [rsp + 0xfc], eax>', '<call~~0x500018>']}, {'block_Idx': 103, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x400b49>']}, {'block_Idx': 75, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x118]>', '<mov~~rcx, qword ptr [rsp + 0x160]>', '<mov~~edi, dword ptr [rcx]>', '<mov~~edx, dword ptr [rax]>', '<xor~~esi, esi>', '<lea~~rcx, [rip + 0x2094]>', '<call~~0x500030>']}, {'block_Idx': 69, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x80]>', '<mov~~eax, dword ptr [rsp + 0x88]>', '<mov~~dword ptr [rdx + 0xf4], 1>', '<mov~~dl, 1>', '<mov~~byte ptr [rsp + 0x5f], dl>', '<mov~~qword ptr [rsp + 0x60], rcx>', '<mov~~dword ptr [rsp + 0x6c], eax>', '<jmp~~0x4008fb>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~edi, dword ptr [rax]>', '<call~~0x500010>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x118]>', '<mov~~ecx, dword ptr [rcx]>', '<cmp~~ecx, dword ptr [rax + 0x20]>', '<setne~~cl>', '<and~~cl, 1>', '<movzx~~ecx, cl>', '<mov~~dword ptr [rax + 0x94], ecx>', '<add~~rax, 0x90>', '<xor~~ecx, ecx>', '<mov~~byte ptr [rsp + 0xb7], cl>', '<mov~~qword ptr [rsp + 0xb8], rax>', '<jmp~~0x4007a2>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x7c]>', '<mov~~rcx, qword ptr [rsp + 0x70]>', '<mov~~dl, byte ptr [rsp + 0x7b]>', '<test~~dl, 1>', '<mov~~qword ptr [rsp + 0x80], rcx>', '<mov~~dword ptr [rsp + 0x88], eax>', '<jne~~0x400825>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x148]>', '<mov~~dl, byte ptr [rsp + 0x10f]>', '<mov~~cl, byte ptr [rsp + 0x127]>', '<or~~cl, dl>', '<test~~cl, 1>', '<mov~~dword ptr [rsp + 0x120], eax>', '<jne~~0x4002a1>']}, {'block_Idx': 116, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<add~~rdi, 0xb0>', '<call~~0x500058>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x9c]>', '<mov~~rcx, qword ptr [rsp + 0x178]>', '<add~~rcx, 0xf4>', '<mov~~qword ptr [rsp + 0x50], rcx>', '<cmp~~eax, 0>', '<je~~0x4008a0>']}, {'block_Idx': 107, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<add~~rdi, 0xa8>', '<call~~0x500058>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x2953]>', '<mov~~al, 0>', '<call~~0x500008>']}, {'block_Idx': 122, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<call~~0x500050>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x128]>', '<xor~~eax, eax>', '<cmp~~dword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<je~~0x40054a>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~dword ptr [rsp + 0x15c], eax>', '<mov~~rdx, rcx>', '<add~~rdx, 0x78>', '<mov~~qword ptr [rsp + 0x160], rdx>', '<mov~~dword ptr [rcx + 0x78], eax>', '<add~~eax, -0x21>', '<cmp~~eax, -0x20>', '<jae~~0x400100>']}, {'block_Idx': 99, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rax + 0xb0], rcx>', '<mov~~eax, 0xffffffea>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<je~~0x400c62>']}, {'block_Idx': 127, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rax + 0xd0], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<je~~0x400c62>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0xfc]>', '<mov~~dword ptr [rsp + 0xf8], eax>', '<call~~0x500018>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500010>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x120]>', '<cmp~~eax, 1>', '<jne~~0x400440>']}, {'block_Idx': 138, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<add~~rdi, 0xe8>', '<call~~0x500080>']}, {'block_Idx': 42, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, rax>', '<add~~rcx, 0x20>', '<mov~~qword ptr [rsp + 0xd8], rcx>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500028>']}, {'block_Idx': 129, 'blockInsts': ['<mov~~rdx, rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rax + 0xd8], rdx>', '<mov~~ecx, 0xfffffff4>', '<xor~~eax, eax>', '<cmp~~rdx, 0>', '<mov~~dword ptr [rsp + 0x34], ecx>', '<mov~~dword ptr [rsp + 0x16c], eax>', '<jne~~0x400d42>']}, {'block_Idx': 118, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<call~~0x500048>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x150]>', '<mov~~rax, qword ptr [rsp + 0x170]>', '<mov~~rax, qword ptr [rax]>', '<cmp~~rax, qword ptr [rcx]>', '<setne~~al>', '<mov~~byte ptr [rsp + 0x14f], al>', '<mov~~rdx, qword ptr [rsp + 0x178]>', '<mov~~al, byte ptr [rsp + 0x14e]>', '<mov~~cl, byte ptr [rsp + 0x14f]>', '<movzx~~esi, cl>', '<and~~esi, 1>', '<mov~~dword ptr [rdx + 0x84], esi>', '<or~~al, cl>', '<mov~~byte ptr [rsp + 0x127], al>', '<and~~al, 1>', '<movzx~~eax, al>', '<mov~~rcx, rdx>', '<add~~rcx, 0x88>', '<mov~~qword ptr [rsp + 0x128], rcx>', '<mov~~dword ptr [rdx + 0x88], eax>', '<mov~~rax, rdx>', '<add~~rax, 0x14>', '<mov~~qword ptr [rsp + 0x130], rax>', '<mov~~ecx, dword ptr [rdx + 0x14]>', '<mov~~rax, rdx>', '<add~~rax, 0x24>', '<mov~~qword ptr [rsp + 0x138], rax>', '<mov~~al, 1>', '<cmp~~ecx, dword ptr [rdx + 0x24]>', '<mov~~byte ptr [rsp + 0x147], al>', '<jne~~0x40021e>']}, {'block_Idx': 108, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x400bd2>']}, {'block_Idx': 136, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<add~~rdi, 0xd8>', '<call~~0x500078>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~rcx, rdi>', '<add~~rcx, 0x74>', '<mov~~qword ptr [rsp + 0x180], rcx>', '<mov~~dword ptr [rdi + 0x74], eax>', '<add~~eax, -0x21>', '<cmp~~eax, -0x20>', '<jae~~0x400080>']}, {'block_Idx': 100, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xf0]>', '<mov~~rcx, rax>', '<mov~~esi, 0x30>', '<lea~~rdx, [rip + 0x2660]>', '<mov~~al, 0>', '<call~~0x500008>']}, {'block_Idx': 97, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rsp + 0x110]>', '<mov~~eax, dword ptr [rax]>', '<mov~~qword ptr [rsp + 0x40], rcx>', '<mov~~dword ptr [rsp + 0x4c], eax>', '<mov~~rcx, qword ptr [rsp + 0x40]>', '<mov~~eax, dword ptr [rsp + 0x4c]>', '<mov~~qword ptr [rsp + 0x20], rcx>', '<cmp~~eax, 0>', '<je~~0x400a23>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x170]>', '<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x29b0]>', '<mov~~al, 0>', '<call~~0x500008>']}, {'block_Idx': 120, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rax + 0xc0], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<je~~0x400c62>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~rax, qword ptr [rsp + 0x160]>', '<mov~~rdx, rcx>', '<add~~rdx, 0x20>', '<mov~~qword ptr [rsp + 0x10], rdx>', '<mov~~edi, dword ptr [rcx + 0x20]>', '<mov~~esi, dword ptr [rax]>', '<mov~~edx, 0x400>', '<call~~0x500038>']}, {'block_Idx': 59, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x178]>', '<mov~~dl, byte ptr [rsp + 0x8f]>', '<mov~~rcx, qword ptr [rsp + 0x90]>', '<mov~~eax, dword ptr [rsp + 0x98]>', '<mov~~dword ptr [rsi + 0xf4], 0>', '<mov~~byte ptr [rsp + 0x5f], dl>', '<mov~~qword ptr [rsp + 0x60], rcx>', '<mov~~dword ptr [rsp + 0x6c], eax>', '<mov~~eax, dword ptr [rsp + 0xc4]>', '<mov~~dl, byte ptr [rsp + 0x5f]>', '<mov~~rcx, qword ptr [rsp + 0x60]>', '<mov~~esi, dword ptr [rsp + 0x6c]>', '<cmp~~esi, 0>', '<sete~~sil>', '<and~~dl, sil>', '<test~~dl, 1>', '<mov~~rdx, rcx>', '<mov~~qword ptr [rsp + 0x38], rdx>', '<mov~~qword ptr [rsp + 0x40], rcx>', '<mov~~dword ptr [rsp + 0x4c], eax>', '<jne~~0x4009c9>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, rax>', '<add~~rcx, 0x18>', '<mov~~qword ptr [rsp + 0x150], rcx>', '<mov~~rdi, qword ptr [rax + 0x18]>', '<call~~0x500000>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x188>', '<mov~~qword ptr [rsp + 0x178], rdi>', '<mov~~rax, rdi>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x170], rax>', '<mov~~rdi, qword ptr [rdi + 8]>', '<call~~0x500000>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x16c], eax>', '<jmp~~0x400d42>']}, {'block_Idx': 56, 'blockInsts': ['<jmp~~0x400639>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x118]>', '<mov~~dword ptr [rax], ecx>', '<mov~~rax, qword ptr [rsp + 0x110]>', '<mov~~eax, dword ptr [rax]>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<jne~~0x40051b>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, rax>', '<add~~rcx, 0xf0>', '<mov~~qword ptr [rsp + 0xe8], rcx>', '<cmp~~dword ptr [rax + 0xf0], 0>', '<je~~0x4004ef>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x110]>', '<cmp~~ecx, 0>', '<sete~~cl>', '<mov~~eax, dword ptr [rax]>', '<mov~~byte ptr [rsp + 0xd3], cl>', '<mov~~dword ptr [rsp + 0xd4], eax>', '<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~dl, byte ptr [rsp + 0xd3]>', '<mov~~eax, dword ptr [rsp + 0xd4]>', '<mov~~dword ptr [rsp + 0xc4], eax>', '<mov~~byte ptr [rsp + 0xcb], dl>', '<and~~dl, 1>', '<movzx~~edx, dl>', '<mov~~dword ptr [rsp + 0xcc], edx>', '<mov~~dword ptr [rcx + 0x90], edx>', '<cmp~~eax, 0>', '<jne~~0x40066d>']}, {'block_Idx': 86, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x118]>', '<mov~~edi, dword ptr [rsp + 0x108]>', '<mov~~dword ptr [rcx], edi>', '<mov~~qword ptr [rsp + 0xf0], rax>', '<call~~0x500020>']}, {'block_Idx': 63, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~eax, dword ptr [rcx + 0x10]>', '<cmp~~eax, dword ptr [rcx + 0x20]>', '<setne~~al>', '<and~~al, 1>', '<movzx~~eax, al>', '<mov~~dword ptr [rcx + 0x94], eax>', '<add~~rcx, 0x90>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<mov~~dword ptr [rsp + 0xb0], eax>', '<jmp~~0x4006cc>']}, {'block_Idx': 72, 'blockInsts': ['<jmp~~0x40085a>']}, {'block_Idx': 77, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xc4]>', '<mov~~dl, byte ptr [rsp + 0x5f]>', '<mov~~rcx, qword ptr [rsp + 0x60]>', '<mov~~esi, dword ptr [rsp + 0x6c]>', '<cmp~~esi, 0>', '<sete~~sil>', '<and~~dl, sil>', '<test~~dl, 1>', '<mov~~rdx, rcx>', '<mov~~qword ptr [rsp + 0x38], rdx>', '<mov~~qword ptr [rsp + 0x40], rcx>', '<mov~~dword ptr [rsp + 0x4c], eax>', '<jne~~0x4009c9>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x40]>', '<mov~~eax, dword ptr [rsp + 0x4c]>', '<mov~~qword ptr [rsp + 0x20], rcx>', '<cmp~~eax, 0>', '<je~~0x400a23>']}, {'block_Idx': 101, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xfc]>', '<mov~~ecx, dword ptr [rsp + 0x100]>', '<sub~~ecx, 7>', '<sete~~cl>', '<sub~~eax, 7>', '<sete~~al>', '<or~~cl, al>', '<mov~~eax, 8>', '<test~~cl, 1>', '<mov~~dword ptr [rsp + 0x108], eax>', '<jne~~0x40038f>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x128]>', '<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~ecx, dword ptr [rsp + 0xb0]>', '<mov~~dword ptr [rsp + 0x9c], ecx>', '<mov~~qword ptr [rsp + 0xa0], rax>', '<mov~~cl, 1>', '<cmp~~dword ptr [rdx], 0>', '<mov~~byte ptr [rsp + 0xb7], cl>', '<mov~~qword ptr [rsp + 0xb8], rax>', '<jne~~0x4007a2>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x118]>', '<mov~~rdx, qword ptr [rsp + 0x160]>', '<mov~~rcx, qword ptr [rsp + 0x180]>', '<mov~~rsi, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rsp + 0x28], rsi>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~edi, dword ptr [rdx]>', '<cmp~~ecx, edi>', '<cmovg~~edi, ecx>', '<mov~~edx, dword ptr [rax]>', '<xor~~esi, esi>', '<lea~~rcx, [rip + 0x20fc]>', '<call~~0x500030>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xa0]>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~dword ptr [rax + 0x98], 0>', '<mov~~dl, 1>', '<xor~~eax, eax>', '<mov~~byte ptr [rsp + 0x8f], dl>', '<mov~~qword ptr [rsp + 0x90], rcx>', '<mov~~dword ptr [rsp + 0x98], eax>', '<jmp~~0x4008c6>']}, {'block_Idx': 98, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rax + 0xb8], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<je~~0x400c62>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0xcb]>', '<test~~al, 1>', '<jne~~0x4005f9>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~edi, dword ptr [rax + 0x10]>', '<call~~0x500010>']}, {'block_Idx': 105, 'blockInsts': ['<jmp~~0x4003c2>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~eax, dword ptr [rsp + 0xcc]>', '<mov~~rsi, qword ptr [rsp + 0xe8]>', '<mov~~dl, byte ptr [rsp + 0xb7]>', '<mov~~rcx, qword ptr [rsp + 0xb8]>', '<mov~~qword ptr [rsp + 0x70], rcx>', '<mov~~byte ptr [rsp + 0x7b], dl>', '<mov~~esi, dword ptr [rsi]>', '<xor~~eax, 1>', '<mov~~dword ptr [rsp + 0x7c], eax>', '<mov~~dword ptr [rdi + 0x98], eax>', '<cmp~~esi, 0>', '<mov~~byte ptr [rsp + 0x8f], dl>', '<mov~~qword ptr [rsp + 0x90], rcx>', '<mov~~dword ptr [rsp + 0x98], eax>', '<je~~0x4008c6>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<cmp~~dword ptr [rax], 0>', '<jne~~0x400752>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, rax>', '<add~~rcx, 0x94>', '<mov~~qword ptr [rsp + 0x18], rcx>', '<cmp~~dword ptr [rax + 0x94], 0>', '<je~~0x400a8b>']}, {'block_Idx': 88, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xa0]>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<mov~~dword ptr [rax], 3>', '<mov~~dl, 1>', '<xor~~eax, eax>', '<mov~~byte ptr [rsp + 0x5f], dl>', '<mov~~qword ptr [rsp + 0x60], rcx>', '<mov~~dword ptr [rsp + 0x6c], eax>', '<jmp~~0x4008fb>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x118]>', '<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~eax, dword ptr [rsp + 0xe4]>', '<mov~~ecx, dword ptr [rcx + 0x10]>', '<cmp~~ecx, dword ptr [rdx]>', '<setne~~cl>', '<mov~~byte ptr [rsp + 0xd3], cl>', '<mov~~dword ptr [rsp + 0xd4], eax>', '<jmp~~0x40059b>']}, {'block_Idx': 134, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<add~~rdi, 0xd0>', '<call~~0x500070>']}, {'block_Idx': 140, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xe8]>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<mov~~dword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0x16c], eax>', '<mov~~eax, dword ptr [rsp + 0x16c]>', '<add~~rsp, 0x188>', '<ret~~>']}, {'block_Idx': 125, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rdi, qword ptr [rax + 0xb8]>', '<call~~0x500060>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xf8]>', '<mov~~edi, dword ptr [rsp + 0xfc]>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x100]>', '<cmp~~ecx, edx>', '<cmovg~~edi, eax>', '<call~~0x500018>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<cmp~~dword ptr [rax + 0x4c], 0>', '<setne~~al>', '<mov~~byte ptr [rsp + 0x147], al>', '<mov~~eax, dword ptr [rsp + 0x148]>', '<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~dl, byte ptr [rsp + 0x147]>', '<mov~~byte ptr [rsp + 0x10f], dl>', '<and~~dl, 1>', '<movzx~~edx, dl>', '<mov~~rsi, rcx>', '<add~~rsi, 0x8c>', '<mov~~qword ptr [rsp + 0x110], rsi>', '<mov~~dword ptr [rcx + 0x8c], edx>', '<mov~~rdx, rcx>', '<add~~rdx, 0x28>', '<mov~~qword ptr [rsp + 0x118], rdx>', '<cmp~~dword ptr [rcx + 0x28], -1>', '<mov~~dword ptr [rsp + 0x120], eax>', '<jne~~0x400417>']}, {'block_Idx': 117, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x128]>', '<xor~~eax, eax>', '<cmp~~dword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0x16c], eax>', '<je~~0x400d42>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xe8]>', '<xor~~eax, eax>', '<mov~~cl, al>', '<xor~~eax, eax>', '<cmp~~dword ptr [rdx], 0>', '<mov~~byte ptr [rsp + 0xd3], cl>', '<mov~~dword ptr [rsp + 0xd4], eax>', '<je~~0x40059b>']}, {'block_Idx': 89, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xa0]>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<mov~~dword ptr [rax], 4>', '<mov~~dl, 1>', '<xor~~eax, eax>', '<mov~~byte ptr [rsp + 0x5f], dl>', '<mov~~qword ptr [rsp + 0x60], rcx>', '<mov~~dword ptr [rsp + 0x6c], eax>', '<jmp~~0x4008fb>']}, {'block_Idx': 113, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x110]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x400c0d>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x16c]>', '<add~~rsp, 0x188>', '<ret~~>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x128]>', '<cmp~~dword ptr [rax], 0>', '<jne~~0x4004ef>']}, {'block_Idx': 90, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rax + 0xa0], rcx>', '<mov~~eax, 0xffffffea>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<je~~0x400c62>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~dword ptr [rcx + 0xf4], 2>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, qword ptr [rsp + 0x118]>', '<mov~~rdx, qword ptr [rsp + 0x160]>', '<mov~~rcx, qword ptr [rsp + 0x180]>', '<mov~~rsi, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rsp + 0x28], rsi>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~edi, dword ptr [rdx]>', '<cmp~~ecx, edi>', '<cmovg~~edi, ecx>', '<mov~~edx, dword ptr [rax]>', '<xor~~esi, esi>', '<lea~~rcx, [rip + 0x20fc]>', '<call~~0x500030>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x15c]>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x180]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x148], ecx>', '<cmp~~ecx, edx>', '<setg~~sil>', '<mov~~byte ptr [rsp + 0x14e], sil>', '<cmp~~ecx, edx>', '<mov~~edi, ecx>', '<cmovg~~edi, edx>', '<mov~~dword ptr [rax + 0x7c], edi>', '<and~~sil, 1>', '<movzx~~esi, sil>', '<mov~~dword ptr [rax + 0x80], esi>', '<cmp~~ecx, edx>', '<setl~~al>', '<cmp~~ecx, edx>', '<mov~~byte ptr [rsp + 0x14f], al>', '<jne~~0x400191>']}, {'block_Idx': 66, 'blockInsts': ['<jmp~~0x400951>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x178]>', '<mov~~al, byte ptr [rsp + 0x14e]>', '<mov~~cl, byte ptr [rsp + 0x14f]>', '<movzx~~esi, cl>', '<and~~esi, 1>', '<mov~~dword ptr [rdx + 0x84], esi>', '<or~~al, cl>', '<mov~~byte ptr [rsp + 0x127], al>', '<and~~al, 1>', '<movzx~~eax, al>', '<mov~~rcx, rdx>', '<add~~rcx, 0x88>', '<mov~~qword ptr [rsp + 0x128], rcx>', '<mov~~dword ptr [rdx + 0x88], eax>', '<mov~~rax, rdx>', '<add~~rax, 0x14>', '<mov~~qword ptr [rsp + 0x130], rax>', '<mov~~ecx, dword ptr [rdx + 0x14]>', '<mov~~rax, rdx>', '<add~~rax, 0x24>', '<mov~~qword ptr [rsp + 0x138], rax>', '<mov~~al, 1>', '<cmp~~ecx, dword ptr [rdx + 0x24]>', '<mov~~byte ptr [rsp + 0x147], al>', '<jne~~0x40021e>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~dword ptr [rax + 0x20], ecx>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, rax>', '<add~~rcx, 0xf0>', '<mov~~qword ptr [rsp + 0xe8], rcx>', '<cmp~~dword ptr [rax + 0xf0], 0>', '<je~~0x4004ef>']}, {'block_Idx': 114, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~rax, qword ptr [rsp + 0x138]>', '<mov~~rcx, qword ptr [rsp + 0x160]>', '<mov~~rsi, qword ptr [rsp + 0x10]>', '<mov~~rdx, qword ptr [rsp + 0x118]>', '<mov~~r8, qword ptr [rsp + 0x20]>', '<mov~~r9d, dword ptr [r8]>', '<mov~~r8, rdi>', '<add~~r8, 0x10>', '<cmp~~r9d, 0>', '<cmove~~rdx, r8>', '<mov~~edx, dword ptr [rdx]>', '<mov~~esi, dword ptr [rsi]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~r8d, dword ptr [rax]>', '<cmp~~dword ptr [rdi + 0xf4], 4>', '<sete~~al>', '<and~~al, 1>', '<movzx~~r9d, al>', '<call~~0x500040>']}, {'block_Idx': 83, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x160]>', '<mov~~edi, dword ptr [rcx]>', '<mov~~edx, dword ptr [rax + 0x20]>', '<xor~~esi, esi>', '<lea~~rcx, [rip + 0x2040]>', '<call~~0x500030>']}, {'block_Idx': 79, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x104], ecx>', '<mov~~eax, 6>', '<cmp~~ecx, 3>', '<mov~~dword ptr [rsp + 0x108], eax>', '<jl~~0x4003c2>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~al, 1>', '<cmp~~qword ptr [rcx + 0xe8], 0>', '<mov~~byte ptr [rsp + 0x14f], al>', '<jne~~0x400191>']}, {'block_Idx': 124, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rax + 0xc8], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<je~~0x400c62>']}, {'block_Idx': 95, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x104]>', '<mov~~eax, 9>', '<cmp~~ecx, 5>', '<mov~~dword ptr [rsp + 0x108], eax>', '<jae~~0x4003c2>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x110]>', '<mov~~eax, dword ptr [rax]>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<jne~~0x40051b>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~edi, dword ptr [rax + 0x10]>', '<call~~0x500010>']}], 'cfg_edge_info': [(32, 37), (35, 33), (58, 65), (90, 97), (89, 77), (73, 90), (116, 125), (101, 106), (53, 32), (113, 117), (40, 41), (129, 9), (103, 109), (11, 14), (138, 140), (74, 82), (100, 110), (124, 113), (97, 74), (18, 19), (33, 38), (98, 103), (95, 86), (59, 66), (108, 114), (125, 130), (8, 11), (2, 4), (65, 72), (80, 88), (78, 36), (98, 96), (50, 56), (110, 24), (14, 17), (60, 69), (46, 52), (57, 52), (106, 100), (120, 108), (15, 9), (55, 45), (16, 17), (93, 74), (0, 2), (114, 124), (10, 15), (13, 14), (30, 27), (45, 46), (64, 59), (35, 32), (79, 87), (90, 96), (51, 52), (101, 105), (52, 60), (103, 108), (13, 16), (7, 9), (53, 61), (117, 9), (76, 90), (127, 117), (108, 113), (120, 96), (132, 134), (124, 96), (19, 22), (27, 35), (45, 50), (77, 66), (41, 46), (3, 7), (20, 23), (67, 74), (46, 51), (60, 68), (87, 86), (40, 44), (87, 95), (80, 89), (78, 37), (39, 48), (36, 40), (99, 96), (32, 36), (134, 136), (58, 64), (4, 8), (51, 58), (14, 18), (23, 30), (95, 101), (61, 78), (130, 132), (17, 20), (65, 69), (63, 51), (55, 46), (48, 62), (11, 13), (127, 96), (37, 41), (136, 138), (56, 63), (38, 42), (52, 59), (44, 55), (8, 10), (113, 118), (2, 3), (74, 83), (99, 82), (30, 28), (93, 96), (68, 76), (24, 27), (97, 75), (18, 20), (96, 107), (59, 67), (107, 116), (69, 77), (110, 23), (22, 29), (19, 21), (36, 37), (28, 33), (75, 93), (33, 32), (41, 45), (50, 57), (38, 37), (42, 53), (82, 98), (118, 127), (88, 77), (117, 122), (83, 99), (129, 96), (16, 18), (77, 67), (79, 86), (72, 80), (62, 79), (67, 75), (29, 39), (17, 19), (86, 100), (122, 129), (109, 120)], 'cdg_edge_info': [(129, 107), (35, 33), (50, 52), (58, 65), (53, 78), (19, 110), (90, 97), (101, 106), (113, 117), (8, 9), (108, 130), (129, 9), (103, 109), (77, 90), (38, 53), (11, 14), (74, 82), (46, 130), (103, 136), (113, 138), (124, 113), (19, 39), (33, 38), (18, 19), (97, 74), (98, 103), (19, 48), (50, 63), (108, 114), (8, 11), (8, 130), (108, 132), (60, 76), (129, 130), (2, 4), (80, 88), (78, 36), (103, 120), (46, 132), (55, 52), (103, 138), (113, 140), (8, 96), (108, 107), (108, 116), (46, 107), (108, 125), (60, 69), (14, 17), (8, 132), (46, 116), (108, 134), (129, 132), (46, 125), (120, 108), (46, 134), (55, 45), (16, 17), (113, 96), (8, 107), (8, 116), (129, 116), (8, 125), (93, 74), (129, 125), (8, 134), (108, 136), (129, 134), (13, 14), (45, 46), (30, 27), (50, 51), (19, 100), (79, 87), (103, 134), (51, 52), (52, 60), (103, 108), (129, 136), (13, 16), (19, 29), (53, 61), (117, 9), (127, 117), (108, 113), (129, 138), (19, 22), (113, 130), (45, 50), (103, 140), (46, 51), (40, 44), (60, 77), (87, 95), (80, 89), (78, 37), (8, 15), (19, 79), (2, 8), (113, 132), (36, 40), (45, 52), (46, 136), (58, 64), (103, 96), (51, 58), (14, 18), (113, 107), (95, 101), (113, 116), (59, 90), (113, 125), (65, 69), (8, 136), (108, 138), (55, 46), (113, 134), (11, 13), (30, 35), (46, 138), (74, 99), (99, 98), (38, 42), (52, 59), (103, 107), (110, 30), (113, 118), (8, 10), (2, 3), (113, 127), (8, 138), (108, 140), (113, 136), (65, 80), (99, 82), (74, 83), (46, 140), (58, 59), (97, 75), (58, 77), (97, 93), (110, 23), (108, 124), (8, 140), (36, 37), (129, 140), (108, 96), (103, 130), (117, 129), (46, 96), (50, 57), (38, 37), (2, 7), (40, 55), (117, 122), (103, 132), (129, 96), (16, 18), (19, 62), (17, 19), (2, 9), (103, 116), (60, 90), (103, 125), (74, 98)], 'ddg_edge_info': [(55, 57), (89, 77), (16, 93), (88, 109), (100, 74), (99, 109), (118, 122), (59, 82), (100, 83), (0, 23), (100, 110), (69, 113), (50, 127), (125, 130), (62, 101), (51, 64), (22, 37), (114, 129), (55, 52), (16, 79), (17, 53), (117, 140), (100, 69), (118, 117), (17, 62), (29, 27), (88, 113), (77, 76), (99, 113), (100, 78), (42, 82), (69, 108), (69, 117), (44, 51), (62, 87), (22, 23), (23, 77), (93, 74), (4, 82), (0, 130), (114, 124), (17, 39), (100, 55), (55, 65), (17, 48), (76, 97), (100, 64), (99, 108), (88, 108), (109, 140), (99, 117), (88, 117), (100, 82), (3, 140), (18, 110), (42, 77), (40, 58), (27, 88), (50, 90), (69, 103), (50, 99), (39, 62), (27, 97), (82, 140), (0, 98), (122, 96), (0, 107), (0, 116), (35, 46), (4, 77), (0, 125), (95, 106), (16, 51), (76, 83), (100, 50), (16, 78), (100, 59), (16, 87), (88, 103), (99, 103), (100, 77), (29, 44), (42, 63), (27, 74), (61, 76), (80, 89), (27, 83), (39, 48), (18, 114), (82, 117), (0, 93), (23, 58), (4, 63), (114, 96), (23, 76), (16, 55), (87, 106), (65, 69), (100, 36), (55, 46), (17, 29), (100, 45), (136, 138), (76, 96), (100, 63), (27, 60), (69, 75), (42, 58), (27, 69), (27, 78), (61, 80), (18, 109), (42, 76), (113, 127), (61, 89), (8, 83), (4, 58), (0, 106), (23, 80), (4, 76), (23, 89), (88, 75), (36, 37), (100, 40), (76, 82), (97, 114), (117, 129), (100, 58), (42, 44), (27, 55), (61, 57), (42, 53), (27, 64), (82, 98), (61, 75), (27, 82), (0, 65), (18, 113), (42, 80), (0, 74), (0, 83), (83, 99), (4, 44), (23, 57), (16, 18), (23, 75), (35, 40), (16, 36), (4, 80), (16, 45), (2, 110), (35, 58), (100, 35), (100, 44), (100, 53), (109, 120), (89, 114), (109, 129), (27, 50), (61, 52), (27, 59), (42, 57), (79, 106), (101, 106), (27, 77), (63, 98), (42, 75), (0, 69), (8, 82), (2, 11), (4, 30), (23, 52), (4, 57), (124, 113), (35, 44), (100, 30), (89, 109), (27, 36), (27, 45), (98, 96), (18, 76), (59, 114), (0, 37), (42, 52), (27, 63), (0, 46), (42, 61), (63, 93), (0, 55), (60, 69), (0, 64), (23, 38), (44, 88), (4, 52), (124, 117), (44, 97), (16, 35), (2, 109), (96, 140), (118, 140), (16, 129), (89, 113), (27, 40), (59, 109), (61, 51), (90, 96), (27, 58), (4, 11), (0, 59), (52, 60), (23, 33), (44, 65), (23, 42), (44, 74), (4, 38), (13, 16), (44, 83), (16, 30), (127, 117), (120, 96), (59, 77), (109, 96), (97, 103), (18, 57), (89, 108), (61, 37), (11, 18), (0, 18), (27, 35), (89, 117), (17, 98), (0, 27), (59, 113), (18, 75), (27, 44), (82, 96), (44, 60), (23, 37), (44, 69), (4, 33), (93, 83), (78, 76), (130, 132), (0, 4), (89, 103), (63, 51), (0, 13), (48, 62), (17, 93), (0, 22), (59, 108), (100, 127), (44, 46), (4, 10), (52, 59), (4, 19), (44, 55), (44, 64), (0, 134), (44, 82), (2, 76), (93, 96), (93, 114), (96, 107), (107, 116), (18, 38), (16, 114), (17, 79), (0, 8), (0, 17), (129, 140), (8, 30), (29, 62), (0, 35), (44, 50), (44, 59), (62, 95), (0, 120), (93, 82), (0, 129), (0, 138), (89, 75), (16, 100), (76, 114), (16, 109), (29, 39), (0, 3), (100, 90), (29, 48), (77, 97), (100, 99), (50, 98), (15, 140), (44, 45), (19, 110), (44, 63), (39, 106), (0, 124), (114, 118), (51, 80), (114, 127), (51, 89), (122, 140), (55, 50), (18, 19), (55, 77), (59, 75), (100, 76), (76, 109), (18, 37), (8, 11), (17, 78), (80, 88), (40, 52), (11, 16), (0, 16), (29, 61), (50, 93), (42, 89), (7, 140), (8, 114), (39, 101), (106, 100), (114, 113), (4, 89), (114, 122), (55, 45), (114, 140), (55, 63), (16, 90), (17, 55), (16, 99), (76, 113), (100, 80), (0, 2), (69, 74), (100, 89), (69, 83), (100, 98), (61, 88), (10, 15), (61, 97), (0, 96), (51, 52), (0, 114), (4, 75), (23, 88), (0, 132), (114, 117), (23, 97), (88, 74), (88, 83), (118, 96), (76, 90), (100, 57), (76, 108), (100, 75), (76, 117), (61, 65), (29, 42), (98, 114), (61, 74), (61, 83), (132, 134), (42, 88), (0, 82), (42, 97), (63, 129), (23, 65), (3, 7), (0, 109), (23, 74), (0, 118), (51, 65), (23, 83), (4, 88), (16, 53), (78, 37), (17, 18), (4, 97), (78, 46), (16, 62), (10, 140), (100, 52), (99, 96), (76, 103), (61, 60), (98, 109), (61, 69), (69, 82), (42, 65), (27, 76), (61, 78), (42, 74), (42, 83), (23, 51), (23, 60), (106, 76), (23, 69), (4, 65), (23, 78), (4, 74), (16, 39), (35, 52), (4, 83), (16, 48), (35, 61), (100, 38), (99, 82), (88, 82), (109, 114), (120, 114), (100, 65), (61, 46), (61, 55), (42, 51), (61, 64), (101, 100), (98, 113), (42, 60), (69, 77), (42, 69), (61, 82), (27, 80), (0, 63), (42, 78), (8, 76), (82, 114), (27, 89), (23, 46), (4, 42), (0, 90), (23, 55), (75, 93), (4, 51), (0, 99), (23, 64), (4, 60), (4, 69), (23, 82), (4, 78), (100, 33), (88, 77), (100, 42), (76, 75), (17, 35), (100, 51), (109, 118), (129, 96), (100, 60), (109, 127), (42, 37), (61, 50), (59, 117), (42, 46), (27, 57), (79, 95), (61, 59), (42, 55), (98, 108), (18, 97), (42, 64), (98, 117), (61, 77), (27, 75), (18, 106), (82, 109), (17, 129), (82, 118), (0, 76), (4, 37), (23, 50), (4, 46), (23, 59), (4, 55), (4, 64), (16, 29), (35, 42), (116, 125), (100, 37), (138, 140), (17, 30), (100, 46), (109, 113), (120, 113), (61, 36), (109, 122), (59, 103), (61, 45), (27, 52), (98, 103), (42, 50), (61, 63), (0, 44), (42, 59), (23, 27), (82, 113), (8, 75), (4, 23), (23, 36), (82, 122), (75, 74), (0, 80), (75, 83), (23, 45), (83, 96), (44, 77), (63, 127), (4, 50), (23, 63), (4, 59), (93, 109), (16, 33), (100, 23), (46, 52), (57, 52), (76, 74), (109, 108), (120, 108), (109, 117), (120, 117), (16, 127), (61, 40), (35, 140), (27, 38), (42, 36), (0, 30), (18, 78), (42, 45), (61, 58), (27, 65), (0, 57), (82, 108), (4, 18), (83, 82), (4, 27), (52, 76), (23, 40), (4, 36), (4, 45), (75, 96), (64, 59), (16, 19), (93, 113), (100, 27), (18, 46), (18, 55), (27, 33), (61, 44), (27, 42), (42, 40), (27, 51), (0, 52), (63, 90), (82, 103), (4, 13), (63, 99), (50, 129), (4, 22), (29, 106), (23, 35), (44, 58), (75, 82), (23, 44), (4, 40), (44, 76), (124, 96), (93, 108), (37, 55), (93, 117), (89, 74), (46, 51), (89, 83), (16, 117), (0, 11), (27, 37), (17, 100), (0, 29), (27, 46), (134, 136), (17, 127), (4, 8), (106, 37), (4, 17), (23, 30), (29, 101), (106, 46), (4, 35), (44, 80), (127, 96), (44, 89), (51, 88), (93, 103), (74, 108), (59, 74), (59, 83), (100, 93), (30, 37), (0, 42), (69, 114), (100, 129), (44, 57), (22, 29), (0, 127), (44, 75), (0, 136), (38, 37), (16, 98), (89, 82), (99, 114), (88, 114), (118, 127), (100, 88), (29, 46), (0, 10), (100, 97), (17, 90), (11, 19), (40, 55), (17, 99), (69, 109), (62, 79), (44, 52), (4, 16), (62, 106), (0, 122), (122, 129), (4, 110)]}]}
{'avresample_open': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'subq\t$0x188, %rsp                      # imm = 0x0xbc'}, {'instIndex': 1, 'instruction': 'movq\t%rdi, 0x178(%rsp)                 # 8-byte Spill'}, {'instIndex': 2, 'instruction': 'movq\t%rdi, %rax'}, {'instIndex': 3, 'instruction': 'addq\t$8, %rax'}, {'instIndex': 4, 'instruction': 'movq\t%rax, 0x170(%rsp)                 # 8-byte Spill'}, {'instIndex': 5, 'instruction': 'movq\t8(%rdi), %rdi'}, {'instIndex': 6, 'instruction': 'callq\tav_get_channel_layout_nb_channels@PLT'}, {'instIndex': 8, 'instruction': 'movq\t%rdi, %rcx'}, {'instIndex': 9, 'instruction': 'addq\t$0x74, %rcx'}, {'instIndex': 10, 'instruction': 'movq\t%rcx, 0x180(%rsp)                 # 8-byte Spill'}, {'instIndex': 11, 'instruction': 'movl\t%eax, 0x74(%rdi)'}, {'instIndex': 12, 'instruction': 'addl\t$-0x21, %eax'}, {'instIndex': 13, 'instruction': 'cmpl\t$-0x20, %eax'}, {'instIndex': 14, 'instruction': 'jae\t.LBB0_2'}]}]}
The case of compiler clang with optimization O3.
Patched source code file: utils.c
Patched function: 1---int avresample_open 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_before/O3/utils.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_before/O3/utils.s---avresample_open---before
function id: 0
function flag: True
There are 671 instructions for function: avresample_open in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '36', 'end': 46}, 'before': {'start': '36', 'end': 41}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'subq\t$0x188, %rsp                      # imm = 0x0xbc'}, {'instIndex': 1, 'instruction': 'movq\t%rdi, 0x178(%rsp)                 # 8-byte Spill'}, {'instIndex': 2, 'instruction': 'movq\t%rdi, %rax'}, {'instIndex': 3, 'instruction': 'addq\t$8, %rax'}, {'instIndex': 4, 'instruction': 'movq\t%rax, 0x170(%rsp)                 # 8-byte Spill'}, {'instIndex': 5, 'instruction': 'movq\t8(%rdi), %rdi'}, {'instIndex': 6, 'instruction': 'callq\tav_get_channel_layout_nb_channels@PLT'}, {'instIndex': 8, 'instruction': 'movq\t%rdi, %rcx'}, {'instIndex': 9, 'instruction': 'addq\t$0x74, %rcx'}, {'instIndex': 10, 'instruction': 'movq\t%rcx, 0x180(%rsp)                 # 8-byte Spill'}, {'instIndex': 11, 'instruction': 'movl\t%eax, 0x74(%rdi)'}, {'instIndex': 12, 'instruction': 'addl\t$-0x21, %eax'}, {'instIndex': 13, 'instruction': 'cmpl\t$-0x20, %eax'}, {'instIndex': 14, 'instruction': 'jae\t.LBB0_2'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_before/O3/utils.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_before/O3/utils.o---before
The extraction of function: avresample_open
Analyzing the binaries to generate subCFGs from patched function ...
It has 371 nodes and 666 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 671 instructions in binary file.
[4194304, 4194343]
The execution time of patched subCFG information extraction via angr: 0:00:00.626597
{'avresample_open': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400049>, <DisassemblerInsn "mov" for 0x400051>, <DisassemblerInsn "mov" for 0x400059>, <DisassemblerInsn "mov" for 0x40005c>, <DisassemblerInsn "lea" for 0x400061>, <DisassemblerInsn "mov" for 0x400068>, <DisassemblerInsn "call" for 0x40006a>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400080>, <DisassemblerInsn "mov" for 0x400088>, <DisassemblerInsn "add" for 0x40008b>, <DisassemblerInsn "mov" for 0x40008f>, <DisassemblerInsn "mov" for 0x400097>, <DisassemblerInsn "call" for 0x40009b>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400027>, <DisassemblerInsn "mov" for 0x40002f>, <DisassemblerInsn "add" for 0x400032>, <DisassemblerInsn "mov" for 0x400036>, <DisassemblerInsn "mov" for 0x40003e>, <DisassemblerInsn "add" for 0x400041>, <DisassemblerInsn "cmp" for 0x400044>, <DisassemblerInsn "jae" for 0x400047>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400007>, <DisassemblerInsn "mov" for 0x40000f>, <DisassemblerInsn "add" for 0x400012>, <DisassemblerInsn "mov" for 0x400016>, <DisassemblerInsn "mov" for 0x40001e>, <DisassemblerInsn "call" for 0x400022>]'}], 'cfg_block_detailed_info': [{'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x170]>', '<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x29b0]>', '<mov~~al, 0>', '<call~~0x500008>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, rax>', '<add~~rcx, 0x18>', '<mov~~qword ptr [rsp + 0x150], rcx>', '<mov~~rdi, qword ptr [rax + 0x18]>', '<call~~0x500000>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~rcx, rdi>', '<add~~rcx, 0x74>', '<mov~~qword ptr [rsp + 0x180], rcx>', '<mov~~dword ptr [rdi + 0x74], eax>', '<add~~eax, -0x21>', '<cmp~~eax, -0x20>', '<jae~~0x400080>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x188>', '<mov~~qword ptr [rsp + 0x178], rdi>', '<mov~~rax, rdi>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x170], rax>', '<mov~~rdi, qword ptr [rdi + 8]>', '<call~~0x500000>']}], 'cfg_edge_info': [(0, 1), (1, 2), (1, 3)]}]}
{'avresample_open': [4194304, 4194343]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_before/O3/utils.o---before
The extraction of function: avresample_open
[4194304, 4194343]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 141 nodes and 228 edges in CFGEmulated.
It has 139 nodes and 296 edges in CDG.
It has 2729 nodes and 3709 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194304, 4194343]
{4194304, 4195334, 4194824, 4197389, 4194846, 4195363, 4196899, 4196389, 4194343, 4197415, 4195379, 4197428, 4195897, 4196931, 4194377, 4195405, 4196442, 4195421, 4197474, 4196966, 4195949, 4194415, 4194937, 4196474, 4197502, 4194432, 4197003, 4195469, 4197522, 4195482, 4194464, 4194977, 4196512, 4197542, 4195504, 4194993, 4197046, 4197562, 4196550, 4194505, 4195018, 4196044, 4195535, 4195540, 4197593, 4197083, 4195037, 4195555, 4197093, 4197613, 4194543, 4195056, 4196603, 4194560, 4197633, 4195589, 4196108, 4195089, 4197653, 4196121, 4195611, 4197156, 4197673, 4195119, 4196661, 4197698, 4195144, 4197193, 4195658, 4196178, 4197203, 4194646, 4195168, 4195691, 4194673, 4195707, 4196748, 4195215, 4194705, 4196258, 4197293, 4196785, 4197330, 4195803, 4196828, 4197343, 4195304, 4197356, 4195820, 4195833, 4196862, 4196351}
[44, 130, 96, 41, 93, 15, 38, 109, 21, 65, 132, 106, 45, 29, 18, 46, 110, 87, 24, 68, 53, 30, 39, 103, 75, 69, 61, 57, 60, 19, 116, 80, 107, 10, 122, 36, 8, 99, 127, 48, 27, 20, 138, 42, 129, 118, 16, 108, 136, 2, 100, 97, 3, 120, 82, 59, 4, 0, 7, 56, 78, 28, 55, 86, 63, 72, 77, 67, 101, 51, 73, 64, 98, 50, 23, 105, 52, 58, 74, 88, 37, 134, 140, 125, 62, 17, 117, 40, 89, 113, 9, 33, 90, 76, 11, 66, 14, 35, 114, 83, 79, 13, 124, 95, 32, 22]
The execution time of patched slicing information extraction via angr: 0:00:19.905647
{'avresample_open': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40056b>, <DisassemblerInsn "mov" for 0x400573>, <DisassemblerInsn "call" for 0x400576>]'}, {'block_Idx': 130, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400cba>, <DisassemblerInsn "mov" for 0x400cc2>, <DisassemblerInsn "add" for 0x400ccd>, <DisassemblerInsn "call" for 0x400cd4>]'}, {'block_Idx': 96, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c62>, <DisassemblerInsn "mov" for 0x400c6a>, <DisassemblerInsn "mov" for 0x400c6e>, <DisassemblerInsn "add" for 0x400c72>, <DisassemblerInsn "call" for 0x400c79>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40059b>, <DisassemblerInsn "mov" for 0x4005a3>, <DisassemblerInsn "mov" for 0x4005aa>, <DisassemblerInsn "mov" for 0x4005b1>, <DisassemblerInsn "mov" for 0x4005b8>, <DisassemblerInsn "and" for 0x4005bf>, <DisassemblerInsn "movzx" for 0x4005c2>, <DisassemblerInsn "mov" for 0x4005c5>, <DisassemblerInsn "mov" for 0x4005cc>, <DisassemblerInsn "cmp" for 0x4005d2>, <DisassemblerInsn "jne" for 0x4005d5>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009fe>, <DisassemblerInsn "mov" for 0x400a01>, <DisassemblerInsn "mov" for 0x400a09>, <DisassemblerInsn "mov" for 0x400a10>, <DisassemblerInsn "cmp" for 0x400a15>, <DisassemblerInsn "mov" for 0x400a19>, <DisassemblerInsn "je" for 0x400a1d>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000ef>, <DisassemblerInsn "mov" for 0x4000f4>, <DisassemblerInsn "jmp" for 0x4000fb>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40049a>, <DisassemblerInsn "mov" for 0x4004a2>, <DisassemblerInsn "cmp" for 0x4004a4>, <DisassemblerInsn "mov" for 0x4004a7>, <DisassemblerInsn "jne" for 0x4004ae>]'}, {'block_Idx': 109, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ae5>, <DisassemblerInsn "mov" for 0x400aed>, <DisassemblerInsn "mov" for 0x400af5>, <DisassemblerInsn "mov" for 0x400afd>, <DisassemblerInsn "mov" for 0x400b05>, <DisassemblerInsn "mov" for 0x400b07>, <DisassemblerInsn "mov" for 0x400b0a>, <DisassemblerInsn "mov" for 0x400b0c>, <DisassemblerInsn "cmp" for 0x400b0f>, <DisassemblerInsn "sete" for 0x400b16>, <DisassemblerInsn "and" for 0x400b19>, <DisassemblerInsn "movzx" for 0x400b1b>, <DisassemblerInsn "call" for 0x400b1f>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40029c>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400752>, <DisassemblerInsn "mov" for 0x40075a>, <DisassemblerInsn "mov" for 0x400762>, <DisassemblerInsn "cmp" for 0x400769>, <DisassemblerInsn "setne" for 0x40076c>, <DisassemblerInsn "mov" for 0x40076f>, <DisassemblerInsn "and" for 0x400772>, <DisassemblerInsn "movzx" for 0x400776>, <DisassemblerInsn "mov" for 0x40077a>, <DisassemblerInsn "mov" for 0x400780>, <DisassemblerInsn "test" for 0x400785>, <DisassemblerInsn "mov" for 0x400788>, <DisassemblerInsn "mov" for 0x400790>, <DisassemblerInsn "jne" for 0x400797>]'}, {'block_Idx': 132, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400cd9>, <DisassemblerInsn "add" for 0x400ce1>, <DisassemblerInsn "call" for 0x400ce8>]'}, {'block_Idx': 106, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40038f>, <DisassemblerInsn "mov" for 0x400396>, <DisassemblerInsn "sub" for 0x40039d>, <DisassemblerInsn "sete" for 0x4003a0>, <DisassemblerInsn "sub" for 0x4003a3>, <DisassemblerInsn "sete" for 0x4003a6>, <DisassemblerInsn "or" for 0x4003a9>, <DisassemblerInsn "mov" for 0x4003ab>, <DisassemblerInsn "mov" for 0x4003b0>, <DisassemblerInsn "test" for 0x4003b5>, <DisassemblerInsn "cmovne" for 0x4003b8>, <DisassemblerInsn "mov" for 0x4003bb>, <DisassemblerInsn "mov" for 0x4003c2>, <DisassemblerInsn "mov" for 0x4003ca>, <DisassemblerInsn "mov" for 0x4003d2>, <DisassemblerInsn "mov" for 0x4003d9>, <DisassemblerInsn "mov" for 0x4003db>, <DisassemblerInsn "call" for 0x4003e3>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005db>, <DisassemblerInsn "cmp" for 0x4005e3>, <DisassemblerInsn "jne" for 0x4005e6>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002b1>, <DisassemblerInsn "mov" for 0x4002b3>, <DisassemblerInsn "mov" for 0x4002bb>, <DisassemblerInsn "mov" for 0x4002c2>, <DisassemblerInsn "call" for 0x4002c5>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40021e>, <DisassemblerInsn "mov" for 0x400225>, <DisassemblerInsn "mov" for 0x40022d>, <DisassemblerInsn "mov" for 0x400234>, <DisassemblerInsn "and" for 0x40023b>, <DisassemblerInsn "movzx" for 0x40023e>, <DisassemblerInsn "mov" for 0x400241>, <DisassemblerInsn "add" for 0x400244>, <DisassemblerInsn "mov" for 0x40024b>, <DisassemblerInsn "mov" for 0x400253>, <DisassemblerInsn "mov" for 0x400259>, <DisassemblerInsn "add" for 0x40025c>, <DisassemblerInsn "mov" for 0x400260>, <DisassemblerInsn "cmp" for 0x400268>, <DisassemblerInsn "mov" for 0x40026c>, <DisassemblerInsn "jne" for 0x400273>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40066d>, <DisassemblerInsn "mov" for 0x400675>, <DisassemblerInsn "mov" for 0x40067d>, <DisassemblerInsn "mov" for 0x400685>, <DisassemblerInsn "cmp" for 0x400687>, <DisassemblerInsn "setne" for 0x40068a>, <DisassemblerInsn "and" for 0x40068d>, <DisassemblerInsn "movzx" for 0x400690>, <DisassemblerInsn "mov" for 0x400693>, <DisassemblerInsn "add" for 0x400699>, <DisassemblerInsn "xor" for 0x40069f>, <DisassemblerInsn "test" for 0x4006a1>, <DisassemblerInsn "mov" for 0x4006a5>, <DisassemblerInsn "mov" for 0x4006a8>, <DisassemblerInsn "mov" for 0x4006b0>, <DisassemblerInsn "mov" for 0x4006b7>, <DisassemblerInsn "mov" for 0x4006be>, <DisassemblerInsn "jne" for 0x4006c6>]'}, {'block_Idx': 110, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400406>, <DisassemblerInsn "mov" for 0x40040e>, <DisassemblerInsn "mov" for 0x400410>, <DisassemblerInsn "mov" for 0x400417>, <DisassemblerInsn "cmp" for 0x40041e>, <DisassemblerInsn "jne" for 0x400421>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40032f>, <DisassemblerInsn "mov" for 0x400337>, <DisassemblerInsn "cmp" for 0x40033c>, <DisassemblerInsn "mov" for 0x40033f>, <DisassemblerInsn "jne" for 0x400346>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400440>, <DisassemblerInsn "cmp" for 0x400448>, <DisassemblerInsn "jne" for 0x40044b>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400820>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4004cf>, <DisassemblerInsn "jne" for 0x4004d2>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400433>, <DisassemblerInsn "mov" for 0x400435>, <DisassemblerInsn "mov" for 0x40043d>, <DisassemblerInsn "mov" for 0x400440>, <DisassemblerInsn "cmp" for 0x400448>, <DisassemblerInsn "jne" for 0x40044b>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002ca>, <DisassemblerInsn "mov" for 0x4002d1>, <DisassemblerInsn "call" for 0x4002d8>]'}, {'block_Idx': 103, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400adb>, <DisassemblerInsn "cmp" for 0x400ae0>, <DisassemblerInsn "je" for 0x400ae3>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009dc>, <DisassemblerInsn "mov" for 0x4009e4>, <DisassemblerInsn "mov" for 0x4009ec>, <DisassemblerInsn "mov" for 0x4009ee>, <DisassemblerInsn "xor" for 0x4009f0>, <DisassemblerInsn "lea" for 0x4009f2>, <DisassemblerInsn "call" for 0x4009f9>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400825>, <DisassemblerInsn "mov" for 0x40082d>, <DisassemblerInsn "mov" for 0x400835>, <DisassemblerInsn "mov" for 0x40083c>, <DisassemblerInsn "mov" for 0x400846>, <DisassemblerInsn "mov" for 0x400848>, <DisassemblerInsn "mov" for 0x40084c>, <DisassemblerInsn "mov" for 0x400851>, <DisassemblerInsn "jmp" for 0x400855>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004d4>, <DisassemblerInsn "mov" for 0x4004dc>, <DisassemblerInsn "call" for 0x4004de>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005f9>, <DisassemblerInsn "mov" for 0x400601>, <DisassemblerInsn "mov" for 0x400609>, <DisassemblerInsn "cmp" for 0x40060b>, <DisassemblerInsn "setne" for 0x40060e>, <DisassemblerInsn "and" for 0x400611>, <DisassemblerInsn "movzx" for 0x400614>, <DisassemblerInsn "mov" for 0x400617>, <DisassemblerInsn "add" for 0x40061d>, <DisassemblerInsn "xor" for 0x400623>, <DisassemblerInsn "mov" for 0x400625>, <DisassemblerInsn "mov" for 0x40062c>, <DisassemblerInsn "jmp" for 0x400634>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007ff>, <DisassemblerInsn "mov" for 0x400803>, <DisassemblerInsn "mov" for 0x400808>, <DisassemblerInsn "test" for 0x40080c>, <DisassemblerInsn "mov" for 0x40080f>, <DisassemblerInsn "mov" for 0x400817>, <DisassemblerInsn "jne" for 0x40081e>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400279>, <DisassemblerInsn "mov" for 0x400280>, <DisassemblerInsn "mov" for 0x400287>, <DisassemblerInsn "or" for 0x40028e>, <DisassemblerInsn "test" for 0x400290>, <DisassemblerInsn "mov" for 0x400293>, <DisassemblerInsn "jne" for 0x40029a>]'}, {'block_Idx': 116, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c92>, <DisassemblerInsn "add" for 0x400c9a>, <DisassemblerInsn "call" for 0x400ca1>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40085a>, <DisassemblerInsn "mov" for 0x400861>, <DisassemblerInsn "add" for 0x400869>, <DisassemblerInsn "mov" for 0x400870>, <DisassemblerInsn "cmp" for 0x400875>, <DisassemblerInsn "je" for 0x400878>]'}, {'block_Idx': 107, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c7e>, <DisassemblerInsn "add" for 0x400c86>, <DisassemblerInsn "call" for 0x400c8d>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c9>, <DisassemblerInsn "mov" for 0x4000d1>, <DisassemblerInsn "mov" for 0x4000d9>, <DisassemblerInsn "mov" for 0x4000dc>, <DisassemblerInsn "lea" for 0x4000e1>, <DisassemblerInsn "mov" for 0x4000e8>, <DisassemblerInsn "call" for 0x4000ea>]'}, {'block_Idx': 122, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c27>, <DisassemblerInsn "call" for 0x400c2f>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400505>, <DisassemblerInsn "xor" for 0x40050d>, <DisassemblerInsn "cmp" for 0x40050f>, <DisassemblerInsn "mov" for 0x400512>, <DisassemblerInsn "je" for 0x400519>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000a0>, <DisassemblerInsn "mov" for 0x4000a8>, <DisassemblerInsn "mov" for 0x4000af>, <DisassemblerInsn "add" for 0x4000b2>, <DisassemblerInsn "mov" for 0x4000b6>, <DisassemblerInsn "mov" for 0x4000be>, <DisassemblerInsn "add" for 0x4000c1>, <DisassemblerInsn "cmp" for 0x4000c4>, <DisassemblerInsn "jae" for 0x4000c7>]'}, {'block_Idx': 99, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a66>, <DisassemblerInsn "mov" for 0x400a69>, <DisassemblerInsn "mov" for 0x400a71>, <DisassemblerInsn "mov" for 0x400a78>, <DisassemblerInsn "cmp" for 0x400a7d>, <DisassemblerInsn "mov" for 0x400a81>, <DisassemblerInsn "je" for 0x400a85>]'}, {'block_Idx': 127, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400bec>, <DisassemblerInsn "mov" for 0x400bef>, <DisassemblerInsn "mov" for 0x400bf7>, <DisassemblerInsn "mov" for 0x400bfe>, <DisassemblerInsn "cmp" for 0x400c03>, <DisassemblerInsn "mov" for 0x400c07>, <DisassemblerInsn "je" for 0x400c0b>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002dd>, <DisassemblerInsn "mov" for 0x4002e4>, <DisassemblerInsn "call" for 0x4002eb>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40044d>, <DisassemblerInsn "mov" for 0x400455>, <DisassemblerInsn "call" for 0x400458>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400417>, <DisassemblerInsn "cmp" for 0x40041e>, <DisassemblerInsn "jne" for 0x400421>]'}, {'block_Idx': 138, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d15>, <DisassemblerInsn "add" for 0x400d1d>, <DisassemblerInsn "call" for 0x400d24>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004b0>, <DisassemblerInsn "mov" for 0x4004b8>, <DisassemblerInsn "add" for 0x4004bb>, <DisassemblerInsn "mov" for 0x4004bf>, <DisassemblerInsn "mov" for 0x4004c7>, <DisassemblerInsn "call" for 0x4004ca>]'}, {'block_Idx': 129, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c34>, <DisassemblerInsn "mov" for 0x400c37>, <DisassemblerInsn "mov" for 0x400c3f>, <DisassemblerInsn "mov" for 0x400c46>, <DisassemblerInsn "xor" for 0x400c4b>, <DisassemblerInsn "cmp" for 0x400c4d>, <DisassemblerInsn "mov" for 0x400c51>, <DisassemblerInsn "mov" for 0x400c55>, <DisassemblerInsn "jne" for 0x400c5c>]'}, {'block_Idx': 118, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400bdf>, <DisassemblerInsn "call" for 0x400be7>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400171>, <DisassemblerInsn "mov" for 0x400179>, <DisassemblerInsn "mov" for 0x400181>, <DisassemblerInsn "cmp" for 0x400184>, <DisassemblerInsn "setne" for 0x400187>, <DisassemblerInsn "mov" for 0x40018a>, <DisassemblerInsn "mov" for 0x400191>, <DisassemblerInsn "mov" for 0x400199>, <DisassemblerInsn "mov" for 0x4001a0>, <DisassemblerInsn "movzx" for 0x4001a7>, <DisassemblerInsn "and" for 0x4001aa>, <DisassemblerInsn "mov" for 0x4001ad>, <DisassemblerInsn "or" for 0x4001b3>, <DisassemblerInsn "mov" for 0x4001b5>, <DisassemblerInsn "and" for 0x4001bc>, <DisassemblerInsn "movzx" for 0x4001be>, <DisassemblerInsn "mov" for 0x4001c1>, <DisassemblerInsn "add" for 0x4001c4>, <DisassemblerInsn "mov" for 0x4001cb>, <DisassemblerInsn "mov" for 0x4001d3>, <DisassemblerInsn "mov" for 0x4001d9>, <DisassemblerInsn "add" for 0x4001dc>, <DisassemblerInsn "mov" for 0x4001e0>, <DisassemblerInsn "mov" for 0x4001e8>, <DisassemblerInsn "mov" for 0x4001eb>, <DisassemblerInsn "add" for 0x4001ee>, <DisassemblerInsn "mov" for 0x4001f2>, <DisassemblerInsn "mov" for 0x4001fa>, <DisassemblerInsn "cmp" for 0x4001fc>, <DisassemblerInsn "mov" for 0x4001ff>, <DisassemblerInsn "jne" for 0x400206>]'}, {'block_Idx': 108, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b49>, <DisassemblerInsn "cmp" for 0x400b4e>, <DisassemblerInsn "je" for 0x400b51>]'}, {'block_Idx': 136, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d01>, <DisassemblerInsn "add" for 0x400d09>, <DisassemblerInsn "call" for 0x400d10>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400027>, <DisassemblerInsn "mov" for 0x40002f>, <DisassemblerInsn "add" for 0x400032>, <DisassemblerInsn "mov" for 0x400036>, <DisassemblerInsn "mov" for 0x40003e>, <DisassemblerInsn "add" for 0x400041>, <DisassemblerInsn "cmp" for 0x400044>, <DisassemblerInsn "jae" for 0x400047>]'}, {'block_Idx': 100, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003e8>, <DisassemblerInsn "mov" for 0x4003f0>, <DisassemblerInsn "mov" for 0x4003f3>, <DisassemblerInsn "lea" for 0x4003f8>, <DisassemblerInsn "mov" for 0x4003ff>, <DisassemblerInsn "call" for 0x400401>]'}, {'block_Idx': 97, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009b1>, <DisassemblerInsn "mov" for 0x4009b6>, <DisassemblerInsn "mov" for 0x4009be>, <DisassemblerInsn "mov" for 0x4009c0>, <DisassemblerInsn "mov" for 0x4009c5>, <DisassemblerInsn "mov" for 0x4009c9>, <DisassemblerInsn "mov" for 0x4009ce>, <DisassemblerInsn "mov" for 0x4009d2>, <DisassemblerInsn "cmp" for 0x4009d7>, <DisassemblerInsn "je" for 0x4009da>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400049>, <DisassemblerInsn "mov" for 0x400051>, <DisassemblerInsn "mov" for 0x400059>, <DisassemblerInsn "mov" for 0x40005c>, <DisassemblerInsn "lea" for 0x400061>, <DisassemblerInsn "mov" for 0x400068>, <DisassemblerInsn "call" for 0x40006a>]'}, {'block_Idx': 120, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b24>, <DisassemblerInsn "mov" for 0x400b27>, <DisassemblerInsn "mov" for 0x400b2f>, <DisassemblerInsn "mov" for 0x400b36>, <DisassemblerInsn "cmp" for 0x400b3b>, <DisassemblerInsn "mov" for 0x400b3f>, <DisassemblerInsn "je" for 0x400b43>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a8b>, <DisassemblerInsn "mov" for 0x400a93>, <DisassemblerInsn "mov" for 0x400a9b>, <DisassemblerInsn "add" for 0x400a9e>, <DisassemblerInsn "mov" for 0x400aa2>, <DisassemblerInsn "mov" for 0x400aa7>, <DisassemblerInsn "mov" for 0x400aaa>, <DisassemblerInsn "mov" for 0x400aac>, <DisassemblerInsn "call" for 0x400ab1>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008c6>, <DisassemblerInsn "mov" for 0x4008ce>, <DisassemblerInsn "mov" for 0x4008d5>, <DisassemblerInsn "mov" for 0x4008dd>, <DisassemblerInsn "mov" for 0x4008e4>, <DisassemblerInsn "mov" for 0x4008ee>, <DisassemblerInsn "mov" for 0x4008f2>, <DisassemblerInsn "mov" for 0x4008f7>, <DisassemblerInsn "mov" for 0x4008fb>, <DisassemblerInsn "mov" for 0x400902>, <DisassemblerInsn "mov" for 0x400906>, <DisassemblerInsn "mov" for 0x40090b>, <DisassemblerInsn "cmp" for 0x40090f>, <DisassemblerInsn "sete" for 0x400912>, <DisassemblerInsn "and" for 0x400916>, <DisassemblerInsn "test" for 0x400919>, <DisassemblerInsn "mov" for 0x40091c>, <DisassemblerInsn "mov" for 0x40091f>, <DisassemblerInsn "mov" for 0x400924>, <DisassemblerInsn "mov" for 0x400929>, <DisassemblerInsn "jne" for 0x40092d>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400080>, <DisassemblerInsn "mov" for 0x400088>, <DisassemblerInsn "add" for 0x40008b>, <DisassemblerInsn "mov" for 0x40008f>, <DisassemblerInsn "mov" for 0x400097>, <DisassemblerInsn "call" for 0x40009b>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400007>, <DisassemblerInsn "mov" for 0x40000f>, <DisassemblerInsn "add" for 0x400012>, <DisassemblerInsn "mov" for 0x400016>, <DisassemblerInsn "mov" for 0x40001e>, <DisassemblerInsn "call" for 0x400022>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40006f>, <DisassemblerInsn "mov" for 0x400074>, <DisassemblerInsn "jmp" for 0x40007b>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4005f7>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004e3>, <DisassemblerInsn "mov" for 0x4004e5>, <DisassemblerInsn "mov" for 0x4004ed>, <DisassemblerInsn "mov" for 0x4004ef>, <DisassemblerInsn "mov" for 0x4004f7>, <DisassemblerInsn "cmp" for 0x4004f9>, <DisassemblerInsn "mov" for 0x4004fc>, <DisassemblerInsn "jne" for 0x400503>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40046a>, <DisassemblerInsn "mov" for 0x400472>, <DisassemblerInsn "add" for 0x400475>, <DisassemblerInsn "mov" for 0x40047c>, <DisassemblerInsn "cmp" for 0x400484>, <DisassemblerInsn "je" for 0x40048b>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40057b>, <DisassemblerInsn "mov" for 0x40057d>, <DisassemblerInsn "cmp" for 0x400585>, <DisassemblerInsn "sete" for 0x400588>, <DisassemblerInsn "mov" for 0x40058b>, <DisassemblerInsn "mov" for 0x40058d>, <DisassemblerInsn "mov" for 0x400594>, <DisassemblerInsn "mov" for 0x40059b>, <DisassemblerInsn "mov" for 0x4005a3>, <DisassemblerInsn "mov" for 0x4005aa>, <DisassemblerInsn "mov" for 0x4005b1>, <DisassemblerInsn "mov" for 0x4005b8>, <DisassemblerInsn "and" for 0x4005bf>, <DisassemblerInsn "movzx" for 0x4005c2>, <DisassemblerInsn "mov" for 0x4005c5>, <DisassemblerInsn "mov" for 0x4005cc>, <DisassemblerInsn "cmp" for 0x4005d2>, <DisassemblerInsn "jne" for 0x4005d5>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003c2>, <DisassemblerInsn "mov" for 0x4003ca>, <DisassemblerInsn "mov" for 0x4003d2>, <DisassemblerInsn "mov" for 0x4003d9>, <DisassemblerInsn "mov" for 0x4003db>, <DisassemblerInsn "call" for 0x4003e3>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400639>, <DisassemblerInsn "mov" for 0x400641>, <DisassemblerInsn "cmp" for 0x400644>, <DisassemblerInsn "setne" for 0x400647>, <DisassemblerInsn "and" for 0x40064a>, <DisassemblerInsn "movzx" for 0x40064c>, <DisassemblerInsn "mov" for 0x40064f>, <DisassemblerInsn "add" for 0x400655>, <DisassemblerInsn "mov" for 0x40065c>, <DisassemblerInsn "mov" for 0x400664>, <DisassemblerInsn "jmp" for 0x40066b>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40079d>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008fb>, <DisassemblerInsn "mov" for 0x400902>, <DisassemblerInsn "mov" for 0x400906>, <DisassemblerInsn "mov" for 0x40090b>, <DisassemblerInsn "cmp" for 0x40090f>, <DisassemblerInsn "sete" for 0x400912>, <DisassemblerInsn "and" for 0x400916>, <DisassemblerInsn "test" for 0x400919>, <DisassemblerInsn "mov" for 0x40091c>, <DisassemblerInsn "mov" for 0x40091f>, <DisassemblerInsn "mov" for 0x400924>, <DisassemblerInsn "mov" for 0x400929>, <DisassemblerInsn "jne" for 0x40092d>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009c9>, <DisassemblerInsn "mov" for 0x4009ce>, <DisassemblerInsn "mov" for 0x4009d2>, <DisassemblerInsn "cmp" for 0x4009d7>, <DisassemblerInsn "je" for 0x4009da>]'}, {'block_Idx': 101, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400360>, <DisassemblerInsn "mov" for 0x400367>, <DisassemblerInsn "sub" for 0x40036e>, <DisassemblerInsn "sete" for 0x400371>, <DisassemblerInsn "sub" for 0x400374>, <DisassemblerInsn "sete" for 0x400377>, <DisassemblerInsn "or" for 0x40037a>, <DisassemblerInsn "mov" for 0x40037c>, <DisassemblerInsn "test" for 0x400381>, <DisassemblerInsn "mov" for 0x400384>, <DisassemblerInsn "jne" for 0x40038b>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006cc>, <DisassemblerInsn "mov" for 0x4006d4>, <DisassemblerInsn "mov" for 0x4006dc>, <DisassemblerInsn "mov" for 0x4006e3>, <DisassemblerInsn "mov" for 0x4006ea>, <DisassemblerInsn "mov" for 0x4006f2>, <DisassemblerInsn "cmp" for 0x4006f4>, <DisassemblerInsn "mov" for 0x4006f7>, <DisassemblerInsn "mov" for 0x4006fe>, <DisassemblerInsn "jne" for 0x400706>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400951>, <DisassemblerInsn "mov" for 0x400959>, <DisassemblerInsn "mov" for 0x400961>, <DisassemblerInsn "mov" for 0x400969>, <DisassemblerInsn "mov" for 0x40096e>, <DisassemblerInsn "mov" for 0x400973>, <DisassemblerInsn "mov" for 0x400975>, <DisassemblerInsn "cmp" for 0x400977>, <DisassemblerInsn "cmovg" for 0x400979>, <DisassemblerInsn "mov" for 0x40097c>, <DisassemblerInsn "xor" for 0x40097e>, <DisassemblerInsn "lea" for 0x400980>, <DisassemblerInsn "call" for 0x400987>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400719>, <DisassemblerInsn "mov" for 0x400721>, <DisassemblerInsn "mov" for 0x400729>, <DisassemblerInsn "mov" for 0x400733>, <DisassemblerInsn "xor" for 0x400735>, <DisassemblerInsn "mov" for 0x400737>, <DisassemblerInsn "mov" for 0x40073e>, <DisassemblerInsn "mov" for 0x400746>, <DisassemblerInsn "jmp" for 0x40074d>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ab6>, <DisassemblerInsn "mov" for 0x400ab9>, <DisassemblerInsn "mov" for 0x400ac1>, <DisassemblerInsn "mov" for 0x400ac8>, <DisassemblerInsn "cmp" for 0x400acd>, <DisassemblerInsn "mov" for 0x400ad1>, <DisassemblerInsn "je" for 0x400ad5>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005ec>, <DisassemblerInsn "test" for 0x4005f3>, <DisassemblerInsn "jne" for 0x4005f5>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400423>, <DisassemblerInsn "mov" for 0x40042b>, <DisassemblerInsn "call" for 0x40042e>]'}, {'block_Idx': 105, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40038d>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007a2>, <DisassemblerInsn "mov" for 0x4007aa>, <DisassemblerInsn "mov" for 0x4007b1>, <DisassemblerInsn "mov" for 0x4007b9>, <DisassemblerInsn "mov" for 0x4007c0>, <DisassemblerInsn "mov" for 0x4007c8>, <DisassemblerInsn "mov" for 0x4007cd>, <DisassemblerInsn "mov" for 0x4007d1>, <DisassemblerInsn "xor" for 0x4007d3>, <DisassemblerInsn "mov" for 0x4007d6>, <DisassemblerInsn "mov" for 0x4007da>, <DisassemblerInsn "cmp" for 0x4007e0>, <DisassemblerInsn "mov" for 0x4007e3>, <DisassemblerInsn "mov" for 0x4007ea>, <DisassemblerInsn "mov" for 0x4007f2>, <DisassemblerInsn "je" for 0x4007f9>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40070c>, <DisassemblerInsn "cmp" for 0x400714>, <DisassemblerInsn "jne" for 0x400717>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a23>, <DisassemblerInsn "mov" for 0x400a2b>, <DisassemblerInsn "add" for 0x400a2e>, <DisassemblerInsn "mov" for 0x400a35>, <DisassemblerInsn "cmp" for 0x400a3a>, <DisassemblerInsn "je" for 0x400a41>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008a0>, <DisassemblerInsn "mov" for 0x4008a8>, <DisassemblerInsn "mov" for 0x4008ad>, <DisassemblerInsn "mov" for 0x4008b3>, <DisassemblerInsn "xor" for 0x4008b5>, <DisassemblerInsn "mov" for 0x4008b7>, <DisassemblerInsn "mov" for 0x4008bb>, <DisassemblerInsn "mov" for 0x4008c0>, <DisassemblerInsn "jmp" for 0x4008c4>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40051b>, <DisassemblerInsn "mov" for 0x400523>, <DisassemblerInsn "mov" for 0x40052b>, <DisassemblerInsn "mov" for 0x400532>, <DisassemblerInsn "cmp" for 0x400535>, <DisassemblerInsn "setne" for 0x400537>, <DisassemblerInsn "mov" for 0x40053a>, <DisassemblerInsn "mov" for 0x400541>, <DisassemblerInsn "jmp" for 0x400548>]'}, {'block_Idx': 134, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ced>, <DisassemblerInsn "add" for 0x400cf5>, <DisassemblerInsn "call" for 0x400cfc>]'}, {'block_Idx': 140, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d29>, <DisassemblerInsn "mov" for 0x400d31>, <DisassemblerInsn "mov" for 0x400d35>, <DisassemblerInsn "mov" for 0x400d3b>, <DisassemblerInsn "mov" for 0x400d42>, <DisassemblerInsn "add" for 0x400d49>, <DisassemblerInsn "ret" for 0x400d50>]'}, {'block_Idx': 125, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ca6>, <DisassemblerInsn "mov" for 0x400cae>, <DisassemblerInsn "call" for 0x400cb5>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002f0>, <DisassemblerInsn "mov" for 0x4002f7>, <DisassemblerInsn "mov" for 0x4002fe>, <DisassemblerInsn "mov" for 0x400300>, <DisassemblerInsn "cmp" for 0x400307>, <DisassemblerInsn "cmovg" for 0x400309>, <DisassemblerInsn "call" for 0x40030c>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400208>, <DisassemblerInsn "cmp" for 0x400210>, <DisassemblerInsn "setne" for 0x400214>, <DisassemblerInsn "mov" for 0x400217>, <DisassemblerInsn "mov" for 0x40021e>, <DisassemblerInsn "mov" for 0x400225>, <DisassemblerInsn "mov" for 0x40022d>, <DisassemblerInsn "mov" for 0x400234>, <DisassemblerInsn "and" for 0x40023b>, <DisassemblerInsn "movzx" for 0x40023e>, <DisassemblerInsn "mov" for 0x400241>, <DisassemblerInsn "add" for 0x400244>, <DisassemblerInsn "mov" for 0x40024b>, <DisassemblerInsn "mov" for 0x400253>, <DisassemblerInsn "mov" for 0x400259>, <DisassemblerInsn "add" for 0x40025c>, <DisassemblerInsn "mov" for 0x400260>, <DisassemblerInsn "cmp" for 0x400268>, <DisassemblerInsn "mov" for 0x40026c>, <DisassemblerInsn "jne" for 0x400273>]'}, {'block_Idx': 117, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c0d>, <DisassemblerInsn "xor" for 0x400c15>, <DisassemblerInsn "cmp" for 0x400c17>, <DisassemblerInsn "mov" for 0x400c1a>, <DisassemblerInsn "je" for 0x400c21>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40054a>, <DisassemblerInsn "xor" for 0x400552>, <DisassemblerInsn "mov" for 0x400554>, <DisassemblerInsn "xor" for 0x400556>, <DisassemblerInsn "cmp" for 0x400558>, <DisassemblerInsn "mov" for 0x40055b>, <DisassemblerInsn "mov" for 0x400562>, <DisassemblerInsn "je" for 0x400569>]'}, {'block_Idx': 89, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40087a>, <DisassemblerInsn "mov" for 0x400882>, <DisassemblerInsn "mov" for 0x400887>, <DisassemblerInsn "mov" for 0x40088d>, <DisassemblerInsn "xor" for 0x40088f>, <DisassemblerInsn "mov" for 0x400891>, <DisassemblerInsn "mov" for 0x400895>, <DisassemblerInsn "mov" for 0x40089a>, <DisassemblerInsn "jmp" for 0x40089e>]'}, {'block_Idx': 113, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400bd2>, <DisassemblerInsn "cmp" for 0x400bda>, <DisassemblerInsn "je" for 0x400bdd>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d42>, <DisassemblerInsn "add" for 0x400d49>, <DisassemblerInsn "ret" for 0x400d50>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40048d>, <DisassemblerInsn "cmp" for 0x400495>, <DisassemblerInsn "jne" for 0x400498>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40098c>, <DisassemblerInsn "mov" for 0x40098f>, <DisassemblerInsn "mov" for 0x400997>, <DisassemblerInsn "mov" for 0x40099e>, <DisassemblerInsn "cmp" for 0x4009a3>, <DisassemblerInsn "mov" for 0x4009a7>, <DisassemblerInsn "je" for 0x4009ab>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400935>, <DisassemblerInsn "mov" for 0x40093a>, <DisassemblerInsn "mov" for 0x400942>, <DisassemblerInsn "mov" for 0x40094c>, <DisassemblerInsn "mov" for 0x400951>, <DisassemblerInsn "mov" for 0x400959>, <DisassemblerInsn "mov" for 0x400961>, <DisassemblerInsn "mov" for 0x400969>, <DisassemblerInsn "mov" for 0x40096e>, <DisassemblerInsn "mov" for 0x400973>, <DisassemblerInsn "mov" for 0x400975>, <DisassemblerInsn "cmp" for 0x400977>, <DisassemblerInsn "cmovg" for 0x400979>, <DisassemblerInsn "mov" for 0x40097c>, <DisassemblerInsn "xor" for 0x40097e>, <DisassemblerInsn "lea" for 0x400980>, <DisassemblerInsn "call" for 0x400987>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400100>, <DisassemblerInsn "mov" for 0x400107>, <DisassemblerInsn "mov" for 0x40010f>, <DisassemblerInsn "mov" for 0x400117>, <DisassemblerInsn "mov" for 0x400119>, <DisassemblerInsn "cmp" for 0x400120>, <DisassemblerInsn "setg" for 0x400122>, <DisassemblerInsn "mov" for 0x400126>, <DisassemblerInsn "cmp" for 0x40012e>, <DisassemblerInsn "mov" for 0x400130>, <DisassemblerInsn "cmovg" for 0x400132>, <DisassemblerInsn "mov" for 0x400135>, <DisassemblerInsn "and" for 0x400138>, <DisassemblerInsn "movzx" for 0x40013c>, <DisassemblerInsn "mov" for 0x400140>, <DisassemblerInsn "cmp" for 0x400146>, <DisassemblerInsn "setl" for 0x400148>, <DisassemblerInsn "cmp" for 0x40014b>, <DisassemblerInsn "mov" for 0x40014d>, <DisassemblerInsn "jne" for 0x400154>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400933>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400191>, <DisassemblerInsn "mov" for 0x400199>, <DisassemblerInsn "mov" for 0x4001a0>, <DisassemblerInsn "movzx" for 0x4001a7>, <DisassemblerInsn "and" for 0x4001aa>, <DisassemblerInsn "mov" for 0x4001ad>, <DisassemblerInsn "or" for 0x4001b3>, <DisassemblerInsn "mov" for 0x4001b5>, <DisassemblerInsn "and" for 0x4001bc>, <DisassemblerInsn "movzx" for 0x4001be>, <DisassemblerInsn "mov" for 0x4001c1>, <DisassemblerInsn "add" for 0x4001c4>, <DisassemblerInsn "mov" for 0x4001cb>, <DisassemblerInsn "mov" for 0x4001d3>, <DisassemblerInsn "mov" for 0x4001d9>, <DisassemblerInsn "add" for 0x4001dc>, <DisassemblerInsn "mov" for 0x4001e0>, <DisassemblerInsn "mov" for 0x4001e8>, <DisassemblerInsn "mov" for 0x4001eb>, <DisassemblerInsn "add" for 0x4001ee>, <DisassemblerInsn "mov" for 0x4001f2>, <DisassemblerInsn "mov" for 0x4001fa>, <DisassemblerInsn "cmp" for 0x4001fc>, <DisassemblerInsn "mov" for 0x4001ff>, <DisassemblerInsn "jne" for 0x400206>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40045d>, <DisassemblerInsn "mov" for 0x40045f>, <DisassemblerInsn "mov" for 0x400467>, <DisassemblerInsn "mov" for 0x40046a>, <DisassemblerInsn "mov" for 0x400472>, <DisassemblerInsn "add" for 0x400475>, <DisassemblerInsn "mov" for 0x40047c>, <DisassemblerInsn "cmp" for 0x400484>, <DisassemblerInsn "je" for 0x40048b>]'}, {'block_Idx': 114, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b53>, <DisassemblerInsn "mov" for 0x400b5b>, <DisassemblerInsn "mov" for 0x400b63>, <DisassemblerInsn "mov" for 0x400b6b>, <DisassemblerInsn "mov" for 0x400b70>, <DisassemblerInsn "mov" for 0x400b78>, <DisassemblerInsn "mov" for 0x400b7d>, <DisassemblerInsn "mov" for 0x400b80>, <DisassemblerInsn "add" for 0x400b83>, <DisassemblerInsn "cmp" for 0x400b87>, <DisassemblerInsn "cmove" for 0x400b8b>, <DisassemblerInsn "mov" for 0x400b8f>, <DisassemblerInsn "mov" for 0x400b91>, <DisassemblerInsn "mov" for 0x400b93>, <DisassemblerInsn "mov" for 0x400b95>, <DisassemblerInsn "cmp" for 0x400b98>, <DisassemblerInsn "sete" for 0x400b9f>, <DisassemblerInsn "and" for 0x400ba2>, <DisassemblerInsn "movzx" for 0x400ba4>, <DisassemblerInsn "call" for 0x400ba8>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a43>, <DisassemblerInsn "mov" for 0x400a4b>, <DisassemblerInsn "mov" for 0x400a53>, <DisassemblerInsn "mov" for 0x400a55>, <DisassemblerInsn "xor" for 0x400a58>, <DisassemblerInsn "lea" for 0x400a5a>, <DisassemblerInsn "call" for 0x400a61>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400311>, <DisassemblerInsn "mov" for 0x400313>, <DisassemblerInsn "mov" for 0x40031a>, <DisassemblerInsn "cmp" for 0x40031f>, <DisassemblerInsn "mov" for 0x400322>, <DisassemblerInsn "jl" for 0x400329>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400156>, <DisassemblerInsn "mov" for 0x40015e>, <DisassemblerInsn "cmp" for 0x400160>, <DisassemblerInsn "mov" for 0x400168>, <DisassemblerInsn "jne" for 0x40016f>]'}, {'block_Idx': 124, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400bad>, <DisassemblerInsn "mov" for 0x400bb0>, <DisassemblerInsn "mov" for 0x400bb8>, <DisassemblerInsn "mov" for 0x400bbf>, <DisassemblerInsn "cmp" for 0x400bc4>, <DisassemblerInsn "mov" for 0x400bc8>, <DisassemblerInsn "je" for 0x400bcc>]'}, {'block_Idx': 95, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400348>, <DisassemblerInsn "mov" for 0x40034f>, <DisassemblerInsn "cmp" for 0x400354>, <DisassemblerInsn "mov" for 0x400357>, <DisassemblerInsn "jae" for 0x40035e>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004ef>, <DisassemblerInsn "mov" for 0x4004f7>, <DisassemblerInsn "cmp" for 0x4004f9>, <DisassemblerInsn "mov" for 0x4004fc>, <DisassemblerInsn "jne" for 0x400503>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002a1>, <DisassemblerInsn "mov" for 0x4002a9>, <DisassemblerInsn "call" for 0x4002ac>]'}], 'cfg_block_detailed_info': [{'block_Idx': 44, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500028>']}, {'block_Idx': 130, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rdi + 0xb8], 0>', '<add~~rdi, 0xc0>', '<call~~0x500068>']}, {'block_Idx': 96, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<add~~rdi, 0xa0>', '<call~~0x500058>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~dl, byte ptr [rsp + 0xd3]>', '<mov~~eax, dword ptr [rsp + 0xd4]>', '<mov~~dword ptr [rsp + 0xc4], eax>', '<mov~~byte ptr [rsp + 0xcb], dl>', '<and~~dl, 1>', '<movzx~~edx, dl>', '<mov~~dword ptr [rsp + 0xcc], edx>', '<mov~~dword ptr [rcx + 0x90], edx>', '<cmp~~eax, 0>', '<jne~~0x40066d>']}, {'block_Idx': 93, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<mov~~eax, 0xffffffea>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<je~~0x400c62>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x16c], eax>', '<jmp~~0x400d42>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x110]>', '<mov~~eax, dword ptr [rax]>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<jne~~0x40051b>']}, {'block_Idx': 109, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~rax, qword ptr [rsp + 0x130]>', '<mov~~rcx, qword ptr [rsp + 0x180]>', '<mov~~rdx, qword ptr [rsp + 0x118]>', '<mov~~esi, dword ptr [rdx]>', '<mov~~edx, dword ptr [rdi + 0x10]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~r8d, dword ptr [rax]>', '<cmp~~dword ptr [rdi + 0xf4], 2>', '<sete~~al>', '<and~~al, 1>', '<movzx~~r9d, al>', '<call~~0x500040>']}, {'block_Idx': 21, 'blockInsts': ['<jmp~~0x400417>']}, {'block_Idx': 65, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xa0]>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~edx, dword ptr [rsp + 0xc4]>', '<cmp~~edx, 0>', '<setne~~dl>', '<mov~~sil, dl>', '<and~~sil, 1>', '<movzx~~esi, sil>', '<mov~~dword ptr [rax + 0x98], esi>', '<mov~~eax, 1>', '<test~~dl, 1>', '<mov~~qword ptr [rsp + 0x80], rcx>', '<mov~~dword ptr [rsp + 0x88], eax>', '<jne~~0x400825>']}, {'block_Idx': 132, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<add~~rdi, 0xc8>', '<call~~0x500068>']}, {'block_Idx': 106, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xfc]>', '<mov~~ecx, dword ptr [rsp + 0x100]>', '<sub~~ecx, 8>', '<sete~~dl>', '<sub~~eax, 8>', '<sete~~al>', '<or~~dl, al>', '<mov~~eax, 7>', '<mov~~ecx, 9>', '<test~~dl, 1>', '<cmovne~~eax, ecx>', '<mov~~dword ptr [rsp + 0x108], eax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x118]>', '<mov~~edi, dword ptr [rsp + 0x108]>', '<mov~~dword ptr [rcx], edi>', '<mov~~qword ptr [rsp + 0xf0], rax>', '<call~~0x500020>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x128]>', '<cmp~~dword ptr [rax], 0>', '<jne~~0x40066d>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~dword ptr [rsp + 0x100], ecx>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500010>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x148]>', '<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~dl, byte ptr [rsp + 0x147]>', '<mov~~byte ptr [rsp + 0x10f], dl>', '<and~~dl, 1>', '<movzx~~edx, dl>', '<mov~~rsi, rcx>', '<add~~rsi, 0x8c>', '<mov~~qword ptr [rsp + 0x110], rsi>', '<mov~~dword ptr [rcx + 0x8c], edx>', '<mov~~rdx, rcx>', '<add~~rdx, 0x28>', '<mov~~qword ptr [rsp + 0x118], rdx>', '<cmp~~dword ptr [rcx + 0x28], -1>', '<mov~~dword ptr [rsp + 0x120], eax>', '<jne~~0x400417>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~sil, byte ptr [rsp + 0xcb]>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x118]>', '<mov~~ecx, dword ptr [rcx]>', '<cmp~~ecx, dword ptr [rax + 0x20]>', '<setne~~cl>', '<and~~cl, 1>', '<movzx~~edx, cl>', '<mov~~dword ptr [rax + 0x94], edx>', '<add~~rax, 0x90>', '<xor~~ecx, ecx>', '<test~~sil, 1>', '<mov~~rsi, rax>', '<mov~~qword ptr [rsp + 0xa8], rsi>', '<mov~~dword ptr [rsp + 0xb0], edx>', '<mov~~byte ptr [rsp + 0xb7], cl>', '<mov~~qword ptr [rsp + 0xb8], rax>', '<jne~~0x4007a2>']}, {'block_Idx': 110, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x180]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x120], eax>', '<mov~~eax, dword ptr [rsp + 0x120]>', '<cmp~~eax, 1>', '<jne~~0x400440>']}, {'block_Idx': 87, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x128]>', '<mov~~eax, 8>', '<cmp~~dword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0x108], eax>', '<jne~~0x4003c2>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x160]>', '<cmp~~dword ptr [rax], 1>', '<jne~~0x40046a>']}, {'block_Idx': 68, 'blockInsts': ['<jmp~~0x400935>']}, {'block_Idx': 53, 'blockInsts': ['<cmp~~eax, 0>', '<jne~~0x4004ef>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~dword ptr [rax + 0x10], ecx>', '<mov~~rax, qword ptr [rsp + 0x160]>', '<cmp~~dword ptr [rax], 1>', '<jne~~0x40046a>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0x100]>', '<mov~~dword ptr [rsp + 0xfc], eax>', '<call~~0x500018>']}, {'block_Idx': 103, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x400b49>']}, {'block_Idx': 75, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x118]>', '<mov~~rcx, qword ptr [rsp + 0x160]>', '<mov~~edi, dword ptr [rcx]>', '<mov~~edx, dword ptr [rax]>', '<xor~~esi, esi>', '<lea~~rcx, [rip + 0x2094]>', '<call~~0x500030>']}, {'block_Idx': 69, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x80]>', '<mov~~eax, dword ptr [rsp + 0x88]>', '<mov~~dword ptr [rdx + 0xf4], 1>', '<mov~~dl, 1>', '<mov~~byte ptr [rsp + 0x5f], dl>', '<mov~~qword ptr [rsp + 0x60], rcx>', '<mov~~dword ptr [rsp + 0x6c], eax>', '<jmp~~0x4008fb>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~edi, dword ptr [rax]>', '<call~~0x500010>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x118]>', '<mov~~ecx, dword ptr [rcx]>', '<cmp~~ecx, dword ptr [rax + 0x20]>', '<setne~~cl>', '<and~~cl, 1>', '<movzx~~ecx, cl>', '<mov~~dword ptr [rax + 0x94], ecx>', '<add~~rax, 0x90>', '<xor~~ecx, ecx>', '<mov~~byte ptr [rsp + 0xb7], cl>', '<mov~~qword ptr [rsp + 0xb8], rax>', '<jmp~~0x4007a2>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x7c]>', '<mov~~rcx, qword ptr [rsp + 0x70]>', '<mov~~dl, byte ptr [rsp + 0x7b]>', '<test~~dl, 1>', '<mov~~qword ptr [rsp + 0x80], rcx>', '<mov~~dword ptr [rsp + 0x88], eax>', '<jne~~0x400825>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x148]>', '<mov~~dl, byte ptr [rsp + 0x10f]>', '<mov~~cl, byte ptr [rsp + 0x127]>', '<or~~cl, dl>', '<test~~cl, 1>', '<mov~~dword ptr [rsp + 0x120], eax>', '<jne~~0x4002a1>']}, {'block_Idx': 116, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<add~~rdi, 0xb0>', '<call~~0x500058>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x9c]>', '<mov~~rcx, qword ptr [rsp + 0x178]>', '<add~~rcx, 0xf4>', '<mov~~qword ptr [rsp + 0x50], rcx>', '<cmp~~eax, 0>', '<je~~0x4008a0>']}, {'block_Idx': 107, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<add~~rdi, 0xa8>', '<call~~0x500058>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x2953]>', '<mov~~al, 0>', '<call~~0x500008>']}, {'block_Idx': 122, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<call~~0x500050>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x128]>', '<xor~~eax, eax>', '<cmp~~dword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<je~~0x40054a>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~dword ptr [rsp + 0x15c], eax>', '<mov~~rdx, rcx>', '<add~~rdx, 0x78>', '<mov~~qword ptr [rsp + 0x160], rdx>', '<mov~~dword ptr [rcx + 0x78], eax>', '<add~~eax, -0x21>', '<cmp~~eax, -0x20>', '<jae~~0x400100>']}, {'block_Idx': 99, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rax + 0xb0], rcx>', '<mov~~eax, 0xffffffea>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<je~~0x400c62>']}, {'block_Idx': 127, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rax + 0xd0], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<je~~0x400c62>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0xfc]>', '<mov~~dword ptr [rsp + 0xf8], eax>', '<call~~0x500018>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500010>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x120]>', '<cmp~~eax, 1>', '<jne~~0x400440>']}, {'block_Idx': 138, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<add~~rdi, 0xe8>', '<call~~0x500080>']}, {'block_Idx': 42, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, rax>', '<add~~rcx, 0x20>', '<mov~~qword ptr [rsp + 0xd8], rcx>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500028>']}, {'block_Idx': 129, 'blockInsts': ['<mov~~rdx, rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rax + 0xd8], rdx>', '<mov~~ecx, 0xfffffff4>', '<xor~~eax, eax>', '<cmp~~rdx, 0>', '<mov~~dword ptr [rsp + 0x34], ecx>', '<mov~~dword ptr [rsp + 0x16c], eax>', '<jne~~0x400d42>']}, {'block_Idx': 118, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<call~~0x500048>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x150]>', '<mov~~rax, qword ptr [rsp + 0x170]>', '<mov~~rax, qword ptr [rax]>', '<cmp~~rax, qword ptr [rcx]>', '<setne~~al>', '<mov~~byte ptr [rsp + 0x14f], al>', '<mov~~rdx, qword ptr [rsp + 0x178]>', '<mov~~al, byte ptr [rsp + 0x14e]>', '<mov~~cl, byte ptr [rsp + 0x14f]>', '<movzx~~esi, cl>', '<and~~esi, 1>', '<mov~~dword ptr [rdx + 0x84], esi>', '<or~~al, cl>', '<mov~~byte ptr [rsp + 0x127], al>', '<and~~al, 1>', '<movzx~~eax, al>', '<mov~~rcx, rdx>', '<add~~rcx, 0x88>', '<mov~~qword ptr [rsp + 0x128], rcx>', '<mov~~dword ptr [rdx + 0x88], eax>', '<mov~~rax, rdx>', '<add~~rax, 0x14>', '<mov~~qword ptr [rsp + 0x130], rax>', '<mov~~ecx, dword ptr [rdx + 0x14]>', '<mov~~rax, rdx>', '<add~~rax, 0x24>', '<mov~~qword ptr [rsp + 0x138], rax>', '<mov~~al, 1>', '<cmp~~ecx, dword ptr [rdx + 0x24]>', '<mov~~byte ptr [rsp + 0x147], al>', '<jne~~0x40021e>']}, {'block_Idx': 108, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x400bd2>']}, {'block_Idx': 136, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<add~~rdi, 0xd8>', '<call~~0x500078>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~rcx, rdi>', '<add~~rcx, 0x74>', '<mov~~qword ptr [rsp + 0x180], rcx>', '<mov~~dword ptr [rdi + 0x74], eax>', '<add~~eax, -0x21>', '<cmp~~eax, -0x20>', '<jae~~0x400080>']}, {'block_Idx': 100, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xf0]>', '<mov~~rcx, rax>', '<mov~~esi, 0x30>', '<lea~~rdx, [rip + 0x2660]>', '<mov~~al, 0>', '<call~~0x500008>']}, {'block_Idx': 97, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rsp + 0x110]>', '<mov~~eax, dword ptr [rax]>', '<mov~~qword ptr [rsp + 0x40], rcx>', '<mov~~dword ptr [rsp + 0x4c], eax>', '<mov~~rcx, qword ptr [rsp + 0x40]>', '<mov~~eax, dword ptr [rsp + 0x4c]>', '<mov~~qword ptr [rsp + 0x20], rcx>', '<cmp~~eax, 0>', '<je~~0x400a23>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x170]>', '<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x29b0]>', '<mov~~al, 0>', '<call~~0x500008>']}, {'block_Idx': 120, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rax + 0xc0], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<je~~0x400c62>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~rax, qword ptr [rsp + 0x160]>', '<mov~~rdx, rcx>', '<add~~rdx, 0x20>', '<mov~~qword ptr [rsp + 0x10], rdx>', '<mov~~edi, dword ptr [rcx + 0x20]>', '<mov~~esi, dword ptr [rax]>', '<mov~~edx, 0x400>', '<call~~0x500038>']}, {'block_Idx': 59, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x178]>', '<mov~~dl, byte ptr [rsp + 0x8f]>', '<mov~~rcx, qword ptr [rsp + 0x90]>', '<mov~~eax, dword ptr [rsp + 0x98]>', '<mov~~dword ptr [rsi + 0xf4], 0>', '<mov~~byte ptr [rsp + 0x5f], dl>', '<mov~~qword ptr [rsp + 0x60], rcx>', '<mov~~dword ptr [rsp + 0x6c], eax>', '<mov~~eax, dword ptr [rsp + 0xc4]>', '<mov~~dl, byte ptr [rsp + 0x5f]>', '<mov~~rcx, qword ptr [rsp + 0x60]>', '<mov~~esi, dword ptr [rsp + 0x6c]>', '<cmp~~esi, 0>', '<sete~~sil>', '<and~~dl, sil>', '<test~~dl, 1>', '<mov~~rdx, rcx>', '<mov~~qword ptr [rsp + 0x38], rdx>', '<mov~~qword ptr [rsp + 0x40], rcx>', '<mov~~dword ptr [rsp + 0x4c], eax>', '<jne~~0x4009c9>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, rax>', '<add~~rcx, 0x18>', '<mov~~qword ptr [rsp + 0x150], rcx>', '<mov~~rdi, qword ptr [rax + 0x18]>', '<call~~0x500000>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x188>', '<mov~~qword ptr [rsp + 0x178], rdi>', '<mov~~rax, rdi>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x170], rax>', '<mov~~rdi, qword ptr [rdi + 8]>', '<call~~0x500000>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x16c], eax>', '<jmp~~0x400d42>']}, {'block_Idx': 56, 'blockInsts': ['<jmp~~0x400639>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x118]>', '<mov~~dword ptr [rax], ecx>', '<mov~~rax, qword ptr [rsp + 0x110]>', '<mov~~eax, dword ptr [rax]>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<jne~~0x40051b>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, rax>', '<add~~rcx, 0xf0>', '<mov~~qword ptr [rsp + 0xe8], rcx>', '<cmp~~dword ptr [rax + 0xf0], 0>', '<je~~0x4004ef>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x110]>', '<cmp~~ecx, 0>', '<sete~~cl>', '<mov~~eax, dword ptr [rax]>', '<mov~~byte ptr [rsp + 0xd3], cl>', '<mov~~dword ptr [rsp + 0xd4], eax>', '<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~dl, byte ptr [rsp + 0xd3]>', '<mov~~eax, dword ptr [rsp + 0xd4]>', '<mov~~dword ptr [rsp + 0xc4], eax>', '<mov~~byte ptr [rsp + 0xcb], dl>', '<and~~dl, 1>', '<movzx~~edx, dl>', '<mov~~dword ptr [rsp + 0xcc], edx>', '<mov~~dword ptr [rcx + 0x90], edx>', '<cmp~~eax, 0>', '<jne~~0x40066d>']}, {'block_Idx': 86, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x118]>', '<mov~~edi, dword ptr [rsp + 0x108]>', '<mov~~dword ptr [rcx], edi>', '<mov~~qword ptr [rsp + 0xf0], rax>', '<call~~0x500020>']}, {'block_Idx': 63, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~eax, dword ptr [rcx + 0x10]>', '<cmp~~eax, dword ptr [rcx + 0x20]>', '<setne~~al>', '<and~~al, 1>', '<movzx~~eax, al>', '<mov~~dword ptr [rcx + 0x94], eax>', '<add~~rcx, 0x90>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<mov~~dword ptr [rsp + 0xb0], eax>', '<jmp~~0x4006cc>']}, {'block_Idx': 72, 'blockInsts': ['<jmp~~0x40085a>']}, {'block_Idx': 77, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xc4]>', '<mov~~dl, byte ptr [rsp + 0x5f]>', '<mov~~rcx, qword ptr [rsp + 0x60]>', '<mov~~esi, dword ptr [rsp + 0x6c]>', '<cmp~~esi, 0>', '<sete~~sil>', '<and~~dl, sil>', '<test~~dl, 1>', '<mov~~rdx, rcx>', '<mov~~qword ptr [rsp + 0x38], rdx>', '<mov~~qword ptr [rsp + 0x40], rcx>', '<mov~~dword ptr [rsp + 0x4c], eax>', '<jne~~0x4009c9>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x40]>', '<mov~~eax, dword ptr [rsp + 0x4c]>', '<mov~~qword ptr [rsp + 0x20], rcx>', '<cmp~~eax, 0>', '<je~~0x400a23>']}, {'block_Idx': 101, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xfc]>', '<mov~~ecx, dword ptr [rsp + 0x100]>', '<sub~~ecx, 7>', '<sete~~cl>', '<sub~~eax, 7>', '<sete~~al>', '<or~~cl, al>', '<mov~~eax, 8>', '<test~~cl, 1>', '<mov~~dword ptr [rsp + 0x108], eax>', '<jne~~0x40038f>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x128]>', '<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~ecx, dword ptr [rsp + 0xb0]>', '<mov~~dword ptr [rsp + 0x9c], ecx>', '<mov~~qword ptr [rsp + 0xa0], rax>', '<mov~~cl, 1>', '<cmp~~dword ptr [rdx], 0>', '<mov~~byte ptr [rsp + 0xb7], cl>', '<mov~~qword ptr [rsp + 0xb8], rax>', '<jne~~0x4007a2>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x118]>', '<mov~~rdx, qword ptr [rsp + 0x160]>', '<mov~~rcx, qword ptr [rsp + 0x180]>', '<mov~~rsi, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rsp + 0x28], rsi>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~edi, dword ptr [rdx]>', '<cmp~~ecx, edi>', '<cmovg~~edi, ecx>', '<mov~~edx, dword ptr [rax]>', '<xor~~esi, esi>', '<lea~~rcx, [rip + 0x20fc]>', '<call~~0x500030>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xa0]>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~dword ptr [rax + 0x98], 0>', '<mov~~dl, 1>', '<xor~~eax, eax>', '<mov~~byte ptr [rsp + 0x8f], dl>', '<mov~~qword ptr [rsp + 0x90], rcx>', '<mov~~dword ptr [rsp + 0x98], eax>', '<jmp~~0x4008c6>']}, {'block_Idx': 98, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rax + 0xb8], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<je~~0x400c62>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0xcb]>', '<test~~al, 1>', '<jne~~0x4005f9>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~edi, dword ptr [rax + 0x10]>', '<call~~0x500010>']}, {'block_Idx': 105, 'blockInsts': ['<jmp~~0x4003c2>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~eax, dword ptr [rsp + 0xcc]>', '<mov~~rsi, qword ptr [rsp + 0xe8]>', '<mov~~dl, byte ptr [rsp + 0xb7]>', '<mov~~rcx, qword ptr [rsp + 0xb8]>', '<mov~~qword ptr [rsp + 0x70], rcx>', '<mov~~byte ptr [rsp + 0x7b], dl>', '<mov~~esi, dword ptr [rsi]>', '<xor~~eax, 1>', '<mov~~dword ptr [rsp + 0x7c], eax>', '<mov~~dword ptr [rdi + 0x98], eax>', '<cmp~~esi, 0>', '<mov~~byte ptr [rsp + 0x8f], dl>', '<mov~~qword ptr [rsp + 0x90], rcx>', '<mov~~dword ptr [rsp + 0x98], eax>', '<je~~0x4008c6>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<cmp~~dword ptr [rax], 0>', '<jne~~0x400752>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, rax>', '<add~~rcx, 0x94>', '<mov~~qword ptr [rsp + 0x18], rcx>', '<cmp~~dword ptr [rax + 0x94], 0>', '<je~~0x400a8b>']}, {'block_Idx': 88, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xa0]>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<mov~~dword ptr [rax], 3>', '<mov~~dl, 1>', '<xor~~eax, eax>', '<mov~~byte ptr [rsp + 0x5f], dl>', '<mov~~qword ptr [rsp + 0x60], rcx>', '<mov~~dword ptr [rsp + 0x6c], eax>', '<jmp~~0x4008fb>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x118]>', '<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~eax, dword ptr [rsp + 0xe4]>', '<mov~~ecx, dword ptr [rcx + 0x10]>', '<cmp~~ecx, dword ptr [rdx]>', '<setne~~cl>', '<mov~~byte ptr [rsp + 0xd3], cl>', '<mov~~dword ptr [rsp + 0xd4], eax>', '<jmp~~0x40059b>']}, {'block_Idx': 134, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<add~~rdi, 0xd0>', '<call~~0x500070>']}, {'block_Idx': 140, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xe8]>', '<mov~~eax, dword ptr [rsp + 0xc]>', '<mov~~dword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0x16c], eax>', '<mov~~eax, dword ptr [rsp + 0x16c]>', '<add~~rsp, 0x188>', '<ret~~>']}, {'block_Idx': 125, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rdi, qword ptr [rax + 0xb8]>', '<call~~0x500060>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xf8]>', '<mov~~edi, dword ptr [rsp + 0xfc]>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x100]>', '<cmp~~ecx, edx>', '<cmovg~~edi, eax>', '<call~~0x500018>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<cmp~~dword ptr [rax + 0x4c], 0>', '<setne~~al>', '<mov~~byte ptr [rsp + 0x147], al>', '<mov~~eax, dword ptr [rsp + 0x148]>', '<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~dl, byte ptr [rsp + 0x147]>', '<mov~~byte ptr [rsp + 0x10f], dl>', '<and~~dl, 1>', '<movzx~~edx, dl>', '<mov~~rsi, rcx>', '<add~~rsi, 0x8c>', '<mov~~qword ptr [rsp + 0x110], rsi>', '<mov~~dword ptr [rcx + 0x8c], edx>', '<mov~~rdx, rcx>', '<add~~rdx, 0x28>', '<mov~~qword ptr [rsp + 0x118], rdx>', '<cmp~~dword ptr [rcx + 0x28], -1>', '<mov~~dword ptr [rsp + 0x120], eax>', '<jne~~0x400417>']}, {'block_Idx': 117, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x128]>', '<xor~~eax, eax>', '<cmp~~dword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0x16c], eax>', '<je~~0x400d42>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xe8]>', '<xor~~eax, eax>', '<mov~~cl, al>', '<xor~~eax, eax>', '<cmp~~dword ptr [rdx], 0>', '<mov~~byte ptr [rsp + 0xd3], cl>', '<mov~~dword ptr [rsp + 0xd4], eax>', '<je~~0x40059b>']}, {'block_Idx': 89, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xa0]>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<mov~~dword ptr [rax], 4>', '<mov~~dl, 1>', '<xor~~eax, eax>', '<mov~~byte ptr [rsp + 0x5f], dl>', '<mov~~qword ptr [rsp + 0x60], rcx>', '<mov~~dword ptr [rsp + 0x6c], eax>', '<jmp~~0x4008fb>']}, {'block_Idx': 113, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x110]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x400c0d>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x16c]>', '<add~~rsp, 0x188>', '<ret~~>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x128]>', '<cmp~~dword ptr [rax], 0>', '<jne~~0x4004ef>']}, {'block_Idx': 90, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rax + 0xa0], rcx>', '<mov~~eax, 0xffffffea>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<je~~0x400c62>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~dword ptr [rcx + 0xf4], 2>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, qword ptr [rsp + 0x118]>', '<mov~~rdx, qword ptr [rsp + 0x160]>', '<mov~~rcx, qword ptr [rsp + 0x180]>', '<mov~~rsi, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rsp + 0x28], rsi>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~edi, dword ptr [rdx]>', '<cmp~~ecx, edi>', '<cmovg~~edi, ecx>', '<mov~~edx, dword ptr [rax]>', '<xor~~esi, esi>', '<lea~~rcx, [rip + 0x20fc]>', '<call~~0x500030>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x15c]>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x180]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x148], ecx>', '<cmp~~ecx, edx>', '<setg~~sil>', '<mov~~byte ptr [rsp + 0x14e], sil>', '<cmp~~ecx, edx>', '<mov~~edi, ecx>', '<cmovg~~edi, edx>', '<mov~~dword ptr [rax + 0x7c], edi>', '<and~~sil, 1>', '<movzx~~esi, sil>', '<mov~~dword ptr [rax + 0x80], esi>', '<cmp~~ecx, edx>', '<setl~~al>', '<cmp~~ecx, edx>', '<mov~~byte ptr [rsp + 0x14f], al>', '<jne~~0x400191>']}, {'block_Idx': 66, 'blockInsts': ['<jmp~~0x400951>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x178]>', '<mov~~al, byte ptr [rsp + 0x14e]>', '<mov~~cl, byte ptr [rsp + 0x14f]>', '<movzx~~esi, cl>', '<and~~esi, 1>', '<mov~~dword ptr [rdx + 0x84], esi>', '<or~~al, cl>', '<mov~~byte ptr [rsp + 0x127], al>', '<and~~al, 1>', '<movzx~~eax, al>', '<mov~~rcx, rdx>', '<add~~rcx, 0x88>', '<mov~~qword ptr [rsp + 0x128], rcx>', '<mov~~dword ptr [rdx + 0x88], eax>', '<mov~~rax, rdx>', '<add~~rax, 0x14>', '<mov~~qword ptr [rsp + 0x130], rax>', '<mov~~ecx, dword ptr [rdx + 0x14]>', '<mov~~rax, rdx>', '<add~~rax, 0x24>', '<mov~~qword ptr [rsp + 0x138], rax>', '<mov~~al, 1>', '<cmp~~ecx, dword ptr [rdx + 0x24]>', '<mov~~byte ptr [rsp + 0x147], al>', '<jne~~0x40021e>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~dword ptr [rax + 0x20], ecx>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, rax>', '<add~~rcx, 0xf0>', '<mov~~qword ptr [rsp + 0xe8], rcx>', '<cmp~~dword ptr [rax + 0xf0], 0>', '<je~~0x4004ef>']}, {'block_Idx': 114, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~rax, qword ptr [rsp + 0x138]>', '<mov~~rcx, qword ptr [rsp + 0x160]>', '<mov~~rsi, qword ptr [rsp + 0x10]>', '<mov~~rdx, qword ptr [rsp + 0x118]>', '<mov~~r8, qword ptr [rsp + 0x20]>', '<mov~~r9d, dword ptr [r8]>', '<mov~~r8, rdi>', '<add~~r8, 0x10>', '<cmp~~r9d, 0>', '<cmove~~rdx, r8>', '<mov~~edx, dword ptr [rdx]>', '<mov~~esi, dword ptr [rsi]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~r8d, dword ptr [rax]>', '<cmp~~dword ptr [rdi + 0xf4], 4>', '<sete~~al>', '<and~~al, 1>', '<movzx~~r9d, al>', '<call~~0x500040>']}, {'block_Idx': 83, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x160]>', '<mov~~edi, dword ptr [rcx]>', '<mov~~edx, dword ptr [rax + 0x20]>', '<xor~~esi, esi>', '<lea~~rcx, [rip + 0x2040]>', '<call~~0x500030>']}, {'block_Idx': 79, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x104], ecx>', '<mov~~eax, 6>', '<cmp~~ecx, 3>', '<mov~~dword ptr [rsp + 0x108], eax>', '<jl~~0x4003c2>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~al, 1>', '<cmp~~qword ptr [rcx + 0xe8], 0>', '<mov~~byte ptr [rsp + 0x14f], al>', '<jne~~0x400191>']}, {'block_Idx': 124, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rax + 0xc8], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<je~~0x400c62>']}, {'block_Idx': 95, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x104]>', '<mov~~eax, 9>', '<cmp~~ecx, 5>', '<mov~~dword ptr [rsp + 0x108], eax>', '<jae~~0x4003c2>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x110]>', '<mov~~eax, dword ptr [rax]>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<jne~~0x40051b>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~edi, dword ptr [rax + 0x10]>', '<call~~0x500010>']}], 'cfg_edge_info': [(32, 37), (35, 33), (58, 65), (90, 97), (89, 77), (73, 90), (116, 125), (101, 106), (53, 32), (113, 117), (40, 41), (129, 9), (103, 109), (11, 14), (138, 140), (74, 82), (100, 110), (124, 113), (97, 74), (18, 19), (33, 38), (98, 103), (95, 86), (59, 66), (108, 114), (125, 130), (8, 11), (2, 4), (65, 72), (80, 88), (78, 36), (98, 96), (50, 56), (110, 24), (14, 17), (60, 69), (46, 52), (57, 52), (106, 100), (120, 108), (15, 9), (55, 45), (16, 17), (93, 74), (0, 2), (114, 124), (10, 15), (13, 14), (30, 27), (45, 46), (64, 59), (35, 32), (79, 87), (90, 96), (51, 52), (101, 105), (52, 60), (103, 108), (13, 16), (7, 9), (53, 61), (117, 9), (76, 90), (127, 117), (108, 113), (120, 96), (132, 134), (124, 96), (19, 22), (27, 35), (45, 50), (77, 66), (41, 46), (3, 7), (20, 23), (67, 74), (46, 51), (60, 68), (87, 86), (40, 44), (87, 95), (80, 89), (78, 37), (39, 48), (36, 40), (99, 96), (32, 36), (134, 136), (58, 64), (4, 8), (51, 58), (14, 18), (23, 30), (95, 101), (61, 78), (130, 132), (17, 20), (65, 69), (63, 51), (55, 46), (48, 62), (11, 13), (127, 96), (37, 41), (136, 138), (56, 63), (38, 42), (52, 59), (44, 55), (8, 10), (113, 118), (2, 3), (74, 83), (99, 82), (30, 28), (93, 96), (68, 76), (24, 27), (97, 75), (18, 20), (96, 107), (59, 67), (107, 116), (69, 77), (110, 23), (22, 29), (19, 21), (36, 37), (28, 33), (75, 93), (33, 32), (41, 45), (50, 57), (38, 37), (42, 53), (82, 98), (118, 127), (88, 77), (117, 122), (83, 99), (129, 96), (16, 18), (77, 67), (79, 86), (72, 80), (62, 79), (67, 75), (29, 39), (17, 19), (86, 100), (122, 129), (109, 120)], 'cdg_edge_info': [(129, 107), (35, 33), (50, 52), (58, 65), (53, 78), (19, 110), (90, 97), (101, 106), (113, 117), (8, 9), (108, 130), (129, 9), (103, 109), (77, 90), (38, 53), (11, 14), (74, 82), (46, 130), (103, 136), (113, 138), (124, 113), (19, 39), (33, 38), (18, 19), (97, 74), (98, 103), (19, 48), (50, 63), (108, 114), (8, 11), (8, 130), (108, 132), (60, 76), (129, 130), (2, 4), (80, 88), (78, 36), (103, 120), (46, 132), (55, 52), (103, 138), (113, 140), (8, 96), (108, 107), (108, 116), (46, 107), (108, 125), (60, 69), (14, 17), (8, 132), (46, 116), (108, 134), (129, 132), (46, 125), (120, 108), (46, 134), (55, 45), (16, 17), (113, 96), (8, 107), (8, 116), (129, 116), (8, 125), (93, 74), (129, 125), (8, 134), (108, 136), (129, 134), (13, 14), (45, 46), (30, 27), (50, 51), (19, 100), (79, 87), (103, 134), (51, 52), (52, 60), (103, 108), (129, 136), (13, 16), (19, 29), (53, 61), (117, 9), (127, 117), (108, 113), (129, 138), (19, 22), (113, 130), (45, 50), (103, 140), (46, 51), (40, 44), (60, 77), (87, 95), (80, 89), (78, 37), (8, 15), (19, 79), (2, 8), (113, 132), (36, 40), (45, 52), (46, 136), (58, 64), (103, 96), (51, 58), (14, 18), (113, 107), (95, 101), (113, 116), (59, 90), (113, 125), (65, 69), (8, 136), (108, 138), (55, 46), (113, 134), (11, 13), (30, 35), (46, 138), (74, 99), (99, 98), (38, 42), (52, 59), (103, 107), (110, 30), (113, 118), (8, 10), (2, 3), (113, 127), (8, 138), (108, 140), (113, 136), (65, 80), (99, 82), (74, 83), (46, 140), (58, 59), (97, 75), (58, 77), (97, 93), (110, 23), (108, 124), (8, 140), (36, 37), (129, 140), (108, 96), (103, 130), (117, 129), (46, 96), (50, 57), (38, 37), (2, 7), (40, 55), (117, 122), (103, 132), (129, 96), (16, 18), (19, 62), (17, 19), (2, 9), (103, 116), (60, 90), (103, 125), (74, 98)], 'ddg_edge_info': [(55, 57), (89, 77), (16, 93), (88, 109), (100, 74), (99, 109), (118, 122), (59, 82), (100, 83), (0, 23), (100, 110), (69, 113), (50, 127), (125, 130), (62, 101), (51, 64), (22, 37), (114, 129), (55, 52), (16, 79), (17, 53), (117, 140), (100, 69), (118, 117), (17, 62), (29, 27), (88, 113), (77, 76), (99, 113), (100, 78), (42, 82), (69, 108), (69, 117), (44, 51), (62, 87), (22, 23), (23, 77), (93, 74), (4, 82), (0, 130), (114, 124), (17, 39), (100, 55), (55, 65), (17, 48), (76, 97), (100, 64), (99, 108), (88, 108), (109, 140), (99, 117), (88, 117), (100, 82), (3, 140), (18, 110), (42, 77), (40, 58), (27, 88), (50, 90), (69, 103), (50, 99), (39, 62), (27, 97), (82, 140), (0, 98), (122, 96), (0, 107), (0, 116), (35, 46), (4, 77), (0, 125), (95, 106), (16, 51), (76, 83), (100, 50), (16, 78), (100, 59), (16, 87), (88, 103), (99, 103), (100, 77), (29, 44), (42, 63), (27, 74), (61, 76), (80, 89), (27, 83), (39, 48), (18, 114), (82, 117), (0, 93), (23, 58), (4, 63), (114, 96), (23, 76), (16, 55), (87, 106), (65, 69), (100, 36), (55, 46), (17, 29), (100, 45), (136, 138), (76, 96), (100, 63), (27, 60), (69, 75), (42, 58), (27, 69), (27, 78), (61, 80), (18, 109), (42, 76), (113, 127), (61, 89), (8, 83), (4, 58), (0, 106), (23, 80), (4, 76), (23, 89), (88, 75), (36, 37), (100, 40), (76, 82), (97, 114), (117, 129), (100, 58), (42, 44), (27, 55), (61, 57), (42, 53), (27, 64), (82, 98), (61, 75), (27, 82), (0, 65), (18, 113), (42, 80), (0, 74), (0, 83), (83, 99), (4, 44), (23, 57), (16, 18), (23, 75), (35, 40), (16, 36), (4, 80), (16, 45), (2, 110), (35, 58), (100, 35), (100, 44), (100, 53), (109, 120), (89, 114), (109, 129), (27, 50), (61, 52), (27, 59), (42, 57), (79, 106), (101, 106), (27, 77), (63, 98), (42, 75), (0, 69), (8, 82), (2, 11), (4, 30), (23, 52), (4, 57), (124, 113), (35, 44), (100, 30), (89, 109), (27, 36), (27, 45), (98, 96), (18, 76), (59, 114), (0, 37), (42, 52), (27, 63), (0, 46), (42, 61), (63, 93), (0, 55), (60, 69), (0, 64), (23, 38), (44, 88), (4, 52), (124, 117), (44, 97), (16, 35), (2, 109), (96, 140), (118, 140), (16, 129), (89, 113), (27, 40), (59, 109), (61, 51), (90, 96), (27, 58), (4, 11), (0, 59), (52, 60), (23, 33), (44, 65), (23, 42), (44, 74), (4, 38), (13, 16), (44, 83), (16, 30), (127, 117), (120, 96), (59, 77), (109, 96), (97, 103), (18, 57), (89, 108), (61, 37), (11, 18), (0, 18), (27, 35), (89, 117), (17, 98), (0, 27), (59, 113), (18, 75), (27, 44), (82, 96), (44, 60), (23, 37), (44, 69), (4, 33), (93, 83), (78, 76), (130, 132), (0, 4), (89, 103), (63, 51), (0, 13), (48, 62), (17, 93), (0, 22), (59, 108), (100, 127), (44, 46), (4, 10), (52, 59), (4, 19), (44, 55), (44, 64), (0, 134), (44, 82), (2, 76), (93, 96), (93, 114), (96, 107), (107, 116), (18, 38), (16, 114), (17, 79), (0, 8), (0, 17), (129, 140), (8, 30), (29, 62), (0, 35), (44, 50), (44, 59), (62, 95), (0, 120), (93, 82), (0, 129), (0, 138), (89, 75), (16, 100), (76, 114), (16, 109), (29, 39), (0, 3), (100, 90), (29, 48), (77, 97), (100, 99), (50, 98), (15, 140), (44, 45), (19, 110), (44, 63), (39, 106), (0, 124), (114, 118), (51, 80), (114, 127), (51, 89), (122, 140), (55, 50), (18, 19), (55, 77), (59, 75), (100, 76), (76, 109), (18, 37), (8, 11), (17, 78), (80, 88), (40, 52), (11, 16), (0, 16), (29, 61), (50, 93), (42, 89), (7, 140), (8, 114), (39, 101), (106, 100), (114, 113), (4, 89), (114, 122), (55, 45), (114, 140), (55, 63), (16, 90), (17, 55), (16, 99), (76, 113), (100, 80), (0, 2), (69, 74), (100, 89), (69, 83), (100, 98), (61, 88), (10, 15), (61, 97), (0, 96), (51, 52), (0, 114), (4, 75), (23, 88), (0, 132), (114, 117), (23, 97), (88, 74), (88, 83), (118, 96), (76, 90), (100, 57), (76, 108), (100, 75), (76, 117), (61, 65), (29, 42), (98, 114), (61, 74), (61, 83), (132, 134), (42, 88), (0, 82), (42, 97), (63, 129), (23, 65), (3, 7), (0, 109), (23, 74), (0, 118), (51, 65), (23, 83), (4, 88), (16, 53), (78, 37), (17, 18), (4, 97), (78, 46), (16, 62), (10, 140), (100, 52), (99, 96), (76, 103), (61, 60), (98, 109), (61, 69), (69, 82), (42, 65), (27, 76), (61, 78), (42, 74), (42, 83), (23, 51), (23, 60), (106, 76), (23, 69), (4, 65), (23, 78), (4, 74), (16, 39), (35, 52), (4, 83), (16, 48), (35, 61), (100, 38), (99, 82), (88, 82), (109, 114), (120, 114), (100, 65), (61, 46), (61, 55), (42, 51), (61, 64), (101, 100), (98, 113), (42, 60), (69, 77), (42, 69), (61, 82), (27, 80), (0, 63), (42, 78), (8, 76), (82, 114), (27, 89), (23, 46), (4, 42), (0, 90), (23, 55), (75, 93), (4, 51), (0, 99), (23, 64), (4, 60), (4, 69), (23, 82), (4, 78), (100, 33), (88, 77), (100, 42), (76, 75), (17, 35), (100, 51), (109, 118), (129, 96), (100, 60), (109, 127), (42, 37), (61, 50), (59, 117), (42, 46), (27, 57), (79, 95), (61, 59), (42, 55), (98, 108), (18, 97), (42, 64), (98, 117), (61, 77), (27, 75), (18, 106), (82, 109), (17, 129), (82, 118), (0, 76), (4, 37), (23, 50), (4, 46), (23, 59), (4, 55), (4, 64), (16, 29), (35, 42), (116, 125), (100, 37), (138, 140), (17, 30), (100, 46), (109, 113), (120, 113), (61, 36), (109, 122), (59, 103), (61, 45), (27, 52), (98, 103), (42, 50), (61, 63), (0, 44), (42, 59), (23, 27), (82, 113), (8, 75), (4, 23), (23, 36), (82, 122), (75, 74), (0, 80), (75, 83), (23, 45), (83, 96), (44, 77), (63, 127), (4, 50), (23, 63), (4, 59), (93, 109), (16, 33), (100, 23), (46, 52), (57, 52), (76, 74), (109, 108), (120, 108), (109, 117), (120, 117), (16, 127), (61, 40), (35, 140), (27, 38), (42, 36), (0, 30), (18, 78), (42, 45), (61, 58), (27, 65), (0, 57), (82, 108), (4, 18), (83, 82), (4, 27), (52, 76), (23, 40), (4, 36), (4, 45), (75, 96), (64, 59), (16, 19), (93, 113), (100, 27), (18, 46), (18, 55), (27, 33), (61, 44), (27, 42), (42, 40), (27, 51), (0, 52), (63, 90), (82, 103), (4, 13), (63, 99), (50, 129), (4, 22), (29, 106), (23, 35), (44, 58), (75, 82), (23, 44), (4, 40), (44, 76), (124, 96), (93, 108), (37, 55), (93, 117), (89, 74), (46, 51), (89, 83), (16, 117), (0, 11), (27, 37), (17, 100), (0, 29), (27, 46), (134, 136), (17, 127), (4, 8), (106, 37), (4, 17), (23, 30), (29, 101), (106, 46), (4, 35), (44, 80), (127, 96), (44, 89), (51, 88), (93, 103), (74, 108), (59, 74), (59, 83), (100, 93), (30, 37), (0, 42), (69, 114), (100, 129), (44, 57), (22, 29), (0, 127), (44, 75), (0, 136), (38, 37), (16, 98), (89, 82), (99, 114), (88, 114), (118, 127), (100, 88), (29, 46), (0, 10), (100, 97), (17, 90), (11, 19), (40, 55), (17, 99), (69, 109), (62, 79), (44, 52), (4, 16), (62, 106), (0, 122), (122, 129), (4, 110)]}]}
{'avresample_open': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'subq\t$0x188, %rsp                      # imm = 0x0xbc'}, {'instIndex': 1, 'instruction': 'movq\t%rdi, 0x178(%rsp)                 # 8-byte Spill'}, {'instIndex': 2, 'instruction': 'movq\t%rdi, %rax'}, {'instIndex': 3, 'instruction': 'addq\t$8, %rax'}, {'instIndex': 4, 'instruction': 'movq\t%rax, 0x170(%rsp)                 # 8-byte Spill'}, {'instIndex': 5, 'instruction': 'movq\t8(%rdi), %rdi'}, {'instIndex': 6, 'instruction': 'callq\tav_get_channel_layout_nb_channels@PLT'}, {'instIndex': 8, 'instruction': 'movq\t%rdi, %rcx'}, {'instIndex': 9, 'instruction': 'addq\t$0x74, %rcx'}, {'instIndex': 10, 'instruction': 'movq\t%rcx, 0x180(%rsp)                 # 8-byte Spill'}, {'instIndex': 11, 'instruction': 'movl\t%eax, 0x74(%rdi)'}, {'instIndex': 12, 'instruction': 'addl\t$-0x21, %eax'}, {'instIndex': 13, 'instruction': 'cmpl\t$-0x20, %eax'}, {'instIndex': 14, 'instruction': 'jae\t.LBB0_2'}]}]}
The case of compiler clang with optimization Os.
Patched source code file: utils.c
Patched function: 1---int avresample_open 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_before/Os/utils.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_before/Os/utils.s---avresample_open---before
function id: 0
function flag: True
There are 643 instructions for function: avresample_open in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '36', 'end': 46}, 'before': {'start': '36', 'end': 41}}}]
[{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'subq\t$0x188, %rsp                      # imm = 0x0xbc'}, {'instIndex': 1, 'instruction': 'movq\t%rdi, 0x178(%rsp)                 # 8-byte Spill'}, {'instIndex': 2, 'instruction': 'movq\t%rdi, %rax'}, {'instIndex': 3, 'instruction': 'addq\t$8, %rax'}, {'instIndex': 4, 'instruction': 'movq\t%rax, 0x170(%rsp)                 # 8-byte Spill'}, {'instIndex': 5, 'instruction': 'movq\t8(%rdi), %rdi'}, {'instIndex': 6, 'instruction': 'callq\tav_get_channel_layout_nb_channels@PLT'}, {'instIndex': 8, 'instruction': 'movq\t%rdi, %rcx'}, {'instIndex': 9, 'instruction': 'addq\t$0x74, %rcx'}, {'instIndex': 10, 'instruction': 'movq\t%rcx, 0x180(%rsp)                 # 8-byte Spill'}, {'instIndex': 11, 'instruction': 'movl\t%eax, 0x74(%rdi)'}, {'instIndex': 12, 'instruction': 'addl\t$-0x21, %eax'}, {'instIndex': 13, 'instruction': 'cmpl\t$-0x20, %eax'}, {'instIndex': 14, 'instruction': 'jae\t.LBB0_2'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_before/Os/utils.o
Unpatched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_before/Os/utils.o---before
The extraction of function: avresample_open
Analyzing the binaries to generate subCFGs from patched function ...
It has 323 nodes and 569 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 643 instructions in binary file.
[4194304, 4194343]
The execution time of patched subCFG information extraction via angr: 0:00:00.583354
{'avresample_open': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400080>, <DisassemblerInsn "mov" for 0x400088>, <DisassemblerInsn "add" for 0x40008b>, <DisassemblerInsn "mov" for 0x40008f>, <DisassemblerInsn "mov" for 0x400097>, <DisassemblerInsn "call" for 0x40009b>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400027>, <DisassemblerInsn "mov" for 0x40002f>, <DisassemblerInsn "add" for 0x400032>, <DisassemblerInsn "mov" for 0x400036>, <DisassemblerInsn "mov" for 0x40003e>, <DisassemblerInsn "add" for 0x400041>, <DisassemblerInsn "cmp" for 0x400044>, <DisassemblerInsn "jae" for 0x400047>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400049>, <DisassemblerInsn "mov" for 0x400051>, <DisassemblerInsn "mov" for 0x400059>, <DisassemblerInsn "mov" for 0x40005c>, <DisassemblerInsn "lea" for 0x400061>, <DisassemblerInsn "mov" for 0x400068>, <DisassemblerInsn "call" for 0x40006a>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400007>, <DisassemblerInsn "mov" for 0x40000f>, <DisassemblerInsn "add" for 0x400012>, <DisassemblerInsn "mov" for 0x400016>, <DisassemblerInsn "mov" for 0x40001e>, <DisassemblerInsn "call" for 0x400022>]'}], 'cfg_block_detailed_info': [{'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, rax>', '<add~~rcx, 0x18>', '<mov~~qword ptr [rsp + 0x150], rcx>', '<mov~~rdi, qword ptr [rax + 0x18]>', '<call~~0x500000>']}, {'block_Idx': 1, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~rcx, rdi>', '<add~~rcx, 0x74>', '<mov~~qword ptr [rsp + 0x180], rcx>', '<mov~~dword ptr [rdi + 0x74], eax>', '<add~~eax, -0x21>', '<cmp~~eax, -0x20>', '<jae~~0x400080>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x170]>', '<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x1f80]>', '<mov~~al, 0>', '<call~~0x500008>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x188>', '<mov~~qword ptr [rsp + 0x178], rdi>', '<mov~~rax, rdi>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x170], rax>', '<mov~~rdi, qword ptr [rdi + 8]>', '<call~~0x500000>']}], 'cfg_edge_info': [(0, 1), (1, 2), (1, 3)]}]}
{'avresample_open': [4194304, 4194343]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1db03a68641193832fc759c88049adbe8a449310/clang_before/Os/utils.o---before
The extraction of function: avresample_open
[4194304, 4194343]
Analyzing the binaries to generate subCFGs starting from patched function...
Analyzing the binaries to generate subCDGs starting from patched function...
Analyzing the binaries to generate subDDGs starting from patched function...
It has 143 nodes and 231 edges in CFGEmulated.
It has 141 nodes and 308 edges in CDG.
It has 2742 nodes and 3733 edges in DDG.
The subCFGs, subCDGs and subDDGs Analysis have been finished ...
[4194304, 4194343]
{4194304, 4195334, 4194824, 4197389, 4194846, 4197411, 4195363, 4196389, 4196899, 4194343, 4197424, 4195379, 4195897, 4196931, 4194377, 4195405, 4197466, 4196442, 4195421, 4196966, 4195949, 4194415, 4197487, 4194937, 4197498, 4196474, 4194432, 4197003, 4195469, 4195482, 4194464, 4194977, 4196512, 4195504, 4194993, 4197046, 4196550, 4194505, 4195018, 4196044, 4195535, 4195540, 4197083, 4195037, 4195555, 4197093, 4194543, 4195056, 4196603, 4194560, 4195589, 4196108, 4195089, 4196121, 4195611, 4197156, 4195119, 4196661, 4195144, 4197193, 4195658, 4196178, 4197203, 4194646, 4195168, 4195691, 4194673, 4195707, 4196748, 4195215, 4194705, 4196258, 4197293, 4196785, 4197330, 4195803, 4196828, 4197343, 4195304, 4197356, 4195820, 4195833, 4196862, 4196351}
[44, 41, 93, 15, 38, 109, 21, 65, 106, 45, 142, 129, 29, 102, 18, 46, 110, 87, 24, 122, 68, 53, 96, 30, 39, 103, 75, 69, 61, 57, 60, 19, 80, 10, 36, 8, 99, 127, 48, 27, 20, 42, 118, 16, 108, 2, 100, 97, 3, 120, 82, 59, 4, 0, 7, 56, 78, 28, 55, 86, 63, 72, 77, 67, 101, 51, 73, 64, 98, 9, 50, 23, 105, 52, 58, 74, 88, 37, 62, 17, 117, 40, 89, 113, 33, 90, 76, 11, 66, 14, 35, 114, 83, 79, 13, 124, 141, 95, 32, 22]
The execution time of patched slicing information extraction via angr: 0:00:20.250504
{'avresample_open': [{'patched_tag': 'before', 'cfg_block_info': [{'block_Idx': 44, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40056b>, <DisassemblerInsn "mov" for 0x400573>, <DisassemblerInsn "call" for 0x400576>]'}, {'block_Idx': 41, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40059b>, <DisassemblerInsn "mov" for 0x4005a3>, <DisassemblerInsn "mov" for 0x4005aa>, <DisassemblerInsn "mov" for 0x4005b1>, <DisassemblerInsn "mov" for 0x4005b8>, <DisassemblerInsn "and" for 0x4005bf>, <DisassemblerInsn "movzx" for 0x4005c2>, <DisassemblerInsn "mov" for 0x4005c5>, <DisassemblerInsn "mov" for 0x4005cc>, <DisassemblerInsn "cmp" for 0x4005d2>, <DisassemblerInsn "jne" for 0x4005d5>]'}, {'block_Idx': 93, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009fe>, <DisassemblerInsn "mov" for 0x400a01>, <DisassemblerInsn "mov" for 0x400a09>, <DisassemblerInsn "mov" for 0x400a10>, <DisassemblerInsn "cmp" for 0x400a15>, <DisassemblerInsn "mov" for 0x400a19>, <DisassemblerInsn "je" for 0x400a1d>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000ef>, <DisassemblerInsn "mov" for 0x4000f4>, <DisassemblerInsn "jmp" for 0x4000fb>]'}, {'block_Idx': 38, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40049a>, <DisassemblerInsn "mov" for 0x4004a2>, <DisassemblerInsn "cmp" for 0x4004a4>, <DisassemblerInsn "mov" for 0x4004a7>, <DisassemblerInsn "jne" for 0x4004ae>]'}, {'block_Idx': 109, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ae5>, <DisassemblerInsn "mov" for 0x400aed>, <DisassemblerInsn "mov" for 0x400af5>, <DisassemblerInsn "mov" for 0x400afd>, <DisassemblerInsn "mov" for 0x400b05>, <DisassemblerInsn "mov" for 0x400b07>, <DisassemblerInsn "mov" for 0x400b0a>, <DisassemblerInsn "mov" for 0x400b0c>, <DisassemblerInsn "cmp" for 0x400b0f>, <DisassemblerInsn "sete" for 0x400b16>, <DisassemblerInsn "and" for 0x400b19>, <DisassemblerInsn "movzx" for 0x400b1b>, <DisassemblerInsn "call" for 0x400b1f>]'}, {'block_Idx': 21, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40029c>]'}, {'block_Idx': 65, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400752>, <DisassemblerInsn "mov" for 0x40075a>, <DisassemblerInsn "mov" for 0x400762>, <DisassemblerInsn "cmp" for 0x400769>, <DisassemblerInsn "setne" for 0x40076c>, <DisassemblerInsn "mov" for 0x40076f>, <DisassemblerInsn "and" for 0x400772>, <DisassemblerInsn "movzx" for 0x400776>, <DisassemblerInsn "mov" for 0x40077a>, <DisassemblerInsn "mov" for 0x400780>, <DisassemblerInsn "test" for 0x400785>, <DisassemblerInsn "mov" for 0x400788>, <DisassemblerInsn "mov" for 0x400790>, <DisassemblerInsn "jne" for 0x400797>]'}, {'block_Idx': 106, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40038f>, <DisassemblerInsn "mov" for 0x400396>, <DisassemblerInsn "sub" for 0x40039d>, <DisassemblerInsn "sete" for 0x4003a0>, <DisassemblerInsn "sub" for 0x4003a3>, <DisassemblerInsn "sete" for 0x4003a6>, <DisassemblerInsn "or" for 0x4003a9>, <DisassemblerInsn "mov" for 0x4003ab>, <DisassemblerInsn "mov" for 0x4003b0>, <DisassemblerInsn "test" for 0x4003b5>, <DisassemblerInsn "cmovne" for 0x4003b8>, <DisassemblerInsn "mov" for 0x4003bb>, <DisassemblerInsn "mov" for 0x4003c2>, <DisassemblerInsn "mov" for 0x4003ca>, <DisassemblerInsn "mov" for 0x4003d2>, <DisassemblerInsn "mov" for 0x4003d9>, <DisassemblerInsn "mov" for 0x4003db>, <DisassemblerInsn "call" for 0x4003e3>]'}, {'block_Idx': 45, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005db>, <DisassemblerInsn "cmp" for 0x4005e3>, <DisassemblerInsn "jne" for 0x4005e6>]'}, {'block_Idx': 142, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c6f>, <DisassemblerInsn "mov" for 0x400c73>, <DisassemblerInsn "mov" for 0x400c7a>, <DisassemblerInsn "add" for 0x400c81>, <DisassemblerInsn "ret" for 0x400c88>]'}, {'block_Idx': 129, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c30>, <DisassemblerInsn "mov" for 0x400c33>, <DisassemblerInsn "mov" for 0x400c3b>, <DisassemblerInsn "mov" for 0x400c42>, <DisassemblerInsn "xor" for 0x400c47>, <DisassemblerInsn "cmp" for 0x400c49>, <DisassemblerInsn "mov" for 0x400c4d>, <DisassemblerInsn "mov" for 0x400c51>, <DisassemblerInsn "jne" for 0x400c58>]'}, {'block_Idx': 29, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002b1>, <DisassemblerInsn "mov" for 0x4002b3>, <DisassemblerInsn "mov" for 0x4002bb>, <DisassemblerInsn "mov" for 0x4002c2>, <DisassemblerInsn "call" for 0x4002c5>]'}, {'block_Idx': 102, 'blockInsts': '[<DisassemblerInsn "push" for 0x400c89>, <DisassemblerInsn "mov" for 0x400c8a>, <DisassemblerInsn "add" for 0x400c8e>, <DisassemblerInsn "call" for 0x400c95>]'}, {'block_Idx': 18, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40021e>, <DisassemblerInsn "mov" for 0x400225>, <DisassemblerInsn "mov" for 0x40022d>, <DisassemblerInsn "mov" for 0x400234>, <DisassemblerInsn "and" for 0x40023b>, <DisassemblerInsn "movzx" for 0x40023e>, <DisassemblerInsn "mov" for 0x400241>, <DisassemblerInsn "add" for 0x400244>, <DisassemblerInsn "mov" for 0x40024b>, <DisassemblerInsn "mov" for 0x400253>, <DisassemblerInsn "mov" for 0x400259>, <DisassemblerInsn "add" for 0x40025c>, <DisassemblerInsn "mov" for 0x400260>, <DisassemblerInsn "cmp" for 0x400268>, <DisassemblerInsn "mov" for 0x40026c>, <DisassemblerInsn "jne" for 0x400273>]'}, {'block_Idx': 46, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40066d>, <DisassemblerInsn "mov" for 0x400675>, <DisassemblerInsn "mov" for 0x40067d>, <DisassemblerInsn "mov" for 0x400685>, <DisassemblerInsn "cmp" for 0x400687>, <DisassemblerInsn "setne" for 0x40068a>, <DisassemblerInsn "and" for 0x40068d>, <DisassemblerInsn "movzx" for 0x400690>, <DisassemblerInsn "mov" for 0x400693>, <DisassemblerInsn "add" for 0x400699>, <DisassemblerInsn "xor" for 0x40069f>, <DisassemblerInsn "test" for 0x4006a1>, <DisassemblerInsn "mov" for 0x4006a5>, <DisassemblerInsn "mov" for 0x4006a8>, <DisassemblerInsn "mov" for 0x4006b0>, <DisassemblerInsn "mov" for 0x4006b7>, <DisassemblerInsn "mov" for 0x4006be>, <DisassemblerInsn "jne" for 0x4006c6>]'}, {'block_Idx': 110, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400406>, <DisassemblerInsn "mov" for 0x40040e>, <DisassemblerInsn "mov" for 0x400410>, <DisassemblerInsn "mov" for 0x400417>, <DisassemblerInsn "cmp" for 0x40041e>, <DisassemblerInsn "jne" for 0x400421>]'}, {'block_Idx': 87, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40032f>, <DisassemblerInsn "mov" for 0x400337>, <DisassemblerInsn "cmp" for 0x40033c>, <DisassemblerInsn "mov" for 0x40033f>, <DisassemblerInsn "jne" for 0x400346>]'}, {'block_Idx': 24, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400440>, <DisassemblerInsn "cmp" for 0x400448>, <DisassemblerInsn "jne" for 0x40044b>]'}, {'block_Idx': 122, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c23>, <DisassemblerInsn "call" for 0x400c2b>]'}, {'block_Idx': 68, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400820>]'}, {'block_Idx': 53, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4004cf>, <DisassemblerInsn "jne" for 0x4004d2>]'}, {'block_Idx': 96, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c5a>, <DisassemblerInsn "mov" for 0x400c62>, <DisassemblerInsn "mov" for 0x400c66>, <DisassemblerInsn "call" for 0x400c6a>]'}, {'block_Idx': 30, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400433>, <DisassemblerInsn "mov" for 0x400435>, <DisassemblerInsn "mov" for 0x40043d>, <DisassemblerInsn "mov" for 0x400440>, <DisassemblerInsn "cmp" for 0x400448>, <DisassemblerInsn "jne" for 0x40044b>]'}, {'block_Idx': 39, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002ca>, <DisassemblerInsn "mov" for 0x4002d1>, <DisassemblerInsn "call" for 0x4002d8>]'}, {'block_Idx': 103, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400adb>, <DisassemblerInsn "cmp" for 0x400ae0>, <DisassemblerInsn "je" for 0x400ae3>]'}, {'block_Idx': 75, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009dc>, <DisassemblerInsn "mov" for 0x4009e4>, <DisassemblerInsn "mov" for 0x4009ec>, <DisassemblerInsn "mov" for 0x4009ee>, <DisassemblerInsn "xor" for 0x4009f0>, <DisassemblerInsn "lea" for 0x4009f2>, <DisassemblerInsn "call" for 0x4009f9>]'}, {'block_Idx': 69, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400825>, <DisassemblerInsn "mov" for 0x40082d>, <DisassemblerInsn "mov" for 0x400835>, <DisassemblerInsn "mov" for 0x40083c>, <DisassemblerInsn "mov" for 0x400846>, <DisassemblerInsn "mov" for 0x400848>, <DisassemblerInsn "mov" for 0x40084c>, <DisassemblerInsn "mov" for 0x400851>, <DisassemblerInsn "jmp" for 0x400855>]'}, {'block_Idx': 61, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004d4>, <DisassemblerInsn "mov" for 0x4004dc>, <DisassemblerInsn "call" for 0x4004de>]'}, {'block_Idx': 57, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005f9>, <DisassemblerInsn "mov" for 0x400601>, <DisassemblerInsn "mov" for 0x400609>, <DisassemblerInsn "cmp" for 0x40060b>, <DisassemblerInsn "setne" for 0x40060e>, <DisassemblerInsn "and" for 0x400611>, <DisassemblerInsn "movzx" for 0x400614>, <DisassemblerInsn "mov" for 0x400617>, <DisassemblerInsn "add" for 0x40061d>, <DisassemblerInsn "xor" for 0x400623>, <DisassemblerInsn "mov" for 0x400625>, <DisassemblerInsn "mov" for 0x40062c>, <DisassemblerInsn "jmp" for 0x400634>]'}, {'block_Idx': 60, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007ff>, <DisassemblerInsn "mov" for 0x400803>, <DisassemblerInsn "mov" for 0x400808>, <DisassemblerInsn "test" for 0x40080c>, <DisassemblerInsn "mov" for 0x40080f>, <DisassemblerInsn "mov" for 0x400817>, <DisassemblerInsn "jne" for 0x40081e>]'}, {'block_Idx': 19, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400279>, <DisassemblerInsn "mov" for 0x400280>, <DisassemblerInsn "mov" for 0x400287>, <DisassemblerInsn "or" for 0x40028e>, <DisassemblerInsn "test" for 0x400290>, <DisassemblerInsn "mov" for 0x400293>, <DisassemblerInsn "jne" for 0x40029a>]'}, {'block_Idx': 80, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40085a>, <DisassemblerInsn "mov" for 0x400861>, <DisassemblerInsn "add" for 0x400869>, <DisassemblerInsn "mov" for 0x400870>, <DisassemblerInsn "cmp" for 0x400875>, <DisassemblerInsn "je" for 0x400878>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000c9>, <DisassemblerInsn "mov" for 0x4000d1>, <DisassemblerInsn "mov" for 0x4000d9>, <DisassemblerInsn "mov" for 0x4000dc>, <DisassemblerInsn "lea" for 0x4000e1>, <DisassemblerInsn "mov" for 0x4000e8>, <DisassemblerInsn "call" for 0x4000ea>]'}, {'block_Idx': 36, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400505>, <DisassemblerInsn "xor" for 0x40050d>, <DisassemblerInsn "cmp" for 0x40050f>, <DisassemblerInsn "mov" for 0x400512>, <DisassemblerInsn "je" for 0x400519>]'}, {'block_Idx': 8, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4000a0>, <DisassemblerInsn "mov" for 0x4000a8>, <DisassemblerInsn "mov" for 0x4000af>, <DisassemblerInsn "add" for 0x4000b2>, <DisassemblerInsn "mov" for 0x4000b6>, <DisassemblerInsn "mov" for 0x4000be>, <DisassemblerInsn "add" for 0x4000c1>, <DisassemblerInsn "cmp" for 0x4000c4>, <DisassemblerInsn "jae" for 0x4000c7>]'}, {'block_Idx': 99, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a66>, <DisassemblerInsn "mov" for 0x400a69>, <DisassemblerInsn "mov" for 0x400a71>, <DisassemblerInsn "mov" for 0x400a78>, <DisassemblerInsn "cmp" for 0x400a7d>, <DisassemblerInsn "mov" for 0x400a81>, <DisassemblerInsn "je" for 0x400a85>]'}, {'block_Idx': 127, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400bec>, <DisassemblerInsn "mov" for 0x400bef>, <DisassemblerInsn "mov" for 0x400bf7>, <DisassemblerInsn "mov" for 0x400bfe>, <DisassemblerInsn "cmp" for 0x400c03>, <DisassemblerInsn "mov" for 0x400c07>, <DisassemblerInsn "je" for 0x400c0b>]'}, {'block_Idx': 48, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002dd>, <DisassemblerInsn "mov" for 0x4002e4>, <DisassemblerInsn "call" for 0x4002eb>]'}, {'block_Idx': 27, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40044d>, <DisassemblerInsn "mov" for 0x400455>, <DisassemblerInsn "call" for 0x400458>]'}, {'block_Idx': 20, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400417>, <DisassemblerInsn "cmp" for 0x40041e>, <DisassemblerInsn "jne" for 0x400421>]'}, {'block_Idx': 42, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004b0>, <DisassemblerInsn "mov" for 0x4004b8>, <DisassemblerInsn "add" for 0x4004bb>, <DisassemblerInsn "mov" for 0x4004bf>, <DisassemblerInsn "mov" for 0x4004c7>, <DisassemblerInsn "call" for 0x4004ca>]'}, {'block_Idx': 118, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400bdf>, <DisassemblerInsn "call" for 0x400be7>]'}, {'block_Idx': 16, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400171>, <DisassemblerInsn "mov" for 0x400179>, <DisassemblerInsn "mov" for 0x400181>, <DisassemblerInsn "cmp" for 0x400184>, <DisassemblerInsn "setne" for 0x400187>, <DisassemblerInsn "mov" for 0x40018a>, <DisassemblerInsn "mov" for 0x400191>, <DisassemblerInsn "mov" for 0x400199>, <DisassemblerInsn "mov" for 0x4001a0>, <DisassemblerInsn "movzx" for 0x4001a7>, <DisassemblerInsn "and" for 0x4001aa>, <DisassemblerInsn "mov" for 0x4001ad>, <DisassemblerInsn "or" for 0x4001b3>, <DisassemblerInsn "mov" for 0x4001b5>, <DisassemblerInsn "and" for 0x4001bc>, <DisassemblerInsn "movzx" for 0x4001be>, <DisassemblerInsn "mov" for 0x4001c1>, <DisassemblerInsn "add" for 0x4001c4>, <DisassemblerInsn "mov" for 0x4001cb>, <DisassemblerInsn "mov" for 0x4001d3>, <DisassemblerInsn "mov" for 0x4001d9>, <DisassemblerInsn "add" for 0x4001dc>, <DisassemblerInsn "mov" for 0x4001e0>, <DisassemblerInsn "mov" for 0x4001e8>, <DisassemblerInsn "mov" for 0x4001eb>, <DisassemblerInsn "add" for 0x4001ee>, <DisassemblerInsn "mov" for 0x4001f2>, <DisassemblerInsn "mov" for 0x4001fa>, <DisassemblerInsn "cmp" for 0x4001fc>, <DisassemblerInsn "mov" for 0x4001ff>, <DisassemblerInsn "jne" for 0x400206>]'}, {'block_Idx': 108, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b49>, <DisassemblerInsn "cmp" for 0x400b4e>, <DisassemblerInsn "je" for 0x400b51>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400027>, <DisassemblerInsn "mov" for 0x40002f>, <DisassemblerInsn "add" for 0x400032>, <DisassemblerInsn "mov" for 0x400036>, <DisassemblerInsn "mov" for 0x40003e>, <DisassemblerInsn "add" for 0x400041>, <DisassemblerInsn "cmp" for 0x400044>, <DisassemblerInsn "jae" for 0x400047>]'}, {'block_Idx': 100, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003e8>, <DisassemblerInsn "mov" for 0x4003f0>, <DisassemblerInsn "mov" for 0x4003f3>, <DisassemblerInsn "lea" for 0x4003f8>, <DisassemblerInsn "mov" for 0x4003ff>, <DisassemblerInsn "call" for 0x400401>]'}, {'block_Idx': 97, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009b1>, <DisassemblerInsn "mov" for 0x4009b6>, <DisassemblerInsn "mov" for 0x4009be>, <DisassemblerInsn "mov" for 0x4009c0>, <DisassemblerInsn "mov" for 0x4009c5>, <DisassemblerInsn "mov" for 0x4009c9>, <DisassemblerInsn "mov" for 0x4009ce>, <DisassemblerInsn "mov" for 0x4009d2>, <DisassemblerInsn "cmp" for 0x4009d7>, <DisassemblerInsn "je" for 0x4009da>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400049>, <DisassemblerInsn "mov" for 0x400051>, <DisassemblerInsn "mov" for 0x400059>, <DisassemblerInsn "mov" for 0x40005c>, <DisassemblerInsn "lea" for 0x400061>, <DisassemblerInsn "mov" for 0x400068>, <DisassemblerInsn "call" for 0x40006a>]'}, {'block_Idx': 120, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b24>, <DisassemblerInsn "mov" for 0x400b27>, <DisassemblerInsn "mov" for 0x400b2f>, <DisassemblerInsn "mov" for 0x400b36>, <DisassemblerInsn "cmp" for 0x400b3b>, <DisassemblerInsn "mov" for 0x400b3f>, <DisassemblerInsn "je" for 0x400b43>]'}, {'block_Idx': 82, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a8b>, <DisassemblerInsn "mov" for 0x400a93>, <DisassemblerInsn "mov" for 0x400a9b>, <DisassemblerInsn "add" for 0x400a9e>, <DisassemblerInsn "mov" for 0x400aa2>, <DisassemblerInsn "mov" for 0x400aa7>, <DisassemblerInsn "mov" for 0x400aaa>, <DisassemblerInsn "mov" for 0x400aac>, <DisassemblerInsn "call" for 0x400ab1>]'}, {'block_Idx': 59, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008c6>, <DisassemblerInsn "mov" for 0x4008ce>, <DisassemblerInsn "mov" for 0x4008d5>, <DisassemblerInsn "mov" for 0x4008dd>, <DisassemblerInsn "mov" for 0x4008e4>, <DisassemblerInsn "mov" for 0x4008ee>, <DisassemblerInsn "mov" for 0x4008f2>, <DisassemblerInsn "mov" for 0x4008f7>, <DisassemblerInsn "mov" for 0x4008fb>, <DisassemblerInsn "mov" for 0x400902>, <DisassemblerInsn "mov" for 0x400906>, <DisassemblerInsn "mov" for 0x40090b>, <DisassemblerInsn "cmp" for 0x40090f>, <DisassemblerInsn "sete" for 0x400912>, <DisassemblerInsn "and" for 0x400916>, <DisassemblerInsn "test" for 0x400919>, <DisassemblerInsn "mov" for 0x40091c>, <DisassemblerInsn "mov" for 0x40091f>, <DisassemblerInsn "mov" for 0x400924>, <DisassemblerInsn "mov" for 0x400929>, <DisassemblerInsn "jne" for 0x40092d>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400080>, <DisassemblerInsn "mov" for 0x400088>, <DisassemblerInsn "add" for 0x40008b>, <DisassemblerInsn "mov" for 0x40008f>, <DisassemblerInsn "mov" for 0x400097>, <DisassemblerInsn "call" for 0x40009b>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x400000>, <DisassemblerInsn "mov" for 0x400007>, <DisassemblerInsn "mov" for 0x40000f>, <DisassemblerInsn "add" for 0x400012>, <DisassemblerInsn "mov" for 0x400016>, <DisassemblerInsn "mov" for 0x40001e>, <DisassemblerInsn "call" for 0x400022>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40006f>, <DisassemblerInsn "mov" for 0x400074>, <DisassemblerInsn "jmp" for 0x40007b>]'}, {'block_Idx': 56, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x4005f7>]'}, {'block_Idx': 78, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004e3>, <DisassemblerInsn "mov" for 0x4004e5>, <DisassemblerInsn "mov" for 0x4004ed>, <DisassemblerInsn "mov" for 0x4004ef>, <DisassemblerInsn "mov" for 0x4004f7>, <DisassemblerInsn "cmp" for 0x4004f9>, <DisassemblerInsn "mov" for 0x4004fc>, <DisassemblerInsn "jne" for 0x400503>]'}, {'block_Idx': 28, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40046a>, <DisassemblerInsn "mov" for 0x400472>, <DisassemblerInsn "add" for 0x400475>, <DisassemblerInsn "mov" for 0x40047c>, <DisassemblerInsn "cmp" for 0x400484>, <DisassemblerInsn "je" for 0x40048b>]'}, {'block_Idx': 55, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40057b>, <DisassemblerInsn "mov" for 0x40057d>, <DisassemblerInsn "cmp" for 0x400585>, <DisassemblerInsn "sete" for 0x400588>, <DisassemblerInsn "mov" for 0x40058b>, <DisassemblerInsn "mov" for 0x40058d>, <DisassemblerInsn "mov" for 0x400594>, <DisassemblerInsn "mov" for 0x40059b>, <DisassemblerInsn "mov" for 0x4005a3>, <DisassemblerInsn "mov" for 0x4005aa>, <DisassemblerInsn "mov" for 0x4005b1>, <DisassemblerInsn "mov" for 0x4005b8>, <DisassemblerInsn "and" for 0x4005bf>, <DisassemblerInsn "movzx" for 0x4005c2>, <DisassemblerInsn "mov" for 0x4005c5>, <DisassemblerInsn "mov" for 0x4005cc>, <DisassemblerInsn "cmp" for 0x4005d2>, <DisassemblerInsn "jne" for 0x4005d5>]'}, {'block_Idx': 86, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4003c2>, <DisassemblerInsn "mov" for 0x4003ca>, <DisassemblerInsn "mov" for 0x4003d2>, <DisassemblerInsn "mov" for 0x4003d9>, <DisassemblerInsn "mov" for 0x4003db>, <DisassemblerInsn "call" for 0x4003e3>]'}, {'block_Idx': 63, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400639>, <DisassemblerInsn "mov" for 0x400641>, <DisassemblerInsn "cmp" for 0x400644>, <DisassemblerInsn "setne" for 0x400647>, <DisassemblerInsn "and" for 0x40064a>, <DisassemblerInsn "movzx" for 0x40064c>, <DisassemblerInsn "mov" for 0x40064f>, <DisassemblerInsn "add" for 0x400655>, <DisassemblerInsn "mov" for 0x40065c>, <DisassemblerInsn "mov" for 0x400664>, <DisassemblerInsn "jmp" for 0x40066b>]'}, {'block_Idx': 72, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40079d>]'}, {'block_Idx': 77, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008fb>, <DisassemblerInsn "mov" for 0x400902>, <DisassemblerInsn "mov" for 0x400906>, <DisassemblerInsn "mov" for 0x40090b>, <DisassemblerInsn "cmp" for 0x40090f>, <DisassemblerInsn "sete" for 0x400912>, <DisassemblerInsn "and" for 0x400916>, <DisassemblerInsn "test" for 0x400919>, <DisassemblerInsn "mov" for 0x40091c>, <DisassemblerInsn "mov" for 0x40091f>, <DisassemblerInsn "mov" for 0x400924>, <DisassemblerInsn "mov" for 0x400929>, <DisassemblerInsn "jne" for 0x40092d>]'}, {'block_Idx': 67, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4009c9>, <DisassemblerInsn "mov" for 0x4009ce>, <DisassemblerInsn "mov" for 0x4009d2>, <DisassemblerInsn "cmp" for 0x4009d7>, <DisassemblerInsn "je" for 0x4009da>]'}, {'block_Idx': 101, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400360>, <DisassemblerInsn "mov" for 0x400367>, <DisassemblerInsn "sub" for 0x40036e>, <DisassemblerInsn "sete" for 0x400371>, <DisassemblerInsn "sub" for 0x400374>, <DisassemblerInsn "sete" for 0x400377>, <DisassemblerInsn "or" for 0x40037a>, <DisassemblerInsn "mov" for 0x40037c>, <DisassemblerInsn "test" for 0x400381>, <DisassemblerInsn "mov" for 0x400384>, <DisassemblerInsn "jne" for 0x40038b>]'}, {'block_Idx': 51, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4006cc>, <DisassemblerInsn "mov" for 0x4006d4>, <DisassemblerInsn "mov" for 0x4006dc>, <DisassemblerInsn "mov" for 0x4006e3>, <DisassemblerInsn "mov" for 0x4006ea>, <DisassemblerInsn "mov" for 0x4006f2>, <DisassemblerInsn "cmp" for 0x4006f4>, <DisassemblerInsn "mov" for 0x4006f7>, <DisassemblerInsn "mov" for 0x4006fe>, <DisassemblerInsn "jne" for 0x400706>]'}, {'block_Idx': 73, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400951>, <DisassemblerInsn "mov" for 0x400959>, <DisassemblerInsn "mov" for 0x400961>, <DisassemblerInsn "mov" for 0x400969>, <DisassemblerInsn "mov" for 0x40096e>, <DisassemblerInsn "mov" for 0x400973>, <DisassemblerInsn "mov" for 0x400975>, <DisassemblerInsn "cmp" for 0x400977>, <DisassemblerInsn "cmovg" for 0x400979>, <DisassemblerInsn "mov" for 0x40097c>, <DisassemblerInsn "xor" for 0x40097e>, <DisassemblerInsn "lea" for 0x400980>, <DisassemblerInsn "call" for 0x400987>]'}, {'block_Idx': 64, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400719>, <DisassemblerInsn "mov" for 0x400721>, <DisassemblerInsn "mov" for 0x400729>, <DisassemblerInsn "mov" for 0x400733>, <DisassemblerInsn "xor" for 0x400735>, <DisassemblerInsn "mov" for 0x400737>, <DisassemblerInsn "mov" for 0x40073e>, <DisassemblerInsn "mov" for 0x400746>, <DisassemblerInsn "jmp" for 0x40074d>]'}, {'block_Idx': 98, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400ab6>, <DisassemblerInsn "mov" for 0x400ab9>, <DisassemblerInsn "mov" for 0x400ac1>, <DisassemblerInsn "mov" for 0x400ac8>, <DisassemblerInsn "cmp" for 0x400acd>, <DisassemblerInsn "mov" for 0x400ad1>, <DisassemblerInsn "je" for 0x400ad5>]'}, {'block_Idx': 9, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c7a>, <DisassemblerInsn "add" for 0x400c81>, <DisassemblerInsn "ret" for 0x400c88>]'}, {'block_Idx': 50, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4005ec>, <DisassemblerInsn "test" for 0x4005f3>, <DisassemblerInsn "jne" for 0x4005f5>]'}, {'block_Idx': 23, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400423>, <DisassemblerInsn "mov" for 0x40042b>, <DisassemblerInsn "call" for 0x40042e>]'}, {'block_Idx': 105, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x40038d>]'}, {'block_Idx': 52, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4007a2>, <DisassemblerInsn "mov" for 0x4007aa>, <DisassemblerInsn "mov" for 0x4007b1>, <DisassemblerInsn "mov" for 0x4007b9>, <DisassemblerInsn "mov" for 0x4007c0>, <DisassemblerInsn "mov" for 0x4007c8>, <DisassemblerInsn "mov" for 0x4007cd>, <DisassemblerInsn "mov" for 0x4007d1>, <DisassemblerInsn "xor" for 0x4007d3>, <DisassemblerInsn "mov" for 0x4007d6>, <DisassemblerInsn "mov" for 0x4007da>, <DisassemblerInsn "cmp" for 0x4007e0>, <DisassemblerInsn "mov" for 0x4007e3>, <DisassemblerInsn "mov" for 0x4007ea>, <DisassemblerInsn "mov" for 0x4007f2>, <DisassemblerInsn "je" for 0x4007f9>]'}, {'block_Idx': 58, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40070c>, <DisassemblerInsn "cmp" for 0x400714>, <DisassemblerInsn "jne" for 0x400717>]'}, {'block_Idx': 74, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a23>, <DisassemblerInsn "mov" for 0x400a2b>, <DisassemblerInsn "add" for 0x400a2e>, <DisassemblerInsn "mov" for 0x400a35>, <DisassemblerInsn "cmp" for 0x400a3a>, <DisassemblerInsn "je" for 0x400a41>]'}, {'block_Idx': 88, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4008a0>, <DisassemblerInsn "mov" for 0x4008a8>, <DisassemblerInsn "mov" for 0x4008ad>, <DisassemblerInsn "mov" for 0x4008b3>, <DisassemblerInsn "xor" for 0x4008b5>, <DisassemblerInsn "mov" for 0x4008b7>, <DisassemblerInsn "mov" for 0x4008bb>, <DisassemblerInsn "mov" for 0x4008c0>, <DisassemblerInsn "jmp" for 0x4008c4>]'}, {'block_Idx': 37, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40051b>, <DisassemblerInsn "mov" for 0x400523>, <DisassemblerInsn "mov" for 0x40052b>, <DisassemblerInsn "mov" for 0x400532>, <DisassemblerInsn "cmp" for 0x400535>, <DisassemblerInsn "setne" for 0x400537>, <DisassemblerInsn "mov" for 0x40053a>, <DisassemblerInsn "mov" for 0x400541>, <DisassemblerInsn "jmp" for 0x400548>]'}, {'block_Idx': 62, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002f0>, <DisassemblerInsn "mov" for 0x4002f7>, <DisassemblerInsn "mov" for 0x4002fe>, <DisassemblerInsn "mov" for 0x400300>, <DisassemblerInsn "cmp" for 0x400307>, <DisassemblerInsn "cmovg" for 0x400309>, <DisassemblerInsn "call" for 0x40030c>]'}, {'block_Idx': 17, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400208>, <DisassemblerInsn "cmp" for 0x400210>, <DisassemblerInsn "setne" for 0x400214>, <DisassemblerInsn "mov" for 0x400217>, <DisassemblerInsn "mov" for 0x40021e>, <DisassemblerInsn "mov" for 0x400225>, <DisassemblerInsn "mov" for 0x40022d>, <DisassemblerInsn "mov" for 0x400234>, <DisassemblerInsn "and" for 0x40023b>, <DisassemblerInsn "movzx" for 0x40023e>, <DisassemblerInsn "mov" for 0x400241>, <DisassemblerInsn "add" for 0x400244>, <DisassemblerInsn "mov" for 0x40024b>, <DisassemblerInsn "mov" for 0x400253>, <DisassemblerInsn "mov" for 0x400259>, <DisassemblerInsn "add" for 0x40025c>, <DisassemblerInsn "mov" for 0x400260>, <DisassemblerInsn "cmp" for 0x400268>, <DisassemblerInsn "mov" for 0x40026c>, <DisassemblerInsn "jne" for 0x400273>]'}, {'block_Idx': 117, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400c0d>, <DisassemblerInsn "xor" for 0x400c15>, <DisassemblerInsn "cmp" for 0x400c17>, <DisassemblerInsn "mov" for 0x400c1a>, <DisassemblerInsn "je" for 0x400c21>]'}, {'block_Idx': 40, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40054a>, <DisassemblerInsn "xor" for 0x400552>, <DisassemblerInsn "mov" for 0x400554>, <DisassemblerInsn "xor" for 0x400556>, <DisassemblerInsn "cmp" for 0x400558>, <DisassemblerInsn "mov" for 0x40055b>, <DisassemblerInsn "mov" for 0x400562>, <DisassemblerInsn "je" for 0x400569>]'}, {'block_Idx': 89, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40087a>, <DisassemblerInsn "mov" for 0x400882>, <DisassemblerInsn "mov" for 0x400887>, <DisassemblerInsn "mov" for 0x40088d>, <DisassemblerInsn "xor" for 0x40088f>, <DisassemblerInsn "mov" for 0x400891>, <DisassemblerInsn "mov" for 0x400895>, <DisassemblerInsn "mov" for 0x40089a>, <DisassemblerInsn "jmp" for 0x40089e>]'}, {'block_Idx': 113, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400bd2>, <DisassemblerInsn "cmp" for 0x400bda>, <DisassemblerInsn "je" for 0x400bdd>]'}, {'block_Idx': 33, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40048d>, <DisassemblerInsn "cmp" for 0x400495>, <DisassemblerInsn "jne" for 0x400498>]'}, {'block_Idx': 90, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40098c>, <DisassemblerInsn "mov" for 0x40098f>, <DisassemblerInsn "mov" for 0x400997>, <DisassemblerInsn "mov" for 0x40099e>, <DisassemblerInsn "cmp" for 0x4009a3>, <DisassemblerInsn "mov" for 0x4009a7>, <DisassemblerInsn "je" for 0x4009ab>]'}, {'block_Idx': 76, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400935>, <DisassemblerInsn "mov" for 0x40093a>, <DisassemblerInsn "mov" for 0x400942>, <DisassemblerInsn "mov" for 0x40094c>, <DisassemblerInsn "mov" for 0x400951>, <DisassemblerInsn "mov" for 0x400959>, <DisassemblerInsn "mov" for 0x400961>, <DisassemblerInsn "mov" for 0x400969>, <DisassemblerInsn "mov" for 0x40096e>, <DisassemblerInsn "mov" for 0x400973>, <DisassemblerInsn "mov" for 0x400975>, <DisassemblerInsn "cmp" for 0x400977>, <DisassemblerInsn "cmovg" for 0x400979>, <DisassemblerInsn "mov" for 0x40097c>, <DisassemblerInsn "xor" for 0x40097e>, <DisassemblerInsn "lea" for 0x400980>, <DisassemblerInsn "call" for 0x400987>]'}, {'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400100>, <DisassemblerInsn "mov" for 0x400107>, <DisassemblerInsn "mov" for 0x40010f>, <DisassemblerInsn "mov" for 0x400117>, <DisassemblerInsn "mov" for 0x400119>, <DisassemblerInsn "cmp" for 0x400120>, <DisassemblerInsn "setg" for 0x400122>, <DisassemblerInsn "mov" for 0x400126>, <DisassemblerInsn "cmp" for 0x40012e>, <DisassemblerInsn "mov" for 0x400130>, <DisassemblerInsn "cmovg" for 0x400132>, <DisassemblerInsn "mov" for 0x400135>, <DisassemblerInsn "and" for 0x400138>, <DisassemblerInsn "movzx" for 0x40013c>, <DisassemblerInsn "mov" for 0x400140>, <DisassemblerInsn "cmp" for 0x400146>, <DisassemblerInsn "setl" for 0x400148>, <DisassemblerInsn "cmp" for 0x40014b>, <DisassemblerInsn "mov" for 0x40014d>, <DisassemblerInsn "jne" for 0x400154>]'}, {'block_Idx': 66, 'blockInsts': '[<DisassemblerInsn "jmp" for 0x400933>]'}, {'block_Idx': 14, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400191>, <DisassemblerInsn "mov" for 0x400199>, <DisassemblerInsn "mov" for 0x4001a0>, <DisassemblerInsn "movzx" for 0x4001a7>, <DisassemblerInsn "and" for 0x4001aa>, <DisassemblerInsn "mov" for 0x4001ad>, <DisassemblerInsn "or" for 0x4001b3>, <DisassemblerInsn "mov" for 0x4001b5>, <DisassemblerInsn "and" for 0x4001bc>, <DisassemblerInsn "movzx" for 0x4001be>, <DisassemblerInsn "mov" for 0x4001c1>, <DisassemblerInsn "add" for 0x4001c4>, <DisassemblerInsn "mov" for 0x4001cb>, <DisassemblerInsn "mov" for 0x4001d3>, <DisassemblerInsn "mov" for 0x4001d9>, <DisassemblerInsn "add" for 0x4001dc>, <DisassemblerInsn "mov" for 0x4001e0>, <DisassemblerInsn "mov" for 0x4001e8>, <DisassemblerInsn "mov" for 0x4001eb>, <DisassemblerInsn "add" for 0x4001ee>, <DisassemblerInsn "mov" for 0x4001f2>, <DisassemblerInsn "mov" for 0x4001fa>, <DisassemblerInsn "cmp" for 0x4001fc>, <DisassemblerInsn "mov" for 0x4001ff>, <DisassemblerInsn "jne" for 0x400206>]'}, {'block_Idx': 35, 'blockInsts': '[<DisassemblerInsn "mov" for 0x40045d>, <DisassemblerInsn "mov" for 0x40045f>, <DisassemblerInsn "mov" for 0x400467>, <DisassemblerInsn "mov" for 0x40046a>, <DisassemblerInsn "mov" for 0x400472>, <DisassemblerInsn "add" for 0x400475>, <DisassemblerInsn "mov" for 0x40047c>, <DisassemblerInsn "cmp" for 0x400484>, <DisassemblerInsn "je" for 0x40048b>]'}, {'block_Idx': 114, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400b53>, <DisassemblerInsn "mov" for 0x400b5b>, <DisassemblerInsn "mov" for 0x400b63>, <DisassemblerInsn "mov" for 0x400b6b>, <DisassemblerInsn "mov" for 0x400b70>, <DisassemblerInsn "mov" for 0x400b78>, <DisassemblerInsn "mov" for 0x400b7d>, <DisassemblerInsn "mov" for 0x400b80>, <DisassemblerInsn "add" for 0x400b83>, <DisassemblerInsn "cmp" for 0x400b87>, <DisassemblerInsn "cmove" for 0x400b8b>, <DisassemblerInsn "mov" for 0x400b8f>, <DisassemblerInsn "mov" for 0x400b91>, <DisassemblerInsn "mov" for 0x400b93>, <DisassemblerInsn "mov" for 0x400b95>, <DisassemblerInsn "cmp" for 0x400b98>, <DisassemblerInsn "sete" for 0x400b9f>, <DisassemblerInsn "and" for 0x400ba2>, <DisassemblerInsn "movzx" for 0x400ba4>, <DisassemblerInsn "call" for 0x400ba8>]'}, {'block_Idx': 83, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400a43>, <DisassemblerInsn "mov" for 0x400a4b>, <DisassemblerInsn "mov" for 0x400a53>, <DisassemblerInsn "mov" for 0x400a55>, <DisassemblerInsn "xor" for 0x400a58>, <DisassemblerInsn "lea" for 0x400a5a>, <DisassemblerInsn "call" for 0x400a61>]'}, {'block_Idx': 79, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400311>, <DisassemblerInsn "mov" for 0x400313>, <DisassemblerInsn "mov" for 0x40031a>, <DisassemblerInsn "cmp" for 0x40031f>, <DisassemblerInsn "mov" for 0x400322>, <DisassemblerInsn "jl" for 0x400329>]'}, {'block_Idx': 13, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400156>, <DisassemblerInsn "mov" for 0x40015e>, <DisassemblerInsn "cmp" for 0x400160>, <DisassemblerInsn "mov" for 0x400168>, <DisassemblerInsn "jne" for 0x40016f>]'}, {'block_Idx': 124, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400bad>, <DisassemblerInsn "mov" for 0x400bb0>, <DisassemblerInsn "mov" for 0x400bb8>, <DisassemblerInsn "mov" for 0x400bbf>, <DisassemblerInsn "cmp" for 0x400bc4>, <DisassemblerInsn "mov" for 0x400bc8>, <DisassemblerInsn "je" for 0x400bcc>]'}, {'block_Idx': 141, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400d25>, <DisassemblerInsn "mov" for 0x400d29>, <DisassemblerInsn "pop" for 0x400d33>, <DisassemblerInsn "ret" for 0x400d34>]'}, {'block_Idx': 95, 'blockInsts': '[<DisassemblerInsn "mov" for 0x400348>, <DisassemblerInsn "mov" for 0x40034f>, <DisassemblerInsn "cmp" for 0x400354>, <DisassemblerInsn "mov" for 0x400357>, <DisassemblerInsn "jae" for 0x40035e>]'}, {'block_Idx': 32, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4004ef>, <DisassemblerInsn "mov" for 0x4004f7>, <DisassemblerInsn "cmp" for 0x4004f9>, <DisassemblerInsn "mov" for 0x4004fc>, <DisassemblerInsn "jne" for 0x400503>]'}, {'block_Idx': 22, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4002a1>, <DisassemblerInsn "mov" for 0x4002a9>, <DisassemblerInsn "call" for 0x4002ac>]'}], 'cfg_block_detailed_info': [{'block_Idx': 44, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500028>']}, {'block_Idx': 41, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~dl, byte ptr [rsp + 0xd3]>', '<mov~~eax, dword ptr [rsp + 0xd4]>', '<mov~~dword ptr [rsp + 0xc4], eax>', '<mov~~byte ptr [rsp + 0xcb], dl>', '<and~~dl, 1>', '<movzx~~edx, dl>', '<mov~~dword ptr [rsp + 0xcc], edx>', '<mov~~dword ptr [rcx + 0x90], edx>', '<cmp~~eax, 0>', '<jne~~0x40066d>']}, {'block_Idx': 93, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rax + 0xa8], rcx>', '<mov~~eax, 0xffffffea>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<je~~0x400c5a>']}, {'block_Idx': 15, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x16c], eax>', '<jmp~~0x400c7a>']}, {'block_Idx': 38, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x110]>', '<mov~~eax, dword ptr [rax]>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<jne~~0x40051b>']}, {'block_Idx': 109, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~rax, qword ptr [rsp + 0x130]>', '<mov~~rcx, qword ptr [rsp + 0x180]>', '<mov~~rdx, qword ptr [rsp + 0x118]>', '<mov~~esi, dword ptr [rdx]>', '<mov~~edx, dword ptr [rdi + 0x10]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~r8d, dword ptr [rax]>', '<cmp~~dword ptr [rdi + 0xf4], 2>', '<sete~~al>', '<and~~al, 1>', '<movzx~~r9d, al>', '<call~~0x500040>']}, {'block_Idx': 21, 'blockInsts': ['<jmp~~0x400417>']}, {'block_Idx': 65, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xa0]>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~edx, dword ptr [rsp + 0xc4]>', '<cmp~~edx, 0>', '<setne~~dl>', '<mov~~sil, dl>', '<and~~sil, 1>', '<movzx~~esi, sil>', '<mov~~dword ptr [rax + 0x98], esi>', '<mov~~eax, 1>', '<test~~dl, 1>', '<mov~~qword ptr [rsp + 0x80], rcx>', '<mov~~dword ptr [rsp + 0x88], eax>', '<jne~~0x400825>']}, {'block_Idx': 106, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xfc]>', '<mov~~ecx, dword ptr [rsp + 0x100]>', '<sub~~ecx, 8>', '<sete~~dl>', '<sub~~eax, 8>', '<sete~~al>', '<or~~dl, al>', '<mov~~eax, 7>', '<mov~~ecx, 9>', '<test~~dl, 1>', '<cmovne~~eax, ecx>', '<mov~~dword ptr [rsp + 0x108], eax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x118]>', '<mov~~edi, dword ptr [rsp + 0x108]>', '<mov~~dword ptr [rcx], edi>', '<mov~~qword ptr [rsp + 0xf0], rax>', '<call~~0x500020>']}, {'block_Idx': 45, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x128]>', '<cmp~~dword ptr [rax], 0>', '<jne~~0x40066d>']}, {'block_Idx': 142, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xc]>', '<mov~~dword ptr [rsp + 0x16c], eax>', '<mov~~eax, dword ptr [rsp + 0x16c]>', '<add~~rsp, 0x188>', '<ret~~>']}, {'block_Idx': 129, 'blockInsts': ['<mov~~rdx, rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rax + 0xd8], rdx>', '<mov~~ecx, 0xfffffff4>', '<xor~~eax, eax>', '<cmp~~rdx, 0>', '<mov~~dword ptr [rsp + 0x34], ecx>', '<mov~~dword ptr [rsp + 0x16c], eax>', '<jne~~0x400c7a>']}, {'block_Idx': 29, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~dword ptr [rsp + 0x100], ecx>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500010>']}, {'block_Idx': 102, 'blockInsts': ['<push~~rax>', '<mov~~qword ptr [rsp], rdi>', '<add~~rdi, 0xa0>', '<call~~0x500058>']}, {'block_Idx': 18, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x148]>', '<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~dl, byte ptr [rsp + 0x147]>', '<mov~~byte ptr [rsp + 0x10f], dl>', '<and~~dl, 1>', '<movzx~~edx, dl>', '<mov~~rsi, rcx>', '<add~~rsi, 0x8c>', '<mov~~qword ptr [rsp + 0x110], rsi>', '<mov~~dword ptr [rcx + 0x8c], edx>', '<mov~~rdx, rcx>', '<add~~rdx, 0x28>', '<mov~~qword ptr [rsp + 0x118], rdx>', '<cmp~~dword ptr [rcx + 0x28], -1>', '<mov~~dword ptr [rsp + 0x120], eax>', '<jne~~0x400417>']}, {'block_Idx': 46, 'blockInsts': ['<mov~~sil, byte ptr [rsp + 0xcb]>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x118]>', '<mov~~ecx, dword ptr [rcx]>', '<cmp~~ecx, dword ptr [rax + 0x20]>', '<setne~~cl>', '<and~~cl, 1>', '<movzx~~edx, cl>', '<mov~~dword ptr [rax + 0x94], edx>', '<add~~rax, 0x90>', '<xor~~ecx, ecx>', '<test~~sil, 1>', '<mov~~rsi, rax>', '<mov~~qword ptr [rsp + 0xa8], rsi>', '<mov~~dword ptr [rsp + 0xb0], edx>', '<mov~~byte ptr [rsp + 0xb7], cl>', '<mov~~qword ptr [rsp + 0xb8], rax>', '<jne~~0x4007a2>']}, {'block_Idx': 110, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x180]>', '<mov~~eax, dword ptr [rax]>', '<mov~~dword ptr [rsp + 0x120], eax>', '<mov~~eax, dword ptr [rsp + 0x120]>', '<cmp~~eax, 1>', '<jne~~0x400440>']}, {'block_Idx': 87, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x128]>', '<mov~~eax, 8>', '<cmp~~dword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0x108], eax>', '<jne~~0x4003c2>']}, {'block_Idx': 24, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x160]>', '<cmp~~dword ptr [rax], 1>', '<jne~~0x40046a>']}, {'block_Idx': 122, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<call~~0x500050>']}, {'block_Idx': 68, 'blockInsts': ['<jmp~~0x400935>']}, {'block_Idx': 53, 'blockInsts': ['<cmp~~eax, 0>', '<jne~~0x4004ef>']}, {'block_Idx': 96, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~eax, dword ptr [rsp + 0x34]>', '<mov~~dword ptr [rsp + 0xc], eax>', '<call~~0x400c89>']}, {'block_Idx': 30, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~dword ptr [rax + 0x10], ecx>', '<mov~~rax, qword ptr [rsp + 0x160]>', '<cmp~~dword ptr [rax], 1>', '<jne~~0x40046a>']}, {'block_Idx': 39, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0x100]>', '<mov~~dword ptr [rsp + 0xfc], eax>', '<call~~0x500018>']}, {'block_Idx': 103, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x20]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x400b49>']}, {'block_Idx': 75, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x118]>', '<mov~~rcx, qword ptr [rsp + 0x160]>', '<mov~~edi, dword ptr [rcx]>', '<mov~~edx, dword ptr [rax]>', '<xor~~esi, esi>', '<lea~~rcx, [rip + 0x1664]>', '<call~~0x500030>']}, {'block_Idx': 69, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x80]>', '<mov~~eax, dword ptr [rsp + 0x88]>', '<mov~~dword ptr [rdx + 0xf4], 1>', '<mov~~dl, 1>', '<mov~~byte ptr [rsp + 0x5f], dl>', '<mov~~qword ptr [rsp + 0x60], rcx>', '<mov~~dword ptr [rsp + 0x6c], eax>', '<jmp~~0x4008fb>']}, {'block_Idx': 61, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xd8]>', '<mov~~edi, dword ptr [rax]>', '<call~~0x500010>']}, {'block_Idx': 57, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x118]>', '<mov~~ecx, dword ptr [rcx]>', '<cmp~~ecx, dword ptr [rax + 0x20]>', '<setne~~cl>', '<and~~cl, 1>', '<movzx~~ecx, cl>', '<mov~~dword ptr [rax + 0x94], ecx>', '<add~~rax, 0x90>', '<xor~~ecx, ecx>', '<mov~~byte ptr [rsp + 0xb7], cl>', '<mov~~qword ptr [rsp + 0xb8], rax>', '<jmp~~0x4007a2>']}, {'block_Idx': 60, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x7c]>', '<mov~~rcx, qword ptr [rsp + 0x70]>', '<mov~~dl, byte ptr [rsp + 0x7b]>', '<test~~dl, 1>', '<mov~~qword ptr [rsp + 0x80], rcx>', '<mov~~dword ptr [rsp + 0x88], eax>', '<jne~~0x400825>']}, {'block_Idx': 19, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x148]>', '<mov~~dl, byte ptr [rsp + 0x10f]>', '<mov~~cl, byte ptr [rsp + 0x127]>', '<or~~cl, dl>', '<test~~cl, 1>', '<mov~~dword ptr [rsp + 0x120], eax>', '<jne~~0x4002a1>']}, {'block_Idx': 80, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x9c]>', '<mov~~rcx, qword ptr [rsp + 0x178]>', '<add~~rcx, 0xf4>', '<mov~~qword ptr [rsp + 0x50], rcx>', '<cmp~~eax, 0>', '<je~~0x4008a0>']}, {'block_Idx': 10, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x150]>', '<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x1f23]>', '<mov~~al, 0>', '<call~~0x500008>']}, {'block_Idx': 36, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x128]>', '<xor~~eax, eax>', '<cmp~~dword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<je~~0x40054a>']}, {'block_Idx': 8, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~dword ptr [rsp + 0x15c], eax>', '<mov~~rdx, rcx>', '<add~~rdx, 0x78>', '<mov~~qword ptr [rsp + 0x160], rdx>', '<mov~~dword ptr [rcx + 0x78], eax>', '<add~~eax, -0x21>', '<cmp~~eax, -0x20>', '<jae~~0x400100>']}, {'block_Idx': 99, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rax + 0xb0], rcx>', '<mov~~eax, 0xffffffea>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<je~~0x400c5a>']}, {'block_Idx': 127, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rax + 0xd0], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<je~~0x400c5a>']}, {'block_Idx': 48, 'blockInsts': ['<mov~~edi, dword ptr [rsp + 0xfc]>', '<mov~~dword ptr [rsp + 0xf8], eax>', '<call~~0x500018>']}, {'block_Idx': 27, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500010>']}, {'block_Idx': 20, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x120]>', '<cmp~~eax, 1>', '<jne~~0x400440>']}, {'block_Idx': 42, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, rax>', '<add~~rcx, 0x20>', '<mov~~qword ptr [rsp + 0xd8], rcx>', '<mov~~edi, dword ptr [rax + 0x20]>', '<call~~0x500028>']}, {'block_Idx': 118, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<call~~0x500048>']}, {'block_Idx': 16, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x150]>', '<mov~~rax, qword ptr [rsp + 0x170]>', '<mov~~rax, qword ptr [rax]>', '<cmp~~rax, qword ptr [rcx]>', '<setne~~al>', '<mov~~byte ptr [rsp + 0x14f], al>', '<mov~~rdx, qword ptr [rsp + 0x178]>', '<mov~~al, byte ptr [rsp + 0x14e]>', '<mov~~cl, byte ptr [rsp + 0x14f]>', '<movzx~~esi, cl>', '<and~~esi, 1>', '<mov~~dword ptr [rdx + 0x84], esi>', '<or~~al, cl>', '<mov~~byte ptr [rsp + 0x127], al>', '<and~~al, 1>', '<movzx~~eax, al>', '<mov~~rcx, rdx>', '<add~~rcx, 0x88>', '<mov~~qword ptr [rsp + 0x128], rcx>', '<mov~~dword ptr [rdx + 0x88], eax>', '<mov~~rax, rdx>', '<add~~rax, 0x14>', '<mov~~qword ptr [rsp + 0x130], rax>', '<mov~~ecx, dword ptr [rdx + 0x14]>', '<mov~~rax, rdx>', '<add~~rax, 0x24>', '<mov~~qword ptr [rsp + 0x138], rax>', '<mov~~al, 1>', '<cmp~~ecx, dword ptr [rdx + 0x24]>', '<mov~~byte ptr [rsp + 0x147], al>', '<jne~~0x40021e>']}, {'block_Idx': 108, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x18]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x400bd2>']}, {'block_Idx': 2, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~rcx, rdi>', '<add~~rcx, 0x74>', '<mov~~qword ptr [rsp + 0x180], rcx>', '<mov~~dword ptr [rdi + 0x74], eax>', '<add~~eax, -0x21>', '<cmp~~eax, -0x20>', '<jae~~0x400080>']}, {'block_Idx': 100, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0xf0]>', '<mov~~rcx, rax>', '<mov~~esi, 0x30>', '<lea~~rdx, [rip + 0x1c30]>', '<mov~~al, 0>', '<call~~0x500008>']}, {'block_Idx': 97, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x28]>', '<mov~~rax, qword ptr [rsp + 0x110]>', '<mov~~eax, dword ptr [rax]>', '<mov~~qword ptr [rsp + 0x40], rcx>', '<mov~~dword ptr [rsp + 0x4c], eax>', '<mov~~rcx, qword ptr [rsp + 0x40]>', '<mov~~eax, dword ptr [rsp + 0x4c]>', '<mov~~qword ptr [rsp + 0x20], rcx>', '<cmp~~eax, 0>', '<je~~0x400a23>']}, {'block_Idx': 3, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x170]>', '<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rax]>', '<mov~~esi, 0x10>', '<lea~~rdx, [rip + 0x1f80]>', '<mov~~al, 0>', '<call~~0x500008>']}, {'block_Idx': 120, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rax + 0xc0], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<je~~0x400c5a>']}, {'block_Idx': 82, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~rax, qword ptr [rsp + 0x160]>', '<mov~~rdx, rcx>', '<add~~rdx, 0x20>', '<mov~~qword ptr [rsp + 0x10], rdx>', '<mov~~edi, dword ptr [rcx + 0x20]>', '<mov~~esi, dword ptr [rax]>', '<mov~~edx, 0x400>', '<call~~0x500038>']}, {'block_Idx': 59, 'blockInsts': ['<mov~~rsi, qword ptr [rsp + 0x178]>', '<mov~~dl, byte ptr [rsp + 0x8f]>', '<mov~~rcx, qword ptr [rsp + 0x90]>', '<mov~~eax, dword ptr [rsp + 0x98]>', '<mov~~dword ptr [rsi + 0xf4], 0>', '<mov~~byte ptr [rsp + 0x5f], dl>', '<mov~~qword ptr [rsp + 0x60], rcx>', '<mov~~dword ptr [rsp + 0x6c], eax>', '<mov~~eax, dword ptr [rsp + 0xc4]>', '<mov~~dl, byte ptr [rsp + 0x5f]>', '<mov~~rcx, qword ptr [rsp + 0x60]>', '<mov~~esi, dword ptr [rsp + 0x6c]>', '<cmp~~esi, 0>', '<sete~~sil>', '<and~~dl, sil>', '<test~~dl, 1>', '<mov~~rdx, rcx>', '<mov~~qword ptr [rsp + 0x38], rdx>', '<mov~~qword ptr [rsp + 0x40], rcx>', '<mov~~dword ptr [rsp + 0x4c], eax>', '<jne~~0x4009c9>']}, {'block_Idx': 4, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, rax>', '<add~~rcx, 0x18>', '<mov~~qword ptr [rsp + 0x150], rcx>', '<mov~~rdi, qword ptr [rax + 0x18]>', '<call~~0x500000>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x188>', '<mov~~qword ptr [rsp + 0x178], rdi>', '<mov~~rax, rdi>', '<add~~rax, 8>', '<mov~~qword ptr [rsp + 0x170], rax>', '<mov~~rdi, qword ptr [rdi + 8]>', '<call~~0x500000>']}, {'block_Idx': 7, 'blockInsts': ['<mov~~eax, 0xffffffea>', '<mov~~dword ptr [rsp + 0x16c], eax>', '<jmp~~0x400c7a>']}, {'block_Idx': 56, 'blockInsts': ['<jmp~~0x400639>']}, {'block_Idx': 78, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x118]>', '<mov~~dword ptr [rax], ecx>', '<mov~~rax, qword ptr [rsp + 0x110]>', '<mov~~eax, dword ptr [rax]>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<jne~~0x40051b>']}, {'block_Idx': 28, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, rax>', '<add~~rcx, 0xf0>', '<mov~~qword ptr [rsp + 0xe8], rcx>', '<cmp~~dword ptr [rax + 0xf0], 0>', '<je~~0x4004ef>']}, {'block_Idx': 55, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x110]>', '<cmp~~ecx, 0>', '<sete~~cl>', '<mov~~eax, dword ptr [rax]>', '<mov~~byte ptr [rsp + 0xd3], cl>', '<mov~~dword ptr [rsp + 0xd4], eax>', '<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~dl, byte ptr [rsp + 0xd3]>', '<mov~~eax, dword ptr [rsp + 0xd4]>', '<mov~~dword ptr [rsp + 0xc4], eax>', '<mov~~byte ptr [rsp + 0xcb], dl>', '<and~~dl, 1>', '<movzx~~edx, dl>', '<mov~~dword ptr [rsp + 0xcc], edx>', '<mov~~dword ptr [rcx + 0x90], edx>', '<cmp~~eax, 0>', '<jne~~0x40066d>']}, {'block_Idx': 86, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x118]>', '<mov~~edi, dword ptr [rsp + 0x108]>', '<mov~~dword ptr [rcx], edi>', '<mov~~qword ptr [rsp + 0xf0], rax>', '<call~~0x500020>']}, {'block_Idx': 63, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~eax, dword ptr [rcx + 0x10]>', '<cmp~~eax, dword ptr [rcx + 0x20]>', '<setne~~al>', '<and~~al, 1>', '<movzx~~eax, al>', '<mov~~dword ptr [rcx + 0x94], eax>', '<add~~rcx, 0x90>', '<mov~~qword ptr [rsp + 0xa8], rcx>', '<mov~~dword ptr [rsp + 0xb0], eax>', '<jmp~~0x4006cc>']}, {'block_Idx': 72, 'blockInsts': ['<jmp~~0x40085a>']}, {'block_Idx': 77, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xc4]>', '<mov~~dl, byte ptr [rsp + 0x5f]>', '<mov~~rcx, qword ptr [rsp + 0x60]>', '<mov~~esi, dword ptr [rsp + 0x6c]>', '<cmp~~esi, 0>', '<sete~~sil>', '<and~~dl, sil>', '<test~~dl, 1>', '<mov~~rdx, rcx>', '<mov~~qword ptr [rsp + 0x38], rdx>', '<mov~~qword ptr [rsp + 0x40], rcx>', '<mov~~dword ptr [rsp + 0x4c], eax>', '<jne~~0x4009c9>']}, {'block_Idx': 67, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x40]>', '<mov~~eax, dword ptr [rsp + 0x4c]>', '<mov~~qword ptr [rsp + 0x20], rcx>', '<cmp~~eax, 0>', '<je~~0x400a23>']}, {'block_Idx': 101, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0xfc]>', '<mov~~ecx, dword ptr [rsp + 0x100]>', '<sub~~ecx, 7>', '<sete~~cl>', '<sub~~eax, 7>', '<sete~~al>', '<or~~cl, al>', '<mov~~eax, 8>', '<test~~cl, 1>', '<mov~~dword ptr [rsp + 0x108], eax>', '<jne~~0x40038f>']}, {'block_Idx': 51, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x128]>', '<mov~~rax, qword ptr [rsp + 0xa8]>', '<mov~~ecx, dword ptr [rsp + 0xb0]>', '<mov~~dword ptr [rsp + 0x9c], ecx>', '<mov~~qword ptr [rsp + 0xa0], rax>', '<mov~~cl, 1>', '<cmp~~dword ptr [rdx], 0>', '<mov~~byte ptr [rsp + 0xb7], cl>', '<mov~~qword ptr [rsp + 0xb8], rax>', '<jne~~0x4007a2>']}, {'block_Idx': 73, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x118]>', '<mov~~rdx, qword ptr [rsp + 0x160]>', '<mov~~rcx, qword ptr [rsp + 0x180]>', '<mov~~rsi, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rsp + 0x28], rsi>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~edi, dword ptr [rdx]>', '<cmp~~ecx, edi>', '<cmovg~~edi, ecx>', '<mov~~edx, dword ptr [rax]>', '<xor~~esi, esi>', '<lea~~rcx, [rip + 0x16cc]>', '<call~~0x500030>']}, {'block_Idx': 64, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xa0]>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~dword ptr [rax + 0x98], 0>', '<mov~~dl, 1>', '<xor~~eax, eax>', '<mov~~byte ptr [rsp + 0x8f], dl>', '<mov~~qword ptr [rsp + 0x90], rcx>', '<mov~~dword ptr [rsp + 0x98], eax>', '<jmp~~0x4008c6>']}, {'block_Idx': 98, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rax + 0xb8], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<je~~0x400c5a>']}, {'block_Idx': 9, 'blockInsts': ['<mov~~eax, dword ptr [rsp + 0x16c]>', '<add~~rsp, 0x188>', '<ret~~>']}, {'block_Idx': 50, 'blockInsts': ['<mov~~al, byte ptr [rsp + 0xcb]>', '<test~~al, 1>', '<jne~~0x4005f9>']}, {'block_Idx': 23, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~edi, dword ptr [rax + 0x10]>', '<call~~0x500010>']}, {'block_Idx': 105, 'blockInsts': ['<jmp~~0x4003c2>']}, {'block_Idx': 52, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~eax, dword ptr [rsp + 0xcc]>', '<mov~~rsi, qword ptr [rsp + 0xe8]>', '<mov~~dl, byte ptr [rsp + 0xb7]>', '<mov~~rcx, qword ptr [rsp + 0xb8]>', '<mov~~qword ptr [rsp + 0x70], rcx>', '<mov~~byte ptr [rsp + 0x7b], dl>', '<mov~~esi, dword ptr [rsi]>', '<xor~~eax, 1>', '<mov~~dword ptr [rsp + 0x7c], eax>', '<mov~~dword ptr [rdi + 0x98], eax>', '<cmp~~esi, 0>', '<mov~~byte ptr [rsp + 0x8f], dl>', '<mov~~qword ptr [rsp + 0x90], rcx>', '<mov~~dword ptr [rsp + 0x98], eax>', '<je~~0x4008c6>']}, {'block_Idx': 58, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0xe8]>', '<cmp~~dword ptr [rax], 0>', '<jne~~0x400752>']}, {'block_Idx': 74, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, rax>', '<add~~rcx, 0x94>', '<mov~~qword ptr [rsp + 0x18], rcx>', '<cmp~~dword ptr [rax + 0x94], 0>', '<je~~0x400a8b>']}, {'block_Idx': 88, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xa0]>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<mov~~dword ptr [rax], 3>', '<mov~~dl, 1>', '<xor~~eax, eax>', '<mov~~byte ptr [rsp + 0x5f], dl>', '<mov~~qword ptr [rsp + 0x60], rcx>', '<mov~~dword ptr [rsp + 0x6c], eax>', '<jmp~~0x4008fb>']}, {'block_Idx': 37, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x118]>', '<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~eax, dword ptr [rsp + 0xe4]>', '<mov~~ecx, dword ptr [rcx + 0x10]>', '<cmp~~ecx, dword ptr [rdx]>', '<setne~~cl>', '<mov~~byte ptr [rsp + 0xd3], cl>', '<mov~~dword ptr [rsp + 0xd4], eax>', '<jmp~~0x40059b>']}, {'block_Idx': 62, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0xf8]>', '<mov~~edi, dword ptr [rsp + 0xfc]>', '<mov~~edx, eax>', '<mov~~eax, dword ptr [rsp + 0x100]>', '<cmp~~ecx, edx>', '<cmovg~~edi, eax>', '<call~~0x500018>']}, {'block_Idx': 17, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<cmp~~dword ptr [rax + 0x4c], 0>', '<setne~~al>', '<mov~~byte ptr [rsp + 0x147], al>', '<mov~~eax, dword ptr [rsp + 0x148]>', '<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~dl, byte ptr [rsp + 0x147]>', '<mov~~byte ptr [rsp + 0x10f], dl>', '<and~~dl, 1>', '<movzx~~edx, dl>', '<mov~~rsi, rcx>', '<add~~rsi, 0x8c>', '<mov~~qword ptr [rsp + 0x110], rsi>', '<mov~~dword ptr [rcx + 0x8c], edx>', '<mov~~rdx, rcx>', '<add~~rdx, 0x28>', '<mov~~qword ptr [rsp + 0x118], rdx>', '<cmp~~dword ptr [rcx + 0x28], -1>', '<mov~~dword ptr [rsp + 0x120], eax>', '<jne~~0x400417>']}, {'block_Idx': 117, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x128]>', '<xor~~eax, eax>', '<cmp~~dword ptr [rcx], 0>', '<mov~~dword ptr [rsp + 0x16c], eax>', '<je~~0x400c7a>']}, {'block_Idx': 40, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0xe8]>', '<xor~~eax, eax>', '<mov~~cl, al>', '<xor~~eax, eax>', '<cmp~~dword ptr [rdx], 0>', '<mov~~byte ptr [rsp + 0xd3], cl>', '<mov~~dword ptr [rsp + 0xd4], eax>', '<je~~0x40059b>']}, {'block_Idx': 89, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0xa0]>', '<mov~~rax, qword ptr [rsp + 0x50]>', '<mov~~dword ptr [rax], 4>', '<mov~~dl, 1>', '<xor~~eax, eax>', '<mov~~byte ptr [rsp + 0x5f], dl>', '<mov~~qword ptr [rsp + 0x60], rcx>', '<mov~~dword ptr [rsp + 0x6c], eax>', '<jmp~~0x4008fb>']}, {'block_Idx': 113, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x110]>', '<cmp~~dword ptr [rax], 0>', '<je~~0x400c0d>']}, {'block_Idx': 33, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x128]>', '<cmp~~dword ptr [rax], 0>', '<jne~~0x4004ef>']}, {'block_Idx': 90, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rax + 0xa0], rcx>', '<mov~~eax, 0xffffffea>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<je~~0x400c5a>']}, {'block_Idx': 76, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x70]>', '<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~dword ptr [rcx + 0xf4], 2>', '<mov~~qword ptr [rsp + 0x38], rax>', '<mov~~rax, qword ptr [rsp + 0x118]>', '<mov~~rdx, qword ptr [rsp + 0x160]>', '<mov~~rcx, qword ptr [rsp + 0x180]>', '<mov~~rsi, qword ptr [rsp + 0x38]>', '<mov~~qword ptr [rsp + 0x28], rsi>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~edi, dword ptr [rdx]>', '<cmp~~ecx, edi>', '<cmovg~~edi, ecx>', '<mov~~edx, dword ptr [rax]>', '<xor~~esi, esi>', '<lea~~rcx, [rip + 0x16cc]>', '<call~~0x500030>']}, {'block_Idx': 11, 'blockInsts': ['<mov~~edx, dword ptr [rsp + 0x15c]>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x180]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~dword ptr [rsp + 0x148], ecx>', '<cmp~~ecx, edx>', '<setg~~sil>', '<mov~~byte ptr [rsp + 0x14e], sil>', '<cmp~~ecx, edx>', '<mov~~edi, ecx>', '<cmovg~~edi, edx>', '<mov~~dword ptr [rax + 0x7c], edi>', '<and~~sil, 1>', '<movzx~~esi, sil>', '<mov~~dword ptr [rax + 0x80], esi>', '<cmp~~ecx, edx>', '<setl~~al>', '<cmp~~ecx, edx>', '<mov~~byte ptr [rsp + 0x14f], al>', '<jne~~0x400191>']}, {'block_Idx': 66, 'blockInsts': ['<jmp~~0x400951>']}, {'block_Idx': 14, 'blockInsts': ['<mov~~rdx, qword ptr [rsp + 0x178]>', '<mov~~al, byte ptr [rsp + 0x14e]>', '<mov~~cl, byte ptr [rsp + 0x14f]>', '<movzx~~esi, cl>', '<and~~esi, 1>', '<mov~~dword ptr [rdx + 0x84], esi>', '<or~~al, cl>', '<mov~~byte ptr [rsp + 0x127], al>', '<and~~al, 1>', '<movzx~~eax, al>', '<mov~~rcx, rdx>', '<add~~rcx, 0x88>', '<mov~~qword ptr [rsp + 0x128], rcx>', '<mov~~dword ptr [rdx + 0x88], eax>', '<mov~~rax, rdx>', '<add~~rax, 0x14>', '<mov~~qword ptr [rsp + 0x130], rax>', '<mov~~ecx, dword ptr [rdx + 0x14]>', '<mov~~rax, rdx>', '<add~~rax, 0x24>', '<mov~~qword ptr [rsp + 0x138], rax>', '<mov~~al, 1>', '<cmp~~ecx, dword ptr [rdx + 0x24]>', '<mov~~byte ptr [rsp + 0x147], al>', '<jne~~0x40021e>']}, {'block_Idx': 35, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~dword ptr [rax + 0x20], ecx>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, rax>', '<add~~rcx, 0xf0>', '<mov~~qword ptr [rsp + 0xe8], rcx>', '<cmp~~dword ptr [rax + 0xf0], 0>', '<je~~0x4004ef>']}, {'block_Idx': 114, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x178]>', '<mov~~rax, qword ptr [rsp + 0x138]>', '<mov~~rcx, qword ptr [rsp + 0x160]>', '<mov~~rsi, qword ptr [rsp + 0x10]>', '<mov~~rdx, qword ptr [rsp + 0x118]>', '<mov~~r8, qword ptr [rsp + 0x20]>', '<mov~~r9d, dword ptr [r8]>', '<mov~~r8, rdi>', '<add~~r8, 0x10>', '<cmp~~r9d, 0>', '<cmove~~rdx, r8>', '<mov~~edx, dword ptr [rdx]>', '<mov~~esi, dword ptr [rsi]>', '<mov~~ecx, dword ptr [rcx]>', '<mov~~r8d, dword ptr [rax]>', '<cmp~~dword ptr [rdi + 0xf4], 4>', '<sete~~al>', '<and~~al, 1>', '<movzx~~r9d, al>', '<call~~0x500040>']}, {'block_Idx': 83, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~rcx, qword ptr [rsp + 0x160]>', '<mov~~edi, dword ptr [rcx]>', '<mov~~edx, dword ptr [rax + 0x20]>', '<xor~~esi, esi>', '<lea~~rcx, [rip + 0x1610]>', '<call~~0x500030>']}, {'block_Idx': 79, 'blockInsts': ['<mov~~ecx, eax>', '<mov~~dword ptr [rsp + 0x104], ecx>', '<mov~~eax, 6>', '<cmp~~ecx, 3>', '<mov~~dword ptr [rsp + 0x108], eax>', '<jl~~0x4003c2>']}, {'block_Idx': 13, 'blockInsts': ['<mov~~rcx, qword ptr [rsp + 0x178]>', '<mov~~al, 1>', '<cmp~~qword ptr [rcx + 0xe8], 0>', '<mov~~byte ptr [rsp + 0x14f], al>', '<jne~~0x400191>']}, {'block_Idx': 124, 'blockInsts': ['<mov~~rcx, rax>', '<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~qword ptr [rax + 0xc8], rcx>', '<mov~~eax, 0xfffffff4>', '<cmp~~rcx, 0>', '<mov~~dword ptr [rsp + 0x34], eax>', '<je~~0x400c5a>']}, {'block_Idx': 141, 'blockInsts': ['<mov~~rdi, qword ptr [rsp]>', '<mov~~dword ptr [rdi + 0xf0], 0>', '<pop~~rax>', '<ret~~>']}, {'block_Idx': 95, 'blockInsts': ['<mov~~ecx, dword ptr [rsp + 0x104]>', '<mov~~eax, 9>', '<cmp~~ecx, 5>', '<mov~~dword ptr [rsp + 0x108], eax>', '<jae~~0x4003c2>']}, {'block_Idx': 32, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x110]>', '<mov~~eax, dword ptr [rax]>', '<cmp~~eax, 0>', '<mov~~dword ptr [rsp + 0xe4], eax>', '<jne~~0x40051b>']}, {'block_Idx': 22, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x178]>', '<mov~~edi, dword ptr [rax + 0x10]>', '<call~~0x500010>']}], 'cfg_edge_info': [(32, 37), (35, 33), (58, 65), (90, 97), (89, 77), (73, 90), (101, 106), (53, 32), (113, 117), (40, 41), (129, 9), (103, 109), (11, 14), (74, 82), (100, 110), (124, 113), (97, 74), (18, 19), (33, 38), (98, 103), (95, 86), (59, 66), (108, 114), (8, 11), (2, 4), (65, 72), (80, 88), (78, 36), (98, 96), (50, 56), (110, 24), (14, 17), (60, 69), (46, 52), (57, 52), (106, 100), (120, 108), (15, 9), (55, 45), (16, 17), (93, 74), (0, 2), (114, 124), (10, 15), (13, 14), (30, 27), (45, 46), (64, 59), (35, 32), (79, 87), (90, 96), (51, 52), (101, 105), (52, 60), (103, 108), (96, 142), (13, 16), (7, 9), (53, 61), (117, 9), (76, 90), (127, 117), (108, 113), (120, 96), (124, 96), (19, 22), (27, 35), (45, 50), (77, 66), (41, 46), (3, 7), (20, 23), (67, 74), (46, 51), (141, 142), (87, 86), (60, 68), (40, 44), (87, 95), (80, 89), (78, 37), (39, 48), (36, 40), (99, 96), (32, 36), (58, 64), (4, 8), (51, 58), (14, 18), (23, 30), (95, 101), (61, 78), (17, 20), (65, 69), (63, 51), (55, 46), (48, 62), (11, 13), (127, 96), (37, 41), (56, 63), (38, 42), (52, 59), (44, 55), (8, 10), (113, 118), (2, 3), (74, 83), (99, 82), (30, 28), (93, 96), (68, 76), (24, 27), (97, 75), (18, 20), (59, 67), (69, 77), (110, 23), (22, 29), (19, 21), (36, 37), (28, 33), (75, 93), (33, 32), (41, 45), (50, 57), (38, 37), (42, 53), (82, 98), (118, 127), (88, 77), (117, 122), (83, 99), (129, 96), (16, 18), (77, 67), (79, 86), (96, 102), (72, 80), (62, 79), (67, 75), (29, 39), (17, 19), (86, 100), (122, 129), (109, 120)], 'cdg_edge_info': [(35, 33), (50, 52), (58, 65), (53, 78), (19, 110), (90, 97), (101, 106), (113, 117), (8, 9), (129, 9), (103, 109), (77, 90), (38, 53), (11, 14), (74, 82), (124, 113), (19, 39), (33, 38), (18, 19), (97, 74), (98, 103), (19, 48), (50, 63), (108, 114), (8, 11), (60, 76), (2, 4), (80, 88), (78, 36), (103, 120), (55, 52), (8, 96), (14, 17), (60, 69), (120, 108), (55, 45), (113, 142), (16, 17), (113, 96), (93, 74), (13, 14), (45, 46), (30, 27), (50, 51), (19, 100), (79, 87), (51, 52), (52, 60), (103, 108), (13, 16), (19, 29), (53, 61), (117, 9), (127, 117), (108, 113), (19, 22), (45, 50), (46, 51), (40, 44), (60, 77), (87, 95), (80, 89), (78, 37), (8, 15), (19, 79), (2, 8), (36, 40), (45, 52), (103, 142), (58, 64), (103, 96), (51, 58), (14, 18), (95, 101), (59, 90), (65, 69), (55, 46), (11, 13), (30, 35), (74, 99), (99, 98), (38, 42), (52, 59), (110, 30), (113, 118), (8, 10), (2, 3), (113, 127), (74, 83), (65, 80), (99, 82), (58, 59), (97, 75), (58, 77), (97, 93), (110, 23), (108, 124), (36, 37), (108, 142), (108, 96), (117, 129), (46, 142), (46, 96), (50, 57), (38, 37), (2, 7), (8, 142), (40, 55), (129, 142), (117, 122), (129, 96), (16, 18), (19, 62), (17, 19), (2, 9), (60, 90), (74, 98)], 'ddg_edge_info': [(55, 57), (89, 77), (16, 93), (88, 109), (100, 74), (118, 122), (99, 109), (59, 82), (100, 83), (0, 23), (100, 110), (69, 113), (15, 142), (50, 127), (62, 101), (51, 64), (22, 37), (114, 129), (55, 52), (16, 79), (17, 53), (100, 69), (118, 117), (17, 62), (29, 27), (88, 113), (77, 76), (99, 113), (100, 78), (42, 82), (69, 108), (69, 117), (7, 142), (44, 51), (62, 87), (22, 23), (23, 77), (93, 74), (4, 82), (114, 124), (17, 39), (100, 55), (55, 65), (17, 48), (76, 97), (100, 64), (99, 108), (88, 108), (99, 117), (88, 117), (100, 82), (18, 110), (42, 77), (40, 58), (27, 88), (50, 90), (69, 103), (50, 99), (39, 62), (27, 97), (0, 98), (122, 96), (35, 46), (4, 77), (95, 106), (16, 51), (76, 83), (100, 50), (16, 78), (100, 59), (16, 87), (88, 103), (99, 103), (100, 77), (29, 44), (42, 63), (27, 74), (61, 76), (80, 89), (27, 83), (39, 48), (18, 114), (82, 117), (0, 93), (23, 58), (4, 63), (114, 96), (23, 76), (16, 55), (87, 106), (65, 69), (100, 36), (55, 46), (17, 29), (10, 142), (100, 45), (76, 96), (100, 63), (27, 60), (69, 75), (42, 58), (27, 69), (27, 78), (61, 80), (18, 109), (42, 76), (113, 127), (61, 89), (8, 83), (4, 58), (0, 106), (23, 80), (4, 76), (23, 89), (88, 75), (36, 37), (100, 40), (76, 82), (97, 114), (117, 129), (100, 58), (42, 44), (27, 55), (61, 57), (42, 53), (27, 64), (82, 98), (61, 75), (27, 82), (0, 65), (18, 113), (42, 80), (0, 74), (0, 83), (83, 99), (4, 44), (23, 57), (16, 18), (23, 75), (35, 40), (16, 36), (4, 80), (16, 45), (2, 110), (35, 58), (100, 35), (100, 44), (100, 53), (109, 120), (89, 114), (109, 129), (27, 50), (61, 52), (27, 59), (42, 57), (79, 106), (101, 106), (27, 77), (63, 98), (42, 75), (0, 69), (8, 82), (2, 11), (4, 30), (23, 52), (4, 57), (124, 113), (35, 44), (100, 30), (89, 109), (27, 36), (27, 45), (18, 76), (59, 114), (98, 96), (0, 37), (42, 52), (27, 63), (0, 46), (42, 61), (63, 93), (0, 55), (60, 69), (0, 64), (23, 38), (44, 88), (4, 52), (124, 117), (44, 97), (16, 35), (2, 109), (89, 113), (27, 40), (16, 129), (59, 109), (61, 51), (27, 58), (90, 96), (4, 11), (0, 59), (52, 60), (23, 33), (44, 65), (23, 42), (44, 74), (4, 38), (13, 16), (44, 83), (122, 142), (16, 30), (127, 117), (109, 96), (120, 96), (59, 77), (97, 103), (18, 57), (89, 108), (61, 37), (11, 18), (0, 18), (27, 35), (89, 117), (17, 98), (0, 27), (59, 113), (18, 75), (27, 44), (82, 96), (44, 60), (23, 37), (44, 69), (4, 33), (93, 83), (114, 142), (78, 76), (0, 4), (89, 103), (63, 51), (0, 13), (48, 62), (17, 93), (0, 22), (59, 108), (100, 127), (44, 46), (4, 10), (52, 59), (4, 19), (44, 55), (44, 64), (44, 82), (2, 76), (93, 96), (93, 114), (18, 38), (16, 114), (17, 79), (0, 8), (0, 17), (8, 30), (29, 62), (0, 35), (44, 50), (44, 59), (62, 95), (0, 120), (93, 82), (0, 129), (89, 75), (16, 100), (76, 114), (16, 109), (29, 39), (0, 3), (100, 90), (29, 48), (77, 97), (100, 99), (50, 98), (44, 45), (19, 110), (44, 63), (39, 106), (0, 124), (114, 118), (51, 80), (114, 127), (51, 89), (55, 50), (18, 19), (55, 77), (59, 75), (100, 76), (76, 109), (18, 37), (8, 11), (17, 78), (80, 88), (40, 52), (11, 16), (0, 16), (29, 61), (50, 93), (42, 89), (8, 114), (39, 101), (106, 100), (114, 113), (4, 89), (114, 122), (55, 45), (55, 63), (16, 90), (17, 55), (117, 142), (16, 99), (76, 113), (100, 80), (0, 2), (69, 74), (100, 89), (69, 83), (100, 98), (61, 88), (10, 15), (61, 97), (0, 96), (51, 52), (0, 114), (4, 75), (23, 88), (114, 117), (23, 97), (88, 74), (88, 83), (118, 96), (76, 90), (100, 57), (76, 108), (100, 75), (109, 142), (76, 117), (61, 65), (29, 42), (3, 142), (98, 114), (61, 74), (61, 83), (42, 88), (0, 82), (42, 97), (63, 129), (82, 142), (23, 65), (3, 7), (0, 109), (23, 74), (0, 118), (51, 65), (23, 83), (4, 88), (16, 53), (78, 37), (17, 18), (4, 97), (78, 46), (16, 62), (100, 52), (99, 96), (76, 103), (61, 60), (98, 109), (61, 69), (69, 82), (42, 65), (27, 76), (61, 78), (42, 74), (42, 83), (23, 51), (23, 60), (106, 76), (23, 69), (4, 65), (23, 78), (4, 74), (16, 39), (35, 52), (4, 83), (16, 48), (35, 61), (100, 38), (99, 82), (88, 82), (109, 114), (120, 114), (100, 65), (61, 46), (61, 55), (42, 51), (61, 64), (101, 100), (98, 113), (42, 60), (69, 77), (42, 69), (61, 82), (27, 80), (0, 63), (42, 78), (8, 76), (82, 114), (27, 89), (23, 46), (4, 42), (0, 90), (23, 55), (75, 93), (4, 51), (0, 99), (23, 64), (4, 60), (4, 69), (23, 82), (4, 78), (100, 33), (88, 77), (100, 42), (76, 75), (17, 35), (100, 51), (109, 118), (129, 96), (100, 60), (109, 127), (42, 37), (61, 50), (59, 117), (42, 46), (27, 57), (79, 95), (61, 59), (42, 55), (98, 108), (18, 97), (42, 64), (98, 117), (61, 77), (27, 75), (18, 106), (17, 129), (82, 109), (82, 118), (0, 76), (4, 37), (23, 50), (4, 46), (23, 59), (4, 55), (4, 64), (16, 29), (35, 42), (100, 37), (17, 30), (100, 46), (109, 113), (120, 113), (61, 36), (109, 122), (59, 103), (61, 45), (27, 52), (98, 103), (42, 50), (61, 63), (0, 44), (42, 59), (23, 27), (82, 113), (8, 75), (4, 23), (23, 36), (82, 122), (75, 74), (0, 80), (75, 83), (23, 45), (83, 96), (44, 77), (63, 127), (4, 50), (23, 63), (4, 59), (93, 109), (16, 33), (100, 23), (46, 52), (57, 52), (76, 74), (109, 108), (120, 108), (109, 117), (120, 117), (16, 127), (61, 40), (27, 38), (42, 36), (0, 30), (18, 78), (42, 45), (61, 58), (27, 65), (0, 57), (82, 108), (4, 18), (83, 82), (4, 27), (52, 76), (23, 40), (4, 36), (4, 45), (75, 96), (64, 59), (16, 19), (93, 113), (100, 27), (18, 46), (18, 55), (118, 142), (96, 142), (27, 33), (61, 44), (27, 42), (42, 40), (27, 51), (0, 52), (63, 90), (82, 103), (4, 13), (63, 99), (50, 129), (4, 22), (29, 106), (23, 35), (44, 58), (75, 82), (23, 44), (4, 40), (44, 76), (124, 96), (93, 108), (37, 55), (93, 117), (89, 74), (46, 51), (89, 83), (16, 117), (0, 11), (27, 37), (17, 100), (0, 29), (27, 46), (17, 127), (4, 8), (106, 37), (4, 17), (23, 30), (29, 101), (106, 46), (4, 35), (44, 80), (127, 96), (44, 89), (51, 88), (93, 103), (74, 108), (59, 74), (59, 83), (100, 93), (30, 37), (0, 42), (69, 114), (100, 129), (44, 57), (22, 29), (0, 127), (44, 75), (38, 37), (16, 98), (89, 82), (99, 114), (88, 114), (118, 127), (100, 88), (29, 46), (0, 10), (100, 97), (17, 90), (11, 19), (40, 55), (129, 142), (17, 99), (69, 109), (62, 79), (44, 52), (4, 16), (62, 106), (0, 122), (122, 129), (4, 110)]}]}
{'avresample_open': [{'modifyIndex': 1, 'patched_tag': 'before', 'insts_info': [{'instIndex': 0, 'instruction': 'subq\t$0x188, %rsp                      # imm = 0x0xbc'}, {'instIndex': 1, 'instruction': 'movq\t%rdi, 0x178(%rsp)                 # 8-byte Spill'}, {'instIndex': 2, 'instruction': 'movq\t%rdi, %rax'}, {'instIndex': 3, 'instruction': 'addq\t$8, %rax'}, {'instIndex': 4, 'instruction': 'movq\t%rax, 0x170(%rsp)                 # 8-byte Spill'}, {'instIndex': 5, 'instruction': 'movq\t8(%rdi), %rdi'}, {'instIndex': 6, 'instruction': 'callq\tav_get_channel_layout_nb_channels@PLT'}, {'instIndex': 8, 'instruction': 'movq\t%rdi, %rcx'}, {'instIndex': 9, 'instruction': 'addq\t$0x74, %rcx'}, {'instIndex': 10, 'instruction': 'movq\t%rcx, 0x180(%rsp)                 # 8-byte Spill'}, {'instIndex': 11, 'instruction': 'movl\t%eax, 0x74(%rdi)'}, {'instIndex': 12, 'instruction': 'addl\t$-0x21, %eax'}, {'instIndex': 13, 'instruction': 'cmpl\t$-0x20, %eax'}, {'instIndex': 14, 'instruction': 'jae\t.LBB0_2'}]}]}
The analysis of 14 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/15e65f83ec89be2bd0c5548343f52cd317d827ce/patch_info.txt
{'1': {'before': 'a/ffmpeg.c', 'after': 'b/ffmpeg.c'}}
{'1': []}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/15e65f83ec89be2bd0c5548343f52cd317d827ce---b/ffmpeg.c
The case of compiler gcc with optimization no.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/15e65f83ec89be2bd0c5548343f52cd317d827ce/gcc_after/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/15e65f83ec89be2bd0c5548343f52cd317d827ce/gcc_after/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/15e65f83ec89be2bd0c5548343f52cd317d827ce/gcc_after/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/15e65f83ec89be2bd0c5548343f52cd317d827ce/gcc_after/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/15e65f83ec89be2bd0c5548343f52cd317d827ce/gcc_after/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/15e65f83ec89be2bd0c5548343f52cd317d827ce/gcc_after/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/15e65f83ec89be2bd0c5548343f52cd317d827ce/clang_after/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/15e65f83ec89be2bd0c5548343f52cd317d827ce/clang_after/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/15e65f83ec89be2bd0c5548343f52cd317d827ce/clang_after/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/15e65f83ec89be2bd0c5548343f52cd317d827ce/clang_after/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/15e65f83ec89be2bd0c5548343f52cd317d827ce/clang_after/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/15e65f83ec89be2bd0c5548343f52cd317d827ce/clang_after/Os: directory not exists.
The patch information: before---/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/15e65f83ec89be2bd0c5548343f52cd317d827ce---a/ffmpeg.c
The case of compiler gcc with optimization no.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/15e65f83ec89be2bd0c5548343f52cd317d827ce/gcc_before/no: directory not exists.
The case of compiler gcc with optimization O0.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/15e65f83ec89be2bd0c5548343f52cd317d827ce/gcc_before/O0: directory not exists.
The case of compiler gcc with optimization O1.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/15e65f83ec89be2bd0c5548343f52cd317d827ce/gcc_before/O1: directory not exists.
The case of compiler gcc with optimization O2.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/15e65f83ec89be2bd0c5548343f52cd317d827ce/gcc_before/O2: directory not exists.
The case of compiler gcc with optimization O3.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/15e65f83ec89be2bd0c5548343f52cd317d827ce/gcc_before/O3: directory not exists.
The case of compiler gcc with optimization Os.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/15e65f83ec89be2bd0c5548343f52cd317d827ce/gcc_before/Os: directory not exists.
The case of compiler clang with optimization no.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/15e65f83ec89be2bd0c5548343f52cd317d827ce/clang_before/no: directory not exists.
The case of compiler clang with optimization O0.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/15e65f83ec89be2bd0c5548343f52cd317d827ce/clang_before/O0: directory not exists.
The case of compiler clang with optimization O1.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/15e65f83ec89be2bd0c5548343f52cd317d827ce/clang_before/O1: directory not exists.
The case of compiler clang with optimization O2.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/15e65f83ec89be2bd0c5548343f52cd317d827ce/clang_before/O2: directory not exists.
The case of compiler clang with optimization O3.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/15e65f83ec89be2bd0c5548343f52cd317d827ce/clang_before/O3: directory not exists.
The case of compiler clang with optimization Os.
Patched source code file: ffmpeg.c
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/15e65f83ec89be2bd0c5548343f52cd317d827ce/clang_before/Os: directory not exists.
The analysis of 15 vulnerability: libav.
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1dd1b2332ebbac710d8e0214cec7595e118f2105/patch_info.txt
{'1': {'before': 'a/libavformat/rtsp.c', 'after': 'b/libavformat/rtsp.c'}}
{'1': [{'before': '-1133,6', 'after': '+1133,7', 'function': 'static int rtsp_send_cmd_with_content_async'}]}
The patch information: after---/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1dd1b2332ebbac710d8e0214cec7595e118f2105---b/libavformat/rtsp.c
The case of compiler gcc with optimization no.
Patched source code file: rtsp.c
Patched function: 1---static int rtsp_send_cmd_with_content_async 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1dd1b2332ebbac710d8e0214cec7595e118f2105/gcc_after/no/rtsp_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1dd1b2332ebbac710d8e0214cec7595e118f2105/gcc_after/no/rtsp_gcc.s---rtsp_send_cmd_with_content_async---after
function id: 61
function flag: True
There are 183 instructions for function: rtsp_send_cmd_with_content_async in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '1133', 'end': 1139}, 'before': {'start': '1133', 'end': 1138}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 35, 'instruction': 'cmpq\t$0, 0x10(%rsp)'}, {'instIndex': 36, 'instruction': 'je\t.L307'}, {'instIndex': 37, 'instruction': 'movq\t0x10(%rsp), %rcx'}, {'instIndex': 38, 'instruction': 'leaq\t0x50(%rsp), %rax'}, {'instIndex': 39, 'instruction': 'movl\t$0x1000, %edx'}, {'instIndex': 40, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 41, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 42, 'instruction': 'call\tav_strlcat@PLT'}, {'instIndex': 43, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 44, 'instruction': 'movl\t0x30(%rax), %edx'}, {'instIndex': 45, 'instruction': 'leaq\t0x50(%rsp), %rax'}, {'instIndex': 46, 'instruction': 'movl\t%edx, %ecx'}, {'instIndex': 47, 'instruction': 'leaq\t.LC0x82(%rip), %rdx'}, {'instIndex': 48, 'instruction': 'movl\t$0x1000, %esi'}, {'instIndex': 49, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 50, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 51, 'instruction': 'call\tav_strlcatf@PLT'}, {'instIndex': 52, 'instruction': 'leaq\t0x50(%rsp), %rax'}, {'instIndex': 53, 'instruction': 'leaq\t.LC0x88(%rip), %rdx'}, {'instIndex': 54, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 55, 'instruction': 'leaq\t.LC0x89(%rip), %rdx'}, {'instIndex': 56, 'instruction': 'movl\t$0x1000, %esi'}, {'instIndex': 57, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 58, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 59, 'instruction': 'call\tav_strlcatf@PLT'}, {'instIndex': 60, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 61, 'instruction': 'movzbl\t0x34(%rax), %eax'}, {'instIndex': 62, 'instruction': 'testb\t%al, %al'}, {'instIndex': 63, 'instruction': 'je\t.L308'}, {'instIndex': 64, 'instruction': 'cmpq\t$0, 0x10(%rsp)'}, {'instIndex': 65, 'instruction': 'je\t.L309'}, {'instIndex': 66, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 67, 'instruction': 'leaq\t.LC0x8a(%rip), %rdx'}, {'instIndex': 68, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 69, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 70, 'instruction': 'call\tstrstr@PLT'}, {'instIndex': 71, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 72, 'instruction': 'jne\t.L308'}, {'instIndex': 73, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 74, 'instruction': 'leaq\t0x34(%rax), %rdx'}, {'instIndex': 75, 'instruction': 'leaq\t0x50(%rsp), %rax'}, {'instIndex': 76, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 77, 'instruction': 'leaq\t.LC0x83(%rip), %rdx'}, {'instIndex': 78, 'instruction': 'movl\t$0x1000, %esi'}, {'instIndex': 79, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 80, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 81, 'instruction': 'call\tav_strlcatf@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1dd1b2332ebbac710d8e0214cec7595e118f2105/gcc_after/no/rtsp.o
Binary file does not exist.
{'rtsp_send_cmd_with_content_async': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 35, 'instruction': 'cmpq\t$0, 0x10(%rsp)'}, {'instIndex': 36, 'instruction': 'je\t.L307'}, {'instIndex': 37, 'instruction': 'movq\t0x10(%rsp), %rcx'}, {'instIndex': 38, 'instruction': 'leaq\t0x50(%rsp), %rax'}, {'instIndex': 39, 'instruction': 'movl\t$0x1000, %edx'}, {'instIndex': 40, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 41, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 42, 'instruction': 'call\tav_strlcat@PLT'}, {'instIndex': 43, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 44, 'instruction': 'movl\t0x30(%rax), %edx'}, {'instIndex': 45, 'instruction': 'leaq\t0x50(%rsp), %rax'}, {'instIndex': 46, 'instruction': 'movl\t%edx, %ecx'}, {'instIndex': 47, 'instruction': 'leaq\t.LC0x82(%rip), %rdx'}, {'instIndex': 48, 'instruction': 'movl\t$0x1000, %esi'}, {'instIndex': 49, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 50, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 51, 'instruction': 'call\tav_strlcatf@PLT'}, {'instIndex': 52, 'instruction': 'leaq\t0x50(%rsp), %rax'}, {'instIndex': 53, 'instruction': 'leaq\t.LC0x88(%rip), %rdx'}, {'instIndex': 54, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 55, 'instruction': 'leaq\t.LC0x89(%rip), %rdx'}, {'instIndex': 56, 'instruction': 'movl\t$0x1000, %esi'}, {'instIndex': 57, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 58, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 59, 'instruction': 'call\tav_strlcatf@PLT'}, {'instIndex': 60, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 61, 'instruction': 'movzbl\t0x34(%rax), %eax'}, {'instIndex': 62, 'instruction': 'testb\t%al, %al'}, {'instIndex': 63, 'instruction': 'je\t.L308'}, {'instIndex': 64, 'instruction': 'cmpq\t$0, 0x10(%rsp)'}, {'instIndex': 65, 'instruction': 'je\t.L309'}, {'instIndex': 66, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 67, 'instruction': 'leaq\t.LC0x8a(%rip), %rdx'}, {'instIndex': 68, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 69, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 70, 'instruction': 'call\tstrstr@PLT'}, {'instIndex': 71, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 72, 'instruction': 'jne\t.L308'}, {'instIndex': 73, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 74, 'instruction': 'leaq\t0x34(%rax), %rdx'}, {'instIndex': 75, 'instruction': 'leaq\t0x50(%rsp), %rax'}, {'instIndex': 76, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 77, 'instruction': 'leaq\t.LC0x83(%rip), %rdx'}, {'instIndex': 78, 'instruction': 'movl\t$0x1000, %esi'}, {'instIndex': 79, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 80, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 81, 'instruction': 'call\tav_strlcatf@PLT'}]}]}
The case of compiler gcc with optimization O0.
Patched source code file: rtsp.c
Patched function: 1---static int rtsp_send_cmd_with_content_async 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1dd1b2332ebbac710d8e0214cec7595e118f2105/gcc_after/O0/rtsp_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1dd1b2332ebbac710d8e0214cec7595e118f2105/gcc_after/O0/rtsp_gcc.s---rtsp_send_cmd_with_content_async---after
function id: 61
function flag: True
There are 183 instructions for function: rtsp_send_cmd_with_content_async in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '1133', 'end': 1139}, 'before': {'start': '1133', 'end': 1138}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 35, 'instruction': 'cmpq\t$0, 0x10(%rsp)'}, {'instIndex': 36, 'instruction': 'je\t.L307'}, {'instIndex': 37, 'instruction': 'movq\t0x10(%rsp), %rcx'}, {'instIndex': 38, 'instruction': 'leaq\t0x50(%rsp), %rax'}, {'instIndex': 39, 'instruction': 'movl\t$0x1000, %edx'}, {'instIndex': 40, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 41, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 42, 'instruction': 'call\tav_strlcat@PLT'}, {'instIndex': 43, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 44, 'instruction': 'movl\t0x30(%rax), %edx'}, {'instIndex': 45, 'instruction': 'leaq\t0x50(%rsp), %rax'}, {'instIndex': 46, 'instruction': 'movl\t%edx, %ecx'}, {'instIndex': 47, 'instruction': 'leaq\t.LC0x82(%rip), %rdx'}, {'instIndex': 48, 'instruction': 'movl\t$0x1000, %esi'}, {'instIndex': 49, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 50, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 51, 'instruction': 'call\tav_strlcatf@PLT'}, {'instIndex': 52, 'instruction': 'leaq\t0x50(%rsp), %rax'}, {'instIndex': 53, 'instruction': 'leaq\t.LC0x88(%rip), %rdx'}, {'instIndex': 54, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 55, 'instruction': 'leaq\t.LC0x89(%rip), %rdx'}, {'instIndex': 56, 'instruction': 'movl\t$0x1000, %esi'}, {'instIndex': 57, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 58, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 59, 'instruction': 'call\tav_strlcatf@PLT'}, {'instIndex': 60, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 61, 'instruction': 'movzbl\t0x34(%rax), %eax'}, {'instIndex': 62, 'instruction': 'testb\t%al, %al'}, {'instIndex': 63, 'instruction': 'je\t.L308'}, {'instIndex': 64, 'instruction': 'cmpq\t$0, 0x10(%rsp)'}, {'instIndex': 65, 'instruction': 'je\t.L309'}, {'instIndex': 66, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 67, 'instruction': 'leaq\t.LC0x8a(%rip), %rdx'}, {'instIndex': 68, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 69, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 70, 'instruction': 'call\tstrstr@PLT'}, {'instIndex': 71, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 72, 'instruction': 'jne\t.L308'}, {'instIndex': 73, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 74, 'instruction': 'leaq\t0x34(%rax), %rdx'}, {'instIndex': 75, 'instruction': 'leaq\t0x50(%rsp), %rax'}, {'instIndex': 76, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 77, 'instruction': 'leaq\t.LC0x83(%rip), %rdx'}, {'instIndex': 78, 'instruction': 'movl\t$0x1000, %esi'}, {'instIndex': 79, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 80, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 81, 'instruction': 'call\tav_strlcatf@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1dd1b2332ebbac710d8e0214cec7595e118f2105/gcc_after/O0/rtsp.o
Binary file does not exist.
{'rtsp_send_cmd_with_content_async': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 35, 'instruction': 'cmpq\t$0, 0x10(%rsp)'}, {'instIndex': 36, 'instruction': 'je\t.L307'}, {'instIndex': 37, 'instruction': 'movq\t0x10(%rsp), %rcx'}, {'instIndex': 38, 'instruction': 'leaq\t0x50(%rsp), %rax'}, {'instIndex': 39, 'instruction': 'movl\t$0x1000, %edx'}, {'instIndex': 40, 'instruction': 'movq\t%rcx, %rsi'}, {'instIndex': 41, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 42, 'instruction': 'call\tav_strlcat@PLT'}, {'instIndex': 43, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 44, 'instruction': 'movl\t0x30(%rax), %edx'}, {'instIndex': 45, 'instruction': 'leaq\t0x50(%rsp), %rax'}, {'instIndex': 46, 'instruction': 'movl\t%edx, %ecx'}, {'instIndex': 47, 'instruction': 'leaq\t.LC0x82(%rip), %rdx'}, {'instIndex': 48, 'instruction': 'movl\t$0x1000, %esi'}, {'instIndex': 49, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 50, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 51, 'instruction': 'call\tav_strlcatf@PLT'}, {'instIndex': 52, 'instruction': 'leaq\t0x50(%rsp), %rax'}, {'instIndex': 53, 'instruction': 'leaq\t.LC0x88(%rip), %rdx'}, {'instIndex': 54, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 55, 'instruction': 'leaq\t.LC0x89(%rip), %rdx'}, {'instIndex': 56, 'instruction': 'movl\t$0x1000, %esi'}, {'instIndex': 57, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 58, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 59, 'instruction': 'call\tav_strlcatf@PLT'}, {'instIndex': 60, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 61, 'instruction': 'movzbl\t0x34(%rax), %eax'}, {'instIndex': 62, 'instruction': 'testb\t%al, %al'}, {'instIndex': 63, 'instruction': 'je\t.L308'}, {'instIndex': 64, 'instruction': 'cmpq\t$0, 0x10(%rsp)'}, {'instIndex': 65, 'instruction': 'je\t.L309'}, {'instIndex': 66, 'instruction': 'movq\t0x10(%rsp), %rax'}, {'instIndex': 67, 'instruction': 'leaq\t.LC0x8a(%rip), %rdx'}, {'instIndex': 68, 'instruction': 'movq\t%rdx, %rsi'}, {'instIndex': 69, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 70, 'instruction': 'call\tstrstr@PLT'}, {'instIndex': 71, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 72, 'instruction': 'jne\t.L308'}, {'instIndex': 73, 'instruction': 'movq\t0x40(%rsp), %rax'}, {'instIndex': 74, 'instruction': 'leaq\t0x34(%rax), %rdx'}, {'instIndex': 75, 'instruction': 'leaq\t0x50(%rsp), %rax'}, {'instIndex': 76, 'instruction': 'movq\t%rdx, %rcx'}, {'instIndex': 77, 'instruction': 'leaq\t.LC0x83(%rip), %rdx'}, {'instIndex': 78, 'instruction': 'movl\t$0x1000, %esi'}, {'instIndex': 79, 'instruction': 'movq\t%rax, %rdi'}, {'instIndex': 80, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 81, 'instruction': 'call\tav_strlcatf@PLT'}]}]}
The case of compiler gcc with optimization O1.
Patched source code file: rtsp.c
Patched function: 1---static int rtsp_send_cmd_with_content_async 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1dd1b2332ebbac710d8e0214cec7595e118f2105/gcc_after/O1/rtsp_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1dd1b2332ebbac710d8e0214cec7595e118f2105/gcc_after/O1/rtsp_gcc.s---rtsp_send_cmd_with_content_async---after
function id: 173
function flag: True
There are 3929 instructions for function: rtsp_send_cmd_with_content_async in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '1133', 'end': 1139}, 'before': {'start': '1133', 'end': 1138}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 31, 'instruction': 'addq\t$0x10, %rsp'}, {'instIndex': 32, 'instruction': 'testq\t%r12, %r12'}, {'instIndex': 33, 'instruction': 'je\t.L138'}, {'instIndex': 34, 'instruction': 'leaq\t0x10(%rsp), %r15'}, {'instIndex': 35, 'instruction': 'movl\t$0x1000, %edx'}, {'instIndex': 36, 'instruction': 'movq\t%r12, %rsi'}, {'instIndex': 37, 'instruction': 'movq\t%r15, %rdi'}, {'instIndex': 38, 'instruction': 'call\tav_strlcat@PLT'}, {'instIndex': 39, 'instruction': 'movl\t0x30(%rbx), %ecx'}, {'instIndex': 40, 'instruction': 'leaq\t.LC0x1f(%rip), %rdx'}, {'instIndex': 41, 'instruction': 'movl\t$0x1000, %esi'}, {'instIndex': 42, 'instruction': 'movq\t%r15, %rdi'}, {'instIndex': 43, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 44, 'instruction': 'call\tav_strlcatf@PLT'}, {'instIndex': 45, 'instruction': 'leaq\t.LC0x20(%rip), %rcx'}, {'instIndex': 46, 'instruction': 'leaq\t.LC0x21(%rip), %rdx'}, {'instIndex': 47, 'instruction': 'movl\t$0x1000, %esi'}, {'instIndex': 48, 'instruction': 'movq\t%r15, %rdi'}, {'instIndex': 49, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 50, 'instruction': 'call\tav_strlcatf@PLT'}, {'instIndex': 51, 'instruction': 'cmpb\t$0, 0x34(%rbx)'}, {'instIndex': 52, 'instruction': 'je\t.L139'}, {'instIndex': 53, 'instruction': 'leaq\t.LC0x22(%rip), %rsi'}, {'instIndex': 54, 'instruction': 'movq\t%r12, %rdi'}, {'instIndex': 55, 'instruction': 'call\tstrstr@PLT'}, {'instIndex': 56, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 57, 'instruction': 'jne\t.L139'}, {'instIndex': 58, 'instruction': 'leaq\t0x34(%rbx), %rcx'}, {'instIndex': 59, 'instruction': 'leaq\t0x10(%rsp), %rdi'}, {'instIndex': 60, 'instruction': 'leaq\t.LC0x23(%rip), %rdx'}, {'instIndex': 61, 'instruction': 'movl\t$0x1000, %esi'}, {'instIndex': 62, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 63, 'instruction': 'call\tav_strlcatf@PLT'}, {'instIndex': 64, 'instruction': 'jmp\t.L139'}, {'instIndex': 135, 'instruction': 'movl\t0x30(%rbx), %ecx'}, {'instIndex': 136, 'instruction': 'leaq\t0x10(%rsp), %r12'}, {'instIndex': 137, 'instruction': 'leaq\t.LC0x1f(%rip), %rdx'}, {'instIndex': 138, 'instruction': 'movl\t$0x1000, %esi'}, {'instIndex': 139, 'instruction': 'movq\t%r12, %rdi'}, {'instIndex': 140, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 141, 'instruction': 'call\tav_strlcatf@PLT'}, {'instIndex': 142, 'instruction': 'leaq\t.LC0x20(%rip), %rcx'}, {'instIndex': 143, 'instruction': 'leaq\t.LC0x21(%rip), %rdx'}, {'instIndex': 144, 'instruction': 'movl\t$0x1000, %esi'}, {'instIndex': 145, 'instruction': 'movq\t%r12, %rdi'}, {'instIndex': 146, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 147, 'instruction': 'call\tav_strlcatf@PLT'}, {'instIndex': 148, 'instruction': 'cmpb\t$0, 0x34(%rbx)'}, {'instIndex': 149, 'instruction': 'jne\t.L151'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1dd1b2332ebbac710d8e0214cec7595e118f2105/gcc_after/O1/rtsp.o
Binary file does not exist.
{'rtsp_send_cmd_with_content_async': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 31, 'instruction': 'addq\t$0x10, %rsp'}, {'instIndex': 32, 'instruction': 'testq\t%r12, %r12'}, {'instIndex': 33, 'instruction': 'je\t.L138'}, {'instIndex': 34, 'instruction': 'leaq\t0x10(%rsp), %r15'}, {'instIndex': 35, 'instruction': 'movl\t$0x1000, %edx'}, {'instIndex': 36, 'instruction': 'movq\t%r12, %rsi'}, {'instIndex': 37, 'instruction': 'movq\t%r15, %rdi'}, {'instIndex': 38, 'instruction': 'call\tav_strlcat@PLT'}, {'instIndex': 39, 'instruction': 'movl\t0x30(%rbx), %ecx'}, {'instIndex': 40, 'instruction': 'leaq\t.LC0x1f(%rip), %rdx'}, {'instIndex': 41, 'instruction': 'movl\t$0x1000, %esi'}, {'instIndex': 42, 'instruction': 'movq\t%r15, %rdi'}, {'instIndex': 43, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 44, 'instruction': 'call\tav_strlcatf@PLT'}, {'instIndex': 45, 'instruction': 'leaq\t.LC0x20(%rip), %rcx'}, {'instIndex': 46, 'instruction': 'leaq\t.LC0x21(%rip), %rdx'}, {'instIndex': 47, 'instruction': 'movl\t$0x1000, %esi'}, {'instIndex': 48, 'instruction': 'movq\t%r15, %rdi'}, {'instIndex': 49, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 50, 'instruction': 'call\tav_strlcatf@PLT'}, {'instIndex': 51, 'instruction': 'cmpb\t$0, 0x34(%rbx)'}, {'instIndex': 52, 'instruction': 'je\t.L139'}, {'instIndex': 53, 'instruction': 'leaq\t.LC0x22(%rip), %rsi'}, {'instIndex': 54, 'instruction': 'movq\t%r12, %rdi'}, {'instIndex': 55, 'instruction': 'call\tstrstr@PLT'}, {'instIndex': 56, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 57, 'instruction': 'jne\t.L139'}, {'instIndex': 58, 'instruction': 'leaq\t0x34(%rbx), %rcx'}, {'instIndex': 59, 'instruction': 'leaq\t0x10(%rsp), %rdi'}, {'instIndex': 60, 'instruction': 'leaq\t.LC0x23(%rip), %rdx'}, {'instIndex': 61, 'instruction': 'movl\t$0x1000, %esi'}, {'instIndex': 62, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 63, 'instruction': 'call\tav_strlcatf@PLT'}, {'instIndex': 64, 'instruction': 'jmp\t.L139'}, {'instIndex': 135, 'instruction': 'movl\t0x30(%rbx), %ecx'}, {'instIndex': 136, 'instruction': 'leaq\t0x10(%rsp), %r12'}, {'instIndex': 137, 'instruction': 'leaq\t.LC0x1f(%rip), %rdx'}, {'instIndex': 138, 'instruction': 'movl\t$0x1000, %esi'}, {'instIndex': 139, 'instruction': 'movq\t%r12, %rdi'}, {'instIndex': 140, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 141, 'instruction': 'call\tav_strlcatf@PLT'}, {'instIndex': 142, 'instruction': 'leaq\t.LC0x20(%rip), %rcx'}, {'instIndex': 143, 'instruction': 'leaq\t.LC0x21(%rip), %rdx'}, {'instIndex': 144, 'instruction': 'movl\t$0x1000, %esi'}, {'instIndex': 145, 'instruction': 'movq\t%r12, %rdi'}, {'instIndex': 146, 'instruction': 'movl\t$0, %eax'}, {'instIndex': 147, 'instruction': 'call\tav_strlcatf@PLT'}, {'instIndex': 148, 'instruction': 'cmpb\t$0, 0x34(%rbx)'}, {'instIndex': 149, 'instruction': 'jne\t.L151'}]}]}
The case of compiler gcc with optimization O2.
Patched source code file: rtsp.c
Patched function: 1---static int rtsp_send_cmd_with_content_async 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1dd1b2332ebbac710d8e0214cec7595e118f2105/gcc_after/O2/rtsp_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1dd1b2332ebbac710d8e0214cec7595e118f2105/gcc_after/O2/rtsp_gcc.s---rtsp_send_cmd_with_content_async---after
function id: 64
function flag: True
There are 4814 instructions for function: rtsp_send_cmd_with_content_async in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '1133', 'end': 1139}, 'before': {'start': '1133', 'end': 1138}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 32, 'instruction': 'popq\t%rax'}, {'instIndex': 33, 'instruction': 'popq\t%rdx'}, {'instIndex': 34, 'instruction': 'testq\t%r15, %r15'}, {'instIndex': 35, 'instruction': 'je\t.L61'}, {'instIndex': 36, 'instruction': 'movl\t$0x1000, %edx'}, {'instIndex': 37, 'instruction': 'movq\t%r15, %rsi'}, {'instIndex': 38, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 39, 'instruction': 'call\tav_strlcat@PLT'}, {'instIndex': 40, 'instruction': 'movl\t0x30(%rbx), %ecx'}, {'instIndex': 41, 'instruction': 'movl\t$0x1000, %esi'}, {'instIndex': 42, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 43, 'instruction': 'leaq\t.LC4(%rip), %rdx'}, {'instIndex': 44, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 45, 'instruction': 'call\tav_strlcatf@PLT'}, {'instIndex': 46, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 47, 'instruction': 'movl\t$0x1000, %esi'}, {'instIndex': 48, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 49, 'instruction': 'leaq\t.LC5(%rip), %rcx'}, {'instIndex': 50, 'instruction': 'leaq\t.LC6(%rip), %rdx'}, {'instIndex': 51, 'instruction': 'call\tav_strlcatf@PLT'}, {'instIndex': 52, 'instruction': 'cmpb\t$0, 0x34(%rbx)'}, {'instIndex': 53, 'instruction': 'je\t.L63'}, {'instIndex': 54, 'instruction': 'leaq\t.LC7(%rip), %rsi'}, {'instIndex': 55, 'instruction': 'movq\t%r15, %rdi'}, {'instIndex': 56, 'instruction': 'call\tstrstr@PLT'}, {'instIndex': 57, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 58, 'instruction': 'je\t.L76'}, {'instIndex': 131, 'instruction': 'movl\t0x30(%rbx), %ecx'}, {'instIndex': 132, 'instruction': 'leaq\t.LC4(%rip), %rdx'}, {'instIndex': 133, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 134, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 135, 'instruction': 'movl\t$0x1000, %esi'}, {'instIndex': 136, 'instruction': 'call\tav_strlcatf@PLT'}, {'instIndex': 137, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 138, 'instruction': 'movl\t$0x1000, %esi'}, {'instIndex': 139, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 140, 'instruction': 'leaq\t.LC5(%rip), %rcx'}, {'instIndex': 141, 'instruction': 'leaq\t.LC6(%rip), %rdx'}, {'instIndex': 142, 'instruction': 'call\tav_strlcatf@PLT'}, {'instIndex': 143, 'instruction': 'cmpb\t$0, 0x34(%rbx)'}, {'instIndex': 144, 'instruction': 'je\t.L63'}, {'instIndex': 145, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 146, 'instruction': 'leaq\t0x34(%rbx), %rcx'}, {'instIndex': 147, 'instruction': 'leaq\t.LC8(%rip), %rdx'}, {'instIndex': 148, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 149, 'instruction': 'movl\t$0x1000, %esi'}, {'instIndex': 150, 'instruction': 'call\tav_strlcatf@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1dd1b2332ebbac710d8e0214cec7595e118f2105/gcc_after/O2/rtsp.o
Binary file does not exist.
{'rtsp_send_cmd_with_content_async': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 32, 'instruction': 'popq\t%rax'}, {'instIndex': 33, 'instruction': 'popq\t%rdx'}, {'instIndex': 34, 'instruction': 'testq\t%r15, %r15'}, {'instIndex': 35, 'instruction': 'je\t.L61'}, {'instIndex': 36, 'instruction': 'movl\t$0x1000, %edx'}, {'instIndex': 37, 'instruction': 'movq\t%r15, %rsi'}, {'instIndex': 38, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 39, 'instruction': 'call\tav_strlcat@PLT'}, {'instIndex': 40, 'instruction': 'movl\t0x30(%rbx), %ecx'}, {'instIndex': 41, 'instruction': 'movl\t$0x1000, %esi'}, {'instIndex': 42, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 43, 'instruction': 'leaq\t.LC4(%rip), %rdx'}, {'instIndex': 44, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 45, 'instruction': 'call\tav_strlcatf@PLT'}, {'instIndex': 46, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 47, 'instruction': 'movl\t$0x1000, %esi'}, {'instIndex': 48, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 49, 'instruction': 'leaq\t.LC5(%rip), %rcx'}, {'instIndex': 50, 'instruction': 'leaq\t.LC6(%rip), %rdx'}, {'instIndex': 51, 'instruction': 'call\tav_strlcatf@PLT'}, {'instIndex': 52, 'instruction': 'cmpb\t$0, 0x34(%rbx)'}, {'instIndex': 53, 'instruction': 'je\t.L63'}, {'instIndex': 54, 'instruction': 'leaq\t.LC7(%rip), %rsi'}, {'instIndex': 55, 'instruction': 'movq\t%r15, %rdi'}, {'instIndex': 56, 'instruction': 'call\tstrstr@PLT'}, {'instIndex': 57, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 58, 'instruction': 'je\t.L76'}, {'instIndex': 131, 'instruction': 'movl\t0x30(%rbx), %ecx'}, {'instIndex': 132, 'instruction': 'leaq\t.LC4(%rip), %rdx'}, {'instIndex': 133, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 134, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 135, 'instruction': 'movl\t$0x1000, %esi'}, {'instIndex': 136, 'instruction': 'call\tav_strlcatf@PLT'}, {'instIndex': 137, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 138, 'instruction': 'movl\t$0x1000, %esi'}, {'instIndex': 139, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 140, 'instruction': 'leaq\t.LC5(%rip), %rcx'}, {'instIndex': 141, 'instruction': 'leaq\t.LC6(%rip), %rdx'}, {'instIndex': 142, 'instruction': 'call\tav_strlcatf@PLT'}, {'instIndex': 143, 'instruction': 'cmpb\t$0, 0x34(%rbx)'}, {'instIndex': 144, 'instruction': 'je\t.L63'}, {'instIndex': 145, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 146, 'instruction': 'leaq\t0x34(%rbx), %rcx'}, {'instIndex': 147, 'instruction': 'leaq\t.LC8(%rip), %rdx'}, {'instIndex': 148, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 149, 'instruction': 'movl\t$0x1000, %esi'}, {'instIndex': 150, 'instruction': 'call\tav_strlcatf@PLT'}]}]}
The case of compiler gcc with optimization O3.
Patched source code file: rtsp.c
Patched function: 1---static int rtsp_send_cmd_with_content_async 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1dd1b2332ebbac710d8e0214cec7595e118f2105/gcc_after/O3/rtsp_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1dd1b2332ebbac710d8e0214cec7595e118f2105/gcc_after/O3/rtsp_gcc.s---rtsp_send_cmd_with_content_async---after
function id: 33
function flag: True
There are 5716 instructions for function: rtsp_send_cmd_with_content_async in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '1133', 'end': 1139}, 'before': {'start': '1133', 'end': 1138}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 32, 'instruction': 'popq\t%rax'}, {'instIndex': 33, 'instruction': 'popq\t%rdx'}, {'instIndex': 34, 'instruction': 'testq\t%r15, %r15'}, {'instIndex': 35, 'instruction': 'je\t.L36'}, {'instIndex': 36, 'instruction': 'movl\t$0x1000, %edx'}, {'instIndex': 37, 'instruction': 'movq\t%r15, %rsi'}, {'instIndex': 38, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 39, 'instruction': 'call\tav_strlcat@PLT'}, {'instIndex': 40, 'instruction': 'movl\t0x30(%rbx), %ecx'}, {'instIndex': 41, 'instruction': 'movl\t$0x1000, %esi'}, {'instIndex': 42, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 43, 'instruction': 'leaq\t.LC4(%rip), %rdx'}, {'instIndex': 44, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 45, 'instruction': 'call\tav_strlcatf@PLT'}, {'instIndex': 46, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 47, 'instruction': 'movl\t$0x1000, %esi'}, {'instIndex': 48, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 49, 'instruction': 'leaq\t.LC5(%rip), %rcx'}, {'instIndex': 50, 'instruction': 'leaq\t.LC6(%rip), %rdx'}, {'instIndex': 51, 'instruction': 'call\tav_strlcatf@PLT'}, {'instIndex': 52, 'instruction': 'cmpb\t$0, 0x34(%rbx)'}, {'instIndex': 53, 'instruction': 'je\t.L38'}, {'instIndex': 54, 'instruction': 'leaq\t.LC7(%rip), %rsi'}, {'instIndex': 55, 'instruction': 'movq\t%r15, %rdi'}, {'instIndex': 56, 'instruction': 'call\tstrstr@PLT'}, {'instIndex': 57, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 58, 'instruction': 'je\t.L51'}, {'instIndex': 131, 'instruction': 'movl\t0x30(%rbx), %ecx'}, {'instIndex': 132, 'instruction': 'leaq\t.LC4(%rip), %rdx'}, {'instIndex': 133, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 134, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 135, 'instruction': 'movl\t$0x1000, %esi'}, {'instIndex': 136, 'instruction': 'call\tav_strlcatf@PLT'}, {'instIndex': 137, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 138, 'instruction': 'movl\t$0x1000, %esi'}, {'instIndex': 139, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 140, 'instruction': 'leaq\t.LC5(%rip), %rcx'}, {'instIndex': 141, 'instruction': 'leaq\t.LC6(%rip), %rdx'}, {'instIndex': 142, 'instruction': 'call\tav_strlcatf@PLT'}, {'instIndex': 143, 'instruction': 'cmpb\t$0, 0x34(%rbx)'}, {'instIndex': 144, 'instruction': 'je\t.L38'}, {'instIndex': 145, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 146, 'instruction': 'leaq\t0x34(%rbx), %rcx'}, {'instIndex': 147, 'instruction': 'leaq\t.LC8(%rip), %rdx'}, {'instIndex': 148, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 149, 'instruction': 'movl\t$0x1000, %esi'}, {'instIndex': 150, 'instruction': 'call\tav_strlcatf@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1dd1b2332ebbac710d8e0214cec7595e118f2105/gcc_after/O3/rtsp.o
Binary file does not exist.
{'rtsp_send_cmd_with_content_async': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 32, 'instruction': 'popq\t%rax'}, {'instIndex': 33, 'instruction': 'popq\t%rdx'}, {'instIndex': 34, 'instruction': 'testq\t%r15, %r15'}, {'instIndex': 35, 'instruction': 'je\t.L36'}, {'instIndex': 36, 'instruction': 'movl\t$0x1000, %edx'}, {'instIndex': 37, 'instruction': 'movq\t%r15, %rsi'}, {'instIndex': 38, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 39, 'instruction': 'call\tav_strlcat@PLT'}, {'instIndex': 40, 'instruction': 'movl\t0x30(%rbx), %ecx'}, {'instIndex': 41, 'instruction': 'movl\t$0x1000, %esi'}, {'instIndex': 42, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 43, 'instruction': 'leaq\t.LC4(%rip), %rdx'}, {'instIndex': 44, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 45, 'instruction': 'call\tav_strlcatf@PLT'}, {'instIndex': 46, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 47, 'instruction': 'movl\t$0x1000, %esi'}, {'instIndex': 48, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 49, 'instruction': 'leaq\t.LC5(%rip), %rcx'}, {'instIndex': 50, 'instruction': 'leaq\t.LC6(%rip), %rdx'}, {'instIndex': 51, 'instruction': 'call\tav_strlcatf@PLT'}, {'instIndex': 52, 'instruction': 'cmpb\t$0, 0x34(%rbx)'}, {'instIndex': 53, 'instruction': 'je\t.L38'}, {'instIndex': 54, 'instruction': 'leaq\t.LC7(%rip), %rsi'}, {'instIndex': 55, 'instruction': 'movq\t%r15, %rdi'}, {'instIndex': 56, 'instruction': 'call\tstrstr@PLT'}, {'instIndex': 57, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 58, 'instruction': 'je\t.L51'}, {'instIndex': 131, 'instruction': 'movl\t0x30(%rbx), %ecx'}, {'instIndex': 132, 'instruction': 'leaq\t.LC4(%rip), %rdx'}, {'instIndex': 133, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 134, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 135, 'instruction': 'movl\t$0x1000, %esi'}, {'instIndex': 136, 'instruction': 'call\tav_strlcatf@PLT'}, {'instIndex': 137, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 138, 'instruction': 'movl\t$0x1000, %esi'}, {'instIndex': 139, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 140, 'instruction': 'leaq\t.LC5(%rip), %rcx'}, {'instIndex': 141, 'instruction': 'leaq\t.LC6(%rip), %rdx'}, {'instIndex': 142, 'instruction': 'call\tav_strlcatf@PLT'}, {'instIndex': 143, 'instruction': 'cmpb\t$0, 0x34(%rbx)'}, {'instIndex': 144, 'instruction': 'je\t.L38'}, {'instIndex': 145, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 146, 'instruction': 'leaq\t0x34(%rbx), %rcx'}, {'instIndex': 147, 'instruction': 'leaq\t.LC8(%rip), %rdx'}, {'instIndex': 148, 'instruction': 'movq\t%rbp, %rdi'}, {'instIndex': 149, 'instruction': 'movl\t$0x1000, %esi'}, {'instIndex': 150, 'instruction': 'call\tav_strlcatf@PLT'}]}]}
The case of compiler gcc with optimization Os.
Patched source code file: rtsp.c
Patched function: 1---static int rtsp_send_cmd_with_content_async 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1dd1b2332ebbac710d8e0214cec7595e118f2105/gcc_after/Os/rtsp_gcc.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1dd1b2332ebbac710d8e0214cec7595e118f2105/gcc_after/Os/rtsp_gcc.s---rtsp_send_cmd_with_content_async---after
function id: 111
function flag: True
There are 3739 instructions for function: rtsp_send_cmd_with_content_async in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '1133', 'end': 1139}, 'before': {'start': '1133', 'end': 1138}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 33, 'instruction': 'popq\t%rdx'}, {'instIndex': 34, 'instruction': 'popq\t%rcx'}, {'instIndex': 35, 'instruction': 'testq\t%r12, %r12'}, {'instIndex': 36, 'instruction': 'je\t.L123'}, {'instIndex': 37, 'instruction': 'movl\t$0x1000, %edx'}, {'instIndex': 38, 'instruction': 'movq\t%r12, %rsi'}, {'instIndex': 39, 'instruction': 'movq\t%rbx, %rdi'}, {'instIndex': 40, 'instruction': 'call\tav_strlcat@PLT'}, {'instIndex': 41, 'instruction': 'movl\t0x30(%rbp), %ecx'}, {'instIndex': 42, 'instruction': 'leaq\t.LC0x1b(%rip), %rdx'}, {'instIndex': 43, 'instruction': 'movq\t%rbx, %rdi'}, {'instIndex': 44, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 45, 'instruction': 'movl\t$0x1000, %esi'}, {'instIndex': 46, 'instruction': 'call\tav_strlcatf@PLT'}, {'instIndex': 47, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 48, 'instruction': 'movl\t$0x1000, %esi'}, {'instIndex': 49, 'instruction': 'movq\t%rbx, %rdi'}, {'instIndex': 50, 'instruction': 'leaq\t.LC0x1c(%rip), %rcx'}, {'instIndex': 51, 'instruction': 'leaq\t.LC0x1d(%rip), %rdx'}, {'instIndex': 52, 'instruction': 'call\tav_strlcatf@PLT'}, {'instIndex': 53, 'instruction': 'cmpb\t$0, 0x34(%rbp)'}, {'instIndex': 54, 'instruction': 'je\t.L124'}, {'instIndex': 55, 'instruction': 'testq\t%r12, %r12'}, {'instIndex': 56, 'instruction': 'je\t.L125'}, {'instIndex': 57, 'instruction': 'leaq\t.LC0x1e(%rip), %rsi'}, {'instIndex': 58, 'instruction': 'movq\t%r12, %rdi'}, {'instIndex': 59, 'instruction': 'call\tstrstr@PLT'}, {'instIndex': 60, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 61, 'instruction': 'jne\t.L124'}, {'instIndex': 62, 'instruction': 'leaq\t0x34(%rbp), %rcx'}, {'instIndex': 63, 'instruction': 'leaq\t.LC0x1f(%rip), %rdx'}, {'instIndex': 64, 'instruction': 'movq\t%rbx, %rdi'}, {'instIndex': 65, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 66, 'instruction': 'movl\t$0x1000, %esi'}, {'instIndex': 67, 'instruction': 'call\tav_strlcatf@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1dd1b2332ebbac710d8e0214cec7595e118f2105/gcc_after/Os/rtsp.o
Binary file does not exist.
{'rtsp_send_cmd_with_content_async': [{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 33, 'instruction': 'popq\t%rdx'}, {'instIndex': 34, 'instruction': 'popq\t%rcx'}, {'instIndex': 35, 'instruction': 'testq\t%r12, %r12'}, {'instIndex': 36, 'instruction': 'je\t.L123'}, {'instIndex': 37, 'instruction': 'movl\t$0x1000, %edx'}, {'instIndex': 38, 'instruction': 'movq\t%r12, %rsi'}, {'instIndex': 39, 'instruction': 'movq\t%rbx, %rdi'}, {'instIndex': 40, 'instruction': 'call\tav_strlcat@PLT'}, {'instIndex': 41, 'instruction': 'movl\t0x30(%rbp), %ecx'}, {'instIndex': 42, 'instruction': 'leaq\t.LC0x1b(%rip), %rdx'}, {'instIndex': 43, 'instruction': 'movq\t%rbx, %rdi'}, {'instIndex': 44, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 45, 'instruction': 'movl\t$0x1000, %esi'}, {'instIndex': 46, 'instruction': 'call\tav_strlcatf@PLT'}, {'instIndex': 47, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 48, 'instruction': 'movl\t$0x1000, %esi'}, {'instIndex': 49, 'instruction': 'movq\t%rbx, %rdi'}, {'instIndex': 50, 'instruction': 'leaq\t.LC0x1c(%rip), %rcx'}, {'instIndex': 51, 'instruction': 'leaq\t.LC0x1d(%rip), %rdx'}, {'instIndex': 52, 'instruction': 'call\tav_strlcatf@PLT'}, {'instIndex': 53, 'instruction': 'cmpb\t$0, 0x34(%rbp)'}, {'instIndex': 54, 'instruction': 'je\t.L124'}, {'instIndex': 55, 'instruction': 'testq\t%r12, %r12'}, {'instIndex': 56, 'instruction': 'je\t.L125'}, {'instIndex': 57, 'instruction': 'leaq\t.LC0x1e(%rip), %rsi'}, {'instIndex': 58, 'instruction': 'movq\t%r12, %rdi'}, {'instIndex': 59, 'instruction': 'call\tstrstr@PLT'}, {'instIndex': 60, 'instruction': 'testq\t%rax, %rax'}, {'instIndex': 61, 'instruction': 'jne\t.L124'}, {'instIndex': 62, 'instruction': 'leaq\t0x34(%rbp), %rcx'}, {'instIndex': 63, 'instruction': 'leaq\t.LC0x1f(%rip), %rdx'}, {'instIndex': 64, 'instruction': 'movq\t%rbx, %rdi'}, {'instIndex': 65, 'instruction': 'xorl\t%eax, %eax'}, {'instIndex': 66, 'instruction': 'movl\t$0x1000, %esi'}, {'instIndex': 67, 'instruction': 'call\tav_strlcatf@PLT'}]}]}
The case of compiler clang with optimization no.
Patched source code file: rtsp.c
Patched function: 1---static int rtsp_send_cmd_with_content_async 
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1dd1b2332ebbac710d8e0214cec7595e118f2105/clang_after/no/rtsp.s
The extraction of patched assembly codes from file: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1dd1b2332ebbac710d8e0214cec7595e118f2105/clang_after/no/rtsp.s---rtsp_send_cmd_with_content_async---after
function id: 15
function flag: True
There are 147 instructions for function: rtsp_send_cmd_with_content_async in intel assembly files.
[{'modifyIndex': 1, 'line': {'after': {'start': '1133', 'end': 1139}, 'before': {'start': '1133', 'end': 1138}}}]
[{'modifyIndex': 1, 'patched_tag': 'after', 'insts_info': [{'instIndex': 23, 'instruction': 'cmpq\t$0, 0x25c0(%rsp)'}, {'instIndex': 24, 'instruction': 'je\t.LBB15_2'}, {'instIndex': 25, 'instruction': 'leaq\t0x15a0(%rsp), %rdi'}, {'instIndex': 26, 'instruction': 'movq\t0x25c0(%rsp), %rsi'}, {'instIndex': 27, 'instruction': 'movl\t$0x1000, %edx                     # imm = 0x0x3e8'}, {'instIndex': 28, 'instruction': 'callq\tav_strlcat@PLT'}, {'instIndex': 29, 'instruction': 'leaq\t0x15a0(%rsp), %rdi'}, {'instIndex': 30, 'instruction': 'movq\t0x25a8(%rsp), %rax'}, {'instIndex': 31, 'instruction': 'movl\t0x30(%rax), %ecx'}, {'instIndex': 32, 'instruction': 'movl\t$0x1000, %esi                     # imm = 0x0x3e8'}, {'instIndex': 33, 'instruction': 'leaq\t.L.str.0x4a(%rip), %rdx'}, {'instIndex': 34, 'instruction': 'movb\t$0, %al'}, {'instIndex': 35, 'instruction': 'callq\tav_strlcatf@PLT'}, {'instIndex': 36, 'instruction': 'leaq\t0x15a0(%rsp), %rdi'}, {'instIndex': 37, 'instruction': 'movl\t$0x1000, %esi                     # imm = 0x0x3e8'}, {'instIndex': 38, 'instruction': 'leaq\t.L.str.0xaa(%rip), %rdx'}, {'instIndex': 39, 'instruction': 'leaq\t.L.str.0xab(%rip), %rcx'}, {'instIndex': 40, 'instruction': 'movb\t$0, %al'}, {'instIndex': 41, 'instruction': 'callq\tav_strlcatf@PLT'}, {'instIndex': 42, 'instruction': 'movq\t0x25a8(%rsp), %rax'}, {'instIndex': 43, 'instruction': 'movsbl\t0x34(%rax), %eax'}, {'instIndex': 44, 'instruction': 'cmpl\t$0, %eax'}, {'instIndex': 45, 'instruction': 'je\t.LBB15_6'}, {'instIndex': 46, 'instruction': 'cmpq\t$0, 0x25c0(%rsp)'}, {'instIndex': 47, 'instruction': 'je\t.LBB15_5'}, {'instIndex': 48, 'instruction': 'movq\t0x25c0(%rsp), %rdi'}, {'instIndex': 49, 'instruction': 'leaq\t.L.str.0xac(%rip), %rsi'}, {'instIndex': 50, 'instruction': 'callq\tstrstr@PLT'}, {'instIndex': 51, 'instruction': 'cmpq\t$0, %rax'}, {'instIndex': 52, 'instruction': 'jne\t.LBB15_6'}, {'instIndex': 53, 'instruction': 'leaq\t0x15a0(%rsp), %rdi'}, {'instIndex': 54, 'instruction': 'movq\t0x25a8(%rsp), %rcx'}, {'instIndex': 55, 'instruction': 'addq\t$0x34, %rcx'}, {'instIndex': 56, 'instruction': 'movl\t$0x1000, %esi                     # imm = 0x0x3e8'}, {'instIndex': 57, 'instruction': 'leaq\t.L.str.0x4b(%rip), %rdx'}, {'instIndex': 58, 'instruction': 'movb\t$0, %al'}, {'instIndex': 59, 'instruction': 'callq\tav_strlcatf@PLT'}]}]
/home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1dd1b2332ebbac710d8e0214cec7595e118f2105/clang_after/no/rtsp.o
Patched information:
The extraction of assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1dd1b2332ebbac710d8e0214cec7595e118f2105/clang_after/no/rtsp.o---after
The extraction of function: rtsp_send_cmd_with_content_async
Analyzing the binaries to generate subCFGs from patched function ...
It has 1587 nodes and 2879 edges in CFGFast
The subCFGs and subCGs Analysis have been finished ...
There are 147 instructions in binary file.
[4207191, 4207202, 4207228, 4207266, 4207300, 4207317, 4207328, 4207348, 4207354]
The execution time of patched subCFG information extraction via angr: 0:00:02.099755
{'rtsp_send_cmd_with_content_async': [{'patched_tag': 'after', 'cfg_block_info': [{'block_Idx': 11, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4032e0>, <DisassemblerInsn "lea" for 0x4032e8>, <DisassemblerInsn "call" for 0x4032ef>]'}, {'block_Idx': 10, 'blockInsts': '[<DisassemblerInsn "lea" for 0x4032fa>, <DisassemblerInsn "mov" for 0x403302>, <DisassemblerInsn "add" for 0x40330a>, <DisassemblerInsn "mov" for 0x40330e>, <DisassemblerInsn "lea" for 0x403313>, <DisassemblerInsn "mov" for 0x40331a>, <DisassemblerInsn "call" for 0x40331c>]'}, {'block_Idx': 1, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x403257>, <DisassemblerInsn "je" for 0x403260>]'}, {'block_Idx': 5, 'blockInsts': '[<DisassemblerInsn "mov" for 0x4032c4>, <DisassemblerInsn "movsx" for 0x4032cc>, <DisassemblerInsn "cmp" for 0x4032d0>, <DisassemblerInsn "je" for 0x4032d3>]'}, {'block_Idx': 4, 'blockInsts': '[<DisassemblerInsn "lea" for 0x4032a2>, <DisassemblerInsn "mov" for 0x4032aa>, <DisassemblerInsn "lea" for 0x4032af>, <DisassemblerInsn "lea" for 0x4032b6>, <DisassemblerInsn "mov" for 0x4032bd>, <DisassemblerInsn "call" for 0x4032bf>]'}, {'block_Idx': 2, 'blockInsts': '[<DisassemblerInsn "lea" for 0x40327c>, <DisassemblerInsn "mov" for 0x403284>, <DisassemblerInsn "mov" for 0x40328c>, <DisassemblerInsn "mov" for 0x40328f>, <DisassemblerInsn "lea" for 0x403294>, <DisassemblerInsn "mov" for 0x40329b>, <DisassemblerInsn "call" for 0x40329d>]'}, {'block_Idx': 6, 'blockInsts': '[<DisassemblerInsn "mov" for 0x403321>, <DisassemblerInsn "cmp" for 0x403329>, <DisassemblerInsn "je" for 0x403330>]'}, {'block_Idx': 3, 'blockInsts': '[<DisassemblerInsn "lea" for 0x403262>, <DisassemblerInsn "mov" for 0x40326a>, <DisassemblerInsn "mov" for 0x403272>, <DisassemblerInsn "call" for 0x403277>]'}, {'block_Idx': 0, 'blockInsts': '[<DisassemblerInsn "sub" for 0x4031c0>, <DisassemblerInsn "mov" for 0x4031c7>, <DisassemblerInsn "mov" for 0x4031cf>, <DisassemblerInsn "mov" for 0x4031d7>, <DisassemblerInsn "mov" for 0x4031df>, <DisassemblerInsn "mov" for 0x4031e7>, <DisassemblerInsn "mov" for 0x4031ef>, <DisassemblerInsn "mov" for 0x4031f7>, <DisassemblerInsn "mov" for 0x4031ff>, <DisassemblerInsn "mov" for 0x403203>, <DisassemblerInsn "lea" for 0x40320b>, <DisassemblerInsn "mov" for 0x403213>, <DisassemblerInsn "mov" for 0x40321b>, <DisassemblerInsn "mov" for 0x403223>, <DisassemblerInsn "add" for 0x403226>, <DisassemblerInsn "mov" for 0x403229>, <DisassemblerInsn "lea" for 0x40322c>, <DisassemblerInsn "mov" for 0x403234>, <DisassemblerInsn "mov" for 0x40323c>, <DisassemblerInsn "mov" for 0x403244>, <DisassemblerInsn "lea" for 0x403249>, <DisassemblerInsn "mov" for 0x403250>, <DisassemblerInsn "call" for 0x403252>]'}, {'block_Idx': 15, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4032f4>, <DisassemblerInsn "jne" for 0x4032f8>]'}, {'block_Idx': 7, 'blockInsts': '[<DisassemblerInsn "cmp" for 0x4032d5>, <DisassemblerInsn "je" for 0x4032de>]'}], 'cfg_block_detailed_info': [{'block_Idx': 11, 'blockInsts': ['<mov~~rdi, qword ptr [rsp + 0x25c0]>', '<lea~~rsi, [rip + 0x497b]>', '<call~~0x500048>']}, {'block_Idx': 10, 'blockInsts': ['<lea~~rdi, [rsp + 0x15a0]>', '<mov~~rcx, qword ptr [rsp + 0x25a8]>', '<add~~rcx, 0x34>', '<mov~~esi, 0x1000>', '<lea~~rdx, [rip + 0x42ef]>', '<mov~~al, 0>', '<call~~0x500178>']}, {'block_Idx': 1, 'blockInsts': ['<cmp~~qword ptr [rsp + 0x25c0], 0>', '<je~~0x40327c>']}, {'block_Idx': 5, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x25a8]>', '<movsx~~eax, byte ptr [rax + 0x34]>', '<cmp~~eax, 0>', '<je~~0x403321>']}, {'block_Idx': 4, 'blockInsts': ['<lea~~rdi, [rsp + 0x15a0]>', '<mov~~esi, 0x1000>', '<lea~~rdx, [rip + 0x4998]>', '<lea~~rcx, [rip + 0x49a2]>', '<mov~~al, 0>', '<call~~0x500178>']}, {'block_Idx': 2, 'blockInsts': ['<lea~~rdi, [rsp + 0x15a0]>', '<mov~~rax, qword ptr [rsp + 0x25a8]>', '<mov~~ecx, dword ptr [rax + 0x30]>', '<mov~~esi, 0x1000>', '<lea~~rdx, [rip + 0x4363]>', '<mov~~al, 0>', '<call~~0x500178>']}, {'block_Idx': 6, 'blockInsts': ['<mov~~rax, qword ptr [rsp + 0x25a8]>', '<cmp~~byte ptr [rax + 0x28c], 0>', '<je~~0x403393>']}, {'block_Idx': 3, 'blockInsts': ['<lea~~rdi, [rsp + 0x15a0]>', '<mov~~rsi, qword ptr [rsp + 0x25c0]>', '<mov~~edx, 0x1000>', '<call~~0x5000a8>']}, {'block_Idx': 0, 'blockInsts': ['<sub~~rsp, 0x25e8>', '<mov~~qword ptr [rsp + 0x25d8], rdi>', '<mov~~qword ptr [rsp + 0x25d0], rsi>', '<mov~~qword ptr [rsp + 0x25c8], rdx>', '<mov~~qword ptr [rsp + 0x25c0], rcx>', '<mov~~qword ptr [rsp + 0x25b8], r8>', '<mov~~dword ptr [rsp + 0x25b4], r9d>', '<mov~~rax, qword ptr [rsp + 0x25d8]>', '<mov~~rax, qword ptr [rax + 0x18]>', '<mov~~qword ptr [rsp + 0x25a8], rax>', '<lea~~rax, [rsp + 0x15a0]>', '<mov~~qword ptr [rsp + 0x1598], rax>', '<mov~~rax, qword ptr [rsp + 0x25a8]>', '<mov~~ecx, dword ptr [rax + 0x30]>', '<add~~ecx, 1>', '<mov~~dword ptr [rax + 0x30], ecx>', '<lea~~rdi, [rsp + 0x15a0]>', '<mov~~rcx, qword ptr [rsp + 0x25d0]>', '<mov~~r8, qword ptr [rsp + 0x25c8]>', '<mov~~esi, 0x1000>', '<lea~~rdx, [rip + 0x49ed]>', '<mov~~al, 0>', '<call~~0x500170>']}, {'block_Idx': 15, 'blockInsts': ['<cmp~~rax, 0>', '<jne~~0x403321>']}, {'block_Idx': 7, 'blockInsts': ['<cmp~~qword ptr [rsp + 0x25c0], 0>', '<je~~0x4032fa>']}], 'cfg_edge_info': [(0, 1), (2, 4), (1, 2), (7, 10), (5, 7), (15, 10), (4, 5), (15, 6), (11, 15), (5, 6), (10, 6), (3, 2), (7, 11), (1, 3)]}]}
{'rtsp_send_cmd_with_content_async': [4207191, 4207202, 4207228, 4207266, 4207300, 4207317, 4207328, 4207348, 4207354]}
The extraction of slicing assembly code from binary: /home/xu/SoftwarePatch/judged/negatives/divided/1/libav.libav/1dd1b2332ebbac710d8e0214cec7595e118f2105/clang_after/no/rtsp.o---after
The extraction of function: rtsp_send_cmd_with_content_async
[4207191, 4207202, 4207228, 4207266, 4207300, 4207317, 4207328, 4207348, 4207354]
Analyzing the binaries to generate subCFGs starting from patched function...
